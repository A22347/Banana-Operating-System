
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 7a fc 00 00       	call   c000fc9a <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 86 02 00       	call   c0028718 <_init>
c0000025:	c3                   	ret    
c0000026:	bb c2 92 02 c0       	mov    ebx,0xc00292c2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d0 92 02 c0    	cmp    ebx,0xc00292d0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 dc 02 c0       	mov    eax,0xc002dc18
c0000049:	3d 18 dc 02 c0       	cmp    eax,0xc002dc18
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 dc 02 c0       	push   0xc002dc18
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 dc 02 c0       	mov    eax,0xc002dc18
c0000075:	2d 18 dc 02 c0       	sub    eax,0xc002dc18
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 dc 02 c0       	push   0xc002dc18
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e248,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d8 92 02 c0       	mov    ebx,0xc00292d8
c00000bb:	81 eb d4 92 02 c0    	sub    ebx,0xc00292d4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d4 92 02 c0       	mov    esi,0xc00292d4
c00000ca:	a1 4c e2 02 c0       	mov    eax,ds:0xc002e24c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c e2 02 c0       	mov    ds:0xc002e24c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c e2 02 c0       	mov    eax,ds:0xc002e24c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 dc 02 c0       	push   0xc002dc18
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e248,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 e2 02 c0       	push   0xc002e250
c000012c:	68 18 dc 02 c0       	push   0xc002dc18
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 c3 d6 01 00       	call   c001da5e <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 ec 29 01 00       	call   c0012d9f <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 a1 d6 01 00       	call   c001da5e <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 ef da 01 00       	call   c001decb <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 9d e0 01 00       	call   c001e482 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 90 e6 02 c0 	lgdtd  ds:0xc002e690
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 ca 46 01 00       	call   c0014ca3 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 68 e2 02 c0       	mov    ds:0xc002e268,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 68 e2 02 c0    	mov    DWORD PTR ds:0xc002e268,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 68 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e268
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 e0 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6d20],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 e0 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d20],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 e0 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6d20],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 e0 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6d20],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 e0 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d20],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 80 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e280
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 80 e2 02 c0    	mov    DWORD PTR ds:0xc002e280,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 84 e2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1d7c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 84 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d7c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 80 e2 02 c0    	mov    DWORD PTR ds:0xc002e280,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ac e2 02 c0    	cmp    DWORD PTR ds:0xc002e2ac,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d bc e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e2bc
c0000e60:	c7 42 0c b4 e2 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e2b4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 bc e2 02 c0    	mov    DWORD PTR ds:0xc002e2bc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ac e2 02 c0    	mov    DWORD PTR ds:0xc002e2ac,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 80 e2 02 c0 02 	test   BYTE PTR ds:0xc002e280,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 f8 e7 00 00       	call   c000f739 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 3a e7 00 00       	call   c000f739 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 24 e7 00 00       	call   c000f739 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 00 e7 00 00       	call   c000f739 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 80 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e280
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 84 e2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1d7c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 84 e2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1d7c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 b4 e2 02 c0 	lea    edx,[eax*8-0x3ffd1d4c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d c0 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2c0
c00011e2:	81 fb b4 e2 02 c0    	cmp    ebx,0xc002e2b4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d b4 e2 02 c0       	cmp    eax,0xc002e2b4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d b0 e2 02 c0    	cmp    DWORD PTR ds:0xc002e2b0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 bc e2 02 c0       	mov    ds:0xc002e2bc,eax
c000121e:	a3 c0 e2 02 c0       	mov    ds:0xc002e2c0,eax
c0001223:	a3 b0 e2 02 c0       	mov    ds:0xc002e2b0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 b4 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e2b4
c0001231:	c7 40 0c b4 e2 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e2b4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 c0 e2 02 c0       	mov    ds:0xc002e2c0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 b4 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e2b4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 78 e2 02 c0 	lea    ebp,[edx*4-0x3ffd1d88]
c0001282:	8b 14 95 80 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1d80]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 80 e2 02 c0 	lea    ecx,[edx*4-0x3ffd1d80]
c000129d:	8b 14 95 80 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1d80]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd b4 e5 02 c0 	or     DWORD PTR [edi*4-0x3ffd1a4c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 b4 e2 02 c0 	lea    eax,[eax*8-0x3ffd1d4c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d bc e2 02 c0    	mov    DWORD PTR ds:0xc002e2bc,ecx
c0001357:	89 0d c0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c0,ecx
c000135d:	c7 41 08 b4 e2 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e2b4
c0001364:	c7 41 0c b4 e2 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e2b4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ac e2 02 c0 	lea    edx,[ecx*8-0x3ffd1d54]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d b4 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1a4c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d b4 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1a4c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ac e2 02 c0 	lea    edx,[eax*4-0x3ffd1d54]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d b4 e5 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1a4c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d bc e2 02 c0    	mov    DWORD PTR ds:0xc002e2bc,edi
c000142a:	89 3d c0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c0,edi
c0001430:	c7 47 08 b4 e2 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e2b4
c0001437:	c7 47 0c b4 e2 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e2b4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d b0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2b0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ac e2 02 c0       	mov    eax,ds:0xc002e2ac
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ac e2 02 c0    	mov    DWORD PTR ds:0xc002e2ac,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 80 e2 02 c0       	mov    edx,0xc002e280
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 80 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e280,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d d4 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5d4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 d4 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5d4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d d4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5d4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 ac e2 02 c0    	cmp    DWORD PTR ds:0xc002e2ac,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d ac e2 02 c0    	mov    DWORD PTR ds:0xc002e2ac,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 80 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e280,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 dc e5 02 c0    	push   DWORD PTR ds:0xc002e5dc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 80 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e280,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 dc e5 02 c0       	mov    eax,ds:0xc002e5dc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d ac e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e2ac,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 ac e2 02 c0       	mov    eax,ds:0xc002e2ac
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 84 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1d7c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 b4 e2 02 c0       	mov    eax,0xc002e2b4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d ac e5 02 c0       	cmp    eax,0xc002e5ac
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 d0 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5d0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 e4 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5e4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 f4 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5f4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 e4 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6c1c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 80 e2 02 c0       	mov    eax,ds:0xc002e280
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 80 e2 02 c0       	mov    ds:0xc002e280,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d c4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d c8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d cc e5 02 c0    	mov    DWORD PTR ds:0xc002e5cc,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 d4 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5d4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 60 1d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce2a0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 4e f2 01 00       	jmp    c0020e7a <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 60 1d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce2a0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 7f f2 01 00       	jmp    c0020ec1 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 60 1d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce2a0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 a7 f2 01 00       	jmp    c0020f08 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 38 4b 02 00       	call   c0026a7c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 00 95 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6b00]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 00 95 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6b00]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 00 94 02 c0       	mov    edx,0xc0029400
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 20 95 02 c0       	mov    edx,0xc0029520
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 98 ca 02 c0       	mov    edx,0xc002ca98
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 2c 95 02 c0       	mov    edx,0xc002952c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 10 95 02 c0       	mov    edx,0xc0029510
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 20 e6 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd19e0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 00 e6 02 c0    	mov    ax,ds:0xc002e600
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 00 e6 02 c0    	mov    ds:0xc002e600,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 35 39 02 00       	call   c0026a7c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 32 95 02 c0       	mov    eax,0xc0029532
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 80 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6b80]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 3b 95 02 c0       	mov    eax,0xc002953b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 00 95 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6b00]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 00 23 02 00       	call   c0026a7c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 10 95 02 c0       	mov    edx,0xc0029510
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 00 94 02 c0       	mov    edx,0xc0029400
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 10 94 02 c0       	mov    edx,0xc0029410
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 20 e6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd19e0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 20 e6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd19e0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 c7 0c 02 00       	call   c0026a7c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 ad 0c 02 00       	call   c0026a7c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 57 94 02 c0       	mov    eax,0xc0029457
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 50 94 02 c0       	mov    eax,0xc0029450
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 20 e6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd19e0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 40 94 02 c0       	mov    esi,0xc0029440
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 f0 f3 01 00       	call   c0026a7c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 20 95 02 c0       	mov    edx,0xc0029520
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 20 94 02 c0       	mov    edx,0xc0029420
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 30 94 02 c0       	mov    edx,0xc0029430
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 42 95 02 c0       	mov    edx,0xc0029542
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 4e 95 02 c0       	mov    edx,0xc002954e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 62 95 02 c0       	mov    edx,0xc0029562
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 3f 74 00 00       	call   c000f8e2 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 39 74 00 00       	call   c000f8f2 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 80 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029880
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 80 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029880
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 80 96 02 c0       	mov    eax,0xc0029680
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 c0 95 02 c0       	mov    eax,0xc00295c0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 80 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a80]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 7e 71 00 00       	call   c000f8f2 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 68 71 00 00       	call   c000f8f2 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 44 fd 01 00       	call   c002854f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 07 fd 01 00       	call   c0028531 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 db fc 01 00       	call   c002854f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 8e f3 01 00       	call   c0027c54 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 08 fe 01 00       	call   c00286e0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 55 fc 01 00       	call   c002854f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 97 fb 01 00       	call   c002854f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 64 fb 01 00       	call   c0028531 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 51 fa 01 00       	call   c002854f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 19 fa 01 00       	call   c0028531 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 47 6d 00 00       	call   c000f912 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 e2 6c 00 00       	call   c000f8f2 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 80 99 02 c0       	mov    eax,0xc0029980
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 25 f8 01 00       	call   c002854f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 ea f7 01 00       	call   c0028531 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 e0 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6220]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 fa f4 01 00       	call   c00282e3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 78 ee 01 00       	call   c0027c80 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 34 f7 01 00       	call   c0028553 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 22 f8 01 00       	call   c0028677 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 0c ee 01 00       	call   c0027c80 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 b7 f6 01 00       	call   c002854d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 98 f6 01 00       	call   c0028551 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 26 f8 01 00       	call   c0028700 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 d8 f3 01 00       	call   c00282e3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 56 ed 01 00       	call   c0027c80 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 12 f6 01 00       	call   c0028553 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 00 f7 01 00       	call   c0028677 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 ea ec 01 00       	call   c0027c80 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 95 f5 01 00       	call   c002854d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 75 f5 01 00       	call   c0028551 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 02 f7 01 00       	call   c0028700 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 b0 f4 01 00       	call   c002854f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 6e f4 01 00       	call   c0028531 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 56 f4 01 00       	call   c002854f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 c8 f1 01 00       	call   c00282e3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 ca e4 01 00       	call   c0027603 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 2d eb 01 00       	call   c0027c80 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 7f f1 01 00       	call   c00282e3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 85 e4 01 00       	call   c0027603 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 54 f1 01 00       	call   c00282e3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 a4 f3 01 00       	call   c002854d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 81 ea 01 00       	call   c0027c54 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 fb f4 01 00       	call   c00286e0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 2a f3 01 00       	call   c0028531 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 25 ea 01 00       	call   c0027c54 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 a3 f0 01 00       	call   c00282e3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 26 ea 01 00       	call   c0027c80 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 78 f0 01 00       	call   c00282e3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 df ec 01 00       	call   c0027f64 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 5e e3 01 00       	call   c0027603 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 be dc 01 00       	call   c0026f98 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 95 f3 01 00       	call   c0028677 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 7e e9 01 00       	call   c0027c80 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 65 f3 01 00       	call   c0028677 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 d7 e2 01 00       	call   c0027603 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 10 f2 01 00       	call   c0028553 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 f8 eb 01 00       	call   c0027f64 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 7e e2 01 00       	call   c0027603 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 64 f3 01 00       	call   c0028700 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 3e ef 01 00       	call   c00282e3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 95 e8 01 00       	call   c0027c54 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 74 f1 01 00       	call   c002854f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 0d e2 01 00       	call   c0027603 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 39 e8 01 00       	call   c0027c54 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 d3 f2 01 00       	call   c0028700 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 8c ee 01 00       	call   c00282e3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 09 e8 01 00       	call   c0027c80 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 5c ee 01 00       	call   c00282e3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 62 e1 01 00       	call   c0027603 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 32 ee 01 00       	call   c00282e3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 84 f0 01 00       	call   c002854f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 5b e7 01 00       	call   c0027c54 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 d5 f1 01 00       	call   c00286e0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 04 f0 01 00       	call   c0028531 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 fe e6 01 00       	call   c0027c54 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 7c ed 01 00       	call   c00282e3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 ff e6 01 00       	call   c0027c80 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 51 ed 01 00       	call   c00282e3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 b8 e9 01 00       	call   c0027f64 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 37 e0 01 00       	call   c0027603 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 87 d9 01 00       	call   c0026f98 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 5e f0 01 00       	call   c0028677 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 47 e6 01 00       	call   c0027c80 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 2e f0 01 00       	call   c0028677 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 a0 df 01 00       	call   c0027603 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 d9 ee 01 00       	call   c0028553 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 c0 e8 01 00       	call   c0027f64 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 3f df 01 00       	call   c0027603 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 25 f0 01 00       	call   c0028700 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 ff eb 01 00       	call   c00282e3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 56 e5 01 00       	call   c0027c54 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 35 ee 01 00       	call   c002854f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 ce de 01 00       	call   c0027603 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 fa e4 01 00       	call   c0027c54 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 6f eb 01 00       	call   c00282e3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 75 de 01 00       	call   c0027603 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 40 9e 02 c0       	mov    eax,0xc0029e40
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 54 9e 02 c0       	mov    eax,0xc0029e54
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 7b 60 00 00       	call   c000f8f2 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 7d 60 00 00       	call   c000f912 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 ea e9 01 00       	call   c00282e3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 68 e3 01 00       	call   c0027c80 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 fa d5 01 00       	call   c0026f98 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 d1 ec 01 00       	call   c0028677 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 ba e2 01 00       	call   c0027c80 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 9d ec 01 00       	call   c0028677 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 0f dc 01 00       	call   c0027603 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 6f ec 01 00       	call   c0028677 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 5e e2 01 00       	call   c0027c80 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 c7 db 01 00       	call   c0027603 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 e8 d4 01 00       	call   c0026f98 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 bf eb 01 00       	call   c0028677 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 a8 e1 01 00       	call   c0027c80 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 8b eb 01 00       	call   c0028677 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 fd da 01 00       	call   c0027603 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 5d eb 01 00       	call   c0028677 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 4c e1 01 00       	call   c0027c80 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 b5 da 01 00       	call   c0027603 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 93 da 01 00       	call   c0027603 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 6f d3 01 00       	call   c0026f98 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 46 ea 01 00       	call   c0028677 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 2f e0 01 00       	call   c0027c80 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 12 ea 01 00       	call   c0028677 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 84 d9 01 00       	call   c0027603 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 e4 e9 01 00       	call   c0028677 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 cd df 01 00       	call   c0027c80 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 36 d9 01 00       	call   c0027603 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 96 e9 01 00       	call   c0028677 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 7f df 01 00       	call   c0027c80 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 e8 d8 01 00       	call   c0027603 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 fd d1 01 00       	call   c0026f98 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 d4 e8 01 00       	call   c0028677 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 bd de 01 00       	call   c0027c80 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 a4 e8 01 00       	call   c0028677 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 16 d8 01 00       	call   c0027603 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 76 e8 01 00       	call   c0028677 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 5f de 01 00       	call   c0027c80 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 c8 d7 01 00       	call   c0027603 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 28 e8 01 00       	call   c0028677 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 11 de 01 00       	call   c0027c80 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 7a d7 01 00       	call   c0027603 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 4e d7 01 00       	call   c0027603 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 ab dd 01 00       	call   c0027c80 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 67 e6 01 00       	call   c0028553 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 f6 d6 01 00       	call   c0027603 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 53 dd 01 00       	call   c0027c80 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 0f e6 01 00       	call   c0028553 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 89 cf 01 00       	call   c0026f98 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 60 e6 01 00       	call   c0028677 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 49 dc 01 00       	call   c0027c80 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 2c e6 01 00       	call   c0028677 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 9e d5 01 00       	call   c0027603 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 fe e5 01 00       	call   c0028677 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 e7 db 01 00       	call   c0027c80 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 50 d5 01 00       	call   c0027603 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 b0 e5 01 00       	call   c0028677 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 99 db 01 00       	call   c0027c80 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 02 d5 01 00       	call   c0027603 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 62 e5 01 00       	call   c0028677 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 4b db 01 00       	call   c0027c80 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 b4 d4 01 00       	call   c0027603 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 14 e5 01 00       	call   c0028677 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 fd da 01 00       	call   c0027c80 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 66 d4 01 00       	call   c0027603 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 68 cd 01 00       	call   c0026f98 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 3f e4 01 00       	call   c0028677 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 28 da 01 00       	call   c0027c80 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 0f e4 01 00       	call   c0028677 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 81 d3 01 00       	call   c0027603 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 e1 e3 01 00       	call   c0028677 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 ca d9 01 00       	call   c0027c80 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 33 d3 01 00       	call   c0027603 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 93 e3 01 00       	call   c0028677 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 7c d9 01 00       	call   c0027c80 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 e5 d2 01 00       	call   c0027603 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 45 e3 01 00       	call   c0028677 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 2e d9 01 00       	call   c0027c80 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 97 d2 01 00       	call   c0027603 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 f7 e2 01 00       	call   c0028677 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 e0 d8 01 00       	call   c0027c80 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 49 d2 01 00       	call   c0027603 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 1d d2 01 00       	call   c0027603 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 7a d8 01 00       	call   c0027c80 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 36 e1 01 00       	call   c0028553 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 c5 d1 01 00       	call   c0027603 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 22 d8 01 00       	call   c0027c80 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 de e0 01 00       	call   c0028553 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 6c d1 01 00       	call   c0027603 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 c9 d7 01 00       	call   c0027c80 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 85 e0 01 00       	call   c0028553 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 13 d1 01 00       	call   c0027603 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 70 d7 01 00       	call   c0027c80 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 2c e0 01 00       	call   c0028553 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 8a c9 01 00       	call   c0026f98 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 61 e0 01 00       	call   c0028677 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 4a d6 01 00       	call   c0027c80 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 2d e0 01 00       	call   c0028677 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 9f cf 01 00       	call   c0027603 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 ff df 01 00       	call   c0028677 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 e8 d5 01 00       	call   c0027c80 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 51 cf 01 00       	call   c0027603 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 b1 df 01 00       	call   c0028677 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 9a d5 01 00       	call   c0027c80 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 03 cf 01 00       	call   c0027603 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 63 df 01 00       	call   c0028677 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 4c d5 01 00       	call   c0027c80 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 b5 ce 01 00       	call   c0027603 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 15 df 01 00       	call   c0028677 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 fe d4 01 00       	call   c0027c80 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 67 ce 01 00       	call   c0027603 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 c7 de 01 00       	call   c0028677 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 b0 d4 01 00       	call   c0027c80 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 16 ce 01 00       	call   c0027603 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 76 de 01 00       	call   c0028677 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 5f d4 01 00       	call   c0027c80 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 c8 cd 01 00       	call   c0027603 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 c2 c6 01 00       	call   c0026f98 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 99 dd 01 00       	call   c0028677 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 82 d3 01 00       	call   c0027c80 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 62 dd 01 00       	call   c0028677 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 d4 cc 01 00       	call   c0027603 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 34 dd 01 00       	call   c0028677 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 1d d3 01 00       	call   c0027c80 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 86 cc 01 00       	call   c0027603 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 e6 dc 01 00       	call   c0028677 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 cf d2 01 00       	call   c0027c80 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 38 cc 01 00       	call   c0027603 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 98 dc 01 00       	call   c0028677 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 81 d2 01 00       	call   c0027c80 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 ea cb 01 00       	call   c0027603 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 4a dc 01 00       	call   c0028677 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 33 d2 01 00       	call   c0027c80 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 9c cb 01 00       	call   c0027603 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 fc db 01 00       	call   c0028677 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 e5 d1 01 00       	call   c0027c80 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 4b cb 01 00       	call   c0027603 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 ab db 01 00       	call   c0028677 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 94 d1 01 00       	call   c0027c80 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 03 cb 01 00       	call   c0027603 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 dc ca 01 00       	call   c0027603 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 3a d1 01 00       	call   c0027c80 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 f6 d9 01 00       	call   c0028553 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 85 ca 01 00       	call   c0027603 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 e3 d0 01 00       	call   c0027c80 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 9f d9 01 00       	call   c0028553 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 2d ca 01 00       	call   c0027603 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 8b d0 01 00       	call   c0027c80 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 47 d9 01 00       	call   c0028553 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 d5 c9 01 00       	call   c0027603 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 33 d0 01 00       	call   c0027c80 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 ef d8 01 00       	call   c0028553 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 7d c9 01 00       	call   c0027603 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 db cf 01 00       	call   c0027c80 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 97 d8 01 00       	call   c0028553 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 2b c9 01 00       	call   c0027603 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 89 cf 01 00       	call   c0027c80 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 45 d8 01 00       	call   c0028553 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 59 c1 01 00       	call   c0026f98 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 30 d8 01 00       	call   c0028677 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 19 ce 01 00       	call   c0027c80 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 00 d8 01 00       	call   c0028677 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 72 c7 01 00       	call   c0027603 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 84 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd617c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 a6 d7 01 00       	call   c0028677 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 8f cd 01 00       	call   c0027c80 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 fa c6 01 00       	call   c0027603 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 47 d7 01 00       	call   c0028677 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 30 cd 01 00       	call   c0027c80 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 9b c6 01 00       	call   c0027603 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 e8 d6 01 00       	call   c0028677 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 d1 cc 01 00       	call   c0027c80 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 3c c6 01 00       	call   c0027603 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 89 d6 01 00       	call   c0028677 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 72 cc 01 00       	call   c0027c80 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 dd c5 01 00       	call   c0027603 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 2a d6 01 00       	call   c0028677 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 13 cc 01 00       	call   c0027c80 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 7e c5 01 00       	call   c0027603 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 cb d5 01 00       	call   c0028677 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 b4 cb 01 00       	call   c0027c80 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 1f c5 01 00       	call   c0027603 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 6c d5 01 00       	call   c0028677 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 55 cb 01 00       	call   c0027c80 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 c0 c4 01 00       	call   c0027603 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 0d d5 01 00       	call   c0028677 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 f6 ca 01 00       	call   c0027c80 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 61 c4 01 00       	call   c0027603 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 6b bd 01 00       	call   c0026f98 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 42 d4 01 00       	call   c0028677 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 2b ca 01 00       	call   c0027c80 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 12 d4 01 00       	call   c0028677 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 84 c3 01 00       	call   c0027603 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 a0 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6160]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 b7 d3 01 00       	call   c0028677 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 a0 c9 01 00       	call   c0027c80 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 0b c3 01 00       	call   c0027603 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 57 d3 01 00       	call   c0028677 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 40 c9 01 00       	call   c0027c80 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 ab c2 01 00       	call   c0027603 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 f7 d2 01 00       	call   c0028677 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 e0 c8 01 00       	call   c0027c80 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 4b c2 01 00       	call   c0027603 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 97 d2 01 00       	call   c0028677 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 80 c8 01 00       	call   c0027c80 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 eb c1 01 00       	call   c0027603 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 37 d2 01 00       	call   c0028677 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 20 c8 01 00       	call   c0027c80 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 8b c1 01 00       	call   c0027603 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 d7 d1 01 00       	call   c0028677 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 c0 c7 01 00       	call   c0027c80 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 2b c1 01 00       	call   c0027603 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 77 d1 01 00       	call   c0028677 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 60 c7 01 00       	call   c0027c80 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 cb c0 01 00       	call   c0027603 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 17 d1 01 00       	call   c0028677 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 00 c7 01 00       	call   c0027c80 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 6b c0 01 00       	call   c0027603 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 bc 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6144]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 10 c0 01 00       	call   c0027603 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 6d c6 01 00       	call   c0027c80 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 29 cf 01 00       	call   c0028553 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 b3 bf 01 00       	call   c0027603 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 10 c6 01 00       	call   c0027c80 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 cc ce 01 00       	call   c0028553 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 56 bf 01 00       	call   c0027603 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 b3 c5 01 00       	call   c0027c80 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 6f ce 01 00       	call   c0028553 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 f9 be 01 00       	call   c0027603 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 56 c5 01 00       	call   c0027c80 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 12 ce 01 00       	call   c0028553 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 9c be 01 00       	call   c0027603 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 f9 c4 01 00       	call   c0027c80 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 b5 cd 01 00       	call   c0028553 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 3f be 01 00       	call   c0027603 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 9c c4 01 00       	call   c0027c80 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 58 cd 01 00       	call   c0028553 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 e2 bd 01 00       	call   c0027603 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 3f c4 01 00       	call   c0027c80 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 fb cc 01 00       	call   c0028553 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 85 bd 01 00       	call   c0027603 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 e2 c3 01 00       	call   c0027c80 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 9e cc 01 00       	call   c0028553 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 9a c3 01 00       	call   c0027c80 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 0a ce 01 00       	jmp    c0028700 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 7c ca 01 00       	call   c002854f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 3a ca 01 00       	call   c0028531 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 d1 c7 01 00       	call   c00282e3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 d2 ba 01 00       	call   c0027603 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 a1 c7 01 00       	call   c00282e3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 08 c4 01 00       	call   c0027f64 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 a7 c9 01 00       	call   c0028531 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 aa c9 01 00       	call   c002854f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 7d c9 01 00       	call   c002854f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 76 c3 01 00       	call   c0027f64 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 f8 ca 01 00       	call   c0028700 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 d3 ca 01 00       	call   c0028700 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 ad c6 01 00       	call   c00282e3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 04 c0 01 00       	call   c0027c54 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 e3 c8 01 00       	call   c002854f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 7c b9 01 00       	call   c0027603 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 a0 bf 01 00       	call   c0027c54 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 3a ca 01 00       	call   c0028700 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 7a c2 01 00       	call   c0027f64 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 f7 b8 01 00       	call   c0027603 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 23 c5 01 00       	call   c00282e3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 23 b8 01 00       	call   c0027603 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 03 b8 01 00       	call   c0027603 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 d3 c4 01 00       	call   c00282e3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 23 c7 01 00       	call   c002854d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 02 be 01 00       	call   c0027c54 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 7c c8 01 00       	call   c00286e0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 ab c6 01 00       	call   c0028531 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 a9 bd 01 00       	call   c0027c54 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 27 c4 01 00       	call   c00282e3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 aa bd 01 00       	call   c0027c80 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 fc c3 01 00       	call   c00282e3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 63 c0 01 00       	call   c0027f64 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 e2 b6 01 00       	call   c0027603 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 ac c3 01 00       	call   c00282e3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 f8 c5 01 00       	call   c002854f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 ed bc 01 00       	call   c0027c80 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 bf bc 01 00       	call   c0027c80 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 f8 c2 01 00       	call   c00282e3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 5c bf 01 00       	call   c0027f64 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 24 bf 01 00       	call   c0027f64 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 a3 b5 01 00       	call   c0027603 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 88 c6 01 00       	call   c0028700 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 62 c2 01 00       	call   c00282e3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 b9 bb 01 00       	call   c0027c54 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 98 c4 01 00       	call   c002854f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 30 b5 01 00       	call   c0027603 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 54 bb 01 00       	call   c0027c54 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 ee c5 01 00       	call   c0028700 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 b7 c3 01 00       	call   c002854f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 75 c3 01 00       	call   c0028531 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 0c c1 01 00       	call   c00282e3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 0d b4 01 00       	call   c0027603 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 dc c0 01 00       	call   c00282e3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 43 bd 01 00       	call   c0027f64 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 e2 c2 01 00       	call   c0028531 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 e5 c2 01 00       	call   c002854f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 b8 c2 01 00       	call   c002854f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 b1 bc 01 00       	call   c0027f64 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 33 c4 01 00       	call   c0028700 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 0e c4 01 00       	call   c0028700 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 e8 bf 01 00       	call   c00282e3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 3f b9 01 00       	call   c0027c54 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 1e c2 01 00       	call   c002854f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 b7 b2 01 00       	call   c0027603 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 db b8 01 00       	call   c0027c54 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 75 c3 01 00       	call   c0028700 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 b5 bb 01 00       	call   c0027f64 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 32 b2 01 00       	call   c0027603 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 5d be 01 00       	call   c00282e3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 5d b1 01 00       	call   c0027603 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 3d b1 01 00       	call   c0027603 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 0d be 01 00       	call   c00282e3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 5d c0 01 00       	call   c002854d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 3b b7 01 00       	call   c0027c54 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 b5 c1 01 00       	call   c00286e0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 e4 bf 01 00       	call   c0028531 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 e1 b6 01 00       	call   c0027c54 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 5f bd 01 00       	call   c00282e3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 e2 b6 01 00       	call   c0027c80 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 34 bd 01 00       	call   c00282e3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 9b b9 01 00       	call   c0027f64 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 1a b0 01 00       	call   c0027603 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 e4 bc 01 00       	call   c00282e3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 30 bf 01 00       	call   c002854f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 25 b6 01 00       	call   c0027c80 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 f7 b5 01 00       	call   c0027c80 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 2e bc 01 00       	call   c00282e3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 92 b8 01 00       	call   c0027f64 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 5f b8 01 00       	call   c0027f64 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 de ae 01 00       	call   c0027603 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 c3 bf 01 00       	call   c0028700 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 9d bb 01 00       	call   c00282e3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 f4 b4 01 00       	call   c0027c54 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 d3 bd 01 00       	call   c002854f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 6b ae 01 00       	call   c0027603 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 8f b4 01 00       	call   c0027c54 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 29 bf 01 00       	call   c0028700 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 f2 bc 01 00       	call   c002854f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 b0 bc 01 00       	call   c0028531 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 47 ba 01 00       	call   c00282e3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 48 ad 01 00       	call   c0027603 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 17 ba 01 00       	call   c00282e3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 7e b6 01 00       	call   c0027f64 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 1d bc 01 00       	call   c0028531 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 20 bc 01 00       	call   c002854f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 f3 bb 01 00       	call   c002854f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 ec b5 01 00       	call   c0027f64 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 6e bd 01 00       	call   c0028700 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 49 bd 01 00       	call   c0028700 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 23 b9 01 00       	call   c00282e3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 7a b2 01 00       	call   c0027c54 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 59 bb 01 00       	call   c002854f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 f2 ab 01 00       	call   c0027603 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 16 b2 01 00       	call   c0027c54 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 b0 bc 01 00       	call   c0028700 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 f0 b4 01 00       	call   c0027f64 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 6d ab 01 00       	call   c0027603 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 98 b7 01 00       	call   c00282e3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 98 aa 01 00       	call   c0027603 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 78 aa 01 00       	call   c0027603 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 48 b7 01 00       	call   c00282e3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 98 b9 01 00       	call   c002854d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 76 b0 01 00       	call   c0027c54 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 f0 ba 01 00       	call   c00286e0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 1f b9 01 00       	call   c0028531 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 1c b0 01 00       	call   c0027c54 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 9a b6 01 00       	call   c00282e3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 1d b0 01 00       	call   c0027c80 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 6f b6 01 00       	call   c00282e3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 d6 b2 01 00       	call   c0027f64 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 55 a9 01 00       	call   c0027603 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 1f b6 01 00       	call   c00282e3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 6b b8 01 00       	call   c002854f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 60 af 01 00       	call   c0027c80 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 32 af 01 00       	call   c0027c80 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 69 b5 01 00       	call   c00282e3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 cd b1 01 00       	call   c0027f64 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 9a b1 01 00       	call   c0027f64 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 19 a8 01 00       	call   c0027603 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 fe b8 01 00       	call   c0028700 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 d8 b4 01 00       	call   c00282e3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 2f ae 01 00       	call   c0027c54 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 0e b7 01 00       	call   c002854f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 a6 a7 01 00       	call   c0027603 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 ca ad 01 00       	call   c0027c54 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 64 b8 01 00       	call   c0028700 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 2d b6 01 00       	call   c002854f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 eb b5 01 00       	call   c0028531 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 82 b3 01 00       	call   c00282e3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 83 a6 01 00       	call   c0027603 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 52 b3 01 00       	call   c00282e3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 b9 af 01 00       	call   c0027f64 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 58 b5 01 00       	call   c0028531 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 5b b5 01 00       	call   c002854f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 2e b5 01 00       	call   c002854f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 27 af 01 00       	call   c0027f64 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 a9 b6 01 00       	call   c0028700 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 84 b6 01 00       	call   c0028700 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 5e b2 01 00       	call   c00282e3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 b5 ab 01 00       	call   c0027c54 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 94 b4 01 00       	call   c002854f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 2d a5 01 00       	call   c0027603 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 51 ab 01 00       	call   c0027c54 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 eb b5 01 00       	call   c0028700 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 2b ae 01 00       	call   c0027f64 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 a8 a4 01 00       	call   c0027603 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 d3 b0 01 00       	call   c00282e3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 d3 a3 01 00       	call   c0027603 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 b3 a3 01 00       	call   c0027603 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 83 b0 01 00       	call   c00282e3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 d3 b2 01 00       	call   c002854d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 b1 a9 01 00       	call   c0027c54 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 2b b4 01 00       	call   c00286e0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 5a b2 01 00       	call   c0028531 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 57 a9 01 00       	call   c0027c54 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 d5 af 01 00       	call   c00282e3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 58 a9 01 00       	call   c0027c80 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 aa af 01 00       	call   c00282e3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 11 ac 01 00       	call   c0027f64 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 90 a2 01 00       	call   c0027603 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 5a af 01 00       	call   c00282e3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 a6 b1 01 00       	call   c002854f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 9b a8 01 00       	call   c0027c80 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 6d a8 01 00       	call   c0027c80 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 a4 ae 01 00       	call   c00282e3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 08 ab 01 00       	call   c0027f64 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 d5 aa 01 00       	call   c0027f64 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 54 a1 01 00       	call   c0027603 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 39 b2 01 00       	call   c0028700 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 13 ae 01 00       	call   c00282e3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 6a a7 01 00       	call   c0027c54 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 49 b0 01 00       	call   c002854f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 e1 a0 01 00       	call   c0027603 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 05 a7 01 00       	call   c0027c54 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 9f b1 01 00       	call   c0028700 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 65 af 01 00       	call   c002854f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 23 af 01 00       	call   c0028531 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 ba ac 01 00       	call   c00282e3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 bb 9f 01 00       	call   c0027603 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 8a ac 01 00       	call   c00282e3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 f1 a8 01 00       	call   c0027f64 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 90 ae 01 00       	call   c0028531 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 93 ae 01 00       	call   c002854f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 66 ae 01 00       	call   c002854f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 5f a8 01 00       	call   c0027f64 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 e1 af 01 00       	call   c0028700 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 b8 af 01 00       	call   c0028700 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 92 ab 01 00       	call   c00282e3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 e9 a4 01 00       	call   c0027c54 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 c8 ad 01 00       	call   c002854f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 61 9e 01 00       	call   c0027603 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 89 a4 01 00       	call   c0027c54 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 23 af 01 00       	call   c0028700 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 64 a7 01 00       	call   c0027f64 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 e1 9d 01 00       	call   c0027603 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 0d aa 01 00       	call   c00282e3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 0d 9d 01 00       	call   c0027603 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 ed 9c 01 00       	call   c0027603 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 bd a9 01 00       	call   c00282e3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 f1 ab 01 00       	call   c0028531 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 e8 a2 01 00       	call   c0027c54 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 62 ad 01 00       	call   c00286e0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 91 ab 01 00       	call   c0028531 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 8b a2 01 00       	call   c0027c54 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 09 a9 01 00       	call   c00282e3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 8c a2 01 00       	call   c0027c80 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 de a8 01 00       	call   c00282e3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 45 a5 01 00       	call   c0027f64 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 c4 9b 01 00       	call   c0027603 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 8e a8 01 00       	call   c00282e3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 da aa 01 00       	call   c002854f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 cf a1 01 00       	call   c0027c80 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 a1 a1 01 00       	call   c0027c80 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 e5 a7 01 00       	call   c00282e3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 4c a4 01 00       	call   c0027f64 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 35 a1 01 00       	call   c0027c80 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 f1 a9 01 00       	call   c0028553 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 e4 a3 01 00       	call   c0027f64 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 63 9a 01 00       	call   c0027603 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 48 ab 01 00       	call   c0028700 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 22 a7 01 00       	call   c00282e3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 79 a0 01 00       	call   c0027c54 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 58 a9 01 00       	call   c002854f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 f0 99 01 00       	call   c0027603 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 18 a0 01 00       	call   c0027c54 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 b2 aa 01 00       	call   c0028700 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 e4 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd611c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 d8 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6128]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 41 1c 00 00       	call   c000f8f2 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 6d a7 01 00       	call   c002854f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 2b a7 01 00       	call   c0028531 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 17 a7 01 00       	call   c002854f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 89 a4 01 00       	call   c00282e3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 07 9e 01 00       	call   c0027c80 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 59 a4 01 00       	call   c00282e3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 5f 97 01 00       	call   c0027603 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 2e a4 01 00       	call   c00282e3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 7e a6 01 00       	call   c002854d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 5f 9d 01 00       	call   c0027c54 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 d9 a7 01 00       	call   c00286e0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 08 a6 01 00       	call   c0028531 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 07 9d 01 00       	call   c0027c54 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 85 a3 01 00       	call   c00282e3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 08 9d 01 00       	call   c0027c80 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 5a a3 01 00       	call   c00282e3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 c1 9f 01 00       	call   c0027f64 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 40 96 01 00       	call   c0027603 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 68 9f 01 00       	call   c0027f64 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 ee 95 01 00       	call   c0027603 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 d4 a6 01 00       	call   c0028700 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ae a2 01 00       	call   c00282e3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 05 9c 01 00       	call   c0027c54 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 e4 a4 01 00       	call   c002854f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 7d 95 01 00       	call   c0027603 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 a9 9b 01 00       	call   c0027c54 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 43 a6 01 00       	call   c0028700 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 f8 a1 01 00       	call   c00282e3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 75 9b 01 00       	call   c0027c80 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 c6 a1 01 00       	call   c00282e3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 cc 94 01 00       	call   c0027603 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 9c a1 01 00       	call   c00282e3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 f0 a3 01 00       	call   c0028551 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 c9 9a 01 00       	call   c0027c54 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 43 a5 01 00       	call   c00286e0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 72 a3 01 00       	call   c0028531 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 70 9a 01 00       	call   c0027c54 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 ee a0 01 00       	call   c00282e3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 71 9a 01 00       	call   c0027c80 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 c3 a0 01 00       	call   c00282e3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 2a 9d 01 00       	call   c0027f64 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 a9 93 01 00       	call   c0027603 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 c5 9c 01 00       	call   c0027f64 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 44 93 01 00       	call   c0027603 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 2a a4 01 00       	call   c0028700 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 04 a0 01 00       	call   c00282e3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 5b 99 01 00       	call   c0027c54 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 3a a2 01 00       	call   c002854f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 d3 92 01 00       	call   c0027603 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 ff 98 01 00       	call   c0027c54 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 70 9f 01 00       	call   c00282e3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 76 92 01 00       	call   c0027603 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 fe 9f 02 c0       	mov    eax,0xc0029ffe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 0f a0 02 c0       	mov    eax,0xc002a00f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 83 14 00 00       	call   c000f8f2 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 85 14 00 00       	call   c000f912 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 f4 13 00 00       	call   c000f8e2 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 46 a0 02 c0       	push   0xc002a046
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 88 e6 02 c0       	mov    eax,0xc002e688
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 4f a0 02 c0       	push   0xc002a04f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 7c 6a 02 c0       	mov    eax,0xc0026a7c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 59 a0 02 c0       	push   0xc002a059
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 b0 67 02 c0       	mov    eax,0xc00267b0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 62 a0 02 c0       	push   0xc002a062
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 7c 6b 02 c0       	mov    eax,0xc0026b7c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 6c a0 02 c0       	push   0xc002a06c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 fc 68 02 c0       	mov    eax,0xc00268fc
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 75 a0 02 c0       	push   0xc002a075
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 8c e6 02 c0       	mov    eax,0xc002e68c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 82 a0 02 c0       	push   0xc002a082
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 8d e6 02 c0       	mov    eax,0xc002e68d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 3b 5f 00 00       	call   c001455e <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <swapper(void*)>:
c000e64a:	55                   	push   ebp
c000e64b:	89 e5                	mov    ebp,esp
c000e64d:	83 ec 08             	sub    esp,0x8
c000e650:	e8 45 f8 00 00       	call   c001de9a <unlockScheduler()>
c000e655:	83 ec 0c             	sub    esp,0xc
c000e658:	6a 02                	push   0x2
c000e65a:	e8 cf fc 00 00       	call   c001e32e <blockTask(TaskState)>
c000e65f:	a1 cc e6 02 c0       	mov    eax,ds:0xc002e6cc
c000e664:	83 c4 10             	add    esp,0x10
c000e667:	8d 04 80             	lea    eax,[eax+eax*4]
c000e66a:	8d 04 80             	lea    eax,[eax+eax*4]
c000e66d:	c1 e0 02             	shl    eax,0x2
c000e670:	99                   	cdq    
c000e671:	f7 3d d0 e6 02 c0    	idiv   DWORD PTR ds:0xc002e6d0
c000e677:	83 f8 46             	cmp    eax,0x46
c000e67a:	7e d9                	jle    c000e655 <swapper(void*)+0xb>
c000e67c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e681:	85 c0                	test   eax,eax
c000e683:	74 d0                	je     c000e655 <swapper(void*)+0xb>
c000e685:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e688:	85 c0                	test   eax,eax
c000e68a:	74 c9                	je     c000e655 <swapper(void*)+0xb>
c000e68c:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e692:	85 c0                	test   eax,eax
c000e694:	74 bf                	je     c000e655 <swapper(void*)+0xb>
c000e696:	83 ec 0c             	sub    esp,0xc
c000e699:	68 8f a0 02 c0       	push   0xc002a08f
c000e69e:	e8 1e 49 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000e6a3:	83 c4 0c             	add    esp,0xc
c000e6a6:	a1 cc e6 02 c0       	mov    eax,ds:0xc002e6cc
c000e6ab:	85 c0                	test   eax,eax
c000e6ad:	79 03                	jns    c000e6b2 <swapper(void*)+0x68>
c000e6af:	83 c0 1f             	add    eax,0x1f
c000e6b2:	c1 f8 05             	sar    eax,0x5
c000e6b5:	83 c0 02             	add    eax,0x2
c000e6b8:	50                   	push   eax
c000e6b9:	6a 04                	push   0x4
c000e6bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e6c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6c3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000e6c9:	e8 d0 45 00 00       	call   c0012c9e <VAS::scanForEviction(int, int)>
c000e6ce:	83 c4 10             	add    esp,0x10
c000e6d1:	eb 82                	jmp    c000e655 <swapper(void*)+0xb>

c000e6d3 <Krnl::firstTask()>:
c000e6d3:	53                   	push   ebx
c000e6d4:	83 ec 14             	sub    esp,0x14
c000e6d7:	fb                   	sti    
c000e6d8:	68 3f 07 00 00       	push   0x73f
c000e6dd:	e8 00 12 00 00       	call   c000f8e2 <malloc>
c000e6e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6e9:	89 c3                	mov    ebx,eax
c000e6eb:	ff 35 f8 1b 03 c0    	push   DWORD PTR ds:0xc0031bf8
c000e6f1:	68 a3 a0 02 c0       	push   0xc002a0a3
c000e6f6:	6a 01                	push   0x1
c000e6f8:	50                   	push   eax
c000e6f9:	e8 ce f5 00 00       	call   c001dccc <Process::Process(bool, char const*, Process*, char**)>
c000e6fe:	83 c4 20             	add    esp,0x20
c000e701:	68 ff 00 00 00       	push   0xff
c000e706:	6a 00                	push   0x0
c000e708:	68 77 f2 00 c0       	push   0xc000f277
c000e70d:	53                   	push   ebx
c000e70e:	e8 b7 f8 00 00       	call   c001dfca <Process::createThread(void (*)(void*), void*, int)>
c000e713:	6a 7a                	push   0x7a
c000e715:	6a 00                	push   0x0
c000e717:	68 28 e8 01 c0       	push   0xc001e828
c000e71c:	ff 35 f8 1b 03 c0    	push   DWORD PTR ds:0xc0031bf8
c000e722:	e8 a3 f8 00 00       	call   c001dfca <Process::createThread(void (*)(void*), void*, int)>
c000e727:	83 c4 20             	add    esp,0x20
c000e72a:	a3 ac 1b 03 c0       	mov    ds:0xc0031bac,eax
c000e72f:	6a 01                	push   0x1
c000e731:	6a 00                	push   0x0
c000e733:	68 4a e6 00 c0       	push   0xc000e64a
c000e738:	ff 35 f8 1b 03 c0    	push   DWORD PTR ds:0xc0031bf8
c000e73e:	e8 87 f8 00 00       	call   c001dfca <Process::createThread(void (*)(void*), void*, int)>
c000e743:	c6 05 8d e6 02 c0 01 	mov    BYTE PTR ds:0xc002e68d,0x1
c000e74a:	a3 a8 1b 03 c0       	mov    ds:0xc0031ba8,eax
c000e74f:	e8 55 04 01 00       	call   c001eba9 <Vm::initialise8086()>
c000e754:	e8 ed 4b 00 00       	call   c0013346 <Fs::initVFS()>
c000e759:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c000e75e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e764:	8b 10                	mov    edx,DWORD PTR [eax]
c000e766:	6a 00                	push   0x0
c000e768:	6a 00                	push   0x0
c000e76a:	6a 00                	push   0x0
c000e76c:	50                   	push   eax
c000e76d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e770:	83 c4 20             	add    esp,0x20
c000e773:	e8 e4 de 00 00       	call   c001c65c <Sys::loadSyscalls()>
c000e778:	e8 bd bd 00 00       	call   c001a53a <Krnl::loadSystemEnv()>
c000e77d:	50                   	push   eax
c000e77e:	6a 3a                	push   0x3a
c000e780:	68 b0 a0 02 c0       	push   0xc002a0b0
c000e785:	68 b9 a0 02 c0       	push   0xc002a0b9
c000e78a:	e8 d1 ca 00 00       	call   c001b260 <Reg::readIntWithDefault(char*, char*, int)>
c000e78f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e792:	e8 97 56 00 00       	call   c0013e2e <User::loadClockSettings(int)>
c000e797:	5a                   	pop    edx
c000e798:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c000e79d:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e7a3:	e8 8a 5d 00 00       	call   c0014532 <Device::loadDriversForAll()>
c000e7a8:	e8 d3 b8 00 00       	call   c001a080 <Krnl::startCPUs()>
c000e7ad:	59                   	pop    ecx
c000e7ae:	8b 1d 88 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e688
c000e7b4:	58                   	pop    eax
c000e7b5:	6a 01                	push   0x1
c000e7b7:	68 c1 a0 02 c0       	push   0xc002a0c1
c000e7bc:	e8 2f f0 00 00       	call   c001d7f0 <Thr::loadDLL(char const*, bool)>
c000e7c1:	5a                   	pop    edx
c000e7c2:	59                   	pop    ecx
c000e7c3:	53                   	push   ebx
c000e7c4:	50                   	push   eax
c000e7c5:	e8 5a f2 00 00       	call   c001da24 <Thr::executeDLL(unsigned long, void*)>
c000e7ca:	83 c4 10             	add    esp,0x10
c000e7cd:	83 ec 0c             	sub    esp,0xc
c000e7d0:	6a 02                	push   0x2
c000e7d2:	e8 57 fb 00 00       	call   c001e32e <blockTask(TaskState)>
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	eb f1                	jmp    c000e7cd <Krnl::firstTask()+0xfa>

c000e7dc <Computer::Computer()>:
c000e7dc:	83 ec 0c             	sub    esp,0xc
c000e7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e3:	83 ec 08             	sub    esp,0x8
c000e7e6:	68 dd a0 02 c0       	push   0xc002a0dd
c000e7eb:	50                   	push   eax
c000e7ec:	e8 e7 5d 00 00       	call   c00145d8 <Device::Device(char const*)>
c000e7f1:	83 c4 10             	add    esp,0x10
c000e7f4:	ba 7c a2 02 c0       	mov    edx,0xc002a27c
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	89 10                	mov    DWORD PTR [eax],edx
c000e7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e803:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e80d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e811:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e81b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e825:	83 ca 04             	or     edx,0x4
c000e828:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e82e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e832:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e838:	0f b6 d0             	movzx  edx,al
c000e83b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83f:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e850:	0f b6 d0             	movzx  edx,al
c000e853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e857:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e85c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e860:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e866:	8d 50 01             	lea    edx,[eax+0x1]
c000e869:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e86d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e873:	0f b6 d0             	movzx  edx,al
c000e876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e87e:	83 e1 3f             	and    ecx,0x3f
c000e881:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e889:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e88f:	0f b6 d0             	movzx  edx,al
c000e892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e896:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e89d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a7:	0f b6 d0             	movzx  edx,al
c000e8aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ae:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bd:	8d 50 01             	lea    edx,[eax+0x1]
c000e8c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8c4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8ca:	0f b6 d0             	movzx  edx,al
c000e8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8d5:	83 e1 3f             	and    ecx,0x3f
c000e8d8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e6:	0f b6 d0             	movzx  edx,al
c000e8e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ed:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8fe:	0f b6 d0             	movzx  edx,al
c000e901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e905:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e90e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e914:	8d 50 01             	lea    edx,[eax+0x1]
c000e917:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e91b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e921:	0f b6 d0             	movzx  edx,al
c000e924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e928:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e92c:	83 e1 3f             	and    ecx,0x3f
c000e92f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e933:	90                   	nop
c000e934:	83 c4 0c             	add    esp,0xc
c000e937:	c3                   	ret    

c000e938 <Computer::setBootMessage(char const*)>:
c000e938:	c3                   	ret    
c000e939:	90                   	nop

c000e93a <Computer::detectFeatures()>:
c000e93a:	55                   	push   ebp
c000e93b:	57                   	push   edi
c000e93c:	56                   	push   esi
c000e93d:	53                   	push   ebx
c000e93e:	83 ec 1c             	sub    esp,0x1c
c000e941:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e945:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e94f:	e8 90 19 ff ff       	call   c00002e4 <detectCPUID>
c000e954:	85 c0                	test   eax,eax
c000e956:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e95c:	0f 95 c2             	setne  dl
c000e95f:	83 e0 fd             	and    eax,0xfffffffd
c000e962:	d1 e2                	shl    edx,1
c000e964:	09 d0                	or     eax,edx
c000e966:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e96c:	a8 02                	test   al,0x2
c000e96e:	75 46                	jne    c000e9b6 <Computer::detectFeatures()+0x7c>
c000e970:	f6 05 a1 e6 02 c0 04 	test   BYTE PTR ds:0xc002e6a1,0x4
c000e977:	74 07                	je     c000e980 <Computer::detectFeatures()+0x46>
c000e979:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e980:	e8 c1 7d 01 00       	call   c0026746 <x87Detect>
c000e985:	83 e0 01             	and    eax,0x1
c000e988:	c1 e0 04             	shl    eax,0x4
c000e98b:	88 c2                	mov    dl,al
c000e98d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e993:	83 e0 ef             	and    eax,0xffffffef
c000e996:	09 d0                	or     eax,edx
c000e998:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e99e:	a8 10                	test   al,0x10
c000e9a0:	0f 85 2a 01 00 00    	jne    c000ead0 <Computer::detectFeatures()+0x196>
c000e9a6:	84 c0                	test   al,al
c000e9a8:	0f 88 45 01 00 00    	js     c000eaf3 <Computer::detectFeatures()+0x1b9>
c000e9ae:	83 c4 1c             	add    esp,0x1c
c000e9b1:	5b                   	pop    ebx
c000e9b2:	5e                   	pop    esi
c000e9b3:	5f                   	pop    edi
c000e9b4:	5d                   	pop    ebp
c000e9b5:	c3                   	ret    
c000e9b6:	83 ec 0c             	sub    esp,0xc
c000e9b9:	6a 20                	push   0x20
c000e9bb:	e8 d2 a3 00 00       	call   c0018d92 <CPU::cpuidCheckEDX(unsigned int)>
c000e9c0:	83 e0 01             	and    eax,0x1
c000e9c3:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9ca:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9d0:	83 e0 f7             	and    eax,0xfffffff7
c000e9d3:	09 d0                	or     eax,edx
c000e9d5:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9db:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9e2:	e8 ab a3 00 00       	call   c0018d92 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e7:	83 e0 01             	and    eax,0x1
c000e9ea:	88 c2                	mov    dl,al
c000e9ec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9f2:	83 e0 fe             	and    eax,0xfffffffe
c000e9f5:	09 d0                	or     eax,edx
c000e9f7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9fd:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ea04:	e8 89 a3 00 00       	call   c0018d92 <CPU::cpuidCheckEDX(unsigned int)>
c000ea09:	c1 e0 07             	shl    eax,0x7
c000ea0c:	88 c2                	mov    dl,al
c000ea0e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea14:	83 e0 7f             	and    eax,0x7f
c000ea17:	09 d0                	or     eax,edx
c000ea19:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea1f:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea26:	e8 67 a3 00 00       	call   c0018d92 <CPU::cpuidCheckEDX(unsigned int)>
c000ea2b:	83 c4 10             	add    esp,0x10
c000ea2e:	83 e0 01             	and    eax,0x1
c000ea31:	c1 e0 05             	shl    eax,0x5
c000ea34:	88 c2                	mov    dl,al
c000ea36:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3c:	83 e0 df             	and    eax,0xffffffdf
c000ea3f:	09 d0                	or     eax,edx
c000ea41:	f7 05 a0 e6 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e6a0,0x401
c000ea4b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea51:	0f 84 c2 00 00 00    	je     c000eb19 <Computer::detectFeatures()+0x1df>
c000ea57:	83 e0 fe             	and    eax,0xfffffffe
c000ea5a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea60:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea66:	88 c2                	mov    dl,al
c000ea68:	83 e2 09             	and    edx,0x9
c000ea6b:	fe ca                	dec    dl
c000ea6d:	75 09                	jne    c000ea78 <Computer::detectFeatures()+0x13e>
c000ea6f:	83 e0 fe             	and    eax,0xfffffffe
c000ea72:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea78:	83 ec 0c             	sub    esp,0xc
c000ea7b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea7f:	50                   	push   eax
c000ea80:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea84:	55                   	push   ebp
c000ea85:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea89:	57                   	push   edi
c000ea8a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea8e:	56                   	push   esi
c000ea8f:	68 00 00 00 80       	push   0x80000000
c000ea94:	e8 75 a2 00 00       	call   c0018d0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea99:	83 c4 20             	add    esp,0x20
c000ea9c:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000eaa3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa7:	0f 86 c3 fe ff ff    	jbe    c000e970 <Computer::detectFeatures()+0x36>
c000eaad:	83 ec 0c             	sub    esp,0xc
c000eab0:	50                   	push   eax
c000eab1:	55                   	push   ebp
c000eab2:	57                   	push   edi
c000eab3:	56                   	push   esi
c000eab4:	68 01 00 00 80       	push   0x80000001
c000eab9:	e8 50 a2 00 00       	call   c0018d0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eabe:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac8:	83 c4 20             	add    esp,0x20
c000eacb:	e9 a0 fe ff ff       	jmp    c000e970 <Computer::detectFeatures()+0x36>
c000ead0:	e8 2b 7c 01 00       	call   c0026700 <absolutelyNoChanceInHell>
c000ead5:	88 c2                	mov    dl,al
c000ead7:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eadd:	c1 e2 07             	shl    edx,0x7
c000eae0:	83 e0 7f             	and    eax,0x7f
c000eae3:	09 d0                	or     eax,edx
c000eae5:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaeb:	84 c0                	test   al,al
c000eaed:	0f 89 bb fe ff ff    	jns    c000e9ae <Computer::detectFeatures()+0x74>
c000eaf3:	e8 e8 7b 01 00       	call   c00266e0 <avxDetect>
c000eaf8:	83 e0 01             	and    eax,0x1
c000eafb:	c1 e0 05             	shl    eax,0x5
c000eafe:	88 c2                	mov    dl,al
c000eb00:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb06:	83 e0 df             	and    eax,0xffffffdf
c000eb09:	09 d0                	or     eax,edx
c000eb0b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb11:	83 c4 1c             	add    esp,0x1c
c000eb14:	5b                   	pop    ebx
c000eb15:	5e                   	pop    esi
c000eb16:	5f                   	pop    edi
c000eb17:	5d                   	pop    ebp
c000eb18:	c3                   	ret    
c000eb19:	83 ec 0c             	sub    esp,0xc
c000eb1c:	68 00 02 00 00       	push   0x200
c000eb21:	e8 6c a2 00 00       	call   c0018d92 <CPU::cpuidCheckEDX(unsigned int)>
c000eb26:	83 c4 10             	add    esp,0x10
c000eb29:	83 e0 01             	and    eax,0x1
c000eb2c:	88 c2                	mov    dl,al
c000eb2e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb34:	83 e0 fe             	and    eax,0xfffffffe
c000eb37:	09 d0                	or     eax,edx
c000eb39:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb3f:	e9 1c ff ff ff       	jmp    c000ea60 <Computer::detectFeatures()+0x126>

c000eb44 <Computer::displayFeatures()>:
c000eb44:	53                   	push   ebx
c000eb45:	83 ec 14             	sub    esp,0x14
c000eb48:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb4c:	68 ed a0 02 c0       	push   0xc002a0ed
c000eb51:	e8 6b 44 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000eb56:	83 c4 10             	add    esp,0x10
c000eb59:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb60:	0f 85 73 02 00 00    	jne    c000edd9 <Computer::displayFeatures()+0x295>
c000eb66:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000eb6b:	83 ec 08             	sub    esp,0x8
c000eb6e:	50                   	push   eax
c000eb6f:	68 00 a1 02 c0       	push   0xc002a100
c000eb74:	e8 48 44 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000eb79:	83 c4 10             	add    esp,0x10
c000eb7c:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb83:	0f 85 8c 02 00 00    	jne    c000ee15 <Computer::displayFeatures()+0x2d1>
c000eb89:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000eb8e:	83 ec 08             	sub    esp,0x8
c000eb91:	50                   	push   eax
c000eb92:	68 11 a1 02 c0       	push   0xc002a111
c000eb97:	e8 25 44 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000eb9c:	83 c4 10             	add    esp,0x10
c000eb9f:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eba6:	0f 85 5f 02 00 00    	jne    c000ee0b <Computer::displayFeatures()+0x2c7>
c000ebac:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000ebb1:	83 ec 08             	sub    esp,0x8
c000ebb4:	50                   	push   eax
c000ebb5:	68 22 a1 02 c0       	push   0xc002a122
c000ebba:	e8 02 44 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000ebbf:	83 c4 10             	add    esp,0x10
c000ebc2:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000ebc9:	0f 85 32 02 00 00    	jne    c000ee01 <Computer::displayFeatures()+0x2bd>
c000ebcf:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000ebd4:	83 ec 08             	sub    esp,0x8
c000ebd7:	50                   	push   eax
c000ebd8:	68 33 a1 02 c0       	push   0xc002a133
c000ebdd:	e8 df 43 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000ebe2:	83 c4 10             	add    esp,0x10
c000ebe5:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ebec:	0f 85 05 02 00 00    	jne    c000edf7 <Computer::displayFeatures()+0x2b3>
c000ebf2:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000ebf7:	83 ec 08             	sub    esp,0x8
c000ebfa:	50                   	push   eax
c000ebfb:	68 44 a1 02 c0       	push   0xc002a144
c000ec00:	e8 bc 43 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000ec05:	83 c4 10             	add    esp,0x10
c000ec08:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ec0f:	0f 85 d8 01 00 00    	jne    c000eded <Computer::displayFeatures()+0x2a9>
c000ec15:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000ec1a:	83 ec 08             	sub    esp,0x8
c000ec1d:	50                   	push   eax
c000ec1e:	68 55 a1 02 c0       	push   0xc002a155
c000ec23:	e8 99 43 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000ec28:	83 c4 10             	add    esp,0x10
c000ec2b:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ec32:	0f 85 ab 01 00 00    	jne    c000ede3 <Computer::displayFeatures()+0x29f>
c000ec38:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000ec3d:	83 ec 08             	sub    esp,0x8
c000ec40:	50                   	push   eax
c000ec41:	68 66 a1 02 c0       	push   0xc002a166
c000ec46:	e8 76 43 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000ec4b:	83 c4 10             	add    esp,0x10
c000ec4e:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec55:	0f 88 1b 02 00 00    	js     c000ee76 <Computer::displayFeatures()+0x332>
c000ec5b:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000ec60:	83 ec 08             	sub    esp,0x8
c000ec63:	50                   	push   eax
c000ec64:	68 77 a1 02 c0       	push   0xc002a177
c000ec69:	e8 53 43 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec78:	0f 85 a1 01 00 00    	jne    c000ee1f <Computer::displayFeatures()+0x2db>
c000ec7e:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000ec83:	83 ec 08             	sub    esp,0x8
c000ec86:	50                   	push   eax
c000ec87:	68 88 a1 02 c0       	push   0xc002a188
c000ec8c:	e8 30 43 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000ec91:	83 c4 10             	add    esp,0x10
c000ec94:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec9b:	0f 85 cb 01 00 00    	jne    c000ee6c <Computer::displayFeatures()+0x328>
c000eca1:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000eca6:	83 ec 08             	sub    esp,0x8
c000eca9:	50                   	push   eax
c000ecaa:	68 99 a1 02 c0       	push   0xc002a199
c000ecaf:	e8 0d 43 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000ecb4:	83 c4 10             	add    esp,0x10
c000ecb7:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ecbe:	0f 85 9e 01 00 00    	jne    c000ee62 <Computer::displayFeatures()+0x31e>
c000ecc4:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000ecc9:	83 ec 08             	sub    esp,0x8
c000eccc:	50                   	push   eax
c000eccd:	68 aa a1 02 c0       	push   0xc002a1aa
c000ecd2:	e8 ea 42 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000ecd7:	83 c4 10             	add    esp,0x10
c000ecda:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ece1:	0f 85 71 01 00 00    	jne    c000ee58 <Computer::displayFeatures()+0x314>
c000ece7:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000ecec:	83 ec 08             	sub    esp,0x8
c000ecef:	50                   	push   eax
c000ecf0:	68 bb a1 02 c0       	push   0xc002a1bb
c000ecf5:	e8 c7 42 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000ecfa:	83 c4 10             	add    esp,0x10
c000ecfd:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ed04:	0f 85 44 01 00 00    	jne    c000ee4e <Computer::displayFeatures()+0x30a>
c000ed0a:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000ed0f:	83 ec 08             	sub    esp,0x8
c000ed12:	50                   	push   eax
c000ed13:	68 cc a1 02 c0       	push   0xc002a1cc
c000ed18:	e8 a4 42 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000ed1d:	83 c4 10             	add    esp,0x10
c000ed20:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ed27:	0f 85 17 01 00 00    	jne    c000ee44 <Computer::displayFeatures()+0x300>
c000ed2d:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000ed32:	83 ec 08             	sub    esp,0x8
c000ed35:	50                   	push   eax
c000ed36:	68 dd a1 02 c0       	push   0xc002a1dd
c000ed3b:	e8 81 42 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000ed40:	83 c4 10             	add    esp,0x10
c000ed43:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed4a:	0f 85 ea 00 00 00    	jne    c000ee3a <Computer::displayFeatures()+0x2f6>
c000ed50:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000ed55:	83 ec 08             	sub    esp,0x8
c000ed58:	50                   	push   eax
c000ed59:	68 ee a1 02 c0       	push   0xc002a1ee
c000ed5e:	e8 5e 42 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000ed63:	83 c4 10             	add    esp,0x10
c000ed66:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed6d:	0f 88 0d 01 00 00    	js     c000ee80 <Computer::displayFeatures()+0x33c>
c000ed73:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000ed78:	83 ec 08             	sub    esp,0x8
c000ed7b:	50                   	push   eax
c000ed7c:	68 ff a1 02 c0       	push   0xc002a1ff
c000ed81:	e8 3b 42 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000ed86:	83 c4 10             	add    esp,0x10
c000ed89:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed90:	0f 85 9a 00 00 00    	jne    c000ee30 <Computer::displayFeatures()+0x2ec>
c000ed96:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000ed9b:	83 ec 08             	sub    esp,0x8
c000ed9e:	50                   	push   eax
c000ed9f:	68 10 a2 02 c0       	push   0xc002a210
c000eda4:	e8 18 42 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000edb3:	75 74                	jne    c000ee29 <Computer::displayFeatures()+0x2e5>
c000edb5:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c000edba:	83 ec 08             	sub    esp,0x8
c000edbd:	50                   	push   eax
c000edbe:	68 21 a2 02 c0       	push   0xc002a221
c000edc3:	e8 f9 41 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000edc8:	c7 44 24 20 fc bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bcfc
c000edd0:	83 c4 18             	add    esp,0x18
c000edd3:	5b                   	pop    ebx
c000edd4:	e9 e8 41 00 00       	jmp    c0012fc1 <Dbg::kprintf(char const*, ...)>
c000edd9:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000edde:	e9 88 fd ff ff       	jmp    c000eb6b <Computer::displayFeatures()+0x27>
c000ede3:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000ede8:	e9 50 fe ff ff       	jmp    c000ec3d <Computer::displayFeatures()+0xf9>
c000eded:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000edf2:	e9 23 fe ff ff       	jmp    c000ec1a <Computer::displayFeatures()+0xd6>
c000edf7:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000edfc:	e9 f6 fd ff ff       	jmp    c000ebf7 <Computer::displayFeatures()+0xb3>
c000ee01:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000ee06:	e9 c9 fd ff ff       	jmp    c000ebd4 <Computer::displayFeatures()+0x90>
c000ee0b:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000ee10:	e9 9c fd ff ff       	jmp    c000ebb1 <Computer::displayFeatures()+0x6d>
c000ee15:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000ee1a:	e9 6f fd ff ff       	jmp    c000eb8e <Computer::displayFeatures()+0x4a>
c000ee1f:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000ee24:	e9 5a fe ff ff       	jmp    c000ec83 <Computer::displayFeatures()+0x13f>
c000ee29:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000ee2e:	eb 8a                	jmp    c000edba <Computer::displayFeatures()+0x276>
c000ee30:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000ee35:	e9 61 ff ff ff       	jmp    c000ed9b <Computer::displayFeatures()+0x257>
c000ee3a:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000ee3f:	e9 11 ff ff ff       	jmp    c000ed55 <Computer::displayFeatures()+0x211>
c000ee44:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000ee49:	e9 e4 fe ff ff       	jmp    c000ed32 <Computer::displayFeatures()+0x1ee>
c000ee4e:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000ee53:	e9 b7 fe ff ff       	jmp    c000ed0f <Computer::displayFeatures()+0x1cb>
c000ee58:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000ee5d:	e9 8a fe ff ff       	jmp    c000ecec <Computer::displayFeatures()+0x1a8>
c000ee62:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000ee67:	e9 5d fe ff ff       	jmp    c000ecc9 <Computer::displayFeatures()+0x185>
c000ee6c:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000ee71:	e9 30 fe ff ff       	jmp    c000eca6 <Computer::displayFeatures()+0x162>
c000ee76:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000ee7b:	e9 e0 fd ff ff       	jmp    c000ec60 <Computer::displayFeatures()+0x11c>
c000ee80:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c000ee85:	e9 ee fe ff ff       	jmp    c000ed78 <Computer::displayFeatures()+0x234>

c000ee8a <Computer::rdmsr(unsigned int)>:
c000ee8a:	83 ec 0c             	sub    esp,0xc
c000ee8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee91:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee98:	74 0a                	je     c000eea4 <Computer::rdmsr(unsigned int)+0x1a>
c000ee9a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee9e:	0f 32                	rdmsr  
c000eea0:	83 c4 0c             	add    esp,0xc
c000eea3:	c3                   	ret    
c000eea4:	83 ec 0c             	sub    esp,0xc
c000eea7:	68 32 a2 02 c0       	push   0xc002a232
c000eeac:	e8 c2 b7 00 00       	call   c001a673 <Krnl::panic(char const*)>
c000eeb1:	83 c4 10             	add    esp,0x10
c000eeb4:	eb e4                	jmp    c000ee9a <Computer::rdmsr(unsigned int)+0x10>

c000eeb6 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eeb6:	57                   	push   edi
c000eeb7:	56                   	push   esi
c000eeb8:	52                   	push   edx
c000eeb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eebd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eec1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eec5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eecc:	74 0e                	je     c000eedc <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eece:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eed2:	89 f0                	mov    eax,esi
c000eed4:	89 fa                	mov    edx,edi
c000eed6:	0f 30                	wrmsr  
c000eed8:	58                   	pop    eax
c000eed9:	5e                   	pop    esi
c000eeda:	5f                   	pop    edi
c000eedb:	c3                   	ret    
c000eedc:	83 ec 0c             	sub    esp,0xc
c000eedf:	68 38 a2 02 c0       	push   0xc002a238
c000eee4:	e8 8a b7 00 00       	call   c001a673 <Krnl::panic(char const*)>
c000eee9:	83 c4 10             	add    esp,0x10
c000eeec:	eb e0                	jmp    c000eece <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eeee <Computer::nmiEnabled()>:
c000eeee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eef2:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eef8:	c3                   	ret    
c000eef9:	90                   	nop

c000eefa <Computer::readCMOS(unsigned char)>:
c000eefa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eefe:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef05:	19 c0                	sbb    eax,eax
c000ef07:	83 e0 80             	and    eax,0xffffff80
c000ef0a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef0e:	e6 70                	out    0x70,al
c000ef10:	e4 71                	in     al,0x71
c000ef12:	c3                   	ret    
c000ef13:	90                   	nop

c000ef14 <Computer::enableNMI(bool)>:
c000ef14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef1c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ef22:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ef2a:	eb ce                	jmp    c000eefa <Computer::readCMOS(unsigned char)>

c000ef2c <Computer::open(int, int, void*)>:
c000ef2c:	56                   	push   esi
c000ef2d:	53                   	push   ebx
c000ef2e:	83 ec 10             	sub    esp,0x10
c000ef31:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ef35:	f6 05 a0 e6 02 c0 04 	test   BYTE PTR ds:0xc002e6a0,0x4
c000ef3c:	68 68 12 00 00       	push   0x1268
c000ef41:	0f 94 05 c4 d5 02 c0 	sete   BYTE PTR ds:0xc002d5c4
c000ef48:	e8 95 09 00 00       	call   c000f8e2 <malloc>
c000ef4d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef50:	89 c6                	mov    esi,eax
c000ef52:	e8 0b 93 00 00       	call   c0018262 <ACPI::ACPI()>
c000ef57:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef5d:	58                   	pop    eax
c000ef5e:	5a                   	pop    edx
c000ef5f:	56                   	push   esi
c000ef60:	53                   	push   ebx
c000ef61:	e8 82 54 00 00       	call   c00143e8 <Device::addChild(Device*)>
c000ef66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef69:	e8 cc f9 ff ff       	call   c000e93a <Computer::detectFeatures()>
c000ef6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef71:	e8 ce fb ff ff       	call   c000eb44 <Computer::displayFeatures()>
c000ef76:	59                   	pop    ecx
c000ef77:	5e                   	pop    esi
c000ef78:	6a 01                	push   0x1
c000ef7a:	53                   	push   ebx
c000ef7b:	e8 94 ff ff ff       	call   c000ef14 <Computer::enableNMI(bool)>
c000ef80:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef87:	e8 56 09 00 00       	call   c000f8e2 <malloc>
c000ef8c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef8f:	89 c6                	mov    esi,eax
c000ef91:	e8 b4 9e 00 00       	call   c0018e4a <CPU::CPU()>
c000ef96:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef9c:	58                   	pop    eax
c000ef9d:	5a                   	pop    edx
c000ef9e:	56                   	push   esi
c000ef9f:	53                   	push   ebx
c000efa0:	e8 43 54 00 00       	call   c00143e8 <Device::addChild(Device*)>
c000efa5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000efab:	8b 10                	mov    edx,DWORD PTR [eax]
c000efad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000efb1:	6a 00                	push   0x0
c000efb3:	6a 00                	push   0x0
c000efb5:	50                   	push   eax
c000efb6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efb9:	83 c4 20             	add    esp,0x20
c000efbc:	e8 ad 59 00 00       	call   c001496e <setupFPU()>
c000efc1:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000efc7:	85 c0                	test   eax,eax
c000efc9:	74 1f                	je     c000efea <Computer::open(int, int, void*)+0xbe>
c000efcb:	83 ec 08             	sub    esp,0x8
c000efce:	50                   	push   eax
c000efcf:	53                   	push   ebx
c000efd0:	e8 13 54 00 00       	call   c00143e8 <Device::addChild(Device*)>
c000efd5:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000efdb:	8b 10                	mov    edx,DWORD PTR [eax]
c000efdd:	6a 00                	push   0x0
c000efdf:	6a 00                	push   0x0
c000efe1:	6a 00                	push   0x0
c000efe3:	50                   	push   eax
c000efe4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efe7:	83 c4 20             	add    esp,0x20
c000efea:	83 ec 0c             	sub    esp,0xc
c000efed:	68 d3 e6 00 c0       	push   0xc000e6d3
c000eff2:	e8 d3 f0 00 00       	call   c001e0ca <setupMultitasking(void (*)())>
c000eff7:	83 c4 14             	add    esp,0x14
c000effa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efff:	5b                   	pop    ebx
c000f000:	5e                   	pop    esi
c000f001:	c3                   	ret    

c000f002 <Computer::disableNMI()>:
c000f002:	6a 00                	push   0x0
c000f004:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f008:	e8 07 ff ff ff       	call   c000ef14 <Computer::enableNMI(bool)>
c000f00d:	58                   	pop    eax
c000f00e:	5a                   	pop    edx
c000f00f:	c3                   	ret    

c000f010 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000f010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f014:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000f01b:	19 c0                	sbb    eax,eax
c000f01d:	83 e0 80             	and    eax,0xffffff80
c000f020:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000f024:	e6 70                	out    0x70,al
c000f026:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f02a:	e6 71                	out    0x71,al
c000f02c:	c3                   	ret    
c000f02d:	90                   	nop

c000f02e <Computer::handleNMI()>:
c000f02e:	56                   	push   esi
c000f02f:	53                   	push   ebx
c000f030:	83 ec 10             	sub    esp,0x10
c000f033:	e4 92                	in     al,0x92
c000f035:	89 c6                	mov    esi,eax
c000f037:	e4 61                	in     al,0x61
c000f039:	68 3e a2 02 c0       	push   0xc002a23e
c000f03e:	88 c3                	mov    bl,al
c000f040:	e8 7c 3f 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000f045:	83 c4 10             	add    esp,0x10
c000f048:	83 e6 10             	and    esi,0x10
c000f04b:	75 0d                	jne    c000f05a <Computer::handleNMI()+0x2c>
c000f04d:	f6 c3 40             	test   bl,0x40
c000f050:	75 1d                	jne    c000f06f <Computer::handleNMI()+0x41>
c000f052:	84 db                	test   bl,bl
c000f054:	78 2d                	js     c000f083 <Computer::handleNMI()+0x55>
c000f056:	58                   	pop    eax
c000f057:	5b                   	pop    ebx
c000f058:	5e                   	pop    esi
c000f059:	c3                   	ret    
c000f05a:	83 ec 0c             	sub    esp,0xc
c000f05d:	68 4f a2 02 c0       	push   0xc002a24f
c000f062:	e8 0c b6 00 00       	call   c001a673 <Krnl::panic(char const*)>
c000f067:	83 c4 10             	add    esp,0x10
c000f06a:	f6 c3 40             	test   bl,0x40
c000f06d:	74 e3                	je     c000f052 <Computer::handleNMI()+0x24>
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	68 5c a2 02 c0       	push   0xc002a25c
c000f077:	e8 f7 b5 00 00       	call   c001a673 <Krnl::panic(char const*)>
c000f07c:	83 c4 10             	add    esp,0x10
c000f07f:	84 db                	test   bl,bl
c000f081:	79 d3                	jns    c000f056 <Computer::handleNMI()+0x28>
c000f083:	c7 44 24 10 66 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a266
c000f08b:	5a                   	pop    edx
c000f08c:	5b                   	pop    ebx
c000f08d:	5e                   	pop    esi
c000f08e:	e9 e0 b5 00 00       	jmp    c001a673 <Krnl::panic(char const*)>
c000f093:	90                   	nop

c000f094 <Computer::setDiskActivityLight(int, bool)>:
c000f094:	56                   	push   esi
c000f095:	53                   	push   ebx
c000f096:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f09a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f09f:	77 1b                	ja     c000f0bc <Computer::setDiskActivityLight(int, bool)+0x28>
c000f0a1:	e4 92                	in     al,0x92
c000f0a3:	bb 40 00 00 00       	mov    ebx,0x40
c000f0a8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f0ac:	89 da                	mov    edx,ebx
c000f0ae:	d3 e2                	shl    edx,cl
c000f0b0:	89 f1                	mov    ecx,esi
c000f0b2:	f7 d2                	not    edx
c000f0b4:	d3 e3                	shl    ebx,cl
c000f0b6:	21 d0                	and    eax,edx
c000f0b8:	09 d8                	or     eax,ebx
c000f0ba:	e6 92                	out    0x92,al
c000f0bc:	5b                   	pop    ebx
c000f0bd:	5e                   	pop    esi
c000f0be:	c3                   	ret    
c000f0bf:	90                   	nop

c000f0c0 <GDTEntry::setBase(unsigned int)>:
c000f0c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0c8:	89 c1                	mov    ecx,eax
c000f0ca:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f0ce:	c1 e9 10             	shr    ecx,0x10
c000f0d1:	c1 e8 18             	shr    eax,0x18
c000f0d4:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f0d7:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f0da:	c3                   	ret    
c000f0db:	90                   	nop

c000f0dc <GDTEntry::setLimit(unsigned int)>:
c000f0dc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0e4:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f0e7:	66 89 01             	mov    WORD PTR [ecx],ax
c000f0ea:	83 e2 f0             	and    edx,0xfffffff0
c000f0ed:	c1 e8 10             	shr    eax,0x10
c000f0f0:	83 e0 0f             	and    eax,0xf
c000f0f3:	09 d0                	or     eax,edx
c000f0f5:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0f8:	c3                   	ret    
c000f0f9:	90                   	nop

c000f0fa <GDT::GDT()>:
c000f0fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f108:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f10e:	90                   	nop
c000f10f:	c3                   	ret    

c000f110 <GDT::addEntry(GDTEntry)>:
c000f110:	53                   	push   ebx
c000f111:	83 ec 0c             	sub    esp,0xc
c000f114:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f118:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f11a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f121:	52                   	push   edx
c000f122:	50                   	push   eax
c000f123:	68 a0 a2 02 c0       	push   0xc002a2a0
c000f128:	e8 94 3e 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000f12d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f12f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f133:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f137:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f13b:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f13f:	8d 50 01             	lea    edx,[eax+0x1]
c000f142:	c1 e0 03             	shl    eax,0x3
c000f145:	89 13                	mov    DWORD PTR [ebx],edx
c000f147:	83 c4 18             	add    esp,0x18
c000f14a:	5b                   	pop    ebx
c000f14b:	c3                   	ret    

c000f14c <GDT::getNumberOfEntries()>:
c000f14c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f150:	8b 00                	mov    eax,DWORD PTR [eax]
c000f152:	c3                   	ret    
c000f153:	90                   	nop

c000f154 <GDT::flush()>:
c000f154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f158:	8b 10                	mov    edx,DWORD PTR [eax]
c000f15a:	83 c0 04             	add    eax,0x4
c000f15d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f164:	a3 92 e6 02 c0       	mov    ds:0xc002e692,eax
c000f169:	66 89 15 90 e6 02 c0 	mov    WORD PTR ds:0xc002e690,dx
c000f170:	e9 d3 12 ff ff       	jmp    c0000448 <loadGDT>
c000f175:	90                   	nop

c000f176 <GDT::setup()>:
c000f176:	55                   	push   ebp
c000f177:	57                   	push   edi
c000f178:	56                   	push   esi
c000f179:	53                   	push   ebx
c000f17a:	83 ec 3c             	sub    esp,0x3c
c000f17d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f181:	6a 00                	push   0x0
c000f183:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f187:	53                   	push   ebx
c000f188:	e8 33 ff ff ff       	call   c000f0c0 <GDTEntry::setBase(unsigned int)>
c000f18d:	6a 00                	push   0x0
c000f18f:	53                   	push   ebx
c000f190:	e8 47 ff ff ff       	call   c000f0dc <GDTEntry::setLimit(unsigned int)>
c000f195:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f19d:	6a 00                	push   0x0
c000f19f:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f1a3:	53                   	push   ebx
c000f1a4:	e8 17 ff ff ff       	call   c000f0c0 <GDTEntry::setBase(unsigned int)>
c000f1a9:	68 ff ff ff 00       	push   0xffffff
c000f1ae:	53                   	push   ebx
c000f1af:	e8 28 ff ff ff       	call   c000f0dc <GDTEntry::setLimit(unsigned int)>
c000f1b4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f1b8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1bd:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f1c2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f1c6:	83 c4 20             	add    esp,0x20
c000f1c9:	6a 00                	push   0x0
c000f1cb:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f1cf:	53                   	push   ebx
c000f1d0:	e8 eb fe ff ff       	call   c000f0c0 <GDTEntry::setBase(unsigned int)>
c000f1d5:	68 ff ff ff 00       	push   0xffffff
c000f1da:	53                   	push   ebx
c000f1db:	e8 fc fe ff ff       	call   c000f0dc <GDTEntry::setLimit(unsigned int)>
c000f1e0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f1e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f1e8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f1ec:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f1f0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f1f4:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1f9:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1fe:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f202:	89 d8                	mov    eax,ebx
c000f204:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f208:	80 cc 60             	or     ah,0x60
c000f20b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f20f:	83 c4 0c             	add    esp,0xc
c000f212:	89 f8                	mov    eax,edi
c000f214:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f218:	80 cc 60             	or     ah,0x60
c000f21b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f21f:	89 c7                	mov    edi,eax
c000f221:	55                   	push   ebp
c000f222:	e8 e9 fe ff ff       	call   c000f110 <GDT::addEntry(GDTEntry)>
c000f227:	83 c4 0c             	add    esp,0xc
c000f22a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f22e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f232:	55                   	push   ebp
c000f233:	e8 d8 fe ff ff       	call   c000f110 <GDT::addEntry(GDTEntry)>
c000f238:	83 c4 0c             	add    esp,0xc
c000f23b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f23f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f243:	55                   	push   ebp
c000f244:	e8 c7 fe ff ff       	call   c000f110 <GDT::addEntry(GDTEntry)>
c000f249:	83 c4 0c             	add    esp,0xc
c000f24c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f250:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f254:	53                   	push   ebx
c000f255:	51                   	push   ecx
c000f256:	55                   	push   ebp
c000f257:	e8 b4 fe ff ff       	call   c000f110 <GDT::addEntry(GDTEntry)>
c000f25c:	83 c4 0c             	add    esp,0xc
c000f25f:	57                   	push   edi
c000f260:	56                   	push   esi
c000f261:	55                   	push   ebp
c000f262:	e8 a9 fe ff ff       	call   c000f110 <GDT::addEntry(GDTEntry)>
c000f267:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f26a:	e8 e5 fe ff ff       	call   c000f154 <GDT::flush()>
c000f26f:	83 c4 4c             	add    esp,0x4c
c000f272:	5b                   	pop    ebx
c000f273:	5e                   	pop    esi
c000f274:	5f                   	pop    edi
c000f275:	5d                   	pop    ebp
c000f276:	c3                   	ret    

c000f277 <idleFunction(void*)>:
c000f277:	53                   	push   ebx
c000f278:	83 ec 08             	sub    esp,0x8
c000f27b:	e8 1a ec 00 00       	call   c001de9a <unlockScheduler()>
c000f280:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c000f285:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f28b:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f292:	74 3c                	je     c000f2d0 <idleFunction(void*)+0x59>
c000f294:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f29b:	74 33                	je     c000f2d0 <idleFunction(void*)+0x59>
c000f29d:	31 db                	xor    ebx,ebx
c000f29f:	52                   	push   edx
c000f2a0:	52                   	push   edx
c000f2a1:	68 e1 00 00 00       	push   0xe1
c000f2a6:	50                   	push   eax
c000f2a7:	e8 de fb ff ff       	call   c000ee8a <Computer::rdmsr(unsigned int)>
c000f2ac:	53                   	push   ebx
c000f2ad:	83 e0 02             	and    eax,0x2
c000f2b0:	50                   	push   eax
c000f2b1:	68 e1 00 00 00       	push   0xe1
c000f2b6:	ff 35 88 e6 02 c0    	push   DWORD PTR ds:0xc002e688
c000f2bc:	e8 f5 fb ff ff       	call   c000eeb6 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f2c1:	83 c4 20             	add    esp,0x20
c000f2c4:	e8 b6 0f ff ff       	call   c000027f <doTPAUSE>
c000f2c9:	e8 b2 94 01 00       	call   c0028780 <idleCommon()>
c000f2ce:	eb f4                	jmp    c000f2c4 <idleFunction(void*)+0x4d>
c000f2d0:	fb                   	sti    
c000f2d1:	f4                   	hlt    
c000f2d2:	e8 a9 94 01 00       	call   c0028780 <idleCommon()>
c000f2d7:	eb f7                	jmp    c000f2d0 <idleFunction(void*)+0x59>
c000f2d9:	90                   	nop

c000f2da <IDTEntry::IDTEntry(bool)>:
c000f2da:	83 ec 04             	sub    esp,0x4
c000f2dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2e1:	88 04 24             	mov    BYTE PTR [esp],al
c000f2e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2e8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f2ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2f2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2fa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2fd:	83 e2 f0             	and    edx,0xfffffff0
c000f300:	83 ca 0e             	or     edx,0xe
c000f303:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f306:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f30a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f30d:	83 e2 ef             	and    edx,0xffffffef
c000f310:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f313:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f317:	74 04                	je     c000f31d <IDTEntry::IDTEntry(bool)+0x43>
c000f319:	b2 03                	mov    dl,0x3
c000f31b:	eb 02                	jmp    c000f31f <IDTEntry::IDTEntry(bool)+0x45>
c000f31d:	b2 00                	mov    dl,0x0
c000f31f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f323:	83 e2 03             	and    edx,0x3
c000f326:	88 d1                	mov    cl,dl
c000f328:	c1 e1 05             	shl    ecx,0x5
c000f32b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f32e:	83 e2 9f             	and    edx,0xffffff9f
c000f331:	09 ca                	or     edx,ecx
c000f333:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f336:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f33a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f33d:	83 ca 80             	or     edx,0xffffff80
c000f340:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f343:	90                   	nop
c000f344:	83 c4 04             	add    esp,0x4
c000f347:	c3                   	ret    

c000f348 <IDTEntry::setOffset(unsigned int)>:
c000f348:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f34c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f350:	66 89 02             	mov    WORD PTR [edx],ax
c000f353:	c1 e8 10             	shr    eax,0x10
c000f356:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f35a:	c3                   	ret    
c000f35b:	90                   	nop

c000f35c <IDT::IDT()>:
c000f35c:	90                   	nop
c000f35d:	c3                   	ret    

c000f35e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f35e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f362:	83 c0 30             	add    eax,0x30
c000f365:	c3                   	ret    

c000f366 <IDT::addEntry(IDTEntry, int)>:
c000f366:	53                   	push   ebx
c000f367:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f36b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f36f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f373:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f377:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f37a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f37e:	5b                   	pop    ebx
c000f37f:	c3                   	ret    

c000f380 <IDT::addEntry(int, void (*)(), bool)>:
c000f380:	53                   	push   ebx
c000f381:	83 ec 10             	sub    esp,0x10
c000f384:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f389:	50                   	push   eax
c000f38a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f38e:	53                   	push   ebx
c000f38f:	e8 46 ff ff ff       	call   c000f2da <IDTEntry::IDTEntry(bool)>
c000f394:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f398:	53                   	push   ebx
c000f399:	e8 aa ff ff ff       	call   c000f348 <IDTEntry::setOffset(unsigned int)>
c000f39e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f3ae:	e8 b3 ff ff ff       	call   c000f366 <IDT::addEntry(IDTEntry, int)>
c000f3b3:	83 c4 30             	add    esp,0x30
c000f3b6:	5b                   	pop    ebx
c000f3b7:	c3                   	ret    

c000f3b8 <IDT::flush()>:
c000f3b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3bc:	66 c7 05 98 e6 02 c0 ff 07 	mov    WORD PTR ds:0xc002e698,0x7ff
c000f3c5:	a3 9a e6 02 c0       	mov    ds:0xc002e69a,eax
c000f3ca:	0f 01 1d 98 e6 02 c0 	lidtd  ds:0xc002e698
c000f3d1:	c3                   	ret    

c000f3d2 <IDT::setup()>:
c000f3d2:	57                   	push   edi
c000f3d3:	56                   	push   esi
c000f3d4:	53                   	push   ebx
c000f3d5:	83 ec 10             	sub    esp,0x10
c000f3d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f3dc:	6a 00                	push   0x0
c000f3de:	68 68 04 00 c0       	push   0xc0000468
c000f3e3:	6a 00                	push   0x0
c000f3e5:	53                   	push   ebx
c000f3e6:	e8 95 ff ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f3eb:	6a 00                	push   0x0
c000f3ed:	68 78 04 00 c0       	push   0xc0000478
c000f3f2:	6a 01                	push   0x1
c000f3f4:	53                   	push   ebx
c000f3f5:	e8 86 ff ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f3fa:	83 c4 20             	add    esp,0x20
c000f3fd:	6a 00                	push   0x0
c000f3ff:	68 82 04 00 c0       	push   0xc0000482
c000f404:	6a 02                	push   0x2
c000f406:	53                   	push   ebx
c000f407:	e8 74 ff ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f40c:	6a 00                	push   0x0
c000f40e:	68 8c 04 00 c0       	push   0xc000048c
c000f413:	6a 03                	push   0x3
c000f415:	53                   	push   ebx
c000f416:	e8 65 ff ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f41b:	83 c4 20             	add    esp,0x20
c000f41e:	6a 00                	push   0x0
c000f420:	68 96 04 00 c0       	push   0xc0000496
c000f425:	6a 04                	push   0x4
c000f427:	53                   	push   ebx
c000f428:	e8 53 ff ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f42d:	6a 00                	push   0x0
c000f42f:	68 a0 04 00 c0       	push   0xc00004a0
c000f434:	6a 05                	push   0x5
c000f436:	53                   	push   ebx
c000f437:	e8 44 ff ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f43c:	83 c4 20             	add    esp,0x20
c000f43f:	6a 00                	push   0x0
c000f441:	68 aa 04 00 c0       	push   0xc00004aa
c000f446:	6a 06                	push   0x6
c000f448:	53                   	push   ebx
c000f449:	e8 32 ff ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f44e:	6a 00                	push   0x0
c000f450:	68 b4 04 00 c0       	push   0xc00004b4
c000f455:	6a 07                	push   0x7
c000f457:	53                   	push   ebx
c000f458:	e8 23 ff ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f45d:	83 c4 20             	add    esp,0x20
c000f460:	6a 00                	push   0x0
c000f462:	68 be 04 00 c0       	push   0xc00004be
c000f467:	6a 08                	push   0x8
c000f469:	53                   	push   ebx
c000f46a:	e8 11 ff ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f46f:	6a 00                	push   0x0
c000f471:	68 c6 04 00 c0       	push   0xc00004c6
c000f476:	6a 09                	push   0x9
c000f478:	53                   	push   ebx
c000f479:	e8 02 ff ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f47e:	83 c4 20             	add    esp,0x20
c000f481:	6a 00                	push   0x0
c000f483:	68 d0 04 00 c0       	push   0xc00004d0
c000f488:	6a 0a                	push   0xa
c000f48a:	53                   	push   ebx
c000f48b:	e8 f0 fe ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f490:	6a 00                	push   0x0
c000f492:	68 d8 04 00 c0       	push   0xc00004d8
c000f497:	6a 0b                	push   0xb
c000f499:	53                   	push   ebx
c000f49a:	e8 e1 fe ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f49f:	83 c4 20             	add    esp,0x20
c000f4a2:	6a 00                	push   0x0
c000f4a4:	68 e0 04 00 c0       	push   0xc00004e0
c000f4a9:	6a 0c                	push   0xc
c000f4ab:	53                   	push   ebx
c000f4ac:	e8 cf fe ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f4b1:	6a 00                	push   0x0
c000f4b3:	68 e8 04 00 c0       	push   0xc00004e8
c000f4b8:	6a 0d                	push   0xd
c000f4ba:	53                   	push   ebx
c000f4bb:	e8 c0 fe ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f4c0:	83 c4 20             	add    esp,0x20
c000f4c3:	6a 00                	push   0x0
c000f4c5:	68 f0 04 00 c0       	push   0xc00004f0
c000f4ca:	6a 0e                	push   0xe
c000f4cc:	53                   	push   ebx
c000f4cd:	e8 ae fe ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f4d2:	6a 00                	push   0x0
c000f4d4:	68 f8 04 00 c0       	push   0xc00004f8
c000f4d9:	6a 0f                	push   0xf
c000f4db:	53                   	push   ebx
c000f4dc:	e8 9f fe ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f4e1:	83 c4 20             	add    esp,0x20
c000f4e4:	6a 00                	push   0x0
c000f4e6:	68 02 05 00 c0       	push   0xc0000502
c000f4eb:	6a 10                	push   0x10
c000f4ed:	53                   	push   ebx
c000f4ee:	e8 8d fe ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f4f3:	6a 00                	push   0x0
c000f4f5:	68 0c 05 00 c0       	push   0xc000050c
c000f4fa:	6a 11                	push   0x11
c000f4fc:	53                   	push   ebx
c000f4fd:	e8 7e fe ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f502:	83 c4 20             	add    esp,0x20
c000f505:	6a 00                	push   0x0
c000f507:	68 16 05 00 c0       	push   0xc0000516
c000f50c:	6a 12                	push   0x12
c000f50e:	53                   	push   ebx
c000f50f:	e8 6c fe ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f514:	6a 01                	push   0x1
c000f516:	68 b0 05 00 c0       	push   0xc00005b0
c000f51b:	6a 60                	push   0x60
c000f51d:	53                   	push   ebx
c000f51e:	e8 5d fe ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f523:	83 c4 20             	add    esp,0x20
c000f526:	6a 00                	push   0x0
c000f528:	68 b7 05 00 c0       	push   0xc00005b7
c000f52d:	6a 20                	push   0x20
c000f52f:	53                   	push   ebx
c000f530:	e8 4b fe ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f535:	6a 00                	push   0x0
c000f537:	68 a2 05 00 c0       	push   0xc00005a2
c000f53c:	6a 21                	push   0x21
c000f53e:	53                   	push   ebx
c000f53f:	e8 3c fe ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f544:	83 c4 20             	add    esp,0x20
c000f547:	6a 00                	push   0x0
c000f549:	68 a9 05 00 c0       	push   0xc00005a9
c000f54e:	6a 22                	push   0x22
c000f550:	53                   	push   ebx
c000f551:	e8 2a fe ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f556:	6a 00                	push   0x0
c000f558:	68 20 05 00 c0       	push   0xc0000520
c000f55d:	6a 23                	push   0x23
c000f55f:	53                   	push   ebx
c000f560:	e8 1b fe ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f565:	83 c4 20             	add    esp,0x20
c000f568:	6a 00                	push   0x0
c000f56a:	68 2a 05 00 c0       	push   0xc000052a
c000f56f:	6a 24                	push   0x24
c000f571:	53                   	push   ebx
c000f572:	e8 09 fe ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f577:	6a 00                	push   0x0
c000f579:	68 34 05 00 c0       	push   0xc0000534
c000f57e:	6a 25                	push   0x25
c000f580:	53                   	push   ebx
c000f581:	e8 fa fd ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f586:	83 c4 20             	add    esp,0x20
c000f589:	6a 00                	push   0x0
c000f58b:	68 3e 05 00 c0       	push   0xc000053e
c000f590:	6a 26                	push   0x26
c000f592:	53                   	push   ebx
c000f593:	e8 e8 fd ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f598:	6a 00                	push   0x0
c000f59a:	68 48 05 00 c0       	push   0xc0000548
c000f59f:	6a 27                	push   0x27
c000f5a1:	53                   	push   ebx
c000f5a2:	e8 d9 fd ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f5a7:	83 c4 20             	add    esp,0x20
c000f5aa:	6a 00                	push   0x0
c000f5ac:	68 52 05 00 c0       	push   0xc0000552
c000f5b1:	6a 28                	push   0x28
c000f5b3:	53                   	push   ebx
c000f5b4:	e8 c7 fd ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f5b9:	6a 00                	push   0x0
c000f5bb:	68 5c 05 00 c0       	push   0xc000055c
c000f5c0:	6a 29                	push   0x29
c000f5c2:	53                   	push   ebx
c000f5c3:	e8 b8 fd ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f5c8:	83 c4 20             	add    esp,0x20
c000f5cb:	6a 00                	push   0x0
c000f5cd:	68 66 05 00 c0       	push   0xc0000566
c000f5d2:	6a 2a                	push   0x2a
c000f5d4:	53                   	push   ebx
c000f5d5:	e8 a6 fd ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f5da:	6a 00                	push   0x0
c000f5dc:	68 70 05 00 c0       	push   0xc0000570
c000f5e1:	6a 2b                	push   0x2b
c000f5e3:	53                   	push   ebx
c000f5e4:	e8 97 fd ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f5e9:	83 c4 20             	add    esp,0x20
c000f5ec:	6a 00                	push   0x0
c000f5ee:	68 7a 05 00 c0       	push   0xc000057a
c000f5f3:	6a 2c                	push   0x2c
c000f5f5:	53                   	push   ebx
c000f5f6:	e8 85 fd ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f5fb:	6a 00                	push   0x0
c000f5fd:	68 84 05 00 c0       	push   0xc0000584
c000f602:	6a 2d                	push   0x2d
c000f604:	53                   	push   ebx
c000f605:	e8 76 fd ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f60a:	83 c4 20             	add    esp,0x20
c000f60d:	6a 00                	push   0x0
c000f60f:	68 8e 05 00 c0       	push   0xc000058e
c000f614:	6a 2e                	push   0x2e
c000f616:	53                   	push   ebx
c000f617:	e8 64 fd ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f61c:	6a 00                	push   0x0
c000f61e:	68 98 05 00 c0       	push   0xc0000598
c000f623:	6a 2f                	push   0x2f
c000f625:	53                   	push   ebx
c000f626:	e8 55 fd ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f62b:	83 c4 20             	add    esp,0x20
c000f62e:	6a 00                	push   0x0
c000f630:	68 ed 05 00 c0       	push   0xc00005ed
c000f635:	6a 30                	push   0x30
c000f637:	53                   	push   ebx
c000f638:	e8 43 fd ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f63d:	6a 00                	push   0x0
c000f63f:	68 f7 05 00 c0       	push   0xc00005f7
c000f644:	6a 31                	push   0x31
c000f646:	53                   	push   ebx
c000f647:	e8 34 fd ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f64c:	83 c4 20             	add    esp,0x20
c000f64f:	6a 00                	push   0x0
c000f651:	68 01 06 00 c0       	push   0xc0000601
c000f656:	6a 32                	push   0x32
c000f658:	53                   	push   ebx
c000f659:	e8 22 fd ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f65e:	6a 00                	push   0x0
c000f660:	68 0b 06 00 c0       	push   0xc000060b
c000f665:	6a 33                	push   0x33
c000f667:	53                   	push   ebx
c000f668:	e8 13 fd ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f66d:	83 c4 20             	add    esp,0x20
c000f670:	6a 00                	push   0x0
c000f672:	68 15 06 00 c0       	push   0xc0000615
c000f677:	6a 34                	push   0x34
c000f679:	53                   	push   ebx
c000f67a:	e8 01 fd ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f67f:	6a 00                	push   0x0
c000f681:	68 1f 06 00 c0       	push   0xc000061f
c000f686:	6a 35                	push   0x35
c000f688:	53                   	push   ebx
c000f689:	e8 f2 fc ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f68e:	83 c4 20             	add    esp,0x20
c000f691:	6a 00                	push   0x0
c000f693:	68 29 06 00 c0       	push   0xc0000629
c000f698:	6a 36                	push   0x36
c000f69a:	53                   	push   ebx
c000f69b:	e8 e0 fc ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f6a0:	6a 00                	push   0x0
c000f6a2:	68 33 06 00 c0       	push   0xc0000633
c000f6a7:	6a 37                	push   0x37
c000f6a9:	53                   	push   ebx
c000f6aa:	e8 d1 fc ff ff       	call   c000f380 <IDT::addEntry(int, void (*)(), bool)>
c000f6af:	83 c4 20             	add    esp,0x20
c000f6b2:	e8 e5 27 00 00       	call   c0011e9c <Virt::getAKernelVAS()>
c000f6b7:	52                   	push   edx
c000f6b8:	6a 03                	push   0x3
c000f6ba:	6a 02                	push   0x2
c000f6bc:	50                   	push   eax
c000f6bd:	e8 16 2e 00 00       	call   c00124d8 <VAS::allocatePages(int, int)>
c000f6c2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f6c9:	89 c6                	mov    esi,eax
c000f6cb:	e8 12 02 00 00       	call   c000f8e2 <malloc>
c000f6d0:	81 c6 00 20 00 00    	add    esi,0x2000
c000f6d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6d9:	89 c7                	mov    edi,eax
c000f6db:	e8 52 1e 00 00       	call   c0011532 <TSS::TSS()>
c000f6e0:	83 c4 0c             	add    esp,0xc
c000f6e3:	68 be 04 00 c0       	push   0xc00004be
c000f6e8:	56                   	push   esi
c000f6e9:	57                   	push   edi
c000f6ea:	e8 83 1e 00 00       	call   c0011572 <TSS::setup(unsigned long, unsigned long)>
c000f6ef:	59                   	pop    ecx
c000f6f0:	89 c6                	mov    esi,eax
c000f6f2:	5f                   	pop    edi
c000f6f3:	6a 00                	push   0x0
c000f6f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6f9:	50                   	push   eax
c000f6fa:	e8 db fb ff ff       	call   c000f2da <IDTEntry::IDTEntry(bool)>
c000f6ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f703:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f708:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f70f:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f715:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f719:	80 ce 05             	or     dh,0x5
c000f71c:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f71f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f723:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f727:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f72a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f72d:	e8 86 fc ff ff       	call   c000f3b8 <IDT::flush()>
c000f732:	83 c4 20             	add    esp,0x20
c000f735:	5b                   	pop    ebx
c000f736:	5e                   	pop    esi
c000f737:	5f                   	pop    edi
c000f738:	c3                   	ret    

c000f739 <sbrk>:
c000f739:	55                   	push   ebp
c000f73a:	57                   	push   edi
c000f73b:	56                   	push   esi
c000f73c:	53                   	push   ebx
c000f73d:	83 ec 1c             	sub    esp,0x1c
c000f740:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f744:	85 c0                	test   eax,eax
c000f746:	74 3e                	je     c000f786 <sbrk+0x4d>
c000f748:	78 43                	js     c000f78d <sbrk+0x54>
c000f74a:	8b 15 88 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e688
c000f750:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f756:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f75c:	83 e2 01             	and    edx,0x1
c000f75f:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f763:	8b 0d ac d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5ac
c000f769:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f76d:	05 ff 0f 00 00       	add    eax,0xfff
c000f772:	89 c2                	mov    edx,eax
c000f774:	78 2f                	js     c000f7a5 <sbrk+0x6c>
c000f776:	c1 fa 0c             	sar    edx,0xc
c000f779:	89 d7                	mov    edi,edx
c000f77b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f77f:	be 00 00 00 00       	mov    esi,0x0
c000f784:	eb 36                	jmp    c000f7bc <sbrk+0x83>
c000f786:	a1 ac d5 02 c0       	mov    eax,ds:0xc002d5ac
c000f78b:	eb 74                	jmp    c000f801 <sbrk+0xc8>
c000f78d:	83 ec 08             	sub    esp,0x8
c000f790:	50                   	push   eax
c000f791:	68 bc a2 02 c0       	push   0xc002a2bc
c000f796:	e8 26 38 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000f79b:	83 c4 10             	add    esp,0x10
c000f79e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7a3:	eb 5c                	jmp    c000f801 <sbrk+0xc8>
c000f7a5:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f7ab:	eb c9                	jmp    c000f776 <sbrk+0x3d>
c000f7ad:	81 05 ac d5 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d5ac,0x1000
c000f7b7:	46                   	inc    esi
c000f7b8:	39 f7                	cmp    edi,esi
c000f7ba:	74 34                	je     c000f7f0 <sbrk+0xb7>
c000f7bc:	e8 db 26 00 00       	call   c0011e9c <Virt::getAKernelVAS()>
c000f7c1:	89 c3                	mov    ebx,eax
c000f7c3:	8b 2d ac d5 02 c0    	mov    ebp,DWORD PTR ds:0xc002d5ac
c000f7c9:	e8 b6 07 00 00       	call   c000ff84 <Phys::allocatePage()>
c000f7ce:	68 01 04 00 00       	push   0x401
c000f7d3:	55                   	push   ebp
c000f7d4:	50                   	push   eax
c000f7d5:	53                   	push   ebx
c000f7d6:	e8 fd 2b 00 00       	call   c00123d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7db:	83 c4 10             	add    esp,0x10
c000f7de:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7e3:	74 c8                	je     c000f7ad <sbrk+0x74>
c000f7e5:	8b 1d ac d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5ac
c000f7eb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7ee:	eb bd                	jmp    c000f7ad <sbrk+0x74>
c000f7f0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7f5:	75 12                	jne    c000f809 <sbrk+0xd0>
c000f7f7:	0f 20 d8             	mov    eax,cr3
c000f7fa:	0f 22 d8             	mov    cr3,eax
c000f7fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f801:	83 c4 1c             	add    esp,0x1c
c000f804:	5b                   	pop    ebx
c000f805:	5e                   	pop    esi
c000f806:	5f                   	pop    edi
c000f807:	5d                   	pop    ebp
c000f808:	c3                   	ret    
c000f809:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f80d:	89 cb                	mov    ebx,ecx
c000f80f:	c1 eb 0a             	shr    ebx,0xa
c000f812:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f818:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f81e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f822:	c1 e0 0c             	shl    eax,0xc
c000f825:	01 c8                	add    eax,ecx
c000f827:	c1 e8 0a             	shr    eax,0xa
c000f82a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f82f:	2d 00 00 40 00       	sub    eax,0x400000
c000f834:	39 c3                	cmp    ebx,eax
c000f836:	77 c5                	ja     c000f7fd <sbrk+0xc4>
c000f838:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f83b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f841:	39 d8                	cmp    eax,ebx
c000f843:	73 f3                	jae    c000f838 <sbrk+0xff>
c000f845:	eb b6                	jmp    c000f7fd <sbrk+0xc4>

c000f847 <mmap>:
c000f847:	83 ec 18             	sub    esp,0x18
c000f84a:	68 ec a2 02 c0       	push   0xc002a2ec
c000f84f:	e8 1f ae 00 00       	call   c001a673 <Krnl::panic(char const*)>
c000f854:	b8 00 00 00 00       	mov    eax,0x0
c000f859:	83 c4 1c             	add    esp,0x1c
c000f85c:	c3                   	ret    

c000f85d <munmap>:
c000f85d:	83 ec 18             	sub    esp,0x18
c000f860:	68 f1 a2 02 c0       	push   0xc002a2f1
c000f865:	e8 09 ae 00 00       	call   c001a673 <Krnl::panic(char const*)>
c000f86a:	b8 00 00 00 00       	mov    eax,0x0
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	c3                   	ret    

c000f873 <liballoc_lock()>:
c000f873:	83 ec 0c             	sub    esp,0xc
c000f876:	e8 1d e6 00 00       	call   c001de98 <lockScheduler()>
c000f87b:	b8 00 00 00 00       	mov    eax,0x0
c000f880:	83 c4 0c             	add    esp,0xc
c000f883:	c3                   	ret    

c000f884 <liballoc_unlock()>:
c000f884:	83 ec 0c             	sub    esp,0xc
c000f887:	e8 0e e6 00 00       	call   c001de9a <unlockScheduler()>
c000f88c:	b8 00 00 00 00       	mov    eax,0x0
c000f891:	83 c4 0c             	add    esp,0xc
c000f894:	c3                   	ret    

c000f895 <liballoc_alloc(int)>:
c000f895:	83 ec 0c             	sub    esp,0xc
c000f898:	e8 ff 25 00 00       	call   c0011e9c <Virt::getAKernelVAS()>
c000f89d:	83 ec 04             	sub    esp,0x4
c000f8a0:	6a 01                	push   0x1
c000f8a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8a6:	50                   	push   eax
c000f8a7:	e8 2c 2c 00 00       	call   c00124d8 <VAS::allocatePages(int, int)>
c000f8ac:	83 c4 1c             	add    esp,0x1c
c000f8af:	c3                   	ret    

c000f8b0 <liballoc_free(void*, int)>:
c000f8b0:	83 ec 0c             	sub    esp,0xc
c000f8b3:	e8 e4 25 00 00       	call   c0011e9c <Virt::getAKernelVAS()>
c000f8b8:	83 ec 08             	sub    esp,0x8
c000f8bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8bf:	50                   	push   eax
c000f8c0:	e8 cf 28 00 00       	call   c0012194 <VAS::freeAllocatedPages(unsigned long)>
c000f8c5:	b8 00 00 00 00       	mov    eax,0x0
c000f8ca:	83 c4 1c             	add    esp,0x1c
c000f8cd:	c3                   	ret    

c000f8ce <realloc>:
c000f8ce:	83 ec 14             	sub    esp,0x14
c000f8d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8d9:	e8 76 1d ff ff       	call   c0001654 <dlrealloc>
c000f8de:	83 c4 1c             	add    esp,0x1c
c000f8e1:	c3                   	ret    

c000f8e2 <malloc>:
c000f8e2:	83 ec 18             	sub    esp,0x18
c000f8e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8e9:	e8 29 18 ff ff       	call   c0001117 <dlmalloc>
c000f8ee:	83 c4 1c             	add    esp,0x1c
c000f8f1:	c3                   	ret    

c000f8f2 <free>:
c000f8f2:	83 ec 18             	sub    esp,0x18
c000f8f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8f9:	e8 be 14 ff ff       	call   c0000dbc <dlfree>
c000f8fe:	83 c4 1c             	add    esp,0x1c
c000f901:	c3                   	ret    

c000f902 <rfree>:
c000f902:	83 ec 18             	sub    esp,0x18
c000f905:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f909:	e8 ae 14 ff ff       	call   c0000dbc <dlfree>
c000f90e:	83 c4 1c             	add    esp,0x1c
c000f911:	c3                   	ret    

c000f912 <calloc>:
c000f912:	56                   	push   esi
c000f913:	53                   	push   ebx
c000f914:	83 ec 10             	sub    esp,0x10
c000f917:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f91b:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f920:	53                   	push   ebx
c000f921:	e8 bc ff ff ff       	call   c000f8e2 <malloc>
c000f926:	89 c6                	mov    esi,eax
c000f928:	83 c4 0c             	add    esp,0xc
c000f92b:	53                   	push   ebx
c000f92c:	6a 00                	push   0x0
c000f92e:	50                   	push   eax
c000f92f:	e8 44 0e ff ff       	call   c0000778 <memset>
c000f934:	89 f0                	mov    eax,esi
c000f936:	83 c4 14             	add    esp,0x14
c000f939:	5b                   	pop    ebx
c000f93a:	5e                   	pop    esi
c000f93b:	c3                   	ret    

c000f93c <hwTextMode_loadInData(VgaText*)>:
c000f93c:	55                   	push   ebp
c000f93d:	a1 c0 d5 02 c0       	mov    eax,ds:0xc002d5c0
c000f942:	57                   	push   edi
c000f943:	56                   	push   esi
c000f944:	53                   	push   ebx
c000f945:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f949:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f94f:	85 d2                	test   edx,edx
c000f951:	7e 2f                	jle    c000f982 <hwTextMode_loadInData(VgaText*)+0x46>
c000f953:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f959:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f95c:	31 f6                	xor    esi,esi
c000f95e:	29 fd                	sub    ebp,edi
c000f960:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f963:	31 c0                	xor    eax,eax
c000f965:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f969:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f96d:	40                   	inc    eax
c000f96e:	83 f8 50             	cmp    eax,0x50
c000f971:	75 f2                	jne    c000f965 <hwTextMode_loadInData(VgaText*)+0x29>
c000f973:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f979:	46                   	inc    esi
c000f97a:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f980:	7f de                	jg     c000f960 <hwTextMode_loadInData(VgaText*)+0x24>
c000f982:	5b                   	pop    ebx
c000f983:	5e                   	pop    esi
c000f984:	5f                   	pop    edi
c000f985:	5d                   	pop    ebp
c000f986:	c3                   	ret    

c000f987 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f987:	55                   	push   ebp
c000f988:	80 3d 20 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e720,0x0
c000f98f:	57                   	push   edi
c000f990:	56                   	push   esi
c000f991:	53                   	push   ebx
c000f992:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f996:	75 50                	jne    c000f9e8 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f998:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f99e:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f9a4:	8b 15 c0 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5c0
c000f9aa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f9ae:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f9b4:	eb 0e                	jmp    c000f9c4 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f9b6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f9bc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f9c2:	89 da                	mov    edx,ebx
c000f9c4:	83 e5 0f             	and    ebp,0xf
c000f9c7:	c1 e0 04             	shl    eax,0x4
c000f9ca:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f9cd:	0f b6 c0             	movzx  eax,al
c000f9d0:	41                   	inc    ecx
c000f9d1:	09 e8                	or     eax,ebp
c000f9d3:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f9d7:	c1 e0 08             	shl    eax,0x8
c000f9da:	09 e8                	or     eax,ebp
c000f9dc:	39 fb                	cmp    ebx,edi
c000f9de:	66 89 02             	mov    WORD PTR [edx],ax
c000f9e1:	75 d3                	jne    c000f9b6 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f9e3:	5b                   	pop    ebx
c000f9e4:	5e                   	pop    esi
c000f9e5:	5f                   	pop    edi
c000f9e6:	5d                   	pop    ebp
c000f9e7:	c3                   	ret    
c000f9e8:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f9f2:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f9fc:	31 c0                	xor    eax,eax
c000f9fe:	bd 02 00 00 00       	mov    ebp,0x2
c000fa03:	eb 9f                	jmp    c000f9a4 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000fa05 <hwTextMode_showCursor(VgaText*, bool)>:
c000fa05:	56                   	push   esi
c000fa06:	80 3d 20 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e720,0x0
c000fa0d:	53                   	push   ebx
c000fa0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa12:	75 39                	jne    c000fa4d <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000fa14:	84 c0                	test   al,al
c000fa16:	74 38                	je     c000fa50 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000fa18:	bb d4 03 00 00       	mov    ebx,0x3d4
c000fa1d:	b0 0a                	mov    al,0xa
c000fa1f:	89 da                	mov    edx,ebx
c000fa21:	ee                   	out    dx,al
c000fa22:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000fa27:	89 ca                	mov    edx,ecx
c000fa29:	ec                   	in     al,dx
c000fa2a:	b2 0f                	mov    dl,0xf
c000fa2c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000fa30:	83 e0 c0             	and    eax,0xffffffc0
c000fa33:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000fa39:	09 d0                	or     eax,edx
c000fa3b:	89 ca                	mov    edx,ecx
c000fa3d:	ee                   	out    dx,al
c000fa3e:	b0 0b                	mov    al,0xb
c000fa40:	89 da                	mov    edx,ebx
c000fa42:	ee                   	out    dx,al
c000fa43:	89 ca                	mov    edx,ecx
c000fa45:	ec                   	in     al,dx
c000fa46:	83 e0 e0             	and    eax,0xffffffe0
c000fa49:	83 c8 0f             	or     eax,0xf
c000fa4c:	ee                   	out    dx,al
c000fa4d:	5b                   	pop    ebx
c000fa4e:	5e                   	pop    esi
c000fa4f:	c3                   	ret    
c000fa50:	b0 0a                	mov    al,0xa
c000fa52:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa57:	ee                   	out    dx,al
c000fa58:	b0 20                	mov    al,0x20
c000fa5a:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa5f:	ee                   	out    dx,al
c000fa60:	5b                   	pop    ebx
c000fa61:	5e                   	pop    esi
c000fa62:	c3                   	ret    

c000fa63 <hwTextMode_update(VgaText*)>:
c000fa63:	c3                   	ret    

c000fa64 <hwTextMode_updateCursor(VgaText*)>:
c000fa64:	56                   	push   esi
c000fa65:	80 3d 20 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e720,0x0
c000fa6c:	53                   	push   ebx
c000fa6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa71:	75 3f                	jne    c000fab2 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000fa73:	be d4 03 00 00       	mov    esi,0x3d4
c000fa78:	b9 19 00 00 00       	mov    ecx,0x19
c000fa7d:	89 f2                	mov    edx,esi
c000fa7f:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000fa85:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000fa8b:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fa8e:	c1 e1 04             	shl    ecx,0x4
c000fa91:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000fa97:	b0 0f                	mov    al,0xf
c000fa99:	ee                   	out    dx,al
c000fa9a:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa9f:	88 c8                	mov    al,cl
c000faa1:	89 da                	mov    edx,ebx
c000faa3:	ee                   	out    dx,al
c000faa4:	b0 0e                	mov    al,0xe
c000faa6:	89 f2                	mov    edx,esi
c000faa8:	ee                   	out    dx,al
c000faa9:	89 c8                	mov    eax,ecx
c000faab:	89 da                	mov    edx,ebx
c000faad:	66 c1 e8 08          	shr    ax,0x8
c000fab1:	ee                   	out    dx,al
c000fab2:	5b                   	pop    ebx
c000fab3:	5e                   	pop    esi
c000fab4:	c3                   	ret    

c000fab5 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fab5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fab9:	80 3d 20 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e720,0x0
c000fac0:	75 38                	jne    c000fafa <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fac2:	ba da 03 00 00       	mov    edx,0x3da
c000fac7:	84 c0                	test   al,al
c000fac9:	75 18                	jne    c000fae3 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000facb:	ec                   	in     al,dx
c000facc:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fad1:	b0 30                	mov    al,0x30
c000fad3:	89 ca                	mov    edx,ecx
c000fad5:	ee                   	out    dx,al
c000fad6:	ba c1 03 00 00       	mov    edx,0x3c1
c000fadb:	ec                   	in     al,dx
c000fadc:	83 c8 08             	or     eax,0x8
c000fadf:	89 ca                	mov    edx,ecx
c000fae1:	ee                   	out    dx,al
c000fae2:	c3                   	ret    
c000fae3:	ec                   	in     al,dx
c000fae4:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fae9:	b0 30                	mov    al,0x30
c000faeb:	89 ca                	mov    edx,ecx
c000faed:	ee                   	out    dx,al
c000faee:	ba c1 03 00 00       	mov    edx,0x3c1
c000faf3:	ec                   	in     al,dx
c000faf4:	83 e0 f7             	and    eax,0xfffffff7
c000faf7:	89 ca                	mov    edx,ecx
c000faf9:	ee                   	out    dx,al
c000fafa:	c3                   	ret    

c000fafb <hwTextMode_scrollScreen(VgaText*)>:
c000fafb:	55                   	push   ebp
c000fafc:	57                   	push   edi
c000fafd:	56                   	push   esi
c000fafe:	53                   	push   ebx
c000faff:	83 ec 1c             	sub    esp,0x1c
c000fb02:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb06:	80 3d 20 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e720,0x0
c000fb0d:	74 14                	je     c000fb23 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fb0f:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fb19:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fb23:	a1 c0 d5 02 c0       	mov    eax,ds:0xc002d5c0
c000fb28:	bd 02 00 00 00       	mov    ebp,0x2
c000fb2d:	05 a0 00 00 00       	add    eax,0xa0
c000fb32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb36:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fb3a:	31 c0                	xor    eax,eax
c000fb3c:	eb 0b                	jmp    c000fb49 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fb3e:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb44:	74 57                	je     c000fb9d <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000fb46:	43                   	inc    ebx
c000fb47:	89 f0                	mov    eax,esi
c000fb49:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fb4f:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fb55:	88 13                	mov    BYTE PTR [ebx],dl
c000fb57:	8d 70 01             	lea    esi,[eax+0x1]
c000fb5a:	83 fd 18             	cmp    ebp,0x18
c000fb5d:	75 df                	jne    c000fb3e <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fb5f:	a8 01                	test   al,0x1
c000fb61:	75 13                	jne    c000fb76 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fb63:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb66:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb6c:	75 d8                	jne    c000fb46 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000fb6e:	83 c4 1c             	add    esp,0x1c
c000fb71:	5b                   	pop    ebx
c000fb72:	5e                   	pop    esi
c000fb73:	5f                   	pop    edi
c000fb74:	5d                   	pop    ebp
c000fb75:	c3                   	ret    
c000fb76:	83 ec 08             	sub    esp,0x8
c000fb79:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fb80:	50                   	push   eax
c000fb81:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb85:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000fb8c:	50                   	push   eax
c000fb8d:	e8 72 0c 00 00       	call   c0010804 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb92:	83 c4 10             	add    esp,0x10
c000fb95:	88 07                	mov    BYTE PTR [edi],al
c000fb97:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb9b:	eb c9                	jmp    c000fb66 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fb9d:	45                   	inc    ebp
c000fb9e:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fba6:	eb 8e                	jmp    c000fb36 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fba8 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fba8:	57                   	push   edi
c000fba9:	80 3d 20 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e720,0x0
c000fbb0:	56                   	push   esi
c000fbb1:	53                   	push   ebx
c000fbb2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fbb6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fbba:	75 65                	jne    c000fc21 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fbbc:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fbc1:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fbc6:	83 ec 08             	sub    esp,0x8
c000fbc9:	52                   	push   edx
c000fbca:	50                   	push   eax
c000fbcb:	e8 34 0c 00 00       	call   c0010804 <VgaText::combineColours(unsigned char, unsigned char)>
c000fbd0:	5a                   	pop    edx
c000fbd1:	0f b6 c0             	movzx  eax,al
c000fbd4:	59                   	pop    ecx
c000fbd5:	50                   	push   eax
c000fbd6:	0f be c3             	movsx  eax,bl
c000fbd9:	50                   	push   eax
c000fbda:	e8 cb 0c 00 00       	call   c00108aa <VgaText::combineCharAndColour(char, unsigned char)>
c000fbdf:	83 c4 10             	add    esp,0x10
c000fbe2:	8b 35 c0 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d5c0
c000fbe8:	80 3d 20 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e720,0x0
c000fbef:	74 07                	je     c000fbf8 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fbf1:	66 0f be c3          	movsx  ax,bl
c000fbf5:	80 cc 02             	or     ah,0x2
c000fbf8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fbfc:	ba 19 00 00 00       	mov    edx,0x19
c000fc01:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fc07:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fc0a:	8d 14 92             	lea    edx,[edx+edx*4]
c000fc0d:	c1 e1 04             	shl    ecx,0x4
c000fc10:	c1 e2 04             	shl    edx,0x4
c000fc13:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fc17:	01 ca                	add    edx,ecx
c000fc19:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fc1d:	5b                   	pop    ebx
c000fc1e:	5e                   	pop    esi
c000fc1f:	5f                   	pop    edi
c000fc20:	c3                   	ret    
c000fc21:	b8 02 00 00 00       	mov    eax,0x2
c000fc26:	31 d2                	xor    edx,edx
c000fc28:	eb 9c                	jmp    c000fbc6 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fc2a <setupTextMode()>:
c000fc2a:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fc2f:	83 e0 30             	and    eax,0x30
c000fc32:	66 83 f8 30          	cmp    ax,0x30
c000fc36:	75 11                	jne    c000fc49 <setupTextMode()+0x1f>
c000fc38:	81 2d c0 d5 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d5c0,0x8000
c000fc42:	c6 05 20 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e720,0x1
c000fc49:	c7 05 58 e7 02 c0 b5 fa 00 c0 	mov    DWORD PTR ds:0xc002e758,0xc000fab5
c000fc53:	c7 05 44 e7 02 c0 3c f9 00 c0 	mov    DWORD PTR ds:0xc002e744,0xc000f93c
c000fc5d:	c7 05 40 e7 02 c0 87 f9 00 c0 	mov    DWORD PTR ds:0xc002e740,0xc000f987
c000fc67:	c7 05 4c e7 02 c0 fb fa 00 c0 	mov    DWORD PTR ds:0xc002e74c,0xc000fafb
c000fc71:	c7 05 54 e7 02 c0 05 fa 00 c0 	mov    DWORD PTR ds:0xc002e754,0xc000fa05
c000fc7b:	c7 05 48 e7 02 c0 63 fa 00 c0 	mov    DWORD PTR ds:0xc002e748,0xc000fa63
c000fc85:	c7 05 50 e7 02 c0 64 fa 00 c0 	mov    DWORD PTR ds:0xc002e750,0xc000fa64
c000fc8f:	c7 05 5c e7 02 c0 a8 fb 00 c0 	mov    DWORD PTR ds:0xc002e75c,0xc000fba8
c000fc99:	c3                   	ret    

c000fc9a <kernel_main>:
c000fc9a:	57                   	push   edi
c000fc9b:	bf f9 03 00 00       	mov    edi,0x3f9
c000fca0:	56                   	push   esi
c000fca1:	31 f6                	xor    esi,esi
c000fca3:	53                   	push   ebx
c000fca4:	83 ec 10             	sub    esp,0x10
c000fca7:	e8 b2 09 00 00       	call   c001065e <installVgaTextImplementation()>
c000fcac:	e8 79 ff ff ff       	call   c000fc2a <setupTextMode()>
c000fcb1:	89 f0                	mov    eax,esi
c000fcb3:	89 fa                	mov    edx,edi
c000fcb5:	ee                   	out    dx,al
c000fcb6:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fcbb:	b0 80                	mov    al,0x80
c000fcbd:	89 da                	mov    edx,ebx
c000fcbf:	ee                   	out    dx,al
c000fcc0:	b1 03                	mov    cl,0x3
c000fcc2:	ba f8 03 00 00       	mov    edx,0x3f8
c000fcc7:	88 c8                	mov    al,cl
c000fcc9:	ee                   	out    dx,al
c000fcca:	89 f0                	mov    eax,esi
c000fccc:	89 fa                	mov    edx,edi
c000fcce:	ee                   	out    dx,al
c000fccf:	88 c8                	mov    al,cl
c000fcd1:	89 da                	mov    edx,ebx
c000fcd3:	ee                   	out    dx,al
c000fcd4:	b0 c7                	mov    al,0xc7
c000fcd6:	ba fa 03 00 00       	mov    edx,0x3fa
c000fcdb:	ee                   	out    dx,al
c000fcdc:	b0 0b                	mov    al,0xb
c000fcde:	ba fc 03 00 00       	mov    edx,0x3fc
c000fce3:	ee                   	out    dx,al
c000fce4:	83 ec 0c             	sub    esp,0xc
c000fce7:	68 f8 a2 02 c0       	push   0xc002a2f8
c000fcec:	e8 d0 32 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000fcf1:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fcf6:	05 ff 0f 00 00       	add    eax,0xfff
c000fcfb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd00:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd03:	e8 11 04 00 00       	call   c0010119 <Phys::physicalMemorySetup(unsigned int)>
c000fd08:	e8 b3 20 00 00       	call   c0011dc0 <Virt::virtualMemorySetup()>
c000fd0d:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fd13:	83 c4 10             	add    esp,0x10
c000fd16:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fd1c:	75 0e                	jne    c000fd2c <kernel_main+0x92>
c000fd1e:	89 d8                	mov    eax,ebx
c000fd20:	25 48 03 00 00       	and    eax,0x348
c000fd25:	3d 00 03 00 00       	cmp    eax,0x300
c000fd2a:	74 10                	je     c000fd3c <kernel_main+0xa2>
c000fd2c:	83 ec 0c             	sub    esp,0xc
c000fd2f:	68 fd bc 02 c0       	push   0xc002bcfd
c000fd34:	e8 3a a9 00 00       	call   c001a673 <Krnl::panic(char const*)>
c000fd39:	83 c4 10             	add    esp,0x10
c000fd3c:	83 ec 0c             	sub    esp,0xc
c000fd3f:	89 1d a0 e6 02 c0    	mov    DWORD PTR ds:0xc002e6a0,ebx
c000fd45:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fd49:	53                   	push   ebx
c000fd4a:	e8 83 22 00 00       	call   c0011fd2 <VAS::VAS()>
c000fd4f:	89 1d 08 e8 02 c0    	mov    DWORD PTR ds:0xc002e808,ebx
c000fd55:	e8 c6 02 ff ff       	call   c0000020 <callGlobalConstructors>
c000fd5a:	c7 04 24 0f a3 02 c0 	mov    DWORD PTR [esp],0xc002a30f
c000fd61:	e8 5b 32 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000fd66:	e8 d4 20 00 00       	call   c0011e3f <Virt::swappingSetup()>
c000fd6b:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd72:	e8 6b fb ff ff       	call   c000f8e2 <malloc>
c000fd77:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd7a:	89 c6                	mov    esi,eax
c000fd7c:	e8 5b ea ff ff       	call   c000e7dc <Computer::Computer()>
c000fd81:	58                   	pop    eax
c000fd82:	89 35 88 e6 02 c0    	mov    DWORD PTR ds:0xc002e688,esi
c000fd88:	5a                   	pop    edx
c000fd89:	56                   	push   esi
c000fd8a:	68 2c a3 02 c0       	push   0xc002a32c
c000fd8f:	e8 2d 32 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000fd94:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c000fd99:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd9b:	6a 00                	push   0x0
c000fd9d:	6a 00                	push   0x0
c000fd9f:	6a 00                	push   0x0
c000fda1:	50                   	push   eax
c000fda2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fda5:	83 c4 14             	add    esp,0x14
c000fda8:	53                   	push   ebx
c000fda9:	e8 be 24 00 00       	call   c001226c <VAS::~VAS()>
c000fdae:	c7 04 24 3f a3 02 c0 	mov    DWORD PTR [esp],0xc002a33f
c000fdb5:	e8 b9 a8 00 00       	call   c001a673 <Krnl::panic(char const*)>
c000fdba:	83 c4 20             	add    esp,0x20
c000fdbd:	5b                   	pop    ebx
c000fdbe:	5e                   	pop    esi
c000fdbf:	5f                   	pop    edi
c000fdc0:	c3                   	ret    

c000fdc1 <Phys::allocateDMA(unsigned long)>:
c000fdc1:	55                   	push   ebp
c000fdc2:	31 d2                	xor    edx,edx
c000fdc4:	57                   	push   edi
c000fdc5:	31 ed                	xor    ebp,ebp
c000fdc7:	56                   	push   esi
c000fdc8:	31 c9                	xor    ecx,ecx
c000fdca:	53                   	push   ebx
c000fdcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdcf:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fdd5:	31 c0                	xor    eax,eax
c000fdd7:	c1 ee 0c             	shr    esi,0xc
c000fdda:	eb 17                	jmp    c000fdf3 <Phys::allocateDMA(unsigned long)+0x32>
c000fddc:	85 c9                	test   ecx,ecx
c000fdde:	75 04                	jne    c000fde4 <Phys::allocateDMA(unsigned long)+0x23>
c000fde0:	89 d5                	mov    ebp,edx
c000fde2:	89 d0                	mov    eax,edx
c000fde4:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fde7:	39 de                	cmp    esi,ebx
c000fde9:	74 20                	je     c000fe0b <Phys::allocateDMA(unsigned long)+0x4a>
c000fdeb:	42                   	inc    edx
c000fdec:	89 d9                	mov    ecx,ebx
c000fdee:	83 fa 2f             	cmp    edx,0x2f
c000fdf1:	7f 11                	jg     c000fe04 <Phys::allocateDMA(unsigned long)+0x43>
c000fdf3:	80 ba e0 e6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1920],0x0
c000fdfa:	74 e0                	je     c000fddc <Phys::allocateDMA(unsigned long)+0x1b>
c000fdfc:	31 c9                	xor    ecx,ecx
c000fdfe:	42                   	inc    edx
c000fdff:	83 fa 2f             	cmp    edx,0x2f
c000fe02:	7e ef                	jle    c000fdf3 <Phys::allocateDMA(unsigned long)+0x32>
c000fe04:	5b                   	pop    ebx
c000fe05:	31 c0                	xor    eax,eax
c000fe07:	5e                   	pop    esi
c000fe08:	5f                   	pop    edi
c000fe09:	5d                   	pop    ebp
c000fe0a:	c3                   	ret    
c000fe0b:	8d 14 30             	lea    edx,[eax+esi*1]
c000fe0e:	89 d7                	mov    edi,edx
c000fe10:	4f                   	dec    edi
c000fe11:	79 03                	jns    c000fe16 <Phys::allocateDMA(unsigned long)+0x55>
c000fe13:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fe16:	c1 ff 04             	sar    edi,0x4
c000fe19:	89 c2                	mov    edx,eax
c000fe1b:	c1 fa 04             	sar    edx,0x4
c000fe1e:	39 fa                	cmp    edx,edi
c000fe20:	75 2f                	jne    c000fe51 <Phys::allocateDMA(unsigned long)+0x90>
c000fe22:	85 db                	test   ebx,ebx
c000fe24:	74 1a                	je     c000fe40 <Phys::allocateDMA(unsigned long)+0x7f>
c000fe26:	be e0 e6 02 c0       	mov    esi,0xc002e6e0
c000fe2b:	8d 90 e0 e6 02 c0    	lea    edx,[eax-0x3ffd1920]
c000fe31:	f7 d6                	not    esi
c000fe33:	29 c6                	sub    esi,eax
c000fe35:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fe38:	42                   	inc    edx
c000fe39:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fe3c:	39 d9                	cmp    ecx,ebx
c000fe3e:	7f f5                	jg     c000fe35 <Phys::allocateDMA(unsigned long)+0x74>
c000fe40:	85 ff                	test   edi,edi
c000fe42:	74 13                	je     c000fe57 <Phys::allocateDMA(unsigned long)+0x96>
c000fe44:	5b                   	pop    ebx
c000fe45:	05 50 20 0c 00       	add    eax,0xc2050
c000fe4a:	5e                   	pop    esi
c000fe4b:	c1 e0 0c             	shl    eax,0xc
c000fe4e:	5f                   	pop    edi
c000fe4f:	5d                   	pop    ebp
c000fe50:	c3                   	ret    
c000fe51:	89 ea                	mov    edx,ebp
c000fe53:	31 c9                	xor    ecx,ecx
c000fe55:	eb a7                	jmp    c000fdfe <Phys::allocateDMA(unsigned long)+0x3d>
c000fe57:	5b                   	pop    ebx
c000fe58:	c1 e0 0c             	shl    eax,0xc
c000fe5b:	5e                   	pop    esi
c000fe5c:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fe61:	5f                   	pop    edi
c000fe62:	5d                   	pop    ebp
c000fe63:	c3                   	ret    

c000fe64 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fe64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe68:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe6c:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe72:	c1 e9 0c             	shr    ecx,0xc
c000fe75:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe7a:	76 25                	jbe    c000fea1 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe7c:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe81:	c1 e8 0c             	shr    eax,0xc
c000fe84:	8d 50 10             	lea    edx,[eax+0x10]
c000fe87:	85 c9                	test   ecx,ecx
c000fe89:	74 15                	je     c000fea0 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fe8b:	8d 82 e0 e6 02 c0    	lea    eax,[edx-0x3ffd1920]
c000fe91:	8d 94 11 e0 e6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1920]
c000fe98:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe9b:	40                   	inc    eax
c000fe9c:	39 d0                	cmp    eax,edx
c000fe9e:	75 f8                	jne    c000fe98 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fea0:	c3                   	ret    
c000fea1:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fea7:	c1 ea 0c             	shr    edx,0xc
c000feaa:	eb db                	jmp    c000fe87 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000feac <Phys::setPageState(unsigned long, bool)>:
c000feac:	56                   	push   esi
c000fead:	ba 01 00 00 00       	mov    edx,0x1
c000feb2:	53                   	push   ebx
c000feb3:	8b 35 b0 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d5b0
c000feb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000febd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fec1:	89 c8                	mov    eax,ecx
c000fec3:	83 e1 07             	and    ecx,0x7
c000fec6:	c1 e8 03             	shr    eax,0x3
c000fec9:	d3 e3                	shl    ebx,cl
c000fecb:	01 c6                	add    esi,eax
c000fecd:	d3 e2                	shl    edx,cl
c000fecf:	f7 d2                	not    edx
c000fed1:	20 16                	and    BYTE PTR [esi],dl
c000fed3:	03 05 b0 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d5b0
c000fed9:	08 18                	or     BYTE PTR [eax],bl
c000fedb:	5b                   	pop    ebx
c000fedc:	5e                   	pop    esi
c000fedd:	c3                   	ret    

c000fede <Phys::getPageState(unsigned long)>:
c000fede:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fee2:	8b 15 b0 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5b0
c000fee8:	89 c8                	mov    eax,ecx
c000feea:	83 e1 07             	and    ecx,0x7
c000feed:	c1 e8 03             	shr    eax,0x3
c000fef0:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fef4:	d3 f8                	sar    eax,cl
c000fef6:	83 e0 01             	and    eax,0x1
c000fef9:	c3                   	ret    

c000fefa <Phys::freePage(unsigned long)>:
c000fefa:	53                   	push   ebx
c000fefb:	83 ec 08             	sub    esp,0x8
c000fefe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff02:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000ff08:	76 57                	jbe    c000ff61 <Phys::freePage(unsigned long)+0x67>
c000ff0a:	c1 eb 0c             	shr    ebx,0xc
c000ff0d:	53                   	push   ebx
c000ff0e:	e8 cb ff ff ff       	call   c000fede <Phys::getPageState(unsigned long)>
c000ff13:	5a                   	pop    edx
c000ff14:	84 c0                	test   al,al
c000ff16:	74 5b                	je     c000ff73 <Phys::freePage(unsigned long)+0x79>
c000ff18:	a1 cc e6 02 c0       	mov    eax,ds:0xc002e6cc
c000ff1d:	48                   	dec    eax
c000ff1e:	a3 cc e6 02 c0       	mov    ds:0xc002e6cc,eax
c000ff23:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff26:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff29:	c1 e0 02             	shl    eax,0x2
c000ff2c:	99                   	cdq    
c000ff2d:	f7 3d d0 e6 02 c0    	idiv   DWORD PTR ds:0xc002e6d0
c000ff33:	39 05 c8 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c8,eax
c000ff39:	75 13                	jne    c000ff4e <Phys::freePage(unsigned long)+0x54>
c000ff3b:	83 ec 08             	sub    esp,0x8
c000ff3e:	6a 00                	push   0x0
c000ff40:	53                   	push   ebx
c000ff41:	e8 66 ff ff ff       	call   c000feac <Phys::setPageState(unsigned long, bool)>
c000ff46:	83 c4 10             	add    esp,0x10
c000ff49:	83 c4 08             	add    esp,0x8
c000ff4c:	5b                   	pop    ebx
c000ff4d:	c3                   	ret    
c000ff4e:	83 ec 0c             	sub    esp,0xc
c000ff51:	a3 c8 e6 02 c0       	mov    ds:0xc002e6c8,eax
c000ff56:	50                   	push   eax
c000ff57:	e8 96 0a 00 00       	call   c00109f2 <VgaText::updateRAMUsageDisplay(int)>
c000ff5c:	83 c4 10             	add    esp,0x10
c000ff5f:	eb da                	jmp    c000ff3b <Phys::freePage(unsigned long)+0x41>
c000ff61:	68 00 10 00 00       	push   0x1000
c000ff66:	53                   	push   ebx
c000ff67:	e8 f8 fe ff ff       	call   c000fe64 <Phys::freeDMA(unsigned long, unsigned long)>
c000ff6c:	59                   	pop    ecx
c000ff6d:	5b                   	pop    ebx
c000ff6e:	83 c4 08             	add    esp,0x8
c000ff71:	5b                   	pop    ebx
c000ff72:	c3                   	ret    
c000ff73:	c7 44 24 10 5a a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a35a
c000ff7b:	83 c4 08             	add    esp,0x8
c000ff7e:	5b                   	pop    ebx
c000ff7f:	e9 ef a6 00 00       	jmp    c001a673 <Krnl::panic(char const*)>

c000ff84 <Phys::allocatePage()>:
c000ff84:	56                   	push   esi
c000ff85:	53                   	push   ebx
c000ff86:	83 ec 14             	sub    esp,0x14
c000ff89:	8b 35 c0 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e6c0
c000ff8f:	89 f3                	mov    ebx,esi
c000ff91:	eb 0a                	jmp    c000ff9d <Phys::allocatePage()+0x19>
c000ff93:	89 1d c0 e6 02 c0    	mov    DWORD PTR ds:0xc002e6c0,ebx
c000ff99:	39 de                	cmp    esi,ebx
c000ff9b:	74 24                	je     c000ffc1 <Phys::allocatePage()+0x3d>
c000ff9d:	53                   	push   ebx
c000ff9e:	e8 3b ff ff ff       	call   c000fede <Phys::getPageState(unsigned long)>
c000ffa3:	5a                   	pop    edx
c000ffa4:	84 c0                	test   al,al
c000ffa6:	74 5a                	je     c0010002 <Phys::allocatePage()+0x7e>
c000ffa8:	43                   	inc    ebx
c000ffa9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ffaf:	75 e2                	jne    c000ff93 <Phys::allocatePage()+0xf>
c000ffb1:	31 db                	xor    ebx,ebx
c000ffb3:	c7 05 c0 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e6c0,0x0
c000ffbd:	39 de                	cmp    esi,ebx
c000ffbf:	75 dc                	jne    c000ff9d <Phys::allocatePage()+0x19>
c000ffc1:	83 ec 0c             	sub    esp,0xc
c000ffc4:	68 70 a3 02 c0       	push   0xc002a370
c000ffc9:	e8 f3 2f 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c000ffce:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ffd5:	e8 e7 fd ff ff       	call   c000fdc1 <Phys::allocateDMA(unsigned long)>
c000ffda:	83 c4 10             	add    esp,0x10
c000ffdd:	85 c0                	test   eax,eax
c000ffdf:	75 5b                	jne    c001003c <Phys::allocatePage()+0xb8>
c000ffe1:	83 ec 0c             	sub    esp,0xc
c000ffe4:	68 81 a3 02 c0       	push   0xc002a381
c000ffe9:	e8 85 a6 00 00       	call   c001a673 <Krnl::panic(char const*)>
c000ffee:	83 c4 10             	add    esp,0x10
c000fff1:	8b 1d c0 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6c0
c000fff7:	53                   	push   ebx
c000fff8:	e8 e1 fe ff ff       	call   c000fede <Phys::getPageState(unsigned long)>
c000fffd:	5a                   	pop    edx
c000fffe:	84 c0                	test   al,al
c0010000:	75 a6                	jne    c000ffa8 <Phys::allocatePage()+0x24>
c0010002:	6a 01                	push   0x1
c0010004:	53                   	push   ebx
c0010005:	e8 a2 fe ff ff       	call   c000feac <Phys::setPageState(unsigned long, bool)>
c001000a:	a1 cc e6 02 c0       	mov    eax,ds:0xc002e6cc
c001000f:	40                   	inc    eax
c0010010:	a3 cc e6 02 c0       	mov    ds:0xc002e6cc,eax
c0010015:	8d 04 80             	lea    eax,[eax+eax*4]
c0010018:	8d 04 80             	lea    eax,[eax+eax*4]
c001001b:	c1 e0 02             	shl    eax,0x2
c001001e:	99                   	cdq    
c001001f:	f7 3d d0 e6 02 c0    	idiv   DWORD PTR ds:0xc002e6d0
c0010025:	5a                   	pop    edx
c0010026:	39 05 c8 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c8,eax
c001002c:	59                   	pop    ecx
c001002d:	75 13                	jne    c0010042 <Phys::allocatePage()+0xbe>
c001002f:	83 f8 46             	cmp    eax,0x46
c0010032:	7f 2c                	jg     c0010060 <Phys::allocatePage()+0xdc>
c0010034:	a1 c0 e6 02 c0       	mov    eax,ds:0xc002e6c0
c0010039:	c1 e0 0c             	shl    eax,0xc
c001003c:	83 c4 14             	add    esp,0x14
c001003f:	5b                   	pop    ebx
c0010040:	5e                   	pop    esi
c0010041:	c3                   	ret    
c0010042:	83 ec 0c             	sub    esp,0xc
c0010045:	a3 c8 e6 02 c0       	mov    ds:0xc002e6c8,eax
c001004a:	50                   	push   eax
c001004b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001004f:	e8 9e 09 00 00       	call   c00109f2 <VgaText::updateRAMUsageDisplay(int)>
c0010054:	83 c4 10             	add    esp,0x10
c0010057:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001005b:	83 f8 46             	cmp    eax,0x46
c001005e:	7e d4                	jle    c0010034 <Phys::allocatePage()+0xb0>
c0010060:	e8 33 de 00 00       	call   c001de98 <lockScheduler()>
c0010065:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c001006a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001006d:	83 fa 02             	cmp    edx,0x2
c0010070:	74 07                	je     c0010079 <Phys::allocatePage()+0xf5>
c0010072:	e8 23 de 00 00       	call   c001de9a <unlockScheduler()>
c0010077:	eb bb                	jmp    c0010034 <Phys::allocatePage()+0xb0>
c0010079:	83 ec 0c             	sub    esp,0xc
c001007c:	50                   	push   eax
c001007d:	e8 2e e4 00 00       	call   c001e4b0 <unblockTask(ThreadControlBlock*)>
c0010082:	83 c4 10             	add    esp,0x10
c0010085:	eb eb                	jmp    c0010072 <Phys::allocatePage()+0xee>

c0010087 <Phys::allocateContiguousPages(int)>:
c0010087:	57                   	push   edi
c0010088:	56                   	push   esi
c0010089:	53                   	push   ebx
c001008a:	31 db                	xor    ebx,ebx
c001008c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010090:	e8 03 de 00 00       	call   c001de98 <lockScheduler()>
c0010095:	85 db                	test   ebx,ebx
c0010097:	75 11                	jne    c00100aa <Phys::allocateContiguousPages(int)+0x23>
c0010099:	e8 e6 fe ff ff       	call   c000ff84 <Phys::allocatePage()>
c001009e:	83 ff 01             	cmp    edi,0x1
c00100a1:	89 c6                	mov    esi,eax
c00100a3:	74 21                	je     c00100c6 <Phys::allocateContiguousPages(int)+0x3f>
c00100a5:	bb 01 00 00 00       	mov    ebx,0x1
c00100aa:	e8 d5 fe ff ff       	call   c000ff84 <Phys::allocatePage()>
c00100af:	89 da                	mov    edx,ebx
c00100b1:	c1 e2 0c             	shl    edx,0xc
c00100b4:	01 f2                	add    edx,esi
c00100b6:	39 c2                	cmp    edx,eax
c00100b8:	74 17                	je     c00100d1 <Phys::allocateContiguousPages(int)+0x4a>
c00100ba:	bb 01 00 00 00       	mov    ebx,0x1
c00100bf:	89 c6                	mov    esi,eax
c00100c1:	83 ff 01             	cmp    edi,0x1
c00100c4:	75 e4                	jne    c00100aa <Phys::allocateContiguousPages(int)+0x23>
c00100c6:	e8 cf dd 00 00       	call   c001de9a <unlockScheduler()>
c00100cb:	89 f0                	mov    eax,esi
c00100cd:	5b                   	pop    ebx
c00100ce:	5e                   	pop    esi
c00100cf:	5f                   	pop    edi
c00100d0:	c3                   	ret    
c00100d1:	43                   	inc    ebx
c00100d2:	39 fb                	cmp    ebx,edi
c00100d4:	75 bf                	jne    c0010095 <Phys::allocateContiguousPages(int)+0xe>
c00100d6:	e8 bf dd 00 00       	call   c001de9a <unlockScheduler()>
c00100db:	89 f0                	mov    eax,esi
c00100dd:	5b                   	pop    ebx
c00100de:	5e                   	pop    esi
c00100df:	5f                   	pop    edi
c00100e0:	c3                   	ret    

c00100e1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00100e1:	56                   	push   esi
c00100e2:	53                   	push   ebx
c00100e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100e7:	39 1d c4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c4,ebx
c00100ed:	73 06                	jae    c00100f5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00100ef:	89 1d c4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6c4,ebx
c00100f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100f9:	c1 eb 0c             	shr    ebx,0xc
c00100fc:	c1 e8 0c             	shr    eax,0xc
c00100ff:	39 d8                	cmp    eax,ebx
c0010101:	73 13                	jae    c0010116 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010103:	6a 00                	push   0x0
c0010105:	8d 70 01             	lea    esi,[eax+0x1]
c0010108:	50                   	push   eax
c0010109:	e8 9e fd ff ff       	call   c000feac <Phys::setPageState(unsigned long, bool)>
c001010e:	5a                   	pop    edx
c001010f:	89 f0                	mov    eax,esi
c0010111:	59                   	pop    ecx
c0010112:	39 f3                	cmp    ebx,esi
c0010114:	75 ed                	jne    c0010103 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010116:	5b                   	pop    ebx
c0010117:	5e                   	pop    esi
c0010118:	c3                   	ret    

c0010119 <Phys::physicalMemorySetup(unsigned int)>:
c0010119:	55                   	push   ebp
c001011a:	57                   	push   edi
c001011b:	56                   	push   esi
c001011c:	53                   	push   ebx
c001011d:	31 db                	xor    ebx,ebx
c001011f:	83 ec 40             	sub    esp,0x40
c0010122:	6a 30                	push   0x30
c0010124:	6a 00                	push   0x0
c0010126:	68 e0 e6 02 c0       	push   0xc002e6e0
c001012b:	e8 48 06 ff ff       	call   c0000778 <memset>
c0010130:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010134:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010139:	05 00 10 00 00       	add    eax,0x1000
c001013e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010142:	83 c4 10             	add    esp,0x10
c0010145:	83 ec 08             	sub    esp,0x8
c0010148:	6a 01                	push   0x1
c001014a:	53                   	push   ebx
c001014b:	43                   	inc    ebx
c001014c:	e8 5b fd ff ff       	call   c000feac <Phys::setPageState(unsigned long, bool)>
c0010151:	83 c4 10             	add    esp,0x10
c0010154:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001015a:	75 e9                	jne    c0010145 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001015c:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010163:	66 85 c0             	test   ax,ax
c0010166:	0f 84 8e 01 00 00    	je     c00102fa <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001016c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010170:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010178:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001017c:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010181:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010185:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001018d:	eb 15                	jmp    c00101a4 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c001018f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010193:	83 c3 18             	add    ebx,0x18
c0010196:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001019a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001019e:	0f 84 66 01 00 00    	je     c001030a <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00101a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00101a7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00101aa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00101ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00101b5:	8b 33                	mov    esi,DWORD PTR [ebx]
c00101b7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00101ba:	01 f0                	add    eax,esi
c00101bc:	55                   	push   ebp
c00101bd:	11 fa                	adc    edx,edi
c00101bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00101c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00101cb:	56                   	push   esi
c00101cc:	68 bc a3 02 c0       	push   0xc002a3bc
c00101d1:	e8 eb 2d 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00101d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101da:	83 c4 10             	add    esp,0x10
c00101dd:	09 f8                	or     eax,edi
c00101df:	0f 85 25 01 00 00    	jne    c001030a <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00101e5:	4d                   	dec    ebp
c00101e6:	75 a7                	jne    c001018f <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101e8:	ba 00 00 08 00       	mov    edx,0x80000
c00101ed:	89 c1                	mov    ecx,eax
c00101ef:	39 f2                	cmp    edx,esi
c00101f1:	19 f9                	sbb    ecx,edi
c00101f3:	0f 82 a7 00 00 00    	jb     c00102a0 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101f9:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00101fd:	89 c1                	mov    ecx,eax
c00101ff:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010203:	0f 83 97 00 00 00    	jae    c00102a0 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010209:	ba 00 00 0a 00       	mov    edx,0xa0000
c001020e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010212:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010216:	39 fa                	cmp    edx,edi
c0010218:	19 e8                	sbb    eax,ebp
c001021a:	0f 82 14 01 00 00    	jb     c0010334 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010220:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010224:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010228:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001022e:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010233:	83 d5 ff             	adc    ebp,0xffffffff
c0010236:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001023a:	31 c0                	xor    eax,eax
c001023c:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010240:	39 fa                	cmp    edx,edi
c0010242:	89 c1                	mov    ecx,eax
c0010244:	19 e9                	sbb    ecx,ebp
c0010246:	0f 83 43 ff ff ff    	jae    c001018f <Phys::physicalMemorySetup(unsigned int)+0x76>
c001024c:	be 00 00 08 00       	mov    esi,0x80000
c0010251:	50                   	push   eax
c0010252:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010256:	57                   	push   edi
c0010257:	56                   	push   esi
c0010258:	68 e0 a3 02 c0       	push   0xc002a3e0
c001025d:	e8 5f 2d 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0010262:	5a                   	pop    edx
c0010263:	59                   	pop    ecx
c0010264:	57                   	push   edi
c0010265:	56                   	push   esi
c0010266:	e8 76 fe ff ff       	call   c00100e1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001026b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001026f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010273:	83 c4 0c             	add    esp,0xc
c0010276:	0f ac d0 0c          	shrd   eax,edx,0xc
c001027a:	03 05 d0 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e6d0
c0010280:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010287:	a3 d0 e6 02 c0       	mov    ds:0xc002e6d0,eax
c001028c:	52                   	push   edx
c001028d:	50                   	push   eax
c001028e:	68 9d a3 02 c0       	push   0xc002a39d
c0010293:	e8 29 2d 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0010298:	83 c4 10             	add    esp,0x10
c001029b:	e9 ef fe ff ff       	jmp    c001018f <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102a0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00102a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00102ac:	39 ea                	cmp    edx,ebp
c00102ae:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00102b2:	0f 82 d7 fe ff ff    	jb     c001018f <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102b8:	ba ff 1f 00 00       	mov    edx,0x1fff
c00102bd:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00102c1:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00102c5:	0f 83 c4 fe ff ff    	jae    c001018f <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102cb:	39 ee                	cmp    esi,ebp
c00102cd:	89 f8                	mov    eax,edi
c00102cf:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00102d3:	0f 83 78 ff ff ff    	jae    c0010251 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102e1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00102e5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00102e9:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00102ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102f1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00102f5:	e9 57 ff ff ff       	jmp    c0010251 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102fa:	83 ec 0c             	sub    esp,0xc
c00102fd:	68 8f a3 02 c0       	push   0xc002a38f
c0010302:	e8 6c a3 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0010307:	83 c4 10             	add    esp,0x10
c001030a:	bb 40 01 00 00       	mov    ebx,0x140
c001030f:	83 ec 08             	sub    esp,0x8
c0010312:	6a 00                	push   0x0
c0010314:	53                   	push   ebx
c0010315:	43                   	inc    ebx
c0010316:	e8 91 fb ff ff       	call   c000feac <Phys::setPageState(unsigned long, bool)>
c001031b:	ff 05 d0 e6 02 c0    	inc    DWORD PTR ds:0xc002e6d0
c0010321:	83 c4 10             	add    esp,0x10
c0010324:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001032a:	75 e3                	jne    c001030f <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001032c:	83 c4 3c             	add    esp,0x3c
c001032f:	5b                   	pop    ebx
c0010330:	5e                   	pop    esi
c0010331:	5f                   	pop    edi
c0010332:	5d                   	pop    ebp
c0010333:	c3                   	ret    
c0010334:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001033c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010344:	e9 d7 fe ff ff       	jmp    c0010220 <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010349:	90                   	nop

c001034a <Pipe::isAtty()>:
c001034a:	31 c0                	xor    eax,eax
c001034c:	c3                   	ret    
c001034d:	90                   	nop

c001034e <Pipe::~Pipe()>:
c001034e:	83 ec 0c             	sub    esp,0xc
c0010351:	ba 4c a4 02 c0       	mov    edx,0xc002a44c
c0010356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001035a:	89 10                	mov    DWORD PTR [eax],edx
c001035c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010360:	83 ec 0c             	sub    esp,0xc
c0010363:	50                   	push   eax
c0010364:	e8 37 16 00 00       	call   c00119a0 <UnixFile::~UnixFile()>
c0010369:	83 c4 10             	add    esp,0x10
c001036c:	90                   	nop
c001036d:	83 c4 0c             	add    esp,0xc
c0010370:	c3                   	ret    
c0010371:	90                   	nop

c0010372 <Pipe::~Pipe()>:
c0010372:	83 ec 0c             	sub    esp,0xc
c0010375:	83 ec 0c             	sub    esp,0xc
c0010378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001037c:	e8 cd ff ff ff       	call   c001034e <Pipe::~Pipe()>
c0010381:	83 c4 10             	add    esp,0x10
c0010384:	83 ec 08             	sub    esp,0x8
c0010387:	6a 20                	push   0x20
c0010389:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001038d:	e8 4f 2b 00 00       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0010392:	83 c4 10             	add    esp,0x10
c0010395:	83 c4 0c             	add    esp,0xc
c0010398:	c3                   	ret    
c0010399:	90                   	nop

c001039a <Pipe::read(unsigned long long, void*, int*)>:
c001039a:	55                   	push   ebp
c001039b:	57                   	push   edi
c001039c:	56                   	push   esi
c001039d:	53                   	push   ebx
c001039e:	83 ec 1c             	sub    esp,0x1c
c00103a1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00103a5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00103a9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00103ad:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00103b0:	89 c8                	mov    eax,ecx
c00103b2:	99                   	cdq    
c00103b3:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00103b7:	74 19                	je     c00103d2 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00103b9:	39 f9                	cmp    ecx,edi
c00103bb:	89 d1                	mov    ecx,edx
c00103bd:	19 f1                	sbb    ecx,esi
c00103bf:	73 11                	jae    c00103d2 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00103c1:	e8 d2 da 00 00       	call   c001de98 <lockScheduler()>
c00103c6:	e8 09 de 00 00       	call   c001e1d4 <schedule()>
c00103cb:	e8 ca da 00 00       	call   c001de9a <unlockScheduler()>
c00103d0:	eb db                	jmp    c00103ad <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103d2:	39 f8                	cmp    eax,edi
c00103d4:	89 d1                	mov    ecx,edx
c00103d6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00103da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00103de:	19 f1                	sbb    ecx,esi
c00103e0:	73 08                	jae    c00103ea <Pipe::read(unsigned long long, void*, int*)+0x50>
c00103e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00103ea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103ed:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103f0:	29 c6                	sub    esi,eax
c00103f2:	89 f1                	mov    ecx,esi
c00103f4:	c1 f9 1f             	sar    ecx,0x1f
c00103f7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00103fb:	89 ca                	mov    edx,ecx
c00103fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010401:	19 d1                	sbb    ecx,edx
c0010403:	73 04                	jae    c0010409 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010405:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010409:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001040d:	89 fd                	mov    ebp,edi
c001040f:	29 f5                	sub    ebp,esi
c0010411:	85 f6                	test   esi,esi
c0010413:	74 12                	je     c0010427 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010415:	52                   	push   edx
c0010416:	56                   	push   esi
c0010417:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001041a:	50                   	push   eax
c001041b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001041f:	e8 20 03 ff ff       	call   c0000744 <memcpy>
c0010424:	83 c4 10             	add    esp,0x10
c0010427:	85 ed                	test   ebp,ebp
c0010429:	74 12                	je     c001043d <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001042b:	50                   	push   eax
c001042c:	55                   	push   ebp
c001042d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010430:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010434:	56                   	push   esi
c0010435:	e8 0a 03 ff ff       	call   c0000744 <memcpy>
c001043a:	83 c4 10             	add    esp,0x10
c001043d:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010440:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010443:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010446:	99                   	cdq    
c0010447:	89 f7                	mov    edi,esi
c0010449:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001044d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010451:	c1 ff 1f             	sar    edi,0x1f
c0010454:	57                   	push   edi
c0010455:	56                   	push   esi
c0010456:	52                   	push   edx
c0010457:	50                   	push   eax
c0010458:	e8 1f 67 01 00       	call   c0026b7c <__umoddi3>
c001045d:	83 c4 10             	add    esp,0x10
c0010460:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010463:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010468:	75 10                	jne    c001047a <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001046a:	83 ec 0c             	sub    esp,0xc
c001046d:	68 09 a4 02 c0       	push   0xc002a409
c0010472:	e8 fc a1 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0010477:	83 c4 10             	add    esp,0x10
c001047a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001047e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010482:	89 10                	mov    DWORD PTR [eax],edx
c0010484:	83 c4 1c             	add    esp,0x1c
c0010487:	31 c0                	xor    eax,eax
c0010489:	5b                   	pop    ebx
c001048a:	5e                   	pop    esi
c001048b:	5f                   	pop    edi
c001048c:	5d                   	pop    ebp
c001048d:	c3                   	ret    

c001048e <Pipe::write(unsigned long long, void*, int*)>:
c001048e:	55                   	push   ebp
c001048f:	57                   	push   edi
c0010490:	56                   	push   esi
c0010491:	53                   	push   ebx
c0010492:	83 ec 1c             	sub    esp,0x1c
c0010495:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010499:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001049d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00104a4:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00104a7:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00104aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00104ae:	89 de                	mov    esi,ebx
c00104b0:	89 df                	mov    edi,ebx
c00104b2:	c1 ff 1f             	sar    edi,0x1f
c00104b5:	01 c6                	add    esi,eax
c00104b7:	89 c8                	mov    eax,ecx
c00104b9:	11 d7                	adc    edi,edx
c00104bb:	99                   	cdq    
c00104bc:	39 f1                	cmp    ecx,esi
c00104be:	89 d0                	mov    eax,edx
c00104c0:	19 f8                	sbb    eax,edi
c00104c2:	b8 01 00 00 00       	mov    eax,0x1
c00104c7:	0f 82 80 00 00 00    	jb     c001054d <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00104cd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00104d0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00104d3:	01 d8                	add    eax,ebx
c00104d5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00104d9:	99                   	cdq    
c00104da:	f7 f9                	idiv   ecx
c00104dc:	29 d1                	sub    ecx,edx
c00104de:	89 d7                	mov    edi,edx
c00104e0:	89 c8                	mov    eax,ecx
c00104e2:	99                   	cdq    
c00104e3:	39 ce                	cmp    esi,ecx
c00104e5:	19 d3                	sbb    ebx,edx
c00104e7:	bb 00 00 00 00       	mov    ebx,0x0
c00104ec:	72 04                	jb     c00104f2 <Pipe::write(unsigned long long, void*, int*)+0x64>
c00104ee:	89 f3                	mov    ebx,esi
c00104f0:	29 cb                	sub    ebx,ecx
c00104f2:	89 f1                	mov    ecx,esi
c00104f4:	29 d9                	sub    ecx,ebx
c00104f6:	74 1a                	je     c0010512 <Pipe::write(unsigned long long, void*, int*)+0x84>
c00104f8:	52                   	push   edx
c00104f9:	51                   	push   ecx
c00104fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00104fe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010502:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010505:	57                   	push   edi
c0010506:	e8 39 02 ff ff       	call   c0000744 <memcpy>
c001050b:	83 c4 10             	add    esp,0x10
c001050e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010512:	85 db                	test   ebx,ebx
c0010514:	74 12                	je     c0010528 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010516:	50                   	push   eax
c0010517:	53                   	push   ebx
c0010518:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001051c:	51                   	push   ecx
c001051d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010520:	e8 1f 02 ff ff       	call   c0000744 <memcpy>
c0010525:	83 c4 10             	add    esp,0x10
c0010528:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001052b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010530:	75 10                	jne    c0010542 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010532:	83 ec 0c             	sub    esp,0xc
c0010535:	68 25 a4 02 c0       	push   0xc002a425
c001053a:	e8 34 a1 00 00       	call   c001a673 <Krnl::panic(char const*)>
c001053f:	83 c4 10             	add    esp,0x10
c0010542:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010546:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010549:	89 38                	mov    DWORD PTR [eax],edi
c001054b:	31 c0                	xor    eax,eax
c001054d:	83 c4 1c             	add    esp,0x1c
c0010550:	5b                   	pop    ebx
c0010551:	5e                   	pop    esi
c0010552:	5f                   	pop    edi
c0010553:	5d                   	pop    ebp
c0010554:	c3                   	ret    
c0010555:	90                   	nop

c0010556 <Pipe::Pipe(int)>:
c0010556:	83 ec 0c             	sub    esp,0xc
c0010559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055d:	83 ec 08             	sub    esp,0x8
c0010560:	6a 00                	push   0x0
c0010562:	50                   	push   eax
c0010563:	e8 56 12 00 00       	call   c00117be <UnixFile::UnixFile(int)>
c0010568:	83 c4 10             	add    esp,0x10
c001056b:	ba 4c a4 02 c0       	mov    edx,0xc002a44c
c0010570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010574:	89 10                	mov    DWORD PTR [eax],edx
c0010576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001057e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010585:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001058c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010590:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010597:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001059b:	83 ec 0c             	sub    esp,0xc
c001059e:	50                   	push   eax
c001059f:	e8 3e f3 ff ff       	call   c000f8e2 <malloc>
c00105a4:	83 c4 10             	add    esp,0x10
c00105a7:	89 c2                	mov    edx,eax
c00105a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ad:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00105b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b4:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00105b8:	90                   	nop
c00105b9:	83 c4 0c             	add    esp,0xc
c00105bc:	c3                   	ret    
c00105bd:	90                   	nop

c00105be <VgaText::isAtty()>:
c00105be:	b0 01                	mov    al,0x1
c00105c0:	c3                   	ret    
c00105c1:	90                   	nop

c00105c2 <VgaText::~VgaText()>:
c00105c2:	83 ec 0c             	sub    esp,0xc
c00105c5:	ba 08 a5 02 c0       	mov    edx,0xc002a508
c00105ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ce:	89 10                	mov    DWORD PTR [eax],edx
c00105d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d4:	83 ec 0c             	sub    esp,0xc
c00105d7:	50                   	push   eax
c00105d8:	e8 c3 13 00 00       	call   c00119a0 <UnixFile::~UnixFile()>
c00105dd:	83 c4 10             	add    esp,0x10
c00105e0:	90                   	nop
c00105e1:	83 c4 0c             	add    esp,0xc
c00105e4:	c3                   	ret    
c00105e5:	90                   	nop

c00105e6 <VgaText::~VgaText()>:
c00105e6:	83 ec 0c             	sub    esp,0xc
c00105e9:	83 ec 0c             	sub    esp,0xc
c00105ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105f0:	e8 cd ff ff ff       	call   c00105c2 <VgaText::~VgaText()>
c00105f5:	83 c4 10             	add    esp,0x10
c00105f8:	83 ec 08             	sub    esp,0x8
c00105fb:	68 60 12 00 00       	push   0x1260
c0010600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010604:	e8 d8 28 00 00       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0010609:	83 c4 10             	add    esp,0x10
c001060c:	83 c4 0c             	add    esp,0xc
c001060f:	c3                   	ret    

c0010610 <VgaText::read(unsigned long long, void*, int*)>:
c0010610:	83 ec 10             	sub    esp,0x10
c0010613:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010617:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001061b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001061f:	e8 50 5d 00 00       	call   c0016374 <readKeyboard(VgaText*, char*, unsigned long)>
c0010624:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010628:	89 02                	mov    DWORD PTR [edx],eax
c001062a:	31 c0                	xor    eax,eax
c001062c:	83 c4 1c             	add    esp,0x1c
c001062f:	c3                   	ret    

c0010630 <setTerminalScrollLock(bool)>:
c0010630:	c3                   	ret    

c0010631 <addToTerminalCycle(VgaText*)>:
c0010631:	8b 15 60 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e760
c0010637:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001063b:	85 d2                	test   edx,edx
c001063d:	75 0c                	jne    c001064b <addToTerminalCycle(VgaText*)+0x1a>
c001063f:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010645:	a3 60 e7 02 c0       	mov    ds:0xc002e760,eax
c001064a:	c3                   	ret    
c001064b:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010651:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010657:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001065d:	c3                   	ret    

c001065e <installVgaTextImplementation()>:
c001065e:	83 ec 10             	sub    esp,0x10
c0010661:	6a 20                	push   0x20
c0010663:	6a 00                	push   0x0
c0010665:	68 40 e7 02 c0       	push   0xc002e740
c001066a:	e8 09 01 ff ff       	call   c0000778 <memset>
c001066f:	83 c4 1c             	add    esp,0x1c
c0010672:	c3                   	ret    

c0010673 <scrollTerminalScrollLock(int)>:
c0010673:	c3                   	ret    

c0010674 <VgaText::load()>:
c0010674:	53                   	push   ebx
c0010675:	31 c0                	xor    eax,eax
c0010677:	83 ec 58             	sub    esp,0x58
c001067a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001067e:	89 e2                	mov    edx,esp
c0010680:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010684:	40                   	inc    eax
c0010685:	83 f8 50             	cmp    eax,0x50
c0010688:	75 f6                	jne    c0010680 <VgaText::load()+0xc>
c001068a:	31 c0                	xor    eax,eax
c001068c:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010693:	84 c9                	test   cl,cl
c0010695:	74 06                	je     c001069d <VgaText::load()+0x29>
c0010697:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001069a:	40                   	inc    eax
c001069b:	eb ef                	jmp    c001068c <VgaText::load()+0x18>
c001069d:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00106a3:	85 c0                	test   eax,eax
c00106a5:	74 09                	je     c00106b0 <VgaText::load()+0x3c>
c00106a7:	51                   	push   ecx
c00106a8:	51                   	push   ecx
c00106a9:	52                   	push   edx
c00106aa:	53                   	push   ebx
c00106ab:	ff d0                	call   eax
c00106ad:	83 c4 10             	add    esp,0x10
c00106b0:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00106b6:	85 c0                	test   eax,eax
c00106b8:	74 09                	je     c00106c3 <VgaText::load()+0x4f>
c00106ba:	83 ec 0c             	sub    esp,0xc
c00106bd:	53                   	push   ebx
c00106be:	ff d0                	call   eax
c00106c0:	83 c4 10             	add    esp,0x10
c00106c3:	83 c4 58             	add    esp,0x58
c00106c6:	5b                   	pop    ebx
c00106c7:	c3                   	ret    

c00106c8 <VgaText::updateCursor()>:
c00106c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106cc:	39 05 64 e7 02 c0    	cmp    DWORD PTR ds:0xc002e764,eax
c00106d2:	75 0c                	jne    c00106e0 <VgaText::updateCursor()+0x18>
c00106d4:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00106da:	85 c0                	test   eax,eax
c00106dc:	74 02                	je     c00106e0 <VgaText::updateCursor()+0x18>
c00106de:	ff e0                	jmp    eax
c00106e0:	c3                   	ret    
c00106e1:	90                   	nop

c00106e2 <VgaText::showCursor(bool)>:
c00106e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ea:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00106f0:	c3                   	ret    
c00106f1:	90                   	nop

c00106f2 <VgaText::disableBlink(bool)>:
c00106f2:	56                   	push   esi
c00106f3:	53                   	push   ebx
c00106f4:	51                   	push   ecx
c00106f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106fd:	39 1d 64 e7 02 c0    	cmp    DWORD PTR ds:0xc002e764,ebx
c0010703:	75 18                	jne    c001071d <VgaText::disableBlink(bool)+0x2b>
c0010705:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001070b:	85 c0                	test   eax,eax
c001070d:	74 0e                	je     c001071d <VgaText::disableBlink(bool)+0x2b>
c001070f:	89 f1                	mov    ecx,esi
c0010711:	52                   	push   edx
c0010712:	52                   	push   edx
c0010713:	0f b6 d1             	movzx  edx,cl
c0010716:	52                   	push   edx
c0010717:	53                   	push   ebx
c0010718:	ff d0                	call   eax
c001071a:	83 c4 10             	add    esp,0x10
c001071d:	89 f0                	mov    eax,esi
c001071f:	83 f0 01             	xor    eax,0x1
c0010722:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010728:	58                   	pop    eax
c0010729:	5b                   	pop    ebx
c001072a:	5e                   	pop    esi
c001072b:	c3                   	ret    

c001072c <VgaText::doANSI_SGR(int)>:
c001072c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010734:	85 d2                	test   edx,edx
c0010736:	75 14                	jne    c001074c <VgaText::doANSI_SGR(int)+0x20>
c0010738:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c001073e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010744:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001074a:	eb 65                	jmp    c00107b1 <VgaText::doANSI_SGR(int)+0x85>
c001074c:	83 fa 07             	cmp    edx,0x7
c001074f:	75 14                	jne    c0010765 <VgaText::doANSI_SGR(int)+0x39>
c0010751:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010757:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001075d:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010763:	eb 4c                	jmp    c00107b1 <VgaText::doANSI_SGR(int)+0x85>
c0010765:	83 fa 1b             	cmp    edx,0x1b
c0010768:	74 ce                	je     c0010738 <VgaText::doANSI_SGR(int)+0xc>
c001076a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001076d:	83 f9 07             	cmp    ecx,0x7
c0010770:	77 09                	ja     c001077b <VgaText::doANSI_SGR(int)+0x4f>
c0010772:	8b 14 8d e0 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2a20]
c0010779:	eb 20                	jmp    c001079b <VgaText::doANSI_SGR(int)+0x6f>
c001077b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001077e:	83 f9 07             	cmp    ecx,0x7
c0010781:	77 09                	ja     c001078c <VgaText::doANSI_SGR(int)+0x60>
c0010783:	8b 14 8d e0 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2a20]
c001078a:	eb 25                	jmp    c00107b1 <VgaText::doANSI_SGR(int)+0x85>
c001078c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001078f:	83 f9 07             	cmp    ecx,0x7
c0010792:	77 0e                	ja     c00107a2 <VgaText::doANSI_SGR(int)+0x76>
c0010794:	8b 14 95 98 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b68]
c001079b:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00107a1:	c3                   	ret    
c00107a2:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00107a5:	83 f9 07             	cmp    ecx,0x7
c00107a8:	77 0d                	ja     c00107b7 <VgaText::doANSI_SGR(int)+0x8b>
c00107aa:	8b 14 95 70 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b90]
c00107b1:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00107b7:	c3                   	ret    

c00107b8 <VgaText::setDefaultBgColour(VgaColour)>:
c00107b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107c0:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00107c6:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00107cc:	c3                   	ret    
c00107cd:	90                   	nop

c00107ce <VgaText::setDefaultFgColour(VgaColour)>:
c00107ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107d6:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00107dc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00107e2:	c3                   	ret    
c00107e3:	90                   	nop

c00107e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00107e4:	53                   	push   ebx
c00107e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00107e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00107ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00107f1:	51                   	push   ecx
c00107f2:	e8 c1 ff ff ff       	call   c00107b8 <VgaText::setDefaultBgColour(VgaColour)>
c00107f7:	58                   	pop    eax
c00107f8:	5a                   	pop    edx
c00107f9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00107fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010801:	5b                   	pop    ebx
c0010802:	eb ca                	jmp    c00107ce <VgaText::setDefaultFgColour(VgaColour)>

c0010804 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010804:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010808:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001080d:	83 e0 0f             	and    eax,0xf
c0010810:	c1 e2 04             	shl    edx,0x4
c0010813:	09 d0                	or     eax,edx
c0010815:	c3                   	ret    

c0010816 <VgaText::scrollScreen()>:
c0010816:	57                   	push   edi
c0010817:	56                   	push   esi
c0010818:	be 01 00 00 00       	mov    esi,0x1
c001081d:	53                   	push   ebx
c001081e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010822:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010828:	31 ff                	xor    edi,edi
c001082a:	01 d9                	add    ecx,ebx
c001082c:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c001082f:	83 fe 17             	cmp    esi,0x17
c0010832:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010838:	75 28                	jne    c0010862 <VgaText::scrollScreen()+0x4c>
c001083a:	f7 c7 01 00 00 00    	test   edi,0x1
c0010840:	74 1c                	je     c001085e <VgaText::scrollScreen()+0x48>
c0010842:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010849:	50                   	push   eax
c001084a:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010851:	50                   	push   eax
c0010852:	e8 ad ff ff ff       	call   c0010804 <VgaText::combineColours(unsigned char, unsigned char)>
c0010857:	5a                   	pop    edx
c0010858:	5a                   	pop    edx
c0010859:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001085c:	eb 04                	jmp    c0010862 <VgaText::scrollScreen()+0x4c>
c001085e:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010862:	47                   	inc    edi
c0010863:	41                   	inc    ecx
c0010864:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001086a:	75 c0                	jne    c001082c <VgaText::scrollScreen()+0x16>
c001086c:	46                   	inc    esi
c001086d:	83 fe 18             	cmp    esi,0x18
c0010870:	75 b0                	jne    c0010822 <VgaText::scrollScreen()+0xc>
c0010872:	39 1d 64 e7 02 c0    	cmp    DWORD PTR ds:0xc002e764,ebx
c0010878:	75 24                	jne    c001089e <VgaText::scrollScreen()+0x88>
c001087a:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010881:	74 08                	je     c001088b <VgaText::scrollScreen()+0x75>
c0010883:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010889:	eb 13                	jmp    c001089e <VgaText::scrollScreen()+0x88>
c001088b:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010891:	85 c0                	test   eax,eax
c0010893:	74 09                	je     c001089e <VgaText::scrollScreen()+0x88>
c0010895:	83 ec 0c             	sub    esp,0xc
c0010898:	53                   	push   ebx
c0010899:	ff d0                	call   eax
c001089b:	83 c4 10             	add    esp,0x10
c001089e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108a2:	5b                   	pop    ebx
c00108a3:	5e                   	pop    esi
c00108a4:	5f                   	pop    edi
c00108a5:	e9 1e fe ff ff       	jmp    c00106c8 <VgaText::updateCursor()>

c00108aa <VgaText::combineCharAndColour(char, unsigned char)>:
c00108aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00108af:	c1 e0 08             	shl    eax,0x8
c00108b2:	89 c2                	mov    edx,eax
c00108b4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00108b9:	09 d0                	or     eax,edx
c00108bb:	c3                   	ret    

c00108bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00108bc:	53                   	push   ebx
c00108bd:	83 ec 08             	sub    esp,0x8
c00108c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00108c4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00108c9:	50                   	push   eax
c00108ca:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00108cf:	50                   	push   eax
c00108d0:	e8 2f ff ff ff       	call   c0010804 <VgaText::combineColours(unsigned char, unsigned char)>
c00108d5:	5a                   	pop    edx
c00108d6:	0f b6 c0             	movzx  eax,al
c00108d9:	5b                   	pop    ebx
c00108da:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00108df:	50                   	push   eax
c00108e0:	53                   	push   ebx
c00108e1:	e8 c4 ff ff ff       	call   c00108aa <VgaText::combineCharAndColour(char, unsigned char)>
c00108e6:	5a                   	pop    edx
c00108e7:	5a                   	pop    edx
c00108e8:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00108ee:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00108f2:	0f b7 d2             	movzx  edx,dx
c00108f5:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00108fa:	39 0d 64 e7 02 c0    	cmp    DWORD PTR ds:0xc002e764,ecx
c0010900:	75 14                	jne    c0010916 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010902:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010908:	85 c0                	test   eax,eax
c001090a:	74 0a                	je     c0010916 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001090c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010910:	83 c4 08             	add    esp,0x8
c0010913:	5b                   	pop    ebx
c0010914:	ff e0                	jmp    eax
c0010916:	83 c4 08             	add    esp,0x8
c0010919:	5b                   	pop    ebx
c001091a:	c3                   	ret    
c001091b:	90                   	nop

c001091c <VgaText::getCursorX()>:
c001091c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010920:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010926:	c3                   	ret    
c0010927:	90                   	nop

c0010928 <VgaText::getCursorY()>:
c0010928:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001092c:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010932:	c3                   	ret    
c0010933:	90                   	nop

c0010934 <VgaText::setCursor(int, int)>:
c0010934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010938:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001093c:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010942:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010946:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001094c:	e9 77 fd ff ff       	jmp    c00106c8 <VgaText::updateCursor()>
c0010951:	90                   	nop

c0010952 <VgaText::setCursorX(int)>:
c0010952:	83 ec 10             	sub    esp,0x10
c0010955:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010959:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001095f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010963:	50                   	push   eax
c0010964:	e8 cb ff ff ff       	call   c0010934 <VgaText::setCursor(int, int)>
c0010969:	83 c4 1c             	add    esp,0x1c
c001096c:	c3                   	ret    
c001096d:	90                   	nop

c001096e <VgaText::setCursorY(int)>:
c001096e:	83 ec 10             	sub    esp,0x10
c0010971:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010975:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010979:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001097f:	50                   	push   eax
c0010980:	e8 af ff ff ff       	call   c0010934 <VgaText::setCursor(int, int)>
c0010985:	83 c4 1c             	add    esp,0x1c
c0010988:	c3                   	ret    
c0010989:	90                   	nop

c001098a <VgaText::incrementCursor(bool)>:
c001098a:	56                   	push   esi
c001098b:	53                   	push   ebx
c001098c:	51                   	push   ecx
c001098d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010991:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010995:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001099b:	40                   	inc    eax
c001099c:	83 f8 50             	cmp    eax,0x50
c001099f:	74 08                	je     c00109a9 <VgaText::incrementCursor(bool)+0x1f>
c00109a1:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00109a7:	eb 33                	jmp    c00109dc <VgaText::incrementCursor(bool)+0x52>
c00109a9:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00109af:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109b9:	8d 50 01             	lea    edx,[eax+0x1]
c00109bc:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00109c2:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00109c8:	75 12                	jne    c00109dc <VgaText::incrementCursor(bool)+0x52>
c00109ca:	83 ec 0c             	sub    esp,0xc
c00109cd:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00109d3:	53                   	push   ebx
c00109d4:	e8 3d fe ff ff       	call   c0010816 <VgaText::scrollScreen()>
c00109d9:	83 c4 10             	add    esp,0x10
c00109dc:	89 f0                	mov    eax,esi
c00109de:	84 c0                	test   al,al
c00109e0:	74 0c                	je     c00109ee <VgaText::incrementCursor(bool)+0x64>
c00109e2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109e6:	5a                   	pop    edx
c00109e7:	5b                   	pop    ebx
c00109e8:	5e                   	pop    esi
c00109e9:	e9 da fc ff ff       	jmp    c00106c8 <VgaText::updateCursor()>
c00109ee:	58                   	pop    eax
c00109ef:	5b                   	pop    ebx
c00109f0:	5e                   	pop    esi
c00109f1:	c3                   	ret    

c00109f2 <VgaText::updateRAMUsageDisplay(int)>:
c00109f2:	56                   	push   esi
c00109f3:	8b 35 c0 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d5c0
c00109f9:	53                   	push   ebx
c00109fa:	bb 0a 00 00 00       	mov    ebx,0xa
c00109ff:	6a 0f                	push   0xf
c0010a01:	6a 00                	push   0x0
c0010a03:	e8 fc fd ff ff       	call   c0010804 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a08:	5a                   	pop    edx
c0010a09:	59                   	pop    ecx
c0010a0a:	0f b6 c8             	movzx  ecx,al
c0010a0d:	51                   	push   ecx
c0010a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a12:	99                   	cdq    
c0010a13:	f7 fb                	idiv   ebx
c0010a15:	89 d3                	mov    ebx,edx
c0010a17:	83 c0 30             	add    eax,0x30
c0010a1a:	83 c3 30             	add    ebx,0x30
c0010a1d:	0f be c0             	movsx  eax,al
c0010a20:	0f b6 db             	movzx  ebx,bl
c0010a23:	50                   	push   eax
c0010a24:	e8 81 fe ff ff       	call   c00108aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010a29:	5a                   	pop    edx
c0010a2a:	5a                   	pop    edx
c0010a2b:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010a32:	51                   	push   ecx
c0010a33:	53                   	push   ebx
c0010a34:	e8 71 fe ff ff       	call   c00108aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010a39:	5b                   	pop    ebx
c0010a3a:	5a                   	pop    edx
c0010a3b:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010a42:	51                   	push   ecx
c0010a43:	6a 25                	push   0x25
c0010a45:	e8 60 fe ff ff       	call   c00108aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4a:	59                   	pop    ecx
c0010a4b:	5b                   	pop    ebx
c0010a4c:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010a53:	5b                   	pop    ebx
c0010a54:	5e                   	pop    esi
c0010a55:	c3                   	ret    

c0010a56 <VgaText::updateDiskUsage()>:
c0010a56:	55                   	push   ebp
c0010a57:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a5c:	57                   	push   edi
c0010a5d:	8b 3d c0 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5c0
c0010a63:	56                   	push   esi
c0010a64:	53                   	push   ebx
c0010a65:	6a 0f                	push   0xf
c0010a67:	6a 00                	push   0x0
c0010a69:	e8 96 fd ff ff       	call   c0010804 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a6e:	5a                   	pop    edx
c0010a6f:	0f b6 d8             	movzx  ebx,al
c0010a72:	59                   	pop    ecx
c0010a73:	8b 35 e8 29 03 c0    	mov    esi,DWORD PTR ds:0xc00329e8
c0010a79:	53                   	push   ebx
c0010a7a:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a7f:	89 f0                	mov    eax,esi
c0010a81:	99                   	cdq    
c0010a82:	f7 fd                	idiv   ebp
c0010a84:	99                   	cdq    
c0010a85:	f7 f9                	idiv   ecx
c0010a87:	8d 42 30             	lea    eax,[edx+0x30]
c0010a8a:	0f b6 c0             	movzx  eax,al
c0010a8d:	50                   	push   eax
c0010a8e:	e8 17 fe ff ff       	call   c00108aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010a93:	5d                   	pop    ebp
c0010a94:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a99:	5a                   	pop    edx
c0010a9a:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a9e:	53                   	push   ebx
c0010a9f:	89 f0                	mov    eax,esi
c0010aa1:	99                   	cdq    
c0010aa2:	f7 fd                	idiv   ebp
c0010aa4:	99                   	cdq    
c0010aa5:	f7 f9                	idiv   ecx
c0010aa7:	8d 42 30             	lea    eax,[edx+0x30]
c0010aaa:	0f b6 c0             	movzx  eax,al
c0010aad:	50                   	push   eax
c0010aae:	e8 f7 fd ff ff       	call   c00108aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab3:	5d                   	pop    ebp
c0010ab4:	bd 64 00 00 00       	mov    ebp,0x64
c0010ab9:	5a                   	pop    edx
c0010aba:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010ac1:	53                   	push   ebx
c0010ac2:	89 f0                	mov    eax,esi
c0010ac4:	99                   	cdq    
c0010ac5:	f7 fd                	idiv   ebp
c0010ac7:	99                   	cdq    
c0010ac8:	f7 f9                	idiv   ecx
c0010aca:	8d 42 30             	lea    eax,[edx+0x30]
c0010acd:	0f b6 c0             	movzx  eax,al
c0010ad0:	50                   	push   eax
c0010ad1:	e8 d4 fd ff ff       	call   c00108aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad6:	5d                   	pop    ebp
c0010ad7:	5a                   	pop    edx
c0010ad8:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010adf:	53                   	push   ebx
c0010ae0:	89 f0                	mov    eax,esi
c0010ae2:	99                   	cdq    
c0010ae3:	f7 f9                	idiv   ecx
c0010ae5:	89 d6                	mov    esi,edx
c0010ae7:	99                   	cdq    
c0010ae8:	f7 f9                	idiv   ecx
c0010aea:	8d 42 30             	lea    eax,[edx+0x30]
c0010aed:	0f b6 c0             	movzx  eax,al
c0010af0:	50                   	push   eax
c0010af1:	e8 b4 fd ff ff       	call   c00108aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010af6:	5d                   	pop    ebp
c0010af7:	5a                   	pop    edx
c0010af8:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010aff:	53                   	push   ebx
c0010b00:	8d 46 30             	lea    eax,[esi+0x30]
c0010b03:	0f b6 f0             	movzx  esi,al
c0010b06:	56                   	push   esi
c0010b07:	e8 9e fd ff ff       	call   c00108aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010b0c:	5e                   	pop    esi
c0010b0d:	8b 35 e4 29 03 c0    	mov    esi,DWORD PTR ds:0xc00329e4
c0010b13:	5d                   	pop    ebp
c0010b14:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010b1b:	bd 10 27 00 00       	mov    ebp,0x2710
c0010b20:	53                   	push   ebx
c0010b21:	89 f0                	mov    eax,esi
c0010b23:	99                   	cdq    
c0010b24:	f7 fd                	idiv   ebp
c0010b26:	99                   	cdq    
c0010b27:	f7 f9                	idiv   ecx
c0010b29:	8d 42 30             	lea    eax,[edx+0x30]
c0010b2c:	0f b6 c0             	movzx  eax,al
c0010b2f:	50                   	push   eax
c0010b30:	e8 75 fd ff ff       	call   c00108aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010b35:	5a                   	pop    edx
c0010b36:	5d                   	pop    ebp
c0010b37:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010b3e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010b43:	53                   	push   ebx
c0010b44:	89 f0                	mov    eax,esi
c0010b46:	99                   	cdq    
c0010b47:	f7 fd                	idiv   ebp
c0010b49:	99                   	cdq    
c0010b4a:	f7 f9                	idiv   ecx
c0010b4c:	8d 42 30             	lea    eax,[edx+0x30]
c0010b4f:	0f b6 c0             	movzx  eax,al
c0010b52:	50                   	push   eax
c0010b53:	e8 52 fd ff ff       	call   c00108aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010b58:	5a                   	pop    edx
c0010b59:	5d                   	pop    ebp
c0010b5a:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010b61:	bd 64 00 00 00       	mov    ebp,0x64
c0010b66:	53                   	push   ebx
c0010b67:	89 f0                	mov    eax,esi
c0010b69:	99                   	cdq    
c0010b6a:	f7 fd                	idiv   ebp
c0010b6c:	99                   	cdq    
c0010b6d:	f7 f9                	idiv   ecx
c0010b6f:	83 c2 30             	add    edx,0x30
c0010b72:	0f b6 d2             	movzx  edx,dl
c0010b75:	52                   	push   edx
c0010b76:	e8 2f fd ff ff       	call   c00108aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010b7b:	5a                   	pop    edx
c0010b7c:	5d                   	pop    ebp
c0010b7d:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b84:	53                   	push   ebx
c0010b85:	89 f0                	mov    eax,esi
c0010b87:	99                   	cdq    
c0010b88:	f7 f9                	idiv   ecx
c0010b8a:	89 d6                	mov    esi,edx
c0010b8c:	99                   	cdq    
c0010b8d:	f7 f9                	idiv   ecx
c0010b8f:	8d 42 30             	lea    eax,[edx+0x30]
c0010b92:	0f b6 c0             	movzx  eax,al
c0010b95:	50                   	push   eax
c0010b96:	e8 0f fd ff ff       	call   c00108aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010b9b:	5a                   	pop    edx
c0010b9c:	59                   	pop    ecx
c0010b9d:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ba4:	53                   	push   ebx
c0010ba5:	8d 46 30             	lea    eax,[esi+0x30]
c0010ba8:	0f b6 f0             	movzx  esi,al
c0010bab:	56                   	push   esi
c0010bac:	e8 f9 fc ff ff       	call   c00108aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010bb1:	5b                   	pop    ebx
c0010bb2:	5e                   	pop    esi
c0010bb3:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010bba:	5b                   	pop    ebx
c0010bbb:	5e                   	pop    esi
c0010bbc:	5f                   	pop    edi
c0010bbd:	5d                   	pop    ebp
c0010bbe:	c3                   	ret    
c0010bbf:	90                   	nop

c0010bc0 <VgaText::updateTitle()>:
c0010bc0:	53                   	push   ebx
c0010bc1:	31 c0                	xor    eax,eax
c0010bc3:	83 ec 58             	sub    esp,0x58
c0010bc6:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010bca:	89 e1                	mov    ecx,esp
c0010bcc:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010bd0:	40                   	inc    eax
c0010bd1:	83 f8 50             	cmp    eax,0x50
c0010bd4:	75 f6                	jne    c0010bcc <VgaText::updateTitle()+0xc>
c0010bd6:	31 c0                	xor    eax,eax
c0010bd8:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010bdf:	84 db                	test   bl,bl
c0010be1:	74 06                	je     c0010be9 <VgaText::updateTitle()+0x29>
c0010be3:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010be6:	40                   	inc    eax
c0010be7:	eb ef                	jmp    c0010bd8 <VgaText::updateTitle()+0x18>
c0010be9:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010bef:	85 c0                	test   eax,eax
c0010bf1:	74 09                	je     c0010bfc <VgaText::updateTitle()+0x3c>
c0010bf3:	53                   	push   ebx
c0010bf4:	53                   	push   ebx
c0010bf5:	51                   	push   ecx
c0010bf6:	52                   	push   edx
c0010bf7:	ff d0                	call   eax
c0010bf9:	83 c4 10             	add    esp,0x10
c0010bfc:	e8 55 fe ff ff       	call   c0010a56 <VgaText::updateDiskUsage()>
c0010c01:	83 c4 58             	add    esp,0x58
c0010c04:	5b                   	pop    ebx
c0010c05:	c3                   	ret    

c0010c06 <VgaText::setTitleTextColour(VgaColour)>:
c0010c06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c0e:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010c14:	eb aa                	jmp    c0010bc0 <VgaText::updateTitle()>

c0010c16 <VgaText::setTitleColour(VgaColour)>:
c0010c16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c1e:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010c24:	eb 9a                	jmp    c0010bc0 <VgaText::updateTitle()>

c0010c26 <VgaText::setTitle(char*)>:
c0010c26:	53                   	push   ebx
c0010c27:	83 ec 10             	sub    esp,0x10
c0010c2a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010c2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c32:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010c38:	50                   	push   eax
c0010c39:	e8 f6 fb fe ff       	call   c0000834 <strcpy>
c0010c3e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010c42:	83 c4 18             	add    esp,0x18
c0010c45:	5b                   	pop    ebx
c0010c46:	e9 75 ff ff ff       	jmp    c0010bc0 <VgaText::updateTitle()>
c0010c4b:	90                   	nop

c0010c4c <VgaText::decrementCursor(bool)>:
c0010c4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010c50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010c54:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010c5a:	85 c0                	test   eax,eax
c0010c5c:	74 07                	je     c0010c65 <VgaText::decrementCursor(bool)+0x19>
c0010c5e:	48                   	dec    eax
c0010c5f:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010c65:	84 c9                	test   cl,cl
c0010c67:	74 09                	je     c0010c72 <VgaText::decrementCursor(bool)+0x26>
c0010c69:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c6d:	e9 56 fa ff ff       	jmp    c00106c8 <VgaText::updateCursor()>
c0010c72:	c3                   	ret    
c0010c73:	90                   	nop

c0010c74 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c74:	53                   	push   ebx
c0010c75:	83 ec 08             	sub    esp,0x8
c0010c78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c88:	3c 07                	cmp    al,0x7
c0010c8a:	75 2a                	jne    c0010cb6 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c8c:	a1 10 e8 02 c0       	mov    eax,ds:0xc002e810
c0010c91:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c99:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010ca1:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010ca9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010cad:	83 c4 08             	add    esp,0x8
c0010cb0:	5b                   	pop    ebx
c0010cb1:	e9 0a 31 00 00       	jmp    c0013dc0 <Buzzer::beep(int, int, bool)>
c0010cb6:	3c 0d                	cmp    al,0xd
c0010cb8:	75 0c                	jne    c0010cc6 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010cba:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010cc4:	eb 3b                	jmp    c0010d01 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010cc6:	3c 0a                	cmp    al,0xa
c0010cc8:	75 40                	jne    c0010d0a <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010cca:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010cd0:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010cda:	8d 50 01             	lea    edx,[eax+0x1]
c0010cdd:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010ce3:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010ce9:	75 12                	jne    c0010cfd <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010ceb:	83 ec 0c             	sub    esp,0xc
c0010cee:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010cf4:	53                   	push   ebx
c0010cf5:	e8 1c fb ff ff       	call   c0010816 <VgaText::scrollScreen()>
c0010cfa:	83 c4 10             	add    esp,0x10
c0010cfd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d01:	83 c4 08             	add    esp,0x8
c0010d04:	5b                   	pop    ebx
c0010d05:	e9 be f9 ff ff       	jmp    c00106c8 <VgaText::updateCursor()>
c0010d0a:	3c 08                	cmp    al,0x8
c0010d0c:	75 31                	jne    c0010d3f <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010d0e:	50                   	push   eax
c0010d0f:	50                   	push   eax
c0010d10:	6a 01                	push   0x1
c0010d12:	53                   	push   ebx
c0010d13:	e8 34 ff ff ff       	call   c0010c4c <VgaText::decrementCursor(bool)>
c0010d18:	5a                   	pop    edx
c0010d19:	59                   	pop    ecx
c0010d1a:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d20:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d26:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d2c:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d32:	6a 20                	push   0x20
c0010d34:	53                   	push   ebx
c0010d35:	e8 82 fb ff ff       	call   c00108bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d3a:	83 c4 28             	add    esp,0x28
c0010d3d:	5b                   	pop    ebx
c0010d3e:	c3                   	ret    
c0010d3f:	83 ec 08             	sub    esp,0x8
c0010d42:	0f be c0             	movsx  eax,al
c0010d45:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d4b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d51:	51                   	push   ecx
c0010d52:	52                   	push   edx
c0010d53:	50                   	push   eax
c0010d54:	53                   	push   ebx
c0010d55:	e8 62 fb ff ff       	call   c00108bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d5a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010d5e:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010d66:	83 c4 28             	add    esp,0x28
c0010d69:	5b                   	pop    ebx
c0010d6a:	e9 1b fc ff ff       	jmp    c001098a <VgaText::incrementCursor(bool)>
c0010d6f:	90                   	nop

c0010d70 <VgaText::isShowingCursor()>:
c0010d70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d74:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d7a:	c3                   	ret    
c0010d7b:	90                   	nop

c0010d7c <VgaText::isBlinkDisabled()>:
c0010d7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d80:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d86:	83 f0 01             	xor    eax,0x1
c0010d89:	c3                   	ret    

c0010d8a <VgaText::setCursorHeight(int)>:
c0010d8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d92:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d98:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010da3:	e9 3a f9 ff ff       	jmp    c00106e2 <VgaText::showCursor(bool)>

c0010da8 <VgaText::getCursorHeight()>:
c0010da8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dac:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010db2:	c3                   	ret    

c0010db3 <setActiveTerminal(VgaText*)>:
c0010db3:	53                   	push   ebx
c0010db4:	83 ec 08             	sub    esp,0x8
c0010db7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010dbb:	85 db                	test   ebx,ebx
c0010dbd:	75 11                	jne    c0010dd0 <setActiveTerminal(VgaText*)+0x1d>
c0010dbf:	c7 44 24 10 60 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a460
c0010dc7:	83 c4 08             	add    esp,0x8
c0010dca:	5b                   	pop    ebx
c0010dcb:	e9 a3 98 00 00       	jmp    c001a673 <Krnl::panic(char const*)>
c0010dd0:	50                   	push   eax
c0010dd1:	50                   	push   eax
c0010dd2:	53                   	push   ebx
c0010dd3:	68 6e a4 02 c0       	push   0xc002a46e
c0010dd8:	e8 e4 21 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0010ddd:	a1 64 e7 02 c0       	mov    eax,ds:0xc002e764
c0010de2:	83 c4 10             	add    esp,0x10
c0010de5:	85 c0                	test   eax,eax
c0010de7:	74 0c                	je     c0010df5 <setActiveTerminal(VgaText*)+0x42>
c0010de9:	83 ec 0c             	sub    esp,0xc
c0010dec:	50                   	push   eax
c0010ded:	e8 d6 f8 ff ff       	call   c00106c8 <VgaText::updateCursor()>
c0010df2:	83 c4 10             	add    esp,0x10
c0010df5:	89 1d 64 e7 02 c0    	mov    DWORD PTR ds:0xc002e764,ebx
c0010dfb:	51                   	push   ecx
c0010dfc:	51                   	push   ecx
c0010dfd:	53                   	push   ebx
c0010dfe:	68 86 a4 02 c0       	push   0xc002a486
c0010e03:	e8 b9 21 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0010e08:	83 c4 0c             	add    esp,0xc
c0010e0b:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010e11:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010e17:	53                   	push   ebx
c0010e18:	e8 17 fb ff ff       	call   c0010934 <VgaText::setCursor(int, int)>
c0010e1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e20:	e8 57 ff ff ff       	call   c0010d7c <VgaText::isBlinkDisabled()>
c0010e25:	5a                   	pop    edx
c0010e26:	0f b6 c0             	movzx  eax,al
c0010e29:	59                   	pop    ecx
c0010e2a:	50                   	push   eax
c0010e2b:	53                   	push   ebx
c0010e2c:	e8 c1 f8 ff ff       	call   c00106f2 <VgaText::disableBlink(bool)>
c0010e31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e34:	e8 6f ff ff ff       	call   c0010da8 <VgaText::getCursorHeight()>
c0010e39:	5a                   	pop    edx
c0010e3a:	59                   	pop    ecx
c0010e3b:	50                   	push   eax
c0010e3c:	53                   	push   ebx
c0010e3d:	e8 48 ff ff ff       	call   c0010d8a <VgaText::setCursorHeight(int)>
c0010e42:	83 c4 10             	add    esp,0x10
c0010e45:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010e4c:	75 0a                	jne    c0010e58 <setActiveTerminal(VgaText*)+0xa5>
c0010e4e:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010e58:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010e5c:	83 c4 08             	add    esp,0x8
c0010e5f:	5b                   	pop    ebx
c0010e60:	e9 0f f8 ff ff       	jmp    c0010674 <VgaText::load()>

c0010e65 <doTerminalCycle()>:
c0010e65:	83 ec 18             	sub    esp,0x18
c0010e68:	a1 60 e7 02 c0       	mov    eax,ds:0xc002e760
c0010e6d:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e73:	50                   	push   eax
c0010e74:	a3 60 e7 02 c0       	mov    ds:0xc002e760,eax
c0010e79:	e8 35 ff ff ff       	call   c0010db3 <setActiveTerminal(VgaText*)>
c0010e7e:	83 c4 1c             	add    esp,0x1c
c0010e81:	c3                   	ret    

c0010e82 <VgaText::doUpdate()>:
c0010e82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e86:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e8c:	85 c0                	test   eax,eax
c0010e8e:	74 02                	je     c0010e92 <VgaText::doUpdate()+0x10>
c0010e90:	ff e0                	jmp    eax
c0010e92:	c3                   	ret    
c0010e93:	90                   	nop

c0010e94 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e94:	55                   	push   ebp
c0010e95:	57                   	push   edi
c0010e96:	56                   	push   esi
c0010e97:	53                   	push   ebx
c0010e98:	83 ec 1c             	sub    esp,0x1c
c0010e9b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e9f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010ea4:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010eab:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010eae:	50                   	push   eax
c0010eaf:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010eb4:	50                   	push   eax
c0010eb5:	e8 4a f9 ff ff       	call   c0010804 <VgaText::combineColours(unsigned char, unsigned char)>
c0010eba:	59                   	pop    ecx
c0010ebb:	0f b6 c0             	movzx  eax,al
c0010ebe:	5b                   	pop    ebx
c0010ebf:	31 c9                	xor    ecx,ecx
c0010ec1:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ec9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010ecd:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ed3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ed7:	0f b7 db             	movzx  ebx,bx
c0010eda:	01 db                	add    ebx,ebx
c0010edc:	01 fb                	add    ebx,edi
c0010ede:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010ee1:	84 c0                	test   al,al
c0010ee3:	0f 84 38 01 00 00    	je     c0011021 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010ee9:	3c 0d                	cmp    al,0xd
c0010eeb:	75 0f                	jne    c0010efc <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010eed:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010ef7:	e9 1f 01 00 00       	jmp    c001101b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010efc:	3c 0a                	cmp    al,0xa
c0010efe:	75 5b                	jne    c0010f5b <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010f00:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010f06:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010f10:	8d 48 01             	lea    ecx,[eax+0x1]
c0010f13:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010f19:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010f1f:	75 12                	jne    c0010f33 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010f21:	83 ec 0c             	sub    esp,0xc
c0010f24:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010f2a:	55                   	push   ebp
c0010f2b:	e8 e6 f8 ff ff       	call   c0010816 <VgaText::scrollScreen()>
c0010f30:	83 c4 10             	add    esp,0x10
c0010f33:	83 ec 0c             	sub    esp,0xc
c0010f36:	55                   	push   ebp
c0010f37:	e8 8c f7 ff ff       	call   c00106c8 <VgaText::updateCursor()>
c0010f3c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f44:	83 c4 10             	add    esp,0x10
c0010f47:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f4d:	31 c9                	xor    ecx,ecx
c0010f4f:	0f b7 db             	movzx  ebx,bx
c0010f52:	01 db                	add    ebx,ebx
c0010f54:	01 fb                	add    ebx,edi
c0010f56:	e9 c0 00 00 00       	jmp    c001101b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f5b:	3c 08                	cmp    al,0x8
c0010f5d:	75 4e                	jne    c0010fad <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010f5f:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f63:	53                   	push   ebx
c0010f64:	53                   	push   ebx
c0010f65:	6a 01                	push   0x1
c0010f67:	55                   	push   ebp
c0010f68:	e8 df fc ff ff       	call   c0010c4c <VgaText::decrementCursor(bool)>
c0010f6d:	58                   	pop    eax
c0010f6e:	5a                   	pop    edx
c0010f6f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f75:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f7b:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f81:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f87:	6a 20                	push   0x20
c0010f89:	55                   	push   ebp
c0010f8a:	e8 2d f9 ff ff       	call   c00108bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f8f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f97:	83 c4 20             	add    esp,0x20
c0010f9a:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010fa0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010fa4:	0f b7 db             	movzx  ebx,bx
c0010fa7:	01 db                	add    ebx,ebx
c0010fa9:	01 fb                	add    ebx,edi
c0010fab:	eb 6e                	jmp    c001101b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010fad:	51                   	push   ecx
c0010fae:	51                   	push   ecx
c0010faf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010fb3:	50                   	push   eax
c0010fb4:	e8 f1 f8 ff ff       	call   c00108aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010fb9:	83 c4 10             	add    esp,0x10
c0010fbc:	66 89 03             	mov    WORD PTR [ebx],ax
c0010fbf:	39 2d 64 e7 02 c0    	cmp    DWORD PTR ds:0xc002e764,ebp
c0010fc5:	75 2a                	jne    c0010ff1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010fc7:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010fcd:	85 c0                	test   eax,eax
c0010fcf:	74 20                	je     c0010ff1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010fd1:	52                   	push   edx
c0010fd2:	52                   	push   edx
c0010fd3:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010fd9:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010fdf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010fe3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010fe7:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010fea:	51                   	push   ecx
c0010feb:	55                   	push   ebp
c0010fec:	ff d0                	call   eax
c0010fee:	83 c4 20             	add    esp,0x20
c0010ff1:	83 c3 02             	add    ebx,0x2
c0010ff4:	50                   	push   eax
c0010ff5:	50                   	push   eax
c0010ff6:	6a 00                	push   0x0
c0010ff8:	55                   	push   ebp
c0010ff9:	e8 8c f9 ff ff       	call   c001098a <VgaText::incrementCursor(bool)>
c0010ffe:	83 c4 10             	add    esp,0x10
c0011001:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0011008:	75 0f                	jne    c0011019 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c001100a:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0011012:	0f b7 db             	movzx  ebx,bx
c0011015:	01 db                	add    ebx,ebx
c0011017:	01 fb                	add    ebx,edi
c0011019:	b1 01                	mov    cl,0x1
c001101b:	46                   	inc    esi
c001101c:	e9 bd fe ff ff       	jmp    c0010ede <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0011021:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0011025:	83 ec 0c             	sub    esp,0xc
c0011028:	55                   	push   ebp
c0011029:	e8 9a f6 ff ff       	call   c00106c8 <VgaText::updateCursor()>
c001102e:	83 c4 10             	add    esp,0x10
c0011031:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0011035:	84 c9                	test   cl,cl
c0011037:	74 0c                	je     c0011045 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0011039:	83 ec 0c             	sub    esp,0xc
c001103c:	55                   	push   ebp
c001103d:	e8 40 fe ff ff       	call   c0010e82 <VgaText::doUpdate()>
c0011042:	83 c4 10             	add    esp,0x10
c0011045:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c001104c:	83 c4 1c             	add    esp,0x1c
c001104f:	5b                   	pop    ebx
c0011050:	5e                   	pop    esi
c0011051:	5f                   	pop    edi
c0011052:	5d                   	pop    ebp
c0011053:	c3                   	ret    

c0011054 <VgaText::clearScreen()>:
c0011054:	57                   	push   edi
c0011055:	56                   	push   esi
c0011056:	31 f6                	xor    esi,esi
c0011058:	53                   	push   ebx
c0011059:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001105d:	52                   	push   edx
c001105e:	6a 00                	push   0x0
c0011060:	6a 00                	push   0x0
c0011062:	53                   	push   ebx
c0011063:	e8 cc f8 ff ff       	call   c0010934 <VgaText::setCursor(int, int)>
c0011068:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c001106f:	83 c4 10             	add    esp,0x10
c0011072:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0011078:	7e 26                	jle    c00110a0 <VgaText::clearScreen()+0x4c>
c001107a:	31 ff                	xor    edi,edi
c001107c:	50                   	push   eax
c001107d:	50                   	push   eax
c001107e:	56                   	push   esi
c001107f:	57                   	push   edi
c0011080:	47                   	inc    edi
c0011081:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011087:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001108d:	6a 20                	push   0x20
c001108f:	53                   	push   ebx
c0011090:	e8 27 f8 ff ff       	call   c00108bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011095:	83 c4 20             	add    esp,0x20
c0011098:	83 ff 50             	cmp    edi,0x50
c001109b:	75 df                	jne    c001107c <VgaText::clearScreen()+0x28>
c001109d:	46                   	inc    esi
c001109e:	eb d2                	jmp    c0011072 <VgaText::clearScreen()+0x1e>
c00110a0:	83 ec 0c             	sub    esp,0xc
c00110a3:	53                   	push   ebx
c00110a4:	e8 d9 fd ff ff       	call   c0010e82 <VgaText::doUpdate()>
c00110a9:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c00110b0:	83 c4 10             	add    esp,0x10
c00110b3:	5b                   	pop    ebx
c00110b4:	5e                   	pop    esi
c00110b5:	5f                   	pop    edi
c00110b6:	c3                   	ret    
c00110b7:	90                   	nop

c00110b8 <VgaText::putchar(char)>:
c00110b8:	56                   	push   esi
c00110b9:	53                   	push   ebx
c00110ba:	83 ec 14             	sub    esp,0x14
c00110bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00110c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00110c5:	3c 5b                	cmp    al,0x5b
c00110c7:	75 21                	jne    c00110ea <VgaText::putchar(char)+0x32>
c00110c9:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c00110d0:	74 28                	je     c00110fa <VgaText::putchar(char)+0x42>
c00110d2:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c00110db:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00110e5:	e9 e2 00 00 00       	jmp    c00111cc <VgaText::putchar(char)+0x114>
c00110ea:	3c 1b                	cmp    al,0x1b
c00110ec:	75 0c                	jne    c00110fa <VgaText::putchar(char)+0x42>
c00110ee:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00110f5:	e9 d2 00 00 00       	jmp    c00111cc <VgaText::putchar(char)+0x114>
c00110fa:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011100:	84 c9                	test   cl,cl
c0011102:	0f 84 ab 00 00 00    	je     c00111b3 <VgaText::putchar(char)+0xfb>
c0011108:	8d 50 c0             	lea    edx,[eax-0x40]
c001110b:	80 fa 3e             	cmp    dl,0x3e
c001110e:	0f 87 82 00 00 00    	ja     c0011196 <VgaText::putchar(char)+0xde>
c0011114:	3c 6d                	cmp    al,0x6d
c0011116:	75 4d                	jne    c0011165 <VgaText::putchar(char)+0xad>
c0011118:	31 f6                	xor    esi,esi
c001111a:	31 d2                	xor    edx,edx
c001111c:	31 c0                	xor    eax,eax
c001111e:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0011124:	7e 30                	jle    c0011156 <VgaText::putchar(char)+0x9e>
c0011126:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c001112e:	80 fa 3b             	cmp    dl,0x3b
c0011131:	75 17                	jne    c001114a <VgaText::putchar(char)+0x92>
c0011133:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011137:	50                   	push   eax
c0011138:	53                   	push   ebx
c0011139:	e8 ee f5 ff ff       	call   c001072c <VgaText::doANSI_SGR(int)>
c001113e:	59                   	pop    ecx
c001113f:	31 d2                	xor    edx,edx
c0011141:	58                   	pop    eax
c0011142:	31 c0                	xor    eax,eax
c0011144:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011148:	eb 09                	jmp    c0011153 <VgaText::putchar(char)+0x9b>
c001114a:	6b c0 0a             	imul   eax,eax,0xa
c001114d:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011151:	88 ca                	mov    dl,cl
c0011153:	46                   	inc    esi
c0011154:	eb c8                	jmp    c001111e <VgaText::putchar(char)+0x66>
c0011156:	84 d2                	test   dl,dl
c0011158:	74 31                	je     c001118b <VgaText::putchar(char)+0xd3>
c001115a:	50                   	push   eax
c001115b:	53                   	push   ebx
c001115c:	e8 cb f5 ff ff       	call   c001072c <VgaText::doANSI_SGR(int)>
c0011161:	58                   	pop    eax
c0011162:	5a                   	pop    edx
c0011163:	eb 26                	jmp    c001118b <VgaText::putchar(char)+0xd3>
c0011165:	3c 4a                	cmp    al,0x4a
c0011167:	75 22                	jne    c001118b <VgaText::putchar(char)+0xd3>
c0011169:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011170:	75 19                	jne    c001118b <VgaText::putchar(char)+0xd3>
c0011172:	83 ec 0c             	sub    esp,0xc
c0011175:	53                   	push   ebx
c0011176:	e8 d9 fe ff ff       	call   c0011054 <VgaText::clearScreen()>
c001117b:	83 c4 0c             	add    esp,0xc
c001117e:	6a 00                	push   0x0
c0011180:	6a 00                	push   0x0
c0011182:	53                   	push   ebx
c0011183:	e8 ac f7 ff ff       	call   c0010934 <VgaText::setCursor(int, int)>
c0011188:	83 c4 10             	add    esp,0x10
c001118b:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011194:	eb 36                	jmp    c00111cc <VgaText::putchar(char)+0x114>
c0011196:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001119c:	83 fa 0e             	cmp    edx,0xe
c001119f:	7f 2b                	jg     c00111cc <VgaText::putchar(char)+0x114>
c00111a1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00111a4:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00111aa:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00111b1:	eb 19                	jmp    c00111cc <VgaText::putchar(char)+0x114>
c00111b3:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00111b9:	0f be c0             	movsx  eax,al
c00111bc:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00111c2:	50                   	push   eax
c00111c3:	53                   	push   ebx
c00111c4:	e8 ab fa ff ff       	call   c0010c74 <VgaText::putchar(char, VgaColour, VgaColour)>
c00111c9:	83 c4 10             	add    esp,0x10
c00111cc:	83 c4 14             	add    esp,0x14
c00111cf:	5b                   	pop    ebx
c00111d0:	5e                   	pop    esi
c00111d1:	c3                   	ret    

c00111d2 <VgaText::puts(char const*)>:
c00111d2:	53                   	push   ebx
c00111d3:	83 ec 08             	sub    esp,0x8
c00111d6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00111da:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00111dd:	84 c0                	test   al,al
c00111df:	74 12                	je     c00111f3 <VgaText::puts(char const*)+0x21>
c00111e1:	43                   	inc    ebx
c00111e2:	51                   	push   ecx
c00111e3:	51                   	push   ecx
c00111e4:	50                   	push   eax
c00111e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111e9:	e8 ca fe ff ff       	call   c00110b8 <VgaText::putchar(char)>
c00111ee:	83 c4 10             	add    esp,0x10
c00111f1:	eb e7                	jmp    c00111da <VgaText::puts(char const*)+0x8>
c00111f3:	83 c4 08             	add    esp,0x8
c00111f6:	5b                   	pop    ebx
c00111f7:	c3                   	ret    

c00111f8 <VgaText::putx(unsigned int)>:
c00111f8:	57                   	push   edi
c00111f9:	b9 11 00 00 00       	mov    ecx,0x11
c00111fe:	56                   	push   esi
c00111ff:	be a2 a4 02 c0       	mov    esi,0xc002a4a2
c0011204:	53                   	push   ebx
c0011205:	83 ec 20             	sub    esp,0x20
c0011208:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001120c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011210:	fc                   	cld    
c0011211:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011213:	be 08 00 00 00       	mov    esi,0x8
c0011218:	50                   	push   eax
c0011219:	50                   	push   eax
c001121a:	89 d8                	mov    eax,ebx
c001121c:	c1 e3 04             	shl    ebx,0x4
c001121f:	c1 e8 1c             	shr    eax,0x1c
c0011222:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011227:	50                   	push   eax
c0011228:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001122c:	e8 87 fe ff ff       	call   c00110b8 <VgaText::putchar(char)>
c0011231:	83 c4 10             	add    esp,0x10
c0011234:	4e                   	dec    esi
c0011235:	75 e1                	jne    c0011218 <VgaText::putx(unsigned int)+0x20>
c0011237:	83 c4 20             	add    esp,0x20
c001123a:	5b                   	pop    ebx
c001123b:	5e                   	pop    esi
c001123c:	5f                   	pop    edi
c001123d:	c3                   	ret    

c001123e <VgaText::VgaText(char const*)>:
c001123e:	57                   	push   edi
c001123f:	56                   	push   esi
c0011240:	53                   	push   ebx
c0011241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011245:	83 ec 08             	sub    esp,0x8
c0011248:	6a 00                	push   0x0
c001124a:	50                   	push   eax
c001124b:	e8 6e 05 00 00       	call   c00117be <UnixFile::UnixFile(int)>
c0011250:	83 c4 10             	add    esp,0x10
c0011253:	ba 08 a5 02 c0       	mov    edx,0xc002a508
c0011258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125c:	89 10                	mov    DWORD PTR [eax],edx
c001125e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011262:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001126c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011270:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001127a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001127e:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011289:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0011290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011294:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001129e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a2:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00112ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112b0:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00112b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112bb:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00112c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112c6:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00112cc:	bb 40 e7 02 c0       	mov    ebx,0xc002e740
c00112d1:	b8 08 00 00 00       	mov    eax,0x8
c00112d6:	fc                   	cld    
c00112d7:	89 d7                	mov    edi,edx
c00112d9:	89 de                	mov    esi,ebx
c00112db:	89 c1                	mov    ecx,eax
c00112dd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00112df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112e3:	05 1e 10 00 00       	add    eax,0x101e
c00112e8:	83 ec 08             	sub    esp,0x8
c00112eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ef:	50                   	push   eax
c00112f0:	e8 3f f5 fe ff       	call   c0000834 <strcpy>
c00112f5:	83 c4 10             	add    esp,0x10
c00112f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112fc:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001130a:	83 c0 0c             	add    eax,0xc
c001130d:	83 ec 04             	sub    esp,0x4
c0011310:	68 00 0f 00 00       	push   0xf00
c0011315:	6a 00                	push   0x0
c0011317:	50                   	push   eax
c0011318:	e8 5b f4 fe ff       	call   c0000778 <memset>
c001131d:	83 c4 10             	add    esp,0x10
c0011320:	83 ec 04             	sub    esp,0x4
c0011323:	6a 00                	push   0x0
c0011325:	6a 07                	push   0x7
c0011327:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001132b:	e8 b4 f4 ff ff       	call   c00107e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011330:	83 c4 10             	add    esp,0x10
c0011333:	83 ec 08             	sub    esp,0x8
c0011336:	6a 02                	push   0x2
c0011338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001133c:	e8 49 fa ff ff       	call   c0010d8a <VgaText::setCursorHeight(int)>
c0011341:	83 c4 10             	add    esp,0x10
c0011344:	83 ec 04             	sub    esp,0x4
c0011347:	6a 00                	push   0x0
c0011349:	6a 00                	push   0x0
c001134b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001134f:	e8 e0 f5 ff ff       	call   c0010934 <VgaText::setCursor(int, int)>
c0011354:	83 c4 10             	add    esp,0x10
c0011357:	83 ec 08             	sub    esp,0x8
c001135a:	6a 01                	push   0x1
c001135c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011360:	e8 7d f3 ff ff       	call   c00106e2 <VgaText::showCursor(bool)>
c0011365:	83 c4 10             	add    esp,0x10
c0011368:	83 ec 08             	sub    esp,0x8
c001136b:	6a 01                	push   0x1
c001136d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011371:	e8 7c f3 ff ff       	call   c00106f2 <VgaText::disableBlink(bool)>
c0011376:	83 c4 10             	add    esp,0x10
c0011379:	83 ec 0c             	sub    esp,0xc
c001137c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011380:	e8 cf fc ff ff       	call   c0011054 <VgaText::clearScreen()>
c0011385:	83 c4 10             	add    esp,0x10
c0011388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001138c:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011397:	05 9e 10 00 00       	add    eax,0x109e
c001139c:	83 ec 04             	sub    esp,0x4
c001139f:	68 96 00 00 00       	push   0x96
c00113a4:	6a 00                	push   0x0
c00113a6:	50                   	push   eax
c00113a7:	e8 cc f3 fe ff       	call   c0000778 <memset>
c00113ac:	83 c4 10             	add    esp,0x10
c00113af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113b3:	05 34 11 00 00       	add    eax,0x1134
c00113b8:	83 ec 04             	sub    esp,0x4
c00113bb:	68 2c 01 00 00       	push   0x12c
c00113c0:	6a 00                	push   0x0
c00113c2:	50                   	push   eax
c00113c3:	e8 b0 f3 fe ff       	call   c0000778 <memset>
c00113c8:	83 c4 10             	add    esp,0x10
c00113cb:	90                   	nop
c00113cc:	5b                   	pop    ebx
c00113cd:	5e                   	pop    esi
c00113ce:	5f                   	pop    edi
c00113cf:	c3                   	ret    

c00113d0 <VgaText::receiveKey(unsigned char)>:
c00113d0:	55                   	push   ebp
c00113d1:	57                   	push   edi
c00113d2:	56                   	push   esi
c00113d3:	53                   	push   ebx
c00113d4:	83 ec 1c             	sub    esp,0x1c
c00113d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00113db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00113df:	84 db                	test   bl,bl
c00113e1:	0f 84 c9 00 00 00    	je     c00114b0 <VgaText::receiveKey(unsigned char)+0xe0>
c00113e7:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c00113ed:	80 fb 08             	cmp    bl,0x8
c00113f0:	75 2c                	jne    c001141e <VgaText::receiveKey(unsigned char)+0x4e>
c00113f2:	83 ec 0c             	sub    esp,0xc
c00113f5:	57                   	push   edi
c00113f6:	e8 99 f3 fe ff       	call   c0000794 <strlen>
c00113fb:	83 c4 10             	add    esp,0x10
c00113fe:	85 c0                	test   eax,eax
c0011400:	74 41                	je     c0011443 <VgaText::receiveKey(unsigned char)+0x73>
c0011402:	50                   	push   eax
c0011403:	50                   	push   eax
c0011404:	6a 08                	push   0x8
c0011406:	56                   	push   esi
c0011407:	e8 ac fc ff ff       	call   c00110b8 <VgaText::putchar(char)>
c001140c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001140f:	e8 80 f3 fe ff       	call   c0000794 <strlen>
c0011414:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001141c:	eb 22                	jmp    c0011440 <VgaText::receiveKey(unsigned char)+0x70>
c001141e:	0f be c3             	movsx  eax,bl
c0011421:	52                   	push   edx
c0011422:	52                   	push   edx
c0011423:	50                   	push   eax
c0011424:	56                   	push   esi
c0011425:	e8 8e fc ff ff       	call   c00110b8 <VgaText::putchar(char)>
c001142a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001142e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011433:	59                   	pop    ecx
c0011434:	5d                   	pop    ebp
c0011435:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011439:	50                   	push   eax
c001143a:	57                   	push   edi
c001143b:	e8 34 f5 fe ff       	call   c0000974 <strcat>
c0011440:	83 c4 10             	add    esp,0x10
c0011443:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001144a:	75 05                	jne    c0011451 <VgaText::receiveKey(unsigned char)+0x81>
c001144c:	80 fb 0a             	cmp    bl,0xa
c001144f:	75 53                	jne    c00114a4 <VgaText::receiveKey(unsigned char)+0xd4>
c0011451:	83 ec 0c             	sub    esp,0xc
c0011454:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001145a:	53                   	push   ebx
c001145b:	e8 34 f3 fe ff       	call   c0000794 <strlen>
c0011460:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011463:	89 c5                	mov    ebp,eax
c0011465:	e8 2a f3 fe ff       	call   c0000794 <strlen>
c001146a:	83 c4 10             	add    esp,0x10
c001146d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011471:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011476:	76 10                	jbe    c0011488 <VgaText::receiveKey(unsigned char)+0xb8>
c0011478:	83 ec 0c             	sub    esp,0xc
c001147b:	68 b3 a4 02 c0       	push   0xc002a4b3
c0011480:	e8 ee 91 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0011485:	83 c4 10             	add    esp,0x10
c0011488:	50                   	push   eax
c0011489:	50                   	push   eax
c001148a:	57                   	push   edi
c001148b:	53                   	push   ebx
c001148c:	e8 e3 f4 fe ff       	call   c0000974 <strcat>
c0011491:	83 c4 0c             	add    esp,0xc
c0011494:	68 96 00 00 00       	push   0x96
c0011499:	6a 00                	push   0x0
c001149b:	57                   	push   edi
c001149c:	e8 d7 f2 fe ff       	call   c0000778 <memset>
c00114a1:	83 c4 10             	add    esp,0x10
c00114a4:	83 ec 0c             	sub    esp,0xc
c00114a7:	56                   	push   esi
c00114a8:	e8 d5 f9 ff ff       	call   c0010e82 <VgaText::doUpdate()>
c00114ad:	83 c4 10             	add    esp,0x10
c00114b0:	83 c4 1c             	add    esp,0x1c
c00114b3:	5b                   	pop    ebx
c00114b4:	5e                   	pop    esi
c00114b5:	5f                   	pop    edi
c00114b6:	5d                   	pop    ebp
c00114b7:	c3                   	ret    

c00114b8 <VgaText::write(unsigned long long, void*, int*)>:
c00114b8:	55                   	push   ebp
c00114b9:	57                   	push   edi
c00114ba:	56                   	push   esi
c00114bb:	53                   	push   ebx
c00114bc:	83 ec 0c             	sub    esp,0xc
c00114bf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00114c3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00114c7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00114cb:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00114d2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00114d5:	39 eb                	cmp    ebx,ebp
c00114d7:	74 13                	je     c00114ec <VgaText::write(unsigned long long, void*, int*)+0x34>
c00114d9:	43                   	inc    ebx
c00114da:	50                   	push   eax
c00114db:	50                   	push   eax
c00114dc:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00114e0:	50                   	push   eax
c00114e1:	56                   	push   esi
c00114e2:	e8 d1 fb ff ff       	call   c00110b8 <VgaText::putchar(char)>
c00114e7:	83 c4 10             	add    esp,0x10
c00114ea:	eb e9                	jmp    c00114d5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00114ec:	83 ec 0c             	sub    esp,0xc
c00114ef:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c00114f6:	56                   	push   esi
c00114f7:	e8 86 f9 ff ff       	call   c0010e82 <VgaText::doUpdate()>
c00114fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011500:	89 38                	mov    DWORD PTR [eax],edi
c0011502:	83 c4 1c             	add    esp,0x1c
c0011505:	31 c0                	xor    eax,eax
c0011507:	5b                   	pop    ebx
c0011508:	5e                   	pop    esi
c0011509:	5f                   	pop    edi
c001150a:	5d                   	pop    ebp
c001150b:	c3                   	ret    

c001150c <newTerminal(char*)>:
c001150c:	83 ec 28             	sub    esp,0x28
c001150f:	68 60 12 00 00       	push   0x1260
c0011514:	e8 c9 e3 ff ff       	call   c000f8e2 <malloc>
c0011519:	5a                   	pop    edx
c001151a:	59                   	pop    ecx
c001151b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001151f:	50                   	push   eax
c0011520:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011524:	e8 15 fd ff ff       	call   c001123e <VgaText::VgaText(char const*)>
c0011529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001152d:	83 c4 2c             	add    esp,0x2c
c0011530:	c3                   	ret    
c0011531:	90                   	nop

c0011532 <TSS::TSS()>:
c0011532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011536:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001153d:	90                   	nop
c001153e:	c3                   	ret    
c001153f:	90                   	nop

c0011540 <TSS::setESP(unsigned long)>:
c0011540:	55                   	push   ebp
c0011541:	89 e5                	mov    ebp,esp
c0011543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011546:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011549:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001154c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001154f:	90                   	nop
c0011550:	5d                   	pop    ebp
c0011551:	c3                   	ret    

c0011552 <TSS::flush()>:
c0011552:	55                   	push   ebp
c0011553:	89 e5                	mov    ebp,esp
c0011555:	83 ec 10             	sub    esp,0x10
c0011558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155b:	8b 00                	mov    eax,DWORD PTR [eax]
c001155d:	83 c8 03             	or     eax,0x3
c0011560:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011564:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011568:	66 89 d0             	mov    ax,dx
c001156b:	0f 00 d8             	ltr    ax
c001156e:	90                   	nop
c001156f:	c9                   	leave  
c0011570:	c3                   	ret    
c0011571:	90                   	nop

c0011572 <TSS::setup(unsigned long, unsigned long)>:
c0011572:	55                   	push   ebp
c0011573:	89 e5                	mov    ebp,esp
c0011575:	83 ec 18             	sub    esp,0x18
c0011578:	83 ec 0c             	sub    esp,0xc
c001157b:	6a 68                	push   0x68
c001157d:	e8 60 e3 ff ff       	call   c000f8e2 <malloc>
c0011582:	83 c4 10             	add    esp,0x10
c0011585:	89 c2                	mov    edx,eax
c0011587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001158d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011593:	83 ec 04             	sub    esp,0x4
c0011596:	6a 68                	push   0x68
c0011598:	6a 00                	push   0x0
c001159a:	50                   	push   eax
c001159b:	e8 d8 f1 fe ff       	call   c0000778 <memset>
c00115a0:	83 c4 10             	add    esp,0x10
c00115a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a9:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00115af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b5:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00115bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115c4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00115c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115cd:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00115d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d9:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00115df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115e5:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00115eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115f1:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00115f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115fd:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011606:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011609:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001160f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011612:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011615:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011618:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001161b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011621:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011624:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001162a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162d:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011637:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001163a:	0f 20 da             	mov    edx,cr3
c001163d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011640:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011643:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011649:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001164c:	83 ec 08             	sub    esp,0x8
c001164f:	50                   	push   eax
c0011650:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011653:	50                   	push   eax
c0011654:	e8 67 da ff ff       	call   c000f0c0 <GDTEntry::setBase(unsigned int)>
c0011659:	83 c4 10             	add    esp,0x10
c001165c:	83 ec 08             	sub    esp,0x8
c001165f:	6a 68                	push   0x68
c0011661:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011664:	50                   	push   eax
c0011665:	e8 72 da ff ff       	call   c000f0dc <GDTEntry::setLimit(unsigned int)>
c001166a:	83 c4 10             	add    esp,0x10
c001166d:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011671:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011674:	83 e0 0f             	and    eax,0xf
c0011677:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001167a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001167d:	83 c8 40             	or     eax,0x40
c0011680:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011683:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0011688:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001168e:	05 78 01 00 00       	add    eax,0x178
c0011693:	83 ec 04             	sub    esp,0x4
c0011696:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011699:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001169c:	50                   	push   eax
c001169d:	e8 6e da ff ff       	call   c000f110 <GDT::addEntry(GDTEntry)>
c00116a2:	83 c4 10             	add    esp,0x10
c00116a5:	89 c2                	mov    edx,eax
c00116a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116aa:	89 10                	mov    DWORD PTR [eax],edx
c00116ac:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c00116b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00116b7:	05 78 01 00 00       	add    eax,0x178
c00116bc:	83 ec 0c             	sub    esp,0xc
c00116bf:	50                   	push   eax
c00116c0:	e8 8f da ff ff       	call   c000f154 <GDT::flush()>
c00116c5:	83 c4 10             	add    esp,0x10
c00116c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00116cd:	83 ec 08             	sub    esp,0x8
c00116d0:	50                   	push   eax
c00116d1:	68 1c a5 02 c0       	push   0xc002a51c
c00116d6:	e8 e6 18 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00116db:	83 c4 10             	add    esp,0x10
c00116de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00116e3:	c9                   	leave  
c00116e4:	c3                   	ret    
c00116e5:	90                   	nop

c00116e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00116e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116f6:	75 08                	jne    c0011700 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00116f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116fe:	eb 38                	jmp    c0011738 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011700:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011705:	75 17                	jne    c001171e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011707:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001170c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001170f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011715:	8b 10                	mov    edx,DWORD PTR [eax]
c0011717:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001171b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001171e:	89 c1                	mov    ecx,eax
c0011720:	83 e1 fd             	and    ecx,0xfffffffd
c0011723:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011729:	74 cd                	je     c00116f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001172b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011730:	83 e0 ef             	and    eax,0xffffffef
c0011733:	83 f8 08             	cmp    eax,0x8
c0011736:	76 c0                	jbe    c00116f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011738:	31 c0                	xor    eax,eax
c001173a:	c3                   	ret    
c001173b:	90                   	nop

c001173c <ReservedFilename::isAtty()>:
c001173c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011740:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011743:	31 c0                	xor    eax,eax
c0011745:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001174b:	74 09                	je     c0011756 <ReservedFilename::isAtty()+0x1a>
c001174d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011753:	0f 94 c0             	sete   al
c0011756:	c3                   	ret    
c0011757:	90                   	nop

c0011758 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001175c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011760:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011763:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011767:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001176c:	75 08                	jne    c0011776 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001176e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011774:	eb 3d                	jmp    c00117b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011776:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001177b:	75 17                	jne    c0011794 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001177d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011782:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011785:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001178b:	8b 10                	mov    edx,DWORD PTR [eax]
c001178d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011791:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011794:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011799:	75 04                	jne    c001179f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001179b:	89 0a                	mov    DWORD PTR [edx],ecx
c001179d:	eb 14                	jmp    c00117b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001179f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00117a4:	74 c8                	je     c001176e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00117a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00117ab:	83 e0 ef             	and    eax,0xffffffef
c00117ae:	83 f8 08             	cmp    eax,0x8
c00117b1:	76 bb                	jbe    c001176e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00117b3:	31 c0                	xor    eax,eax
c00117b5:	c3                   	ret    

c00117b6 <UnixFile::getFileDescriptor()>:
c00117b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117bd:	c3                   	ret    

c00117be <UnixFile::UnixFile(int)>:
c00117be:	53                   	push   ebx
c00117bf:	83 ec 28             	sub    esp,0x28
c00117c2:	ba 08 a6 02 c0       	mov    edx,0xc002a608
c00117c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117cb:	89 10                	mov    DWORD PTR [eax],edx
c00117cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00117d5:	0f 8f 8c 01 00 00    	jg     c0011967 <UnixFile::UnixFile(int)+0x1a9>
c00117db:	a1 20 d6 02 c0       	mov    eax,ds:0xc002d620
c00117e0:	8d 50 01             	lea    edx,[eax+0x1]
c00117e3:	89 15 20 d6 02 c0    	mov    DWORD PTR ds:0xc002d620,edx
c00117e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00117ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00117f0:	83 ec 08             	sub    esp,0x8
c00117f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00117f7:	68 f8 e7 02 c0       	push   0xc002e7f8
c00117fc:	e8 ef 6f 01 00       	call   c00287f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011801:	83 c4 10             	add    esp,0x10
c0011804:	a0 f4 e7 02 c0       	mov    al,ds:0xc002e7f4
c0011809:	83 f0 01             	xor    eax,0x1
c001180c:	84 c0                	test   al,al
c001180e:	0f 84 54 01 00 00    	je     c0011968 <UnixFile::UnixFile(int)+0x1aa>
c0011814:	c6 05 f4 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7f4,0x1
c001181b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011823:	83 ec 0c             	sub    esp,0xc
c0011826:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001182a:	e8 b3 e0 ff ff       	call   c000f8e2 <malloc>
c001182f:	83 c4 10             	add    esp,0x10
c0011832:	89 c3                	mov    ebx,eax
c0011834:	83 ec 08             	sub    esp,0x8
c0011837:	68 03 ff ff 0f       	push   0xfffff03
c001183c:	53                   	push   ebx
c001183d:	e8 2c 01 00 00       	call   c001196e <ReservedFilename::ReservedFilename(int)>
c0011842:	83 c4 10             	add    esp,0x10
c0011845:	89 1d ec e7 02 c0    	mov    DWORD PTR ds:0xc002e7ec,ebx
c001184b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011853:	83 ec 0c             	sub    esp,0xc
c0011856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001185a:	e8 83 e0 ff ff       	call   c000f8e2 <malloc>
c001185f:	83 c4 10             	add    esp,0x10
c0011862:	89 c3                	mov    ebx,eax
c0011864:	83 ec 08             	sub    esp,0x8
c0011867:	68 01 ff ff 0f       	push   0xfffff01
c001186c:	53                   	push   ebx
c001186d:	e8 fc 00 00 00       	call   c001196e <ReservedFilename::ReservedFilename(int)>
c0011872:	83 c4 10             	add    esp,0x10
c0011875:	89 1d f0 e7 02 c0    	mov    DWORD PTR ds:0xc002e7f0,ebx
c001187b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011883:	83 ec 0c             	sub    esp,0xc
c0011886:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001188a:	e8 53 e0 ff ff       	call   c000f8e2 <malloc>
c001188f:	83 c4 10             	add    esp,0x10
c0011892:	89 c3                	mov    ebx,eax
c0011894:	83 ec 08             	sub    esp,0x8
c0011897:	68 00 ff ff 0f       	push   0xfffff00
c001189c:	53                   	push   ebx
c001189d:	e8 cc 00 00 00       	call   c001196e <ReservedFilename::ReservedFilename(int)>
c00118a2:	83 c4 10             	add    esp,0x10
c00118a5:	89 1d e4 e7 02 c0    	mov    DWORD PTR ds:0xc002e7e4,ebx
c00118ab:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00118b3:	83 ec 0c             	sub    esp,0xc
c00118b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00118ba:	e8 23 e0 ff ff       	call   c000f8e2 <malloc>
c00118bf:	83 c4 10             	add    esp,0x10
c00118c2:	89 c3                	mov    ebx,eax
c00118c4:	83 ec 08             	sub    esp,0x8
c00118c7:	68 02 ff ff 0f       	push   0xfffff02
c00118cc:	53                   	push   ebx
c00118cd:	e8 9c 00 00 00       	call   c001196e <ReservedFilename::ReservedFilename(int)>
c00118d2:	83 c4 10             	add    esp,0x10
c00118d5:	89 1d e8 e7 02 c0    	mov    DWORD PTR ds:0xc002e7e8,ebx
c00118db:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00118e3:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00118e8:	7f 7e                	jg     c0011968 <UnixFile::UnixFile(int)+0x1aa>
c00118ea:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00118f2:	83 ec 0c             	sub    esp,0xc
c00118f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00118f9:	e8 e4 df ff ff       	call   c000f8e2 <malloc>
c00118fe:	83 c4 10             	add    esp,0x10
c0011901:	89 c3                	mov    ebx,eax
c0011903:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011907:	05 10 ff ff 0f       	add    eax,0xfffff10
c001190c:	83 ec 08             	sub    esp,0x8
c001190f:	50                   	push   eax
c0011910:	53                   	push   ebx
c0011911:	e8 58 00 00 00       	call   c001196e <ReservedFilename::ReservedFilename(int)>
c0011916:	83 c4 10             	add    esp,0x10
c0011919:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001191d:	89 1c 85 c0 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1840],ebx
c0011924:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001192c:	83 ec 0c             	sub    esp,0xc
c001192f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011933:	e8 aa df ff ff       	call   c000f8e2 <malloc>
c0011938:	83 c4 10             	add    esp,0x10
c001193b:	89 c3                	mov    ebx,eax
c001193d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011941:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011946:	83 ec 08             	sub    esp,0x8
c0011949:	50                   	push   eax
c001194a:	53                   	push   ebx
c001194b:	e8 1e 00 00 00       	call   c001196e <ReservedFilename::ReservedFilename(int)>
c0011950:	83 c4 10             	add    esp,0x10
c0011953:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011957:	89 1c 85 80 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1880],ebx
c001195e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011962:	e9 7c ff ff ff       	jmp    c00118e3 <UnixFile::UnixFile(int)+0x125>
c0011967:	90                   	nop
c0011968:	83 c4 28             	add    esp,0x28
c001196b:	5b                   	pop    ebx
c001196c:	c3                   	ret    
c001196d:	90                   	nop

c001196e <ReservedFilename::ReservedFilename(int)>:
c001196e:	83 ec 0c             	sub    esp,0xc
c0011971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011975:	83 ec 08             	sub    esp,0x8
c0011978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001197c:	50                   	push   eax
c001197d:	e8 3c fe ff ff       	call   c00117be <UnixFile::UnixFile(int)>
c0011982:	83 c4 10             	add    esp,0x10
c0011985:	ba 24 a6 02 c0       	mov    edx,0xc002a624
c001198a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001198e:	89 10                	mov    DWORD PTR [eax],edx
c0011990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011994:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011998:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001199b:	90                   	nop
c001199c:	83 c4 0c             	add    esp,0xc
c001199f:	c3                   	ret    

c00119a0 <UnixFile::~UnixFile()>:
c00119a0:	83 ec 1c             	sub    esp,0x1c
c00119a3:	ba 08 a6 02 c0       	mov    edx,0xc002a608
c00119a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119ac:	89 10                	mov    DWORD PTR [eax],edx
c00119ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119b5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00119ba:	7f 73                	jg     c0011a2f <UnixFile::~UnixFile()+0x8f>
c00119bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00119c4:	83 ec 0c             	sub    esp,0xc
c00119c7:	68 f8 e7 02 c0       	push   0xc002e7f8
c00119cc:	e8 f3 6e 01 00       	call   c00288c4 <LinkedList<UnixFile>::getFirstElement()>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00119d8:	83 ec 0c             	sub    esp,0xc
c00119db:	68 f8 e7 02 c0       	push   0xc002e7f8
c00119e0:	e8 e7 6e 01 00       	call   c00288cc <LinkedList<UnixFile>::removeFirst()>
c00119e5:	83 c4 10             	add    esp,0x10
c00119e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119ec:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00119f0:	74 40                	je     c0011a32 <UnixFile::~UnixFile()+0x92>
c00119f2:	83 ec 08             	sub    esp,0x8
c00119f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00119f9:	68 f8 e7 02 c0       	push   0xc002e7f8
c00119fe:	e8 ed 6d 01 00       	call   c00287f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011a03:	83 c4 10             	add    esp,0x10
c0011a06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a0a:	8d 50 01             	lea    edx,[eax+0x1]
c0011a0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a11:	3d 88 13 00 00       	cmp    eax,0x1388
c0011a16:	0f 94 c0             	sete   al
c0011a19:	84 c0                	test   al,al
c0011a1b:	74 a7                	je     c00119c4 <UnixFile::~UnixFile()+0x24>
c0011a1d:	83 ec 0c             	sub    esp,0xc
c0011a20:	68 e0 a5 02 c0       	push   0xc002a5e0
c0011a25:	e8 49 8c 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0011a2a:	83 c4 10             	add    esp,0x10
c0011a2d:	eb 95                	jmp    c00119c4 <UnixFile::~UnixFile()+0x24>
c0011a2f:	90                   	nop
c0011a30:	eb 01                	jmp    c0011a33 <UnixFile::~UnixFile()+0x93>
c0011a32:	90                   	nop
c0011a33:	90                   	nop
c0011a34:	83 c4 1c             	add    esp,0x1c
c0011a37:	c3                   	ret    

c0011a38 <UnixFile::~UnixFile()>:
c0011a38:	83 ec 0c             	sub    esp,0xc
c0011a3b:	83 ec 0c             	sub    esp,0xc
c0011a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a42:	e8 59 ff ff ff       	call   c00119a0 <UnixFile::~UnixFile()>
c0011a47:	83 c4 10             	add    esp,0x10
c0011a4a:	83 ec 08             	sub    esp,0x8
c0011a4d:	6a 0c                	push   0xc
c0011a4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a53:	e8 89 14 00 00       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0011a58:	83 c4 10             	add    esp,0x10
c0011a5b:	83 c4 0c             	add    esp,0xc
c0011a5e:	c3                   	ret    
c0011a5f:	90                   	nop

c0011a60 <ReservedFilename::~ReservedFilename()>:
c0011a60:	83 ec 0c             	sub    esp,0xc
c0011a63:	ba 24 a6 02 c0       	mov    edx,0xc002a624
c0011a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a6c:	89 10                	mov    DWORD PTR [eax],edx
c0011a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a72:	83 ec 0c             	sub    esp,0xc
c0011a75:	50                   	push   eax
c0011a76:	e8 25 ff ff ff       	call   c00119a0 <UnixFile::~UnixFile()>
c0011a7b:	83 c4 10             	add    esp,0x10
c0011a7e:	90                   	nop
c0011a7f:	83 c4 0c             	add    esp,0xc
c0011a82:	c3                   	ret    
c0011a83:	90                   	nop

c0011a84 <ReservedFilename::~ReservedFilename()>:
c0011a84:	83 ec 0c             	sub    esp,0xc
c0011a87:	83 ec 0c             	sub    esp,0xc
c0011a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a8e:	e8 cd ff ff ff       	call   c0011a60 <ReservedFilename::~ReservedFilename()>
c0011a93:	83 c4 10             	add    esp,0x10
c0011a96:	83 ec 08             	sub    esp,0x8
c0011a99:	6a 0c                	push   0xc
c0011a9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a9f:	e8 3d 14 00 00       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0011aa4:	83 c4 10             	add    esp,0x10
c0011aa7:	83 c4 0c             	add    esp,0xc
c0011aaa:	c3                   	ret    

c0011aab <getFromFileDescriptor(int)>:
c0011aab:	53                   	push   ebx
c0011aac:	83 ec 08             	sub    esp,0x8
c0011aaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ab3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011ab9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011abf:	7f 2c                	jg     c0011aed <getFromFileDescriptor(int)+0x42>
c0011ac1:	83 ec 0c             	sub    esp,0xc
c0011ac4:	68 f8 e7 02 c0       	push   0xc002e7f8
c0011ac9:	e8 f6 6d 01 00       	call   c00288c4 <LinkedList<UnixFile>::getFirstElement()>
c0011ace:	83 c4 10             	add    esp,0x10
c0011ad1:	85 c0                	test   eax,eax
c0011ad3:	75 04                	jne    c0011ad9 <getFromFileDescriptor(int)+0x2e>
c0011ad5:	31 c0                	xor    eax,eax
c0011ad7:	eb 6e                	jmp    c0011b47 <getFromFileDescriptor(int)+0x9c>
c0011ad9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011adc:	74 69                	je     c0011b47 <getFromFileDescriptor(int)+0x9c>
c0011ade:	52                   	push   edx
c0011adf:	52                   	push   edx
c0011ae0:	50                   	push   eax
c0011ae1:	68 f8 e7 02 c0       	push   0xc002e7f8
c0011ae6:	e8 83 6e 01 00       	call   c002896e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011aeb:	eb e1                	jmp    c0011ace <getFromFileDescriptor(int)+0x23>
c0011aed:	a1 ec e7 02 c0       	mov    eax,ds:0xc002e7ec
c0011af2:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011af8:	74 4d                	je     c0011b47 <getFromFileDescriptor(int)+0x9c>
c0011afa:	a1 f0 e7 02 c0       	mov    eax,ds:0xc002e7f0
c0011aff:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011b05:	74 40                	je     c0011b47 <getFromFileDescriptor(int)+0x9c>
c0011b07:	a1 e8 e7 02 c0       	mov    eax,ds:0xc002e7e8
c0011b0c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011b12:	74 33                	je     c0011b47 <getFromFileDescriptor(int)+0x9c>
c0011b14:	a1 e4 e7 02 c0       	mov    eax,ds:0xc002e7e4
c0011b19:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011b1f:	74 26                	je     c0011b47 <getFromFileDescriptor(int)+0x9c>
c0011b21:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011b27:	83 f8 08             	cmp    eax,0x8
c0011b2a:	77 09                	ja     c0011b35 <getFromFileDescriptor(int)+0x8a>
c0011b2c:	8b 04 85 c0 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1840]
c0011b33:	eb 12                	jmp    c0011b47 <getFromFileDescriptor(int)+0x9c>
c0011b35:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011b3b:	83 fb 08             	cmp    ebx,0x8
c0011b3e:	77 95                	ja     c0011ad5 <getFromFileDescriptor(int)+0x2a>
c0011b40:	8b 04 9d 80 e7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1880]
c0011b47:	83 c4 08             	add    esp,0x8
c0011b4a:	5b                   	pop    ebx
c0011b4b:	c3                   	ret    

c0011b4c <__static_initialization_and_destruction_0(int, int)>:
c0011b4c:	83 ec 0c             	sub    esp,0xc
c0011b4f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011b54:	75 34                	jne    c0011b8a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b56:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011b5e:	75 2a                	jne    c0011b8a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b60:	83 ec 0c             	sub    esp,0xc
c0011b63:	68 f8 e7 02 c0       	push   0xc002e7f8
c0011b68:	e8 2b 6c 01 00       	call   c0028798 <LinkedList<UnixFile>::LinkedList()>
c0011b6d:	83 c4 10             	add    esp,0x10
c0011b70:	83 ec 04             	sub    esp,0x4
c0011b73:	68 a8 d5 02 c0       	push   0xc002d5a8
c0011b78:	68 f8 e7 02 c0       	push   0xc002e7f8
c0011b7d:	68 96 87 02 c0       	push   0xc0028796
c0011b82:	e8 d4 12 00 00       	call   c0012e5b <__cxa_atexit>
c0011b87:	83 c4 10             	add    esp,0x10
c0011b8a:	90                   	nop
c0011b8b:	83 c4 0c             	add    esp,0xc
c0011b8e:	c3                   	ret    

c0011b8f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b8f:	83 ec 0c             	sub    esp,0xc
c0011b92:	83 ec 08             	sub    esp,0x8
c0011b95:	68 ff ff 00 00       	push   0xffff
c0011b9a:	6a 01                	push   0x1
c0011b9c:	e8 ab ff ff ff       	call   c0011b4c <__static_initialization_and_destruction_0(int, int)>
c0011ba1:	83 c4 10             	add    esp,0x10
c0011ba4:	83 c4 0c             	add    esp,0xc
c0011ba7:	c3                   	ret    

c0011ba8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011ba8:	53                   	push   ebx
c0011ba9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011bad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011bb1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011bb7:	89 c8                	mov    eax,ecx
c0011bb9:	d1 e8                	shr    eax,1
c0011bbb:	03 05 28 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d628
c0011bc1:	83 e1 01             	and    ecx,0x1
c0011bc4:	8a 10                	mov    dl,BYTE PTR [eax]
c0011bc6:	75 09                	jne    c0011bd1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011bc8:	83 e2 f0             	and    edx,0xfffffff0
c0011bcb:	09 da                	or     edx,ebx
c0011bcd:	88 10                	mov    BYTE PTR [eax],dl
c0011bcf:	5b                   	pop    ebx
c0011bd0:	c3                   	ret    
c0011bd1:	c1 e3 04             	shl    ebx,0x4
c0011bd4:	83 e2 0f             	and    edx,0xf
c0011bd7:	09 da                	or     edx,ebx
c0011bd9:	88 10                	mov    BYTE PTR [eax],dl
c0011bdb:	5b                   	pop    ebx
c0011bdc:	c3                   	ret    

c0011bdd <Virt::getPageState(unsigned long)>:
c0011bdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be1:	8b 0d 28 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d628
c0011be7:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011bed:	89 d0                	mov    eax,edx
c0011bef:	d1 e8                	shr    eax,1
c0011bf1:	83 e2 01             	and    edx,0x1
c0011bf4:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011bf7:	75 04                	jne    c0011bfd <Virt::getPageState(unsigned long)+0x20>
c0011bf9:	83 e0 0f             	and    eax,0xf
c0011bfc:	c3                   	ret    
c0011bfd:	c0 e8 04             	shr    al,0x4
c0011c00:	c3                   	ret    

c0011c01 <Virt::allocateKernelVirtualPages(int)>:
c0011c01:	55                   	push   ebp
c0011c02:	31 ed                	xor    ebp,ebp
c0011c04:	57                   	push   edi
c0011c05:	56                   	push   esi
c0011c06:	53                   	push   ebx
c0011c07:	31 db                	xor    ebx,ebx
c0011c09:	83 ec 1c             	sub    esp,0x1c
c0011c0c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011c10:	8b 3d 24 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d624
c0011c16:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011c1b:	57                   	push   edi
c0011c1c:	e8 bc ff ff ff       	call   c0011bdd <Virt::getPageState(unsigned long)>
c0011c21:	5a                   	pop    edx
c0011c22:	84 c0                	test   al,al
c0011c24:	75 3a                	jne    c0011c60 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011c26:	85 db                	test   ebx,ebx
c0011c28:	75 02                	jne    c0011c2c <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011c2a:	89 fd                	mov    ebp,edi
c0011c2c:	43                   	inc    ebx
c0011c2d:	39 f3                	cmp    ebx,esi
c0011c2f:	74 5a                	je     c0011c8b <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011c31:	47                   	inc    edi
c0011c32:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c38:	76 31                	jbe    c0011c6b <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011c3a:	c7 05 24 d6 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d624,0xc8000
c0011c44:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011c49:	75 28                	jne    c0011c73 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011c4b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011c50:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011c55:	57                   	push   edi
c0011c56:	e8 82 ff ff ff       	call   c0011bdd <Virt::getPageState(unsigned long)>
c0011c5b:	5a                   	pop    edx
c0011c5c:	84 c0                	test   al,al
c0011c5e:	74 c6                	je     c0011c26 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011c60:	31 db                	xor    ebx,ebx
c0011c62:	47                   	inc    edi
c0011c63:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c69:	77 cf                	ja     c0011c3a <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c6b:	89 3d 24 d6 02 c0    	mov    DWORD PTR ds:0xc002d624,edi
c0011c71:	eb a8                	jmp    c0011c1b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c73:	83 ec 0c             	sub    esp,0xc
c0011c76:	68 38 a6 02 c0       	push   0xc002a638
c0011c7b:	e8 f3 89 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0011c80:	8b 3d 24 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d624
c0011c86:	83 c4 10             	add    esp,0x10
c0011c89:	eb 90                	jmp    c0011c1b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c8b:	89 2d 24 d6 02 c0    	mov    DWORD PTR ds:0xc002d624,ebp
c0011c91:	4b                   	dec    ebx
c0011c92:	74 5f                	je     c0011cf3 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c94:	85 f6                	test   esi,esi
c0011c96:	74 3d                	je     c0011cd5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c98:	89 e8                	mov    eax,ebp
c0011c9a:	31 db                	xor    ebx,ebx
c0011c9c:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c9f:	eb 14                	jmp    c0011cb5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011ca1:	6a 01                	push   0x1
c0011ca3:	43                   	inc    ebx
c0011ca4:	50                   	push   eax
c0011ca5:	e8 fe fe ff ff       	call   c0011ba8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011caa:	58                   	pop    eax
c0011cab:	39 f3                	cmp    ebx,esi
c0011cad:	5a                   	pop    edx
c0011cae:	74 25                	je     c0011cd5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011cb0:	a1 24 d6 02 c0       	mov    eax,ds:0xc002d624
c0011cb5:	8d 50 01             	lea    edx,[eax+0x1]
c0011cb8:	85 db                	test   ebx,ebx
c0011cba:	89 15 24 d6 02 c0    	mov    DWORD PTR ds:0xc002d624,edx
c0011cc0:	74 20                	je     c0011ce2 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011cc2:	39 df                	cmp    edi,ebx
c0011cc4:	75 db                	jne    c0011ca1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011cc6:	6a 03                	push   0x3
c0011cc8:	43                   	inc    ebx
c0011cc9:	50                   	push   eax
c0011cca:	e8 d9 fe ff ff       	call   c0011ba8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ccf:	59                   	pop    ecx
c0011cd0:	39 f3                	cmp    ebx,esi
c0011cd2:	58                   	pop    eax
c0011cd3:	75 db                	jne    c0011cb0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011cd5:	83 c4 1c             	add    esp,0x1c
c0011cd8:	89 e8                	mov    eax,ebp
c0011cda:	5b                   	pop    ebx
c0011cdb:	c1 e0 0c             	shl    eax,0xc
c0011cde:	5e                   	pop    esi
c0011cdf:	5f                   	pop    edi
c0011ce0:	5d                   	pop    ebp
c0011ce1:	c3                   	ret    
c0011ce2:	6a 02                	push   0x2
c0011ce4:	bb 01 00 00 00       	mov    ebx,0x1
c0011ce9:	50                   	push   eax
c0011cea:	e8 b9 fe ff ff       	call   c0011ba8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cef:	58                   	pop    eax
c0011cf0:	5a                   	pop    edx
c0011cf1:	eb bd                	jmp    c0011cb0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011cf3:	6a 04                	push   0x4
c0011cf5:	8d 45 01             	lea    eax,[ebp+0x1]
c0011cf8:	55                   	push   ebp
c0011cf9:	a3 24 d6 02 c0       	mov    ds:0xc002d624,eax
c0011cfe:	e8 a5 fe ff ff       	call   c0011ba8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d03:	59                   	pop    ecx
c0011d04:	89 e8                	mov    eax,ebp
c0011d06:	5b                   	pop    ebx
c0011d07:	c1 e0 0c             	shl    eax,0xc
c0011d0a:	83 c4 1c             	add    esp,0x1c
c0011d0d:	5b                   	pop    ebx
c0011d0e:	5e                   	pop    esi
c0011d0f:	5f                   	pop    edi
c0011d10:	5d                   	pop    ebp
c0011d11:	c3                   	ret    

c0011d12 <Virt::freeSwapfilePage(unsigned long)>:
c0011d12:	53                   	push   ebx
c0011d13:	8b 15 04 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e804
c0011d19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011d1d:	b8 01 00 00 00       	mov    eax,0x1
c0011d22:	89 cb                	mov    ebx,ecx
c0011d24:	d3 e0                	shl    eax,cl
c0011d26:	c1 eb 05             	shr    ebx,0x5
c0011d29:	f7 d0                	not    eax
c0011d2b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011d2e:	5b                   	pop    ebx
c0011d2f:	c3                   	ret    

c0011d30 <Virt::swapIDToSector(unsigned long)>:
c0011d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d34:	0f af 05 2c d6 02 c0 	imul   eax,DWORD PTR ds:0xc002d62c
c0011d3b:	03 05 34 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d634
c0011d41:	c3                   	ret    

c0011d42 <Virt::allocateSwapfilePage()>:
c0011d42:	55                   	push   ebp
c0011d43:	31 d2                	xor    edx,edx
c0011d45:	57                   	push   edi
c0011d46:	56                   	push   esi
c0011d47:	53                   	push   ebx
c0011d48:	83 ec 0c             	sub    esp,0xc
c0011d4b:	8b 0d 2c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d62c
c0011d51:	a1 30 d6 02 c0       	mov    eax,ds:0xc002d630
c0011d56:	f7 f1                	div    ecx
c0011d58:	39 0d 30 d6 02 c0    	cmp    DWORD PTR ds:0xc002d630,ecx
c0011d5e:	72 2d                	jb     c0011d8d <Virt::allocateSwapfilePage()+0x4b>
c0011d60:	8b 35 04 e8 02 c0    	mov    esi,DWORD PTR ds:0xc002e804
c0011d66:	8b 16                	mov    edx,DWORD PTR [esi]
c0011d68:	f6 c2 01             	test   dl,0x1
c0011d6b:	74 3c                	je     c0011da9 <Virt::allocateSwapfilePage()+0x67>
c0011d6d:	31 c9                	xor    ecx,ecx
c0011d6f:	bf 01 00 00 00       	mov    edi,0x1
c0011d74:	eb 12                	jmp    c0011d88 <Virt::allocateSwapfilePage()+0x46>
c0011d76:	89 fd                	mov    ebp,edi
c0011d78:	89 ca                	mov    edx,ecx
c0011d7a:	d3 e5                	shl    ebp,cl
c0011d7c:	c1 ea 05             	shr    edx,0x5
c0011d7f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d82:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d84:	85 ea                	test   edx,ebp
c0011d86:	74 2a                	je     c0011db2 <Virt::allocateSwapfilePage()+0x70>
c0011d88:	41                   	inc    ecx
c0011d89:	39 c8                	cmp    eax,ecx
c0011d8b:	77 e9                	ja     c0011d76 <Virt::allocateSwapfilePage()+0x34>
c0011d8d:	83 ec 0c             	sub    esp,0xc
c0011d90:	68 aa a8 02 c0       	push   0xc002a8aa
c0011d95:	e8 d9 88 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0011d9a:	83 c4 10             	add    esp,0x10
c0011d9d:	31 c9                	xor    ecx,ecx
c0011d9f:	83 c4 0c             	add    esp,0xc
c0011da2:	89 c8                	mov    eax,ecx
c0011da4:	5b                   	pop    ebx
c0011da5:	5e                   	pop    esi
c0011da6:	5f                   	pop    edi
c0011da7:	5d                   	pop    ebp
c0011da8:	c3                   	ret    
c0011da9:	89 f3                	mov    ebx,esi
c0011dab:	bd 01 00 00 00       	mov    ebp,0x1
c0011db0:	31 c9                	xor    ecx,ecx
c0011db2:	09 ea                	or     edx,ebp
c0011db4:	89 c8                	mov    eax,ecx
c0011db6:	89 13                	mov    DWORD PTR [ebx],edx
c0011db8:	83 c4 0c             	add    esp,0xc
c0011dbb:	5b                   	pop    ebx
c0011dbc:	5e                   	pop    esi
c0011dbd:	5f                   	pop    edi
c0011dbe:	5d                   	pop    ebp
c0011dbf:	c3                   	ret    

c0011dc0 <Virt::virtualMemorySetup()>:
c0011dc0:	53                   	push   ebx
c0011dc1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011dc6:	83 ec 08             	sub    esp,0x8
c0011dc9:	6a 0f                	push   0xf
c0011dcb:	53                   	push   ebx
c0011dcc:	43                   	inc    ebx
c0011dcd:	e8 d6 fd ff ff       	call   c0011ba8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dd2:	59                   	pop    ecx
c0011dd3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dd9:	58                   	pop    eax
c0011dda:	75 ed                	jne    c0011dc9 <Virt::virtualMemorySetup()+0x9>
c0011ddc:	83 ec 08             	sub    esp,0x8
c0011ddf:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011de4:	68 00 00 00 c8       	push   0xc8000000
c0011de9:	68 c1 a8 02 c0       	push   0xc002a8c1
c0011dee:	e8 ce 11 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0011df3:	58                   	pop    eax
c0011df4:	5a                   	pop    edx
c0011df5:	68 00 f0 ff ef       	push   0xeffff000
c0011dfa:	68 d5 a8 02 c0       	push   0xc002a8d5
c0011dff:	e8 bd 11 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0011e04:	83 c4 10             	add    esp,0x10
c0011e07:	83 ec 08             	sub    esp,0x8
c0011e0a:	6a 00                	push   0x0
c0011e0c:	53                   	push   ebx
c0011e0d:	43                   	inc    ebx
c0011e0e:	e8 95 fd ff ff       	call   c0011ba8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011e13:	83 c4 10             	add    esp,0x10
c0011e16:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011e1c:	75 e9                	jne    c0011e07 <Virt::virtualMemorySetup()+0x47>
c0011e1e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011e23:	83 ec 08             	sub    esp,0x8
c0011e26:	6a 0f                	push   0xf
c0011e28:	53                   	push   ebx
c0011e29:	43                   	inc    ebx
c0011e2a:	e8 79 fd ff ff       	call   c0011ba8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011e2f:	83 c4 10             	add    esp,0x10
c0011e32:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011e38:	75 e9                	jne    c0011e23 <Virt::virtualMemorySetup()+0x63>
c0011e3a:	83 c4 08             	add    esp,0x8
c0011e3d:	5b                   	pop    ebx
c0011e3e:	c3                   	ret    

c0011e3f <Virt::swappingSetup()>:
c0011e3f:	83 ec 14             	sub    esp,0x14
c0011e42:	31 d2                	xor    edx,edx
c0011e44:	a1 30 d6 02 c0       	mov    eax,ds:0xc002d630
c0011e49:	f7 35 2c d6 02 c0    	div    DWORD PTR ds:0xc002d62c
c0011e4f:	c1 e8 05             	shr    eax,0x5
c0011e52:	50                   	push   eax
c0011e53:	68 e9 a8 02 c0       	push   0xc002a8e9
c0011e58:	e8 64 11 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0011e5d:	a1 30 d6 02 c0       	mov    eax,ds:0xc002d630
c0011e62:	31 d2                	xor    edx,edx
c0011e64:	f7 35 2c d6 02 c0    	div    DWORD PTR ds:0xc002d62c
c0011e6a:	c1 e8 05             	shr    eax,0x5
c0011e6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e70:	e8 6d da ff ff       	call   c000f8e2 <malloc>
c0011e75:	83 c4 0c             	add    esp,0xc
c0011e78:	89 c1                	mov    ecx,eax
c0011e7a:	a3 04 e8 02 c0       	mov    ds:0xc002e804,eax
c0011e7f:	31 d2                	xor    edx,edx
c0011e81:	a1 30 d6 02 c0       	mov    eax,ds:0xc002d630
c0011e86:	f7 35 2c d6 02 c0    	div    DWORD PTR ds:0xc002d62c
c0011e8c:	c1 e8 05             	shr    eax,0x5
c0011e8f:	50                   	push   eax
c0011e90:	6a 00                	push   0x0
c0011e92:	51                   	push   ecx
c0011e93:	e8 e0 e8 fe ff       	call   c0000778 <memset>
c0011e98:	83 c4 1c             	add    esp,0x1c
c0011e9b:	c3                   	ret    

c0011e9c <Virt::getAKernelVAS()>:
c0011e9c:	a1 08 e8 02 c0       	mov    eax,ds:0xc002e808
c0011ea1:	c3                   	ret    

c0011ea2 <Virt::setupPageSwapping(int)>:
c0011ea2:	57                   	push   edi
c0011ea3:	56                   	push   esi
c0011ea4:	53                   	push   ebx
c0011ea5:	83 ec 1c             	sub    esp,0x1c
c0011ea8:	68 14 01 00 00       	push   0x114
c0011ead:	e8 30 da ff ff       	call   c000f8e2 <malloc>
c0011eb2:	83 c4 0c             	add    esp,0xc
c0011eb5:	89 c6                	mov    esi,eax
c0011eb7:	ff 35 f8 1b 03 c0    	push   DWORD PTR ds:0xc0031bf8
c0011ebd:	68 04 a9 02 c0       	push   0xc002a904
c0011ec2:	50                   	push   eax
c0011ec3:	e8 52 16 00 00       	call   c001351a <File::File(char const*, Process*)>
c0011ec8:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ecb:	e8 26 18 00 00       	call   c00136f6 <File::unlink()>
c0011ed0:	58                   	pop    eax
c0011ed1:	5a                   	pop    edx
c0011ed2:	6a 12                	push   0x12
c0011ed4:	56                   	push   esi
c0011ed5:	e8 a4 16 00 00       	call   c001357e <File::open(FileOpenMode)>
c0011eda:	83 c4 10             	add    esp,0x10
c0011edd:	85 c0                	test   eax,eax
c0011edf:	0f 85 ca 00 00 00    	jne    c0011faf <Virt::setupPageSwapping(int)+0x10d>
c0011ee5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ee9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ef1:	c1 e3 08             	shl    ebx,0x8
c0011ef4:	83 ec 0c             	sub    esp,0xc
c0011ef7:	68 00 00 01 00       	push   0x10000
c0011efc:	e8 e1 d9 ff ff       	call   c000f8e2 <malloc>
c0011f01:	83 c4 0c             	add    esp,0xc
c0011f04:	89 c7                	mov    edi,eax
c0011f06:	68 00 00 01 00       	push   0x10000
c0011f0b:	6a 00                	push   0x0
c0011f0d:	50                   	push   eax
c0011f0e:	e8 65 e8 fe ff       	call   c0000778 <memset>
c0011f13:	83 c4 10             	add    esp,0x10
c0011f16:	85 db                	test   ebx,ebx
c0011f18:	79 03                	jns    c0011f1d <Virt::setupPageSwapping(int)+0x7b>
c0011f1a:	83 c3 0f             	add    ebx,0xf
c0011f1d:	c1 fb 04             	sar    ebx,0x4
c0011f20:	4b                   	dec    ebx
c0011f21:	83 fb ff             	cmp    ebx,0xffffffff
c0011f24:	74 4b                	je     c0011f71 <Virt::setupPageSwapping(int)+0xcf>
c0011f26:	83 ec 0c             	sub    esp,0xc
c0011f29:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f2b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011f2f:	52                   	push   edx
c0011f30:	57                   	push   edi
c0011f31:	6a 00                	push   0x0
c0011f33:	68 00 00 01 00       	push   0x10000
c0011f38:	56                   	push   esi
c0011f39:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011f3c:	83 c4 20             	add    esp,0x20
c0011f3f:	85 c0                	test   eax,eax
c0011f41:	75 59                	jne    c0011f9c <Virt::setupPageSwapping(int)+0xfa>
c0011f43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f47:	3d 00 00 01 00       	cmp    eax,0x10000
c0011f4c:	74 d2                	je     c0011f20 <Virt::setupPageSwapping(int)+0x7e>
c0011f4e:	83 ec 08             	sub    esp,0x8
c0011f51:	4b                   	dec    ebx
c0011f52:	50                   	push   eax
c0011f53:	68 57 a9 02 c0       	push   0xc002a957
c0011f58:	e8 64 10 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0011f5d:	c7 04 24 60 a9 02 c0 	mov    DWORD PTR [esp],0xc002a960
c0011f64:	e8 0a 87 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0011f69:	83 c4 10             	add    esp,0x10
c0011f6c:	83 fb ff             	cmp    ebx,0xffffffff
c0011f6f:	75 b5                	jne    c0011f26 <Virt::setupPageSwapping(int)+0x84>
c0011f71:	83 ec 0c             	sub    esp,0xc
c0011f74:	56                   	push   esi
c0011f75:	e8 62 16 00 00       	call   c00135dc <File::close()>
c0011f7a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f7d:	e8 80 d9 ff ff       	call   c000f902 <rfree>
c0011f82:	83 c4 10             	add    esp,0x10
c0011f85:	85 f6                	test   esi,esi
c0011f87:	74 0c                	je     c0011f95 <Virt::setupPageSwapping(int)+0xf3>
c0011f89:	83 ec 0c             	sub    esp,0xc
c0011f8c:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f8e:	56                   	push   esi
c0011f8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f92:	83 c4 10             	add    esp,0x10
c0011f95:	83 c4 10             	add    esp,0x10
c0011f98:	5b                   	pop    ebx
c0011f99:	5e                   	pop    esi
c0011f9a:	5f                   	pop    edi
c0011f9b:	c3                   	ret    
c0011f9c:	83 ec 08             	sub    esp,0x8
c0011f9f:	50                   	push   eax
c0011fa0:	68 3f a9 02 c0       	push   0xc002a93f
c0011fa5:	e8 17 10 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0011faa:	83 c4 10             	add    esp,0x10
c0011fad:	eb 94                	jmp    c0011f43 <Virt::setupPageSwapping(int)+0xa1>
c0011faf:	83 ec 08             	sub    esp,0x8
c0011fb2:	50                   	push   eax
c0011fb3:	68 1b a9 02 c0       	push   0xc002a91b
c0011fb8:	e8 04 10 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0011fbd:	c7 04 24 24 a9 02 c0 	mov    DWORD PTR [esp],0xc002a924
c0011fc4:	e8 aa 86 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0011fc9:	83 c4 10             	add    esp,0x10
c0011fcc:	e9 14 ff ff ff       	jmp    c0011ee5 <Virt::setupPageSwapping(int)+0x43>
c0011fd1:	90                   	nop

c0011fd2 <VAS::VAS()>:
c0011fd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fe1:	a3 08 e8 02 c0       	mov    ds:0xc002e808,eax
c0011fe6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fea:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011fee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ff2:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011ff5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ff9:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0012000:	90                   	nop
c0012001:	c3                   	ret    

c0012002 <VAS::VAS(VAS*)>:
c0012002:	83 ec 0c             	sub    esp,0xc
c0012005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012009:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012010:	83 ec 0c             	sub    esp,0xc
c0012013:	68 58 a6 02 c0       	push   0xc002a658
c0012018:	e8 56 86 00 00       	call   c001a673 <Krnl::panic(char const*)>
c001201d:	83 c4 10             	add    esp,0x10
c0012020:	90                   	nop
c0012021:	83 c4 0c             	add    esp,0xc
c0012024:	c3                   	ret    
c0012025:	90                   	nop

c0012026 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0012026:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001202a:	89 c2                	mov    edx,eax
c001202c:	c1 e8 0a             	shr    eax,0xa
c001202f:	c1 ea 16             	shr    edx,0x16
c0012032:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012037:	19 c9                	sbb    ecx,ecx
c0012039:	c1 e2 0c             	shl    edx,0xc
c001203c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012042:	25 fc 0f 00 00       	and    eax,0xffc
c0012047:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001204e:	01 d0                	add    eax,edx
c0012050:	c3                   	ret    
c0012051:	90                   	nop

c0012052 <VAS::getPageTableEntry(unsigned long)>:
c0012052:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012056:	89 ca                	mov    edx,ecx
c0012058:	c1 e9 0a             	shr    ecx,0xa
c001205b:	c1 ea 16             	shr    edx,0x16
c001205e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012064:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001206a:	c1 e0 0c             	shl    eax,0xc
c001206d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012070:	c3                   	ret    

c0012071 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012071:	57                   	push   edi
c0012072:	56                   	push   esi
c0012073:	be 01 00 00 00       	mov    esi,0x1
c0012078:	53                   	push   ebx
c0012079:	83 ec 10             	sub    esp,0x10
c001207c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012080:	c1 eb 0c             	shr    ebx,0xc
c0012083:	eb 3f                	jmp    c00120c4 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012085:	e8 12 fe ff ff       	call   c0011e9c <Virt::getAKernelVAS()>
c001208a:	83 ec 08             	sub    esp,0x8
c001208d:	57                   	push   edi
c001208e:	50                   	push   eax
c001208f:	e8 be ff ff ff       	call   c0012052 <VAS::getPageTableEntry(unsigned long)>
c0012094:	83 c4 10             	add    esp,0x10
c0012097:	8b 00                	mov    eax,DWORD PTR [eax]
c0012099:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001209d:	f6 c4 04             	test   ah,0x4
c00120a0:	75 5f                	jne    c0012101 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00120a2:	80 fa 04             	cmp    dl,0x4
c00120a5:	74 78                	je     c001211f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00120a7:	80 fa 02             	cmp    dl,0x2
c00120aa:	0f 84 88 00 00 00    	je     c0012138 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00120b0:	80 fa 03             	cmp    dl,0x3
c00120b3:	0f 84 ad 00 00 00    	je     c0012166 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00120b9:	fe ca                	dec    dl
c00120bb:	0f 84 92 00 00 00    	je     c0012153 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120c1:	43                   	inc    ebx
c00120c2:	31 f6                	xor    esi,esi
c00120c4:	53                   	push   ebx
c00120c5:	e8 13 fb ff ff       	call   c0011bdd <Virt::getPageState(unsigned long)>
c00120ca:	5f                   	pop    edi
c00120cb:	89 df                	mov    edi,ebx
c00120cd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00120d1:	c1 e7 0c             	shl    edi,0xc
c00120d4:	84 c0                	test   al,al
c00120d6:	75 ad                	jne    c0012085 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00120d8:	83 ec 0c             	sub    esp,0xc
c00120db:	68 66 a9 02 c0       	push   0xc002a966
c00120e0:	e8 8e 85 00 00       	call   c001a673 <Krnl::panic(char const*)>
c00120e5:	e8 b2 fd ff ff       	call   c0011e9c <Virt::getAKernelVAS()>
c00120ea:	5a                   	pop    edx
c00120eb:	59                   	pop    ecx
c00120ec:	57                   	push   edi
c00120ed:	50                   	push   eax
c00120ee:	e8 5f ff ff ff       	call   c0012052 <VAS::getPageTableEntry(unsigned long)>
c00120f3:	83 c4 10             	add    esp,0x10
c00120f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00120f8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120fc:	f6 c4 04             	test   ah,0x4
c00120ff:	74 c0                	je     c00120c1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012101:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0012105:	25 00 f0 ff ff       	and    eax,0xfffff000
c001210a:	83 ec 0c             	sub    esp,0xc
c001210d:	50                   	push   eax
c001210e:	e8 e7 dd ff ff       	call   c000fefa <Phys::freePage(unsigned long)>
c0012113:	83 c4 10             	add    esp,0x10
c0012116:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001211a:	80 fa 04             	cmp    dl,0x4
c001211d:	75 88                	jne    c00120a7 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c001211f:	89 f0                	mov    eax,esi
c0012121:	84 c0                	test   al,al
c0012123:	75 47                	jne    c001216c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0012125:	c7 44 24 20 7c a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a67c
c001212d:	83 c4 10             	add    esp,0x10
c0012130:	5b                   	pop    ebx
c0012131:	5e                   	pop    esi
c0012132:	5f                   	pop    edi
c0012133:	e9 3b 85 00 00       	jmp    c001a673 <Krnl::panic(char const*)>
c0012138:	89 f0                	mov    eax,esi
c001213a:	84 c0                	test   al,al
c001213c:	75 15                	jne    c0012153 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001213e:	83 ec 0c             	sub    esp,0xc
c0012141:	68 82 a9 02 c0       	push   0xc002a982
c0012146:	e8 28 85 00 00       	call   c001a673 <Krnl::panic(char const*)>
c001214b:	83 c4 10             	add    esp,0x10
c001214e:	e9 6e ff ff ff       	jmp    c00120c1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012153:	83 ec 08             	sub    esp,0x8
c0012156:	6a 00                	push   0x0
c0012158:	53                   	push   ebx
c0012159:	e8 4a fa ff ff       	call   c0011ba8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001215e:	83 c4 10             	add    esp,0x10
c0012161:	e9 5b ff ff ff       	jmp    c00120c1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012166:	89 f0                	mov    eax,esi
c0012168:	84 c0                	test   al,al
c001216a:	75 15                	jne    c0012181 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001216c:	83 ec 08             	sub    esp,0x8
c001216f:	6a 00                	push   0x0
c0012171:	53                   	push   ebx
c0012172:	e8 31 fa ff ff       	call   c0011ba8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012177:	83 c4 10             	add    esp,0x10
c001217a:	83 c4 10             	add    esp,0x10
c001217d:	5b                   	pop    ebx
c001217e:	5e                   	pop    esi
c001217f:	5f                   	pop    edi
c0012180:	c3                   	ret    
c0012181:	c7 44 24 20 9e a9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a99e
c0012189:	83 c4 10             	add    esp,0x10
c001218c:	5b                   	pop    ebx
c001218d:	5e                   	pop    esi
c001218e:	5f                   	pop    edi
c001218f:	e9 df 84 00 00       	jmp    c001a673 <Krnl::panic(char const*)>

c0012194 <VAS::freeAllocatedPages(unsigned long)>:
c0012194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012198:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001219c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00121a0:	74 09                	je     c00121ab <VAS::freeAllocatedPages(unsigned long)+0x17>
c00121a2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00121a6:	e9 c6 fe ff ff       	jmp    c0012071 <Virt::freeKernelVirtualPages(unsigned long)>
c00121ab:	c7 44 24 04 a0 a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a6a0
c00121b3:	e9 09 0e 00 00       	jmp    c0012fc1 <Dbg::kprintf(char const*, ...)>

c00121b8 <VAS::virtualToPhysical(unsigned long)>:
c00121b8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00121bc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00121c0:	e8 8d fe ff ff       	call   c0012052 <VAS::getPageTableEntry(unsigned long)>
c00121c5:	5a                   	pop    edx
c00121c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00121c8:	59                   	pop    ecx
c00121c9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121ce:	c3                   	ret    
c00121cf:	90                   	nop

c00121d0 <VAS::reflagRange(unsigned long, int, int, int)>:
c00121d0:	55                   	push   ebp
c00121d1:	57                   	push   edi
c00121d2:	56                   	push   esi
c00121d3:	53                   	push   ebx
c00121d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00121d8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00121dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00121e0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00121e4:	85 db                	test   ebx,ebx
c00121e6:	7e 22                	jle    c001220a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00121e8:	c1 e3 0c             	shl    ebx,0xc
c00121eb:	01 f3                	add    ebx,esi
c00121ed:	56                   	push   esi
c00121ee:	81 c6 00 10 00 00    	add    esi,0x1000
c00121f4:	55                   	push   ebp
c00121f5:	e8 58 fe ff ff       	call   c0012052 <VAS::getPageTableEntry(unsigned long)>
c00121fa:	5a                   	pop    edx
c00121fb:	59                   	pop    ecx
c00121fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00121fe:	21 f9                	and    ecx,edi
c0012200:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012204:	39 f3                	cmp    ebx,esi
c0012206:	89 08                	mov    DWORD PTR [eax],ecx
c0012208:	75 e3                	jne    c00121ed <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001220a:	5b                   	pop    ebx
c001220b:	5e                   	pop    esi
c001220c:	5f                   	pop    edi
c001220d:	5d                   	pop    ebp
c001220e:	c3                   	ret    
c001220f:	90                   	nop

c0012210 <VAS::setToWriteCombining(unsigned long, int)>:
c0012210:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0012215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001221b:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012222:	75 01                	jne    c0012225 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012224:	c3                   	ret    
c0012225:	68 80 00 00 00       	push   0x80
c001222a:	6a ff                	push   0xffffffff
c001222c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012230:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012234:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012238:	e8 93 ff ff ff       	call   c00121d0 <VAS::reflagRange(unsigned long, int, int, int)>
c001223d:	83 c4 14             	add    esp,0x14
c0012240:	c3                   	ret    
c0012241:	90                   	nop

c0012242 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012242:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012247:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001224b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001224e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012252:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0012255:	19 c0                	sbb    eax,eax
c0012257:	83 ca 03             	or     edx,0x3
c001225a:	83 e0 fc             	and    eax,0xfffffffc
c001225d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012264:	0f 20 d8             	mov    eax,cr3
c0012267:	0f 22 d8             	mov    cr3,eax
c001226a:	c3                   	ret    
c001226b:	90                   	nop

c001226c <VAS::~VAS()>:
c001226c:	83 ec 2c             	sub    esp,0x2c
c001226f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012277:	e8 1c bc 00 00       	call   c001de98 <lockScheduler()>
c001227c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012281:	8b 00                	mov    eax,DWORD PTR [eax]
c0012283:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012286:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001228c:	83 ec 04             	sub    esp,0x4
c001228f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012293:	6a 01                	push   0x1
c0012295:	50                   	push   eax
c0012296:	e8 a7 ff ff ff       	call   c0012242 <VAS::mapOtherVASIn(bool, VAS*)>
c001229b:	83 c4 10             	add    esp,0x10
c001229e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00122a6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00122ae:	0f 8f d7 00 00 00    	jg     c001238b <VAS::~VAS()+0x11f>
c00122b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122bf:	c1 e2 02             	shl    edx,0x2
c00122c2:	01 d0                	add    eax,edx
c00122c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00122c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00122ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ce:	83 e0 01             	and    eax,0x1
c00122d1:	0f 84 ab 00 00 00    	je     c0012382 <VAS::~VAS()+0x116>
c00122d7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00122df:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00122e7:	7f 75                	jg     c001235e <VAS::~VAS()+0xf2>
c00122e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122ed:	c1 e0 0a             	shl    eax,0xa
c00122f0:	89 c2                	mov    edx,eax
c00122f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122f6:	01 d0                	add    eax,edx
c00122f8:	c1 e0 0c             	shl    eax,0xc
c00122fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122ff:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012304:	8b 00                	mov    eax,DWORD PTR [eax]
c0012306:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012309:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001230f:	83 ec 04             	sub    esp,0x4
c0012312:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012316:	6a 01                	push   0x1
c0012318:	50                   	push   eax
c0012319:	e8 08 fd ff ff       	call   c0012026 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001231e:	83 c4 10             	add    esp,0x10
c0012321:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012325:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012329:	8b 00                	mov    eax,DWORD PTR [eax]
c001232b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012333:	25 01 04 00 00       	and    eax,0x401
c0012338:	3d 01 04 00 00       	cmp    eax,0x401
c001233d:	75 19                	jne    c0012358 <VAS::~VAS()+0xec>
c001233f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012343:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012348:	83 ec 0c             	sub    esp,0xc
c001234b:	50                   	push   eax
c001234c:	e8 a9 db ff ff       	call   c000fefa <Phys::freePage(unsigned long)>
c0012351:	83 c4 10             	add    esp,0x10
c0012354:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012358:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001235c:	eb 81                	jmp    c00122df <VAS::~VAS()+0x73>
c001235e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012362:	25 00 04 00 00       	and    eax,0x400
c0012367:	74 19                	je     c0012382 <VAS::~VAS()+0x116>
c0012369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001236d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012372:	83 ec 0c             	sub    esp,0xc
c0012375:	50                   	push   eax
c0012376:	e8 7f db ff ff       	call   c000fefa <Phys::freePage(unsigned long)>
c001237b:	83 c4 10             	add    esp,0x10
c001237e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012382:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012386:	e9 1b ff ff ff       	jmp    c00122a6 <VAS::~VAS()+0x3a>
c001238b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001238f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012392:	83 ec 0c             	sub    esp,0xc
c0012395:	50                   	push   eax
c0012396:	e8 d6 fc ff ff       	call   c0012071 <Virt::freeKernelVirtualPages(unsigned long)>
c001239b:	83 c4 10             	add    esp,0x10
c001239e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00123a5:	83 ec 0c             	sub    esp,0xc
c00123a8:	50                   	push   eax
c00123a9:	e8 4c db ff ff       	call   c000fefa <Phys::freePage(unsigned long)>
c00123ae:	83 c4 10             	add    esp,0x10
c00123b1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00123b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00123b9:	c1 e0 02             	shl    eax,0x2
c00123bc:	83 ec 08             	sub    esp,0x8
c00123bf:	50                   	push   eax
c00123c0:	68 c4 a6 02 c0       	push   0xc002a6c4
c00123c5:	e8 f7 0b 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00123ca:	83 c4 10             	add    esp,0x10
c00123cd:	e8 c8 ba 00 00       	call   c001de9a <unlockScheduler()>
c00123d2:	90                   	nop
c00123d3:	83 c4 2c             	add    esp,0x2c
c00123d6:	c3                   	ret    
c00123d7:	90                   	nop

c00123d8 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00123d8:	55                   	push   ebp
c00123d9:	57                   	push   edi
c00123da:	56                   	push   esi
c00123db:	53                   	push   ebx
c00123dc:	83 ec 1c             	sub    esp,0x1c
c00123df:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00123e3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00123e7:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00123ed:	77 08                	ja     c00123f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00123ef:	0f 20 d8             	mov    eax,cr3
c00123f2:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c00123f5:	75 47                	jne    c001243e <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00123f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123fb:	09 d8                	or     eax,ebx
c00123fd:	a9 ff 0f 00 00       	test   eax,0xfff
c0012402:	75 57                	jne    c001245b <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012404:	89 de                	mov    esi,ebx
c0012406:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012409:	c1 ee 16             	shr    esi,0x16
c001240c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012413:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012417:	74 54                	je     c001246d <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012419:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001241d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012423:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012427:	c1 e6 0c             	shl    esi,0xc
c001242a:	c1 eb 0a             	shr    ebx,0xa
c001242d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012433:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012436:	83 c4 1c             	add    esp,0x1c
c0012439:	5b                   	pop    ebx
c001243a:	5e                   	pop    esi
c001243b:	5f                   	pop    edi
c001243c:	5d                   	pop    ebp
c001243d:	c3                   	ret    
c001243e:	83 ec 0c             	sub    esp,0xc
c0012441:	68 e4 a6 02 c0       	push   0xc002a6e4
c0012446:	e8 76 0b 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001244b:	83 c4 10             	add    esp,0x10
c001244e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012452:	09 d8                	or     eax,ebx
c0012454:	a9 ff 0f 00 00       	test   eax,0xfff
c0012459:	74 a9                	je     c0012404 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001245b:	83 ec 0c             	sub    esp,0xc
c001245e:	68 4c a7 02 c0       	push   0xc002a74c
c0012463:	e8 0b 82 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0012468:	83 c4 10             	add    esp,0x10
c001246b:	eb 97                	jmp    c0012404 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001246d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012471:	e8 0e db ff ff       	call   c000ff84 <Phys::allocatePage()>
c0012476:	89 c5                	mov    ebp,eax
c0012478:	e8 1f fa ff ff       	call   c0011e9c <Virt::getAKernelVAS()>
c001247d:	83 ec 0c             	sub    esp,0xc
c0012480:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012484:	6a 01                	push   0x1
c0012486:	e8 76 f7 ff ff       	call   c0011c01 <Virt::allocateKernelVirtualPages(int)>
c001248b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012492:	6a 01                	push   0x1
c0012494:	50                   	push   eax
c0012495:	55                   	push   ebp
c0012496:	81 cd 07 04 00 00    	or     ebp,0x407
c001249c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00124a0:	51                   	push   ecx
c00124a1:	e8 26 02 00 00       	call   c00126cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124a6:	83 c4 1c             	add    esp,0x1c
c00124a9:	68 00 10 00 00       	push   0x1000
c00124ae:	6a 00                	push   0x0
c00124b0:	50                   	push   eax
c00124b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124b5:	e8 be e2 fe ff       	call   c0000778 <memset>
c00124ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00124be:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00124c1:	e8 ab fb ff ff       	call   c0012071 <Virt::freeKernelVirtualPages(unsigned long)>
c00124c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00124ca:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00124cd:	83 c4 10             	add    esp,0x10
c00124d0:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00124d3:	e9 41 ff ff ff       	jmp    c0012419 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00124d8 <VAS::allocatePages(int, int)>:
c00124d8:	55                   	push   ebp
c00124d9:	57                   	push   edi
c00124da:	56                   	push   esi
c00124db:	53                   	push   ebx
c00124dc:	83 ec 1c             	sub    esp,0x1c
c00124df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00124e3:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c00124e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124ee:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00124f4:	83 e0 01             	and    eax,0x1
c00124f7:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00124fb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00124ff:	0f 85 cc 00 00 00    	jne    c00125d1 <VAS::allocatePages(int, int)+0xf9>
c0012505:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012508:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001250c:	85 c0                	test   eax,eax
c001250e:	0f 84 a1 00 00 00    	je     c00125b5 <VAS::allocatePages(int, int)+0xdd>
c0012514:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012518:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001251c:	c1 e6 0c             	shl    esi,0xc
c001251f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012523:	85 c0                	test   eax,eax
c0012525:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012528:	7e 33                	jle    c001255d <VAS::allocatePages(int, int)+0x85>
c001252a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001252e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012532:	81 cd 00 04 00 00    	or     ebp,0x400
c0012538:	e8 47 da ff ff       	call   c000ff84 <Phys::allocatePage()>
c001253d:	55                   	push   ebp
c001253e:	53                   	push   ebx
c001253f:	50                   	push   eax
c0012540:	57                   	push   edi
c0012541:	e8 92 fe ff ff       	call   c00123d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012546:	83 c4 10             	add    esp,0x10
c0012549:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001254e:	74 03                	je     c0012553 <VAS::allocatePages(int, int)+0x7b>
c0012550:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012553:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012559:	39 de                	cmp    esi,ebx
c001255b:	75 db                	jne    c0012538 <VAS::allocatePages(int, int)+0x60>
c001255d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012562:	75 12                	jne    c0012576 <VAS::allocatePages(int, int)+0x9e>
c0012564:	0f 20 d8             	mov    eax,cr3
c0012567:	0f 22 d8             	mov    cr3,eax
c001256a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001256e:	83 c4 1c             	add    esp,0x1c
c0012571:	5b                   	pop    ebx
c0012572:	5e                   	pop    esi
c0012573:	5f                   	pop    edi
c0012574:	5d                   	pop    ebp
c0012575:	c3                   	ret    
c0012576:	c1 ee 0a             	shr    esi,0xa
c0012579:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001257d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012583:	c1 eb 0a             	shr    ebx,0xa
c0012586:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001258c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012592:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012598:	39 c3                	cmp    ebx,eax
c001259a:	77 ce                	ja     c001256a <VAS::allocatePages(int, int)+0x92>
c001259c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001259f:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125a5:	39 d8                	cmp    eax,ebx
c00125a7:	73 f3                	jae    c001259c <VAS::allocatePages(int, int)+0xc4>
c00125a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125ad:	83 c4 1c             	add    esp,0x1c
c00125b0:	5b                   	pop    ebx
c00125b1:	5e                   	pop    esi
c00125b2:	5f                   	pop    edi
c00125b3:	5d                   	pop    ebp
c00125b4:	c3                   	ret    
c00125b5:	83 ec 0c             	sub    esp,0xc
c00125b8:	68 70 a7 02 c0       	push   0xc002a770
c00125bd:	e8 b1 80 00 00       	call   c001a673 <Krnl::panic(char const*)>
c00125c2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00125c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125c9:	83 c4 10             	add    esp,0x10
c00125cc:	e9 43 ff ff ff       	jmp    c0012514 <VAS::allocatePages(int, int)+0x3c>
c00125d1:	83 ec 0c             	sub    esp,0xc
c00125d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00125d8:	e8 24 f6 ff ff       	call   c0011c01 <Virt::allocateKernelVirtualPages(int)>
c00125dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125e1:	83 c4 10             	add    esp,0x10
c00125e4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00125e9:	0f 87 9b 00 00 00    	ja     c001268a <VAS::allocatePages(int, int)+0x1b2>
c00125ef:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125f3:	85 d2                	test   edx,edx
c00125f5:	7e 3c                	jle    c0012633 <VAS::allocatePages(int, int)+0x15b>
c00125f7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00125fb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00125ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012603:	c1 e5 0c             	shl    ebp,0xc
c0012606:	81 ce 00 04 00 00    	or     esi,0x400
c001260c:	01 dd                	add    ebp,ebx
c001260e:	e8 71 d9 ff ff       	call   c000ff84 <Phys::allocatePage()>
c0012613:	56                   	push   esi
c0012614:	53                   	push   ebx
c0012615:	50                   	push   eax
c0012616:	57                   	push   edi
c0012617:	e8 bc fd ff ff       	call   c00123d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001261c:	83 c4 10             	add    esp,0x10
c001261f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012624:	74 03                	je     c0012629 <VAS::allocatePages(int, int)+0x151>
c0012626:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012629:	81 c3 00 10 00 00    	add    ebx,0x1000
c001262f:	39 dd                	cmp    ebp,ebx
c0012631:	75 db                	jne    c001260e <VAS::allocatePages(int, int)+0x136>
c0012633:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012638:	0f 84 26 ff ff ff    	je     c0012564 <VAS::allocatePages(int, int)+0x8c>
c001263e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012642:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012646:	89 d3                	mov    ebx,edx
c0012648:	c1 e0 0c             	shl    eax,0xc
c001264b:	c1 eb 0a             	shr    ebx,0xa
c001264e:	01 d0                	add    eax,edx
c0012650:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012656:	c1 e8 0a             	shr    eax,0xa
c0012659:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001265f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012664:	2d 00 00 40 00       	sub    eax,0x400000
c0012669:	39 c3                	cmp    ebx,eax
c001266b:	0f 87 f9 fe ff ff    	ja     c001256a <VAS::allocatePages(int, int)+0x92>
c0012671:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012674:	81 c3 00 10 00 00    	add    ebx,0x1000
c001267a:	39 d8                	cmp    eax,ebx
c001267c:	73 f3                	jae    c0012671 <VAS::allocatePages(int, int)+0x199>
c001267e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012682:	83 c4 1c             	add    esp,0x1c
c0012685:	5b                   	pop    ebx
c0012686:	5e                   	pop    esi
c0012687:	5f                   	pop    edi
c0012688:	5d                   	pop    ebp
c0012689:	c3                   	ret    
c001268a:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c001268f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012695:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001269c:	0f 84 4d ff ff ff    	je     c00125ef <VAS::allocatePages(int, int)+0x117>
c00126a2:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00126aa:	e9 40 ff ff ff       	jmp    c00125ef <VAS::allocatePages(int, int)+0x117>
c00126af:	90                   	nop

c00126b0 <VAS::setCPUSpecific(unsigned long)>:
c00126b0:	83 ec 0c             	sub    esp,0xc
c00126b3:	6a 05                	push   0x5
c00126b5:	68 00 00 40 c2       	push   0xc2400000
c00126ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126c2:	e8 11 fd ff ff       	call   c00123d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126c7:	83 c4 1c             	add    esp,0x1c
c00126ca:	c3                   	ret    
c00126cb:	90                   	nop

c00126cc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00126cc:	55                   	push   ebp
c00126cd:	57                   	push   edi
c00126ce:	56                   	push   esi
c00126cf:	53                   	push   ebx
c00126d0:	83 ec 1c             	sub    esp,0x1c
c00126d3:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c00126d8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00126dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00126e2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00126e6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00126ec:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00126f0:	83 e0 01             	and    eax,0x1
c00126f3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00126f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126fb:	85 c0                	test   eax,eax
c00126fd:	7e 39                	jle    c0012738 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00126ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012703:	89 f3                	mov    ebx,esi
c0012705:	c1 e0 0c             	shl    eax,0xc
c0012708:	01 f0                	add    eax,esi
c001270a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001270e:	55                   	push   ebp
c001270f:	53                   	push   ebx
c0012710:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012714:	29 f0                	sub    eax,esi
c0012716:	01 d8                	add    eax,ebx
c0012718:	50                   	push   eax
c0012719:	57                   	push   edi
c001271a:	e8 b9 fc ff ff       	call   c00123d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001271f:	83 c4 10             	add    esp,0x10
c0012722:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012727:	74 03                	je     c001272c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012729:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001272c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012732:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012736:	75 d6                	jne    c001270e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012738:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001273d:	75 10                	jne    c001274f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001273f:	0f 20 d8             	mov    eax,cr3
c0012742:	0f 22 d8             	mov    cr3,eax
c0012745:	83 c4 1c             	add    esp,0x1c
c0012748:	89 f0                	mov    eax,esi
c001274a:	5b                   	pop    ebx
c001274b:	5e                   	pop    esi
c001274c:	5f                   	pop    edi
c001274d:	5d                   	pop    ebp
c001274e:	c3                   	ret    
c001274f:	89 f3                	mov    ebx,esi
c0012751:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012755:	c1 eb 0a             	shr    ebx,0xa
c0012758:	c1 e0 0c             	shl    eax,0xc
c001275b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012761:	01 f0                	add    eax,esi
c0012763:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012769:	c1 e8 0a             	shr    eax,0xa
c001276c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012771:	2d 00 00 40 00       	sub    eax,0x400000
c0012776:	39 c3                	cmp    ebx,eax
c0012778:	77 cb                	ja     c0012745 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001277a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001277d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012783:	39 d8                	cmp    eax,ebx
c0012785:	73 f3                	jae    c001277a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012787:	83 c4 1c             	add    esp,0x1c
c001278a:	89 f0                	mov    eax,esi
c001278c:	5b                   	pop    ebx
c001278d:	5e                   	pop    esi
c001278e:	5f                   	pop    edi
c001278f:	5d                   	pop    ebp
c0012790:	c3                   	ret    
c0012791:	90                   	nop

c0012792 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012792:	55                   	push   ebp
c0012793:	57                   	push   edi
c0012794:	56                   	push   esi
c0012795:	53                   	push   ebx
c0012796:	83 ec 1c             	sub    esp,0x1c
c0012799:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001279d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00127a1:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00127a5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00127a9:	a9 ff 0f 00 00       	test   eax,0xfff
c00127ae:	75 4a                	jne    c00127fa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00127b0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00127b4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00127b7:	c1 eb 16             	shr    ebx,0x16
c00127ba:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00127c1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00127c5:	74 4d                	je     c0012814 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00127c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00127cb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00127cf:	c1 e8 0a             	shr    eax,0xa
c00127d2:	80 fa 01             	cmp    dl,0x1
c00127d5:	19 d2                	sbb    edx,edx
c00127d7:	c1 e3 0c             	shl    ebx,0xc
c00127da:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00127de:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00127e4:	25 fc 0f 00 00       	and    eax,0xffc
c00127e9:	01 d8                	add    eax,ebx
c00127eb:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00127f2:	83 c4 1c             	add    esp,0x1c
c00127f5:	5b                   	pop    ebx
c00127f6:	5e                   	pop    esi
c00127f7:	5f                   	pop    edi
c00127f8:	5d                   	pop    ebp
c00127f9:	c3                   	ret    
c00127fa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00127fe:	83 ec 0c             	sub    esp,0xc
c0012801:	68 9c a7 02 c0       	push   0xc002a79c
c0012806:	e8 68 7e 00 00       	call   c001a673 <Krnl::panic(char const*)>
c001280b:	83 c4 10             	add    esp,0x10
c001280e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012812:	eb 9c                	jmp    c00127b0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012814:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012818:	e8 67 d7 ff ff       	call   c000ff84 <Phys::allocatePage()>
c001281d:	89 c5                	mov    ebp,eax
c001281f:	e8 78 f6 ff ff       	call   c0011e9c <Virt::getAKernelVAS()>
c0012824:	83 ec 0c             	sub    esp,0xc
c0012827:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001282b:	6a 01                	push   0x1
c001282d:	e8 cf f3 ff ff       	call   c0011c01 <Virt::allocateKernelVirtualPages(int)>
c0012832:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012839:	6a 01                	push   0x1
c001283b:	50                   	push   eax
c001283c:	55                   	push   ebp
c001283d:	81 cd 07 04 00 00    	or     ebp,0x407
c0012843:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012847:	51                   	push   ecx
c0012848:	e8 7f fe ff ff       	call   c00126cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001284d:	83 c4 1c             	add    esp,0x1c
c0012850:	68 00 10 00 00       	push   0x1000
c0012855:	6a 00                	push   0x0
c0012857:	50                   	push   eax
c0012858:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001285c:	e8 17 df fe ff       	call   c0000778 <memset>
c0012861:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012865:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012868:	e8 04 f8 ff ff       	call   c0012071 <Virt::freeKernelVirtualPages(unsigned long)>
c001286d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012870:	83 c4 10             	add    esp,0x10
c0012873:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012876:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001287a:	e9 48 ff ff ff       	jmp    c00127c7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001287f:	90                   	nop

c0012880 <VAS::VAS(bool)>:
c0012880:	53                   	push   ebx
c0012881:	83 ec 28             	sub    esp,0x28
c0012884:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012888:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001288c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012890:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012897:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001289b:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001289f:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00128a2:	e8 dd d6 ff ff       	call   c000ff84 <Phys::allocatePage()>
c00128a7:	89 c2                	mov    edx,eax
c00128a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ad:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00128b0:	e8 e7 f5 ff ff       	call   c0011e9c <Virt::getAKernelVAS()>
c00128b5:	89 c3                	mov    ebx,eax
c00128b7:	83 ec 0c             	sub    esp,0xc
c00128ba:	6a 01                	push   0x1
c00128bc:	e8 40 f3 ff ff       	call   c0011c01 <Virt::allocateKernelVirtualPages(int)>
c00128c1:	83 c4 10             	add    esp,0x10
c00128c4:	89 c2                	mov    edx,eax
c00128c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128cd:	83 ec 0c             	sub    esp,0xc
c00128d0:	6a 03                	push   0x3
c00128d2:	6a 01                	push   0x1
c00128d4:	52                   	push   edx
c00128d5:	50                   	push   eax
c00128d6:	53                   	push   ebx
c00128d7:	e8 f0 fd ff ff       	call   c00126cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00128dc:	83 c4 20             	add    esp,0x20
c00128df:	89 c2                	mov    edx,eax
c00128e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128e5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00128e8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00128f0:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00128f8:	7f 1c                	jg     c0012916 <VAS::VAS(bool)+0x96>
c00128fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012901:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012905:	c1 e2 02             	shl    edx,0x2
c0012908:	01 d0                	add    eax,edx
c001290a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012910:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012914:	eb da                	jmp    c00128f0 <VAS::VAS(bool)+0x70>
c0012916:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001291e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012926:	7f 7a                	jg     c00129a2 <VAS::VAS(bool)+0x122>
c0012928:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001292c:	2d 00 02 00 00       	sub    eax,0x200
c0012931:	c1 e0 0c             	shl    eax,0xc
c0012934:	83 c8 03             	or     eax,0x3
c0012937:	89 c2                	mov    edx,eax
c0012939:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c001293e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012944:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001294a:	83 e0 10             	and    eax,0x10
c001294d:	84 c0                	test   al,al
c001294f:	74 07                	je     c0012958 <VAS::VAS(bool)+0xd8>
c0012951:	b8 00 01 00 00       	mov    eax,0x100
c0012956:	eb 05                	jmp    c001295d <VAS::VAS(bool)+0xdd>
c0012958:	b8 00 00 00 00       	mov    eax,0x0
c001295d:	09 d0                	or     eax,edx
c001295f:	89 c1                	mov    ecx,eax
c0012961:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012965:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012968:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001296c:	c1 e2 02             	shl    edx,0x2
c001296f:	01 d0                	add    eax,edx
c0012971:	89 ca                	mov    edx,ecx
c0012973:	89 10                	mov    DWORD PTR [eax],edx
c0012975:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012979:	2d 40 03 00 00       	sub    eax,0x340
c001297e:	83 f8 7f             	cmp    eax,0x7f
c0012981:	77 16                	ja     c0012999 <VAS::VAS(bool)+0x119>
c0012983:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012987:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001298a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001298e:	c1 e2 02             	shl    edx,0x2
c0012991:	01 d0                	add    eax,edx
c0012993:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012999:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001299d:	e9 7c ff ff ff       	jmp    c001291e <VAS::VAS(bool)+0x9e>
c00129a2:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c00129a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129ad:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129b3:	83 e0 10             	and    eax,0x10
c00129b6:	84 c0                	test   al,al
c00129b8:	74 07                	je     c00129c1 <VAS::VAS(bool)+0x141>
c00129ba:	b8 03 41 00 00       	mov    eax,0x4103
c00129bf:	eb 05                	jmp    c00129c6 <VAS::VAS(bool)+0x146>
c00129c1:	b8 03 40 00 00       	mov    eax,0x4003
c00129c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00129ca:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00129cd:	81 c2 20 0c 00 00    	add    edx,0xc20
c00129d3:	89 02                	mov    DWORD PTR [edx],eax
c00129d5:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c00129da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129e0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00129e6:	83 ec 08             	sub    esp,0x8
c00129e9:	50                   	push   eax
c00129ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129ee:	e8 bd fc ff ff       	call   c00126b0 <VAS::setCPUSpecific(unsigned long)>
c00129f3:	83 c4 10             	add    esp,0x10
c00129f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129fa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00129fd:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0012a02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a08:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012a0e:	83 e0 10             	and    eax,0x10
c0012a11:	84 c0                	test   al,al
c0012a13:	74 07                	je     c0012a1c <VAS::VAS(bool)+0x19c>
c0012a15:	b8 00 01 00 00       	mov    eax,0x100
c0012a1a:	eb 05                	jmp    c0012a21 <VAS::VAS(bool)+0x1a1>
c0012a1c:	b8 00 00 00 00       	mov    eax,0x0
c0012a21:	09 c2                	or     edx,eax
c0012a23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012a2a:	05 fc 0f 00 00       	add    eax,0xffc
c0012a2f:	83 ca 03             	or     edx,0x3
c0012a32:	89 10                	mov    DWORD PTR [eax],edx
c0012a34:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0012a39:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a3f:	83 ec 0c             	sub    esp,0xc
c0012a42:	50                   	push   eax
c0012a43:	e8 8c 1c 00 00       	call   c00146d4 <Device::getName()>
c0012a48:	83 c4 10             	add    esp,0x10
c0012a4b:	83 ec 08             	sub    esp,0x8
c0012a4e:	68 b8 a9 02 c0       	push   0xc002a9b8
c0012a53:	50                   	push   eax
c0012a54:	e8 67 de fe ff       	call   c00008c0 <strcmp>
c0012a59:	83 c4 10             	add    esp,0x10
c0012a5c:	85 c0                	test   eax,eax
c0012a5e:	0f 94 c0             	sete   al
c0012a61:	84 c0                	test   al,al
c0012a63:	74 70                	je     c0012ad5 <VAS::VAS(bool)+0x255>
c0012a65:	e8 11 b4 00 00       	call   c001de7b <disableIRQs()>
c0012a6a:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0012a6f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a75:	05 7c 09 00 00       	add    eax,0x97c
c0012a7a:	83 ec 0c             	sub    esp,0xc
c0012a7d:	50                   	push   eax
c0012a7e:	e8 db c8 ff ff       	call   c000f35e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a83:	83 c4 10             	add    esp,0x10
c0012a86:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a8b:	89 c3                	mov    ebx,eax
c0012a8d:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0012a92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a98:	05 7c 09 00 00       	add    eax,0x97c
c0012a9d:	83 ec 0c             	sub    esp,0xc
c0012aa0:	50                   	push   eax
c0012aa1:	e8 b8 c8 ff ff       	call   c000f35e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012aa6:	83 c4 10             	add    esp,0x10
c0012aa9:	83 ec 08             	sub    esp,0x8
c0012aac:	50                   	push   eax
c0012aad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ab1:	e8 9c f5 ff ff       	call   c0012052 <VAS::getPageTableEntry(unsigned long)>
c0012ab6:	83 c4 10             	add    esp,0x10
c0012ab9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012abb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012ac0:	6a 11                	push   0x11
c0012ac2:	53                   	push   ebx
c0012ac3:	50                   	push   eax
c0012ac4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ac8:	e8 0b f9 ff ff       	call   c00123d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012acd:	83 c4 10             	add    esp,0x10
c0012ad0:	e8 b4 b3 00 00       	call   c001de89 <enableIRQs()>
c0012ad5:	90                   	nop
c0012ad6:	83 c4 28             	add    esp,0x28
c0012ad9:	5b                   	pop    ebx
c0012ada:	c3                   	ret    
c0012adb:	90                   	nop

c0012adc <VAS::evict(unsigned long)>:
c0012adc:	57                   	push   edi
c0012add:	56                   	push   esi
c0012ade:	53                   	push   ebx
c0012adf:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012ae3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012ae7:	e8 ac b3 00 00       	call   c001de98 <lockScheduler()>
c0012aec:	83 ec 08             	sub    esp,0x8
c0012aef:	56                   	push   esi
c0012af0:	68 c0 a7 02 c0       	push   0xc002a7c0
c0012af5:	e8 c7 04 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012afa:	e8 43 f2 ff ff       	call   c0011d42 <Virt::allocateSwapfilePage()>
c0012aff:	83 c4 0c             	add    esp,0xc
c0012b02:	89 c3                	mov    ebx,eax
c0012b04:	50                   	push   eax
c0012b05:	50                   	push   eax
c0012b06:	68 c6 a9 02 c0       	push   0xc002a9c6
c0012b0b:	e8 b1 04 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012b10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012b13:	e8 18 f2 ff ff       	call   c0011d30 <Virt::swapIDToSector(unsigned long)>
c0012b18:	c1 e3 0b             	shl    ebx,0xb
c0012b1b:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b1e:	31 d2                	xor    edx,edx
c0012b20:	6a 08                	push   0x8
c0012b22:	52                   	push   edx
c0012b23:	50                   	push   eax
c0012b24:	0f be 05 38 d6 02 c0 	movsx  eax,BYTE PTR ds:0xc002d638
c0012b2b:	ff 34 85 9c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1464]
c0012b32:	e8 17 3d 00 00       	call   c001684e <LogicalDisk::write(unsigned long long, int, void*)>
c0012b37:	83 c4 18             	add    esp,0x18
c0012b3a:	56                   	push   esi
c0012b3b:	57                   	push   edi
c0012b3c:	e8 11 f5 ff ff       	call   c0012052 <VAS::getPageTableEntry(unsigned long)>
c0012b41:	89 c6                	mov    esi,eax
c0012b43:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b45:	c1 e8 0c             	shr    eax,0xc
c0012b48:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b4b:	e8 aa d3 ff ff       	call   c000fefa <Phys::freePage(unsigned long)>
c0012b50:	8b 16                	mov    edx,DWORD PTR [esi]
c0012b52:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b58:	09 d3                	or     ebx,edx
c0012b5a:	89 1e                	mov    DWORD PTR [esi],ebx
c0012b5c:	c7 04 24 d6 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9d6
c0012b63:	e8 59 04 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012b68:	83 c4 10             	add    esp,0x10
c0012b6b:	5b                   	pop    ebx
c0012b6c:	5e                   	pop    esi
c0012b6d:	5f                   	pop    edi
c0012b6e:	e9 27 b3 00 00       	jmp    c001de9a <unlockScheduler()>
c0012b73:	90                   	nop

c0012b74 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b74:	57                   	push   edi
c0012b75:	56                   	push   esi
c0012b76:	53                   	push   ebx
c0012b77:	83 ec 10             	sub    esp,0x10
c0012b7a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012b7e:	e8 15 b3 00 00       	call   c001de98 <lockScheduler()>
c0012b83:	83 ec 08             	sub    esp,0x8
c0012b86:	56                   	push   esi
c0012b87:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012b8d:	68 e0 a7 02 c0       	push   0xc002a7e0
c0012b92:	e8 2a 04 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012b97:	58                   	pop    eax
c0012b98:	5a                   	pop    edx
c0012b99:	56                   	push   esi
c0012b9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b9e:	e8 af f4 ff ff       	call   c0012052 <VAS::getPageTableEntry(unsigned long)>
c0012ba3:	59                   	pop    ecx
c0012ba4:	5b                   	pop    ebx
c0012ba5:	89 c3                	mov    ebx,eax
c0012ba7:	ff 30                	push   DWORD PTR [eax]
c0012ba9:	68 e6 a9 02 c0       	push   0xc002a9e6
c0012bae:	e8 0e 04 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012bb3:	5f                   	pop    edi
c0012bb4:	58                   	pop    eax
c0012bb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bb7:	c1 e8 0b             	shr    eax,0xb
c0012bba:	50                   	push   eax
c0012bbb:	68 f7 a9 02 c0       	push   0xc002a9f7
c0012bc0:	e8 fc 03 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012bc5:	83 c4 10             	add    esp,0x10
c0012bc8:	f7 03 00 04 00 00    	test   DWORD PTR [ebx],0x400
c0012bce:	75 1e                	jne    c0012bee <VAS::tryLoadBackOffDisk(unsigned long)+0x7a>
c0012bd0:	83 ec 0c             	sub    esp,0xc
c0012bd3:	68 6c aa 02 c0       	push   0xc002aa6c
c0012bd8:	e8 e4 03 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012bdd:	e8 b8 b2 00 00       	call   c001de9a <unlockScheduler()>
c0012be2:	83 c4 10             	add    esp,0x10
c0012be5:	31 c0                	xor    eax,eax
c0012be7:	83 c4 10             	add    esp,0x10
c0012bea:	5b                   	pop    ebx
c0012beb:	5e                   	pop    esi
c0012bec:	5f                   	pop    edi
c0012bed:	c3                   	ret    
c0012bee:	83 ec 0c             	sub    esp,0xc
c0012bf1:	68 14 aa 02 c0       	push   0xc002aa14
c0012bf6:	e8 c6 03 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012bfb:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0012bfd:	e8 82 d3 ff ff       	call   c000ff84 <Phys::allocatePage()>
c0012c02:	c1 ef 0b             	shr    edi,0xb
c0012c05:	5a                   	pop    edx
c0012c06:	59                   	pop    ecx
c0012c07:	50                   	push   eax
c0012c08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012c0c:	68 2c aa 02 c0       	push   0xc002aa2c
c0012c11:	e8 ab 03 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012c16:	58                   	pop    eax
c0012c17:	5a                   	pop    edx
c0012c18:	ff 33                	push   DWORD PTR [ebx]
c0012c1a:	68 46 aa 02 c0       	push   0xc002aa46
c0012c1f:	e8 9d 03 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012c24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c28:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012c2a:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012c30:	09 d0                	or     eax,edx
c0012c32:	0d 01 08 00 00       	or     eax,0x801
c0012c37:	89 03                	mov    DWORD PTR [ebx],eax
c0012c39:	59                   	pop    ecx
c0012c3a:	5b                   	pop    ebx
c0012c3b:	50                   	push   eax
c0012c3c:	68 59 aa 02 c0       	push   0xc002aa59
c0012c41:	e8 7b 03 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012c46:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c49:	e8 e2 f0 ff ff       	call   c0011d30 <Virt::swapIDToSector(unsigned long)>
c0012c4e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c51:	31 d2                	xor    edx,edx
c0012c53:	ff 35 2c d6 02 c0    	push   DWORD PTR ds:0xc002d62c
c0012c59:	52                   	push   edx
c0012c5a:	50                   	push   eax
c0012c5b:	0f be 05 38 d6 02 c0 	movsx  eax,BYTE PTR ds:0xc002d638
c0012c62:	ff 34 85 9c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1464]
c0012c69:	e8 74 3b 00 00       	call   c00167e2 <LogicalDisk::read(unsigned long long, int, void*)>
c0012c6e:	83 c4 14             	add    esp,0x14
c0012c71:	57                   	push   edi
c0012c72:	e8 9b f0 ff ff       	call   c0011d12 <Virt::freeSwapfilePage(unsigned long)>
c0012c77:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c7a:	e8 b1 f0 ff ff       	call   c0011d30 <Virt::swapIDToSector(unsigned long)>
c0012c7f:	5e                   	pop    esi
c0012c80:	5f                   	pop    edi
c0012c81:	50                   	push   eax
c0012c82:	68 0c a8 02 c0       	push   0xc002a80c
c0012c87:	e8 35 03 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012c8c:	e8 09 b2 00 00       	call   c001de9a <unlockScheduler()>
c0012c91:	83 c4 10             	add    esp,0x10
c0012c94:	b0 01                	mov    al,0x1
c0012c96:	83 c4 10             	add    esp,0x10
c0012c99:	5b                   	pop    ebx
c0012c9a:	5e                   	pop    esi
c0012c9b:	5f                   	pop    edi
c0012c9c:	c3                   	ret    
c0012c9d:	90                   	nop

c0012c9e <VAS::scanForEviction(int, int)>:
c0012c9e:	55                   	push   ebp
c0012c9f:	57                   	push   edi
c0012ca0:	56                   	push   esi
c0012ca1:	53                   	push   ebx
c0012ca2:	83 ec 1c             	sub    esp,0x1c
c0012ca5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012ca9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012cad:	85 c9                	test   ecx,ecx
c0012caf:	75 08                	jne    c0012cb9 <VAS::scanForEviction(int, int)+0x1b>
c0012cb1:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012cb9:	83 ec 0c             	sub    esp,0xc
c0012cbc:	bb 00 00 40 00       	mov    ebx,0x400000
c0012cc1:	68 2c a8 02 c0       	push   0xc002a82c
c0012cc6:	31 ff                	xor    edi,edi
c0012cc8:	e8 f4 02 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012ccd:	83 c4 10             	add    esp,0x10
c0012cd0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012cd8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012ce0:	eb 17                	jmp    c0012cf9 <VAS::scanForEviction(int, int)+0x5b>
c0012ce2:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0012ce7:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012ced:	81 fb 00 00 40 c0    	cmp    ebx,0xc0400000
c0012cf3:	0f 84 88 00 00 00    	je     c0012d81 <VAS::scanForEviction(int, int)+0xe3>
c0012cf9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012cfc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d00:	f6 04 08 01          	test   BYTE PTR [eax+ecx*1],0x1
c0012d04:	74 dc                	je     c0012ce2 <VAS::scanForEviction(int, int)+0x44>
c0012d06:	8d ab 00 00 c0 ff    	lea    ebp,[ebx-0x400000]
c0012d0c:	eb 0a                	jmp    c0012d18 <VAS::scanForEviction(int, int)+0x7a>
c0012d0e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012d14:	39 eb                	cmp    ebx,ebp
c0012d16:	74 ca                	je     c0012ce2 <VAS::scanForEviction(int, int)+0x44>
c0012d18:	83 ec 08             	sub    esp,0x8
c0012d1b:	55                   	push   ebp
c0012d1c:	56                   	push   esi
c0012d1d:	e8 30 f3 ff ff       	call   c0012052 <VAS::getPageTableEntry(unsigned long)>
c0012d22:	83 c4 10             	add    esp,0x10
c0012d25:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d27:	89 c2                	mov    edx,eax
c0012d29:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012d2f:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012d35:	75 d7                	jne    c0012d0e <VAS::scanForEviction(int, int)+0x70>
c0012d37:	a8 01                	test   al,0x1
c0012d39:	74 4e                	je     c0012d89 <VAS::scanForEviction(int, int)+0xeb>
c0012d3b:	83 ec 08             	sub    esp,0x8
c0012d3e:	55                   	push   ebp
c0012d3f:	68 50 a8 02 c0       	push   0xc002a850
c0012d44:	e8 78 02 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012d49:	89 f8                	mov    eax,edi
c0012d4b:	99                   	cdq    
c0012d4c:	f7 7c 24 44          	idiv   DWORD PTR [esp+0x44]
c0012d50:	83 c4 10             	add    esp,0x10
c0012d53:	85 d2                	test   edx,edx
c0012d55:	74 03                	je     c0012d5a <VAS::scanForEviction(int, int)+0xbc>
c0012d57:	47                   	inc    edi
c0012d58:	eb b4                	jmp    c0012d0e <VAS::scanForEviction(int, int)+0x70>
c0012d5a:	83 ec 0c             	sub    esp,0xc
c0012d5d:	68 85 aa 02 c0       	push   0xc002aa85
c0012d62:	e8 5a 02 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012d67:	58                   	pop    eax
c0012d68:	5a                   	pop    edx
c0012d69:	55                   	push   ebp
c0012d6a:	56                   	push   esi
c0012d6b:	e8 6c fd ff ff       	call   c0012adc <VAS::evict(unsigned long)>
c0012d70:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012d74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d78:	83 c4 10             	add    esp,0x10
c0012d7b:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012d7f:	75 d6                	jne    c0012d57 <VAS::scanForEviction(int, int)+0xb9>
c0012d81:	83 c4 1c             	add    esp,0x1c
c0012d84:	5b                   	pop    ebx
c0012d85:	5e                   	pop    esi
c0012d86:	5f                   	pop    edi
c0012d87:	5d                   	pop    ebp
c0012d88:	c3                   	ret    
c0012d89:	83 ec 08             	sub    esp,0x8
c0012d8c:	55                   	push   ebp
c0012d8d:	68 7c a8 02 c0       	push   0xc002a87c
c0012d92:	e8 2a 02 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012d97:	83 c4 10             	add    esp,0x10
c0012d9a:	e9 6f ff ff ff       	jmp    c0012d0e <VAS::scanForEviction(int, int)+0x70>

c0012d9f <mapVASFirstTime>:
c0012d9f:	55                   	push   ebp
c0012da0:	57                   	push   edi
c0012da1:	56                   	push   esi
c0012da2:	53                   	push   ebx
c0012da3:	83 ec 0c             	sub    esp,0xc
c0012da6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012dab:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012dae:	4a                   	dec    edx
c0012daf:	0f 84 8e 00 00 00    	je     c0012e43 <mapVASFirstTime+0xa4>
c0012db5:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012db8:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012dbb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012dc0:	c1 e5 15             	shl    ebp,0x15
c0012dc3:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012dc8:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012dce:	29 eb                	sub    ebx,ebp
c0012dd0:	29 ee                	sub    esi,ebp
c0012dd2:	e8 ad d1 ff ff       	call   c000ff84 <Phys::allocatePage()>
c0012dd7:	83 ec 0c             	sub    esp,0xc
c0012dda:	68 03 04 00 00       	push   0x403
c0012ddf:	6a 01                	push   0x1
c0012de1:	53                   	push   ebx
c0012de2:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012de8:	50                   	push   eax
c0012de9:	57                   	push   edi
c0012dea:	e8 dd f8 ff ff       	call   c00126cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012def:	83 c4 20             	add    esp,0x20
c0012df2:	39 f3                	cmp    ebx,esi
c0012df4:	75 dc                	jne    c0012dd2 <mapVASFirstTime+0x33>
c0012df6:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012dfb:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012e00:	29 ee                	sub    esi,ebp
c0012e02:	29 e8                	sub    eax,ebp
c0012e04:	89 c5                	mov    ebp,eax
c0012e06:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012e0a:	19 db                	sbb    ebx,ebx
c0012e0c:	e8 73 d1 ff ff       	call   c000ff84 <Phys::allocatePage()>
c0012e11:	83 e3 04             	and    ebx,0x4
c0012e14:	83 ec 0c             	sub    esp,0xc
c0012e17:	81 c3 03 04 00 00    	add    ebx,0x403
c0012e1d:	53                   	push   ebx
c0012e1e:	6a 01                	push   0x1
c0012e20:	56                   	push   esi
c0012e21:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012e27:	50                   	push   eax
c0012e28:	57                   	push   edi
c0012e29:	e8 9e f8 ff ff       	call   c00126cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e2e:	83 c4 20             	add    esp,0x20
c0012e31:	39 f5                	cmp    ebp,esi
c0012e33:	75 d1                	jne    c0012e06 <mapVASFirstTime+0x67>
c0012e35:	0f 20 d8             	mov    eax,cr3
c0012e38:	0f 22 d8             	mov    cr3,eax
c0012e3b:	83 c4 0c             	add    esp,0xc
c0012e3e:	5b                   	pop    ebx
c0012e3f:	5e                   	pop    esi
c0012e40:	5f                   	pop    edi
c0012e41:	5d                   	pop    ebp
c0012e42:	c3                   	ret    
c0012e43:	83 ec 0c             	sub    esp,0xc
c0012e46:	68 90 aa 02 c0       	push   0xc002aa90
c0012e4b:	e8 71 01 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012e50:	83 c4 10             	add    esp,0x10
c0012e53:	83 c4 0c             	add    esp,0xc
c0012e56:	5b                   	pop    ebx
c0012e57:	5e                   	pop    esi
c0012e58:	5f                   	pop    edi
c0012e59:	5d                   	pop    ebp
c0012e5a:	c3                   	ret    

c0012e5b <__cxa_atexit>:
c0012e5b:	31 c0                	xor    eax,eax
c0012e5d:	c3                   	ret    

c0012e5e <__cxa_finalize>:
c0012e5e:	c3                   	ret    

c0012e5f <__stack_chk_fail>:
c0012e5f:	55                   	push   ebp
c0012e60:	89 e5                	mov    ebp,esp
c0012e62:	83 ec 14             	sub    esp,0x14
c0012e65:	68 a9 aa 02 c0       	push   0xc002aaa9
c0012e6a:	e8 52 01 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012e6f:	58                   	pop    eax
c0012e70:	5a                   	pop    edx
c0012e71:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012e74:	68 f9 aa 02 c0       	push   0xc002aaf9
c0012e79:	e8 43 01 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012e7e:	59                   	pop    ecx
c0012e7f:	58                   	pop    eax
c0012e80:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e83:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e86:	68 f9 aa 02 c0       	push   0xc002aaf9
c0012e8b:	e8 31 01 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012e90:	5a                   	pop    edx
c0012e91:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e94:	59                   	pop    ecx
c0012e95:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e97:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e9a:	68 f9 aa 02 c0       	push   0xc002aaf9
c0012e9f:	e8 1d 01 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012ea4:	5a                   	pop    edx
c0012ea5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ea8:	59                   	pop    ecx
c0012ea9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012eab:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ead:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012eb0:	68 f9 aa 02 c0       	push   0xc002aaf9
c0012eb5:	e8 07 01 00 00       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0012eba:	c7 04 24 01 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab01
c0012ec1:	e8 ad 77 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0012ec6:	83 c4 10             	add    esp,0x10
c0012ec9:	c9                   	leave  
c0012eca:	c3                   	ret    

c0012ecb <__cxa_pure_virtual>:
c0012ecb:	83 ec 18             	sub    esp,0x18
c0012ece:	68 19 ab 02 c0       	push   0xc002ab19
c0012ed3:	e8 9b 77 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0012ed8:	83 c4 1c             	add    esp,0x1c
c0012edb:	c3                   	ret    

c0012edc <operator new[](unsigned long)>:
c0012edc:	e9 01 ca ff ff       	jmp    c000f8e2 <malloc>

c0012ee1 <operator delete(void*, unsigned long)>:
c0012ee1:	e9 1c ca ff ff       	jmp    c000f902 <rfree>

c0012ee6 <operator delete[](void*)>:
c0012ee6:	e9 17 ca ff ff       	jmp    c000f902 <rfree>

c0012eeb <operator delete[](void*, unsigned long)>:
c0012eeb:	e9 12 ca ff ff       	jmp    c000f902 <rfree>

c0012ef0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012ef0:	57                   	push   edi
c0012ef1:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012ef6:	56                   	push   esi
c0012ef7:	be 2c ab 02 c0       	mov    esi,0xc002ab2c
c0012efc:	53                   	push   ebx
c0012efd:	83 ec 40             	sub    esp,0x40
c0012f00:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f04:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012f08:	fc                   	cld    
c0012f09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f0b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012f0f:	83 f9 3e             	cmp    ecx,0x3e
c0012f12:	7e 05                	jle    c0012f19 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012f14:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012f19:	89 df                	mov    edi,ebx
c0012f1b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f1f:	eb 02                	jmp    c0012f23 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012f21:	89 c7                	mov    edi,eax
c0012f23:	31 d2                	xor    edx,edx
c0012f25:	46                   	inc    esi
c0012f26:	89 f8                	mov    eax,edi
c0012f28:	f7 f1                	div    ecx
c0012f2a:	39 cf                	cmp    edi,ecx
c0012f2c:	73 f3                	jae    c0012f21 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012f2e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012f31:	eb 02                	jmp    c0012f35 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012f33:	89 c3                	mov    ebx,eax
c0012f35:	31 d2                	xor    edx,edx
c0012f37:	4e                   	dec    esi
c0012f38:	89 d8                	mov    eax,ebx
c0012f3a:	f7 f1                	div    ecx
c0012f3c:	39 cb                	cmp    ebx,ecx
c0012f3e:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012f42:	88 16                	mov    BYTE PTR [esi],dl
c0012f44:	73 ed                	jae    c0012f33 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012f46:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f4a:	83 c4 40             	add    esp,0x40
c0012f4d:	5b                   	pop    ebx
c0012f4e:	5e                   	pop    esi
c0012f4f:	5f                   	pop    edi
c0012f50:	c3                   	ret    

c0012f51 <Dbg::logc(char)>:
c0012f51:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f55:	ba fd 03 00 00       	mov    edx,0x3fd
c0012f5a:	ec                   	in     al,dx
c0012f5b:	a8 20                	test   al,0x20
c0012f5d:	74 fb                	je     c0012f5a <Dbg::logc(char)+0x9>
c0012f5f:	ba f8 03 00 00       	mov    edx,0x3f8
c0012f64:	88 c8                	mov    al,cl
c0012f66:	ee                   	out    dx,al
c0012f67:	c3                   	ret    

c0012f68 <Dbg::logs(char*)>:
c0012f68:	53                   	push   ebx
c0012f69:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f6d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f70:	84 c0                	test   al,al
c0012f72:	74 0f                	je     c0012f83 <Dbg::logs(char*)+0x1b>
c0012f74:	50                   	push   eax
c0012f75:	43                   	inc    ebx
c0012f76:	e8 d6 ff ff ff       	call   c0012f51 <Dbg::logc(char)>
c0012f7b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f7e:	5a                   	pop    edx
c0012f7f:	84 c0                	test   al,al
c0012f81:	75 f1                	jne    c0012f74 <Dbg::logs(char*)+0xc>
c0012f83:	5b                   	pop    ebx
c0012f84:	c3                   	ret    

c0012f85 <Dbg::logWriteInt(unsigned int)>:
c0012f85:	83 ec 10             	sub    esp,0x10
c0012f88:	6a 0a                	push   0xa
c0012f8a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f8e:	50                   	push   eax
c0012f8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f93:	e8 58 ff ff ff       	call   c0012ef0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f98:	50                   	push   eax
c0012f99:	e8 ca ff ff ff       	call   c0012f68 <Dbg::logs(char*)>
c0012f9e:	83 c4 20             	add    esp,0x20
c0012fa1:	c3                   	ret    

c0012fa2 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012fa2:	83 ec 10             	sub    esp,0x10
c0012fa5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fa9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012fad:	50                   	push   eax
c0012fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fb2:	e8 39 ff ff ff       	call   c0012ef0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012fb7:	50                   	push   eax
c0012fb8:	e8 ab ff ff ff       	call   c0012f68 <Dbg::logs(char*)>
c0012fbd:	83 c4 20             	add    esp,0x20
c0012fc0:	c3                   	ret    

c0012fc1 <Dbg::kprintf(char const*, ...)>:
c0012fc1:	55                   	push   ebp
c0012fc2:	57                   	push   edi
c0012fc3:	56                   	push   esi
c0012fc4:	53                   	push   ebx
c0012fc5:	83 ec 0c             	sub    esp,0xc
c0012fc8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012fcc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012fd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012fd4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012fd7:	84 c0                	test   al,al
c0012fd9:	74 4a                	je     c0013025 <Dbg::kprintf(char const*, ...)+0x64>
c0012fdb:	31 db                	xor    ebx,ebx
c0012fdd:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012fe0:	3c 25                	cmp    al,0x25
c0012fe2:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012fe5:	0f 85 e4 00 00 00    	jne    c00130cf <Dbg::kprintf(char const*, ...)+0x10e>
c0012feb:	83 c3 02             	add    ebx,0x2
c0012fee:	8a 07                	mov    al,BYTE PTR [edi]
c0012ff0:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012ff3:	83 e8 25             	sub    eax,0x25
c0012ff6:	3c 53                	cmp    al,0x53
c0012ff8:	0f 87 ba 00 00 00    	ja     c00130b8 <Dbg::kprintf(char const*, ...)+0xf7>
c0012ffe:	0f b6 c0             	movzx  eax,al
c0013001:	ff 24 85 6c ab 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5494]
c0013008:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001300c:	89 c8                	mov    eax,ecx
c001300e:	83 c1 04             	add    ecx,0x4
c0013011:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013015:	ff 30                	push   DWORD PTR [eax]
c0013017:	e8 4c ff ff ff       	call   c0012f68 <Dbg::logs(char*)>
c001301c:	58                   	pop    eax
c001301d:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0013021:	84 c0                	test   al,al
c0013023:	75 b8                	jne    c0012fdd <Dbg::kprintf(char const*, ...)+0x1c>
c0013025:	83 c4 0c             	add    esp,0xc
c0013028:	5b                   	pop    ebx
c0013029:	5e                   	pop    esi
c001302a:	5f                   	pop    edi
c001302b:	5d                   	pop    ebp
c001302c:	c3                   	ret    
c001302d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013031:	89 d0                	mov    eax,edx
c0013033:	83 c2 04             	add    edx,0x4
c0013036:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001303a:	ff 30                	push   DWORD PTR [eax]
c001303c:	e8 44 ff ff ff       	call   c0012f85 <Dbg::logWriteInt(unsigned int)>
c0013041:	58                   	pop    eax
c0013042:	eb d9                	jmp    c001301d <Dbg::kprintf(char const*, ...)+0x5c>
c0013044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013048:	89 d0                	mov    eax,edx
c001304a:	83 c2 04             	add    edx,0x4
c001304d:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0013050:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013054:	50                   	push   eax
c0013055:	e8 f7 fe ff ff       	call   c0012f51 <Dbg::logc(char)>
c001305a:	58                   	pop    eax
c001305b:	eb c0                	jmp    c001301d <Dbg::kprintf(char const*, ...)+0x5c>
c001305d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013061:	89 c8                	mov    eax,ecx
c0013063:	83 c1 04             	add    ecx,0x4
c0013066:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001306a:	ff 30                	push   DWORD PTR [eax]
c001306c:	e8 14 ff ff ff       	call   c0012f85 <Dbg::logWriteInt(unsigned int)>
c0013071:	5f                   	pop    edi
c0013072:	eb a9                	jmp    c001301d <Dbg::kprintf(char const*, ...)+0x5c>
c0013074:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013078:	89 c8                	mov    eax,ecx
c001307a:	83 c1 04             	add    ecx,0x4
c001307d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013081:	6a 10                	push   0x10
c0013083:	ff 30                	push   DWORD PTR [eax]
c0013085:	e8 18 ff ff ff       	call   c0012fa2 <Dbg::logWriteIntBase(unsigned int, int)>
c001308a:	59                   	pop    ecx
c001308b:	5f                   	pop    edi
c001308c:	eb 8f                	jmp    c001301d <Dbg::kprintf(char const*, ...)+0x5c>
c001308e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013092:	89 d0                	mov    eax,edx
c0013094:	83 c2 08             	add    edx,0x8
c0013097:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001309b:	6a 10                	push   0x10
c001309d:	ff 30                	push   DWORD PTR [eax]
c001309f:	e8 fe fe ff ff       	call   c0012fa2 <Dbg::logWriteIntBase(unsigned int, int)>
c00130a4:	58                   	pop    eax
c00130a5:	5a                   	pop    edx
c00130a6:	e9 72 ff ff ff       	jmp    c001301d <Dbg::kprintf(char const*, ...)+0x5c>
c00130ab:	6a 25                	push   0x25
c00130ad:	e8 9f fe ff ff       	call   c0012f51 <Dbg::logc(char)>
c00130b2:	58                   	pop    eax
c00130b3:	e9 65 ff ff ff       	jmp    c001301d <Dbg::kprintf(char const*, ...)+0x5c>
c00130b8:	6a 25                	push   0x25
c00130ba:	e8 92 fe ff ff       	call   c0012f51 <Dbg::logc(char)>
c00130bf:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00130c2:	50                   	push   eax
c00130c3:	e8 89 fe ff ff       	call   c0012f51 <Dbg::logc(char)>
c00130c8:	5a                   	pop    edx
c00130c9:	59                   	pop    ecx
c00130ca:	e9 4e ff ff ff       	jmp    c001301d <Dbg::kprintf(char const*, ...)+0x5c>
c00130cf:	50                   	push   eax
c00130d0:	89 eb                	mov    ebx,ebp
c00130d2:	e8 7a fe ff ff       	call   c0012f51 <Dbg::logc(char)>
c00130d7:	89 fd                	mov    ebp,edi
c00130d9:	58                   	pop    eax
c00130da:	e9 3e ff ff ff       	jmp    c001301d <Dbg::kprintf(char const*, ...)+0x5c>
c00130df:	90                   	nop

c00130e0 <File::read(unsigned long long, void*, int*)>:
c00130e0:	53                   	push   ebx
c00130e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130e9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130f0:	3c 19                	cmp    al,0x19
c00130f2:	77 35                	ja     c0013129 <File::read(unsigned long long, void*, int*)+0x49>
c00130f4:	8b 04 85 a0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1360]
c00130fb:	85 c0                	test   eax,eax
c00130fd:	74 2a                	je     c0013129 <File::read(unsigned long long, void*, int*)+0x49>
c00130ff:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013105:	85 c0                	test   eax,eax
c0013107:	74 20                	je     c0013129 <File::read(unsigned long long, void*, int*)+0x49>
c0013109:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001310d:	74 21                	je     c0013130 <File::read(unsigned long long, void*, int*)+0x50>
c001310f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013111:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013115:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001311b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001311f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013123:	5b                   	pop    ebx
c0013124:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013127:	ff e0                	jmp    eax
c0013129:	b8 0b 00 00 00       	mov    eax,0xb
c001312e:	eb 05                	jmp    c0013135 <File::read(unsigned long long, void*, int*)+0x55>
c0013130:	b8 05 00 00 00       	mov    eax,0x5
c0013135:	5b                   	pop    ebx
c0013136:	c3                   	ret    
c0013137:	90                   	nop

c0013138 <File::write(unsigned long long, void*, int*)>:
c0013138:	53                   	push   ebx
c0013139:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001313d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013141:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013148:	3c 19                	cmp    al,0x19
c001314a:	77 35                	ja     c0013181 <File::write(unsigned long long, void*, int*)+0x49>
c001314c:	8b 04 85 a0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1360]
c0013153:	85 c0                	test   eax,eax
c0013155:	74 2a                	je     c0013181 <File::write(unsigned long long, void*, int*)+0x49>
c0013157:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001315d:	85 c0                	test   eax,eax
c001315f:	74 20                	je     c0013181 <File::write(unsigned long long, void*, int*)+0x49>
c0013161:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013165:	74 21                	je     c0013188 <File::write(unsigned long long, void*, int*)+0x50>
c0013167:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013169:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001316d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013173:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013177:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001317b:	5b                   	pop    ebx
c001317c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001317f:	ff e0                	jmp    eax
c0013181:	b8 0b 00 00 00       	mov    eax,0xb
c0013186:	eb 05                	jmp    c001318d <File::write(unsigned long long, void*, int*)+0x55>
c0013188:	b8 05 00 00 00       	mov    eax,0x5
c001318d:	5b                   	pop    ebx
c001318e:	c3                   	ret    
c001318f:	90                   	nop

c0013190 <Directory::read(unsigned long long, void*, int*)>:
c0013190:	53                   	push   ebx
c0013191:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013195:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013199:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00131a0:	3c 19                	cmp    al,0x19
c00131a2:	77 35                	ja     c00131d9 <Directory::read(unsigned long long, void*, int*)+0x49>
c00131a4:	8b 04 85 a0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1360]
c00131ab:	85 c0                	test   eax,eax
c00131ad:	74 2a                	je     c00131d9 <Directory::read(unsigned long long, void*, int*)+0x49>
c00131af:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131b5:	85 c0                	test   eax,eax
c00131b7:	74 20                	je     c00131d9 <Directory::read(unsigned long long, void*, int*)+0x49>
c00131b9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131bd:	74 21                	je     c00131e0 <Directory::read(unsigned long long, void*, int*)+0x50>
c00131bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c00131c1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00131c5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00131cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00131d3:	5b                   	pop    ebx
c00131d4:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00131d7:	ff e0                	jmp    eax
c00131d9:	b8 0b 00 00 00       	mov    eax,0xb
c00131de:	eb 05                	jmp    c00131e5 <Directory::read(unsigned long long, void*, int*)+0x55>
c00131e0:	b8 05 00 00 00       	mov    eax,0x5
c00131e5:	5b                   	pop    ebx
c00131e6:	c3                   	ret    
c00131e7:	90                   	nop

c00131e8 <Directory::write(unsigned long long, void*, int*)>:
c00131e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131ec:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00131f3:	b8 0b 00 00 00       	mov    eax,0xb
c00131f8:	80 fa 19             	cmp    dl,0x19
c00131fb:	77 18                	ja     c0013215 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00131fd:	8b 14 95 a0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1360]
c0013204:	85 d2                	test   edx,edx
c0013206:	74 0d                	je     c0013215 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013208:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001320f:	19 c0                	sbb    eax,eax
c0013211:	83 e0 0a             	and    eax,0xa
c0013214:	40                   	inc    eax
c0013215:	c3                   	ret    

c0013216 <File::isAtty()>:
c0013216:	31 c0                	xor    eax,eax
c0013218:	c3                   	ret    
c0013219:	90                   	nop

c001321a <Directory::isAtty()>:
c001321a:	31 c0                	xor    eax,eax
c001321c:	c3                   	ret    
c001321d:	90                   	nop

c001321e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001321e:	b8 0a 00 00 00       	mov    eax,0xa
c0013223:	c3                   	ret    

c0013224 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013224:	b8 0a 00 00 00       	mov    eax,0xa
c0013229:	c3                   	ret    

c001322a <File::~File()>:
c001322a:	83 ec 0c             	sub    esp,0xc
c001322d:	ba 28 ad 02 c0       	mov    edx,0xc002ad28
c0013232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013236:	89 10                	mov    DWORD PTR [eax],edx
c0013238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001323c:	83 ec 0c             	sub    esp,0xc
c001323f:	50                   	push   eax
c0013240:	e8 5b e7 ff ff       	call   c00119a0 <UnixFile::~UnixFile()>
c0013245:	83 c4 10             	add    esp,0x10
c0013248:	90                   	nop
c0013249:	83 c4 0c             	add    esp,0xc
c001324c:	c3                   	ret    
c001324d:	90                   	nop

c001324e <File::~File()>:
c001324e:	83 ec 0c             	sub    esp,0xc
c0013251:	83 ec 0c             	sub    esp,0xc
c0013254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013258:	e8 cd ff ff ff       	call   c001322a <File::~File()>
c001325d:	83 c4 10             	add    esp,0x10
c0013260:	83 ec 08             	sub    esp,0x8
c0013263:	68 14 01 00 00       	push   0x114
c0013268:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001326c:	e8 70 fc ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0013271:	83 c4 10             	add    esp,0x10
c0013274:	83 c4 0c             	add    esp,0xc
c0013277:	c3                   	ret    

c0013278 <Directory::~Directory()>:
c0013278:	83 ec 0c             	sub    esp,0xc
c001327b:	ba 44 ad 02 c0       	mov    edx,0xc002ad44
c0013280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013284:	89 10                	mov    DWORD PTR [eax],edx
c0013286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001328a:	83 ec 0c             	sub    esp,0xc
c001328d:	50                   	push   eax
c001328e:	e8 0d e7 ff ff       	call   c00119a0 <UnixFile::~UnixFile()>
c0013293:	83 c4 10             	add    esp,0x10
c0013296:	90                   	nop
c0013297:	83 c4 0c             	add    esp,0xc
c001329a:	c3                   	ret    
c001329b:	90                   	nop

c001329c <Directory::~Directory()>:
c001329c:	83 ec 0c             	sub    esp,0xc
c001329f:	83 ec 0c             	sub    esp,0xc
c00132a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132a6:	e8 cd ff ff ff       	call   c0013278 <Directory::~Directory()>
c00132ab:	83 c4 10             	add    esp,0x10
c00132ae:	83 ec 08             	sub    esp,0x8
c00132b1:	68 14 01 00 00       	push   0x114
c00132b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132ba:	e8 22 fc ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c00132bf:	83 c4 10             	add    esp,0x10
c00132c2:	83 c4 0c             	add    esp,0xc
c00132c5:	c3                   	ret    

c00132c6 <Filesystem::Filesystem()>:
c00132c6:	ba c4 ac 02 c0       	mov    edx,0xc002acc4
c00132cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132cf:	89 10                	mov    DWORD PTR [eax],edx
c00132d1:	8b 15 0c e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e80c
c00132d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00132de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132e2:	a3 0c e8 02 c0       	mov    ds:0xc002e80c,eax
c00132e7:	90                   	nop
c00132e8:	c3                   	ret    
c00132e9:	90                   	nop

c00132ea <Filesystem::~Filesystem()>:
c00132ea:	ba c4 ac 02 c0       	mov    edx,0xc002acc4
c00132ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132f3:	89 10                	mov    DWORD PTR [eax],edx
c00132f5:	90                   	nop
c00132f6:	c3                   	ret    
c00132f7:	90                   	nop

c00132f8 <Filesystem::~Filesystem()>:
c00132f8:	83 ec 0c             	sub    esp,0xc
c00132fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132ff:	e8 e6 ff ff ff       	call   c00132ea <Filesystem::~Filesystem()>
c0013304:	83 c4 04             	add    esp,0x4
c0013307:	83 ec 08             	sub    esp,0x8
c001330a:	6a 08                	push   0x8
c001330c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013310:	e8 cc fb ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0013315:	83 c4 10             	add    esp,0x10
c0013318:	83 c4 0c             	add    esp,0xc
c001331b:	c3                   	ret    

c001331c <Fs::getcwd(Process*, char*, int)>:
c001331c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013320:	31 c0                	xor    eax,eax
c0013322:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013325:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013329:	7d 15                	jge    c0013340 <Fs::getcwd(Process*, char*, int)+0x24>
c001332b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001332f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013336:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013339:	84 c9                	test   cl,cl
c001333b:	74 06                	je     c0013343 <Fs::getcwd(Process*, char*, int)+0x27>
c001333d:	40                   	inc    eax
c001333e:	eb e2                	jmp    c0013322 <Fs::getcwd(Process*, char*, int)+0x6>
c0013340:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013343:	31 c0                	xor    eax,eax
c0013345:	c3                   	ret    

c0013346 <Fs::initVFS()>:
c0013346:	83 ec 18             	sub    esp,0x18
c0013349:	6a 08                	push   0x8
c001334b:	e8 92 c5 ff ff       	call   c000f8e2 <malloc>
c0013350:	89 04 24             	mov    DWORD PTR [esp],eax
c0013353:	e8 b4 dc 00 00       	call   c002100c <FAT::FAT()>
c0013358:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001335f:	e8 7e c5 ff ff       	call   c000f8e2 <malloc>
c0013364:	89 04 24             	mov    DWORD PTR [esp],eax
c0013367:	e8 f8 ee 00 00       	call   c0022264 <ISO9660::ISO9660()>
c001336c:	83 c4 1c             	add    esp,0x1c
c001336f:	c3                   	ret    

c0013370 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013370:	55                   	push   ebp
c0013371:	57                   	push   edi
c0013372:	56                   	push   esi
c0013373:	53                   	push   ebx
c0013374:	81 ec 10 04 00 00    	sub    esp,0x410
c001337a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013381:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013388:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001338f:	68 00 04 00 00       	push   0x400
c0013394:	6a 00                	push   0x0
c0013396:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001339a:	56                   	push   esi
c001339b:	e8 d8 d3 fe ff       	call   c0000778 <memset>
c00133a0:	83 c4 10             	add    esp,0x10
c00133a3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00133a7:	75 0b                	jne    c00133b4 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00133a9:	50                   	push   eax
c00133aa:	50                   	push   eax
c00133ab:	57                   	push   edi
c00133ac:	56                   	push   esi
c00133ad:	e8 82 d4 fe ff       	call   c0000834 <strcpy>
c00133b2:	eb 41                	jmp    c00133f5 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00133b4:	8a 07                	mov    al,BYTE PTR [edi]
c00133b6:	3c 5c                	cmp    al,0x5c
c00133b8:	74 04                	je     c00133be <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00133ba:	3c 2f                	cmp    al,0x2f
c00133bc:	75 18                	jne    c00133d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00133be:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00133c1:	3c 60                	cmp    al,0x60
c00133c3:	7e 03                	jle    c00133c8 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00133c5:	83 e8 20             	sub    eax,0x20
c00133c8:	88 04 24             	mov    BYTE PTR [esp],al
c00133cb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00133d2:	50                   	push   eax
c00133d3:	50                   	push   eax
c00133d4:	eb 18                	jmp    c00133ee <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00133d6:	50                   	push   eax
c00133d7:	50                   	push   eax
c00133d8:	55                   	push   ebp
c00133d9:	56                   	push   esi
c00133da:	e8 55 d4 fe ff       	call   c0000834 <strcpy>
c00133df:	5a                   	pop    edx
c00133e0:	59                   	pop    ecx
c00133e1:	68 6d c4 02 c0       	push   0xc002c46d
c00133e6:	56                   	push   esi
c00133e7:	e8 88 d5 fe ff       	call   c0000974 <strcat>
c00133ec:	5d                   	pop    ebp
c00133ed:	58                   	pop    eax
c00133ee:	57                   	push   edi
c00133ef:	56                   	push   esi
c00133f0:	e8 7f d5 fe ff       	call   c0000974 <strcat>
c00133f5:	83 c4 10             	add    esp,0x10
c00133f8:	8a 04 24             	mov    al,BYTE PTR [esp]
c00133fb:	3c 60                	cmp    al,0x60
c00133fd:	7e 03                	jle    c0013402 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00133ff:	83 e8 20             	sub    eax,0x20
c0013402:	88 04 24             	mov    BYTE PTR [esp],al
c0013405:	88 03                	mov    BYTE PTR [ebx],al
c0013407:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001340e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013414:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013418:	bf 03 00 00 00       	mov    edi,0x3
c001341d:	b8 03 00 00 00       	mov    eax,0x3
c0013422:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013425:	84 d2                	test   dl,dl
c0013427:	0f 84 91 00 00 00    	je     c00134be <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c001342d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013430:	80 fa 5c             	cmp    dl,0x5c
c0013433:	74 05                	je     c001343a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013435:	80 fa 2f             	cmp    dl,0x2f
c0013438:	75 12                	jne    c001344c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001343a:	89 c5                	mov    ebp,eax
c001343c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013441:	74 09                	je     c001344c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013443:	40                   	inc    eax
c0013444:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013448:	89 cf                	mov    edi,ecx
c001344a:	eb d6                	jmp    c0013422 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c001344c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013451:	75 5b                	jne    c00134ae <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013453:	80 fa 2e             	cmp    dl,0x2e
c0013456:	75 56                	jne    c00134ae <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013458:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c001345c:	74 19                	je     c0013477 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c001345e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013463:	74 53                	je     c00134b8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013465:	89 f9                	mov    ecx,edi
c0013467:	41                   	inc    ecx
c0013468:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001346b:	80 fa 2f             	cmp    dl,0x2f
c001346e:	74 f7                	je     c0013467 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013470:	80 fa 5c             	cmp    dl,0x5c
c0013473:	74 f2                	je     c0013467 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013475:	eb d1                	jmp    c0013448 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013477:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001347c:	74 3a                	je     c00134b8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001347e:	83 f8 03             	cmp    eax,0x3
c0013481:	74 c5                	je     c0013448 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013483:	41                   	inc    ecx
c0013484:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013487:	80 fa 2f             	cmp    dl,0x2f
c001348a:	74 f7                	je     c0013483 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001348c:	80 fa 5c             	cmp    dl,0x5c
c001348f:	74 f2                	je     c0013483 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013491:	48                   	dec    eax
c0013492:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013496:	75 06                	jne    c001349e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013498:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001349c:	eb f3                	jmp    c0013491 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c001349e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134a2:	74 07                	je     c00134ab <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00134a4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134a8:	48                   	dec    eax
c00134a9:	eb f3                	jmp    c001349e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00134ab:	40                   	inc    eax
c00134ac:	eb 9a                	jmp    c0013448 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134ae:	80 fa 2f             	cmp    dl,0x2f
c00134b1:	74 95                	je     c0013448 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134b3:	80 fa 5c             	cmp    dl,0x5c
c00134b6:	74 90                	je     c0013448 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134b8:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00134bb:	40                   	inc    eax
c00134bc:	eb 8a                	jmp    c0013448 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134be:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134c2:	83 ec 0c             	sub    esp,0xc
c00134c5:	53                   	push   ebx
c00134c6:	e8 c9 d2 fe ff       	call   c0000794 <strlen>
c00134cb:	83 c4 10             	add    esp,0x10
c00134ce:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00134d3:	75 26                	jne    c00134fb <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00134d5:	83 ec 0c             	sub    esp,0xc
c00134d8:	53                   	push   ebx
c00134d9:	e8 b6 d2 fe ff       	call   c0000794 <strlen>
c00134de:	83 c4 10             	add    esp,0x10
c00134e1:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00134e6:	74 26                	je     c001350e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00134e8:	83 ec 0c             	sub    esp,0xc
c00134eb:	53                   	push   ebx
c00134ec:	e8 a3 d2 fe ff       	call   c0000794 <strlen>
c00134f1:	83 c4 10             	add    esp,0x10
c00134f4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00134f9:	eb c7                	jmp    c00134c2 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00134fb:	83 ec 0c             	sub    esp,0xc
c00134fe:	53                   	push   ebx
c00134ff:	e8 90 d2 fe ff       	call   c0000794 <strlen>
c0013504:	83 c4 10             	add    esp,0x10
c0013507:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001350c:	74 c7                	je     c00134d5 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001350e:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013514:	5b                   	pop    ebx
c0013515:	5e                   	pop    esi
c0013516:	5f                   	pop    edi
c0013517:	5d                   	pop    ebp
c0013518:	c3                   	ret    
c0013519:	90                   	nop

c001351a <File::File(char const*, Process*)>:
c001351a:	83 ec 0c             	sub    esp,0xc
c001351d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013521:	83 ec 08             	sub    esp,0x8
c0013524:	6a 00                	push   0x0
c0013526:	50                   	push   eax
c0013527:	e8 92 e2 ff ff       	call   c00117be <UnixFile::UnixFile(int)>
c001352c:	83 c4 10             	add    esp,0x10
c001352f:	ba 28 ad 02 c0       	mov    edx,0xc002ad28
c0013534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013538:	89 10                	mov    DWORD PTR [eax],edx
c001353a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001353e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013548:	83 c0 0d             	add    eax,0xd
c001354b:	83 ec 04             	sub    esp,0x4
c001354e:	52                   	push   edx
c001354f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013553:	50                   	push   eax
c0013554:	e8 17 fe ff ff       	call   c0013370 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013559:	83 c4 10             	add    esp,0x10
c001355c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013560:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013563:	8d 50 bf             	lea    edx,[eax-0x41]
c0013566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013574:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013578:	90                   	nop
c0013579:	83 c4 0c             	add    esp,0xc
c001357c:	c3                   	ret    
c001357d:	90                   	nop

c001357e <File::open(FileOpenMode)>:
c001357e:	53                   	push   ebx
c001357f:	b8 0b 00 00 00       	mov    eax,0xb
c0013584:	83 ec 08             	sub    esp,0x8
c0013587:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001358b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013592:	80 fa 19             	cmp    dl,0x19
c0013595:	77 40                	ja     c00135d7 <File::open(FileOpenMode)+0x59>
c0013597:	8b 14 95 a0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1360]
c001359e:	85 d2                	test   edx,edx
c00135a0:	74 35                	je     c00135d7 <File::open(FileOpenMode)+0x59>
c00135a2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135a8:	85 d2                	test   edx,edx
c00135aa:	74 2b                	je     c00135d7 <File::open(FileOpenMode)+0x59>
c00135ac:	b8 06 00 00 00       	mov    eax,0x6
c00135b1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00135b5:	75 20                	jne    c00135d7 <File::open(FileOpenMode)+0x59>
c00135b7:	8b 02                	mov    eax,DWORD PTR [edx]
c00135b9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00135bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00135c3:	51                   	push   ecx
c00135c4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00135c7:	51                   	push   ecx
c00135c8:	52                   	push   edx
c00135c9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135cc:	83 c4 10             	add    esp,0x10
c00135cf:	85 c0                	test   eax,eax
c00135d1:	75 04                	jne    c00135d7 <File::open(FileOpenMode)+0x59>
c00135d3:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00135d7:	83 c4 08             	add    esp,0x8
c00135da:	5b                   	pop    ebx
c00135db:	c3                   	ret    

c00135dc <File::close()>:
c00135dc:	53                   	push   ebx
c00135dd:	b8 0b 00 00 00       	mov    eax,0xb
c00135e2:	83 ec 08             	sub    esp,0x8
c00135e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135e9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135f0:	80 fa 19             	cmp    dl,0x19
c00135f3:	77 41                	ja     c0013636 <File::close()+0x5a>
c00135f5:	8b 1c 95 a0 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1360]
c00135fc:	85 db                	test   ebx,ebx
c00135fe:	74 36                	je     c0013636 <File::close()+0x5a>
c0013600:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013607:	74 2d                	je     c0013636 <File::close()+0x5a>
c0013609:	b8 05 00 00 00       	mov    eax,0x5
c001360e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013612:	74 22                	je     c0013636 <File::close()+0x5a>
c0013614:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013618:	8b 04 95 a0 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1360]
c001361f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013625:	53                   	push   ebx
c0013626:	53                   	push   ebx
c0013627:	8b 10                	mov    edx,DWORD PTR [eax]
c0013629:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001362f:	50                   	push   eax
c0013630:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013633:	83 c4 10             	add    esp,0x10
c0013636:	83 c4 08             	add    esp,0x8
c0013639:	5b                   	pop    ebx
c001363a:	c3                   	ret    
c001363b:	90                   	nop

c001363c <File::seek(unsigned long long)>:
c001363c:	56                   	push   esi
c001363d:	53                   	push   ebx
c001363e:	b8 0b 00 00 00       	mov    eax,0xb
c0013643:	51                   	push   ecx
c0013644:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013648:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001364c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013653:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013657:	80 fa 19             	cmp    dl,0x19
c001365a:	77 31                	ja     c001368d <File::seek(unsigned long long)+0x51>
c001365c:	8b 14 95 a0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1360]
c0013663:	85 d2                	test   edx,edx
c0013665:	74 26                	je     c001368d <File::seek(unsigned long long)+0x51>
c0013667:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001366d:	85 d2                	test   edx,edx
c001366f:	74 1c                	je     c001368d <File::seek(unsigned long long)+0x51>
c0013671:	b8 05 00 00 00       	mov    eax,0x5
c0013676:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001367a:	74 11                	je     c001368d <File::seek(unsigned long long)+0x51>
c001367c:	8b 02                	mov    eax,DWORD PTR [edx]
c001367e:	53                   	push   ebx
c001367f:	51                   	push   ecx
c0013680:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013686:	52                   	push   edx
c0013687:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001368a:	83 c4 10             	add    esp,0x10
c001368d:	5a                   	pop    edx
c001368e:	5b                   	pop    ebx
c001368f:	5e                   	pop    esi
c0013690:	c3                   	ret    
c0013691:	90                   	nop

c0013692 <File::tell(unsigned long long*)>:
c0013692:	83 ec 0c             	sub    esp,0xc
c0013695:	b8 0b 00 00 00       	mov    eax,0xb
c001369a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001369e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00136a5:	80 fa 19             	cmp    dl,0x19
c00136a8:	77 34                	ja     c00136de <File::tell(unsigned long long*)+0x4c>
c00136aa:	8b 14 95 a0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1360]
c00136b1:	85 d2                	test   edx,edx
c00136b3:	74 29                	je     c00136de <File::tell(unsigned long long*)+0x4c>
c00136b5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00136bb:	85 d2                	test   edx,edx
c00136bd:	74 1f                	je     c00136de <File::tell(unsigned long long*)+0x4c>
c00136bf:	b8 05 00 00 00       	mov    eax,0x5
c00136c4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00136c8:	74 14                	je     c00136de <File::tell(unsigned long long*)+0x4c>
c00136ca:	50                   	push   eax
c00136cb:	8b 02                	mov    eax,DWORD PTR [edx]
c00136cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136d1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00136d7:	52                   	push   edx
c00136d8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00136db:	83 c4 10             	add    esp,0x10
c00136de:	83 c4 0c             	add    esp,0xc
c00136e1:	c3                   	ret    

c00136e2 <File::rewind()>:
c00136e2:	83 ec 10             	sub    esp,0x10
c00136e5:	6a 00                	push   0x0
c00136e7:	6a 00                	push   0x0
c00136e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136ed:	e8 4a ff ff ff       	call   c001363c <File::seek(unsigned long long)>
c00136f2:	83 c4 1c             	add    esp,0x1c
c00136f5:	c3                   	ret    

c00136f6 <File::unlink()>:
c00136f6:	83 ec 0c             	sub    esp,0xc
c00136f9:	b8 0b 00 00 00       	mov    eax,0xb
c00136fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013702:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013709:	80 f9 19             	cmp    cl,0x19
c001370c:	77 2f                	ja     c001373d <File::unlink()+0x47>
c001370e:	8b 0c 8d a0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1360]
c0013715:	85 c9                	test   ecx,ecx
c0013717:	74 24                	je     c001373d <File::unlink()+0x47>
c0013719:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001371f:	85 c9                	test   ecx,ecx
c0013721:	74 1a                	je     c001373d <File::unlink()+0x47>
c0013723:	b8 06 00 00 00       	mov    eax,0x6
c0013728:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001372c:	75 0f                	jne    c001373d <File::unlink()+0x47>
c001372e:	83 c2 0d             	add    edx,0xd
c0013731:	50                   	push   eax
c0013732:	50                   	push   eax
c0013733:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013735:	52                   	push   edx
c0013736:	51                   	push   ecx
c0013737:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001373a:	83 c4 10             	add    esp,0x10
c001373d:	83 c4 0c             	add    esp,0xc
c0013740:	c3                   	ret    
c0013741:	90                   	nop

c0013742 <File::rename(char const*)>:
c0013742:	83 ec 0c             	sub    esp,0xc
c0013745:	b8 0b 00 00 00       	mov    eax,0xb
c001374a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001374e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013755:	80 f9 19             	cmp    cl,0x19
c0013758:	77 32                	ja     c001378c <File::rename(char const*)+0x4a>
c001375a:	8b 0c 8d a0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1360]
c0013761:	85 c9                	test   ecx,ecx
c0013763:	74 27                	je     c001378c <File::rename(char const*)+0x4a>
c0013765:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001376b:	85 c9                	test   ecx,ecx
c001376d:	74 1d                	je     c001378c <File::rename(char const*)+0x4a>
c001376f:	b8 06 00 00 00       	mov    eax,0x6
c0013774:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013778:	75 12                	jne    c001378c <File::rename(char const*)+0x4a>
c001377a:	83 c2 0d             	add    edx,0xd
c001377d:	50                   	push   eax
c001377e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013780:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013784:	52                   	push   edx
c0013785:	51                   	push   ecx
c0013786:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013789:	83 c4 10             	add    esp,0x10
c001378c:	83 c4 0c             	add    esp,0xc
c001378f:	c3                   	ret    

c0013790 <File::chfatattr(unsigned char, unsigned char)>:
c0013790:	57                   	push   edi
c0013791:	b8 0b 00 00 00       	mov    eax,0xb
c0013796:	56                   	push   esi
c0013797:	53                   	push   ebx
c0013798:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001379c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00137a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137a7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00137ab:	80 f9 19             	cmp    cl,0x19
c00137ae:	77 37                	ja     c00137e7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137b0:	8b 0c 8d a0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1360]
c00137b7:	85 c9                	test   ecx,ecx
c00137b9:	74 2c                	je     c00137e7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137bb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137c1:	85 c9                	test   ecx,ecx
c00137c3:	74 22                	je     c00137e7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137c5:	b8 06 00 00 00       	mov    eax,0x6
c00137ca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137ce:	75 17                	jne    c00137e7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137d0:	8b 39                	mov    edi,DWORD PTR [ecx]
c00137d2:	89 f0                	mov    eax,esi
c00137d4:	83 c2 0d             	add    edx,0xd
c00137d7:	0f b6 f0             	movzx  esi,al
c00137da:	0f b6 db             	movzx  ebx,bl
c00137dd:	56                   	push   esi
c00137de:	53                   	push   ebx
c00137df:	52                   	push   edx
c00137e0:	51                   	push   ecx
c00137e1:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00137e4:	83 c4 10             	add    esp,0x10
c00137e7:	5b                   	pop    ebx
c00137e8:	5e                   	pop    esi
c00137e9:	5f                   	pop    edi
c00137ea:	c3                   	ret    
c00137eb:	90                   	nop

c00137ec <File::exists()>:
c00137ec:	83 ec 0c             	sub    esp,0xc
c00137ef:	31 c0                	xor    eax,eax
c00137f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137f5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137fc:	80 f9 19             	cmp    cl,0x19
c00137ff:	77 24                	ja     c0013825 <File::exists()+0x39>
c0013801:	8b 0c 8d a0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1360]
c0013808:	85 c9                	test   ecx,ecx
c001380a:	74 19                	je     c0013825 <File::exists()+0x39>
c001380c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013812:	85 c9                	test   ecx,ecx
c0013814:	74 0f                	je     c0013825 <File::exists()+0x39>
c0013816:	83 c2 0d             	add    edx,0xd
c0013819:	50                   	push   eax
c001381a:	50                   	push   eax
c001381b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001381d:	52                   	push   edx
c001381e:	51                   	push   ecx
c001381f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013822:	83 c4 10             	add    esp,0x10
c0013825:	83 c4 0c             	add    esp,0xc
c0013828:	c3                   	ret    
c0013829:	90                   	nop

c001382a <File::stat(unsigned long long*, bool*)>:
c001382a:	56                   	push   esi
c001382b:	53                   	push   ebx
c001382c:	50                   	push   eax
c001382d:	b8 0b 00 00 00       	mov    eax,0xb
c0013832:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013836:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001383a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013841:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013845:	80 f9 19             	cmp    cl,0x19
c0013848:	77 3d                	ja     c0013887 <File::stat(unsigned long long*, bool*)+0x5d>
c001384a:	8b 0c 8d a0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1360]
c0013851:	85 c9                	test   ecx,ecx
c0013853:	74 32                	je     c0013887 <File::stat(unsigned long long*, bool*)+0x5d>
c0013855:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001385b:	85 c9                	test   ecx,ecx
c001385d:	74 28                	je     c0013887 <File::stat(unsigned long long*, bool*)+0x5d>
c001385f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013861:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013865:	74 13                	je     c001387a <File::stat(unsigned long long*, bool*)+0x50>
c0013867:	83 ec 04             	sub    esp,0x4
c001386a:	56                   	push   esi
c001386b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013871:	51                   	push   ecx
c0013872:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013875:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013878:	eb 0a                	jmp    c0013884 <File::stat(unsigned long long*, bool*)+0x5a>
c001387a:	53                   	push   ebx
c001387b:	83 c2 0d             	add    edx,0xd
c001387e:	56                   	push   esi
c001387f:	52                   	push   edx
c0013880:	51                   	push   ecx
c0013881:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013884:	83 c4 10             	add    esp,0x10
c0013887:	5a                   	pop    edx
c0013888:	5b                   	pop    ebx
c0013889:	5e                   	pop    esi
c001388a:	c3                   	ret    

c001388b <Fs::setcwd(Process*, char*)>:
c001388b:	55                   	push   ebp
c001388c:	57                   	push   edi
c001388d:	56                   	push   esi
c001388e:	53                   	push   ebx
c001388f:	81 ec 20 02 00 00    	sub    esp,0x220
c0013895:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001389c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00138a2:	57                   	push   edi
c00138a3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00138aa:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00138ae:	56                   	push   esi
c00138af:	e8 bc fa ff ff       	call   c0013370 <Fs::standardiseFiles(char*, char const*, char const*)>
c00138b4:	89 34 24             	mov    DWORD PTR [esp],esi
c00138b7:	e8 d8 ce fe ff       	call   c0000794 <strlen>
c00138bc:	83 c4 10             	add    esp,0x10
c00138bf:	83 f8 02             	cmp    eax,0x2
c00138c2:	77 17                	ja     c00138db <Fs::setcwd(Process*, char*)+0x50>
c00138c4:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00138c9:	83 e8 41             	sub    eax,0x41
c00138cc:	83 f8 19             	cmp    eax,0x19
c00138cf:	76 24                	jbe    c00138f5 <Fs::setcwd(Process*, char*)+0x6a>
c00138d1:	b8 03 00 00 00       	mov    eax,0x3
c00138d6:	e9 e0 00 00 00       	jmp    c00139bb <Fs::setcwd(Process*, char*)+0x130>
c00138db:	83 ec 0c             	sub    esp,0xc
c00138de:	56                   	push   esi
c00138df:	e8 b0 ce fe ff       	call   c0000794 <strlen>
c00138e4:	83 c4 10             	add    esp,0x10
c00138e7:	83 f8 03             	cmp    eax,0x3
c00138ea:	75 34                	jne    c0013920 <Fs::setcwd(Process*, char*)+0x95>
c00138ec:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00138f1:	75 2d                	jne    c0013920 <Fs::setcwd(Process*, char*)+0x95>
c00138f3:	eb cf                	jmp    c00138c4 <Fs::setcwd(Process*, char*)+0x39>
c00138f5:	8b 14 85 a0 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1360]
c00138fc:	b8 05 00 00 00       	mov    eax,0x5
c0013901:	85 d2                	test   edx,edx
c0013903:	0f 84 b2 00 00 00    	je     c00139bb <Fs::setcwd(Process*, char*)+0x130>
c0013909:	b8 06 00 00 00       	mov    eax,0x6
c001390e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013915:	0f 85 92 00 00 00    	jne    c00139ad <Fs::setcwd(Process*, char*)+0x122>
c001391b:	e9 9b 00 00 00       	jmp    c00139bb <Fs::setcwd(Process*, char*)+0x130>
c0013920:	83 ec 0c             	sub    esp,0xc
c0013923:	68 14 01 00 00       	push   0x114
c0013928:	e8 b5 bf ff ff       	call   c000f8e2 <malloc>
c001392d:	83 c4 0c             	add    esp,0xc
c0013930:	89 c3                	mov    ebx,eax
c0013932:	55                   	push   ebp
c0013933:	56                   	push   esi
c0013934:	50                   	push   eax
c0013935:	e8 e0 fb ff ff       	call   c001351a <File::File(char const*, Process*)>
c001393a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001393f:	83 c4 0c             	add    esp,0xc
c0013942:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013946:	50                   	push   eax
c0013947:	8d 44 24 10          	lea    eax,[esp+0x10]
c001394b:	50                   	push   eax
c001394c:	53                   	push   ebx
c001394d:	e8 d8 fe ff ff       	call   c001382a <File::stat(unsigned long long*, bool*)>
c0013952:	83 c4 10             	add    esp,0x10
c0013955:	83 f8 02             	cmp    eax,0x2
c0013958:	74 04                	je     c001395e <Fs::setcwd(Process*, char*)+0xd3>
c001395a:	85 c0                	test   eax,eax
c001395c:	74 1c                	je     c001397a <Fs::setcwd(Process*, char*)+0xef>
c001395e:	b8 01 00 00 00       	mov    eax,0x1
c0013963:	85 db                	test   ebx,ebx
c0013965:	74 54                	je     c00139bb <Fs::setcwd(Process*, char*)+0x130>
c0013967:	83 ec 0c             	sub    esp,0xc
c001396a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001396c:	53                   	push   ebx
c001396d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013970:	83 c4 10             	add    esp,0x10
c0013973:	b8 01 00 00 00       	mov    eax,0x1
c0013978:	eb 41                	jmp    c00139bb <Fs::setcwd(Process*, char*)+0x130>
c001397a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001397f:	75 1c                	jne    c001399d <Fs::setcwd(Process*, char*)+0x112>
c0013981:	b8 02 00 00 00       	mov    eax,0x2
c0013986:	85 db                	test   ebx,ebx
c0013988:	74 31                	je     c00139bb <Fs::setcwd(Process*, char*)+0x130>
c001398a:	83 ec 0c             	sub    esp,0xc
c001398d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001398f:	53                   	push   ebx
c0013990:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013993:	83 c4 10             	add    esp,0x10
c0013996:	b8 02 00 00 00       	mov    eax,0x2
c001399b:	eb 1e                	jmp    c00139bb <Fs::setcwd(Process*, char*)+0x130>
c001399d:	85 db                	test   ebx,ebx
c001399f:	74 0c                	je     c00139ad <Fs::setcwd(Process*, char*)+0x122>
c00139a1:	83 ec 0c             	sub    esp,0xc
c00139a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139a6:	53                   	push   ebx
c00139a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139aa:	83 c4 10             	add    esp,0x10
c00139ad:	50                   	push   eax
c00139ae:	50                   	push   eax
c00139af:	56                   	push   esi
c00139b0:	57                   	push   edi
c00139b1:	e8 7e ce fe ff       	call   c0000834 <strcpy>
c00139b6:	83 c4 10             	add    esp,0x10
c00139b9:	31 c0                	xor    eax,eax
c00139bb:	81 c4 1c 02 00 00    	add    esp,0x21c
c00139c1:	5b                   	pop    ebx
c00139c2:	5e                   	pop    esi
c00139c3:	5f                   	pop    edi
c00139c4:	5d                   	pop    ebp
c00139c5:	c3                   	ret    

c00139c6 <Directory::Directory(char const*, Process*)>:
c00139c6:	83 ec 0c             	sub    esp,0xc
c00139c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139cd:	83 ec 08             	sub    esp,0x8
c00139d0:	6a 00                	push   0x0
c00139d2:	50                   	push   eax
c00139d3:	e8 e6 dd ff ff       	call   c00117be <UnixFile::UnixFile(int)>
c00139d8:	83 c4 10             	add    esp,0x10
c00139db:	ba 44 ad 02 c0       	mov    edx,0xc002ad44
c00139e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139e4:	89 10                	mov    DWORD PTR [eax],edx
c00139e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139ea:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00139f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139f4:	83 c0 0d             	add    eax,0xd
c00139f7:	83 ec 04             	sub    esp,0x4
c00139fa:	52                   	push   edx
c00139fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139ff:	50                   	push   eax
c0013a00:	e8 6b f9 ff ff       	call   c0013370 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013a05:	83 c4 10             	add    esp,0x10
c0013a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a0c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013a0f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a16:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a20:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013a24:	90                   	nop
c0013a25:	83 c4 0c             	add    esp,0xc
c0013a28:	c3                   	ret    
c0013a29:	90                   	nop

c0013a2a <Directory::open()>:
c0013a2a:	53                   	push   ebx
c0013a2b:	b8 0b 00 00 00       	mov    eax,0xb
c0013a30:	83 ec 08             	sub    esp,0x8
c0013a33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a37:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013a3e:	80 fa 19             	cmp    dl,0x19
c0013a41:	77 3d                	ja     c0013a80 <Directory::open()+0x56>
c0013a43:	8b 14 95 a0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1360]
c0013a4a:	85 d2                	test   edx,edx
c0013a4c:	74 32                	je     c0013a80 <Directory::open()+0x56>
c0013a4e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013a54:	85 d2                	test   edx,edx
c0013a56:	74 28                	je     c0013a80 <Directory::open()+0x56>
c0013a58:	b8 06 00 00 00       	mov    eax,0x6
c0013a5d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013a61:	75 1d                	jne    c0013a80 <Directory::open()+0x56>
c0013a63:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013a69:	50                   	push   eax
c0013a6a:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a6c:	51                   	push   ecx
c0013a6d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013a70:	51                   	push   ecx
c0013a71:	52                   	push   edx
c0013a72:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013a75:	83 c4 10             	add    esp,0x10
c0013a78:	85 c0                	test   eax,eax
c0013a7a:	75 04                	jne    c0013a80 <Directory::open()+0x56>
c0013a7c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013a80:	83 c4 08             	add    esp,0x8
c0013a83:	5b                   	pop    ebx
c0013a84:	c3                   	ret    
c0013a85:	90                   	nop

c0013a86 <Directory::close()>:
c0013a86:	53                   	push   ebx
c0013a87:	b8 0b 00 00 00       	mov    eax,0xb
c0013a8c:	83 ec 08             	sub    esp,0x8
c0013a8f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a93:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a9a:	80 fa 19             	cmp    dl,0x19
c0013a9d:	77 41                	ja     c0013ae0 <Directory::close()+0x5a>
c0013a9f:	8b 1c 95 a0 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1360]
c0013aa6:	85 db                	test   ebx,ebx
c0013aa8:	74 36                	je     c0013ae0 <Directory::close()+0x5a>
c0013aaa:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013ab1:	74 2d                	je     c0013ae0 <Directory::close()+0x5a>
c0013ab3:	b8 05 00 00 00       	mov    eax,0x5
c0013ab8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013abc:	74 22                	je     c0013ae0 <Directory::close()+0x5a>
c0013abe:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013ac2:	8b 04 95 a0 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1360]
c0013ac9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013acf:	53                   	push   ebx
c0013ad0:	53                   	push   ebx
c0013ad1:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ad3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013ad9:	50                   	push   eax
c0013ada:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013add:	83 c4 10             	add    esp,0x10
c0013ae0:	83 c4 08             	add    esp,0x8
c0013ae3:	5b                   	pop    ebx
c0013ae4:	c3                   	ret    
c0013ae5:	90                   	nop

c0013ae6 <Directory::unlink()>:
c0013ae6:	83 ec 0c             	sub    esp,0xc
c0013ae9:	b8 0b 00 00 00       	mov    eax,0xb
c0013aee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013af2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013af9:	80 f9 19             	cmp    cl,0x19
c0013afc:	77 2f                	ja     c0013b2d <Directory::unlink()+0x47>
c0013afe:	8b 0c 8d a0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1360]
c0013b05:	85 c9                	test   ecx,ecx
c0013b07:	74 24                	je     c0013b2d <Directory::unlink()+0x47>
c0013b09:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b0f:	85 c9                	test   ecx,ecx
c0013b11:	74 1a                	je     c0013b2d <Directory::unlink()+0x47>
c0013b13:	b8 06 00 00 00       	mov    eax,0x6
c0013b18:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b1c:	75 0f                	jne    c0013b2d <Directory::unlink()+0x47>
c0013b1e:	83 c2 0d             	add    edx,0xd
c0013b21:	50                   	push   eax
c0013b22:	50                   	push   eax
c0013b23:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b25:	52                   	push   edx
c0013b26:	51                   	push   ecx
c0013b27:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013b2a:	83 c4 10             	add    esp,0x10
c0013b2d:	83 c4 0c             	add    esp,0xc
c0013b30:	c3                   	ret    
c0013b31:	90                   	nop

c0013b32 <Directory::rename(char const*)>:
c0013b32:	83 ec 0c             	sub    esp,0xc
c0013b35:	b8 0b 00 00 00       	mov    eax,0xb
c0013b3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b3e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b45:	80 f9 19             	cmp    cl,0x19
c0013b48:	77 32                	ja     c0013b7c <Directory::rename(char const*)+0x4a>
c0013b4a:	8b 0c 8d a0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1360]
c0013b51:	85 c9                	test   ecx,ecx
c0013b53:	74 27                	je     c0013b7c <Directory::rename(char const*)+0x4a>
c0013b55:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b5b:	85 c9                	test   ecx,ecx
c0013b5d:	74 1d                	je     c0013b7c <Directory::rename(char const*)+0x4a>
c0013b5f:	b8 06 00 00 00       	mov    eax,0x6
c0013b64:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b68:	75 12                	jne    c0013b7c <Directory::rename(char const*)+0x4a>
c0013b6a:	83 c2 0d             	add    edx,0xd
c0013b6d:	50                   	push   eax
c0013b6e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b74:	52                   	push   edx
c0013b75:	51                   	push   ecx
c0013b76:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013b79:	83 c4 10             	add    esp,0x10
c0013b7c:	83 c4 0c             	add    esp,0xc
c0013b7f:	c3                   	ret    

c0013b80 <Directory::exists()>:
c0013b80:	83 ec 0c             	sub    esp,0xc
c0013b83:	31 c0                	xor    eax,eax
c0013b85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b89:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b90:	80 f9 19             	cmp    cl,0x19
c0013b93:	77 24                	ja     c0013bb9 <Directory::exists()+0x39>
c0013b95:	8b 0c 8d a0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1360]
c0013b9c:	85 c9                	test   ecx,ecx
c0013b9e:	74 19                	je     c0013bb9 <Directory::exists()+0x39>
c0013ba0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ba6:	85 c9                	test   ecx,ecx
c0013ba8:	74 0f                	je     c0013bb9 <Directory::exists()+0x39>
c0013baa:	83 c2 0d             	add    edx,0xd
c0013bad:	50                   	push   eax
c0013bae:	50                   	push   eax
c0013baf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bb1:	52                   	push   edx
c0013bb2:	51                   	push   ecx
c0013bb3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013bb6:	83 c4 10             	add    esp,0x10
c0013bb9:	83 c4 0c             	add    esp,0xc
c0013bbc:	c3                   	ret    
c0013bbd:	90                   	nop

c0013bbe <Directory::read(dirent*)>:
c0013bbe:	83 ec 1c             	sub    esp,0x1c
c0013bc1:	b8 0b 00 00 00       	mov    eax,0xb
c0013bc6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013bca:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013bd1:	80 fa 19             	cmp    dl,0x19
c0013bd4:	77 30                	ja     c0013c06 <Directory::read(dirent*)+0x48>
c0013bd6:	8b 14 95 a0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1360]
c0013bdd:	85 d2                	test   edx,edx
c0013bdf:	74 25                	je     c0013c06 <Directory::read(dirent*)+0x48>
c0013be1:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013be8:	74 1c                	je     c0013c06 <Directory::read(dirent*)+0x48>
c0013bea:	83 ec 0c             	sub    esp,0xc
c0013bed:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bef:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013bf3:	52                   	push   edx
c0013bf4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013bf8:	6a 00                	push   0x0
c0013bfa:	68 10 01 00 00       	push   0x110
c0013bff:	51                   	push   ecx
c0013c00:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c03:	83 c4 20             	add    esp,0x20
c0013c06:	83 c4 1c             	add    esp,0x1c
c0013c09:	c3                   	ret    

c0013c0a <Directory::create()>:
c0013c0a:	83 ec 0c             	sub    esp,0xc
c0013c0d:	b8 0b 00 00 00       	mov    eax,0xb
c0013c12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c16:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013c1d:	80 f9 19             	cmp    cl,0x19
c0013c20:	77 2f                	ja     c0013c51 <Directory::create()+0x47>
c0013c22:	8b 0c 8d a0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1360]
c0013c29:	85 c9                	test   ecx,ecx
c0013c2b:	74 24                	je     c0013c51 <Directory::create()+0x47>
c0013c2d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013c33:	85 c9                	test   ecx,ecx
c0013c35:	74 1a                	je     c0013c51 <Directory::create()+0x47>
c0013c37:	b8 06 00 00 00       	mov    eax,0x6
c0013c3c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013c40:	75 0f                	jne    c0013c51 <Directory::create()+0x47>
c0013c42:	83 c2 0d             	add    edx,0xd
c0013c45:	50                   	push   eax
c0013c46:	50                   	push   eax
c0013c47:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c49:	52                   	push   edx
c0013c4a:	51                   	push   ecx
c0013c4b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013c4e:	83 c4 10             	add    esp,0x10
c0013c51:	83 c4 0c             	add    esp,0xc
c0013c54:	c3                   	ret    
c0013c55:	90                   	nop

c0013c56 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013c56:	b8 0a 00 00 00       	mov    eax,0xa
c0013c5b:	c3                   	ret    

c0013c5c <Bus::Bus(char const*)>:
c0013c5c:	83 ec 0c             	sub    esp,0xc
c0013c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c63:	83 ec 08             	sub    esp,0x8
c0013c66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c6a:	50                   	push   eax
c0013c6b:	e8 68 09 00 00       	call   c00145d8 <Device::Device(char const*)>
c0013c70:	83 c4 10             	add    esp,0x10
c0013c73:	ba 60 ad 02 c0       	mov    edx,0xc002ad60
c0013c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c7c:	89 10                	mov    DWORD PTR [eax],edx
c0013c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c82:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013c8c:	90                   	nop
c0013c8d:	83 c4 0c             	add    esp,0xc
c0013c90:	c3                   	ret    
c0013c91:	90                   	nop

c0013c92 <Bus::~Bus()>:
c0013c92:	83 ec 0c             	sub    esp,0xc
c0013c95:	ba 60 ad 02 c0       	mov    edx,0xc002ad60
c0013c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c9e:	89 10                	mov    DWORD PTR [eax],edx
c0013ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca4:	83 ec 0c             	sub    esp,0xc
c0013ca7:	50                   	push   eax
c0013ca8:	e8 0d 06 00 00       	call   c00142ba <Device::~Device()>
c0013cad:	83 c4 10             	add    esp,0x10
c0013cb0:	90                   	nop
c0013cb1:	83 c4 0c             	add    esp,0xc
c0013cb4:	c3                   	ret    
c0013cb5:	90                   	nop

c0013cb6 <Bus::~Bus()>:
c0013cb6:	83 ec 0c             	sub    esp,0xc
c0013cb9:	83 ec 0c             	sub    esp,0xc
c0013cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cc0:	e8 cd ff ff ff       	call   c0013c92 <Bus::~Bus()>
c0013cc5:	83 c4 10             	add    esp,0x10
c0013cc8:	83 ec 08             	sub    esp,0x8
c0013ccb:	68 58 01 00 00       	push   0x158
c0013cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cd4:	e8 08 f2 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0013cd9:	83 c4 10             	add    esp,0x10
c0013cdc:	83 c4 0c             	add    esp,0xc
c0013cdf:	c3                   	ret    

c0013ce0 <Buzzer::Buzzer(char const*)>:
c0013ce0:	83 ec 0c             	sub    esp,0xc
c0013ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ce7:	83 ec 08             	sub    esp,0x8
c0013cea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cee:	50                   	push   eax
c0013cef:	e8 e4 08 00 00       	call   c00145d8 <Device::Device(char const*)>
c0013cf4:	83 c4 10             	add    esp,0x10
c0013cf7:	ba 8c ad 02 c0       	mov    edx,0xc002ad8c
c0013cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d00:	89 10                	mov    DWORD PTR [eax],edx
c0013d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d06:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d14:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013d1e:	90                   	nop
c0013d1f:	83 c4 0c             	add    esp,0xc
c0013d22:	c3                   	ret    
c0013d23:	90                   	nop

c0013d24 <Buzzer::~Buzzer()>:
c0013d24:	83 ec 0c             	sub    esp,0xc
c0013d27:	ba 8c ad 02 c0       	mov    edx,0xc002ad8c
c0013d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d30:	89 10                	mov    DWORD PTR [eax],edx
c0013d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d36:	83 ec 0c             	sub    esp,0xc
c0013d39:	50                   	push   eax
c0013d3a:	e8 7b 05 00 00       	call   c00142ba <Device::~Device()>
c0013d3f:	83 c4 10             	add    esp,0x10
c0013d42:	90                   	nop
c0013d43:	83 c4 0c             	add    esp,0xc
c0013d46:	c3                   	ret    
c0013d47:	90                   	nop

c0013d48 <Buzzer::~Buzzer()>:
c0013d48:	83 ec 0c             	sub    esp,0xc
c0013d4b:	83 ec 0c             	sub    esp,0xc
c0013d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d52:	e8 cd ff ff ff       	call   c0013d24 <Buzzer::~Buzzer()>
c0013d57:	83 c4 10             	add    esp,0x10
c0013d5a:	83 ec 08             	sub    esp,0x8
c0013d5d:	68 5c 01 00 00       	push   0x15c
c0013d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d66:	e8 76 f1 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0013d6b:	83 c4 10             	add    esp,0x10
c0013d6e:	83 c4 0c             	add    esp,0xc
c0013d71:	c3                   	ret    

c0013d72 <Buzzer::stop()>:
c0013d72:	83 ec 14             	sub    esp,0x14
c0013d75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d79:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d7b:	6a 00                	push   0x0
c0013d7d:	50                   	push   eax
c0013d7e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d81:	83 c4 1c             	add    esp,0x1c
c0013d84:	c3                   	ret    

c0013d85 <beepThread(void*)>:
c0013d85:	53                   	push   ebx
c0013d86:	83 ec 08             	sub    esp,0x8
c0013d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d8d:	e8 08 a1 00 00       	call   c001de9a <unlockScheduler()>
c0013d92:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013d97:	52                   	push   edx
c0013d98:	52                   	push   edx
c0013d99:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013d9f:	52                   	push   edx
c0013da0:	50                   	push   eax
c0013da1:	e8 42 a6 00 00       	call   c001e3e8 <nanoSleep(unsigned long long)>
c0013da6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013da9:	e8 c4 ff ff ff       	call   c0013d72 <Buzzer::stop()>
c0013dae:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013db6:	83 c4 18             	add    esp,0x18
c0013db9:	5b                   	pop    ebx
c0013dba:	e9 6f a5 00 00       	jmp    c001e32e <blockTask(TaskState)>
c0013dbf:	90                   	nop

c0013dc0 <Buzzer::beep(int, int, bool)>:
c0013dc0:	57                   	push   edi
c0013dc1:	56                   	push   esi
c0013dc2:	53                   	push   ebx
c0013dc3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013dc7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013dcb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013dcf:	52                   	push   edx
c0013dd0:	52                   	push   edx
c0013dd1:	8b 06                	mov    eax,DWORD PTR [esi]
c0013dd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dd7:	56                   	push   esi
c0013dd8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013ddb:	83 c4 10             	add    esp,0x10
c0013dde:	89 f8                	mov    eax,edi
c0013de0:	84 c0                	test   al,al
c0013de2:	74 1f                	je     c0013e03 <Buzzer::beep(int, int, bool)+0x43>
c0013de4:	50                   	push   eax
c0013de5:	50                   	push   eax
c0013de6:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013dec:	99                   	cdq    
c0013ded:	52                   	push   edx
c0013dee:	50                   	push   eax
c0013def:	e8 f4 a5 00 00       	call   c001e3e8 <nanoSleep(unsigned long long)>
c0013df4:	83 c4 10             	add    esp,0x10
c0013df7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013dfb:	5b                   	pop    ebx
c0013dfc:	5e                   	pop    esi
c0013dfd:	5f                   	pop    edi
c0013dfe:	e9 6f ff ff ff       	jmp    c0013d72 <Buzzer::stop()>
c0013e03:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013e09:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0013e0e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013e16:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013e1a:	c7 44 24 14 85 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013d85
c0013e22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013e26:	5b                   	pop    ebx
c0013e27:	5e                   	pop    esi
c0013e28:	5f                   	pop    edi
c0013e29:	e9 9c a1 00 00       	jmp    c001dfca <Process::createThread(void (*)(void*), void*, int)>

c0013e2e <User::loadClockSettings(int)>:
c0013e2e:	53                   	push   ebx
c0013e2f:	83 ec 14             	sub    esp,0x14
c0013e32:	68 14 01 00 00       	push   0x114
c0013e37:	e8 a6 ba ff ff       	call   c000f8e2 <malloc>
c0013e3c:	83 c4 0c             	add    esp,0xc
c0013e3f:	89 c3                	mov    ebx,eax
c0013e41:	ff 35 f8 1b 03 c0    	push   DWORD PTR ds:0xc0031bf8
c0013e47:	68 b4 ad 02 c0       	push   0xc002adb4
c0013e4c:	50                   	push   eax
c0013e4d:	e8 c8 f6 ff ff       	call   c001351a <File::File(char const*, Process*)>
c0013e52:	58                   	pop    eax
c0013e53:	5a                   	pop    edx
c0013e54:	6a 01                	push   0x1
c0013e56:	53                   	push   ebx
c0013e57:	e8 22 f7 ff ff       	call   c001357e <File::open(FileOpenMode)>
c0013e5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e5f:	e8 78 f7 ff ff       	call   c00135dc <File::close()>
c0013e64:	83 c4 10             	add    esp,0x10
c0013e67:	85 db                	test   ebx,ebx
c0013e69:	74 0f                	je     c0013e7a <User::loadClockSettings(int)+0x4c>
c0013e6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e6d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013e71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e74:	83 c4 08             	add    esp,0x8
c0013e77:	5b                   	pop    ebx
c0013e78:	ff e0                	jmp    eax
c0013e7a:	83 c4 08             	add    esp,0x8
c0013e7d:	5b                   	pop    ebx
c0013e7e:	c3                   	ret    
c0013e7f:	90                   	nop

c0013e80 <Clock::Clock(char const*)>:
c0013e80:	83 ec 0c             	sub    esp,0xc
c0013e83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e87:	83 ec 08             	sub    esp,0x8
c0013e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e8e:	50                   	push   eax
c0013e8f:	e8 44 07 00 00       	call   c00145d8 <Device::Device(char const*)>
c0013e94:	83 c4 10             	add    esp,0x10
c0013e97:	ba dc ad 02 c0       	mov    edx,0xc002addc
c0013e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea0:	89 10                	mov    DWORD PTR [eax],edx
c0013ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea6:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013eb0:	90                   	nop
c0013eb1:	83 c4 0c             	add    esp,0xc
c0013eb4:	c3                   	ret    
c0013eb5:	90                   	nop

c0013eb6 <Clock::~Clock()>:
c0013eb6:	83 ec 0c             	sub    esp,0xc
c0013eb9:	ba dc ad 02 c0       	mov    edx,0xc002addc
c0013ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec2:	89 10                	mov    DWORD PTR [eax],edx
c0013ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec8:	83 ec 0c             	sub    esp,0xc
c0013ecb:	50                   	push   eax
c0013ecc:	e8 e9 03 00 00       	call   c00142ba <Device::~Device()>
c0013ed1:	83 c4 10             	add    esp,0x10
c0013ed4:	90                   	nop
c0013ed5:	83 c4 0c             	add    esp,0xc
c0013ed8:	c3                   	ret    
c0013ed9:	90                   	nop

c0013eda <Clock::~Clock()>:
c0013eda:	83 ec 0c             	sub    esp,0xc
c0013edd:	83 ec 0c             	sub    esp,0xc
c0013ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ee4:	e8 cd ff ff ff       	call   c0013eb6 <Clock::~Clock()>
c0013ee9:	83 c4 10             	add    esp,0x10
c0013eec:	83 ec 08             	sub    esp,0x8
c0013eef:	68 58 01 00 00       	push   0x158
c0013ef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ef8:	e8 e4 ef ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0013efd:	83 c4 10             	add    esp,0x10
c0013f00:	83 c4 0c             	add    esp,0xc
c0013f03:	c3                   	ret    

c0013f04 <Clock::timeInSecondsLocal()>:
c0013f04:	53                   	push   ebx
c0013f05:	83 ec 14             	sub    esp,0x14
c0013f08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f0c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f0e:	50                   	push   eax
c0013f0f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013f12:	0f b6 0d 14 e8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e814
c0013f19:	03 0d 18 e8 02 c0    	add    ecx,DWORD PTR ds:0xc002e818
c0013f1f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f25:	89 cb                	mov    ebx,ecx
c0013f27:	c1 fb 1f             	sar    ebx,0x1f
c0013f2a:	01 c8                	add    eax,ecx
c0013f2c:	11 da                	adc    edx,ebx
c0013f2e:	83 c4 10             	add    esp,0x10
c0013f31:	31 c9                	xor    ecx,ecx
c0013f33:	80 3d 15 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e815,0x0
c0013f3a:	74 05                	je     c0013f41 <Clock::timeInSecondsLocal()+0x3d>
c0013f3c:	b9 08 07 00 00       	mov    ecx,0x708
c0013f41:	31 db                	xor    ebx,ebx
c0013f43:	01 c8                	add    eax,ecx
c0013f45:	11 da                	adc    edx,ebx
c0013f47:	83 c4 08             	add    esp,0x8
c0013f4a:	5b                   	pop    ebx
c0013f4b:	c3                   	ret    

c0013f4c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013f4c:	57                   	push   edi
c0013f4d:	56                   	push   esi
c0013f4e:	53                   	push   ebx
c0013f4f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013f53:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f57:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013f59:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f5d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013f60:	0f b6 05 14 e8 02 c0 	movzx  eax,BYTE PTR ds:0xc002e814
c0013f67:	03 05 18 e8 02 c0    	add    eax,DWORD PTR ds:0xc002e818
c0013f6d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013f73:	99                   	cdq    
c0013f74:	29 c6                	sub    esi,eax
c0013f76:	19 d7                	sbb    edi,edx
c0013f78:	89 f0                	mov    eax,esi
c0013f7a:	89 fa                	mov    edx,edi
c0013f7c:	31 f6                	xor    esi,esi
c0013f7e:	80 3d 15 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e815,0x0
c0013f85:	74 05                	je     c0013f8c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013f87:	be 08 07 00 00       	mov    esi,0x708
c0013f8c:	31 ff                	xor    edi,edi
c0013f8e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013f92:	29 f0                	sub    eax,esi
c0013f94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f98:	19 fa                	sbb    edx,edi
c0013f9a:	89 d8                	mov    eax,ebx
c0013f9c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013fa0:	5b                   	pop    ebx
c0013fa1:	5e                   	pop    esi
c0013fa2:	5f                   	pop    edi
c0013fa3:	ff e0                	jmp    eax

c0013fa5 <datetimeToSeconds(datetime_t)>:
c0013fa5:	55                   	push   ebp
c0013fa6:	57                   	push   edi
c0013fa7:	56                   	push   esi
c0013fa8:	53                   	push   ebx
c0013fa9:	83 ec 14             	sub    esp,0x14
c0013fac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013fb0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013fb4:	89 d3                	mov    ebx,edx
c0013fb6:	0f b6 c6             	movzx  eax,dh
c0013fb9:	c1 eb 10             	shr    ebx,0x10
c0013fbc:	48                   	dec    eax
c0013fbd:	66 81 eb 6c 07       	sub    bx,0x76c
c0013fc2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013fc6:	0f b6 f5             	movzx  esi,ch
c0013fc9:	89 cf                	mov    edi,ecx
c0013fcb:	6b f6 3c             	imul   esi,esi,0x3c
c0013fce:	c1 ef 10             	shr    edi,0x10
c0013fd1:	0f b6 c9             	movzx  ecx,cl
c0013fd4:	89 f8                	mov    eax,edi
c0013fd6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013fdc:	0f b6 f8             	movzx  edi,al
c0013fdf:	0f b6 d2             	movzx  edx,dl
c0013fe2:	01 fe                	add    esi,edi
c0013fe4:	01 f1                	add    ecx,esi
c0013fe6:	0f b7 f3             	movzx  esi,bx
c0013fe9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013fed:	c1 f9 1f             	sar    ecx,0x1f
c0013ff0:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013ff5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ff9:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013ffe:	8b 0c 8d 20 ae 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd51e0]
c0014005:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0014009:	76 29                	jbe    c0014034 <datetimeToSeconds(datetime_t)+0x8f>
c001400b:	f6 c3 03             	test   bl,0x3
c001400e:	75 24                	jne    c0014034 <datetimeToSeconds(datetime_t)+0x8f>
c0014010:	31 d2                	xor    edx,edx
c0014012:	bf 64 00 00 00       	mov    edi,0x64
c0014017:	89 d8                	mov    eax,ebx
c0014019:	66 f7 f7             	div    di
c001401c:	66 85 d2             	test   dx,dx
c001401f:	75 12                	jne    c0014033 <datetimeToSeconds(datetime_t)+0x8e>
c0014021:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0014027:	bf 90 01 00 00       	mov    edi,0x190
c001402c:	99                   	cdq    
c001402d:	f7 ff                	idiv   edi
c001402f:	85 d2                	test   edx,edx
c0014031:	75 01                	jne    c0014034 <datetimeToSeconds(datetime_t)+0x8f>
c0014033:	41                   	inc    ecx
c0014034:	66 83 fb 46          	cmp    bx,0x46
c0014038:	76 45                	jbe    c001407f <datetimeToSeconds(datetime_t)+0xda>
c001403a:	bb 46 00 00 00       	mov    ebx,0x46
c001403f:	bf 64 00 00 00       	mov    edi,0x64
c0014044:	bd 90 01 00 00       	mov    ebp,0x190
c0014049:	b8 6d 01 00 00       	mov    eax,0x16d
c001404e:	f6 c3 03             	test   bl,0x3
c0014051:	75 23                	jne    c0014076 <datetimeToSeconds(datetime_t)+0xd1>
c0014053:	89 d8                	mov    eax,ebx
c0014055:	99                   	cdq    
c0014056:	f7 ff                	idiv   edi
c0014058:	b8 6e 01 00 00       	mov    eax,0x16e
c001405d:	85 d2                	test   edx,edx
c001405f:	75 15                	jne    c0014076 <datetimeToSeconds(datetime_t)+0xd1>
c0014061:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0014067:	99                   	cdq    
c0014068:	f7 fd                	idiv   ebp
c001406a:	83 fa 01             	cmp    edx,0x1
c001406d:	19 c0                	sbb    eax,eax
c001406f:	f7 d0                	not    eax
c0014071:	05 6e 01 00 00       	add    eax,0x16e
c0014076:	01 c1                	add    ecx,eax
c0014078:	43                   	inc    ebx
c0014079:	39 f3                	cmp    ebx,esi
c001407b:	7c cc                	jl     c0014049 <datetimeToSeconds(datetime_t)+0xa4>
c001407d:	eb 35                	jmp    c00140b4 <datetimeToSeconds(datetime_t)+0x10f>
c001407f:	74 33                	je     c00140b4 <datetimeToSeconds(datetime_t)+0x10f>
c0014081:	b8 45 00 00 00       	mov    eax,0x45
c0014086:	89 c2                	mov    edx,eax
c0014088:	83 e2 03             	and    edx,0x3
c001408b:	39 f0                	cmp    eax,esi
c001408d:	7e 0f                	jle    c001409e <datetimeToSeconds(datetime_t)+0xf9>
c001408f:	83 fa 01             	cmp    edx,0x1
c0014092:	19 d2                	sbb    edx,edx
c0014094:	48                   	dec    eax
c0014095:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001409c:	eb e8                	jmp    c0014086 <datetimeToSeconds(datetime_t)+0xe1>
c001409e:	b8 6d 01 00 00       	mov    eax,0x16d
c00140a3:	85 d2                	test   edx,edx
c00140a5:	75 0b                	jne    c00140b2 <datetimeToSeconds(datetime_t)+0x10d>
c00140a7:	66 83 fb 01          	cmp    bx,0x1
c00140ab:	19 c0                	sbb    eax,eax
c00140ad:	05 6e 01 00 00       	add    eax,0x16e
c00140b2:	29 c1                	sub    ecx,eax
c00140b4:	b8 80 51 01 00       	mov    eax,0x15180
c00140b9:	f7 e9                	imul   ecx
c00140bb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00140bf:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00140c3:	83 c4 14             	add    esp,0x14
c00140c6:	5b                   	pop    ebx
c00140c7:	5e                   	pop    esi
c00140c8:	5f                   	pop    edi
c00140c9:	5d                   	pop    ebp
c00140ca:	c3                   	ret    
c00140cb:	90                   	nop

c00140cc <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00140cc:	57                   	push   edi
c00140cd:	56                   	push   esi
c00140ce:	53                   	push   ebx
c00140cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140d3:	8b 06                	mov    eax,DWORD PTR [esi]
c00140d5:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00140d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140e0:	e8 c0 fe ff ff       	call   c0013fa5 <datetimeToSeconds(datetime_t)>
c00140e5:	59                   	pop    ecx
c00140e6:	0f b6 0d 14 e8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e814
c00140ed:	5b                   	pop    ebx
c00140ee:	03 0d 18 e8 02 c0    	add    ecx,DWORD PTR ds:0xc002e818
c00140f4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00140fa:	89 cb                	mov    ebx,ecx
c00140fc:	c1 fb 1f             	sar    ebx,0x1f
c00140ff:	29 c8                	sub    eax,ecx
c0014101:	19 da                	sbb    edx,ebx
c0014103:	31 c9                	xor    ecx,ecx
c0014105:	80 3d 15 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e815,0x0
c001410c:	74 05                	je     c0014113 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001410e:	b9 08 07 00 00       	mov    ecx,0x708
c0014113:	31 db                	xor    ebx,ebx
c0014115:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014119:	29 c8                	sub    eax,ecx
c001411b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001411f:	19 da                	sbb    edx,ebx
c0014121:	89 f8                	mov    eax,edi
c0014123:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014127:	5b                   	pop    ebx
c0014128:	5e                   	pop    esi
c0014129:	5f                   	pop    edi
c001412a:	ff e0                	jmp    eax

c001412c <secondsToDatetime(unsigned long long)>:
c001412c:	55                   	push   ebp
c001412d:	57                   	push   edi
c001412e:	56                   	push   esi
c001412f:	53                   	push   ebx
c0014130:	83 ec 1c             	sub    esp,0x1c
c0014133:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014137:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001413b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001413f:	6a 00                	push   0x0
c0014141:	68 80 51 01 00       	push   0x15180
c0014146:	55                   	push   ebp
c0014147:	57                   	push   edi
c0014148:	e8 2f 29 01 00       	call   c0026a7c <__udivdi3>
c001414d:	83 c4 10             	add    esp,0x10
c0014150:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014156:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001415a:	6a 00                	push   0x0
c001415c:	68 80 51 01 00       	push   0x15180
c0014161:	55                   	push   ebp
c0014162:	57                   	push   edi
c0014163:	bf 10 0e 00 00       	mov    edi,0xe10
c0014168:	e8 0f 2a 01 00       	call   c0026b7c <__umoddi3>
c001416d:	83 c4 10             	add    esp,0x10
c0014170:	99                   	cdq    
c0014171:	f7 ff                	idiv   edi
c0014173:	bf 3c 00 00 00       	mov    edi,0x3c
c0014178:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001417b:	89 d0                	mov    eax,edx
c001417d:	99                   	cdq    
c001417e:	f7 ff                	idiv   edi
c0014180:	85 db                	test   ebx,ebx
c0014182:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014185:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014188:	79 11                	jns    c001419b <secondsToDatetime(unsigned long long)+0x6f>
c001418a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001418e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014194:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014199:	eb 07                	jmp    c00141a2 <secondsToDatetime(unsigned long long)+0x76>
c001419b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00141a0:	89 d8                	mov    eax,ebx
c00141a2:	bf b4 05 00 00       	mov    edi,0x5b4
c00141a7:	99                   	cdq    
c00141a8:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00141ad:	f7 f9                	idiv   ecx
c00141af:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00141b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00141b8:	31 d2                	xor    edx,edx
c00141ba:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00141c2:	01 c3                	add    ebx,eax
c00141c4:	89 d8                	mov    eax,ebx
c00141c6:	f7 f1                	div    ecx
c00141c8:	31 d2                	xor    edx,edx
c00141ca:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00141cd:	89 d8                	mov    eax,ebx
c00141cf:	f7 f7                	div    edi
c00141d1:	31 d2                	xor    edx,edx
c00141d3:	29 c1                	sub    ecx,eax
c00141d5:	89 d8                	mov    eax,ebx
c00141d7:	f7 f5                	div    ebp
c00141d9:	bd 6d 01 00 00       	mov    ebp,0x16d
c00141de:	29 c1                	sub    ecx,eax
c00141e0:	31 d2                	xor    edx,edx
c00141e2:	89 c8                	mov    eax,ecx
c00141e4:	f7 f5                	div    ebp
c00141e6:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00141eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00141ef:	31 d2                	xor    edx,edx
c00141f1:	89 c8                	mov    eax,ecx
c00141f3:	f7 f5                	div    ebp
c00141f5:	31 d2                	xor    edx,edx
c00141f7:	01 c3                	add    ebx,eax
c00141f9:	89 c8                	mov    eax,ecx
c00141fb:	f7 f7                	div    edi
c00141fd:	bf 99 00 00 00       	mov    edi,0x99
c0014202:	29 c3                	sub    ebx,eax
c0014204:	31 d2                	xor    edx,edx
c0014206:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001420e:	29 c3                	sub    ebx,eax
c0014210:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014213:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014216:	bb 05 00 00 00       	mov    ebx,0x5
c001421b:	83 c1 02             	add    ecx,0x2
c001421e:	89 c8                	mov    eax,ecx
c0014220:	f7 f7                	div    edi
c0014222:	31 d2                	xor    edx,edx
c0014224:	89 c7                	mov    edi,eax
c0014226:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001422c:	83 c0 02             	add    eax,0x2
c001422f:	f7 f3                	div    ebx
c0014231:	89 eb                	mov    ebx,ebp
c0014233:	29 c3                	sub    ebx,eax
c0014235:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001423b:	88 1e                	mov    BYTE PTR [esi],bl
c001423d:	19 c0                	sbb    eax,eax
c001423f:	31 d2                	xor    edx,edx
c0014241:	83 e0 0c             	and    eax,0xc
c0014244:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014248:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014250:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014254:	83 f9 01             	cmp    ecx,0x1
c0014257:	0f 96 c2             	setbe  dl
c001425a:	41                   	inc    ecx
c001425b:	01 d0                	add    eax,edx
c001425d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014260:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014264:	83 c4 1c             	add    esp,0x1c
c0014267:	89 f0                	mov    eax,esi
c0014269:	5b                   	pop    ebx
c001426a:	5e                   	pop    esi
c001426b:	5f                   	pop    edi
c001426c:	5d                   	pop    ebp
c001426d:	c2 04 00             	ret    0x4

c0014270 <Clock::timeInDatetimeLocal()>:
c0014270:	53                   	push   ebx
c0014271:	83 ec 14             	sub    esp,0x14
c0014274:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014278:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001427c:	e8 83 fc ff ff       	call   c0013f04 <Clock::timeInSecondsLocal()>
c0014281:	83 c4 0c             	add    esp,0xc
c0014284:	52                   	push   edx
c0014285:	50                   	push   eax
c0014286:	53                   	push   ebx
c0014287:	e8 a0 fe ff ff       	call   c001412c <secondsToDatetime(unsigned long long)>
c001428c:	89 d8                	mov    eax,ebx
c001428e:	83 c4 14             	add    esp,0x14
c0014291:	5b                   	pop    ebx
c0014292:	c2 04 00             	ret    0x4
c0014295:	90                   	nop

c0014296 <Device::hibernate()>:
c0014296:	c3                   	ret    
c0014297:	90                   	nop

c0014298 <Device::wake()>:
c0014298:	c3                   	ret    
c0014299:	90                   	nop

c001429a <Device::detect()>:
c001429a:	c3                   	ret    
c001429b:	90                   	nop

c001429c <Device::disableLegacy()>:
c001429c:	c3                   	ret    
c001429d:	90                   	nop

c001429e <Device::powerSaving(PowerSavingLevel)>:
c001429e:	c3                   	ret    
c001429f:	90                   	nop

c00142a0 <DriverlessDevice::close(int, int, void*)>:
c00142a0:	31 c0                	xor    eax,eax
c00142a2:	c3                   	ret    
c00142a3:	90                   	nop

c00142a4 <DriverlessDevice::detect()>:
c00142a4:	c3                   	ret    
c00142a5:	90                   	nop

c00142a6 <DriverlessDevice::open(int, int, void*)>:
c00142a6:	83 ec 18             	sub    esp,0x18
c00142a9:	68 50 ae 02 c0       	push   0xc002ae50
c00142ae:	e8 c0 63 00 00       	call   c001a673 <Krnl::panic(char const*)>
c00142b3:	83 c8 ff             	or     eax,0xffffffff
c00142b6:	83 c4 1c             	add    esp,0x1c
c00142b9:	c3                   	ret    

c00142ba <Device::~Device()>:
c00142ba:	ba 78 ae 02 c0       	mov    edx,0xc002ae78
c00142bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142c3:	89 10                	mov    DWORD PTR [eax],edx
c00142c5:	90                   	nop
c00142c6:	c3                   	ret    
c00142c7:	90                   	nop

c00142c8 <Device::~Device()>:
c00142c8:	83 ec 0c             	sub    esp,0xc
c00142cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00142cf:	e8 e6 ff ff ff       	call   c00142ba <Device::~Device()>
c00142d4:	83 c4 04             	add    esp,0x4
c00142d7:	83 ec 08             	sub    esp,0x8
c00142da:	68 58 01 00 00       	push   0x158
c00142df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142e3:	e8 f9 eb ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c00142e8:	83 c4 10             	add    esp,0x10
c00142eb:	83 c4 0c             	add    esp,0xc
c00142ee:	c3                   	ret    
c00142ef:	90                   	nop

c00142f0 <Device::findAndLoadDriver()>:
c00142f0:	c3                   	ret    
c00142f1:	90                   	nop

c00142f2 <Device::preOpenPCI(PCIDeviceInfo)>:
c00142f2:	57                   	push   edi
c00142f3:	b9 09 00 00 00       	mov    ecx,0x9
c00142f8:	56                   	push   esi
c00142f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00142fd:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014301:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001430b:	81 c7 18 01 00 00    	add    edi,0x118
c0014311:	fc                   	cld    
c0014312:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014314:	5e                   	pop    esi
c0014315:	5f                   	pop    edi
c0014316:	c3                   	ret    
c0014317:	90                   	nop

c0014318 <Device::preOpenACPI(void*, char*, char*)>:
c0014318:	56                   	push   esi
c0014319:	53                   	push   ebx
c001431a:	83 ec 08             	sub    esp,0x8
c001431d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014321:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014325:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001432f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014333:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014339:	6a 1e                	push   0x1e
c001433b:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014341:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014345:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001434b:	50                   	push   eax
c001434c:	e8 f3 c3 fe ff       	call   c0000744 <memcpy>
c0014351:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014355:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014359:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014361:	83 c4 14             	add    esp,0x14
c0014364:	5b                   	pop    ebx
c0014365:	5e                   	pop    esi
c0014366:	e9 d9 c3 fe ff       	jmp    c0000744 <memcpy>
c001436b:	90                   	nop

c001436c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001436c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014370:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014375:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001437c:	75 0b                	jne    c0014389 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c001437e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014380:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014384:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014387:	eb 1e                	jmp    c00143a7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014389:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c001438e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014394:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001439a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001439c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143a4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00143a7:	ff e0                	jmp    eax
c00143a9:	90                   	nop

c00143aa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00143aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143ae:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00143b3:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00143ba:	75 0b                	jne    c00143c7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00143bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00143be:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143c2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00143c5:	eb 1e                	jmp    c00143e5 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00143c7:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c00143cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143d2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00143d8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00143da:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143e2:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00143e5:	ff e0                	jmp    eax
c00143e7:	90                   	nop

c00143e8 <Device::addChild(Device*)>:
c00143e8:	53                   	push   ebx
c00143e9:	83 ec 08             	sub    esp,0x8
c00143ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00143f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143f4:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00143fa:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014400:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014402:	85 d2                	test   edx,edx
c0014404:	74 04                	je     c001440a <Device::addChild(Device*)+0x22>
c0014406:	89 d3                	mov    ebx,edx
c0014408:	eb f6                	jmp    c0014400 <Device::addChild(Device*)+0x18>
c001440a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001440d:	83 ec 0c             	sub    esp,0xc
c0014410:	6a 08                	push   0x8
c0014412:	e8 cb b4 ff ff       	call   c000f8e2 <malloc>
c0014417:	89 03                	mov    DWORD PTR [ebx],eax
c0014419:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001441f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014426:	83 c4 18             	add    esp,0x18
c0014429:	5b                   	pop    ebx
c001442a:	c3                   	ret    
c001442b:	90                   	nop

c001442c <Device::removeAllChildren()>:
c001442c:	56                   	push   esi
c001442d:	53                   	push   ebx
c001442e:	52                   	push   edx
c001442f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014433:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014439:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001443c:	74 17                	je     c0014455 <Device::removeAllChildren()+0x29>
c001443e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014441:	85 c0                	test   eax,eax
c0014443:	74 0c                	je     c0014451 <Device::removeAllChildren()+0x25>
c0014445:	83 ec 0c             	sub    esp,0xc
c0014448:	8b 10                	mov    edx,DWORD PTR [eax]
c001444a:	50                   	push   eax
c001444b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001444e:	83 c4 10             	add    esp,0x10
c0014451:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014453:	eb e4                	jmp    c0014439 <Device::removeAllChildren()+0xd>
c0014455:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001445b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014461:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014467:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001446e:	58                   	pop    eax
c001446f:	5b                   	pop    ebx
c0014470:	5e                   	pop    esi
c0014471:	c3                   	ret    

c0014472 <Device::hibernateAll()>:
c0014472:	53                   	push   ebx
c0014473:	83 ec 14             	sub    esp,0x14
c0014476:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001447a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001447c:	53                   	push   ebx
c001447d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014480:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014486:	83 c4 10             	add    esp,0x10
c0014489:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001448c:	74 0f                	je     c001449d <Device::hibernateAll()+0x2b>
c001448e:	83 ec 0c             	sub    esp,0xc
c0014491:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014494:	e8 d9 ff ff ff       	call   c0014472 <Device::hibernateAll()>
c0014499:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001449b:	eb e9                	jmp    c0014486 <Device::hibernateAll()+0x14>
c001449d:	83 c4 08             	add    esp,0x8
c00144a0:	5b                   	pop    ebx
c00144a1:	c3                   	ret    

c00144a2 <Device::wakeAll()>:
c00144a2:	53                   	push   ebx
c00144a3:	83 ec 14             	sub    esp,0x14
c00144a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144ac:	53                   	push   ebx
c00144ad:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00144b0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144b6:	83 c4 10             	add    esp,0x10
c00144b9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144bc:	74 0f                	je     c00144cd <Device::wakeAll()+0x2b>
c00144be:	83 ec 0c             	sub    esp,0xc
c00144c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144c4:	e8 d9 ff ff ff       	call   c00144a2 <Device::wakeAll()>
c00144c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144cb:	eb e9                	jmp    c00144b6 <Device::wakeAll()+0x14>
c00144cd:	83 c4 08             	add    esp,0x8
c00144d0:	5b                   	pop    ebx
c00144d1:	c3                   	ret    

c00144d2 <Device::detectAll()>:
c00144d2:	53                   	push   ebx
c00144d3:	83 ec 14             	sub    esp,0x14
c00144d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144dc:	53                   	push   ebx
c00144dd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00144e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144e6:	83 c4 10             	add    esp,0x10
c00144e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144ec:	74 0f                	je     c00144fd <Device::detectAll()+0x2b>
c00144ee:	83 ec 0c             	sub    esp,0xc
c00144f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144f4:	e8 d9 ff ff ff       	call   c00144d2 <Device::detectAll()>
c00144f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144fb:	eb e9                	jmp    c00144e6 <Device::detectAll()+0x14>
c00144fd:	83 c4 08             	add    esp,0x8
c0014500:	5b                   	pop    ebx
c0014501:	c3                   	ret    

c0014502 <Device::disableLegacyAll()>:
c0014502:	53                   	push   ebx
c0014503:	83 ec 14             	sub    esp,0x14
c0014506:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001450a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001450c:	53                   	push   ebx
c001450d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014510:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014516:	83 c4 10             	add    esp,0x10
c0014519:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001451c:	74 0f                	je     c001452d <Device::disableLegacyAll()+0x2b>
c001451e:	83 ec 0c             	sub    esp,0xc
c0014521:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014524:	e8 d9 ff ff ff       	call   c0014502 <Device::disableLegacyAll()>
c0014529:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001452b:	eb e9                	jmp    c0014516 <Device::disableLegacyAll()+0x14>
c001452d:	83 c4 08             	add    esp,0x8
c0014530:	5b                   	pop    ebx
c0014531:	c3                   	ret    

c0014532 <Device::loadDriversForAll()>:
c0014532:	53                   	push   ebx
c0014533:	83 ec 08             	sub    esp,0x8
c0014536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001453a:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014540:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014542:	85 db                	test   ebx,ebx
c0014544:	74 12                	je     c0014558 <Device::loadDriversForAll()+0x26>
c0014546:	83 ec 0c             	sub    esp,0xc
c0014549:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001454c:	e8 e1 ff ff ff       	call   c0014532 <Device::loadDriversForAll()>
c0014551:	83 c4 10             	add    esp,0x10
c0014554:	89 d8                	mov    eax,ebx
c0014556:	eb e8                	jmp    c0014540 <Device::loadDriversForAll()+0xe>
c0014558:	83 c4 08             	add    esp,0x8
c001455b:	5b                   	pop    ebx
c001455c:	c3                   	ret    
c001455d:	90                   	nop

c001455e <Device::closeAll()>:
c001455e:	53                   	push   ebx
c001455f:	83 ec 08             	sub    esp,0x8
c0014562:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014566:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014568:	6a 00                	push   0x0
c001456a:	6a 00                	push   0x0
c001456c:	6a 00                	push   0x0
c001456e:	53                   	push   ebx
c001456f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014572:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014578:	83 c4 10             	add    esp,0x10
c001457b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001457e:	74 0f                	je     c001458f <Device::closeAll()+0x31>
c0014580:	83 ec 0c             	sub    esp,0xc
c0014583:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014586:	e8 d3 ff ff ff       	call   c001455e <Device::closeAll()>
c001458b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001458d:	eb e9                	jmp    c0014578 <Device::closeAll()+0x1a>
c001458f:	83 c4 08             	add    esp,0x8
c0014592:	5b                   	pop    ebx
c0014593:	c3                   	ret    

c0014594 <Device::powerSavingAll(PowerSavingLevel)>:
c0014594:	56                   	push   esi
c0014595:	53                   	push   ebx
c0014596:	83 ec 0c             	sub    esp,0xc
c0014599:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001459d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00145a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145a3:	56                   	push   esi
c00145a4:	53                   	push   ebx
c00145a5:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00145a8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145ae:	83 c4 10             	add    esp,0x10
c00145b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145b4:	74 0f                	je     c00145c5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00145b6:	52                   	push   edx
c00145b7:	52                   	push   edx
c00145b8:	56                   	push   esi
c00145b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145bc:	e8 d3 ff ff ff       	call   c0014594 <Device::powerSavingAll(PowerSavingLevel)>
c00145c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145c3:	eb e9                	jmp    c00145ae <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00145c5:	58                   	pop    eax
c00145c6:	5b                   	pop    ebx
c00145c7:	5e                   	pop    esi
c00145c8:	c3                   	ret    
c00145c9:	90                   	nop

c00145ca <Device::setName(char const*)>:
c00145ca:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00145d2:	e9 5d c2 fe ff       	jmp    c0000834 <strcpy>
c00145d7:	90                   	nop

c00145d8 <Device::Device(char const*)>:
c00145d8:	83 ec 1c             	sub    esp,0x1c
c00145db:	ba 78 ae 02 c0       	mov    edx,0xc002ae78
c00145e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145e4:	89 10                	mov    DWORD PTR [eax],edx
c00145e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ea:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00145f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014606:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014610:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014614:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001461e:	83 ec 08             	sub    esp,0x8
c0014621:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014625:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014629:	e8 9c ff ff ff       	call   c00145ca <Device::setName(char const*)>
c001462e:	83 c4 10             	add    esp,0x10
c0014631:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014639:	83 ec 0c             	sub    esp,0xc
c001463c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014640:	e8 9d b2 ff ff       	call   c000f8e2 <malloc>
c0014645:	83 c4 10             	add    esp,0x10
c0014648:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001464e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014655:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014659:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001465f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014663:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014669:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001466f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014673:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014679:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014684:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001468b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001468f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001469a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00146a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146a8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00146b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00146c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c4:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00146ce:	90                   	nop
c00146cf:	83 c4 1c             	add    esp,0x1c
c00146d2:	c3                   	ret    
c00146d3:	90                   	nop

c00146d4 <Device::getName()>:
c00146d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146d8:	05 d0 00 00 00       	add    eax,0xd0
c00146dd:	c3                   	ret    

c00146de <DriverlessDevice::DriverlessDevice(char const*)>:
c00146de:	83 ec 0c             	sub    esp,0xc
c00146e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e5:	83 ec 08             	sub    esp,0x8
c00146e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146ec:	50                   	push   eax
c00146ed:	e8 e6 fe ff ff       	call   c00145d8 <Device::Device(char const*)>
c00146f2:	83 c4 10             	add    esp,0x10
c00146f5:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c00146fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146fe:	89 10                	mov    DWORD PTR [eax],edx
c0014700:	90                   	nop
c0014701:	83 c4 0c             	add    esp,0xc
c0014704:	c3                   	ret    
c0014705:	90                   	nop

c0014706 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014706:	57                   	push   edi
c0014707:	56                   	push   esi
c0014708:	53                   	push   ebx
c0014709:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001470d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014711:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014715:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001471b:	75 0c                	jne    c0014729 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001471d:	52                   	push   edx
c001471e:	52                   	push   edx
c001471f:	53                   	push   ebx
c0014720:	56                   	push   esi
c0014721:	e8 94 42 01 00       	call   c00289ba <LinkedList<Device>::addElement(Device*)>
c0014726:	83 c4 10             	add    esp,0x10
c0014729:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001472f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014732:	74 12                	je     c0014746 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014734:	50                   	push   eax
c0014735:	57                   	push   edi
c0014736:	56                   	push   esi
c0014737:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001473a:	e8 c7 ff ff ff       	call   c0014706 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001473f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014741:	83 c4 10             	add    esp,0x10
c0014744:	eb e9                	jmp    c001472f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014746:	5b                   	pop    ebx
c0014747:	5e                   	pop    esi
c0014748:	5f                   	pop    edi
c0014749:	c3                   	ret    

c001474a <getDevicesOfType(DeviceType)>:
c001474a:	53                   	push   ebx
c001474b:	83 ec 14             	sub    esp,0x14
c001474e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014752:	53                   	push   ebx
c0014753:	e8 3e 43 01 00       	call   c0028a96 <LinkedList<Device>::LinkedList()>
c0014758:	83 c4 0c             	add    esp,0xc
c001475b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001475f:	53                   	push   ebx
c0014760:	ff 35 88 e6 02 c0    	push   DWORD PTR ds:0xc002e688
c0014766:	e8 9b ff ff ff       	call   c0014706 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001476b:	89 d8                	mov    eax,ebx
c001476d:	83 c4 18             	add    esp,0x18
c0014770:	5b                   	pop    ebx
c0014771:	c2 04 00             	ret    0x4

c0014774 <HardDiskController::HardDiskController(char const*)>:
c0014774:	83 ec 0c             	sub    esp,0xc
c0014777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477b:	83 ec 08             	sub    esp,0x8
c001477e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014782:	50                   	push   eax
c0014783:	e8 50 fe ff ff       	call   c00145d8 <Device::Device(char const*)>
c0014788:	83 c4 10             	add    esp,0x10
c001478b:	ba d0 ae 02 c0       	mov    edx,0xc002aed0
c0014790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014794:	89 10                	mov    DWORD PTR [eax],edx
c0014796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001479a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00147a4:	90                   	nop
c00147a5:	83 c4 0c             	add    esp,0xc
c00147a8:	c3                   	ret    
c00147a9:	90                   	nop

c00147aa <HardDiskController::~HardDiskController()>:
c00147aa:	83 ec 0c             	sub    esp,0xc
c00147ad:	ba d0 ae 02 c0       	mov    edx,0xc002aed0
c00147b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b6:	89 10                	mov    DWORD PTR [eax],edx
c00147b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147bc:	83 ec 0c             	sub    esp,0xc
c00147bf:	50                   	push   eax
c00147c0:	e8 f5 fa ff ff       	call   c00142ba <Device::~Device()>
c00147c5:	83 c4 10             	add    esp,0x10
c00147c8:	90                   	nop
c00147c9:	83 c4 0c             	add    esp,0xc
c00147cc:	c3                   	ret    
c00147cd:	90                   	nop

c00147ce <HardDiskController::~HardDiskController()>:
c00147ce:	83 ec 0c             	sub    esp,0xc
c00147d1:	83 ec 0c             	sub    esp,0xc
c00147d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147d8:	e8 cd ff ff ff       	call   c00147aa <HardDiskController::~HardDiskController()>
c00147dd:	83 c4 10             	add    esp,0x10
c00147e0:	83 ec 08             	sub    esp,0x8
c00147e3:	68 58 01 00 00       	push   0x158
c00147e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147ec:	e8 f0 e6 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c00147f1:	83 c4 10             	add    esp,0x10
c00147f4:	83 c4 0c             	add    esp,0xc
c00147f7:	c3                   	ret    

c00147f8 <PhysicalDisk::eject()>:
c00147f8:	83 ec 18             	sub    esp,0x18
c00147fb:	68 f4 ae 02 c0       	push   0xc002aef4
c0014800:	e8 bc e7 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0014805:	83 c8 ff             	or     eax,0xffffffff
c0014808:	83 c4 1c             	add    esp,0x1c
c001480b:	c3                   	ret    

c001480c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001480c:	83 ec 0c             	sub    esp,0xc
c001480f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014813:	83 ec 08             	sub    esp,0x8
c0014816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001481a:	50                   	push   eax
c001481b:	e8 b8 fd ff ff       	call   c00145d8 <Device::Device(char const*)>
c0014820:	83 c4 10             	add    esp,0x10
c0014823:	ba 24 af 02 c0       	mov    edx,0xc002af24
c0014828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001482c:	89 10                	mov    DWORD PTR [eax],edx
c001482e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014832:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001483d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014848:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014856:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001485a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014864:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001486e:	90                   	nop
c001486f:	83 c4 0c             	add    esp,0xc
c0014872:	c3                   	ret    
c0014873:	90                   	nop

c0014874 <PhysicalDisk::startCache()>:
c0014874:	56                   	push   esi
c0014875:	53                   	push   ebx
c0014876:	83 ec 10             	sub    esp,0x10
c0014879:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001487d:	6a 44                	push   0x44
c001487f:	e8 5e b0 ff ff       	call   c000f8e2 <malloc>
c0014884:	89 c6                	mov    esi,eax
c0014886:	58                   	pop    eax
c0014887:	5a                   	pop    edx
c0014888:	53                   	push   ebx
c0014889:	56                   	push   esi
c001488a:	e8 39 27 00 00       	call   c0016fc8 <VCache::VCache(PhysicalDisk*)>
c001488f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014895:	83 c4 14             	add    esp,0x14
c0014898:	5b                   	pop    ebx
c0014899:	5e                   	pop    esi
c001489a:	c3                   	ret    
c001489b:	90                   	nop

c001489c <PhysicalDisk::~PhysicalDisk()>:
c001489c:	83 ec 0c             	sub    esp,0xc
c001489f:	ba 24 af 02 c0       	mov    edx,0xc002af24
c00148a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a8:	89 10                	mov    DWORD PTR [eax],edx
c00148aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ae:	83 ec 0c             	sub    esp,0xc
c00148b1:	50                   	push   eax
c00148b2:	e8 03 fa ff ff       	call   c00142ba <Device::~Device()>
c00148b7:	83 c4 10             	add    esp,0x10
c00148ba:	90                   	nop
c00148bb:	83 c4 0c             	add    esp,0xc
c00148be:	c3                   	ret    
c00148bf:	90                   	nop

c00148c0 <PhysicalDisk::~PhysicalDisk()>:
c00148c0:	83 ec 0c             	sub    esp,0xc
c00148c3:	83 ec 0c             	sub    esp,0xc
c00148c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148ca:	e8 cd ff ff ff       	call   c001489c <PhysicalDisk::~PhysicalDisk()>
c00148cf:	83 c4 10             	add    esp,0x10
c00148d2:	83 ec 08             	sub    esp,0x8
c00148d5:	68 6c 01 00 00       	push   0x16c
c00148da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148de:	e8 fe e5 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c00148e3:	83 c4 10             	add    esp,0x10
c00148e6:	83 c4 0c             	add    esp,0xc
c00148e9:	c3                   	ret    

c00148ea <FPU::FPU(char const*)>:
c00148ea:	83 ec 0c             	sub    esp,0xc
c00148ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148f1:	83 ec 08             	sub    esp,0x8
c00148f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148f8:	50                   	push   eax
c00148f9:	e8 da fc ff ff       	call   c00145d8 <Device::Device(char const*)>
c00148fe:	83 c4 10             	add    esp,0x10
c0014901:	ba 68 af 02 c0       	mov    edx,0xc002af68
c0014906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001490a:	89 10                	mov    DWORD PTR [eax],edx
c001490c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014910:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001491a:	90                   	nop
c001491b:	83 c4 0c             	add    esp,0xc
c001491e:	c3                   	ret    
c001491f:	90                   	nop

c0014920 <FPU::~FPU()>:
c0014920:	83 ec 0c             	sub    esp,0xc
c0014923:	ba 68 af 02 c0       	mov    edx,0xc002af68
c0014928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001492c:	89 10                	mov    DWORD PTR [eax],edx
c001492e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014932:	83 ec 0c             	sub    esp,0xc
c0014935:	50                   	push   eax
c0014936:	e8 7f f9 ff ff       	call   c00142ba <Device::~Device()>
c001493b:	83 c4 10             	add    esp,0x10
c001493e:	90                   	nop
c001493f:	83 c4 0c             	add    esp,0xc
c0014942:	c3                   	ret    
c0014943:	90                   	nop

c0014944 <FPU::~FPU()>:
c0014944:	83 ec 0c             	sub    esp,0xc
c0014947:	83 ec 0c             	sub    esp,0xc
c001494a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001494e:	e8 cd ff ff ff       	call   c0014920 <FPU::~FPU()>
c0014953:	83 c4 10             	add    esp,0x10
c0014956:	83 ec 08             	sub    esp,0x8
c0014959:	68 58 01 00 00       	push   0x158
c001495e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014962:	e8 7a e5 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0014967:	83 c4 10             	add    esp,0x10
c001496a:	83 c4 0c             	add    esp,0xc
c001496d:	c3                   	ret    

c001496e <setupFPU()>:
c001496e:	53                   	push   ebx
c001496f:	83 ec 08             	sub    esp,0x8
c0014972:	8b 15 88 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e688
c0014978:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001497f:	74 19                	je     c001499a <setupFPU()+0x2c>
c0014981:	83 ec 0c             	sub    esp,0xc
c0014984:	68 58 01 00 00       	push   0x158
c0014989:	e8 54 af ff ff       	call   c000f8e2 <malloc>
c001498e:	89 c3                	mov    ebx,eax
c0014990:	89 04 24             	mov    DWORD PTR [esp],eax
c0014993:	e8 66 0c 01 00       	call   c00255fe <AVX::AVX()>
c0014998:	eb 5b                	jmp    c00149f5 <setupFPU()+0x87>
c001499a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00149a0:	84 c0                	test   al,al
c00149a2:	79 19                	jns    c00149bd <setupFPU()+0x4f>
c00149a4:	83 ec 0c             	sub    esp,0xc
c00149a7:	68 58 01 00 00       	push   0x158
c00149ac:	e8 31 af ff ff       	call   c000f8e2 <malloc>
c00149b1:	89 c3                	mov    ebx,eax
c00149b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00149b6:	e8 69 0d 01 00       	call   c0025724 <SSE::SSE()>
c00149bb:	eb 38                	jmp    c00149f5 <setupFPU()+0x87>
c00149bd:	a8 20                	test   al,0x20
c00149bf:	74 19                	je     c00149da <setupFPU()+0x6c>
c00149c1:	83 ec 0c             	sub    esp,0xc
c00149c4:	68 58 01 00 00       	push   0x158
c00149c9:	e8 14 af ff ff       	call   c000f8e2 <malloc>
c00149ce:	89 c3                	mov    ebx,eax
c00149d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00149d3:	e8 b6 0c 01 00       	call   c002568e <MMX::MMX()>
c00149d8:	eb 1b                	jmp    c00149f5 <setupFPU()+0x87>
c00149da:	a8 10                	test   al,0x10
c00149dc:	74 1c                	je     c00149fa <setupFPU()+0x8c>
c00149de:	83 ec 0c             	sub    esp,0xc
c00149e1:	68 58 01 00 00       	push   0x158
c00149e6:	e8 f7 ae ff ff       	call   c000f8e2 <malloc>
c00149eb:	89 c3                	mov    ebx,eax
c00149ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00149f0:	e8 bd 0d 01 00       	call   c00257b2 <x87::x87()>
c00149f5:	83 c4 10             	add    esp,0x10
c00149f8:	eb 24                	jmp    c0014a1e <setupFPU()+0xb0>
c00149fa:	83 e0 ef             	and    eax,0xffffffef
c00149fd:	83 ec 0c             	sub    esp,0xc
c0014a00:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014a06:	68 54 af 02 c0       	push   0xc002af54
c0014a0b:	e8 b1 e5 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0014a10:	0f 20 c0             	mov    eax,cr0
c0014a13:	83 c8 04             	or     eax,0x4
c0014a16:	0f 22 c0             	mov    cr0,eax
c0014a19:	31 db                	xor    ebx,ebx
c0014a1b:	83 c4 10             	add    esp,0x10
c0014a1e:	89 d8                	mov    eax,ebx
c0014a20:	83 c4 08             	add    esp,0x8
c0014a23:	5b                   	pop    ebx
c0014a24:	c3                   	ret    
c0014a25:	90                   	nop

c0014a26 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014a26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014a2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a2e:	c1 e0 04             	shl    eax,0x4
c0014a31:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014a35:	8d 50 10             	lea    edx,[eax+0x10]
c0014a38:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014a3e:	74 08                	je     c0014a48 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014a40:	83 c0 04             	add    eax,0x4
c0014a43:	39 d0                	cmp    eax,edx
c0014a45:	75 f1                	jne    c0014a38 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014a47:	c3                   	ret    
c0014a48:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a52:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a5c:	eb e2                	jmp    c0014a40 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014a5e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014a5e:	57                   	push   edi
c0014a5f:	31 c0                	xor    eax,eax
c0014a61:	56                   	push   esi
c0014a62:	53                   	push   ebx
c0014a63:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014a67:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a6b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014a6f:	89 da                	mov    edx,ebx
c0014a71:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014a75:	c1 e2 04             	shl    edx,0x4
c0014a78:	01 ca                	add    edx,ecx
c0014a7a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014a82:	74 16                	je     c0014a9a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014a84:	40                   	inc    eax
c0014a85:	83 f8 04             	cmp    eax,0x4
c0014a88:	75 f0                	jne    c0014a7a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014a8a:	c7 44 24 10 98 af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002af98
c0014a92:	5b                   	pop    ebx
c0014a93:	5e                   	pop    esi
c0014a94:	5f                   	pop    edi
c0014a95:	e9 d9 5b 00 00       	jmp    c001a673 <Krnl::panic(char const*)>
c0014a9a:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014a9d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014aa0:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014aa6:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014aac:	5b                   	pop    ebx
c0014aad:	5e                   	pop    esi
c0014aae:	5f                   	pop    edi
c0014aaf:	c3                   	ret    

c0014ab0 <doubleFault(regs*, void*)>:
c0014ab0:	55                   	push   ebp
c0014ab1:	89 e5                	mov    ebp,esp
c0014ab3:	83 ec 08             	sub    esp,0x8
c0014ab6:	83 ec 0c             	sub    esp,0xc
c0014ab9:	68 d3 af 02 c0       	push   0xc002afd3
c0014abe:	e8 b0 5b 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0014ac3:	83 c4 10             	add    esp,0x10
c0014ac6:	90                   	nop
c0014ac7:	c9                   	leave  
c0014ac8:	c3                   	ret    
c0014ac9:	90                   	nop

c0014aca <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014aca:	56                   	push   esi
c0014acb:	53                   	push   ebx
c0014acc:	50                   	push   eax
c0014acd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014ad1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ad5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014ada:	75 35                	jne    c0014b11 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014adc:	8d 43 20             	lea    eax,[ebx+0x20]
c0014adf:	31 d2                	xor    edx,edx
c0014ae1:	89 c1                	mov    ecx,eax
c0014ae3:	c1 e1 04             	shl    ecx,0x4
c0014ae6:	01 f1                	add    ecx,esi
c0014ae8:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014af0:	74 3e                	je     c0014b30 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014af2:	42                   	inc    edx
c0014af3:	83 fa 04             	cmp    edx,0x4
c0014af6:	75 f0                	jne    c0014ae8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014af8:	83 ec 0c             	sub    esp,0xc
c0014afb:	68 18 b0 02 c0       	push   0xc002b018
c0014b00:	e8 6e 5b 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0014b05:	83 c4 10             	add    esp,0x10
c0014b08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014b0d:	5a                   	pop    edx
c0014b0e:	5b                   	pop    ebx
c0014b0f:	5e                   	pop    esi
c0014b10:	c3                   	ret    
c0014b11:	83 ec 0c             	sub    esp,0xc
c0014b14:	56                   	push   esi
c0014b15:	e8 ba fb ff ff       	call   c00146d4 <Device::getName()>
c0014b1a:	83 c4 10             	add    esp,0x10
c0014b1d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b20:	75 ba                	jne    c0014adc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b22:	83 fb 0f             	cmp    ebx,0xf
c0014b25:	7f 29                	jg     c0014b50 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014b27:	0f b6 9b e0 d8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2720]
c0014b2e:	eb ac                	jmp    c0014adc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b30:	8d 04 82             	lea    eax,[edx+eax*4]
c0014b33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b37:	8d 04 86             	lea    eax,[esi+eax*4]
c0014b3a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014b40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b44:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014b4a:	89 d8                	mov    eax,ebx
c0014b4c:	5a                   	pop    edx
c0014b4d:	5b                   	pop    ebx
c0014b4e:	5e                   	pop    esi
c0014b4f:	c3                   	ret    
c0014b50:	83 ec 0c             	sub    esp,0xc
c0014b53:	68 e0 af 02 c0       	push   0xc002afe0
c0014b58:	e8 16 5b 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0014b5d:	83 c4 10             	add    esp,0x10
c0014b60:	e9 77 ff ff ff       	jmp    c0014adc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b65:	90                   	nop

c0014b66 <InterruptController::clearAllHandlers(int, bool)>:
c0014b66:	56                   	push   esi
c0014b67:	53                   	push   ebx
c0014b68:	52                   	push   edx
c0014b69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b71:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014b76:	75 61                	jne    c0014bd9 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014b78:	8d 46 20             	lea    eax,[esi+0x20]
c0014b7b:	c1 e6 04             	shl    esi,0x4
c0014b7e:	c1 e0 04             	shl    eax,0x4
c0014b81:	01 de                	add    esi,ebx
c0014b83:	01 d8                	add    eax,ebx
c0014b85:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014b8f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014b99:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014ba3:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014bad:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014bb7:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014bc1:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014bcb:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014bd5:	58                   	pop    eax
c0014bd6:	5b                   	pop    ebx
c0014bd7:	5e                   	pop    esi
c0014bd8:	c3                   	ret    
c0014bd9:	83 ec 0c             	sub    esp,0xc
c0014bdc:	53                   	push   ebx
c0014bdd:	e8 f2 fa ff ff       	call   c00146d4 <Device::getName()>
c0014be2:	83 c4 10             	add    esp,0x10
c0014be5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014be8:	75 8e                	jne    c0014b78 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014bea:	83 fe 0f             	cmp    esi,0xf
c0014bed:	7f 09                	jg     c0014bf8 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014bef:	0f b6 b6 e0 d8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2720]
c0014bf6:	eb 80                	jmp    c0014b78 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014bf8:	83 ec 0c             	sub    esp,0xc
c0014bfb:	68 54 b0 02 c0       	push   0xc002b054
c0014c00:	e8 6e 5a 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0014c05:	83 c4 10             	add    esp,0x10
c0014c08:	e9 6b ff ff ff       	jmp    c0014b78 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c0d:	90                   	nop

c0014c0e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014c0e:	56                   	push   esi
c0014c0f:	53                   	push   ebx
c0014c10:	52                   	push   edx
c0014c11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c15:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014c19:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014c1e:	75 3a                	jne    c0014c5a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014c20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c24:	8d 50 20             	lea    edx,[eax+0x20]
c0014c27:	c1 e2 04             	shl    edx,0x4
c0014c2a:	8d 04 16             	lea    eax,[esi+edx*1]
c0014c2d:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014c31:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014c37:	74 0b                	je     c0014c44 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014c39:	83 c0 04             	add    eax,0x4
c0014c3c:	39 d0                	cmp    eax,edx
c0014c3e:	75 f1                	jne    c0014c31 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014c40:	58                   	pop    eax
c0014c41:	5b                   	pop    ebx
c0014c42:	5e                   	pop    esi
c0014c43:	c3                   	ret    
c0014c44:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014c4e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014c58:	eb df                	jmp    c0014c39 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014c5a:	83 ec 0c             	sub    esp,0xc
c0014c5d:	56                   	push   esi
c0014c5e:	e8 71 fa ff ff       	call   c00146d4 <Device::getName()>
c0014c63:	83 c4 10             	add    esp,0x10
c0014c66:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c69:	75 b5                	jne    c0014c20 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c6b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014c70:	7f 11                	jg     c0014c83 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014c72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c76:	0f b6 80 e0 d8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2720]
c0014c7d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c81:	eb 9d                	jmp    c0014c20 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c83:	83 ec 0c             	sub    esp,0xc
c0014c86:	68 54 b0 02 c0       	push   0xc002b054
c0014c8b:	e8 e3 59 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0014c90:	83 c4 10             	add    esp,0x10
c0014c93:	eb 8b                	jmp    c0014c20 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014c95 <nmiHandler(regs*, void*)>:
c0014c95:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0014c9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c9e:	e9 8b a3 ff ff       	jmp    c000f02e <Computer::handleNMI()>

c0014ca3 <int_handler>:
c0014ca3:	55                   	push   ebp
c0014ca4:	57                   	push   edi
c0014ca5:	56                   	push   esi
c0014ca6:	53                   	push   ebx
c0014ca7:	83 ec 0c             	sub    esp,0xc
c0014caa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014cae:	80 3d e4 11 03 c0 00 	cmp    BYTE PTR ds:0xc00311e4,0x0
c0014cb5:	74 0b                	je     c0014cc2 <int_handler+0x1f>
c0014cb7:	fa                   	cli    
c0014cb8:	f4                   	hlt    
c0014cb9:	80 3d e4 11 03 c0 00 	cmp    BYTE PTR ds:0xc00311e4,0x0
c0014cc0:	75 f5                	jne    c0014cb7 <int_handler+0x14>
c0014cc2:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0014cc7:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014cca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014cd0:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014cd6:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014cd9:	83 f8 17             	cmp    eax,0x17
c0014cdc:	77 13                	ja     c0014cf1 <int_handler+0x4e>
c0014cde:	83 ec 08             	sub    esp,0x8
c0014ce1:	8b 17                	mov    edx,DWORD PTR [edi]
c0014ce3:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014ce6:	0f b6 c0             	movzx  eax,al
c0014ce9:	50                   	push   eax
c0014cea:	57                   	push   edi
c0014ceb:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014cee:	83 c4 10             	add    esp,0x10
c0014cf1:	83 c3 15             	add    ebx,0x15
c0014cf4:	c1 e3 04             	shl    ebx,0x4
c0014cf7:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014cfb:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014d02:	31 db                	xor    ebx,ebx
c0014d04:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014d08:	85 c0                	test   eax,eax
c0014d0a:	74 13                	je     c0014d1f <int_handler+0x7c>
c0014d0c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014d0f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014d13:	74 1c                	je     c0014d31 <int_handler+0x8e>
c0014d15:	83 ec 08             	sub    esp,0x8
c0014d18:	52                   	push   edx
c0014d19:	56                   	push   esi
c0014d1a:	ff d0                	call   eax
c0014d1c:	83 c4 10             	add    esp,0x10
c0014d1f:	43                   	inc    ebx
c0014d20:	83 fb 04             	cmp    ebx,0x4
c0014d23:	75 df                	jne    c0014d04 <int_handler+0x61>
c0014d25:	83 c4 0c             	add    esp,0xc
c0014d28:	31 c0                	xor    eax,eax
c0014d2a:	5b                   	pop    ebx
c0014d2b:	31 d2                	xor    edx,edx
c0014d2d:	5e                   	pop    esi
c0014d2e:	5f                   	pop    edi
c0014d2f:	5d                   	pop    ebp
c0014d30:	c3                   	ret    
c0014d31:	83 ec 08             	sub    esp,0x8
c0014d34:	52                   	push   edx
c0014d35:	56                   	push   esi
c0014d36:	ff d0                	call   eax
c0014d38:	83 c4 10             	add    esp,0x10
c0014d3b:	83 c4 0c             	add    esp,0xc
c0014d3e:	5b                   	pop    ebx
c0014d3f:	5e                   	pop    esi
c0014d40:	5f                   	pop    edi
c0014d41:	5d                   	pop    ebp
c0014d42:	c3                   	ret    
c0014d43:	90                   	nop

c0014d44 <InterruptController::InterruptController(char const*)>:
c0014d44:	83 ec 1c             	sub    esp,0x1c
c0014d47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d4b:	83 ec 08             	sub    esp,0x8
c0014d4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d52:	50                   	push   eax
c0014d53:	e8 80 f8 ff ff       	call   c00145d8 <Device::Device(char const*)>
c0014d58:	83 c4 10             	add    esp,0x10
c0014d5b:	ba fc b2 02 c0       	mov    edx,0xc002b2fc
c0014d60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d64:	89 10                	mov    DWORD PTR [eax],edx
c0014d66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d6a:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014d74:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d7c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014d84:	7f 5e                	jg     c0014de4 <InterruptController::InterruptController(char const*)+0xa0>
c0014d86:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d8e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014d93:	7f 49                	jg     c0014dde <InterruptController::InterruptController(char const*)+0x9a>
c0014d95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d9d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014da4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014da8:	01 ca                	add    edx,ecx
c0014daa:	83 c2 54             	add    edx,0x54
c0014dad:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014db5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014db9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014dbd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014dc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014dc8:	01 ca                	add    edx,ecx
c0014dca:	81 c2 54 04 00 00    	add    edx,0x454
c0014dd0:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014dd8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014ddc:	eb b0                	jmp    c0014d8e <InterruptController::InterruptController(char const*)+0x4a>
c0014dde:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014de2:	eb 98                	jmp    c0014d7c <InterruptController::InterruptController(char const*)+0x38>
c0014de4:	90                   	nop
c0014de5:	83 c4 1c             	add    esp,0x1c
c0014de8:	c3                   	ret    
c0014de9:	90                   	nop

c0014dea <InterruptController::~InterruptController()>:
c0014dea:	83 ec 0c             	sub    esp,0xc
c0014ded:	ba fc b2 02 c0       	mov    edx,0xc002b2fc
c0014df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014df6:	89 10                	mov    DWORD PTR [eax],edx
c0014df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dfc:	83 ec 0c             	sub    esp,0xc
c0014dff:	50                   	push   eax
c0014e00:	e8 b5 f4 ff ff       	call   c00142ba <Device::~Device()>
c0014e05:	83 c4 10             	add    esp,0x10
c0014e08:	90                   	nop
c0014e09:	83 c4 0c             	add    esp,0xc
c0014e0c:	c3                   	ret    
c0014e0d:	90                   	nop

c0014e0e <InterruptController::~InterruptController()>:
c0014e0e:	83 ec 0c             	sub    esp,0xc
c0014e11:	83 ec 0c             	sub    esp,0xc
c0014e14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e18:	e8 cd ff ff ff       	call   c0014dea <InterruptController::~InterruptController()>
c0014e1d:	83 c4 10             	add    esp,0x10
c0014e20:	83 ec 08             	sub    esp,0x8
c0014e23:	68 58 21 00 00       	push   0x2158
c0014e28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e2c:	e8 b0 e0 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0014e31:	83 c4 10             	add    esp,0x10
c0014e34:	83 c4 0c             	add    esp,0xc
c0014e37:	c3                   	ret    

c0014e38 <displayDebugInfo(regs*)>:
c0014e38:	55                   	push   ebp
c0014e39:	57                   	push   edi
c0014e3a:	56                   	push   esi
c0014e3b:	53                   	push   ebx
c0014e3c:	83 ec 24             	sub    esp,0x24
c0014e3f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014e43:	0f 20 c2             	mov    edx,cr0
c0014e46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014e4a:	0f 20 d7             	mov    edi,cr2
c0014e4d:	0f 20 de             	mov    esi,cr3
c0014e50:	0f 20 e5             	mov    ebp,cr4
c0014e53:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014e56:	68 8e b0 02 c0       	push   0xc002b08e
c0014e5b:	e8 61 e1 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0014e60:	59                   	pop    ecx
c0014e61:	58                   	pop    eax
c0014e62:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014e65:	68 99 b0 02 c0       	push   0xc002b099
c0014e6a:	e8 52 e1 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0014e6f:	58                   	pop    eax
c0014e70:	5a                   	pop    edx
c0014e71:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e74:	68 a4 b0 02 c0       	push   0xc002b0a4
c0014e79:	e8 43 e1 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0014e7e:	59                   	pop    ecx
c0014e7f:	58                   	pop    eax
c0014e80:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e83:	68 af b0 02 c0       	push   0xc002b0af
c0014e88:	e8 34 e1 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0014e8d:	58                   	pop    eax
c0014e8e:	5a                   	pop    edx
c0014e8f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014e92:	68 ba b0 02 c0       	push   0xc002b0ba
c0014e97:	e8 25 e1 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0014e9c:	59                   	pop    ecx
c0014e9d:	58                   	pop    eax
c0014e9e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014ea1:	68 c5 b0 02 c0       	push   0xc002b0c5
c0014ea6:	e8 16 e1 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0014eab:	58                   	pop    eax
c0014eac:	5a                   	pop    edx
c0014ead:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014eb0:	68 d0 b0 02 c0       	push   0xc002b0d0
c0014eb5:	e8 07 e1 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0014eba:	59                   	pop    ecx
c0014ebb:	58                   	pop    eax
c0014ebc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014ebf:	68 db b0 02 c0       	push   0xc002b0db
c0014ec4:	e8 f8 e0 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0014ec9:	58                   	pop    eax
c0014eca:	5a                   	pop    edx
c0014ecb:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ece:	68 e6 b0 02 c0       	push   0xc002b0e6
c0014ed3:	e8 e9 e0 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0014ed8:	59                   	pop    ecx
c0014ed9:	58                   	pop    eax
c0014eda:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014edd:	68 f5 b0 02 c0       	push   0xc002b0f5
c0014ee2:	e8 da e0 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0014ee7:	58                   	pop    eax
c0014ee8:	5a                   	pop    edx
c0014ee9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014eec:	68 00 b1 02 c0       	push   0xc002b100
c0014ef1:	e8 cb e0 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0014ef6:	59                   	pop    ecx
c0014ef7:	58                   	pop    eax
c0014ef8:	57                   	push   edi
c0014ef9:	68 0b b1 02 c0       	push   0xc002b10b
c0014efe:	e8 be e0 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0014f03:	58                   	pop    eax
c0014f04:	5a                   	pop    edx
c0014f05:	56                   	push   esi
c0014f06:	68 16 b1 02 c0       	push   0xc002b116
c0014f0b:	e8 b1 e0 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0014f10:	59                   	pop    ecx
c0014f11:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0014f16:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f1c:	e8 92 be ff ff       	call   c0010db3 <setActiveTerminal(VgaText*)>
c0014f21:	58                   	pop    eax
c0014f22:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014f25:	5a                   	pop    edx
c0014f26:	c1 e0 05             	shl    eax,0x5
c0014f29:	05 40 d6 02 c0       	add    eax,0xc002d640
c0014f2e:	50                   	push   eax
c0014f2f:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0014f34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f3a:	e8 93 c2 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c0014f3f:	59                   	pop    ecx
c0014f40:	58                   	pop    eax
c0014f41:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0014f46:	68 21 b1 02 c0       	push   0xc002b121
c0014f4b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f51:	e8 7c c2 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c0014f56:	58                   	pop    eax
c0014f57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f5c:	5a                   	pop    edx
c0014f5d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f60:	83 c0 0c             	add    eax,0xc
c0014f63:	50                   	push   eax
c0014f64:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0014f69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6f:	e8 5e c2 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c0014f74:	59                   	pop    ecx
c0014f75:	58                   	pop    eax
c0014f76:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0014f7b:	68 2a b1 02 c0       	push   0xc002b12a
c0014f80:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f86:	e8 47 c2 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c0014f8b:	58                   	pop    eax
c0014f8c:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0014f91:	5a                   	pop    edx
c0014f92:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f95:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f9b:	e8 58 c2 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c0014fa0:	59                   	pop    ecx
c0014fa1:	58                   	pop    eax
c0014fa2:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0014fa7:	68 32 b1 02 c0       	push   0xc002b132
c0014fac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb2:	e8 1b c2 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c0014fb7:	58                   	pop    eax
c0014fb8:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0014fbd:	5a                   	pop    edx
c0014fbe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014fc1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc7:	e8 2c c2 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c0014fcc:	59                   	pop    ecx
c0014fcd:	58                   	pop    eax
c0014fce:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0014fd3:	68 3a b1 02 c0       	push   0xc002b13a
c0014fd8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fde:	e8 ef c1 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c0014fe3:	58                   	pop    eax
c0014fe4:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0014fe9:	5a                   	pop    edx
c0014fea:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014fed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff3:	e8 00 c2 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c0014ff8:	59                   	pop    ecx
c0014ff9:	58                   	pop    eax
c0014ffa:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0014fff:	68 42 b1 02 c0       	push   0xc002b142
c0015004:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500a:	e8 c3 c1 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001500f:	58                   	pop    eax
c0015010:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0015015:	5a                   	pop    edx
c0015016:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0015019:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501f:	e8 d4 c1 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c0015024:	59                   	pop    ecx
c0015025:	58                   	pop    eax
c0015026:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001502b:	68 4a b1 02 c0       	push   0xc002b14a
c0015030:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015036:	e8 97 c1 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001503b:	58                   	pop    eax
c001503c:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0015041:	5a                   	pop    edx
c0015042:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0015045:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001504b:	e8 a8 c1 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c0015050:	59                   	pop    ecx
c0015051:	58                   	pop    eax
c0015052:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0015057:	68 52 b1 02 c0       	push   0xc002b152
c001505c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015062:	e8 6b c1 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c0015067:	58                   	pop    eax
c0015068:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001506d:	5a                   	pop    edx
c001506e:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0015071:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015077:	e8 7c c1 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c001507c:	59                   	pop    ecx
c001507d:	58                   	pop    eax
c001507e:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0015083:	68 5a b1 02 c0       	push   0xc002b15a
c0015088:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001508e:	e8 3f c1 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c0015093:	58                   	pop    eax
c0015094:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0015099:	5a                   	pop    edx
c001509a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001509e:	52                   	push   edx
c001509f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a5:	e8 4e c1 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c00150aa:	59                   	pop    ecx
c00150ab:	58                   	pop    eax
c00150ac:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c00150b1:	68 63 b1 02 c0       	push   0xc002b163
c00150b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150bc:	e8 11 c1 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c00150c1:	58                   	pop    eax
c00150c2:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c00150c7:	5a                   	pop    edx
c00150c8:	57                   	push   edi
c00150c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150cf:	e8 24 c1 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c00150d4:	59                   	pop    ecx
c00150d5:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c00150da:	5f                   	pop    edi
c00150db:	68 6b b1 02 c0       	push   0xc002b16b
c00150e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e6:	e8 e7 c0 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c00150eb:	58                   	pop    eax
c00150ec:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c00150f1:	5a                   	pop    edx
c00150f2:	56                   	push   esi
c00150f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f9:	e8 fa c0 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c00150fe:	59                   	pop    ecx
c00150ff:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0015104:	5e                   	pop    esi
c0015105:	68 73 b1 02 c0       	push   0xc002b173
c001510a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015110:	e8 bd c0 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c0015115:	5f                   	pop    edi
c0015116:	58                   	pop    eax
c0015117:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001511c:	55                   	push   ebp
c001511d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015123:	e8 d0 c0 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c0015128:	58                   	pop    eax
c0015129:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001512e:	5a                   	pop    edx
c001512f:	68 7b b1 02 c0       	push   0xc002b17b
c0015134:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001513a:	e8 93 c0 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001513f:	0f 21 c0             	mov    eax,db0
c0015142:	59                   	pop    ecx
c0015143:	5e                   	pop    esi
c0015144:	50                   	push   eax
c0015145:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001514a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015150:	e8 a3 c0 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c0015155:	5f                   	pop    edi
c0015156:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001515b:	5d                   	pop    ebp
c001515c:	68 84 b1 02 c0       	push   0xc002b184
c0015161:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015167:	e8 66 c0 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001516c:	0f 21 c8             	mov    eax,db1
c001516f:	5a                   	pop    edx
c0015170:	59                   	pop    ecx
c0015171:	50                   	push   eax
c0015172:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0015177:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001517d:	e8 76 c0 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c0015182:	5e                   	pop    esi
c0015183:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0015188:	5f                   	pop    edi
c0015189:	68 8c b1 02 c0       	push   0xc002b18c
c001518e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015194:	e8 39 c0 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c0015199:	0f 21 d0             	mov    eax,db2
c001519c:	5d                   	pop    ebp
c001519d:	5a                   	pop    edx
c001519e:	50                   	push   eax
c001519f:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c00151a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151aa:	e8 49 c0 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c00151af:	59                   	pop    ecx
c00151b0:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c00151b5:	5e                   	pop    esi
c00151b6:	68 94 b1 02 c0       	push   0xc002b194
c00151bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151c1:	e8 0c c0 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c00151c6:	0f 21 d8             	mov    eax,db3
c00151c9:	5f                   	pop    edi
c00151ca:	5d                   	pop    ebp
c00151cb:	50                   	push   eax
c00151cc:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c00151d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151d7:	e8 1c c0 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c00151dc:	58                   	pop    eax
c00151dd:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c00151e2:	5a                   	pop    edx
c00151e3:	68 9c b1 02 c0       	push   0xc002b19c
c00151e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151ee:	e8 df bf ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c00151f3:	0f 21 f0             	mov    eax,db6
c00151f6:	59                   	pop    ecx
c00151f7:	5e                   	pop    esi
c00151f8:	50                   	push   eax
c00151f9:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c00151fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015204:	e8 ef bf ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c0015209:	5f                   	pop    edi
c001520a:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001520f:	5d                   	pop    ebp
c0015210:	68 a4 b1 02 c0       	push   0xc002b1a4
c0015215:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001521b:	e8 b2 bf ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c0015220:	0f 21 f8             	mov    eax,db7
c0015223:	5a                   	pop    edx
c0015224:	59                   	pop    ecx
c0015225:	50                   	push   eax
c0015226:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001522b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015231:	e8 c2 bf ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c0015236:	5e                   	pop    esi
c0015237:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001523a:	e8 60 85 00 00       	call   c001d79f <Thr::getDriverNameFromAddress(unsigned long)>
c001523f:	83 c4 10             	add    esp,0x10
c0015242:	85 c0                	test   eax,eax
c0015244:	74 7d                	je     c00152c3 <displayDebugInfo(regs*)+0x48b>
c0015246:	89 c6                	mov    esi,eax
c0015248:	50                   	push   eax
c0015249:	50                   	push   eax
c001524a:	56                   	push   esi
c001524b:	68 ac b1 02 c0       	push   0xc002b1ac
c0015250:	e8 6c dd ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0015255:	5a                   	pop    edx
c0015256:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001525b:	59                   	pop    ecx
c001525c:	68 ba b1 02 c0       	push   0xc002b1ba
c0015261:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015267:	e8 66 bf ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001526c:	5f                   	pop    edi
c001526d:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0015272:	5d                   	pop    ebp
c0015273:	56                   	push   esi
c0015274:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001527a:	e8 53 bf ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001527f:	58                   	pop    eax
c0015280:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0015285:	5a                   	pop    edx
c0015286:	68 c6 b1 02 c0       	push   0xc002b1c6
c001528b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015291:	e8 3c bf ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c0015296:	59                   	pop    ecx
c0015297:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001529c:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00152a2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00152a5:	e8 2c 85 00 00       	call   c001d7d6 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00152aa:	5b                   	pop    ebx
c00152ab:	5d                   	pop    ebp
c00152ac:	50                   	push   eax
c00152ad:	57                   	push   edi
c00152ae:	e8 45 bf ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c00152b3:	58                   	pop    eax
c00152b4:	5a                   	pop    edx
c00152b5:	56                   	push   esi
c00152b6:	68 d2 b1 02 c0       	push   0xc002b1d2
c00152bb:	e8 01 dd ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00152c0:	83 c4 10             	add    esp,0x10
c00152c3:	fa                   	cli    
c00152c4:	f4                   	hlt    
c00152c5:	eb fe                	jmp    c00152c5 <displayDebugInfo(regs*)+0x48d>

c00152c7 <x87EmulHandler(regs*, void*)>:
c00152c7:	53                   	push   ebx
c00152c8:	83 ec 14             	sub    esp,0x14
c00152cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152cf:	53                   	push   ebx
c00152d0:	e8 57 a8 00 00       	call   c001fb2c <Vm::x87Handler(regs*)>
c00152d5:	83 c4 10             	add    esp,0x10
c00152d8:	84 c0                	test   al,al
c00152da:	74 05                	je     c00152e1 <x87EmulHandler(regs*, void*)+0x1a>
c00152dc:	83 c4 08             	add    esp,0x8
c00152df:	5b                   	pop    ebx
c00152e0:	c3                   	ret    
c00152e1:	83 ec 0c             	sub    esp,0xc
c00152e4:	68 e2 b1 02 c0       	push   0xc002b1e2
c00152e9:	e8 d3 dc ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00152ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152f1:	e8 42 fb ff ff       	call   c0014e38 <displayDebugInfo(regs*)>

c00152f6 <gpFault(regs*, void*)>:
c00152f6:	53                   	push   ebx
c00152f7:	83 ec 14             	sub    esp,0x14
c00152fa:	c7 05 34 e8 02 c0 a9 ee 01 c0 	mov    DWORD PTR ds:0xc002e834,0xc001eea9
c0015304:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015308:	53                   	push   ebx
c0015309:	e8 9b 9b 00 00       	call   c001eea9 <Vm::faultHandler(regs*)>
c001530e:	83 c4 10             	add    esp,0x10
c0015311:	84 c0                	test   al,al
c0015313:	74 05                	je     c001531a <gpFault(regs*, void*)+0x24>
c0015315:	83 c4 08             	add    esp,0x8
c0015318:	5b                   	pop    ebx
c0015319:	c3                   	ret    
c001531a:	83 ec 0c             	sub    esp,0xc
c001531d:	68 f8 b1 02 c0       	push   0xc002b1f8
c0015322:	e8 9a dc ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0015327:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001532a:	e8 09 fb ff ff       	call   c0014e38 <displayDebugInfo(regs*)>

c001532f <pgFault(regs*, void*)>:
c001532f:	53                   	push   ebx
c0015330:	83 ec 14             	sub    esp,0x14
c0015333:	68 13 b2 02 c0       	push   0xc002b213
c0015338:	e8 84 dc ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001533d:	0f 20 d3             	mov    ebx,cr2
c0015340:	58                   	pop    eax
c0015341:	5a                   	pop    edx
c0015342:	53                   	push   ebx
c0015343:	68 20 b2 02 c0       	push   0xc002b220
c0015348:	e8 74 dc ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001534d:	59                   	pop    ecx
c001534e:	58                   	pop    eax
c001534f:	53                   	push   ebx
c0015350:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015355:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015358:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001535e:	e8 11 d8 ff ff       	call   c0012b74 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015363:	83 c4 10             	add    esp,0x10
c0015366:	84 c0                	test   al,al
c0015368:	74 05                	je     c001536f <pgFault(regs*, void*)+0x40>
c001536a:	83 c4 08             	add    esp,0x8
c001536d:	5b                   	pop    ebx
c001536e:	c3                   	ret    
c001536f:	83 ec 0c             	sub    esp,0xc
c0015372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015376:	e8 bd fa ff ff       	call   c0014e38 <displayDebugInfo(regs*)>

c001537b <otherISRHandler(regs*, void*)>:
c001537b:	53                   	push   ebx
c001537c:	83 ec 0c             	sub    esp,0xc
c001537f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015383:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015386:	50                   	push   eax
c0015387:	50                   	push   eax
c0015388:	68 2c b2 02 c0       	push   0xc002b22c
c001538d:	e8 2f dc ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0015392:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015395:	e8 9e fa ff ff       	call   c0014e38 <displayDebugInfo(regs*)>

c001539a <opcodeFault(regs*, void*)>:
c001539a:	55                   	push   ebp
c001539b:	89 e5                	mov    ebp,esp
c001539d:	56                   	push   esi
c001539e:	53                   	push   ebx
c001539f:	83 ec 40             	sub    esp,0x40
c00153a2:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c00153a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153ad:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00153b3:	84 c0                	test   al,al
c00153b5:	74 24                	je     c00153db <opcodeFault(regs*, void*)+0x41>
c00153b7:	83 ec 0c             	sub    esp,0xc
c00153ba:	68 4c b2 02 c0       	push   0xc002b24c
c00153bf:	e8 fd db ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00153c4:	83 c4 10             	add    esp,0x10
c00153c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153cd:	8d 50 19             	lea    edx,[eax+0x19]
c00153d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153d6:	e9 be 05 00 00       	jmp    c0015999 <opcodeFault(regs*, void*)+0x5ff>
c00153db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153e4:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00153e8:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00153ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00153f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f8:	8a 00                	mov    al,BYTE PTR [eax]
c00153fa:	3c f0                	cmp    al,0xf0
c00153fc:	75 17                	jne    c0015415 <opcodeFault(regs*, void*)+0x7b>
c00153fe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015404:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015407:	8d 50 01             	lea    edx,[eax+0x1]
c001540a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015410:	e9 da 00 00 00       	jmp    c00154ef <opcodeFault(regs*, void*)+0x155>
c0015415:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015418:	8a 00                	mov    al,BYTE PTR [eax]
c001541a:	3c f2                	cmp    al,0xf2
c001541c:	74 09                	je     c0015427 <opcodeFault(regs*, void*)+0x8d>
c001541e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015421:	8a 00                	mov    al,BYTE PTR [eax]
c0015423:	3c f3                	cmp    al,0xf3
c0015425:	75 1b                	jne    c0015442 <opcodeFault(regs*, void*)+0xa8>
c0015427:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001542b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001542e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015431:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015434:	8d 50 01             	lea    edx,[eax+0x1]
c0015437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001543d:	e9 ad 00 00 00       	jmp    c00154ef <opcodeFault(regs*, void*)+0x155>
c0015442:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015445:	8a 00                	mov    al,BYTE PTR [eax]
c0015447:	3c 66                	cmp    al,0x66
c0015449:	75 1f                	jne    c001546a <opcodeFault(regs*, void*)+0xd0>
c001544b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001544f:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015453:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015456:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015459:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001545c:	8d 50 01             	lea    edx,[eax+0x1]
c001545f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015462:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015465:	e9 85 00 00 00       	jmp    c00154ef <opcodeFault(regs*, void*)+0x155>
c001546a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546d:	8a 00                	mov    al,BYTE PTR [eax]
c001546f:	3c 67                	cmp    al,0x67
c0015471:	75 18                	jne    c001548b <opcodeFault(regs*, void*)+0xf1>
c0015473:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015477:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001547a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015480:	8d 50 01             	lea    edx,[eax+0x1]
c0015483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015486:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015489:	eb 64                	jmp    c00154ef <opcodeFault(regs*, void*)+0x155>
c001548b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548e:	8a 00                	mov    al,BYTE PTR [eax]
c0015490:	3c 2e                	cmp    al,0x2e
c0015492:	74 09                	je     c001549d <opcodeFault(regs*, void*)+0x103>
c0015494:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015497:	8a 00                	mov    al,BYTE PTR [eax]
c0015499:	3c 3e                	cmp    al,0x3e
c001549b:	75 18                	jne    c00154b5 <opcodeFault(regs*, void*)+0x11b>
c001549d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154a1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154aa:	8d 50 01             	lea    edx,[eax+0x1]
c00154ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154b3:	eb 3a                	jmp    c00154ef <opcodeFault(regs*, void*)+0x155>
c00154b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b8:	8a 00                	mov    al,BYTE PTR [eax]
c00154ba:	3c 36                	cmp    al,0x36
c00154bc:	74 1b                	je     c00154d9 <opcodeFault(regs*, void*)+0x13f>
c00154be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c1:	8a 00                	mov    al,BYTE PTR [eax]
c00154c3:	3c 26                	cmp    al,0x26
c00154c5:	74 12                	je     c00154d9 <opcodeFault(regs*, void*)+0x13f>
c00154c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ca:	8a 00                	mov    al,BYTE PTR [eax]
c00154cc:	3c 64                	cmp    al,0x64
c00154ce:	74 09                	je     c00154d9 <opcodeFault(regs*, void*)+0x13f>
c00154d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d3:	8a 00                	mov    al,BYTE PTR [eax]
c00154d5:	3c 65                	cmp    al,0x65
c00154d7:	75 16                	jne    c00154ef <opcodeFault(regs*, void*)+0x155>
c00154d9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154dd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154e6:	8d 50 01             	lea    edx,[eax+0x1]
c00154e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f2:	8a 00                	mov    al,BYTE PTR [eax]
c00154f4:	3c 0f                	cmp    al,0xf
c00154f6:	0f 85 ad 00 00 00    	jne    c00155a9 <opcodeFault(regs*, void*)+0x20f>
c00154fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ff:	40                   	inc    eax
c0015500:	8a 00                	mov    al,BYTE PTR [eax]
c0015502:	3c c2                	cmp    al,0xc2
c0015504:	74 0e                	je     c0015514 <opcodeFault(regs*, void*)+0x17a>
c0015506:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015509:	40                   	inc    eax
c001550a:	8a 00                	mov    al,BYTE PTR [eax]
c001550c:	3c c3                	cmp    al,0xc3
c001550e:	0f 85 95 00 00 00    	jne    c00155a9 <opcodeFault(regs*, void*)+0x20f>
c0015514:	83 ec 0c             	sub    esp,0xc
c0015517:	68 6f b2 02 c0       	push   0xc002b26f
c001551c:	e8 a0 da ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0015521:	83 c4 10             	add    esp,0x10
c0015524:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015527:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001552a:	8d 50 01             	lea    edx,[eax+0x1]
c001552d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015530:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015533:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015536:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015539:	8a 00                	mov    al,BYTE PTR [eax]
c001553b:	8d 50 fe             	lea    edx,[eax-0x2]
c001553e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015541:	88 10                	mov    BYTE PTR [eax],dl
c0015543:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015546:	50                   	push   eax
c0015547:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001554a:	50                   	push   eax
c001554b:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001554e:	50                   	push   eax
c001554f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015552:	e8 e3 47 00 00       	call   c0019d3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015557:	83 c4 10             	add    esp,0x10
c001555a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015560:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015563:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015566:	01 d0                	add    eax,edx
c0015568:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001556b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015571:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015574:	48                   	dec    eax
c0015575:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001557e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015584:	83 ec 04             	sub    esp,0x4
c0015587:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001558a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001558d:	50                   	push   eax
c001558e:	e8 21 ac fe ff       	call   c00001b4 <voodooXADD>
c0015593:	83 c4 10             	add    esp,0x10
c0015596:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015599:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001559c:	01 c2                	add    edx,eax
c001559e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155a4:	e9 f0 03 00 00       	jmp    c0015999 <opcodeFault(regs*, void*)+0x5ff>
c00155a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ac:	8a 00                	mov    al,BYTE PTR [eax]
c00155ae:	3c 0f                	cmp    al,0xf
c00155b0:	0f 85 8b 01 00 00    	jne    c0015741 <opcodeFault(regs*, void*)+0x3a7>
c00155b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155b9:	40                   	inc    eax
c00155ba:	8a 00                	mov    al,BYTE PTR [eax]
c00155bc:	3c c7                	cmp    al,0xc7
c00155be:	0f 86 7d 01 00 00    	jbe    c0015741 <opcodeFault(regs*, void*)+0x3a7>
c00155c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c7:	40                   	inc    eax
c00155c8:	8a 00                	mov    al,BYTE PTR [eax]
c00155ca:	3c cf                	cmp    al,0xcf
c00155cc:	0f 87 6f 01 00 00    	ja     c0015741 <opcodeFault(regs*, void*)+0x3a7>
c00155d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d5:	40                   	inc    eax
c00155d6:	8a 00                	mov    al,BYTE PTR [eax]
c00155d8:	83 c0 38             	add    eax,0x38
c00155db:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00155de:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155e2:	75 0b                	jne    c00155ef <opcodeFault(regs*, void*)+0x255>
c00155e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e7:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00155ea:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ed:	eb 75                	jmp    c0015664 <opcodeFault(regs*, void*)+0x2ca>
c00155ef:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155f3:	75 0b                	jne    c0015600 <opcodeFault(regs*, void*)+0x266>
c00155f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00155fb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155fe:	eb 64                	jmp    c0015664 <opcodeFault(regs*, void*)+0x2ca>
c0015600:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015604:	75 0b                	jne    c0015611 <opcodeFault(regs*, void*)+0x277>
c0015606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015609:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001560c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001560f:	eb 53                	jmp    c0015664 <opcodeFault(regs*, void*)+0x2ca>
c0015611:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015615:	75 0b                	jne    c0015622 <opcodeFault(regs*, void*)+0x288>
c0015617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001561d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015620:	eb 42                	jmp    c0015664 <opcodeFault(regs*, void*)+0x2ca>
c0015622:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015626:	75 0b                	jne    c0015633 <opcodeFault(regs*, void*)+0x299>
c0015628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001562e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015631:	eb 31                	jmp    c0015664 <opcodeFault(regs*, void*)+0x2ca>
c0015633:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015637:	75 0b                	jne    c0015644 <opcodeFault(regs*, void*)+0x2aa>
c0015639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001563f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015642:	eb 20                	jmp    c0015664 <opcodeFault(regs*, void*)+0x2ca>
c0015644:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015648:	75 0b                	jne    c0015655 <opcodeFault(regs*, void*)+0x2bb>
c001564a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015650:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015653:	eb 0f                	jmp    c0015664 <opcodeFault(regs*, void*)+0x2ca>
c0015655:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015659:	75 09                	jne    c0015664 <opcodeFault(regs*, void*)+0x2ca>
c001565b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015661:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015664:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015668:	74 10                	je     c001567a <opcodeFault(regs*, void*)+0x2e0>
c001566a:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015671:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015678:	eb 2d                	jmp    c00156a7 <opcodeFault(regs*, void*)+0x30d>
c001567a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001567d:	c1 e0 18             	shl    eax,0x18
c0015680:	89 c2                	mov    edx,eax
c0015682:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015685:	c1 e0 08             	shl    eax,0x8
c0015688:	25 00 00 ff 00       	and    eax,0xff0000
c001568d:	09 c2                	or     edx,eax
c001568f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015692:	c1 e8 08             	shr    eax,0x8
c0015695:	25 00 ff 00 00       	and    eax,0xff00
c001569a:	09 c2                	or     edx,eax
c001569c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001569f:	c1 e8 18             	shr    eax,0x18
c00156a2:	09 d0                	or     eax,edx
c00156a4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156a7:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00156ab:	75 0b                	jne    c00156b8 <opcodeFault(regs*, void*)+0x31e>
c00156ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156b3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00156b6:	eb 75                	jmp    c001572d <opcodeFault(regs*, void*)+0x393>
c00156b8:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00156bc:	75 0b                	jne    c00156c9 <opcodeFault(regs*, void*)+0x32f>
c00156be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156c4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00156c7:	eb 64                	jmp    c001572d <opcodeFault(regs*, void*)+0x393>
c00156c9:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00156cd:	75 0b                	jne    c00156da <opcodeFault(regs*, void*)+0x340>
c00156cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156d5:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00156d8:	eb 53                	jmp    c001572d <opcodeFault(regs*, void*)+0x393>
c00156da:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00156de:	75 0b                	jne    c00156eb <opcodeFault(regs*, void*)+0x351>
c00156e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156e6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00156e9:	eb 42                	jmp    c001572d <opcodeFault(regs*, void*)+0x393>
c00156eb:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00156ef:	75 0b                	jne    c00156fc <opcodeFault(regs*, void*)+0x362>
c00156f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156f7:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00156fa:	eb 31                	jmp    c001572d <opcodeFault(regs*, void*)+0x393>
c00156fc:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015700:	75 0b                	jne    c001570d <opcodeFault(regs*, void*)+0x373>
c0015702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015705:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015708:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001570b:	eb 20                	jmp    c001572d <opcodeFault(regs*, void*)+0x393>
c001570d:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015711:	75 0b                	jne    c001571e <opcodeFault(regs*, void*)+0x384>
c0015713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015716:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015719:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001571c:	eb 0f                	jmp    c001572d <opcodeFault(regs*, void*)+0x393>
c001571e:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015722:	75 09                	jne    c001572d <opcodeFault(regs*, void*)+0x393>
c0015724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015727:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001572a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001572d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015730:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015733:	8d 50 02             	lea    edx,[eax+0x2]
c0015736:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015739:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001573c:	e9 58 02 00 00       	jmp    c0015999 <opcodeFault(regs*, void*)+0x5ff>
c0015741:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015744:	8a 00                	mov    al,BYTE PTR [eax]
c0015746:	3c 0f                	cmp    al,0xf
c0015748:	0f 85 76 01 00 00    	jne    c00158c4 <opcodeFault(regs*, void*)+0x52a>
c001574e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015751:	40                   	inc    eax
c0015752:	8a 00                	mov    al,BYTE PTR [eax]
c0015754:	3c c7                	cmp    al,0xc7
c0015756:	0f 85 68 01 00 00    	jne    c00158c4 <opcodeFault(regs*, void*)+0x52a>
c001575c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001575f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015762:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015765:	8d 50 01             	lea    edx,[eax+0x1]
c0015768:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001576e:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015771:	50                   	push   eax
c0015772:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015775:	50                   	push   eax
c0015776:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015779:	50                   	push   eax
c001577a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001577d:	e8 b8 45 00 00       	call   c0019d3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015782:	83 c4 10             	add    esp,0x10
c0015785:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015788:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001578b:	83 f0 01             	xor    eax,0x1
c001578e:	84 c0                	test   al,al
c0015790:	0f 84 2e 01 00 00    	je     c00158c4 <opcodeFault(regs*, void*)+0x52a>
c0015796:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015799:	3c 01                	cmp    al,0x1
c001579b:	0f 85 23 01 00 00    	jne    c00158c4 <opcodeFault(regs*, void*)+0x52a>
c00157a1:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00157a4:	83 f0 01             	xor    eax,0x1
c00157a7:	84 c0                	test   al,al
c00157a9:	0f 84 15 01 00 00    	je     c00158c4 <opcodeFault(regs*, void*)+0x52a>
c00157af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00157b5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157b8:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00157bf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157c2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157c5:	89 c2                	mov    edx,eax
c00157c7:	b8 00 00 00 00       	mov    eax,0x0
c00157cc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157cf:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00157d8:	ba 00 00 00 00       	mov    edx,0x0
c00157dd:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00157e0:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00157e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00157e9:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00157ec:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00157f3:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157f6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157f9:	89 c2                	mov    edx,eax
c00157fb:	b8 00 00 00 00       	mov    eax,0x0
c0015800:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015803:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015809:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001580c:	ba 00 00 00 00       	mov    edx,0x0
c0015811:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015814:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015817:	e8 7c 86 00 00       	call   c001de98 <lockScheduler()>
c001581c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001581f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015822:	8b 00                	mov    eax,DWORD PTR [eax]
c0015824:	89 c1                	mov    ecx,eax
c0015826:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015829:	89 cb                	mov    ebx,ecx
c001582b:	89 d0                	mov    eax,edx
c001582d:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015830:	89 c6                	mov    esi,eax
c0015832:	89 f0                	mov    eax,esi
c0015834:	09 d8                	or     eax,ebx
c0015836:	85 c0                	test   eax,eax
c0015838:	75 21                	jne    c001585b <opcodeFault(regs*, void*)+0x4c1>
c001583a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001583d:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015840:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015843:	89 01                	mov    DWORD PTR [ecx],eax
c0015845:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001584e:	83 c8 40             	or     eax,0x40
c0015851:	89 c2                	mov    edx,eax
c0015853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015856:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015859:	eb 3e                	jmp    c0015899 <opcodeFault(regs*, void*)+0x4ff>
c001585b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001585e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015861:	8b 00                	mov    eax,DWORD PTR [eax]
c0015863:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015866:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015869:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001586c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015872:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015875:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015878:	89 d0                	mov    eax,edx
c001587a:	31 d2                	xor    edx,edx
c001587c:	89 c3                	mov    ebx,eax
c001587e:	89 d6                	mov    esi,edx
c0015880:	89 da                	mov    edx,ebx
c0015882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015885:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001588e:	83 e0 bf             	and    eax,0xffffffbf
c0015891:	89 c2                	mov    edx,eax
c0015893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015896:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015899:	e8 fc 85 00 00       	call   c001de9a <unlockScheduler()>
c001589e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158a4:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00158a7:	01 c2                	add    edx,eax
c00158a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00158af:	83 ec 0c             	sub    esp,0xc
c00158b2:	68 7e b2 02 c0       	push   0xc002b27e
c00158b7:	e8 05 d7 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00158bc:	83 c4 10             	add    esp,0x10
c00158bf:	e9 d5 00 00 00       	jmp    c0015999 <opcodeFault(regs*, void*)+0x5ff>
c00158c4:	83 ec 0c             	sub    esp,0xc
c00158c7:	68 91 b2 02 c0       	push   0xc002b291
c00158cc:	e8 f0 d6 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00158d1:	83 c4 10             	add    esp,0x10
c00158d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d7:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158e0:	c1 e0 04             	shl    eax,0x4
c00158e3:	01 d0                	add    eax,edx
c00158e5:	83 c0 03             	add    eax,0x3
c00158e8:	8a 00                	mov    al,BYTE PTR [eax]
c00158ea:	0f b6 d8             	movzx  ebx,al
c00158ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158f9:	c1 e0 04             	shl    eax,0x4
c00158fc:	01 d0                	add    eax,edx
c00158fe:	83 c0 02             	add    eax,0x2
c0015901:	8a 00                	mov    al,BYTE PTR [eax]
c0015903:	0f b6 c8             	movzx  ecx,al
c0015906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015909:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001590c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015912:	c1 e0 04             	shl    eax,0x4
c0015915:	01 d0                	add    eax,edx
c0015917:	40                   	inc    eax
c0015918:	8a 00                	mov    al,BYTE PTR [eax]
c001591a:	0f b6 d0             	movzx  edx,al
c001591d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015920:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015926:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015929:	c1 e0 04             	shl    eax,0x4
c001592c:	01 f0                	add    eax,esi
c001592e:	8a 00                	mov    al,BYTE PTR [eax]
c0015930:	0f b6 c0             	movzx  eax,al
c0015933:	83 ec 0c             	sub    esp,0xc
c0015936:	53                   	push   ebx
c0015937:	51                   	push   ecx
c0015938:	52                   	push   edx
c0015939:	50                   	push   eax
c001593a:	68 a4 b2 02 c0       	push   0xc002b2a4
c001593f:	e8 7d d6 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0015944:	83 c4 20             	add    esp,0x20
c0015947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001594d:	83 c0 03             	add    eax,0x3
c0015950:	8a 00                	mov    al,BYTE PTR [eax]
c0015952:	0f b6 d8             	movzx  ebx,al
c0015955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015958:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001595b:	83 c0 02             	add    eax,0x2
c001595e:	8a 00                	mov    al,BYTE PTR [eax]
c0015960:	0f b6 c8             	movzx  ecx,al
c0015963:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015966:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015969:	40                   	inc    eax
c001596a:	8a 00                	mov    al,BYTE PTR [eax]
c001596c:	0f b6 d0             	movzx  edx,al
c001596f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015972:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015975:	8a 00                	mov    al,BYTE PTR [eax]
c0015977:	0f b6 c0             	movzx  eax,al
c001597a:	83 ec 0c             	sub    esp,0xc
c001597d:	53                   	push   ebx
c001597e:	51                   	push   ecx
c001597f:	52                   	push   edx
c0015980:	50                   	push   eax
c0015981:	68 cc b2 02 c0       	push   0xc002b2cc
c0015986:	e8 36 d6 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001598b:	83 c4 20             	add    esp,0x20
c001598e:	83 ec 0c             	sub    esp,0xc
c0015991:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015994:	e8 9f f4 ff ff       	call   c0014e38 <displayDebugInfo(regs*)>
c0015999:	8d 65 f8             	lea    esp,[ebp-0x8]
c001599c:	5b                   	pop    ebx
c001599d:	5e                   	pop    esi
c001599e:	5d                   	pop    ebp
c001599f:	c3                   	ret    

c00159a0 <displayProgramFault(char const*)>:
c00159a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00159a8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159ae:	85 c0                	test   eax,eax
c00159b0:	74 15                	je     c00159c7 <displayProgramFault(char const*)+0x27>
c00159b2:	83 ec 0c             	sub    esp,0xc
c00159b5:	6a 04                	push   0x4
c00159b7:	6a 0f                	push   0xf
c00159b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00159bd:	50                   	push   eax
c00159be:	e8 d1 b4 ff ff       	call   c0010e94 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00159c3:	83 c4 1c             	add    esp,0x1c
c00159c6:	c3                   	ret    
c00159c7:	c3                   	ret    

c00159c8 <setupInterruptController()>:
c00159c8:	55                   	push   ebp
c00159c9:	89 e5                	mov    ebp,esp
c00159cb:	53                   	push   ebx
c00159cc:	83 ec 24             	sub    esp,0x24
c00159cf:	b8 00 00 00 00       	mov    eax,0x0
c00159d4:	85 c0                	test   eax,eax
c00159d6:	0f 95 c0             	setne  al
c00159d9:	84 c0                	test   al,al
c00159db:	74 5b                	je     c0015a38 <setupInterruptController()+0x70>
c00159dd:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00159e4:	83 ec 0c             	sub    esp,0xc
c00159e7:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00159ea:	e8 f3 9e ff ff       	call   c000f8e2 <malloc>
c00159ef:	83 c4 10             	add    esp,0x10
c00159f2:	89 c3                	mov    ebx,eax
c00159f4:	83 ec 0c             	sub    esp,0xc
c00159f7:	53                   	push   ebx
c00159f8:	e8 f3 ff 00 00       	call   c00259f0 <APIC::APIC()>
c00159fd:	83 c4 10             	add    esp,0x10
c0015a00:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015a03:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015a06:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a09:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0b:	83 c0 08             	add    eax,0x8
c0015a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a10:	6a 00                	push   0x0
c0015a12:	6a 00                	push   0x0
c0015a14:	6a 00                	push   0x0
c0015a16:	52                   	push   edx
c0015a17:	ff d0                	call   eax
c0015a19:	83 c4 10             	add    esp,0x10
c0015a1c:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0015a21:	83 ec 08             	sub    esp,0x8
c0015a24:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a27:	50                   	push   eax
c0015a28:	e8 bb e9 ff ff       	call   c00143e8 <Device::addChild(Device*)>
c0015a2d:	83 c4 10             	add    esp,0x10
c0015a30:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a33:	e9 52 03 00 00       	jmp    c0015d8a <setupInterruptController()+0x3c2>
c0015a38:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0015a3d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015a43:	83 e0 01             	and    eax,0x1
c0015a46:	84 c0                	test   al,al
c0015a48:	0f 95 c0             	setne  al
c0015a4b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015a4e:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a55:	83 ec 0c             	sub    esp,0xc
c0015a58:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a5b:	e8 82 9e ff ff       	call   c000f8e2 <malloc>
c0015a60:	83 c4 10             	add    esp,0x10
c0015a63:	89 c3                	mov    ebx,eax
c0015a65:	83 ec 0c             	sub    esp,0xc
c0015a68:	53                   	push   ebx
c0015a69:	e8 da 04 01 00       	call   c0025f48 <PIC::PIC()>
c0015a6e:	83 c4 10             	add    esp,0x10
c0015a71:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a74:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7c:	83 c0 08             	add    eax,0x8
c0015a7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a81:	6a 00                	push   0x0
c0015a83:	6a 00                	push   0x0
c0015a85:	6a 00                	push   0x0
c0015a87:	52                   	push   edx
c0015a88:	ff d0                	call   eax
c0015a8a:	83 c4 10             	add    esp,0x10
c0015a8d:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a91:	74 73                	je     c0015b06 <setupInterruptController()+0x13e>
c0015a93:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a99:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9b:	83 c0 0c             	add    eax,0xc
c0015a9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa0:	6a 00                	push   0x0
c0015aa2:	6a 00                	push   0x0
c0015aa4:	6a 00                	push   0x0
c0015aa6:	52                   	push   edx
c0015aa7:	ff d0                	call   eax
c0015aa9:	83 c4 10             	add    esp,0x10
c0015aac:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ab0:	74 15                	je     c0015ac7 <setupInterruptController()+0xff>
c0015ab2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab7:	83 c0 04             	add    eax,0x4
c0015aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abc:	83 ec 0c             	sub    esp,0xc
c0015abf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac2:	ff d0                	call   eax
c0015ac4:	83 c4 10             	add    esp,0x10
c0015ac7:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015ace:	83 ec 0c             	sub    esp,0xc
c0015ad1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015ad4:	e8 09 9e ff ff       	call   c000f8e2 <malloc>
c0015ad9:	83 c4 10             	add    esp,0x10
c0015adc:	89 c3                	mov    ebx,eax
c0015ade:	83 ec 0c             	sub    esp,0xc
c0015ae1:	53                   	push   ebx
c0015ae2:	e8 09 ff 00 00       	call   c00259f0 <APIC::APIC()>
c0015ae7:	83 c4 10             	add    esp,0x10
c0015aea:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015aed:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015af0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af5:	83 c0 08             	add    eax,0x8
c0015af8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afa:	6a 00                	push   0x0
c0015afc:	6a 00                	push   0x0
c0015afe:	6a 00                	push   0x0
c0015b00:	52                   	push   edx
c0015b01:	ff d0                	call   eax
c0015b03:	83 c4 10             	add    esp,0x10
c0015b06:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0015b0b:	83 ec 08             	sub    esp,0x8
c0015b0e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b11:	50                   	push   eax
c0015b12:	e8 d1 e8 ff ff       	call   c00143e8 <Device::addChild(Device*)>
c0015b17:	83 c4 10             	add    esp,0x10
c0015b1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1f:	83 c0 24             	add    eax,0x24
c0015b22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b24:	6a 00                	push   0x0
c0015b26:	68 7b 53 01 c0       	push   0xc001537b
c0015b2b:	6a 00                	push   0x0
c0015b2d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b30:	ff d0                	call   eax
c0015b32:	83 c4 10             	add    esp,0x10
c0015b35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3a:	83 c0 24             	add    eax,0x24
c0015b3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3f:	6a 00                	push   0x0
c0015b41:	68 7b 53 01 c0       	push   0xc001537b
c0015b46:	6a 01                	push   0x1
c0015b48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b4b:	ff d0                	call   eax
c0015b4d:	83 c4 10             	add    esp,0x10
c0015b50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b55:	83 c0 24             	add    eax,0x24
c0015b58:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5a:	6a 00                	push   0x0
c0015b5c:	68 95 4c 01 c0       	push   0xc0014c95
c0015b61:	6a 02                	push   0x2
c0015b63:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b66:	ff d0                	call   eax
c0015b68:	83 c4 10             	add    esp,0x10
c0015b6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b70:	83 c0 24             	add    eax,0x24
c0015b73:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b75:	6a 00                	push   0x0
c0015b77:	68 7b 53 01 c0       	push   0xc001537b
c0015b7c:	6a 03                	push   0x3
c0015b7e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b81:	ff d0                	call   eax
c0015b83:	83 c4 10             	add    esp,0x10
c0015b86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8b:	83 c0 24             	add    eax,0x24
c0015b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b90:	6a 00                	push   0x0
c0015b92:	68 7b 53 01 c0       	push   0xc001537b
c0015b97:	6a 04                	push   0x4
c0015b99:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b9c:	ff d0                	call   eax
c0015b9e:	83 c4 10             	add    esp,0x10
c0015ba1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba6:	83 c0 24             	add    eax,0x24
c0015ba9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bab:	6a 00                	push   0x0
c0015bad:	68 7b 53 01 c0       	push   0xc001537b
c0015bb2:	6a 05                	push   0x5
c0015bb4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb7:	ff d0                	call   eax
c0015bb9:	83 c4 10             	add    esp,0x10
c0015bbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc1:	83 c0 24             	add    eax,0x24
c0015bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc6:	6a 00                	push   0x0
c0015bc8:	68 9a 53 01 c0       	push   0xc001539a
c0015bcd:	6a 06                	push   0x6
c0015bcf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd2:	ff d0                	call   eax
c0015bd4:	83 c4 10             	add    esp,0x10
c0015bd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bda:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bdc:	83 c0 24             	add    eax,0x24
c0015bdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be1:	6a 00                	push   0x0
c0015be3:	68 c7 52 01 c0       	push   0xc00152c7
c0015be8:	6a 07                	push   0x7
c0015bea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bed:	ff d0                	call   eax
c0015bef:	83 c4 10             	add    esp,0x10
c0015bf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf7:	83 c0 24             	add    eax,0x24
c0015bfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfc:	6a 00                	push   0x0
c0015bfe:	68 b0 4a 01 c0       	push   0xc0014ab0
c0015c03:	6a 08                	push   0x8
c0015c05:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c08:	ff d0                	call   eax
c0015c0a:	83 c4 10             	add    esp,0x10
c0015c0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c12:	83 c0 24             	add    eax,0x24
c0015c15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c17:	6a 00                	push   0x0
c0015c19:	68 7b 53 01 c0       	push   0xc001537b
c0015c1e:	6a 09                	push   0x9
c0015c20:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c23:	ff d0                	call   eax
c0015c25:	83 c4 10             	add    esp,0x10
c0015c28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2d:	83 c0 24             	add    eax,0x24
c0015c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c32:	6a 00                	push   0x0
c0015c34:	68 7b 53 01 c0       	push   0xc001537b
c0015c39:	6a 0a                	push   0xa
c0015c3b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c3e:	ff d0                	call   eax
c0015c40:	83 c4 10             	add    esp,0x10
c0015c43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c46:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c48:	83 c0 24             	add    eax,0x24
c0015c4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4d:	6a 00                	push   0x0
c0015c4f:	68 7b 53 01 c0       	push   0xc001537b
c0015c54:	6a 0b                	push   0xb
c0015c56:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c59:	ff d0                	call   eax
c0015c5b:	83 c4 10             	add    esp,0x10
c0015c5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c61:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c63:	83 c0 24             	add    eax,0x24
c0015c66:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c68:	6a 00                	push   0x0
c0015c6a:	68 7b 53 01 c0       	push   0xc001537b
c0015c6f:	6a 0c                	push   0xc
c0015c71:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c74:	ff d0                	call   eax
c0015c76:	83 c4 10             	add    esp,0x10
c0015c79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7e:	83 c0 24             	add    eax,0x24
c0015c81:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c83:	6a 00                	push   0x0
c0015c85:	68 f6 52 01 c0       	push   0xc00152f6
c0015c8a:	6a 0d                	push   0xd
c0015c8c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c8f:	ff d0                	call   eax
c0015c91:	83 c4 10             	add    esp,0x10
c0015c94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c97:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c99:	83 c0 24             	add    eax,0x24
c0015c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9e:	6a 00                	push   0x0
c0015ca0:	68 2f 53 01 c0       	push   0xc001532f
c0015ca5:	6a 0e                	push   0xe
c0015ca7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015caa:	ff d0                	call   eax
c0015cac:	83 c4 10             	add    esp,0x10
c0015caf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb4:	83 c0 24             	add    eax,0x24
c0015cb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb9:	6a 00                	push   0x0
c0015cbb:	68 7b 53 01 c0       	push   0xc001537b
c0015cc0:	6a 0f                	push   0xf
c0015cc2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cc5:	ff d0                	call   eax
c0015cc7:	83 c4 10             	add    esp,0x10
c0015cca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ccf:	83 c0 24             	add    eax,0x24
c0015cd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd4:	6a 00                	push   0x0
c0015cd6:	68 7b 53 01 c0       	push   0xc001537b
c0015cdb:	6a 10                	push   0x10
c0015cdd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ce0:	ff d0                	call   eax
c0015ce2:	83 c4 10             	add    esp,0x10
c0015ce5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cea:	83 c0 24             	add    eax,0x24
c0015ced:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cef:	6a 00                	push   0x0
c0015cf1:	68 7b 53 01 c0       	push   0xc001537b
c0015cf6:	6a 11                	push   0x11
c0015cf8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cfb:	ff d0                	call   eax
c0015cfd:	83 c4 10             	add    esp,0x10
c0015d00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d03:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d05:	83 c0 24             	add    eax,0x24
c0015d08:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d0a:	6a 00                	push   0x0
c0015d0c:	68 7b 53 01 c0       	push   0xc001537b
c0015d11:	6a 12                	push   0x12
c0015d13:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d16:	ff d0                	call   eax
c0015d18:	83 c4 10             	add    esp,0x10
c0015d1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d20:	83 c0 24             	add    eax,0x24
c0015d23:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d25:	6a 00                	push   0x0
c0015d27:	68 7b 53 01 c0       	push   0xc001537b
c0015d2c:	6a 13                	push   0x13
c0015d2e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d31:	ff d0                	call   eax
c0015d33:	83 c4 10             	add    esp,0x10
c0015d36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d39:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d3b:	83 c0 24             	add    eax,0x24
c0015d3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d40:	6a 00                	push   0x0
c0015d42:	68 7b 53 01 c0       	push   0xc001537b
c0015d47:	6a 14                	push   0x14
c0015d49:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d4c:	ff d0                	call   eax
c0015d4e:	83 c4 10             	add    esp,0x10
c0015d51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d54:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d56:	83 c0 24             	add    eax,0x24
c0015d59:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d5b:	6a 00                	push   0x0
c0015d5d:	68 7b 53 01 c0       	push   0xc001537b
c0015d62:	6a 1e                	push   0x1e
c0015d64:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d67:	ff d0                	call   eax
c0015d69:	83 c4 10             	add    esp,0x10
c0015d6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d71:	83 c0 24             	add    eax,0x24
c0015d74:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d76:	6a 00                	push   0x0
c0015d78:	68 47 c8 01 c0       	push   0xc001c847
c0015d7d:	6a 60                	push   0x60
c0015d7f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d82:	ff d0                	call   eax
c0015d84:	83 c4 10             	add    esp,0x10
c0015d87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d8a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d8d:	c9                   	leave  
c0015d8e:	c3                   	ret    
c0015d8f:	90                   	nop

c0015d90 <InterruptController::convertLegacyIRQNumber(int)>:
c0015d90:	55                   	push   ebp
c0015d91:	89 e5                	mov    ebp,esp
c0015d93:	83 ec 08             	sub    esp,0x8
c0015d96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d99:	83 ec 0c             	sub    esp,0xc
c0015d9c:	50                   	push   eax
c0015d9d:	e8 32 e9 ff ff       	call   c00146d4 <Device::getName()>
c0015da2:	83 c4 10             	add    esp,0x10
c0015da5:	8a 00                	mov    al,BYTE PTR [eax]
c0015da7:	3c 41                	cmp    al,0x41
c0015da9:	0f 94 c0             	sete   al
c0015dac:	84 c0                	test   al,al
c0015dae:	74 28                	je     c0015dd8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015db0:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015db4:	7f 12                	jg     c0015dc8 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015db6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015db9:	05 e0 d8 02 c0       	add    eax,0xc002d8e0
c0015dbe:	8a 00                	mov    al,BYTE PTR [eax]
c0015dc0:	0f b6 c0             	movzx  eax,al
c0015dc3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015dc6:	eb 10                	jmp    c0015dd8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015dc8:	83 ec 0c             	sub    esp,0xc
c0015dcb:	68 e0 af 02 c0       	push   0xc002afe0
c0015dd0:	e8 9e 48 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0015dd5:	83 c4 10             	add    esp,0x10
c0015dd8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ddb:	c9                   	leave  
c0015ddc:	c3                   	ret    
c0015ddd:	90                   	nop

c0015dde <startGUI(void*)>:
c0015dde:	55                   	push   ebp
c0015ddf:	89 e5                	mov    ebp,esp
c0015de1:	53                   	push   ebx
c0015de2:	83 ec 04             	sub    esp,0x4
c0015de5:	e8 b0 80 00 00       	call   c001de9a <unlockScheduler()>
c0015dea:	8b 1d 88 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e688
c0015df0:	83 ec 08             	sub    esp,0x8
c0015df3:	6a 01                	push   0x1
c0015df5:	68 3c b3 02 c0       	push   0xc002b33c
c0015dfa:	e8 f1 79 00 00       	call   c001d7f0 <Thr::loadDLL(char const*, bool)>
c0015dff:	83 c4 10             	add    esp,0x10
c0015e02:	83 ec 08             	sub    esp,0x8
c0015e05:	53                   	push   ebx
c0015e06:	50                   	push   eax
c0015e07:	e8 18 7c 00 00       	call   c001da24 <Thr::executeDLL(unsigned long, void*)>
c0015e0c:	83 c4 10             	add    esp,0x10
c0015e0f:	8b 1d 88 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e688
c0015e15:	83 ec 08             	sub    esp,0x8
c0015e18:	6a 01                	push   0x1
c0015e1a:	68 56 b3 02 c0       	push   0xc002b356
c0015e1f:	e8 cc 79 00 00       	call   c001d7f0 <Thr::loadDLL(char const*, bool)>
c0015e24:	83 c4 10             	add    esp,0x10
c0015e27:	83 ec 08             	sub    esp,0x8
c0015e2a:	53                   	push   ebx
c0015e2b:	50                   	push   eax
c0015e2c:	e8 f3 7b 00 00       	call   c001da24 <Thr::executeDLL(unsigned long, void*)>
c0015e31:	83 c4 10             	add    esp,0x10
c0015e34:	90                   	nop
c0015e35:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e38:	c9                   	leave  
c0015e39:	c3                   	ret    

c0015e3a <startGUIVESA(void*)>:
c0015e3a:	55                   	push   ebp
c0015e3b:	89 e5                	mov    ebp,esp
c0015e3d:	53                   	push   ebx
c0015e3e:	83 ec 04             	sub    esp,0x4
c0015e41:	e8 54 80 00 00       	call   c001de9a <unlockScheduler()>
c0015e46:	8b 1d 88 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e688
c0015e4c:	83 ec 08             	sub    esp,0x8
c0015e4f:	6a 01                	push   0x1
c0015e51:	68 70 b3 02 c0       	push   0xc002b370
c0015e56:	e8 95 79 00 00       	call   c001d7f0 <Thr::loadDLL(char const*, bool)>
c0015e5b:	83 c4 10             	add    esp,0x10
c0015e5e:	83 ec 08             	sub    esp,0x8
c0015e61:	53                   	push   ebx
c0015e62:	50                   	push   eax
c0015e63:	e8 bc 7b 00 00       	call   c001da24 <Thr::executeDLL(unsigned long, void*)>
c0015e68:	83 c4 10             	add    esp,0x10
c0015e6b:	8b 1d 88 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e688
c0015e71:	83 ec 08             	sub    esp,0x8
c0015e74:	6a 01                	push   0x1
c0015e76:	68 56 b3 02 c0       	push   0xc002b356
c0015e7b:	e8 70 79 00 00       	call   c001d7f0 <Thr::loadDLL(char const*, bool)>
c0015e80:	83 c4 10             	add    esp,0x10
c0015e83:	83 ec 08             	sub    esp,0x8
c0015e86:	53                   	push   ebx
c0015e87:	50                   	push   eax
c0015e88:	e8 97 7b 00 00       	call   c001da24 <Thr::executeDLL(unsigned long, void*)>
c0015e8d:	83 c4 10             	add    esp,0x10
c0015e90:	90                   	nop
c0015e91:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e94:	c9                   	leave  
c0015e95:	c3                   	ret    

c0015e96 <sendKeyToTerminal(unsigned char)>:
c0015e96:	55                   	push   ebp
c0015e97:	89 e5                	mov    ebp,esp
c0015e99:	83 ec 28             	sub    esp,0x28
c0015e9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e9f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015ea2:	a1 64 e7 02 c0       	mov    eax,ds:0xc002e764
c0015ea7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015eab:	83 ec 08             	sub    esp,0x8
c0015eae:	52                   	push   edx
c0015eaf:	50                   	push   eax
c0015eb0:	e8 1b b5 ff ff       	call   c00113d0 <VgaText::receiveKey(unsigned char)>
c0015eb5:	83 c4 10             	add    esp,0x10
c0015eb8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015ebc:	75 41                	jne    c0015eff <sendKeyToTerminal(unsigned char)+0x69>
c0015ebe:	e8 fc 7f 00 00       	call   c001debf <lockStuff()>
c0015ec3:	a1 40 e8 02 c0       	mov    eax,ds:0xc002e840
c0015ec8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ecb:	c7 05 40 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e840,0x0
c0015ed5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ed9:	74 1f                	je     c0015efa <sendKeyToTerminal(unsigned char)+0x64>
c0015edb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ede:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015ee1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015ee4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ee7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015eea:	83 ec 0c             	sub    esp,0xc
c0015eed:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015ef0:	e8 bb 85 00 00       	call   c001e4b0 <unblockTask(ThreadControlBlock*)>
c0015ef5:	83 c4 10             	add    esp,0x10
c0015ef8:	eb db                	jmp    c0015ed5 <sendKeyToTerminal(unsigned char)+0x3f>
c0015efa:	e8 5a 83 00 00       	call   c001e259 <unlockStuff()>
c0015eff:	90                   	nop
c0015f00:	c9                   	leave  
c0015f01:	c3                   	ret    

c0015f02 <sendKeyboardToken(KeyboardToken)>:
c0015f02:	55                   	push   ebp
c0015f03:	89 e5                	mov    ebp,esp
c0015f05:	83 ec 18             	sub    esp,0x18
c0015f08:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0e:	0f b7 c0             	movzx  eax,ax
c0015f11:	83 f2 01             	xor    edx,0x1
c0015f14:	88 90 60 e8 02 c0    	mov    BYTE PTR [eax-0x3ffd17a0],dl
c0015f1a:	a1 48 e8 02 c0       	mov    eax,ds:0xc002e848
c0015f1f:	85 c0                	test   eax,eax
c0015f21:	74 24                	je     c0015f47 <sendKeyboardToken(KeyboardToken)+0x45>
c0015f23:	8b 0d 48 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e848
c0015f29:	83 ec 04             	sub    esp,0x4
c0015f2c:	68 60 e8 02 c0       	push   0xc002e860
c0015f31:	83 ec 08             	sub    esp,0x8
c0015f34:	89 e2                	mov    edx,esp
c0015f36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f39:	89 02                	mov    DWORD PTR [edx],eax
c0015f3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f3e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f42:	ff d1                	call   ecx
c0015f44:	83 c4 10             	add    esp,0x10
c0015f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4a:	66 3d 03 02          	cmp    ax,0x203
c0015f4e:	75 07                	jne    c0015f57 <sendKeyboardToken(KeyboardToken)+0x55>
c0015f50:	a0 60 e9 02 c0       	mov    al,ds:0xc002e960
c0015f55:	84 c0                	test   al,al
c0015f57:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f5b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f5e:	a0 68 ec 02 c0       	mov    al,ds:0xc002ec68
c0015f63:	38 c2                	cmp    dl,al
c0015f65:	74 1c                	je     c0015f83 <sendKeyboardToken(KeyboardToken)+0x81>
c0015f67:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f6a:	a2 68 ec 02 c0       	mov    ds:0xc002ec68,al
c0015f6f:	a0 68 ec 02 c0       	mov    al,ds:0xc002ec68
c0015f74:	0f b6 c0             	movzx  eax,al
c0015f77:	83 ec 0c             	sub    esp,0xc
c0015f7a:	50                   	push   eax
c0015f7b:	e8 b0 a6 ff ff       	call   c0010630 <setTerminalScrollLock(bool)>
c0015f80:	83 c4 10             	add    esp,0x10
c0015f83:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f86:	84 c0                	test   al,al
c0015f88:	0f 84 ae 00 00 00    	je     c001603c <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f91:	66 3d 10 03          	cmp    ax,0x310
c0015f95:	75 06                	jne    c0015f9d <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f97:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa0:	66 3d 11 03          	cmp    ax,0x311
c0015fa4:	75 06                	jne    c0015fac <sendKeyboardToken(KeyboardToken)+0xaa>
c0015fa6:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015faf:	66 3d 12 03          	cmp    ax,0x312
c0015fb3:	75 06                	jne    c0015fbb <sendKeyboardToken(KeyboardToken)+0xb9>
c0015fb5:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015fbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fbe:	66 3d 13 03          	cmp    ax,0x313
c0015fc2:	75 06                	jne    c0015fca <sendKeyboardToken(KeyboardToken)+0xc8>
c0015fc4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015fca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fcd:	66 3d 14 03          	cmp    ax,0x314
c0015fd1:	75 06                	jne    c0015fd9 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015fd3:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015fd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fdc:	66 3d 15 03          	cmp    ax,0x315
c0015fe0:	75 06                	jne    c0015fe8 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015fe2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015feb:	66 3d 16 03          	cmp    ax,0x316
c0015fef:	75 06                	jne    c0015ff7 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015ff1:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015ff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ffa:	66 3d 17 03          	cmp    ax,0x317
c0015ffe:	75 06                	jne    c0016006 <sendKeyboardToken(KeyboardToken)+0x104>
c0016000:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0016006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016009:	66 3d 18 03          	cmp    ax,0x318
c001600d:	75 06                	jne    c0016015 <sendKeyboardToken(KeyboardToken)+0x113>
c001600f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0016015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016018:	66 3d 19 03          	cmp    ax,0x319
c001601c:	75 06                	jne    c0016024 <sendKeyboardToken(KeyboardToken)+0x122>
c001601e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0016024:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016027:	66 3d 1a 03          	cmp    ax,0x31a
c001602b:	0f 85 c9 00 00 00    	jne    c00160fa <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016031:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0016037:	e9 be 00 00 00       	jmp    c00160fa <sendKeyboardToken(KeyboardToken)+0x1f8>
c001603c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603f:	66 3d 10 03          	cmp    ax,0x310
c0016043:	75 0a                	jne    c001604f <sendKeyboardToken(KeyboardToken)+0x14d>
c0016045:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001604b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001604f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016052:	66 3d 11 03          	cmp    ax,0x311
c0016056:	75 0a                	jne    c0016062 <sendKeyboardToken(KeyboardToken)+0x160>
c0016058:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001605e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016062:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016065:	66 3d 12 03          	cmp    ax,0x312
c0016069:	75 0a                	jne    c0016075 <sendKeyboardToken(KeyboardToken)+0x173>
c001606b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016071:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016078:	66 3d 13 03          	cmp    ax,0x313
c001607c:	75 0a                	jne    c0016088 <sendKeyboardToken(KeyboardToken)+0x186>
c001607e:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016084:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001608b:	66 3d 14 03          	cmp    ax,0x314
c001608f:	75 0a                	jne    c001609b <sendKeyboardToken(KeyboardToken)+0x199>
c0016091:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016097:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001609b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001609e:	66 3d 15 03          	cmp    ax,0x315
c00160a2:	75 0a                	jne    c00160ae <sendKeyboardToken(KeyboardToken)+0x1ac>
c00160a4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00160aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b1:	66 3d 16 03          	cmp    ax,0x316
c00160b5:	75 0a                	jne    c00160c1 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00160b7:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00160bd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c4:	66 3d 17 03          	cmp    ax,0x317
c00160c8:	75 0a                	jne    c00160d4 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00160ca:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00160d0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d7:	66 3d 18 03          	cmp    ax,0x318
c00160db:	75 0a                	jne    c00160e7 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00160dd:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00160e3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ea:	66 3d 19 03          	cmp    ax,0x319
c00160ee:	75 0a                	jne    c00160fa <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160f0:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00160f6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160fd:	66 3d 00 02          	cmp    ax,0x200
c0016101:	75 2c                	jne    c001612f <sendKeyboardToken(KeyboardToken)+0x22d>
c0016103:	a0 60 ec 02 c0       	mov    al,ds:0xc002ec60
c0016108:	83 f0 01             	xor    eax,0x1
c001610b:	84 c0                	test   al,al
c001610d:	74 20                	je     c001612f <sendKeyboardToken(KeyboardToken)+0x22d>
c001610f:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0016114:	6a 01                	push   0x1
c0016116:	6a 00                	push   0x0
c0016118:	68 de 5d 01 c0       	push   0xc0015dde
c001611d:	50                   	push   eax
c001611e:	e8 a7 7e 00 00       	call   c001dfca <Process::createThread(void (*)(void*), void*, int)>
c0016123:	83 c4 10             	add    esp,0x10
c0016126:	c6 05 60 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec60,0x1
c001612d:	eb 33                	jmp    c0016162 <sendKeyboardToken(KeyboardToken)+0x260>
c001612f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016132:	66 3d 01 02          	cmp    ax,0x201
c0016136:	75 2a                	jne    c0016162 <sendKeyboardToken(KeyboardToken)+0x260>
c0016138:	a0 60 ec 02 c0       	mov    al,ds:0xc002ec60
c001613d:	83 f0 01             	xor    eax,0x1
c0016140:	84 c0                	test   al,al
c0016142:	74 1e                	je     c0016162 <sendKeyboardToken(KeyboardToken)+0x260>
c0016144:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0016149:	6a 01                	push   0x1
c001614b:	6a 00                	push   0x0
c001614d:	68 3a 5e 01 c0       	push   0xc0015e3a
c0016152:	50                   	push   eax
c0016153:	e8 72 7e 00 00       	call   c001dfca <Process::createThread(void (*)(void*), void*, int)>
c0016158:	83 c4 10             	add    esp,0x10
c001615b:	c6 05 60 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec60,0x1
c0016162:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016165:	66 3d 1d 03          	cmp    ax,0x31d
c0016169:	75 06                	jne    c0016171 <sendKeyboardToken(KeyboardToken)+0x26f>
c001616b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016174:	66 3d 1c 03          	cmp    ax,0x31c
c0016178:	75 06                	jne    c0016180 <sendKeyboardToken(KeyboardToken)+0x27e>
c001617a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016180:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016183:	66 3d 1b 03          	cmp    ax,0x31b
c0016187:	75 06                	jne    c001618f <sendKeyboardToken(KeyboardToken)+0x28d>
c0016189:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001618f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016192:	66 3d 1e 03          	cmp    ax,0x31e
c0016196:	75 06                	jne    c001619e <sendKeyboardToken(KeyboardToken)+0x29c>
c0016198:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001619e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a1:	66 3d 1f 03          	cmp    ax,0x31f
c00161a5:	75 06                	jne    c00161ad <sendKeyboardToken(KeyboardToken)+0x2ab>
c00161a7:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00161ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b0:	66 3d 1a 03          	cmp    ax,0x31a
c00161b4:	75 06                	jne    c00161bc <sendKeyboardToken(KeyboardToken)+0x2ba>
c00161b6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00161bc:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00161c0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161c3:	83 f0 01             	xor    eax,0x1
c00161c6:	84 c0                	test   al,al
c00161c8:	74 77                	je     c0016241 <sendKeyboardToken(KeyboardToken)+0x33f>
c00161ca:	a0 61 e9 02 c0       	mov    al,ds:0xc002e961
c00161cf:	84 c0                	test   al,al
c00161d1:	74 41                	je     c0016214 <sendKeyboardToken(KeyboardToken)+0x312>
c00161d3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161d7:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00161db:	74 2b                	je     c0016208 <sendKeyboardToken(KeyboardToken)+0x306>
c00161dd:	8b 15 64 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec64
c00161e3:	89 d0                	mov    eax,edx
c00161e5:	c1 e0 02             	shl    eax,0x2
c00161e8:	01 d0                	add    eax,edx
c00161ea:	01 c0                	add    eax,eax
c00161ec:	a3 64 ec 02 c0       	mov    ds:0xc002ec64,eax
c00161f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f4:	0f b7 c0             	movzx  eax,ax
c00161f7:	8d 50 d0             	lea    edx,[eax-0x30]
c00161fa:	a1 64 ec 02 c0       	mov    eax,ds:0xc002ec64
c00161ff:	01 d0                	add    eax,edx
c0016201:	a3 64 ec 02 c0       	mov    ds:0xc002ec64,eax
c0016206:	eb 6d                	jmp    c0016275 <sendKeyboardToken(KeyboardToken)+0x373>
c0016208:	c7 05 64 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec64,0x0
c0016212:	eb 61                	jmp    c0016275 <sendKeyboardToken(KeyboardToken)+0x373>
c0016214:	a1 64 ec 02 c0       	mov    eax,ds:0xc002ec64
c0016219:	85 c0                	test   eax,eax
c001621b:	74 18                	je     c0016235 <sendKeyboardToken(KeyboardToken)+0x333>
c001621d:	a1 64 ec 02 c0       	mov    eax,ds:0xc002ec64
c0016222:	0f b6 c0             	movzx  eax,al
c0016225:	83 ec 0c             	sub    esp,0xc
c0016228:	50                   	push   eax
c0016229:	e8 68 fc ff ff       	call   c0015e96 <sendKeyToTerminal(unsigned char)>
c001622e:	83 c4 10             	add    esp,0x10
c0016231:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016235:	c7 05 64 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec64,0x0
c001623f:	eb 34                	jmp    c0016275 <sendKeyboardToken(KeyboardToken)+0x373>
c0016241:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016244:	66 3d 01 01          	cmp    ax,0x101
c0016248:	75 2b                	jne    c0016275 <sendKeyboardToken(KeyboardToken)+0x373>
c001624a:	a1 64 ec 02 c0       	mov    eax,ds:0xc002ec64
c001624f:	85 c0                	test   eax,eax
c0016251:	74 18                	je     c001626b <sendKeyboardToken(KeyboardToken)+0x369>
c0016253:	a1 64 ec 02 c0       	mov    eax,ds:0xc002ec64
c0016258:	0f b6 c0             	movzx  eax,al
c001625b:	83 ec 0c             	sub    esp,0xc
c001625e:	50                   	push   eax
c001625f:	e8 32 fc ff ff       	call   c0015e96 <sendKeyToTerminal(unsigned char)>
c0016264:	83 c4 10             	add    esp,0x10
c0016267:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001626b:	c7 05 64 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec64,0x0
c0016275:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016278:	83 f0 01             	xor    eax,0x1
c001627b:	84 c0                	test   al,al
c001627d:	74 4c                	je     c00162cb <sendKeyboardToken(KeyboardToken)+0x3c9>
c001627f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016282:	83 f0 01             	xor    eax,0x1
c0016285:	84 c0                	test   al,al
c0016287:	74 42                	je     c00162cb <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016289:	a0 60 e9 02 c0       	mov    al,ds:0xc002e960
c001628e:	83 f0 01             	xor    eax,0x1
c0016291:	84 c0                	test   al,al
c0016293:	74 36                	je     c00162cb <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016298:	66 83 f8 1f          	cmp    ax,0x1f
c001629c:	76 09                	jbe    c00162a7 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001629e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162a1:	66 83 f8 7e          	cmp    ax,0x7e
c00162a5:	76 12                	jbe    c00162b9 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162aa:	66 83 f8 0a          	cmp    ax,0xa
c00162ae:	74 09                	je     c00162b9 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b3:	66 83 f8 08          	cmp    ax,0x8
c00162b7:	75 12                	jne    c00162cb <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162bc:	0f b6 c0             	movzx  eax,al
c00162bf:	83 ec 0c             	sub    esp,0xc
c00162c2:	50                   	push   eax
c00162c3:	e8 ce fb ff ff       	call   c0015e96 <sendKeyToTerminal(unsigned char)>
c00162c8:	83 c4 10             	add    esp,0x10
c00162cb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162ce:	83 f0 01             	xor    eax,0x1
c00162d1:	84 c0                	test   al,al
c00162d3:	74 4f                	je     c0016324 <sendKeyboardToken(KeyboardToken)+0x422>
c00162d5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162d8:	83 f0 01             	xor    eax,0x1
c00162db:	84 c0                	test   al,al
c00162dd:	74 45                	je     c0016324 <sendKeyboardToken(KeyboardToken)+0x422>
c00162df:	a0 60 e9 02 c0       	mov    al,ds:0xc002e960
c00162e4:	84 c0                	test   al,al
c00162e6:	74 3c                	je     c0016324 <sendKeyboardToken(KeyboardToken)+0x422>
c00162e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162eb:	66 83 f8 3f          	cmp    ax,0x3f
c00162ef:	76 33                	jbe    c0016324 <sendKeyboardToken(KeyboardToken)+0x422>
c00162f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162f4:	66 83 f8 7f          	cmp    ax,0x7f
c00162f8:	77 2a                	ja     c0016324 <sendKeyboardToken(KeyboardToken)+0x422>
c00162fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162fd:	88 c2                	mov    dl,al
c00162ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016302:	66 83 f8 5f          	cmp    ax,0x5f
c0016306:	76 04                	jbe    c001630c <sendKeyboardToken(KeyboardToken)+0x40a>
c0016308:	b0 20                	mov    al,0x20
c001630a:	eb 02                	jmp    c001630e <sendKeyboardToken(KeyboardToken)+0x40c>
c001630c:	b0 00                	mov    al,0x0
c001630e:	29 c2                	sub    edx,eax
c0016310:	88 d0                	mov    al,dl
c0016312:	83 e8 40             	sub    eax,0x40
c0016315:	0f b6 c0             	movzx  eax,al
c0016318:	83 ec 0c             	sub    esp,0xc
c001631b:	50                   	push   eax
c001631c:	e8 75 fb ff ff       	call   c0015e96 <sendKeyToTerminal(unsigned char)>
c0016321:	83 c4 10             	add    esp,0x10
c0016324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016327:	66 3d 00 03          	cmp    ax,0x300
c001632b:	75 0f                	jne    c001633c <sendKeyboardToken(KeyboardToken)+0x43a>
c001632d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016330:	83 f0 01             	xor    eax,0x1
c0016333:	84 c0                	test   al,al
c0016335:	74 05                	je     c001633c <sendKeyboardToken(KeyboardToken)+0x43a>
c0016337:	e8 29 ab ff ff       	call   c0010e65 <doTerminalCycle()>
c001633c:	90                   	nop
c001633d:	c9                   	leave  
c001633e:	c3                   	ret    

c001633f <clearInternalKeybuffer(VgaText*)>:
c001633f:	55                   	push   ebp
c0016340:	89 e5                	mov    ebp,esp
c0016342:	83 ec 08             	sub    esp,0x8
c0016345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016348:	05 34 11 00 00       	add    eax,0x1134
c001634d:	83 ec 0c             	sub    esp,0xc
c0016350:	50                   	push   eax
c0016351:	e8 3e a4 fe ff       	call   c0000794 <strlen>
c0016356:	83 c4 10             	add    esp,0x10
c0016359:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001635c:	81 c2 34 11 00 00    	add    edx,0x1134
c0016362:	83 ec 04             	sub    esp,0x4
c0016365:	50                   	push   eax
c0016366:	6a 00                	push   0x0
c0016368:	52                   	push   edx
c0016369:	e8 0a a4 fe ff       	call   c0000778 <memset>
c001636e:	83 c4 10             	add    esp,0x10
c0016371:	90                   	nop
c0016372:	c9                   	leave  
c0016373:	c3                   	ret    

c0016374 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016374:	55                   	push   ebp
c0016375:	89 e5                	mov    ebp,esp
c0016377:	83 ec 18             	sub    esp,0x18
c001637a:	fb                   	sti    
c001637b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016382:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016386:	0f 84 8a 00 00 00    	je     c0016416 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c001638c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001638f:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016395:	84 c0                	test   al,al
c0016397:	75 11                	jne    c00163aa <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016399:	e8 fa 7a 00 00       	call   c001de98 <lockScheduler()>
c001639e:	e8 31 7e 00 00       	call   c001e1d4 <schedule()>
c00163a3:	e8 f2 7a 00 00       	call   c001de9a <unlockScheduler()>
c00163a8:	eb e2                	jmp    c001638c <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00163aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00163ad:	8d 50 01             	lea    edx,[eax+0x1]
c00163b0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00163b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163b6:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00163bc:	88 10                	mov    BYTE PTR [eax],dl
c00163be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163c1:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00163c7:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163cd:	05 34 11 00 00       	add    eax,0x1134
c00163d2:	83 ec 0c             	sub    esp,0xc
c00163d5:	50                   	push   eax
c00163d6:	e8 b9 a3 fe ff       	call   c0000794 <strlen>
c00163db:	83 c4 10             	add    esp,0x10
c00163de:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163e1:	81 c2 34 11 00 00    	add    edx,0x1134
c00163e7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163ea:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163ed:	81 c2 34 11 00 00    	add    edx,0x1134
c00163f3:	83 ec 04             	sub    esp,0x4
c00163f6:	50                   	push   eax
c00163f7:	51                   	push   ecx
c00163f8:	52                   	push   edx
c00163f9:	e8 7e a2 fe ff       	call   c000067c <memmove>
c00163fe:	83 c4 10             	add    esp,0x10
c0016401:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016404:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016407:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001640b:	0f 85 71 ff ff ff    	jne    c0016382 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016411:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016414:	eb 03                	jmp    c0016419 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016416:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016419:	c9                   	leave  
c001641a:	c3                   	ret    
c001641b:	90                   	nop

c001641c <Keyboard::Keyboard(char const*)>:
c001641c:	83 ec 0c             	sub    esp,0xc
c001641f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016423:	83 ec 08             	sub    esp,0x8
c0016426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001642a:	50                   	push   eax
c001642b:	e8 a8 e1 ff ff       	call   c00145d8 <Device::Device(char const*)>
c0016430:	83 c4 10             	add    esp,0x10
c0016433:	ba 94 b3 02 c0       	mov    edx,0xc002b394
c0016438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643c:	89 10                	mov    DWORD PTR [eax],edx
c001643e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016442:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001644c:	c6 05 44 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e844,0x1
c0016453:	90                   	nop
c0016454:	83 c4 0c             	add    esp,0xc
c0016457:	c3                   	ret    

c0016458 <Keyboard::~Keyboard()>:
c0016458:	83 ec 0c             	sub    esp,0xc
c001645b:	ba 94 b3 02 c0       	mov    edx,0xc002b394
c0016460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016464:	89 10                	mov    DWORD PTR [eax],edx
c0016466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001646a:	83 ec 0c             	sub    esp,0xc
c001646d:	50                   	push   eax
c001646e:	e8 47 de ff ff       	call   c00142ba <Device::~Device()>
c0016473:	83 c4 10             	add    esp,0x10
c0016476:	90                   	nop
c0016477:	83 c4 0c             	add    esp,0xc
c001647a:	c3                   	ret    
c001647b:	90                   	nop

c001647c <Keyboard::~Keyboard()>:
c001647c:	83 ec 0c             	sub    esp,0xc
c001647f:	83 ec 0c             	sub    esp,0xc
c0016482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016486:	e8 cd ff ff ff       	call   c0016458 <Keyboard::~Keyboard()>
c001648b:	83 c4 10             	add    esp,0x10
c001648e:	83 ec 08             	sub    esp,0x8
c0016491:	68 5c 01 00 00       	push   0x15c
c0016496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001649a:	e8 42 ca ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c001649f:	83 c4 10             	add    esp,0x10
c00164a2:	83 c4 0c             	add    esp,0xc
c00164a5:	c3                   	ret    

c00164a6 <LogicalDisk::close(int, int, void*)>:
c00164a6:	83 c8 ff             	or     eax,0xffffffff
c00164a9:	c3                   	ret    

c00164aa <LogicalDisk::~LogicalDisk()>:
c00164aa:	83 ec 0c             	sub    esp,0xc
c00164ad:	ba 44 b4 02 c0       	mov    edx,0xc002b444
c00164b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b6:	89 10                	mov    DWORD PTR [eax],edx
c00164b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164bc:	83 ec 0c             	sub    esp,0xc
c00164bf:	50                   	push   eax
c00164c0:	e8 f5 dd ff ff       	call   c00142ba <Device::~Device()>
c00164c5:	83 c4 10             	add    esp,0x10
c00164c8:	90                   	nop
c00164c9:	83 c4 0c             	add    esp,0xc
c00164cc:	c3                   	ret    
c00164cd:	90                   	nop

c00164ce <LogicalDisk::~LogicalDisk()>:
c00164ce:	83 ec 0c             	sub    esp,0xc
c00164d1:	83 ec 0c             	sub    esp,0xc
c00164d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164d8:	e8 cd ff ff ff       	call   c00164aa <LogicalDisk::~LogicalDisk()>
c00164dd:	83 c4 10             	add    esp,0x10
c00164e0:	83 ec 08             	sub    esp,0x8
c00164e3:	68 74 01 00 00       	push   0x174
c00164e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ec:	e8 f0 c9 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c00164f1:	83 c4 10             	add    esp,0x10
c00164f4:	83 c4 0c             	add    esp,0xc
c00164f7:	c3                   	ret    

c00164f8 <LogicalDisk::open(int, int, void*)>:
c00164f8:	83 ec 18             	sub    esp,0x18
c00164fb:	68 c0 b3 02 c0       	push   0xc002b3c0
c0016500:	e8 6e 41 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0016505:	83 c8 ff             	or     eax,0xffffffff
c0016508:	83 c4 1c             	add    esp,0x1c
c001650b:	c3                   	ret    

c001650c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001650c:	53                   	push   ebx
c001650d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016511:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016515:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016519:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001651f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016525:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001652b:	77 10                	ja     c001653d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001652d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016533:	89 d3                	mov    ebx,edx
c0016535:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001653b:	72 05                	jb     c0016542 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001653d:	83 c8 ff             	or     eax,0xffffffff
c0016540:	89 c2                	mov    edx,eax
c0016542:	5b                   	pop    ebx
c0016543:	c3                   	ret    

c0016544 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016544:	56                   	push   esi
c0016545:	83 c8 ff             	or     eax,0xffffffff
c0016548:	53                   	push   ebx
c0016549:	89 c2                	mov    edx,eax
c001654b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001654f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016553:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016557:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001655d:	77 27                	ja     c0016586 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001655f:	89 d8                	mov    eax,ebx
c0016561:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016567:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001656d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016572:	89 c2                	mov    edx,eax
c0016574:	73 10                	jae    c0016586 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016576:	89 c8                	mov    eax,ecx
c0016578:	89 da                	mov    edx,ebx
c001657a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016580:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016586:	5b                   	pop    ebx
c0016587:	5e                   	pop    esi
c0016588:	c3                   	ret    
c0016589:	90                   	nop

c001658a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001658a:	83 ec 1c             	sub    esp,0x1c
c001658d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016591:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016595:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016599:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001659d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00165a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00165a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00165a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b0:	83 ec 08             	sub    esp,0x8
c00165b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165b7:	50                   	push   eax
c00165b8:	e8 1b e0 ff ff       	call   c00145d8 <Device::Device(char const*)>
c00165bd:	83 c4 10             	add    esp,0x10
c00165c0:	ba 44 b4 02 c0       	mov    edx,0xc002b444
c00165c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c9:	89 10                	mov    DWORD PTR [eax],edx
c00165cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165cf:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165da:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e5:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165ef:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165fb:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016601:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016607:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001660b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001660e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016612:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016618:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001661e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016622:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016626:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001662c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016630:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001663a:	90                   	nop
c001663b:	83 c4 1c             	add    esp,0x1c
c001663e:	c3                   	ret    
c001663f:	90                   	nop

c0016640 <LogicalDisk::assignDriveLetter()>:
c0016640:	55                   	push   ebp
c0016641:	57                   	push   edi
c0016642:	56                   	push   esi
c0016643:	53                   	push   ebx
c0016644:	83 ec 14             	sub    esp,0x14
c0016647:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001664b:	8b 3d 80 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec80
c0016651:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016657:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001665b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016661:	8b 3d 84 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec84
c0016667:	3c 01                	cmp    al,0x1
c0016669:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001666d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016671:	19 c0                	sbb    eax,eax
c0016673:	83 e0 02             	and    eax,0x2
c0016676:	83 c0 41             	add    eax,0x41
c0016679:	0f be e8             	movsx  ebp,al
c001667c:	3c 43                	cmp    al,0x43
c001667e:	75 10                	jne    c0016690 <LogicalDisk::assignDriveLetter()+0x50>
c0016680:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016687:	75 5d                	jne    c00166e6 <LogicalDisk::assignDriveLetter()+0xa6>
c0016689:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001668e:	75 56                	jne    c00166e6 <LogicalDisk::assignDriveLetter()+0xa6>
c0016690:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016693:	ba 01 00 00 00       	mov    edx,0x1
c0016698:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001669c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00166a0:	d3 e2                	shl    edx,cl
c00166a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166a6:	89 d7                	mov    edi,edx
c00166a8:	89 d6                	mov    esi,edx
c00166aa:	c1 ff 1f             	sar    edi,0x1f
c00166ad:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00166b1:	21 f9                	and    ecx,edi
c00166b3:	09 d1                	or     ecx,edx
c00166b5:	75 2f                	jne    c00166e6 <LogicalDisk::assignDriveLetter()+0xa6>
c00166b7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166bf:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166c5:	09 f2                	or     edx,esi
c00166c7:	89 15 80 ec 02 c0    	mov    DWORD PTR ds:0xc002ec80,edx
c00166cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166d1:	09 fa                	or     edx,edi
c00166d3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166d7:	89 15 84 ec 02 c0    	mov    DWORD PTR ds:0xc002ec84,edx
c00166dd:	89 1c bd a0 ec 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1360],ebx
c00166e4:	eb 08                	jmp    c00166ee <LogicalDisk::assignDriveLetter()+0xae>
c00166e6:	45                   	inc    ebp
c00166e7:	40                   	inc    eax
c00166e8:	3c 5b                	cmp    al,0x5b
c00166ea:	75 90                	jne    c001667c <LogicalDisk::assignDriveLetter()+0x3c>
c00166ec:	31 c0                	xor    eax,eax
c00166ee:	83 c4 14             	add    esp,0x14
c00166f1:	5b                   	pop    ebx
c00166f2:	5e                   	pop    esi
c00166f3:	5f                   	pop    edi
c00166f4:	5d                   	pop    ebp
c00166f5:	c3                   	ret    

c00166f6 <LogicalDisk::mount()>:
c00166f6:	56                   	push   esi
c00166f7:	53                   	push   ebx
c00166f8:	51                   	push   ecx
c00166f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166fd:	8b 1d 0c e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e80c
c0016703:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001670d:	85 db                	test   ebx,ebx
c001670f:	74 50                	je     c0016761 <LogicalDisk::mount()+0x6b>
c0016711:	e8 6d 77 00 00       	call   c001de83 <getIRQNestingLevel()>
c0016716:	52                   	push   edx
c0016717:	52                   	push   edx
c0016718:	50                   	push   eax
c0016719:	68 e4 b3 02 c0       	push   0xc002b3e4
c001671e:	e8 9e c8 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0016723:	83 c4 0c             	add    esp,0xc
c0016726:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001672d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001672f:	83 e8 41             	sub    eax,0x41
c0016732:	50                   	push   eax
c0016733:	56                   	push   esi
c0016734:	53                   	push   ebx
c0016735:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016738:	83 c4 10             	add    esp,0x10
c001673b:	84 c0                	test   al,al
c001673d:	74 08                	je     c0016747 <LogicalDisk::mount()+0x51>
c001673f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016745:	eb 1c                	jmp    c0016763 <LogicalDisk::mount()+0x6d>
c0016747:	e8 37 77 00 00       	call   c001de83 <getIRQNestingLevel()>
c001674c:	51                   	push   ecx
c001674d:	51                   	push   ecx
c001674e:	50                   	push   eax
c001674f:	68 ff b3 02 c0       	push   0xc002b3ff
c0016754:	e8 68 c8 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0016759:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001675c:	83 c4 10             	add    esp,0x10
c001675f:	eb ac                	jmp    c001670d <LogicalDisk::mount()+0x17>
c0016761:	31 c0                	xor    eax,eax
c0016763:	5a                   	pop    edx
c0016764:	5b                   	pop    ebx
c0016765:	5e                   	pop    esi
c0016766:	c3                   	ret    
c0016767:	90                   	nop

c0016768 <LogicalDisk::unmount()>:
c0016768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001676c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016776:	c3                   	ret    
c0016777:	90                   	nop

c0016778 <LogicalDisk::eject()>:
c0016778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001677c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016782:	8b 10                	mov    edx,DWORD PTR [eax]
c0016784:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016788:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001678b:	90                   	nop

c001678c <LogicalDisk::unassignDriveLetter()>:
c001678c:	57                   	push   edi
c001678d:	56                   	push   esi
c001678e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016792:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016799:	84 c9                	test   cl,cl
c001679b:	75 0f                	jne    c00167ac <LogicalDisk::unassignDriveLetter()+0x20>
c001679d:	c7 44 24 0c 1a b4 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b41a
c00167a5:	5e                   	pop    esi
c00167a6:	5f                   	pop    edi
c00167a7:	e9 c7 3e 00 00       	jmp    c001a673 <Krnl::panic(char const*)>
c00167ac:	83 e9 41             	sub    ecx,0x41
c00167af:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167b6:	b8 01 00 00 00       	mov    eax,0x1
c00167bb:	c7 04 8d a0 ec 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1360],0x0
c00167c6:	d3 e0                	shl    eax,cl
c00167c8:	89 c7                	mov    edi,eax
c00167ca:	f7 d0                	not    eax
c00167cc:	c1 ff 1f             	sar    edi,0x1f
c00167cf:	21 05 80 ec 02 c0    	and    DWORD PTR ds:0xc002ec80,eax
c00167d5:	89 fe                	mov    esi,edi
c00167d7:	f7 d6                	not    esi
c00167d9:	21 35 84 ec 02 c0    	and    DWORD PTR ds:0xc002ec84,esi
c00167df:	5e                   	pop    esi
c00167e0:	5f                   	pop    edi
c00167e1:	c3                   	ret    

c00167e2 <LogicalDisk::read(unsigned long long, int, void*)>:
c00167e2:	57                   	push   edi
c00167e3:	56                   	push   esi
c00167e4:	53                   	push   ebx
c00167e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167ed:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167f5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167fb:	77 41                	ja     c001683e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167fd:	99                   	cdq    
c00167fe:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016804:	01 c8                	add    eax,ecx
c0016806:	11 da                	adc    edx,ebx
c0016808:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001680e:	19 d7                	sbb    edi,edx
c0016810:	72 33                	jb     c0016845 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016812:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016818:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001681e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016822:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016826:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001682c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016832:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016836:	5b                   	pop    ebx
c0016837:	5e                   	pop    esi
c0016838:	5f                   	pop    edi
c0016839:	e9 b0 0a 00 00       	jmp    c00172ee <VCache::read(unsigned long long, int, void*)>
c001683e:	b8 05 00 00 00       	mov    eax,0x5
c0016843:	eb 05                	jmp    c001684a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016845:	b8 07 00 00 00       	mov    eax,0x7
c001684a:	5b                   	pop    ebx
c001684b:	5e                   	pop    esi
c001684c:	5f                   	pop    edi
c001684d:	c3                   	ret    

c001684e <LogicalDisk::write(unsigned long long, int, void*)>:
c001684e:	57                   	push   edi
c001684f:	56                   	push   esi
c0016850:	53                   	push   ebx
c0016851:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016855:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016859:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001685d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016861:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016867:	77 41                	ja     c00168aa <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016869:	99                   	cdq    
c001686a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016870:	01 c8                	add    eax,ecx
c0016872:	11 da                	adc    edx,ebx
c0016874:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001687a:	19 d7                	sbb    edi,edx
c001687c:	72 33                	jb     c00168b1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001687e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016884:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001688a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001688e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016892:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016898:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001689e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168a2:	5b                   	pop    ebx
c00168a3:	5e                   	pop    esi
c00168a4:	5f                   	pop    edi
c00168a5:	e9 4e 09 00 00       	jmp    c00171f8 <VCache::write(unsigned long long, int, void*)>
c00168aa:	b8 05 00 00 00       	mov    eax,0x5
c00168af:	eb 05                	jmp    c00168b6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00168b1:	b8 07 00 00 00       	mov    eax,0x7
c00168b6:	5b                   	pop    ebx
c00168b7:	5e                   	pop    esi
c00168b8:	5f                   	pop    edi
c00168b9:	c3                   	ret    

c00168ba <Mouse::Mouse(char const*)>:
c00168ba:	83 ec 0c             	sub    esp,0xc
c00168bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168c1:	83 ec 08             	sub    esp,0x8
c00168c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168c8:	50                   	push   eax
c00168c9:	e8 0a dd ff ff       	call   c00145d8 <Device::Device(char const*)>
c00168ce:	83 c4 10             	add    esp,0x10
c00168d1:	ba 70 b4 02 c0       	mov    edx,0xc002b470
c00168d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168da:	89 10                	mov    DWORD PTR [eax],edx
c00168dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168e0:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168ea:	90                   	nop
c00168eb:	83 c4 0c             	add    esp,0xc
c00168ee:	c3                   	ret    
c00168ef:	90                   	nop

c00168f0 <Mouse::~Mouse()>:
c00168f0:	83 ec 0c             	sub    esp,0xc
c00168f3:	ba 70 b4 02 c0       	mov    edx,0xc002b470
c00168f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168fc:	89 10                	mov    DWORD PTR [eax],edx
c00168fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016902:	83 ec 0c             	sub    esp,0xc
c0016905:	50                   	push   eax
c0016906:	e8 af d9 ff ff       	call   c00142ba <Device::~Device()>
c001690b:	83 c4 10             	add    esp,0x10
c001690e:	90                   	nop
c001690f:	83 c4 0c             	add    esp,0xc
c0016912:	c3                   	ret    
c0016913:	90                   	nop

c0016914 <Mouse::~Mouse()>:
c0016914:	83 ec 0c             	sub    esp,0xc
c0016917:	83 ec 0c             	sub    esp,0xc
c001691a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001691e:	e8 cd ff ff ff       	call   c00168f0 <Mouse::~Mouse()>
c0016923:	83 c4 10             	add    esp,0x10
c0016926:	83 ec 08             	sub    esp,0x8
c0016929:	68 58 01 00 00       	push   0x158
c001692e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016932:	e8 aa c5 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0016937:	83 c4 10             	add    esp,0x10
c001693a:	83 c4 0c             	add    esp,0xc
c001693d:	c3                   	ret    

c001693e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001693e:	55                   	push   ebp
c001693f:	57                   	push   edi
c0016940:	56                   	push   esi
c0016941:	53                   	push   ebx
c0016942:	81 ec 28 01 00 00    	sub    esp,0x128
c0016948:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001694f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016956:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001695d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016968:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001696c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016973:	e8 5c dd ff ff       	call   c00146d4 <Device::getName()>
c0016978:	5a                   	pop    edx
c0016979:	59                   	pop    ecx
c001697a:	50                   	push   eax
c001697b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001697f:	55                   	push   ebp
c0016980:	e8 af 9e fe ff       	call   c0000834 <strcpy>
c0016985:	5b                   	pop    ebx
c0016986:	58                   	pop    eax
c0016987:	68 94 b4 02 c0       	push   0xc002b494
c001698c:	55                   	push   ebp
c001698d:	e8 e2 9f fe ff       	call   c0000974 <strcat>
c0016992:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016999:	e8 44 8f ff ff       	call   c000f8e2 <malloc>
c001699e:	83 c4 0c             	add    esp,0xc
c00169a1:	89 c3                	mov    ebx,eax
c00169a3:	57                   	push   edi
c00169a4:	56                   	push   esi
c00169a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169ad:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169b4:	55                   	push   ebp
c00169b5:	50                   	push   eax
c00169b6:	e8 cf fb ff ff       	call   c001658a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169bb:	83 c4 14             	add    esp,0x14
c00169be:	53                   	push   ebx
c00169bf:	e8 7c fc ff ff       	call   c0016640 <LogicalDisk::assignDriveLetter()>
c00169c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169c7:	89 c6                	mov    esi,eax
c00169c9:	e8 28 fd ff ff       	call   c00166f6 <LogicalDisk::mount()>
c00169ce:	58                   	pop    eax
c00169cf:	5a                   	pop    edx
c00169d0:	53                   	push   ebx
c00169d1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169d8:	e8 0b da ff ff       	call   c00143e8 <Device::addChild(Device*)>
c00169dd:	59                   	pop    ecx
c00169de:	89 f0                	mov    eax,esi
c00169e0:	5b                   	pop    ebx
c00169e1:	0f be f0             	movsx  esi,al
c00169e4:	56                   	push   esi
c00169e5:	68 9f b4 02 c0       	push   0xc002b49f
c00169ea:	e8 d2 c5 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00169ef:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169f5:	5b                   	pop    ebx
c00169f6:	5e                   	pop    esi
c00169f7:	5f                   	pop    edi
c00169f8:	5d                   	pop    ebp
c00169f9:	c3                   	ret    

c00169fa <createPartitionsForDisk(PhysicalDisk*)>:
c00169fa:	55                   	push   ebp
c00169fb:	57                   	push   edi
c00169fc:	56                   	push   esi
c00169fd:	53                   	push   ebx
c00169fe:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a04:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a0b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a11:	3d 00 02 00 00       	cmp    eax,0x200
c0016a16:	74 27                	je     c0016a3f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a18:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a1e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a24:	83 ec 10             	sub    esp,0x10
c0016a27:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a2b:	99                   	cdq    
c0016a2c:	c1 e6 0a             	shl    esi,0xa
c0016a2f:	52                   	push   edx
c0016a30:	89 fd                	mov    ebp,edi
c0016a32:	50                   	push   eax
c0016a33:	55                   	push   ebp
c0016a34:	56                   	push   esi
c0016a35:	e8 42 00 01 00       	call   c0026a7c <__udivdi3>
c0016a3a:	e9 b1 00 00 00       	jmp    c0016af0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a3f:	83 ec 0c             	sub    esp,0xc
c0016a42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a44:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a48:	56                   	push   esi
c0016a49:	6a 01                	push   0x1
c0016a4b:	6a 00                	push   0x0
c0016a4d:	6a 00                	push   0x0
c0016a4f:	53                   	push   ebx
c0016a50:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a53:	83 c4 20             	add    esp,0x20
c0016a56:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a5e:	75 0a                	jne    c0016a6a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a60:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a68:	74 2c                	je     c0016a96 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a6a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a70:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a76:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a7c:	83 ec 10             	sub    esp,0x10
c0016a7f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a83:	89 f7                	mov    edi,esi
c0016a85:	c1 e0 0a             	shl    eax,0xa
c0016a88:	c1 ff 1f             	sar    edi,0x1f
c0016a8b:	57                   	push   edi
c0016a8c:	56                   	push   esi
c0016a8d:	52                   	push   edx
c0016a8e:	50                   	push   eax
c0016a8f:	e8 e8 ff 00 00       	call   c0026a7c <__udivdi3>
c0016a94:	eb 5a                	jmp    c0016af0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a96:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a9d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016aa4:	83 e1 7f             	and    ecx,0x7f
c0016aa7:	83 e0 7f             	and    eax,0x7f
c0016aaa:	01 c1                	add    ecx,eax
c0016aac:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016ab3:	83 e0 7f             	and    eax,0x7f
c0016ab6:	01 c1                	add    ecx,eax
c0016ab8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016abf:	83 e0 7f             	and    eax,0x7f
c0016ac2:	00 c1                	add    cl,al
c0016ac4:	74 41                	je     c0016b07 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016ac6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016acc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ad2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ad8:	83 ec 10             	sub    esp,0x10
c0016adb:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016adf:	89 f7                	mov    edi,esi
c0016ae1:	c1 e0 0a             	shl    eax,0xa
c0016ae4:	c1 ff 1f             	sar    edi,0x1f
c0016ae7:	57                   	push   edi
c0016ae8:	56                   	push   esi
c0016ae9:	52                   	push   edx
c0016aea:	50                   	push   eax
c0016aeb:	e8 8c ff 00 00       	call   c0026a7c <__udivdi3>
c0016af0:	83 c4 14             	add    esp,0x14
c0016af3:	52                   	push   edx
c0016af4:	50                   	push   eax
c0016af5:	6a 00                	push   0x0
c0016af7:	6a 00                	push   0x0
c0016af9:	53                   	push   ebx
c0016afa:	e8 3f fe ff ff       	call   c001693e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016aff:	83 c4 20             	add    esp,0x20
c0016b02:	e9 79 01 00 00       	jmp    c0016c80 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b07:	89 f0                	mov    eax,esi
c0016b09:	31 f6                	xor    esi,esi
c0016b0b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b12:	75 02                	jne    c0016b16 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b14:	89 f1                	mov    ecx,esi
c0016b16:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b1d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b24:	c1 e2 08             	shl    edx,0x8
c0016b27:	c1 e7 10             	shl    edi,0x10
c0016b2a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b32:	09 fa                	or     edx,edi
c0016b34:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b3c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b43:	83 c0 10             	add    eax,0x10
c0016b46:	09 fa                	or     edx,edi
c0016b48:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b4f:	c1 e7 18             	shl    edi,0x18
c0016b52:	09 fa                	or     edx,edi
c0016b54:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b5b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b5f:	c1 e7 10             	shl    edi,0x10
c0016b62:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b69:	c1 e2 08             	shl    edx,0x8
c0016b6c:	09 fa                	or     edx,edi
c0016b6e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b75:	09 fa                	or     edx,edi
c0016b77:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b7e:	c1 e7 18             	shl    edi,0x18
c0016b81:	09 fa                	or     edx,edi
c0016b83:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b87:	46                   	inc    esi
c0016b88:	83 fe 04             	cmp    esi,0x4
c0016b8b:	0f 85 7a ff ff ff    	jne    c0016b0b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b95:	83 f0 01             	xor    eax,0x1
c0016b98:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b9c:	75 57                	jne    c0016bf5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ba2:	83 f0 01             	xor    eax,0x1
c0016ba5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016ba9:	75 4a                	jne    c0016bf5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bab:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016baf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016bb7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016bbf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016bc5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016bcb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bd1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bd5:	89 f7                	mov    edi,esi
c0016bd7:	c1 e0 0a             	shl    eax,0xa
c0016bda:	c1 ff 1f             	sar    edi,0x1f
c0016bdd:	57                   	push   edi
c0016bde:	56                   	push   esi
c0016bdf:	52                   	push   edx
c0016be0:	50                   	push   eax
c0016be1:	e8 96 fe 00 00       	call   c0026a7c <__udivdi3>
c0016be6:	83 c4 10             	add    esp,0x10
c0016be9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bed:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bf1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016bf5:	84 c9                	test   cl,cl
c0016bf7:	74 53                	je     c0016c4c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016bf9:	0f b6 c9             	movzx  ecx,cl
c0016bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c04:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c08:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c14:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c18:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c2c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c30:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c34:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c38:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c3c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c40:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c44:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c48:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c4c:	31 ed                	xor    ebp,ebp
c0016c4e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c52:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c56:	89 f8                	mov    eax,edi
c0016c58:	09 f0                	or     eax,esi
c0016c5a:	74 1e                	je     c0016c7a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c5c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c60:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c64:	89 d1                	mov    ecx,edx
c0016c66:	09 c1                	or     ecx,eax
c0016c68:	74 10                	je     c0016c7a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c6a:	83 ec 0c             	sub    esp,0xc
c0016c6d:	57                   	push   edi
c0016c6e:	56                   	push   esi
c0016c6f:	52                   	push   edx
c0016c70:	50                   	push   eax
c0016c71:	53                   	push   ebx
c0016c72:	e8 c7 fc ff ff       	call   c001693e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c77:	83 c4 20             	add    esp,0x20
c0016c7a:	45                   	inc    ebp
c0016c7b:	83 fd 04             	cmp    ebp,0x4
c0016c7e:	75 ce                	jne    c0016c4e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c80:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c86:	5b                   	pop    ebx
c0016c87:	5e                   	pop    esi
c0016c88:	5f                   	pop    edi
c0016c89:	5d                   	pop    ebp
c0016c8a:	c3                   	ret    
c0016c8b:	90                   	nop

c0016c8c <Serial::Serial(char const*)>:
c0016c8c:	83 ec 0c             	sub    esp,0xc
c0016c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c93:	83 ec 08             	sub    esp,0x8
c0016c96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c9a:	50                   	push   eax
c0016c9b:	e8 38 d9 ff ff       	call   c00145d8 <Device::Device(char const*)>
c0016ca0:	83 c4 10             	add    esp,0x10
c0016ca3:	ba cc b4 02 c0       	mov    edx,0xc002b4cc
c0016ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cac:	89 10                	mov    DWORD PTR [eax],edx
c0016cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016cbc:	90                   	nop
c0016cbd:	83 c4 0c             	add    esp,0xc
c0016cc0:	c3                   	ret    
c0016cc1:	90                   	nop

c0016cc2 <Serial::~Serial()>:
c0016cc2:	83 ec 0c             	sub    esp,0xc
c0016cc5:	ba cc b4 02 c0       	mov    edx,0xc002b4cc
c0016cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cce:	89 10                	mov    DWORD PTR [eax],edx
c0016cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd4:	83 ec 0c             	sub    esp,0xc
c0016cd7:	50                   	push   eax
c0016cd8:	e8 dd d5 ff ff       	call   c00142ba <Device::~Device()>
c0016cdd:	83 c4 10             	add    esp,0x10
c0016ce0:	90                   	nop
c0016ce1:	83 c4 0c             	add    esp,0xc
c0016ce4:	c3                   	ret    
c0016ce5:	90                   	nop

c0016ce6 <Serial::~Serial()>:
c0016ce6:	83 ec 0c             	sub    esp,0xc
c0016ce9:	83 ec 0c             	sub    esp,0xc
c0016cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cf0:	e8 cd ff ff ff       	call   c0016cc2 <Serial::~Serial()>
c0016cf5:	83 c4 10             	add    esp,0x10
c0016cf8:	83 ec 08             	sub    esp,0x8
c0016cfb:	68 58 01 00 00       	push   0x158
c0016d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d04:	e8 d8 c1 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0016d09:	83 c4 10             	add    esp,0x10
c0016d0c:	83 c4 0c             	add    esp,0xc
c0016d0f:	c3                   	ret    

c0016d10 <Timer::Timer(char const*)>:
c0016d10:	83 ec 0c             	sub    esp,0xc
c0016d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d17:	83 ec 08             	sub    esp,0x8
c0016d1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d1e:	50                   	push   eax
c0016d1f:	e8 b4 d8 ff ff       	call   c00145d8 <Device::Device(char const*)>
c0016d24:	83 c4 10             	add    esp,0x10
c0016d27:	ba 10 b5 02 c0       	mov    edx,0xc002b510
c0016d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d30:	89 10                	mov    DWORD PTR [eax],edx
c0016d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d36:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d40:	90                   	nop
c0016d41:	83 c4 0c             	add    esp,0xc
c0016d44:	c3                   	ret    
c0016d45:	90                   	nop

c0016d46 <Timer::~Timer()>:
c0016d46:	83 ec 0c             	sub    esp,0xc
c0016d49:	ba 10 b5 02 c0       	mov    edx,0xc002b510
c0016d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d52:	89 10                	mov    DWORD PTR [eax],edx
c0016d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d58:	83 ec 0c             	sub    esp,0xc
c0016d5b:	50                   	push   eax
c0016d5c:	e8 59 d5 ff ff       	call   c00142ba <Device::~Device()>
c0016d61:	83 c4 10             	add    esp,0x10
c0016d64:	90                   	nop
c0016d65:	83 c4 0c             	add    esp,0xc
c0016d68:	c3                   	ret    
c0016d69:	90                   	nop

c0016d6a <Timer::~Timer()>:
c0016d6a:	83 ec 0c             	sub    esp,0xc
c0016d6d:	83 ec 0c             	sub    esp,0xc
c0016d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d74:	e8 cd ff ff ff       	call   c0016d46 <Timer::~Timer()>
c0016d79:	83 c4 10             	add    esp,0x10
c0016d7c:	83 ec 08             	sub    esp,0x8
c0016d7f:	68 5c 01 00 00       	push   0x15c
c0016d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d88:	e8 54 c1 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0016d8d:	83 c4 10             	add    esp,0x10
c0016d90:	83 c4 0c             	add    esp,0xc
c0016d93:	c3                   	ret    

c0016d94 <Timer::read()>:
c0016d94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d98:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d9e:	c3                   	ret    

c0016d9f <timerHandler(unsigned long long)>:
c0016d9f:	55                   	push   ebp
c0016da0:	57                   	push   edi
c0016da1:	56                   	push   esi
c0016da2:	53                   	push   ebx
c0016da3:	83 ec 0c             	sub    esp,0xc
c0016da6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016daa:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016dae:	01 35 10 ed 02 c0    	add    DWORD PTR ds:0xc002ed10,esi
c0016db4:	11 3d 14 ed 02 c0    	adc    DWORD PTR ds:0xc002ed14,edi
c0016dba:	80 3d 8d e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e68d,0x0
c0016dc1:	0f 84 07 01 00 00    	je     c0016ece <timerHandler(unsigned long long)+0x12f>
c0016dc7:	e8 f3 70 00 00       	call   c001debf <lockStuff()>
c0016dcc:	83 ec 0c             	sub    esp,0xc
c0016dcf:	68 e0 1b 03 c0       	push   0xc0031be0
c0016dd4:	e8 15 1d 01 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dd9:	c7 04 24 e0 1b 03 c0 	mov    DWORD PTR [esp],0xc0031be0
c0016de0:	89 c3                	mov    ebx,eax
c0016de2:	e8 0f 1d 01 00       	call   c0028af6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016de7:	83 c4 10             	add    esp,0x10
c0016dea:	84 c0                	test   al,al
c0016dec:	74 60                	je     c0016e4e <timerHandler(unsigned long long)+0xaf>
c0016dee:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016df4:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016df7:	85 c0                	test   eax,eax
c0016df9:	0f 85 91 00 00 00    	jne    c0016e90 <timerHandler(unsigned long long)+0xf1>
c0016dff:	e9 be 00 00 00       	jmp    c0016ec2 <timerHandler(unsigned long long)+0x123>
c0016e04:	83 ec 0c             	sub    esp,0xc
c0016e07:	55                   	push   ebp
c0016e08:	e8 a3 76 00 00       	call   c001e4b0 <unblockTask(ThreadControlBlock*)>
c0016e0d:	83 c4 10             	add    esp,0x10
c0016e10:	39 eb                	cmp    ebx,ebp
c0016e12:	75 12                	jne    c0016e26 <timerHandler(unsigned long long)+0x87>
c0016e14:	83 ec 0c             	sub    esp,0xc
c0016e17:	68 e0 1b 03 c0       	push   0xc0031be0
c0016e1c:	e8 cd 1c 01 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e21:	89 c3                	mov    ebx,eax
c0016e23:	83 c4 10             	add    esp,0x10
c0016e26:	83 ec 0c             	sub    esp,0xc
c0016e29:	68 e0 1b 03 c0       	push   0xc0031be0
c0016e2e:	e8 c3 1c 01 00       	call   c0028af6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e33:	83 c4 10             	add    esp,0x10
c0016e36:	84 c0                	test   al,al
c0016e38:	75 b4                	jne    c0016dee <timerHandler(unsigned long long)+0x4f>
c0016e3a:	83 ec 0c             	sub    esp,0xc
c0016e3d:	68 e0 1b 03 c0       	push   0xc0031be0
c0016e42:	e8 a7 1c 01 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e47:	83 c4 10             	add    esp,0x10
c0016e4a:	39 d8                	cmp    eax,ebx
c0016e4c:	74 a0                	je     c0016dee <timerHandler(unsigned long long)+0x4f>
c0016e4e:	83 ec 0c             	sub    esp,0xc
c0016e51:	68 e0 1b 03 c0       	push   0xc0031be0
c0016e56:	e8 93 1c 01 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e5b:	c7 04 24 e0 1b 03 c0 	mov    DWORD PTR [esp],0xc0031be0
c0016e62:	89 c5                	mov    ebp,eax
c0016e64:	e8 a9 1c 01 00       	call   c0028b12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e69:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e6c:	83 c4 10             	add    esp,0x10
c0016e6f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e72:	39 15 10 ed 02 c0    	cmp    DWORD PTR ds:0xc002ed10,edx
c0016e78:	a1 14 ed 02 c0       	mov    eax,ds:0xc002ed14
c0016e7d:	19 c8                	sbb    eax,ecx
c0016e7f:	73 83                	jae    c0016e04 <timerHandler(unsigned long long)+0x65>
c0016e81:	50                   	push   eax
c0016e82:	50                   	push   eax
c0016e83:	55                   	push   ebp
c0016e84:	68 e0 1b 03 c0       	push   0xc0031be0
c0016e89:	e8 32 1d 01 00       	call   c0028bc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e8e:	eb 93                	jmp    c0016e23 <timerHandler(unsigned long long)+0x84>
c0016e90:	80 3d 8c e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e68c,0x0
c0016e97:	74 29                	je     c0016ec2 <timerHandler(unsigned long long)+0x123>
c0016e99:	39 c6                	cmp    esi,eax
c0016e9b:	bb 00 00 00 00       	mov    ebx,0x0
c0016ea0:	19 df                	sbb    edi,ebx
c0016ea2:	72 19                	jb     c0016ebd <timerHandler(unsigned long long)+0x11e>
c0016ea4:	e8 ef 6f 00 00       	call   c001de98 <lockScheduler()>
c0016ea9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eae:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016eb1:	e8 1e 73 00 00       	call   c001e1d4 <schedule()>
c0016eb6:	e8 df 6f 00 00       	call   c001de9a <unlockScheduler()>
c0016ebb:	eb 05                	jmp    c0016ec2 <timerHandler(unsigned long long)+0x123>
c0016ebd:	29 f0                	sub    eax,esi
c0016ebf:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016ec2:	83 c4 0c             	add    esp,0xc
c0016ec5:	5b                   	pop    ebx
c0016ec6:	5e                   	pop    esi
c0016ec7:	5f                   	pop    edi
c0016ec8:	5d                   	pop    ebp
c0016ec9:	e9 8b 73 00 00       	jmp    c001e259 <unlockStuff()>
c0016ece:	83 c4 0c             	add    esp,0xc
c0016ed1:	5b                   	pop    ebx
c0016ed2:	5e                   	pop    esi
c0016ed3:	5f                   	pop    edi
c0016ed4:	5d                   	pop    ebp
c0016ed5:	c3                   	ret    

c0016ed6 <setupTimer(int)>:
c0016ed6:	57                   	push   edi
c0016ed7:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0016edc:	56                   	push   esi
c0016edd:	53                   	push   ebx
c0016ede:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ee2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ee8:	83 ec 0c             	sub    esp,0xc
c0016eeb:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ef1:	e8 de d7 ff ff       	call   c00146d4 <Device::getName()>
c0016ef6:	83 c4 10             	add    esp,0x10
c0016ef9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016efc:	0f 85 8d 00 00 00    	jne    c0016f8f <setupTimer(int)+0xb9>
c0016f02:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0016f07:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f0e:	74 7f                	je     c0016f8f <setupTimer(int)+0xb9>
c0016f10:	83 ec 0c             	sub    esp,0xc
c0016f13:	68 5c 01 00 00       	push   0x15c
c0016f18:	e8 c5 89 ff ff       	call   c000f8e2 <malloc>
c0016f1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f20:	89 c3                	mov    ebx,eax
c0016f22:	e8 2b f7 00 00       	call   c0026652 <PIT::PIT()>
c0016f27:	59                   	pop    ecx
c0016f28:	5f                   	pop    edi
c0016f29:	53                   	push   ebx
c0016f2a:	ff 35 88 e6 02 c0    	push   DWORD PTR ds:0xc002e688
c0016f30:	e8 b3 d4 ff ff       	call   c00143e8 <Device::addChild(Device*)>
c0016f35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f37:	6a 00                	push   0x0
c0016f39:	6a 00                	push   0x0
c0016f3b:	56                   	push   esi
c0016f3c:	53                   	push   ebx
c0016f3d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f40:	83 c4 14             	add    esp,0x14
c0016f43:	68 60 01 00 00       	push   0x160
c0016f48:	e8 95 89 ff ff       	call   c000f8e2 <malloc>
c0016f4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f50:	89 c7                	mov    edi,eax
c0016f52:	e8 ab f5 00 00       	call   c0026502 <APICTimer::APICTimer()>
c0016f57:	6a 00                	push   0x0
c0016f59:	6a 00                	push   0x0
c0016f5b:	56                   	push   esi
c0016f5c:	57                   	push   edi
c0016f5d:	e8 a2 f4 00 00       	call   c0026404 <APICTimer::open(int, int, void*)>
c0016f62:	83 c4 20             	add    esp,0x20
c0016f65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f67:	6a 00                	push   0x0
c0016f69:	6a 00                	push   0x0
c0016f6b:	6a 00                	push   0x0
c0016f6d:	53                   	push   ebx
c0016f6e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f71:	58                   	pop    eax
c0016f72:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0016f77:	5a                   	pop    edx
c0016f78:	57                   	push   edi
c0016f79:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f7f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f85:	e8 5e d4 ff ff       	call   c00143e8 <Device::addChild(Device*)>
c0016f8a:	83 c4 10             	add    esp,0x10
c0016f8d:	eb 33                	jmp    c0016fc2 <setupTimer(int)+0xec>
c0016f8f:	83 ec 0c             	sub    esp,0xc
c0016f92:	68 5c 01 00 00       	push   0x15c
c0016f97:	e8 46 89 ff ff       	call   c000f8e2 <malloc>
c0016f9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f9f:	89 c3                	mov    ebx,eax
c0016fa1:	e8 ac f6 00 00       	call   c0026652 <PIT::PIT()>
c0016fa6:	58                   	pop    eax
c0016fa7:	5a                   	pop    edx
c0016fa8:	53                   	push   ebx
c0016fa9:	ff 35 88 e6 02 c0    	push   DWORD PTR ds:0xc002e688
c0016faf:	e8 34 d4 ff ff       	call   c00143e8 <Device::addChild(Device*)>
c0016fb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fb6:	6a 00                	push   0x0
c0016fb8:	6a 00                	push   0x0
c0016fba:	56                   	push   esi
c0016fbb:	53                   	push   ebx
c0016fbc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fbf:	83 c4 20             	add    esp,0x20
c0016fc2:	89 d8                	mov    eax,ebx
c0016fc4:	5b                   	pop    ebx
c0016fc5:	5e                   	pop    esi
c0016fc6:	5f                   	pop    edi
c0016fc7:	c3                   	ret    

c0016fc8 <VCache::VCache(PhysicalDisk*)>:
c0016fc8:	53                   	push   ebx
c0016fc9:	83 ec 18             	sub    esp,0x18
c0016fcc:	ba 40 b5 02 c0       	mov    edx,0xc002b540
c0016fd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd5:	89 10                	mov    DWORD PTR [eax],edx
c0016fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fdb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016fe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016fed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016ff8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016fff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017003:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001700a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017015:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001701c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017020:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017028:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001702f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017036:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001703e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017042:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0017046:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001704e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017052:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017059:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017061:	83 ec 0c             	sub    esp,0xc
c0017064:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017068:	e8 75 88 ff ff       	call   c000f8e2 <malloc>
c001706d:	83 c4 10             	add    esp,0x10
c0017070:	89 c3                	mov    ebx,eax
c0017072:	83 ec 0c             	sub    esp,0xc
c0017075:	53                   	push   ebx
c0017076:	e8 3d 6f 00 00       	call   c001dfb8 <Mutex::Mutex()>
c001707b:	83 c4 10             	add    esp,0x10
c001707e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017082:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017089:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001708d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017094:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001709b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001709f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170b0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170bc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00170c0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00170c3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00170c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ca:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170d2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170d8:	05 00 01 00 00       	add    eax,0x100
c00170dd:	c1 e0 04             	shl    eax,0x4
c00170e0:	83 ec 0c             	sub    esp,0xc
c00170e3:	50                   	push   eax
c00170e4:	e8 f9 87 ff ff       	call   c000f8e2 <malloc>
c00170e9:	83 c4 10             	add    esp,0x10
c00170ec:	89 c2                	mov    edx,eax
c00170ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00170f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017100:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017104:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017108:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001710c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017112:	c1 e0 07             	shl    eax,0x7
c0017115:	83 ec 0c             	sub    esp,0xc
c0017118:	50                   	push   eax
c0017119:	e8 c4 87 ff ff       	call   c000f8e2 <malloc>
c001711e:	83 c4 10             	add    esp,0x10
c0017121:	89 c2                	mov    edx,eax
c0017123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017127:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001712a:	90                   	nop
c001712b:	83 c4 18             	add    esp,0x18
c001712e:	5b                   	pop    ebx
c001712f:	c3                   	ret    

c0017130 <VCache::invalidateReadBuffer()>:
c0017130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017134:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001713a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001713e:	c3                   	ret    
c001713f:	90                   	nop

c0017140 <VCache::writeWriteBuffer()>:
c0017140:	53                   	push   ebx
c0017141:	83 ec 14             	sub    esp,0x14
c0017144:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017148:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001714b:	8b 10                	mov    edx,DWORD PTR [eax]
c001714d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017150:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017153:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017156:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017159:	50                   	push   eax
c001715a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001715d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017164:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001716b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001716f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017176:	83 c4 28             	add    esp,0x28
c0017179:	5b                   	pop    ebx
c001717a:	c3                   	ret    
c001717b:	90                   	nop

c001717c <VCache::~VCache()>:
c001717c:	83 ec 0c             	sub    esp,0xc
c001717f:	ba 40 b5 02 c0       	mov    edx,0xc002b540
c0017184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017188:	89 10                	mov    DWORD PTR [eax],edx
c001718a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001718e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017191:	84 c0                	test   al,al
c0017193:	74 0f                	je     c00171a4 <VCache::~VCache()+0x28>
c0017195:	83 ec 0c             	sub    esp,0xc
c0017198:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001719c:	e8 9f ff ff ff       	call   c0017140 <VCache::writeWriteBuffer()>
c00171a1:	83 c4 10             	add    esp,0x10
c00171a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171a8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171ab:	83 ec 0c             	sub    esp,0xc
c00171ae:	50                   	push   eax
c00171af:	e8 3e 87 ff ff       	call   c000f8f2 <free>
c00171b4:	83 c4 10             	add    esp,0x10
c00171b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171be:	83 ec 0c             	sub    esp,0xc
c00171c1:	50                   	push   eax
c00171c2:	e8 2b 87 ff ff       	call   c000f8f2 <free>
c00171c7:	83 c4 10             	add    esp,0x10
c00171ca:	90                   	nop
c00171cb:	83 c4 0c             	add    esp,0xc
c00171ce:	c3                   	ret    
c00171cf:	90                   	nop

c00171d0 <VCache::~VCache()>:
c00171d0:	83 ec 0c             	sub    esp,0xc
c00171d3:	83 ec 0c             	sub    esp,0xc
c00171d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171da:	e8 9d ff ff ff       	call   c001717c <VCache::~VCache()>
c00171df:	83 c4 10             	add    esp,0x10
c00171e2:	83 ec 08             	sub    esp,0x8
c00171e5:	6a 44                	push   0x44
c00171e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171eb:	e8 f1 bc ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c00171f0:	83 c4 10             	add    esp,0x10
c00171f3:	83 c4 0c             	add    esp,0xc
c00171f6:	c3                   	ret    
c00171f7:	90                   	nop

c00171f8 <VCache::write(unsigned long long, int, void*)>:
c00171f8:	55                   	push   ebp
c00171f9:	57                   	push   edi
c00171fa:	56                   	push   esi
c00171fb:	53                   	push   ebx
c00171fc:	83 ec 28             	sub    esp,0x28
c00171ff:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017203:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017207:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001720b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001720f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017212:	e8 03 72 00 00       	call   c001e41a <Semaphore::acquire()>
c0017217:	83 c4 10             	add    esp,0x10
c001721a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001721e:	74 0c                	je     c001722c <VCache::write(unsigned long long, int, void*)+0x34>
c0017220:	83 ec 0c             	sub    esp,0xc
c0017223:	53                   	push   ebx
c0017224:	e8 07 ff ff ff       	call   c0017130 <VCache::invalidateReadBuffer()>
c0017229:	83 c4 10             	add    esp,0x10
c001722c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017230:	74 66                	je     c0017298 <VCache::write(unsigned long long, int, void*)+0xa0>
c0017232:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017235:	99                   	cdq    
c0017236:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001723a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001723d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017240:	89 c1                	mov    ecx,eax
c0017242:	89 d0                	mov    eax,edx
c0017244:	31 f1                	xor    ecx,esi
c0017246:	31 f8                	xor    eax,edi
c0017248:	89 ca                	mov    edx,ecx
c001724a:	09 c2                	or     edx,eax
c001724c:	75 3e                	jne    c001728c <VCache::write(unsigned long long, int, void*)+0x94>
c001724e:	83 fd 01             	cmp    ebp,0x1
c0017251:	75 39                	jne    c001728c <VCache::write(unsigned long long, int, void*)+0x94>
c0017253:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017256:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001725c:	51                   	push   ecx
c001725d:	50                   	push   eax
c001725e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017262:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017266:	0f af c8             	imul   ecx,eax
c0017269:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001726c:	51                   	push   ecx
c001726d:	e8 d2 94 fe ff       	call   c0000744 <memcpy>
c0017272:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017275:	83 c4 10             	add    esp,0x10
c0017278:	40                   	inc    eax
c0017279:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001727c:	83 c0 80             	add    eax,0xffffff80
c001727f:	75 57                	jne    c00172d8 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017281:	83 ec 0c             	sub    esp,0xc
c0017284:	53                   	push   ebx
c0017285:	e8 b6 fe ff ff       	call   c0017140 <VCache::writeWriteBuffer()>
c001728a:	eb 34                	jmp    c00172c0 <VCache::write(unsigned long long, int, void*)+0xc8>
c001728c:	83 ec 0c             	sub    esp,0xc
c001728f:	53                   	push   ebx
c0017290:	e8 ab fe ff ff       	call   c0017140 <VCache::writeWriteBuffer()>
c0017295:	83 c4 10             	add    esp,0x10
c0017298:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001729b:	83 fd 7f             	cmp    ebp,0x7f
c001729e:	7f 25                	jg     c00172c5 <VCache::write(unsigned long long, int, void*)+0xcd>
c00172a0:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172a3:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172a6:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00172a9:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172ad:	52                   	push   edx
c00172ae:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00172b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00172b8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00172bb:	e8 84 94 fe ff       	call   c0000744 <memcpy>
c00172c0:	83 c4 10             	add    esp,0x10
c00172c3:	eb 13                	jmp    c00172d8 <VCache::write(unsigned long long, int, void*)+0xe0>
c00172c5:	83 ec 0c             	sub    esp,0xc
c00172c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00172ca:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00172ce:	55                   	push   ebp
c00172cf:	57                   	push   edi
c00172d0:	56                   	push   esi
c00172d1:	50                   	push   eax
c00172d2:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00172d5:	83 c4 20             	add    esp,0x20
c00172d8:	83 ec 0c             	sub    esp,0xc
c00172db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172de:	e8 e5 76 00 00       	call   c001e9c8 <Semaphore::release()>
c00172e3:	83 c4 2c             	add    esp,0x2c
c00172e6:	31 c0                	xor    eax,eax
c00172e8:	5b                   	pop    ebx
c00172e9:	5e                   	pop    esi
c00172ea:	5f                   	pop    edi
c00172eb:	5d                   	pop    ebp
c00172ec:	c3                   	ret    
c00172ed:	90                   	nop

c00172ee <VCache::read(unsigned long long, int, void*)>:
c00172ee:	55                   	push   ebp
c00172ef:	57                   	push   edi
c00172f0:	56                   	push   esi
c00172f1:	53                   	push   ebx
c00172f2:	83 ec 28             	sub    esp,0x28
c00172f5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172fd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017301:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017305:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017309:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001730d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017311:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017314:	e8 01 71 00 00       	call   c001e41a <Semaphore::acquire()>
c0017319:	83 c4 10             	add    esp,0x10
c001731c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017320:	74 0c                	je     c001732e <VCache::read(unsigned long long, int, void*)+0x40>
c0017322:	83 ec 0c             	sub    esp,0xc
c0017325:	53                   	push   ebx
c0017326:	e8 15 fe ff ff       	call   c0017140 <VCache::writeWriteBuffer()>
c001732b:	83 c4 10             	add    esp,0x10
c001732e:	83 fe 01             	cmp    esi,0x1
c0017331:	0f 85 80 00 00 00    	jne    c00173b7 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017337:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001733a:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017341:	75 74                	jne    c00173b7 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017343:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017346:	89 d1                	mov    ecx,edx
c0017348:	f7 d9                	neg    ecx
c001734a:	89 cf                	mov    edi,ecx
c001734c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017350:	c1 ff 1f             	sar    edi,0x1f
c0017353:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017356:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001735a:	89 ce                	mov    esi,ecx
c001735c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017360:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017364:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017368:	89 cf                	mov    edi,ecx
c001736a:	74 0a                	je     c0017376 <VCache::read(unsigned long long, int, void*)+0x88>
c001736c:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001736f:	75 05                	jne    c0017376 <VCache::read(unsigned long long, int, void*)+0x88>
c0017371:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017374:	74 1c                	je     c0017392 <VCache::read(unsigned long long, int, void*)+0xa4>
c0017376:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001737a:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001737d:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017380:	83 ec 0c             	sub    esp,0xc
c0017383:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017385:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017388:	52                   	push   edx
c0017389:	57                   	push   edi
c001738a:	56                   	push   esi
c001738b:	50                   	push   eax
c001738c:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001738f:	83 c4 20             	add    esp,0x20
c0017392:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017395:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001739b:	50                   	push   eax
c001739c:	52                   	push   edx
c001739d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173a0:	48                   	dec    eax
c00173a1:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00173a5:	0f af c2             	imul   eax,edx
c00173a8:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00173ab:	50                   	push   eax
c00173ac:	55                   	push   ebp
c00173ad:	e8 92 93 fe ff       	call   c0000744 <memcpy>
c00173b2:	83 c4 10             	add    esp,0x10
c00173b5:	eb 21                	jmp    c00173d8 <VCache::read(unsigned long long, int, void*)+0xea>
c00173b7:	83 ec 0c             	sub    esp,0xc
c00173ba:	53                   	push   ebx
c00173bb:	e8 70 fd ff ff       	call   c0017130 <VCache::invalidateReadBuffer()>
c00173c0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00173c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173c8:	56                   	push   esi
c00173c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173d1:	50                   	push   eax
c00173d2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173d5:	83 c4 20             	add    esp,0x20
c00173d8:	83 ec 0c             	sub    esp,0xc
c00173db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173de:	e8 e5 75 00 00       	call   c001e9c8 <Semaphore::release()>
c00173e3:	83 c4 2c             	add    esp,0x2c
c00173e6:	31 c0                	xor    eax,eax
c00173e8:	5b                   	pop    ebx
c00173e9:	5e                   	pop    esi
c00173ea:	5f                   	pop    edi
c00173eb:	5d                   	pop    ebp
c00173ec:	c3                   	ret    
c00173ed:	90                   	nop

c00173ee <Video::putrect(int, int, int, int, unsigned int)>:
c00173ee:	55                   	push   ebp
c00173ef:	57                   	push   edi
c00173f0:	56                   	push   esi
c00173f1:	53                   	push   ebx
c00173f2:	83 ec 1c             	sub    esp,0x1c
c00173f5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00173f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173fd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017401:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017405:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017409:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001740d:	01 df                	add    edi,ebx
c001740f:	39 fb                	cmp    ebx,edi
c0017411:	7d 1f                	jge    c0017432 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017413:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017417:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001741b:	7d 12                	jge    c001742f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001741d:	8b 16                	mov    edx,DWORD PTR [esi]
c001741f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017423:	53                   	push   ebx
c0017424:	55                   	push   ebp
c0017425:	45                   	inc    ebp
c0017426:	56                   	push   esi
c0017427:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001742a:	83 c4 10             	add    esp,0x10
c001742d:	eb e8                	jmp    c0017417 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001742f:	43                   	inc    ebx
c0017430:	eb dd                	jmp    c001740f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017432:	83 c4 1c             	add    esp,0x1c
c0017435:	5b                   	pop    ebx
c0017436:	5e                   	pop    esi
c0017437:	5f                   	pop    edi
c0017438:	5d                   	pop    ebp
c0017439:	c3                   	ret    

c001743a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001743a:	55                   	push   ebp
c001743b:	57                   	push   edi
c001743c:	31 ff                	xor    edi,edi
c001743e:	56                   	push   esi
c001743f:	53                   	push   ebx
c0017440:	83 ec 1c             	sub    esp,0x1c
c0017443:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017447:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001744b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017452:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001745b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001745f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017463:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017466:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001746a:	01 f9                	add    ecx,edi
c001746c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017470:	7d 2f                	jge    c00174a1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017472:	31 f6                	xor    esi,esi
c0017474:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017478:	01 f2                	add    edx,esi
c001747a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001747e:	7d 1a                	jge    c001749a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017480:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017483:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017486:	46                   	inc    esi
c0017487:	51                   	push   ecx
c0017488:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001748c:	52                   	push   edx
c001748d:	55                   	push   ebp
c001748e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017491:	83 c4 10             	add    esp,0x10
c0017494:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017498:	eb da                	jmp    c0017474 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001749a:	47                   	inc    edi
c001749b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001749f:	eb c5                	jmp    c0017466 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00174a1:	83 c4 1c             	add    esp,0x1c
c00174a4:	5b                   	pop    ebx
c00174a5:	5e                   	pop    esi
c00174a6:	5f                   	pop    edi
c00174a7:	5d                   	pop    ebp
c00174a8:	c3                   	ret    
c00174a9:	90                   	nop

c00174aa <Video::blit(unsigned int*, int, int, int, int)>:
c00174aa:	55                   	push   ebp
c00174ab:	57                   	push   edi
c00174ac:	56                   	push   esi
c00174ad:	53                   	push   ebx
c00174ae:	83 ec 1c             	sub    esp,0x1c
c00174b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174b9:	85 c0                	test   eax,eax
c00174bb:	79 02                	jns    c00174bf <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174bd:	31 c0                	xor    eax,eax
c00174bf:	c1 e0 02             	shl    eax,0x2
c00174c2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174ca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174ce:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174d2:	39 d8                	cmp    eax,ebx
c00174d4:	7e 49                	jle    c001751f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174d6:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174dc:	7c 41                	jl     c001751f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174de:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00174e2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174e6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174ea:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00174ee:	39 f9                	cmp    ecx,edi
c00174f0:	7e 22                	jle    c0017514 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00174f2:	83 c5 04             	add    ebp,0x4
c00174f5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174fb:	7c 14                	jl     c0017511 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00174fd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00174ff:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017502:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017506:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001750a:	56                   	push   esi
c001750b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001750e:	83 c4 10             	add    esp,0x10
c0017511:	47                   	inc    edi
c0017512:	eb d2                	jmp    c00174e6 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017514:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017518:	43                   	inc    ebx
c0017519:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001751d:	eb ab                	jmp    c00174ca <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001751f:	83 c4 1c             	add    esp,0x1c
c0017522:	5b                   	pop    ebx
c0017523:	5e                   	pop    esi
c0017524:	5f                   	pop    edi
c0017525:	5d                   	pop    ebp
c0017526:	c3                   	ret    
c0017527:	90                   	nop

c0017528 <Video::clearScreen(unsigned int)>:
c0017528:	57                   	push   edi
c0017529:	56                   	push   esi
c001752a:	53                   	push   ebx
c001752b:	31 db                	xor    ebx,ebx
c001752d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017531:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017537:	7e 1f                	jle    c0017558 <Video::clearScreen(unsigned int)+0x30>
c0017539:	31 ff                	xor    edi,edi
c001753b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017541:	7e 12                	jle    c0017555 <Video::clearScreen(unsigned int)+0x2d>
c0017543:	8b 06                	mov    eax,DWORD PTR [esi]
c0017545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017549:	53                   	push   ebx
c001754a:	57                   	push   edi
c001754b:	47                   	inc    edi
c001754c:	56                   	push   esi
c001754d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017550:	83 c4 10             	add    esp,0x10
c0017553:	eb e6                	jmp    c001753b <Video::clearScreen(unsigned int)+0x13>
c0017555:	43                   	inc    ebx
c0017556:	eb d9                	jmp    c0017531 <Video::clearScreen(unsigned int)+0x9>
c0017558:	5b                   	pop    ebx
c0017559:	5e                   	pop    esi
c001755a:	5f                   	pop    edi
c001755b:	c3                   	ret    

c001755c <Video::putpixel(int, int, unsigned int)>:
c001755c:	c7 44 24 04 48 b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b548
c0017564:	e9 0a 31 00 00       	jmp    c001a673 <Krnl::panic(char const*)>
c0017569:	90                   	nop

c001756a <Video::Video(char const*)>:
c001756a:	83 ec 0c             	sub    esp,0xc
c001756d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017571:	83 ec 08             	sub    esp,0x8
c0017574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017578:	50                   	push   eax
c0017579:	e8 5a d0 ff ff       	call   c00145d8 <Device::Device(char const*)>
c001757e:	83 c4 10             	add    esp,0x10
c0017581:	ba cc b5 02 c0       	mov    edx,0xc002b5cc
c0017586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001758a:	89 10                	mov    DWORD PTR [eax],edx
c001758c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017590:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001759a:	90                   	nop
c001759b:	83 c4 0c             	add    esp,0xc
c001759e:	c3                   	ret    
c001759f:	90                   	nop

c00175a0 <Video::~Video()>:
c00175a0:	83 ec 0c             	sub    esp,0xc
c00175a3:	ba cc b5 02 c0       	mov    edx,0xc002b5cc
c00175a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ac:	89 10                	mov    DWORD PTR [eax],edx
c00175ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b2:	83 ec 0c             	sub    esp,0xc
c00175b5:	50                   	push   eax
c00175b6:	e8 ff cc ff ff       	call   c00142ba <Device::~Device()>
c00175bb:	83 c4 10             	add    esp,0x10
c00175be:	90                   	nop
c00175bf:	83 c4 0c             	add    esp,0xc
c00175c2:	c3                   	ret    
c00175c3:	90                   	nop

c00175c4 <Video::~Video()>:
c00175c4:	83 ec 0c             	sub    esp,0xc
c00175c7:	83 ec 0c             	sub    esp,0xc
c00175ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175ce:	e8 cd ff ff ff       	call   c00175a0 <Video::~Video()>
c00175d3:	83 c4 10             	add    esp,0x10
c00175d6:	83 ec 08             	sub    esp,0x8
c00175d9:	68 64 01 00 00       	push   0x164
c00175de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175e2:	e8 fa b8 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c00175e7:	83 c4 10             	add    esp,0x10
c00175ea:	83 c4 0c             	add    esp,0xc
c00175ed:	c3                   	ret    

c00175ee <Video::isMonochrome()>:
c00175ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175f2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00175f8:	c3                   	ret    
c00175f9:	90                   	nop

c00175fa <Video::getWidth()>:
c00175fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175fe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017604:	c3                   	ret    
c0017605:	90                   	nop

c0017606 <Video::getHeight()>:
c0017606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001760a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017610:	c3                   	ret    
c0017611:	90                   	nop

c0017612 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017612:	55                   	push   ebp
c0017613:	57                   	push   edi
c0017614:	56                   	push   esi
c0017615:	53                   	push   ebx
c0017616:	83 ec 2c             	sub    esp,0x2c
c0017619:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001761d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017621:	83 f8 01             	cmp    eax,0x1
c0017624:	19 c9                	sbb    ecx,ecx
c0017626:	31 db                	xor    ebx,ebx
c0017628:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001762c:	89 cd                	mov    ebp,ecx
c001762e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017636:	f7 d5                	not    ebp
c0017638:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001763e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017642:	01 d8                	add    eax,ebx
c0017644:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017648:	56                   	push   esi
c0017649:	e8 b8 ff ff ff       	call   c0017606 <Video::getHeight()>
c001764e:	59                   	pop    ecx
c001764f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017653:	7e 70                	jle    c00176c5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017655:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017659:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001765d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017660:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017664:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017668:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001766f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017673:	89 f8                	mov    eax,edi
c0017675:	83 c0 20             	add    eax,0x20
c0017678:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001767c:	56                   	push   esi
c001767d:	e8 78 ff ff ff       	call   c00175fa <Video::getWidth()>
c0017682:	5a                   	pop    edx
c0017683:	39 c7                	cmp    edi,eax
c0017685:	7d 34                	jge    c00176bb <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017687:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001768c:	74 05                	je     c0017693 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001768e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017690:	55                   	push   ebp
c0017691:	eb 0d                	jmp    c00176a0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017693:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017698:	74 12                	je     c00176ac <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001769a:	8b 06                	mov    eax,DWORD PTR [esi]
c001769c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176a4:	57                   	push   edi
c00176a5:	56                   	push   esi
c00176a6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176a9:	83 c4 10             	add    esp,0x10
c00176ac:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176b0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176b4:	47                   	inc    edi
c00176b5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176b9:	75 c1                	jne    c001767c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176bb:	43                   	inc    ebx
c00176bc:	83 fb 20             	cmp    ebx,0x20
c00176bf:	0f 85 79 ff ff ff    	jne    c001763e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176c5:	83 c4 2c             	add    esp,0x2c
c00176c8:	5b                   	pop    ebx
c00176c9:	5e                   	pop    esi
c00176ca:	5f                   	pop    edi
c00176cb:	5d                   	pop    ebp
c00176cc:	c3                   	ret    
c00176cd:	90                   	nop

c00176ce <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176ce:	55                   	push   ebp
c00176cf:	57                   	push   edi
c00176d0:	56                   	push   esi
c00176d1:	53                   	push   ebx
c00176d2:	83 ec 28             	sub    esp,0x28
c00176d5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176d9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00176dd:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00176e1:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00176e5:	c1 e7 08             	shl    edi,0x8
c00176e8:	01 c7                	add    edi,eax
c00176ea:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00176ee:	c1 e0 08             	shl    eax,0x8
c00176f1:	01 d0                	add    eax,edx
c00176f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176fb:	0f af c7             	imul   eax,edi
c00176fe:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017705:	50                   	push   eax
c0017706:	e8 d7 81 ff ff       	call   c000f8e2 <malloc>
c001770b:	83 c4 10             	add    esp,0x10
c001770e:	89 c5                	mov    ebp,eax
c0017710:	85 c0                	test   eax,eax
c0017712:	75 15                	jne    c0017729 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017714:	83 ec 0c             	sub    esp,0xc
c0017717:	68 69 b5 02 c0       	push   0xc002b569
c001771c:	e8 a0 b8 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0017721:	83 c4 10             	add    esp,0x10
c0017724:	e9 1c 01 00 00       	jmp    c0017845 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017729:	be 12 00 00 00       	mov    esi,0x12
c001772e:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017732:	74 11                	je     c0017745 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017734:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017738:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001773c:	c1 fe 03             	sar    esi,0x3
c001773f:	0f af f0             	imul   esi,eax
c0017742:	83 c6 12             	add    esi,0x12
c0017745:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017749:	74 04                	je     c001774f <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001774b:	85 ff                	test   edi,edi
c001774d:	75 12                	jne    c0017761 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001774f:	83 ec 0c             	sub    esp,0xc
c0017752:	68 80 b5 02 c0       	push   0xc002b580
c0017757:	e8 65 b8 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001775c:	e9 ce 00 00 00       	jmp    c001782f <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017761:	52                   	push   edx
c0017762:	52                   	push   edx
c0017763:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017767:	50                   	push   eax
c0017768:	68 95 b5 02 c0       	push   0xc002b595
c001776d:	e8 4f b8 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0017772:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017776:	83 c4 10             	add    esp,0x10
c0017779:	80 fa 02             	cmp    dl,0x2
c001777c:	0f 85 98 00 00 00    	jne    c001781a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017782:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017787:	75 10                	jne    c0017799 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017789:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001778d:	75 0a                	jne    c0017799 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001778f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017792:	83 e8 18             	sub    eax,0x18
c0017795:	a8 f7                	test   al,0xf7
c0017797:	74 0a                	je     c00177a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017799:	83 ec 0c             	sub    esp,0xc
c001779c:	68 a2 b5 02 c0       	push   0xc002b5a2
c00177a1:	eb 7f                	jmp    c0017822 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00177a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177ab:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177b3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177b7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177bf:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177c3:	75 0c                	jne    c00177d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177c5:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177ca:	c1 e0 18             	shl    eax,0x18
c00177cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177d1:	41                   	inc    ecx
c00177d2:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00177d7:	c1 e2 10             	shl    edx,0x10
c00177da:	89 d0                	mov    eax,edx
c00177dc:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00177e1:	c1 e2 08             	shl    edx,0x8
c00177e4:	09 c2                	or     edx,eax
c00177e6:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00177ea:	09 c2                	or     edx,eax
c00177ec:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00177f0:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00177f4:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00177f8:	c1 f8 03             	sar    eax,0x3
c00177fb:	01 c6                	add    esi,eax
c00177fd:	89 c8                	mov    eax,ecx
c00177ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017803:	39 c7                	cmp    edi,eax
c0017805:	7f b0                	jg     c00177b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017807:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001780b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001780f:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017812:	7e 22                	jle    c0017836 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017814:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017818:	eb 99                	jmp    c00177b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001781a:	50                   	push   eax
c001781b:	50                   	push   eax
c001781c:	52                   	push   edx
c001781d:	68 b0 b5 02 c0       	push   0xc002b5b0
c0017822:	e8 9a b7 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0017827:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001782a:	e8 c3 80 ff ff       	call   c000f8f2 <free>
c001782f:	83 c4 10             	add    esp,0x10
c0017832:	31 ed                	xor    ebp,ebp
c0017834:	eb 0f                	jmp    c0017845 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017836:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001783a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001783d:	89 38                	mov    DWORD PTR [eax],edi
c001783f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017843:	89 08                	mov    DWORD PTR [eax],ecx
c0017845:	83 c4 1c             	add    esp,0x1c
c0017848:	89 e8                	mov    eax,ebp
c001784a:	5b                   	pop    ebx
c001784b:	5e                   	pop    esi
c001784c:	5f                   	pop    edi
c001784d:	5d                   	pop    ebp
c001784e:	c3                   	ret    
c001784f:	90                   	nop

c0017850 <Video::putTGA(int, int, unsigned char*, int)>:
c0017850:	55                   	push   ebp
c0017851:	57                   	push   edi
c0017852:	56                   	push   esi
c0017853:	53                   	push   ebx
c0017854:	83 ec 28             	sub    esp,0x28
c0017857:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001785b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001785f:	50                   	push   eax
c0017860:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017864:	50                   	push   eax
c0017865:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017869:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001786d:	56                   	push   esi
c001786e:	e8 5b fe ff ff       	call   c00176ce <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017873:	83 c4 20             	add    esp,0x20
c0017876:	85 c0                	test   eax,eax
c0017878:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001787c:	74 35                	je     c00178b3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001787e:	89 c7                	mov    edi,eax
c0017880:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017884:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017888:	39 d8                	cmp    eax,ebx
c001788a:	7e 27                	jle    c00178b3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001788c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017890:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017894:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017898:	39 e8                	cmp    eax,ebp
c001789a:	7e 14                	jle    c00178b0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001789c:	8b 06                	mov    eax,DWORD PTR [esi]
c001789e:	83 c7 04             	add    edi,0x4
c00178a1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178a4:	53                   	push   ebx
c00178a5:	55                   	push   ebp
c00178a6:	45                   	inc    ebp
c00178a7:	56                   	push   esi
c00178a8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178ab:	83 c4 10             	add    esp,0x10
c00178ae:	eb e0                	jmp    c0017890 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178b0:	43                   	inc    ebx
c00178b1:	eb cd                	jmp    c0017880 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178b3:	83 c4 1c             	add    esp,0x1c
c00178b6:	5b                   	pop    ebx
c00178b7:	5e                   	pop    esi
c00178b8:	5f                   	pop    edi
c00178b9:	5d                   	pop    ebp
c00178ba:	c3                   	ret    
c00178bb:	90                   	nop

c00178bc <ACPI::close(int, int, void*)>:
c00178bc:	83 ec 1c             	sub    esp,0x1c
c00178bf:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178c7:	74 0a                	je     c00178d3 <ACPI::close(int, int, void*)+0x17>
c00178c9:	b8 00 00 00 00       	mov    eax,0x0
c00178ce:	e9 9a 00 00 00       	jmp    c001796d <ACPI::close(int, int, void*)+0xb1>
c00178d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00178d8:	75 37                	jne    c0017911 <ACPI::close(int, int, void*)+0x55>
c00178da:	83 ec 0c             	sub    esp,0xc
c00178dd:	68 0c b6 02 c0       	push   0xc002b60c
c00178e2:	e8 da b6 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00178e7:	83 c4 10             	add    esp,0x10
c00178ea:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c00178ef:	85 c0                	test   eax,eax
c00178f1:	74 07                	je     c00178fa <ACPI::close(int, int, void*)+0x3e>
c00178f3:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c00178f8:	ff d0                	call   eax
c00178fa:	83 ec 0c             	sub    esp,0xc
c00178fd:	68 30 b7 02 c0       	push   0xc002b730
c0017902:	e8 6c 2d 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0017907:	83 c4 10             	add    esp,0x10
c001790a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001790f:	eb 5c                	jmp    c001796d <ACPI::close(int, int, void*)+0xb1>
c0017911:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017916:	75 50                	jne    c0017968 <ACPI::close(int, int, void*)+0xac>
c0017918:	a1 44 0d 03 c0       	mov    eax,ds:0xc0030d44
c001791d:	85 c0                	test   eax,eax
c001791f:	74 07                	je     c0017928 <ACPI::close(int, int, void*)+0x6c>
c0017921:	a1 44 0d 03 c0       	mov    eax,ds:0xc0030d44
c0017926:	ff d0                	call   eax
c0017928:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001792d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017932:	83 e0 02             	and    eax,0x2
c0017935:	74 1c                	je     c0017953 <ACPI::close(int, int, void*)+0x97>
c0017937:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001793e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017942:	89 c2                	mov    edx,eax
c0017944:	ec                   	in     al,dx
c0017945:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017949:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001794d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017951:	eb da                	jmp    c001792d <ACPI::close(int, int, void*)+0x71>
c0017953:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001795a:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001795f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017963:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017967:	ee                   	out    dx,al
c0017968:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001796d:	83 c4 1c             	add    esp,0x1c
c0017970:	c3                   	ret    

c0017971 <findRSDP()>:
c0017971:	83 ec 1c             	sub    esp,0x1c
c0017974:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0017979:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001797f:	83 e0 04             	and    eax,0x4
c0017982:	84 c0                	test   al,al
c0017984:	75 07                	jne    c001798d <findRSDP()+0x1c>
c0017986:	b8 00 00 00 00       	mov    eax,0x0
c001798b:	eb 6a                	jmp    c00179f7 <findRSDP()+0x86>
c001798d:	a1 d0 e6 02 c0       	mov    eax,ds:0xc002e6d0
c0017992:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017997:	7f 1b                	jg     c00179b4 <findRSDP()+0x43>
c0017999:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c001799e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179a4:	83 e2 fb             	and    edx,0xfffffffb
c00179a7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179ad:	b8 00 00 00 00       	mov    eax,0x0
c00179b2:	eb 43                	jmp    c00179f7 <findRSDP()+0x86>
c00179b4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00179bc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00179c4:	77 2c                	ja     c00179f2 <findRSDP()+0x81>
c00179c6:	83 ec 04             	sub    esp,0x4
c00179c9:	6a 08                	push   0x8
c00179cb:	68 19 b6 02 c0       	push   0xc002b619
c00179d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179d4:	e8 67 8c fe ff       	call   c0000640 <memcmp>
c00179d9:	83 c4 10             	add    esp,0x10
c00179dc:	85 c0                	test   eax,eax
c00179de:	0f 94 c0             	sete   al
c00179e1:	84 c0                	test   al,al
c00179e3:	74 06                	je     c00179eb <findRSDP()+0x7a>
c00179e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179e9:	eb 0c                	jmp    c00179f7 <findRSDP()+0x86>
c00179eb:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00179f0:	eb ca                	jmp    c00179bc <findRSDP()+0x4b>
c00179f2:	b8 00 00 00 00       	mov    eax,0x0
c00179f7:	83 c4 1c             	add    esp,0x1c
c00179fa:	c3                   	ret    

c00179fb <loadACPITables(unsigned char*)>:
c00179fb:	56                   	push   esi
c00179fc:	53                   	push   ebx
c00179fd:	83 ec 44             	sub    esp,0x44
c0017a00:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0017a05:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a0b:	83 e0 04             	and    eax,0x4
c0017a0e:	84 c0                	test   al,al
c0017a10:	0f 84 05 02 00 00    	je     c0017c1b <loadACPITables(unsigned char*)+0x220>
c0017a16:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0017a1b:	84 c0                	test   al,al
c0017a1d:	74 75                	je     c0017a94 <loadACPITables(unsigned char*)+0x99>
c0017a1f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a23:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a2e:	83 e8 24             	sub    eax,0x24
c0017a31:	c1 e8 03             	shr    eax,0x3
c0017a34:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a38:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a40:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a44:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017a48:	0f 8d b2 00 00 00    	jge    c0017b00 <loadACPITables(unsigned char*)+0x105>
c0017a4e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a52:	83 c0 24             	add    eax,0x24
c0017a55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a59:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a5d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a65:	c1 e0 03             	shl    eax,0x3
c0017a68:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a6c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a70:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a73:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a75:	89 c1                	mov    ecx,eax
c0017a77:	a1 4c 0d 03 c0       	mov    eax,ds:0xc0030d4c
c0017a7c:	8d 50 01             	lea    edx,[eax+0x1]
c0017a7f:	89 15 4c 0d 03 c0    	mov    DWORD PTR ds:0xc0030d4c,edx
c0017a85:	89 ca                	mov    edx,ecx
c0017a87:	89 14 c5 64 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf29c],edx
c0017a8e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a92:	eb ac                	jmp    c0017a40 <loadACPITables(unsigned char*)+0x45>
c0017a94:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a98:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aa0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aa3:	83 e8 24             	sub    eax,0x24
c0017aa6:	c1 e8 02             	shr    eax,0x2
c0017aa9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017aad:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017ab5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ab9:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017abd:	7d 41                	jge    c0017b00 <loadACPITables(unsigned char*)+0x105>
c0017abf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017ac3:	83 c0 24             	add    eax,0x24
c0017ac6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017aca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ace:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ad2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ad6:	c1 e0 02             	shl    eax,0x2
c0017ad9:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017add:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ae1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017ae3:	a1 4c 0d 03 c0       	mov    eax,ds:0xc0030d4c
c0017ae8:	8d 50 01             	lea    edx,[eax+0x1]
c0017aeb:	89 15 4c 0d 03 c0    	mov    DWORD PTR ds:0xc0030d4c,edx
c0017af1:	89 ca                	mov    edx,ecx
c0017af3:	89 14 c5 64 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf29c],edx
c0017afa:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017afe:	eb b5                	jmp    c0017ab5 <loadACPITables(unsigned char*)+0xba>
c0017b00:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017b08:	a1 4c 0d 03 c0       	mov    eax,ds:0xc0030d4c
c0017b0d:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017b11:	0f 8d 05 01 00 00    	jge    c0017c1c <loadACPITables(unsigned char*)+0x221>
c0017b17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b1b:	8b 04 c5 64 0d 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf29c]
c0017b22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b32:	25 ff 0f 00 00       	and    eax,0xfff
c0017b37:	89 c6                	mov    esi,eax
c0017b39:	e8 5e a3 ff ff       	call   c0011e9c <Virt::getAKernelVAS()>
c0017b3e:	89 c3                	mov    ebx,eax
c0017b40:	83 ec 0c             	sub    esp,0xc
c0017b43:	6a 01                	push   0x1
c0017b45:	e8 b7 a0 ff ff       	call   c0011c01 <Virt::allocateKernelVirtualPages(int)>
c0017b4a:	83 c4 10             	add    esp,0x10
c0017b4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b51:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b57:	83 ec 0c             	sub    esp,0xc
c0017b5a:	6a 01                	push   0x1
c0017b5c:	6a 01                	push   0x1
c0017b5e:	50                   	push   eax
c0017b5f:	52                   	push   edx
c0017b60:	53                   	push   ebx
c0017b61:	e8 66 ab ff ff       	call   c00126cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b66:	83 c4 20             	add    esp,0x20
c0017b69:	09 f0                	or     eax,esi
c0017b6b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b73:	c1 e0 03             	shl    eax,0x3
c0017b76:	05 60 0d 03 c0       	add    eax,0xc0030d60
c0017b7b:	83 ec 04             	sub    esp,0x4
c0017b7e:	6a 04                	push   0x4
c0017b80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b84:	50                   	push   eax
c0017b85:	e8 ba 8b fe ff       	call   c0000744 <memcpy>
c0017b8a:	83 c4 10             	add    esp,0x10
c0017b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b9c:	05 00 10 00 00       	add    eax,0x1000
c0017ba1:	c1 e8 0c             	shr    eax,0xc
c0017ba4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0017baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bb3:	25 ff 0f 00 00       	and    eax,0xfff
c0017bb8:	89 c6                	mov    esi,eax
c0017bba:	e8 dd a2 ff ff       	call   c0011e9c <Virt::getAKernelVAS()>
c0017bbf:	89 c3                	mov    ebx,eax
c0017bc1:	83 ec 0c             	sub    esp,0xc
c0017bc4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017bc8:	e8 34 a0 ff ff       	call   c0011c01 <Virt::allocateKernelVirtualPages(int)>
c0017bcd:	83 c4 10             	add    esp,0x10
c0017bd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bd4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bda:	83 ec 0c             	sub    esp,0xc
c0017bdd:	6a 01                	push   0x1
c0017bdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017be3:	50                   	push   eax
c0017be4:	52                   	push   edx
c0017be5:	53                   	push   ebx
c0017be6:	e8 e1 aa ff ff       	call   c00126cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017beb:	83 c4 20             	add    esp,0x20
c0017bee:	09 f0                	or     eax,esi
c0017bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bf4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017bf7:	83 ec 0c             	sub    esp,0xc
c0017bfa:	50                   	push   eax
c0017bfb:	e8 71 a4 ff ff       	call   c0012071 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c00:	83 c4 10             	add    esp,0x10
c0017c03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c0b:	89 14 c5 64 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf29c],edx
c0017c12:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017c16:	e9 ed fe ff ff       	jmp    c0017b08 <loadACPITables(unsigned char*)+0x10d>
c0017c1b:	90                   	nop
c0017c1c:	83 c4 44             	add    esp,0x44
c0017c1f:	5b                   	pop    ebx
c0017c20:	5e                   	pop    esi
c0017c21:	c3                   	ret    

c0017c22 <findRSDT(unsigned char*)>:
c0017c22:	56                   	push   esi
c0017c23:	53                   	push   ebx
c0017c24:	83 ec 44             	sub    esp,0x44
c0017c27:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0017c2c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c32:	83 e0 04             	and    eax,0x4
c0017c35:	84 c0                	test   al,al
c0017c37:	75 0a                	jne    c0017c43 <findRSDT(unsigned char*)+0x21>
c0017c39:	b8 00 00 00 00       	mov    eax,0x0
c0017c3e:	e9 f7 00 00 00       	jmp    c0017d3a <findRSDT(unsigned char*)+0x118>
c0017c43:	83 ec 04             	sub    esp,0x4
c0017c46:	6a 24                	push   0x24
c0017c48:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017c4c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c50:	50                   	push   eax
c0017c51:	e8 ee 8a fe ff       	call   c0000744 <memcpy>
c0017c56:	83 c4 10             	add    esp,0x10
c0017c59:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017c5d:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017c61:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c71:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c7d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c81:	25 ff 0f 00 00       	and    eax,0xfff
c0017c86:	89 c6                	mov    esi,eax
c0017c88:	e8 0f a2 ff ff       	call   c0011e9c <Virt::getAKernelVAS()>
c0017c8d:	89 c3                	mov    ebx,eax
c0017c8f:	83 ec 0c             	sub    esp,0xc
c0017c92:	6a 02                	push   0x2
c0017c94:	e8 68 9f ff ff       	call   c0011c01 <Virt::allocateKernelVirtualPages(int)>
c0017c99:	83 c4 10             	add    esp,0x10
c0017c9c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017ca0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ca6:	83 ec 0c             	sub    esp,0xc
c0017ca9:	6a 01                	push   0x1
c0017cab:	6a 02                	push   0x2
c0017cad:	50                   	push   eax
c0017cae:	52                   	push   edx
c0017caf:	53                   	push   ebx
c0017cb0:	e8 17 aa ff ff       	call   c00126cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cb5:	83 c4 20             	add    esp,0x20
c0017cb8:	09 f0                	or     eax,esi
c0017cba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017cbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cc2:	25 ff 0f 00 00       	and    eax,0xfff
c0017cc7:	89 c6                	mov    esi,eax
c0017cc9:	e8 ce a1 ff ff       	call   c0011e9c <Virt::getAKernelVAS()>
c0017cce:	89 c3                	mov    ebx,eax
c0017cd0:	83 ec 0c             	sub    esp,0xc
c0017cd3:	6a 02                	push   0x2
c0017cd5:	e8 27 9f ff ff       	call   c0011c01 <Virt::allocateKernelVirtualPages(int)>
c0017cda:	83 c4 10             	add    esp,0x10
c0017cdd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ce1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ce7:	83 ec 0c             	sub    esp,0xc
c0017cea:	6a 01                	push   0x1
c0017cec:	6a 02                	push   0x2
c0017cee:	50                   	push   eax
c0017cef:	52                   	push   edx
c0017cf0:	53                   	push   ebx
c0017cf1:	e8 d6 a9 ff ff       	call   c00126cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cf6:	83 c4 20             	add    esp,0x20
c0017cf9:	09 f0                	or     eax,esi
c0017cfb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cff:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017d04:	75 11                	jne    c0017d17 <findRSDT(unsigned char*)+0xf5>
c0017d06:	c6 05 60 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f60,0x0
c0017d0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d11:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d15:	eb 1f                	jmp    c0017d36 <findRSDT(unsigned char*)+0x114>
c0017d17:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017d1c:	75 11                	jne    c0017d2f <findRSDT(unsigned char*)+0x10d>
c0017d1e:	c6 05 60 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f60,0x1
c0017d25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d29:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d2d:	eb 07                	jmp    c0017d36 <findRSDT(unsigned char*)+0x114>
c0017d2f:	b8 00 00 00 00       	mov    eax,0x0
c0017d34:	eb 04                	jmp    c0017d3a <findRSDT(unsigned char*)+0x118>
c0017d36:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d3a:	83 c4 44             	add    esp,0x44
c0017d3d:	5b                   	pop    ebx
c0017d3e:	5e                   	pop    esi
c0017d3f:	c3                   	ret    

c0017d40 <findDataTable(unsigned char*, char*)>:
c0017d40:	83 ec 1c             	sub    esp,0x1c
c0017d43:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0017d48:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d4e:	83 e0 04             	and    eax,0x4
c0017d51:	84 c0                	test   al,al
c0017d53:	75 07                	jne    c0017d5c <findDataTable(unsigned char*, char*)+0x1c>
c0017d55:	b8 00 00 00 00       	mov    eax,0x0
c0017d5a:	eb 7c                	jmp    c0017dd8 <findDataTable(unsigned char*, char*)+0x98>
c0017d5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d64:	a1 4c 0d 03 c0       	mov    eax,ds:0xc0030d4c
c0017d69:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d6d:	7d 3a                	jge    c0017da9 <findDataTable(unsigned char*, char*)+0x69>
c0017d6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d73:	c1 e0 03             	shl    eax,0x3
c0017d76:	05 60 0d 03 c0       	add    eax,0xc0030d60
c0017d7b:	83 ec 04             	sub    esp,0x4
c0017d7e:	6a 04                	push   0x4
c0017d80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d84:	50                   	push   eax
c0017d85:	e8 b6 88 fe ff       	call   c0000640 <memcmp>
c0017d8a:	83 c4 10             	add    esp,0x10
c0017d8d:	85 c0                	test   eax,eax
c0017d8f:	0f 94 c0             	sete   al
c0017d92:	84 c0                	test   al,al
c0017d94:	74 0d                	je     c0017da3 <findDataTable(unsigned char*, char*)+0x63>
c0017d96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d9a:	8b 04 c5 64 0d 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf29c]
c0017da1:	eb 35                	jmp    c0017dd8 <findDataTable(unsigned char*, char*)+0x98>
c0017da3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017da7:	eb bb                	jmp    c0017d64 <findDataTable(unsigned char*, char*)+0x24>
c0017da9:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0017dae:	84 c0                	test   al,al
c0017db0:	74 07                	je     c0017db9 <findDataTable(unsigned char*, char*)+0x79>
c0017db2:	b8 58 00 00 00       	mov    eax,0x58
c0017db7:	eb 05                	jmp    c0017dbe <findDataTable(unsigned char*, char*)+0x7e>
c0017db9:	b8 52 00 00 00       	mov    eax,0x52
c0017dbe:	83 ec 04             	sub    esp,0x4
c0017dc1:	50                   	push   eax
c0017dc2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dc6:	68 54 b7 02 c0       	push   0xc002b754
c0017dcb:	e8 f1 b1 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0017dd0:	83 c4 10             	add    esp,0x10
c0017dd3:	b8 00 00 00 00       	mov    eax,0x0
c0017dd8:	83 c4 1c             	add    esp,0x1c
c0017ddb:	c3                   	ret    

c0017ddc <scanMADT()>:
c0017ddc:	53                   	push   ebx
c0017ddd:	83 ec 38             	sub    esp,0x38
c0017de0:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0017de5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017deb:	83 e0 04             	and    eax,0x4
c0017dee:	84 c0                	test   al,al
c0017df0:	0f 84 63 04 00 00    	je     c0018259 <scanMADT()+0x47d>
c0017df6:	e8 76 fb ff ff       	call   c0017971 <findRSDP()>
c0017dfb:	a3 6c 0f 03 c0       	mov    ds:0xc0030f6c,eax
c0017e00:	a1 6c 0f 03 c0       	mov    eax,ds:0xc0030f6c
c0017e05:	85 c0                	test   eax,eax
c0017e07:	75 19                	jne    c0017e22 <scanMADT()+0x46>
c0017e09:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0017e0e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e14:	83 e2 fb             	and    edx,0xfffffffb
c0017e17:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e1d:	e9 3b 04 00 00       	jmp    c001825d <scanMADT()+0x481>
c0017e22:	a1 6c 0f 03 c0       	mov    eax,ds:0xc0030f6c
c0017e27:	83 ec 0c             	sub    esp,0xc
c0017e2a:	50                   	push   eax
c0017e2b:	e8 f2 fd ff ff       	call   c0017c22 <findRSDT(unsigned char*)>
c0017e30:	83 c4 10             	add    esp,0x10
c0017e33:	a3 68 0f 03 c0       	mov    ds:0xc0030f68,eax
c0017e38:	a1 68 0f 03 c0       	mov    eax,ds:0xc0030f68
c0017e3d:	85 c0                	test   eax,eax
c0017e3f:	75 19                	jne    c0017e5a <scanMADT()+0x7e>
c0017e41:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0017e46:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e4c:	83 e2 fb             	and    edx,0xfffffffb
c0017e4f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e55:	e9 03 04 00 00       	jmp    c001825d <scanMADT()+0x481>
c0017e5a:	a1 68 0f 03 c0       	mov    eax,ds:0xc0030f68
c0017e5f:	83 ec 0c             	sub    esp,0xc
c0017e62:	50                   	push   eax
c0017e63:	e8 93 fb ff ff       	call   c00179fb <loadACPITables(unsigned char*)>
c0017e68:	83 c4 10             	add    esp,0x10
c0017e6b:	a1 68 0f 03 c0       	mov    eax,ds:0xc0030f68
c0017e70:	83 ec 08             	sub    esp,0x8
c0017e73:	68 22 b6 02 c0       	push   0xc002b622
c0017e78:	50                   	push   eax
c0017e79:	e8 c2 fe ff ff       	call   c0017d40 <findDataTable(unsigned char*, char*)>
c0017e7e:	83 c4 10             	add    esp,0x10
c0017e81:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e85:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e8a:	75 19                	jne    c0017ea5 <scanMADT()+0xc9>
c0017e8c:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0017e91:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e97:	83 e2 fe             	and    edx,0xfffffffe
c0017e9a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ea0:	e9 b8 03 00 00       	jmp    c001825d <scanMADT()+0x481>
c0017ea5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017ead:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017eb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017eb4:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017eb8:	0f 87 9f 03 00 00    	ja     c001825d <scanMADT()+0x481>
c0017ebe:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017ec6:	0f 87 91 03 00 00    	ja     c001825d <scanMADT()+0x481>
c0017ecc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017ed4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed8:	8d 50 01             	lea    edx,[eax+0x1]
c0017edb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017edf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ee3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ee7:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017eeb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eef:	8d 50 01             	lea    edx,[eax+0x1]
c0017ef2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ef6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017efa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017efe:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f02:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f07:	0f 86 4f 03 00 00    	jbe    c001825c <scanMADT()+0x480>
c0017f0d:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f12:	75 57                	jne    c0017f6b <scanMADT()+0x18f>
c0017f14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f18:	8d 50 01             	lea    edx,[eax+0x1]
c0017f1b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f1f:	8a 15 60 11 03 c0    	mov    dl,BYTE PTR ds:0xc0031160
c0017f25:	0f b6 d2             	movzx  edx,dl
c0017f28:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f2c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f30:	88 82 a0 11 03 c0    	mov    BYTE PTR [edx-0x3ffcee60],al
c0017f36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f3a:	8d 50 01             	lea    edx,[eax+0x1]
c0017f3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f41:	8a 15 60 11 03 c0    	mov    dl,BYTE PTR ds:0xc0031160
c0017f47:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f4a:	88 0d 60 11 03 c0    	mov    BYTE PTR ds:0xc0031160,cl
c0017f50:	0f b6 d2             	movzx  edx,dl
c0017f53:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f57:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f5b:	88 82 80 11 03 c0    	mov    BYTE PTR [edx-0x3ffcee80],al
c0017f61:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f66:	e9 da 02 00 00       	jmp    c0018245 <scanMADT()+0x469>
c0017f6b:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f70:	0f 85 14 01 00 00    	jne    c001808a <scanMADT()+0x2ae>
c0017f76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f7a:	8d 50 01             	lea    edx,[eax+0x1]
c0017f7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f81:	8a 15 20 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031020
c0017f87:	0f b6 d2             	movzx  edx,dl
c0017f8a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f8e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f92:	88 82 40 10 03 c0    	mov    BYTE PTR [edx-0x3ffcefc0],al
c0017f98:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f9c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fa0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa4:	01 d0                	add    eax,edx
c0017fa6:	83 c0 2c             	add    eax,0x2c
c0017fa9:	8a 00                	mov    al,BYTE PTR [eax]
c0017fab:	0f b6 d0             	movzx  edx,al
c0017fae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb2:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fb5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fb9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fbd:	0f b6 c0             	movzx  eax,al
c0017fc0:	c1 e0 08             	shl    eax,0x8
c0017fc3:	89 d1                	mov    ecx,edx
c0017fc5:	09 c1                	or     ecx,eax
c0017fc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fcb:	8d 50 02             	lea    edx,[eax+0x2]
c0017fce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fd2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fd6:	0f b6 c0             	movzx  eax,al
c0017fd9:	c1 e0 10             	shl    eax,0x10
c0017fdc:	09 c1                	or     ecx,eax
c0017fde:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe2:	8d 50 03             	lea    edx,[eax+0x3]
c0017fe5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fe9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fed:	0f b6 c0             	movzx  eax,al
c0017ff0:	c1 e0 18             	shl    eax,0x18
c0017ff3:	09 c1                	or     ecx,eax
c0017ff5:	89 ca                	mov    edx,ecx
c0017ff7:	a0 20 10 03 c0       	mov    al,ds:0xc0031020
c0017ffc:	0f b6 c0             	movzx  eax,al
c0017fff:	89 14 85 60 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefa0],edx
c0018006:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001800b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001800f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018013:	01 d0                	add    eax,edx
c0018015:	83 c0 2c             	add    eax,0x2c
c0018018:	8a 00                	mov    al,BYTE PTR [eax]
c001801a:	0f b6 d0             	movzx  edx,al
c001801d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018021:	8d 48 01             	lea    ecx,[eax+0x1]
c0018024:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018028:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001802c:	0f b6 c0             	movzx  eax,al
c001802f:	c1 e0 08             	shl    eax,0x8
c0018032:	89 d1                	mov    ecx,edx
c0018034:	09 c1                	or     ecx,eax
c0018036:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001803a:	8d 50 02             	lea    edx,[eax+0x2]
c001803d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018041:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018045:	0f b6 c0             	movzx  eax,al
c0018048:	c1 e0 10             	shl    eax,0x10
c001804b:	09 c1                	or     ecx,eax
c001804d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018051:	8d 50 03             	lea    edx,[eax+0x3]
c0018054:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018058:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001805c:	0f b6 c0             	movzx  eax,al
c001805f:	c1 e0 18             	shl    eax,0x18
c0018062:	09 c1                	or     ecx,eax
c0018064:	89 ca                	mov    edx,ecx
c0018066:	a0 20 10 03 c0       	mov    al,ds:0xc0031020
c001806b:	0f b6 c0             	movzx  eax,al
c001806e:	89 14 85 e0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef20],edx
c0018075:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001807a:	a0 20 10 03 c0       	mov    al,ds:0xc0031020
c001807f:	40                   	inc    eax
c0018080:	a2 20 10 03 c0       	mov    ds:0xc0031020,al
c0018085:	e9 bb 01 00 00       	jmp    c0018245 <scanMADT()+0x469>
c001808a:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001808f:	0f 85 e9 00 00 00    	jne    c001817e <scanMADT()+0x3a2>
c0018095:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018099:	8d 50 01             	lea    edx,[eax+0x1]
c001809c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180a0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180a4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180a8:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00180ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180b0:	8d 50 01             	lea    edx,[eax+0x1]
c00180b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180bb:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180bf:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00180c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180cb:	01 d0                	add    eax,edx
c00180cd:	83 c0 2c             	add    eax,0x2c
c00180d0:	8a 00                	mov    al,BYTE PTR [eax]
c00180d2:	0f b6 d0             	movzx  edx,al
c00180d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180d9:	8d 48 01             	lea    ecx,[eax+0x1]
c00180dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180e0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180e4:	0f b6 c0             	movzx  eax,al
c00180e7:	c1 e0 08             	shl    eax,0x8
c00180ea:	89 d1                	mov    ecx,edx
c00180ec:	09 c1                	or     ecx,eax
c00180ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f2:	8d 50 02             	lea    edx,[eax+0x2]
c00180f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180f9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180fd:	0f b6 c0             	movzx  eax,al
c0018100:	c1 e0 10             	shl    eax,0x10
c0018103:	09 c1                	or     ecx,eax
c0018105:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018109:	8d 50 03             	lea    edx,[eax+0x3]
c001810c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018110:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018114:	0f b6 c0             	movzx  eax,al
c0018117:	c1 e0 18             	shl    eax,0x18
c001811a:	09 c8                	or     eax,ecx
c001811c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018120:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018125:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018129:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001812d:	01 d0                	add    eax,edx
c001812f:	83 c0 2c             	add    eax,0x2c
c0018132:	8a 00                	mov    al,BYTE PTR [eax]
c0018134:	0f b6 c0             	movzx  eax,al
c0018137:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001813b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001813e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018142:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018146:	0f b6 d2             	movzx  edx,dl
c0018149:	c1 e2 08             	shl    edx,0x8
c001814c:	09 d0                	or     eax,edx
c001814e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018153:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018158:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001815d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018161:	88 90 e0 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd2720],dl
c0018167:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001816c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018171:	66 89 84 12 00 10 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf000],ax
c0018179:	e9 c7 00 00 00       	jmp    c0018245 <scanMADT()+0x469>
c001817e:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018183:	0f 85 b0 00 00 00    	jne    c0018239 <scanMADT()+0x45d>
c0018189:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001818d:	8d 50 01             	lea    edx,[eax+0x1]
c0018190:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018194:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018198:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001819c:	0f b6 c0             	movzx  eax,al
c001819f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181ab:	01 d0                	add    eax,edx
c00181ad:	83 c0 2c             	add    eax,0x2c
c00181b0:	8a 00                	mov    al,BYTE PTR [eax]
c00181b2:	0f b6 d0             	movzx  edx,al
c00181b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181b9:	8d 48 01             	lea    ecx,[eax+0x1]
c00181bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181c0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181c4:	0f b6 c0             	movzx  eax,al
c00181c7:	c1 e0 08             	shl    eax,0x8
c00181ca:	09 d0                	or     eax,edx
c00181cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00181d0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181d9:	8d 50 01             	lea    edx,[eax+0x1]
c00181dc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181e4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181e8:	0f b6 c0             	movzx  eax,al
c00181eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f3:	c1 e0 08             	shl    eax,0x8
c00181f6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00181fa:	89 c1                	mov    ecx,eax
c00181fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018200:	c1 e0 18             	shl    eax,0x18
c0018203:	89 c3                	mov    ebx,eax
c0018205:	a1 70 0f 03 c0       	mov    eax,ds:0xc0030f70
c001820a:	8d 50 01             	lea    edx,[eax+0x1]
c001820d:	89 15 70 0f 03 c0    	mov    DWORD PTR ds:0xc0030f70,edx
c0018213:	09 d9                	or     ecx,ebx
c0018215:	89 ca                	mov    edx,ecx
c0018217:	89 14 85 80 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf080],edx
c001821e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018222:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001822a:	68 84 b7 02 c0       	push   0xc002b784
c001822f:	e8 8d ad ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0018234:	83 c4 10             	add    esp,0x10
c0018237:	eb 0c                	jmp    c0018245 <scanMADT()+0x469>
c0018239:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001823e:	75 05                	jne    c0018245 <scanMADT()+0x469>
c0018240:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018245:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001824a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001824e:	01 d0                	add    eax,edx
c0018250:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018254:	e9 54 fc ff ff       	jmp    c0017ead <scanMADT()+0xd1>
c0018259:	90                   	nop
c001825a:	eb 01                	jmp    c001825d <scanMADT()+0x481>
c001825c:	90                   	nop
c001825d:	83 c4 38             	add    esp,0x38
c0018260:	5b                   	pop    ebx
c0018261:	c3                   	ret    

c0018262 <ACPI::ACPI()>:
c0018262:	83 ec 0c             	sub    esp,0xc
c0018265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018269:	83 ec 08             	sub    esp,0x8
c001826c:	68 27 b6 02 c0       	push   0xc002b627
c0018271:	50                   	push   eax
c0018272:	e8 61 c3 ff ff       	call   c00145d8 <Device::Device(char const*)>
c0018277:	83 c4 10             	add    esp,0x10
c001827a:	ba f8 b7 02 c0       	mov    edx,0xc002b7f8
c001827f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018283:	89 10                	mov    DWORD PTR [eax],edx
c0018285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018289:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018294:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001829e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182a2:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00182ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182b0:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00182b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182bb:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00182c2:	e8 15 fb ff ff       	call   c0017ddc <scanMADT()>
c00182c7:	90                   	nop
c00182c8:	83 c4 0c             	add    esp,0xc
c00182cb:	c3                   	ret    

c00182cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00182cc:	83 ec 2c             	sub    esp,0x2c
c00182cf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00182d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00182d7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00182db:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00182df:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00182e4:	88 d0                	mov    al,dl
c00182e6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00182ea:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00182ef:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00182f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182fb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018301:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018305:	0f 8d 97 00 00 00    	jge    c00183a2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001830b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001830f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018313:	83 c2 2a             	add    edx,0x2a
c0018316:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001831a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001831f:	75 78                	jne    c0018399 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018321:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018325:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018329:	83 c2 2a             	add    edx,0x2a
c001832c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018330:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018334:	75 63                	jne    c0018399 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018336:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001833b:	74 3a                	je     c0018377 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001833d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018341:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018345:	83 c2 2a             	add    edx,0x2a
c0018348:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001834c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018350:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018353:	39 c2                	cmp    edx,eax
c0018355:	74 10                	je     c0018367 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018357:	83 ec 0c             	sub    esp,0xc
c001835a:	68 c0 b7 02 c0       	push   0xc002b7c0
c001835f:	e8 0f 23 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0018364:	83 c4 10             	add    esp,0x10
c0018367:	83 ec 0c             	sub    esp,0xc
c001836a:	68 2c b6 02 c0       	push   0xc002b62c
c001836f:	e8 ff 22 00 00       	call   c001a673 <Krnl::panic(char const*)>
c0018374:	83 c4 10             	add    esp,0x10
c0018377:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001837b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001837f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018383:	83 c2 2a             	add    edx,0x2a
c0018386:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001838a:	8b 02                	mov    eax,DWORD PTR [edx]
c001838c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001838f:	89 01                	mov    DWORD PTR [ecx],eax
c0018391:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018394:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018399:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001839d:	e9 55 ff ff ff       	jmp    c00182f7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00183a2:	90                   	nop
c00183a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183a7:	83 c4 2c             	add    esp,0x2c
c00183aa:	c2 04 00             	ret    0x4
c00183ad:	90                   	nop

c00183ae <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00183ae:	83 ec 1c             	sub    esp,0x1c
c00183b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183b5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00183b9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00183bd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00183c2:	88 c8                	mov    al,cl
c00183c4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00183c8:	88 d0                	mov    al,dl
c00183ca:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00183ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183d2:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183dc:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183df:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00183e3:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00183e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183eb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00183f5:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00183f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183fc:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018401:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018405:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001840b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001840f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018412:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018416:	83 c2 2a             	add    edx,0x2a
c0018419:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001841d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018421:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001842b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001842e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018432:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018436:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001843a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018440:	8d 50 01             	lea    edx,[eax+0x1]
c0018443:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018447:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001844d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018451:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018457:	3d 00 02 00 00       	cmp    eax,0x200
c001845c:	75 10                	jne    c001846e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001845e:	83 ec 0c             	sub    esp,0xc
c0018461:	68 3b b6 02 c0       	push   0xc002b63b
c0018466:	e8 08 22 00 00       	call   c001a673 <Krnl::panic(char const*)>
c001846b:	83 c4 10             	add    esp,0x10
c001846e:	90                   	nop
c001846f:	83 c4 1c             	add    esp,0x1c
c0018472:	c3                   	ret    
c0018473:	90                   	nop

c0018474 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018474:	b8 00 00 00 00       	mov    eax,0x0
c0018479:	c3                   	ret    

c001847a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001847a:	83 ec 1c             	sub    esp,0x1c
c001847d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018481:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018484:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018488:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c001848d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018492:	83 ec 08             	sub    esp,0x8
c0018495:	52                   	push   edx
c0018496:	50                   	push   eax
c0018497:	e8 5e 6a ff ff       	call   c000eefa <Computer::readCMOS(unsigned char)>
c001849c:	83 c4 10             	add    esp,0x10
c001849f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00184a3:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c00184a8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184ad:	83 ec 04             	sub    esp,0x4
c00184b0:	6a 01                	push   0x1
c00184b2:	52                   	push   edx
c00184b3:	50                   	push   eax
c00184b4:	e8 57 6b ff ff       	call   c000f010 <Computer::writeCMOS(unsigned char, unsigned char)>
c00184b9:	83 c4 10             	add    esp,0x10
c00184bc:	90                   	nop
c00184bd:	83 c4 1c             	add    esp,0x1c
c00184c0:	c3                   	ret    
c00184c1:	90                   	nop

c00184c2 <ACPI::open(int, int, void*)>:
c00184c2:	53                   	push   ebx
c00184c3:	83 ec 28             	sub    esp,0x28
c00184c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ca:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00184d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d5:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00184dc:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c00184e1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00184e7:	83 e0 04             	and    eax,0x4
c00184ea:	84 c0                	test   al,al
c00184ec:	74 47                	je     c0018535 <ACPI::open(int, int, void*)+0x73>
c00184ee:	a1 68 0f 03 c0       	mov    eax,ds:0xc0030f68
c00184f3:	83 ec 08             	sub    esp,0x8
c00184f6:	68 58 b6 02 c0       	push   0xc002b658
c00184fb:	50                   	push   eax
c00184fc:	e8 3f f8 ff ff       	call   c0017d40 <findDataTable(unsigned char*, char*)>
c0018501:	83 c4 10             	add    esp,0x10
c0018504:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018508:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001850d:	74 26                	je     c0018535 <ACPI::open(int, int, void*)+0x73>
c001850f:	83 ec 0c             	sub    esp,0xc
c0018512:	68 5d b6 02 c0       	push   0xc002b65d
c0018517:	e8 a5 aa ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001851c:	83 c4 10             	add    esp,0x10
c001851f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018523:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001852a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001852e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018535:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c001853d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018541:	8a 00                	mov    al,BYTE PTR [eax]
c0018543:	3c 01                	cmp    al,0x1
c0018545:	75 28                	jne    c001856f <ACPI::open(int, int, void*)+0xad>
c0018547:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001854b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018552:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018556:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001855d:	83 ec 0c             	sub    esp,0xc
c0018560:	68 6e b6 02 c0       	push   0xc002b66e
c0018565:	e8 57 aa ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001856a:	83 c4 10             	add    esp,0x10
c001856d:	eb 25                	jmp    c0018594 <ACPI::open(int, int, void*)+0xd2>
c001856f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018573:	8a 00                	mov    al,BYTE PTR [eax]
c0018575:	3c 02                	cmp    al,0x2
c0018577:	75 1b                	jne    c0018594 <ACPI::open(int, int, void*)+0xd2>
c0018579:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001857d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018584:	83 ec 0c             	sub    esp,0xc
c0018587:	68 76 b6 02 c0       	push   0xc002b676
c001858c:	e8 30 aa ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0018591:	83 c4 10             	add    esp,0x10
c0018594:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018598:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001859e:	83 f0 01             	xor    eax,0x1
c00185a1:	84 c0                	test   al,al
c00185a3:	74 6a                	je     c001860f <ACPI::open(int, int, void*)+0x14d>
c00185a5:	83 ec 0c             	sub    esp,0xc
c00185a8:	68 7e b6 02 c0       	push   0xc002b67e
c00185ad:	e8 0f aa ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00185b2:	83 c4 10             	add    esp,0x10
c00185b5:	e8 96 7b fe ff       	call   c0000150 <manualPCIProbe>
c00185ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185be:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00185c3:	75 28                	jne    c00185ed <ACPI::open(int, int, void*)+0x12b>
c00185c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185c9:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185d4:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185db:	83 ec 0c             	sub    esp,0xc
c00185de:	68 8c b6 02 c0       	push   0xc002b68c
c00185e3:	e8 d9 a9 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00185e8:	83 c4 10             	add    esp,0x10
c00185eb:	eb 22                	jmp    c001860f <ACPI::open(int, int, void*)+0x14d>
c00185ed:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00185f2:	75 1b                	jne    c001860f <ACPI::open(int, int, void*)+0x14d>
c00185f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185f8:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185ff:	83 ec 0c             	sub    esp,0xc
c0018602:	68 96 b6 02 c0       	push   0xc002b696
c0018607:	e8 b5 a9 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001860c:	83 c4 10             	add    esp,0x10
c001860f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018613:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018619:	84 c0                	test   al,al
c001861b:	74 13                	je     c0018630 <ACPI::open(int, int, void*)+0x16e>
c001861d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018621:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018627:	83 f0 01             	xor    eax,0x1
c001862a:	0f b6 c0             	movzx  eax,al
c001862d:	40                   	inc    eax
c001862e:	eb 05                	jmp    c0018635 <ACPI::open(int, int, void*)+0x173>
c0018630:	b8 00 00 00 00       	mov    eax,0x0
c0018635:	83 ec 08             	sub    esp,0x8
c0018638:	50                   	push   eax
c0018639:	68 a0 b6 02 c0       	push   0xc002b6a0
c001863e:	e8 7e a9 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0018643:	83 c4 10             	add    esp,0x10
c0018646:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001864a:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018650:	84 c0                	test   al,al
c0018652:	74 67                	je     c00186bb <ACPI::open(int, int, void*)+0x1f9>
c0018654:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001865c:	83 ec 0c             	sub    esp,0xc
c001865f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018663:	e8 7a 72 ff ff       	call   c000f8e2 <malloc>
c0018668:	83 c4 10             	add    esp,0x10
c001866b:	89 c3                	mov    ebx,eax
c001866d:	83 ec 0c             	sub    esp,0xc
c0018670:	53                   	push   ebx
c0018671:	e8 26 a3 00 00       	call   c002299c <PCI::PCI()>
c0018676:	83 c4 10             	add    esp,0x10
c0018679:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001867d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018681:	83 ec 08             	sub    esp,0x8
c0018684:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018688:	50                   	push   eax
c0018689:	e8 5a bd ff ff       	call   c00143e8 <Device::addChild(Device*)>
c001868e:	83 c4 10             	add    esp,0x10
c0018691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018695:	8b 00                	mov    eax,DWORD PTR [eax]
c0018697:	83 c0 08             	add    eax,0x8
c001869a:	8b 00                	mov    eax,DWORD PTR [eax]
c001869c:	6a 00                	push   0x0
c001869e:	6a 00                	push   0x0
c00186a0:	6a 00                	push   0x0
c00186a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186a6:	ff d0                	call   eax
c00186a8:	83 c4 10             	add    esp,0x10
c00186ab:	83 ec 0c             	sub    esp,0xc
c00186ae:	68 a9 b6 02 c0       	push   0xc002b6a9
c00186b3:	e8 09 a9 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00186b8:	83 c4 10             	add    esp,0x10
c00186bb:	83 ec 0c             	sub    esp,0xc
c00186be:	68 b4 b6 02 c0       	push   0xc002b6b4
c00186c3:	e8 cb 46 00 00       	call   c001cd93 <Thr::loadKernelSymbolTable(char const*)>
c00186c8:	83 c4 10             	add    esp,0x10
c00186cb:	8b 1d 88 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e688
c00186d1:	83 ec 08             	sub    esp,0x8
c00186d4:	6a 01                	push   0x1
c00186d6:	68 d2 b6 02 c0       	push   0xc002b6d2
c00186db:	e8 10 51 00 00       	call   c001d7f0 <Thr::loadDLL(char const*, bool)>
c00186e0:	83 c4 10             	add    esp,0x10
c00186e3:	83 ec 08             	sub    esp,0x8
c00186e6:	53                   	push   ebx
c00186e7:	50                   	push   eax
c00186e8:	e8 37 53 00 00       	call   c001da24 <Thr::executeDLL(unsigned long, void*)>
c00186ed:	83 c4 10             	add    esp,0x10
c00186f0:	8b 1d 88 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e688
c00186f6:	83 ec 08             	sub    esp,0x8
c00186f9:	6a 01                	push   0x1
c00186fb:	68 ef b6 02 c0       	push   0xc002b6ef
c0018700:	e8 eb 50 00 00       	call   c001d7f0 <Thr::loadDLL(char const*, bool)>
c0018705:	83 c4 10             	add    esp,0x10
c0018708:	83 ec 08             	sub    esp,0x8
c001870b:	53                   	push   ebx
c001870c:	50                   	push   eax
c001870d:	e8 12 53 00 00       	call   c001da24 <Thr::executeDLL(unsigned long, void*)>
c0018712:	83 c4 10             	add    esp,0x10
c0018715:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c001871a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018720:	83 e0 04             	and    eax,0x4
c0018723:	84 c0                	test   al,al
c0018725:	0f 84 d2 00 00 00    	je     c00187fd <ACPI::open(int, int, void*)+0x33b>
c001872b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018732:	83 ec 0c             	sub    esp,0xc
c0018735:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018739:	e8 a4 71 ff ff       	call   c000f8e2 <malloc>
c001873e:	83 c4 10             	add    esp,0x10
c0018741:	89 c3                	mov    ebx,eax
c0018743:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c0018748:	83 ec 04             	sub    esp,0x4
c001874b:	50                   	push   eax
c001874c:	68 0c b7 02 c0       	push   0xc002b70c
c0018751:	53                   	push   ebx
c0018752:	e8 c3 ad ff ff       	call   c001351a <File::File(char const*, Process*)>
c0018757:	83 c4 10             	add    esp,0x10
c001875a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001875e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018763:	74 17                	je     c001877c <ACPI::open(int, int, void*)+0x2ba>
c0018765:	83 ec 0c             	sub    esp,0xc
c0018768:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001876c:	e8 7b b0 ff ff       	call   c00137ec <File::exists()>
c0018771:	83 c4 10             	add    esp,0x10
c0018774:	84 c0                	test   al,al
c0018776:	74 04                	je     c001877c <ACPI::open(int, int, void*)+0x2ba>
c0018778:	b0 01                	mov    al,0x1
c001877a:	eb 02                	jmp    c001877e <ACPI::open(int, int, void*)+0x2bc>
c001877c:	b0 00                	mov    al,0x0
c001877e:	84 c0                	test   al,al
c0018780:	74 22                	je     c00187a4 <ACPI::open(int, int, void*)+0x2e2>
c0018782:	83 ec 08             	sub    esp,0x8
c0018785:	6a 01                	push   0x1
c0018787:	68 0c b7 02 c0       	push   0xc002b70c
c001878c:	e8 5f 50 00 00       	call   c001d7f0 <Thr::loadDLL(char const*, bool)>
c0018791:	83 c4 10             	add    esp,0x10
c0018794:	83 ec 08             	sub    esp,0x8
c0018797:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001879b:	50                   	push   eax
c001879c:	e8 83 52 00 00       	call   c001da24 <Thr::executeDLL(unsigned long, void*)>
c00187a1:	83 c4 10             	add    esp,0x10
c00187a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187a9:	74 1e                	je     c00187c9 <ACPI::open(int, int, void*)+0x307>
c00187ab:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187b0:	74 17                	je     c00187c9 <ACPI::open(int, int, void*)+0x307>
c00187b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00187b8:	83 c0 08             	add    eax,0x8
c00187bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00187bd:	83 ec 0c             	sub    esp,0xc
c00187c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00187c4:	ff d0                	call   eax
c00187c6:	83 c4 10             	add    esp,0x10
c00187c9:	a1 68 0f 03 c0       	mov    eax,ds:0xc0030f68
c00187ce:	83 ec 08             	sub    esp,0x8
c00187d1:	68 29 b7 02 c0       	push   0xc002b729
c00187d6:	50                   	push   eax
c00187d7:	e8 64 f5 ff ff       	call   c0017d40 <findDataTable(unsigned char*, char*)>
c00187dc:	83 c4 10             	add    esp,0x10
c00187df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187e3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00187e8:	74 13                	je     c00187fd <ACPI::open(int, int, void*)+0x33b>
c00187ea:	83 ec 08             	sub    esp,0x8
c00187ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00187f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187f5:	e8 80 fc ff ff       	call   c001847a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00187fa:	83 c4 10             	add    esp,0x10
c00187fd:	b8 00 00 00 00       	mov    eax,0x0
c0018802:	83 c4 28             	add    esp,0x28
c0018805:	5b                   	pop    ebx
c0018806:	c3                   	ret    
c0018807:	90                   	nop

c0018808 <ACPI::sleep()>:
c0018808:	83 ec 0c             	sub    esp,0xc
c001880b:	a1 40 0d 03 c0       	mov    eax,ds:0xc0030d40
c0018810:	85 c0                	test   eax,eax
c0018812:	74 07                	je     c001881b <ACPI::sleep()+0x13>
c0018814:	a1 40 0d 03 c0       	mov    eax,ds:0xc0030d40
c0018819:	ff d0                	call   eax
c001881b:	90                   	nop
c001881c:	83 c4 0c             	add    esp,0xc
c001881f:	c3                   	ret    

c0018820 <CPU::close(int, int, void*)>:
c0018820:	31 c0                	xor    eax,eax
c0018822:	c3                   	ret    
c0018823:	90                   	nop

c0018824 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018824:	55                   	push   ebp
c0018825:	57                   	push   edi
c0018826:	56                   	push   esi
c0018827:	53                   	push   ebx
c0018828:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001882c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018830:	89 ce                	mov    esi,ecx
c0018832:	89 d5                	mov    ebp,edx
c0018834:	80 f9 04             	cmp    cl,0x4
c0018837:	75 28                	jne    c0018861 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018839:	8d 42 f9             	lea    eax,[edx-0x7]
c001883c:	3c 03                	cmp    al,0x3
c001883e:	0f 86 63 01 00 00    	jbe    c00189a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018844:	80 fa 03             	cmp    dl,0x3
c0018847:	0f 84 5a 01 00 00    	je     c00189a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001884d:	8d 7a f2             	lea    edi,[edx-0xe]
c0018850:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c0018855:	89 fb                	mov    ebx,edi
c0018857:	80 fb 01             	cmp    bl,0x1
c001885a:	77 4e                	ja     c00188aa <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001885c:	e9 52 01 00 00       	jmp    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018861:	80 f9 05             	cmp    cl,0x5
c0018864:	75 4d                	jne    c00188b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018866:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c001886b:	80 fa 03             	cmp    dl,0x3
c001886e:	0f 86 3f 01 00 00    	jbe    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018874:	8d 7a fa             	lea    edi,[edx-0x6]
c0018877:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c001887c:	89 fb                	mov    ebx,edi
c001887e:	80 fb 01             	cmp    bl,0x1
c0018881:	0f 86 2c 01 00 00    	jbe    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018887:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c001888c:	80 fa 08             	cmp    dl,0x8
c001888f:	0f 84 1e 01 00 00    	je     c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018895:	89 d7                	mov    edi,edx
c0018897:	b8 f0 da 02 c0       	mov    eax,0xc002daf0
c001889c:	83 e7 fb             	and    edi,0xfffffffb
c001889f:	89 fb                	mov    ebx,edi
c00188a1:	80 fb 09             	cmp    bl,0x9
c00188a4:	0f 84 09 01 00 00    	je     c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188aa:	31 c0                	xor    eax,eax
c00188ac:	89 eb                	mov    ebx,ebp
c00188ae:	0f b6 fb             	movzx  edi,bl
c00188b1:	eb 30                	jmp    c00188e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00188b3:	31 c0                	xor    eax,eax
c00188b5:	80 f9 06             	cmp    cl,0x6
c00188b8:	75 f2                	jne    c00188ac <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188ba:	80 fa 0a             	cmp    dl,0xa
c00188bd:	77 ed                	ja     c00188ac <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188bf:	bf de 05 00 00       	mov    edi,0x5de
c00188c4:	0f a3 d7             	bt     edi,edx
c00188c7:	73 e3                	jae    c00188ac <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188c9:	b8 00 db 02 c0       	mov    eax,0xc002db00
c00188ce:	e9 e0 00 00 00       	jmp    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d3:	39 c7                	cmp    edi,eax
c00188d5:	0f 84 d3 00 00 00    	je     c00189ae <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188db:	40                   	inc    eax
c00188dc:	3d d0 00 00 00       	cmp    eax,0xd0
c00188e1:	74 09                	je     c00188ec <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00188e3:	89 f3                	mov    ebx,esi
c00188e5:	80 fb 0f             	cmp    bl,0xf
c00188e8:	75 f1                	jne    c00188db <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00188ea:	eb e7                	jmp    c00188d3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00188ec:	80 f9 10             	cmp    cl,0x10
c00188ef:	75 14                	jne    c0018905 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00188f1:	8d 42 fc             	lea    eax,[edx-0x4]
c00188f4:	83 e0 fb             	and    eax,0xfffffffb
c00188f7:	3c 02                	cmp    al,0x2
c00188f9:	76 34                	jbe    c001892f <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00188fb:	b8 0e bb 02 c0       	mov    eax,0xc002bb0e
c0018900:	80 fa 02             	cmp    dl,0x2
c0018903:	eb 24                	jmp    c0018929 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018905:	80 f9 11             	cmp    cl,0x11
c0018908:	75 13                	jne    c001891d <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001890a:	b8 0e bb 02 c0       	mov    eax,0xc002bb0e
c001890f:	80 fa 03             	cmp    dl,0x3
c0018912:	0f 85 9b 00 00 00    	jne    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018918:	e9 91 00 00 00       	jmp    c00189ae <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001891d:	80 f9 12             	cmp    cl,0x12
c0018920:	75 14                	jne    c0018936 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018922:	b8 0e bb 02 c0       	mov    eax,0xc002bb0e
c0018927:	fe ca                	dec    dl
c0018929:	0f 85 84 00 00 00    	jne    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001892f:	b8 20 db 02 c0       	mov    eax,0xc002db20
c0018934:	eb 7d                	jmp    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018936:	80 f9 14             	cmp    cl,0x14
c0018939:	75 12                	jne    c001894d <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001893b:	4a                   	dec    edx
c001893c:	b8 0e bb 02 c0       	mov    eax,0xc002bb0e
c0018941:	80 fa 01             	cmp    dl,0x1
c0018944:	77 6d                	ja     c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018946:	b8 30 db 02 c0       	mov    eax,0xc002db30
c001894b:	eb 66                	jmp    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001894d:	80 f9 15             	cmp    cl,0x15
c0018950:	75 31                	jne    c0018983 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018952:	b8 40 db 02 c0       	mov    eax,0xc002db40
c0018957:	80 fa 01             	cmp    dl,0x1
c001895a:	74 57                	je     c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001895c:	b8 0e bb 02 c0       	mov    eax,0xc002bb0e
c0018961:	80 fa 13             	cmp    dl,0x13
c0018964:	76 0c                	jbe    c0018972 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018966:	80 fa 30             	cmp    dl,0x30
c0018969:	75 48                	jne    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001896b:	b8 60 db 02 c0       	mov    eax,0xc002db60
c0018970:	eb 41                	jmp    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018972:	b9 04 00 09 00       	mov    ecx,0x90004
c0018977:	0f a3 d1             	bt     ecx,edx
c001897a:	73 37                	jae    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001897c:	b8 50 db 02 c0       	mov    eax,0xc002db50
c0018981:	eb 30                	jmp    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018983:	b8 0e bb 02 c0       	mov    eax,0xc002bb0e
c0018988:	80 f9 16             	cmp    cl,0x16
c001898b:	75 26                	jne    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001898d:	b8 70 db 02 c0       	mov    eax,0xc002db70
c0018992:	84 d2                	test   dl,dl
c0018994:	74 1d                	je     c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018996:	b8 0e bb 02 c0       	mov    eax,0xc002bb0e
c001899b:	80 fa 30             	cmp    dl,0x30
c001899e:	75 13                	jne    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a0:	b8 80 db 02 c0       	mov    eax,0xc002db80
c00189a5:	eb 0c                	jmp    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a7:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c00189ac:	eb 05                	jmp    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189ae:	b8 10 db 02 c0       	mov    eax,0xc002db10
c00189b3:	5b                   	pop    ebx
c00189b4:	5e                   	pop    esi
c00189b5:	5f                   	pop    edi
c00189b6:	5d                   	pop    ebp
c00189b7:	c3                   	ret    

c00189b8 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00189b8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189c0:	80 f9 04             	cmp    cl,0x4
c00189c3:	75 6b                	jne    c0018a30 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00189c5:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c00189ca:	80 fa 01             	cmp    dl,0x1
c00189cd:	0f 86 92 02 00 00    	jbe    c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d3:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c00189d8:	80 fa 02             	cmp    dl,0x2
c00189db:	0f 84 84 02 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e1:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c00189e6:	80 fa 03             	cmp    dl,0x3
c00189e9:	0f 84 76 02 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ef:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c00189f4:	80 fa 04             	cmp    dl,0x4
c00189f7:	0f 84 68 02 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fd:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018a02:	80 fa 05             	cmp    dl,0x5
c0018a05:	0f 84 5a 02 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0b:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018a10:	80 fa 07             	cmp    dl,0x7
c0018a13:	0f 84 4c 02 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a19:	83 ea 08             	sub    edx,0x8
c0018a1c:	b8 0e bb 02 c0       	mov    eax,0xc002bb0e
c0018a21:	80 fa 01             	cmp    dl,0x1
c0018a24:	0f 87 3b 02 00 00    	ja     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2a:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018a2f:	c3                   	ret    
c0018a30:	80 f9 05             	cmp    cl,0x5
c0018a33:	75 45                	jne    c0018a7a <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018a35:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018a38:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018a3d:	80 f9 02             	cmp    cl,0x2
c0018a40:	0f 86 1f 02 00 00    	jbe    c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a46:	80 fa 04             	cmp    dl,0x4
c0018a49:	0f 84 f3 01 00 00    	je     c0018c42 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018a4f:	80 fa 07             	cmp    dl,0x7
c0018a52:	0f 84 0d 02 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a58:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018a5d:	80 fa 08             	cmp    dl,0x8
c0018a60:	0f 84 ff 01 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a66:	b8 0e bb 02 c0       	mov    eax,0xc002bb0e
c0018a6b:	80 fa 09             	cmp    dl,0x9
c0018a6e:	0f 85 f1 01 00 00    	jne    c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a74:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018a79:	c3                   	ret    
c0018a7a:	80 f9 06             	cmp    cl,0x6
c0018a7d:	0f 85 85 01 00 00    	jne    c0018c08 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a83:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018a88:	80 fa 01             	cmp    dl,0x1
c0018a8b:	0f 84 d4 01 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a91:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a94:	3c 01                	cmp    al,0x1
c0018a96:	0f 86 ac 01 00 00    	jbe    c0018c48 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a9c:	80 fa 03             	cmp    dl,0x3
c0018a9f:	0f 84 a3 01 00 00    	je     c0018c48 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018aa5:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018aa8:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018aad:	80 f9 01             	cmp    cl,0x1
c0018ab0:	0f 86 af 01 00 00    	jbe    c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab6:	80 fa 09             	cmp    dl,0x9
c0018ab9:	0f 84 8f 01 00 00    	je     c0018c4e <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018abf:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018ac2:	80 f9 01             	cmp    cl,0x1
c0018ac5:	0f 86 9a 01 00 00    	jbe    c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018acb:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018ad0:	80 fa 0d             	cmp    dl,0xd
c0018ad3:	0f 84 8c 01 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad9:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018ade:	80 fa 0e             	cmp    dl,0xe
c0018ae1:	0f 84 7e 01 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae7:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018aec:	80 fa 0f             	cmp    dl,0xf
c0018aef:	0f 84 70 01 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af5:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018afa:	80 fa 15             	cmp    dl,0x15
c0018afd:	0f 84 62 01 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b03:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018b06:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018b0b:	80 f9 01             	cmp    cl,0x1
c0018b0e:	0f 86 51 01 00 00    	jbe    c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b14:	80 fa 1a             	cmp    dl,0x1a
c0018b17:	0f 84 37 01 00 00    	je     c0018c54 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018b1d:	80 fa 1c             	cmp    dl,0x1c
c0018b20:	0f 84 34 01 00 00    	je     c0018c5a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018b26:	80 fa 1d             	cmp    dl,0x1d
c0018b29:	0f 84 36 01 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2f:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018b34:	80 fa 25             	cmp    dl,0x25
c0018b37:	0f 84 28 01 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3d:	8d 4a da             	lea    ecx,[edx-0x26]
c0018b40:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018b45:	80 f9 01             	cmp    cl,0x1
c0018b48:	0f 86 17 01 00 00    	jbe    c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4e:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018b53:	80 fa 2a             	cmp    dl,0x2a
c0018b56:	0f 84 09 01 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5c:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018b61:	80 fa 2c             	cmp    dl,0x2c
c0018b64:	0f 84 fb 00 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b6a:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018b6f:	80 fa 2d             	cmp    dl,0x2d
c0018b72:	0f 84 ed 00 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b78:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018b7d:	80 fa 2e             	cmp    dl,0x2e
c0018b80:	0f 84 df 00 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b86:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018b8b:	80 fa 2f             	cmp    dl,0x2f
c0018b8e:	0f 84 d1 00 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b94:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b97:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018b9c:	80 f9 01             	cmp    cl,0x1
c0018b9f:	0f 86 c0 00 00 00    	jbe    c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba5:	b8 30 da 02 c0       	mov    eax,0xc002da30
c0018baa:	80 fa 37             	cmp    dl,0x37
c0018bad:	0f 84 b2 00 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb3:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018bb8:	80 fa 3a             	cmp    dl,0x3a
c0018bbb:	0f 84 a4 00 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc1:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018bc6:	80 fa 3c             	cmp    dl,0x3c
c0018bc9:	0f 84 96 00 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bcf:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018bd4:	80 fa 3d             	cmp    dl,0x3d
c0018bd7:	0f 84 88 00 00 00    	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bdd:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018be2:	80 fa 3e             	cmp    dl,0x3e
c0018be5:	74 7e                	je     c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018be7:	8d 42 bb             	lea    eax,[edx-0x45]
c0018bea:	3c 01                	cmp    al,0x1
c0018bec:	76 72                	jbe    c0018c60 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018bee:	80 fa 3f             	cmp    dl,0x3f
c0018bf1:	74 6d                	je     c0018c60 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018bf3:	80 fa 4a             	cmp    dl,0x4a
c0018bf6:	74 0a                	je     c0018c02 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018bf8:	b8 0e bb 02 c0       	mov    eax,0xc002bb0e
c0018bfd:	80 fa 4d             	cmp    dl,0x4d
c0018c00:	75 63                	jne    c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c02:	b8 30 da 02 c0       	mov    eax,0xc002da30
c0018c07:	c3                   	ret    
c0018c08:	b8 0e bb 02 c0       	mov    eax,0xc002bb0e
c0018c0d:	80 f9 0b             	cmp    cl,0xb
c0018c10:	75 0a                	jne    c0018c1c <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018c12:	fe ca                	dec    dl
c0018c14:	75 4f                	jne    c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c16:	b8 70 da 02 c0       	mov    eax,0xc002da70
c0018c1b:	c3                   	ret    
c0018c1c:	80 f9 0f             	cmp    cl,0xf
c0018c1f:	75 44                	jne    c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c21:	b8 80 da 02 c0       	mov    eax,0xc002da80
c0018c26:	80 fa 02             	cmp    dl,0x2
c0018c29:	76 3a                	jbe    c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c2b:	8d 42 fd             	lea    eax,[edx-0x3]
c0018c2e:	3c 01                	cmp    al,0x1
c0018c30:	76 0a                	jbe    c0018c3c <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018c32:	b8 0e bb 02 c0       	mov    eax,0xc002bb0e
c0018c37:	80 fa 06             	cmp    dl,0x6
c0018c3a:	75 29                	jne    c0018c65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c3c:	b8 90 da 02 c0       	mov    eax,0xc002da90
c0018c41:	c3                   	ret    
c0018c42:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018c47:	c3                   	ret    
c0018c48:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018c4d:	c3                   	ret    
c0018c4e:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018c53:	c3                   	ret    
c0018c54:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018c59:	c3                   	ret    
c0018c5a:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018c5f:	c3                   	ret    
c0018c60:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018c65:	c3                   	ret    

c0018c66 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c66:	60                   	pusha  
c0018c67:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c73:	9c                   	pushf  
c0018c74:	fa                   	cli    
c0018c75:	0f 09                	wbinvd 
c0018c77:	0f 30                	wrmsr  
c0018c79:	9d                   	popf   
c0018c7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c7e:	89 02                	mov    DWORD PTR [edx],eax
c0018c80:	61                   	popa   
c0018c81:	c3                   	ret    

c0018c82 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c82:	60                   	pusha  
c0018c83:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c87:	9c                   	pushf  
c0018c88:	fa                   	cli    
c0018c89:	0f 09                	wbinvd 
c0018c8b:	31 c0                	xor    eax,eax
c0018c8d:	31 d2                	xor    edx,edx
c0018c8f:	0f 32                	rdmsr  
c0018c91:	9d                   	popf   
c0018c92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c96:	89 02                	mov    DWORD PTR [edx],eax
c0018c98:	61                   	popa   
c0018c99:	c3                   	ret    

c0018c9a <CPU::AMD_K6_writeback(int, int, int)>:
c0018c9a:	56                   	push   esi
c0018c9b:	53                   	push   ebx
c0018c9c:	83 ec 10             	sub    esp,0x10
c0018c9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ca3:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018ca8:	75 5d                	jne    c0018d07 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018caa:	83 f8 08             	cmp    eax,0x8
c0018cad:	75 09                	jne    c0018cb8 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018caf:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018cb4:	7e 13                	jle    c0018cc9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cb6:	eb 30                	jmp    c0018ce8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018cb8:	83 f8 06             	cmp    eax,0x6
c0018cbb:	7c 4a                	jl     c0018d07 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cbd:	83 f8 07             	cmp    eax,0x7
c0018cc0:	7e 07                	jle    c0018cc9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cc2:	83 f8 09             	cmp    eax,0x9
c0018cc5:	74 21                	je     c0018ce8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018cc7:	eb 3e                	jmp    c0018d07 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cc9:	89 e6                	mov    esi,esp
c0018ccb:	8b 1d c4 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6c4
c0018cd1:	56                   	push   esi
c0018cd2:	c1 eb 15             	shr    ebx,0x15
c0018cd5:	68 82 00 00 c0       	push   0xc0000082
c0018cda:	83 e3 7e             	and    ebx,0x7e
c0018cdd:	e8 a0 ff ff ff       	call   c0018c82 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ce2:	56                   	push   esi
c0018ce3:	6a 00                	push   0x0
c0018ce5:	53                   	push   ebx
c0018ce6:	eb 12                	jmp    c0018cfa <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018ce8:	89 e3                	mov    ebx,esp
c0018cea:	53                   	push   ebx
c0018ceb:	68 82 00 00 c0       	push   0xc0000082
c0018cf0:	e8 8d ff ff ff       	call   c0018c82 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018cf5:	53                   	push   ebx
c0018cf6:	6a 00                	push   0x0
c0018cf8:	6a 00                	push   0x0
c0018cfa:	68 82 00 00 c0       	push   0xc0000082
c0018cff:	e8 62 ff ff ff       	call   c0018c66 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018d04:	83 c4 18             	add    esp,0x18
c0018d07:	83 c4 10             	add    esp,0x10
c0018d0a:	5b                   	pop    ebx
c0018d0b:	5e                   	pop    esi
c0018d0c:	c3                   	ret    
c0018d0d:	90                   	nop

c0018d0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018d0e:	55                   	push   ebp
c0018d0f:	57                   	push   edi
c0018d10:	56                   	push   esi
c0018d11:	53                   	push   ebx
c0018d12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d16:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d1a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d1e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018d22:	39 05 a0 db 02 c0    	cmp    DWORD PTR ds:0xc002dba0,eax
c0018d28:	75 23                	jne    c0018d4d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018d2a:	a1 cc 11 03 c0       	mov    eax,ds:0xc00311cc
c0018d2f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d33:	89 06                	mov    DWORD PTR [esi],eax
c0018d35:	a1 c8 11 03 c0       	mov    eax,ds:0xc00311c8
c0018d3a:	89 07                	mov    DWORD PTR [edi],eax
c0018d3c:	a1 c4 11 03 c0       	mov    eax,ds:0xc00311c4
c0018d41:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d44:	a1 c0 11 03 c0       	mov    eax,ds:0xc00311c0
c0018d49:	89 02                	mov    DWORD PTR [edx],eax
c0018d4b:	eb 3f                	jmp    c0018d8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018d4d:	31 c9                	xor    ecx,ecx
c0018d4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d53:	0f a2                	cpuid  
c0018d55:	89 06                	mov    DWORD PTR [esi],eax
c0018d57:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d59:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d5d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d60:	89 10                	mov    DWORD PTR [eax],edx
c0018d62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d66:	a3 a0 db 02 c0       	mov    ds:0xc002dba0,eax
c0018d6b:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d6d:	a3 cc 11 03 c0       	mov    ds:0xc00311cc,eax
c0018d72:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d74:	a3 c8 11 03 c0       	mov    ds:0xc00311c8,eax
c0018d79:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d7c:	a3 c4 11 03 c0       	mov    ds:0xc00311c4,eax
c0018d81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d85:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d87:	a3 c0 11 03 c0       	mov    ds:0xc00311c0,eax
c0018d8c:	5b                   	pop    ebx
c0018d8d:	5e                   	pop    esi
c0018d8e:	5f                   	pop    edi
c0018d8f:	5d                   	pop    ebp
c0018d90:	c3                   	ret    
c0018d91:	90                   	nop

c0018d92 <CPU::cpuidCheckEDX(unsigned int)>:
c0018d92:	83 ec 10             	sub    esp,0x10
c0018d95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d99:	50                   	push   eax
c0018d9a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d9e:	50                   	push   eax
c0018d9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da3:	50                   	push   eax
c0018da4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da8:	50                   	push   eax
c0018da9:	6a 01                	push   0x1
c0018dab:	e8 5e ff ff ff       	call   c0018d0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018db0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018db4:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018db8:	0f 95 c0             	setne  al
c0018dbb:	83 c4 24             	add    esp,0x24
c0018dbe:	c3                   	ret    
c0018dbf:	90                   	nop

c0018dc0 <CPU::cpuidCheckECX(unsigned int)>:
c0018dc0:	83 ec 10             	sub    esp,0x10
c0018dc3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc7:	50                   	push   eax
c0018dc8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dcc:	50                   	push   eax
c0018dcd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd1:	50                   	push   eax
c0018dd2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd6:	50                   	push   eax
c0018dd7:	6a 01                	push   0x1
c0018dd9:	e8 30 ff ff ff       	call   c0018d0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018de2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018de6:	0f 95 c0             	setne  al
c0018de9:	83 c4 24             	add    esp,0x24
c0018dec:	c3                   	ret    
c0018ded:	90                   	nop

c0018dee <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018dee:	83 ec 10             	sub    esp,0x10
c0018df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df5:	50                   	push   eax
c0018df6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dfa:	50                   	push   eax
c0018dfb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dff:	50                   	push   eax
c0018e00:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e04:	50                   	push   eax
c0018e05:	6a 07                	push   0x7
c0018e07:	e8 02 ff ff ff       	call   c0018d0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e10:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018e14:	0f 95 c0             	setne  al
c0018e17:	83 c4 24             	add    esp,0x24
c0018e1a:	c3                   	ret    
c0018e1b:	90                   	nop

c0018e1c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018e1c:	83 ec 10             	sub    esp,0x10
c0018e1f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e23:	50                   	push   eax
c0018e24:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e28:	50                   	push   eax
c0018e29:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e2d:	50                   	push   eax
c0018e2e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e32:	50                   	push   eax
c0018e33:	6a 07                	push   0x7
c0018e35:	e8 d4 fe ff ff       	call   c0018d0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e3e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e42:	0f 95 c0             	setne  al
c0018e45:	83 c4 24             	add    esp,0x24
c0018e48:	c3                   	ret    
c0018e49:	90                   	nop

c0018e4a <CPU::CPU()>:
c0018e4a:	83 ec 0c             	sub    esp,0xc
c0018e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e51:	83 ec 08             	sub    esp,0x8
c0018e54:	68 0e bb 02 c0       	push   0xc002bb0e
c0018e59:	50                   	push   eax
c0018e5a:	e8 79 b7 ff ff       	call   c00145d8 <Device::Device(char const*)>
c0018e5f:	83 c4 10             	add    esp,0x10
c0018e62:	ba e8 bb 02 c0       	mov    edx,0xc002bbe8
c0018e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e6b:	89 10                	mov    DWORD PTR [eax],edx
c0018e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e71:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e7f:	05 78 01 00 00       	add    eax,0x178
c0018e84:	83 ec 0c             	sub    esp,0xc
c0018e87:	50                   	push   eax
c0018e88:	e8 6d 62 ff ff       	call   c000f0fa <GDT::GDT()>
c0018e8d:	83 c4 10             	add    esp,0x10
c0018e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e94:	05 7c 09 00 00       	add    eax,0x97c
c0018e99:	83 ec 0c             	sub    esp,0xc
c0018e9c:	50                   	push   eax
c0018e9d:	e8 ba 64 ff ff       	call   c000f35c <IDT::IDT()>
c0018ea2:	83 c4 10             	add    esp,0x10
c0018ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ea9:	05 7c 11 00 00       	add    eax,0x117c
c0018eae:	83 ec 0c             	sub    esp,0xc
c0018eb1:	50                   	push   eax
c0018eb2:	e8 7b 86 ff ff       	call   c0011532 <TSS::TSS()>
c0018eb7:	83 c4 10             	add    esp,0x10
c0018eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ebe:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018ec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ec9:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018ed3:	90                   	nop
c0018ed4:	83 c4 0c             	add    esp,0xc
c0018ed7:	c3                   	ret    

c0018ed8 <CPU::displayFeatures()>:
c0018ed8:	53                   	push   ebx
c0018ed9:	83 ec 10             	sub    esp,0x10
c0018edc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018ee0:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018ee6:	68 1c b8 02 c0       	push   0xc002b81c
c0018eeb:	e8 d1 a0 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0018ef0:	59                   	pop    ecx
c0018ef1:	58                   	pop    eax
c0018ef2:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018ef8:	50                   	push   eax
c0018ef9:	68 2d b8 02 c0       	push   0xc002b82d
c0018efe:	e8 be a0 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0018f03:	58                   	pop    eax
c0018f04:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f0a:	5a                   	pop    edx
c0018f0b:	c1 e8 0e             	shr    eax,0xe
c0018f0e:	0f b6 c0             	movzx  eax,al
c0018f11:	50                   	push   eax
c0018f12:	68 3e b8 02 c0       	push   0xc002b83e
c0018f17:	e8 a5 a0 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0018f1c:	59                   	pop    ecx
c0018f1d:	58                   	pop    eax
c0018f1e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f24:	66 c1 e8 06          	shr    ax,0x6
c0018f28:	0f b6 c0             	movzx  eax,al
c0018f2b:	50                   	push   eax
c0018f2c:	68 4f b8 02 c0       	push   0xc002b84f
c0018f31:	e8 8b a0 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0018f36:	c7 04 24 fc bc 02 c0 	mov    DWORD PTR [esp],0xc002bcfc
c0018f3d:	e8 7f a0 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0018f42:	83 c4 10             	add    esp,0x10
c0018f45:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c0018f4a:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f51:	74 05                	je     c0018f58 <CPU::displayFeatures()+0x80>
c0018f53:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c0018f58:	52                   	push   edx
c0018f59:	52                   	push   edx
c0018f5a:	50                   	push   eax
c0018f5b:	68 60 b8 02 c0       	push   0xc002b860
c0018f60:	e8 5c a0 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0018f65:	83 c4 10             	add    esp,0x10
c0018f68:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c0018f6d:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f74:	78 05                	js     c0018f7b <CPU::displayFeatures()+0xa3>
c0018f76:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c0018f7b:	51                   	push   ecx
c0018f7c:	51                   	push   ecx
c0018f7d:	50                   	push   eax
c0018f7e:	68 77 b8 02 c0       	push   0xc002b877
c0018f83:	e8 39 a0 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0018f88:	83 c4 10             	add    esp,0x10
c0018f8b:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c0018f90:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f97:	75 05                	jne    c0018f9e <CPU::displayFeatures()+0xc6>
c0018f99:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c0018f9e:	52                   	push   edx
c0018f9f:	52                   	push   edx
c0018fa0:	50                   	push   eax
c0018fa1:	68 8e b8 02 c0       	push   0xc002b88e
c0018fa6:	e8 16 a0 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0018fab:	83 c4 10             	add    esp,0x10
c0018fae:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c0018fb3:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018fba:	75 05                	jne    c0018fc1 <CPU::displayFeatures()+0xe9>
c0018fbc:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c0018fc1:	51                   	push   ecx
c0018fc2:	51                   	push   ecx
c0018fc3:	50                   	push   eax
c0018fc4:	68 a5 b8 02 c0       	push   0xc002b8a5
c0018fc9:	e8 f3 9f ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0018fce:	83 c4 10             	add    esp,0x10
c0018fd1:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c0018fd6:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018fdd:	75 05                	jne    c0018fe4 <CPU::displayFeatures()+0x10c>
c0018fdf:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c0018fe4:	52                   	push   edx
c0018fe5:	52                   	push   edx
c0018fe6:	50                   	push   eax
c0018fe7:	68 bc b8 02 c0       	push   0xc002b8bc
c0018fec:	e8 d0 9f ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0018ff1:	83 c4 10             	add    esp,0x10
c0018ff4:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c0018ff9:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0019000:	75 05                	jne    c0019007 <CPU::displayFeatures()+0x12f>
c0019002:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c0019007:	51                   	push   ecx
c0019008:	51                   	push   ecx
c0019009:	50                   	push   eax
c001900a:	68 d3 b8 02 c0       	push   0xc002b8d3
c001900f:	e8 ad 9f ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0019014:	83 c4 10             	add    esp,0x10
c0019017:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c001901c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0019023:	75 05                	jne    c001902a <CPU::displayFeatures()+0x152>
c0019025:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c001902a:	52                   	push   edx
c001902b:	52                   	push   edx
c001902c:	50                   	push   eax
c001902d:	68 ea b8 02 c0       	push   0xc002b8ea
c0019032:	e8 8a 9f ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0019037:	83 c4 10             	add    esp,0x10
c001903a:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c001903f:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019046:	75 05                	jne    c001904d <CPU::displayFeatures()+0x175>
c0019048:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c001904d:	51                   	push   ecx
c001904e:	51                   	push   ecx
c001904f:	50                   	push   eax
c0019050:	68 01 b9 02 c0       	push   0xc002b901
c0019055:	e8 67 9f ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001905a:	83 c4 10             	add    esp,0x10
c001905d:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c0019062:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019069:	75 05                	jne    c0019070 <CPU::displayFeatures()+0x198>
c001906b:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c0019070:	52                   	push   edx
c0019071:	52                   	push   edx
c0019072:	50                   	push   eax
c0019073:	68 18 b9 02 c0       	push   0xc002b918
c0019078:	e8 44 9f ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001907d:	83 c4 10             	add    esp,0x10
c0019080:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c0019085:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001908c:	75 05                	jne    c0019093 <CPU::displayFeatures()+0x1bb>
c001908e:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c0019093:	51                   	push   ecx
c0019094:	51                   	push   ecx
c0019095:	50                   	push   eax
c0019096:	68 2f b9 02 c0       	push   0xc002b92f
c001909b:	e8 21 9f ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00190a0:	83 c4 10             	add    esp,0x10
c00190a3:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c00190a8:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00190af:	75 05                	jne    c00190b6 <CPU::displayFeatures()+0x1de>
c00190b1:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c00190b6:	52                   	push   edx
c00190b7:	52                   	push   edx
c00190b8:	50                   	push   eax
c00190b9:	68 46 b9 02 c0       	push   0xc002b946
c00190be:	e8 fe 9e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00190c3:	83 c4 10             	add    esp,0x10
c00190c6:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c00190cb:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00190d2:	75 05                	jne    c00190d9 <CPU::displayFeatures()+0x201>
c00190d4:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c00190d9:	51                   	push   ecx
c00190da:	51                   	push   ecx
c00190db:	50                   	push   eax
c00190dc:	68 5d b9 02 c0       	push   0xc002b95d
c00190e1:	e8 db 9e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00190e6:	83 c4 10             	add    esp,0x10
c00190e9:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c00190ee:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00190f5:	75 05                	jne    c00190fc <CPU::displayFeatures()+0x224>
c00190f7:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c00190fc:	52                   	push   edx
c00190fd:	52                   	push   edx
c00190fe:	50                   	push   eax
c00190ff:	68 74 b9 02 c0       	push   0xc002b974
c0019104:	e8 b8 9e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0019109:	83 c4 10             	add    esp,0x10
c001910c:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c0019111:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019118:	78 05                	js     c001911f <CPU::displayFeatures()+0x247>
c001911a:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c001911f:	51                   	push   ecx
c0019120:	51                   	push   ecx
c0019121:	50                   	push   eax
c0019122:	68 8b b9 02 c0       	push   0xc002b98b
c0019127:	e8 95 9e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001912c:	83 c4 10             	add    esp,0x10
c001912f:	b8 e6 a0 02 c0       	mov    eax,0xc002a0e6
c0019134:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001913b:	75 05                	jne    c0019142 <CPU::displayFeatures()+0x26a>
c001913d:	b8 ea a0 02 c0       	mov    eax,0xc002a0ea
c0019142:	52                   	push   edx
c0019143:	52                   	push   edx
c0019144:	50                   	push   eax
c0019145:	68 a2 b9 02 c0       	push   0xc002b9a2
c001914a:	e8 72 9e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001914f:	83 c4 18             	add    esp,0x18
c0019152:	5b                   	pop    ebx
c0019153:	c3                   	ret    

c0019154 <CPU::detectFeatures()>:
c0019154:	55                   	push   ebp
c0019155:	57                   	push   edi
c0019156:	56                   	push   esi
c0019157:	53                   	push   ebx
c0019158:	83 ec 50             	sub    esp,0x50
c001915b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001915f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019169:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019170:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019176:	6a 0d                	push   0xd
c0019178:	6a 00                	push   0x0
c001917a:	57                   	push   edi
c001917b:	e8 f8 75 fe ff       	call   c0000778 <memset>
c0019180:	83 c4 10             	add    esp,0x10
c0019183:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0019188:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001918f:	0f 84 20 09 00 00    	je     c0019ab5 <CPU::detectFeatures()+0x961>
c0019195:	83 ec 0c             	sub    esp,0xc
c0019198:	6a 10                	push   0x10
c001919a:	e8 f3 fb ff ff       	call   c0018d92 <CPU::cpuidCheckEDX(unsigned int)>
c001919f:	83 e0 01             	and    eax,0x1
c00191a2:	8d 14 00             	lea    edx,[eax+eax*1]
c00191a5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191ab:	83 e0 fd             	and    eax,0xfffffffd
c00191ae:	09 d0                	or     eax,edx
c00191b0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191b6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00191bd:	e8 d0 fb ff ff       	call   c0018d92 <CPU::cpuidCheckEDX(unsigned int)>
c00191c2:	83 e0 01             	and    eax,0x1
c00191c5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00191cc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191d2:	83 e0 fb             	and    eax,0xfffffffb
c00191d5:	09 d0                	or     eax,edx
c00191d7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191dd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00191e4:	e8 a9 fb ff ff       	call   c0018d92 <CPU::cpuidCheckEDX(unsigned int)>
c00191e9:	83 e0 01             	and    eax,0x1
c00191ec:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00191f3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191f9:	83 e0 f7             	and    eax,0xfffffff7
c00191fc:	09 d0                	or     eax,edx
c00191fe:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019204:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001920b:	e8 82 fb ff ff       	call   c0018d92 <CPU::cpuidCheckEDX(unsigned int)>
c0019210:	83 e0 01             	and    eax,0x1
c0019213:	c1 e0 04             	shl    eax,0x4
c0019216:	88 c2                	mov    dl,al
c0019218:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001921e:	83 e0 ef             	and    eax,0xffffffef
c0019221:	09 d0                	or     eax,edx
c0019223:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019229:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019230:	e8 5d fb ff ff       	call   c0018d92 <CPU::cpuidCheckEDX(unsigned int)>
c0019235:	83 e0 01             	and    eax,0x1
c0019238:	c1 e0 05             	shl    eax,0x5
c001923b:	88 c2                	mov    dl,al
c001923d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019243:	83 e0 df             	and    eax,0xffffffdf
c0019246:	09 d0                	or     eax,edx
c0019248:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001924e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019255:	e8 38 fb ff ff       	call   c0018d92 <CPU::cpuidCheckEDX(unsigned int)>
c001925a:	83 e0 01             	and    eax,0x1
c001925d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019260:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019266:	83 e0 fd             	and    eax,0xfffffffd
c0019269:	09 d0                	or     eax,edx
c001926b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019271:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019278:	e8 15 fb ff ff       	call   c0018d92 <CPU::cpuidCheckEDX(unsigned int)>
c001927d:	83 e0 01             	and    eax,0x1
c0019280:	c1 e0 06             	shl    eax,0x6
c0019283:	88 c2                	mov    dl,al
c0019285:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001928b:	83 e0 bf             	and    eax,0xffffffbf
c001928e:	09 d0                	or     eax,edx
c0019290:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019296:	58                   	pop    eax
c0019297:	8d 74 24 28          	lea    esi,[esp+0x28]
c001929b:	56                   	push   esi
c001929c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00192a0:	55                   	push   ebp
c00192a1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192a5:	50                   	push   eax
c00192a6:	8d 54 24 28          	lea    edx,[esp+0x28]
c00192aa:	52                   	push   edx
c00192ab:	6a 00                	push   0x0
c00192ad:	e8 5c fa ff ff       	call   c0018d0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192b2:	83 c4 1c             	add    esp,0x1c
c00192b5:	6a 04                	push   0x4
c00192b7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00192bb:	50                   	push   eax
c00192bc:	57                   	push   edi
c00192bd:	e8 82 74 fe ff       	call   c0000744 <memcpy>
c00192c2:	83 c4 0c             	add    esp,0xc
c00192c5:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00192cb:	6a 04                	push   0x4
c00192cd:	56                   	push   esi
c00192ce:	50                   	push   eax
c00192cf:	e8 70 74 fe ff       	call   c0000744 <memcpy>
c00192d4:	83 c4 0c             	add    esp,0xc
c00192d7:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00192dd:	6a 04                	push   0x4
c00192df:	55                   	push   ebp
c00192e0:	50                   	push   eax
c00192e1:	e8 5e 74 fe ff       	call   c0000744 <memcpy>
c00192e6:	58                   	pop    eax
c00192e7:	5a                   	pop    edx
c00192e8:	68 b9 b9 02 c0       	push   0xc002b9b9
c00192ed:	57                   	push   edi
c00192ee:	e8 cd 75 fe ff       	call   c00008c0 <strcmp>
c00192f3:	83 c4 10             	add    esp,0x10
c00192f6:	85 c0                	test   eax,eax
c00192f8:	75 0f                	jne    c0019309 <CPU::detectFeatures()+0x1b5>
c00192fa:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019304:	e9 22 02 00 00       	jmp    c001952b <CPU::detectFeatures()+0x3d7>
c0019309:	50                   	push   eax
c001930a:	50                   	push   eax
c001930b:	68 c6 b9 02 c0       	push   0xc002b9c6
c0019310:	57                   	push   edi
c0019311:	e8 aa 75 fe ff       	call   c00008c0 <strcmp>
c0019316:	83 c4 10             	add    esp,0x10
c0019319:	85 c0                	test   eax,eax
c001931b:	74 dd                	je     c00192fa <CPU::detectFeatures()+0x1a6>
c001931d:	51                   	push   ecx
c001931e:	51                   	push   ecx
c001931f:	68 d3 b9 02 c0       	push   0xc002b9d3
c0019324:	57                   	push   edi
c0019325:	e8 96 75 fe ff       	call   c00008c0 <strcmp>
c001932a:	83 c4 10             	add    esp,0x10
c001932d:	85 c0                	test   eax,eax
c001932f:	74 2a                	je     c001935b <CPU::detectFeatures()+0x207>
c0019331:	52                   	push   edx
c0019332:	52                   	push   edx
c0019333:	68 e0 b9 02 c0       	push   0xc002b9e0
c0019338:	57                   	push   edi
c0019339:	e8 82 75 fe ff       	call   c00008c0 <strcmp>
c001933e:	83 c4 10             	add    esp,0x10
c0019341:	85 c0                	test   eax,eax
c0019343:	74 16                	je     c001935b <CPU::detectFeatures()+0x207>
c0019345:	50                   	push   eax
c0019346:	50                   	push   eax
c0019347:	68 ed b9 02 c0       	push   0xc002b9ed
c001934c:	57                   	push   edi
c001934d:	e8 6e 75 fe ff       	call   c00008c0 <strcmp>
c0019352:	83 c4 10             	add    esp,0x10
c0019355:	85 c0                	test   eax,eax
c0019357:	74 48                	je     c00193a1 <CPU::detectFeatures()+0x24d>
c0019359:	eb 0f                	jmp    c001936a <CPU::detectFeatures()+0x216>
c001935b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019365:	e9 c1 01 00 00       	jmp    c001952b <CPU::detectFeatures()+0x3d7>
c001936a:	50                   	push   eax
c001936b:	50                   	push   eax
c001936c:	68 fa b9 02 c0       	push   0xc002b9fa
c0019371:	57                   	push   edi
c0019372:	e8 49 75 fe ff       	call   c00008c0 <strcmp>
c0019377:	83 c4 10             	add    esp,0x10
c001937a:	85 c0                	test   eax,eax
c001937c:	74 23                	je     c00193a1 <CPU::detectFeatures()+0x24d>
c001937e:	50                   	push   eax
c001937f:	50                   	push   eax
c0019380:	68 07 ba 02 c0       	push   0xc002ba07
c0019385:	57                   	push   edi
c0019386:	e8 35 75 fe ff       	call   c00008c0 <strcmp>
c001938b:	83 c4 10             	add    esp,0x10
c001938e:	85 c0                	test   eax,eax
c0019390:	75 1e                	jne    c00193b0 <CPU::detectFeatures()+0x25c>
c0019392:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001939c:	e9 8a 01 00 00       	jmp    c001952b <CPU::detectFeatures()+0x3d7>
c00193a1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00193ab:	e9 7b 01 00 00       	jmp    c001952b <CPU::detectFeatures()+0x3d7>
c00193b0:	50                   	push   eax
c00193b1:	50                   	push   eax
c00193b2:	68 14 ba 02 c0       	push   0xc002ba14
c00193b7:	57                   	push   edi
c00193b8:	e8 03 75 fe ff       	call   c00008c0 <strcmp>
c00193bd:	83 c4 10             	add    esp,0x10
c00193c0:	85 c0                	test   eax,eax
c00193c2:	75 0f                	jne    c00193d3 <CPU::detectFeatures()+0x27f>
c00193c4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00193ce:	e9 58 01 00 00       	jmp    c001952b <CPU::detectFeatures()+0x3d7>
c00193d3:	50                   	push   eax
c00193d4:	50                   	push   eax
c00193d5:	68 d3 b9 02 c0       	push   0xc002b9d3
c00193da:	57                   	push   edi
c00193db:	e8 e0 74 fe ff       	call   c00008c0 <strcmp>
c00193e0:	83 c4 10             	add    esp,0x10
c00193e3:	85 c0                	test   eax,eax
c00193e5:	75 0f                	jne    c00193f6 <CPU::detectFeatures()+0x2a2>
c00193e7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00193f1:	e9 35 01 00 00       	jmp    c001952b <CPU::detectFeatures()+0x3d7>
c00193f6:	50                   	push   eax
c00193f7:	50                   	push   eax
c00193f8:	68 21 ba 02 c0       	push   0xc002ba21
c00193fd:	57                   	push   edi
c00193fe:	e8 bd 74 fe ff       	call   c00008c0 <strcmp>
c0019403:	83 c4 10             	add    esp,0x10
c0019406:	85 c0                	test   eax,eax
c0019408:	75 0f                	jne    c0019419 <CPU::detectFeatures()+0x2c5>
c001940a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019414:	e9 12 01 00 00       	jmp    c001952b <CPU::detectFeatures()+0x3d7>
c0019419:	51                   	push   ecx
c001941a:	51                   	push   ecx
c001941b:	68 2e ba 02 c0       	push   0xc002ba2e
c0019420:	57                   	push   edi
c0019421:	e8 9a 74 fe ff       	call   c00008c0 <strcmp>
c0019426:	83 c4 10             	add    esp,0x10
c0019429:	85 c0                	test   eax,eax
c001942b:	75 0f                	jne    c001943c <CPU::detectFeatures()+0x2e8>
c001942d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019437:	e9 ef 00 00 00       	jmp    c001952b <CPU::detectFeatures()+0x3d7>
c001943c:	52                   	push   edx
c001943d:	52                   	push   edx
c001943e:	68 3b ba 02 c0       	push   0xc002ba3b
c0019443:	57                   	push   edi
c0019444:	e8 77 74 fe ff       	call   c00008c0 <strcmp>
c0019449:	83 c4 10             	add    esp,0x10
c001944c:	85 c0                	test   eax,eax
c001944e:	75 0f                	jne    c001945f <CPU::detectFeatures()+0x30b>
c0019450:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001945a:	e9 cc 00 00 00       	jmp    c001952b <CPU::detectFeatures()+0x3d7>
c001945f:	50                   	push   eax
c0019460:	50                   	push   eax
c0019461:	68 48 ba 02 c0       	push   0xc002ba48
c0019466:	57                   	push   edi
c0019467:	e8 54 74 fe ff       	call   c00008c0 <strcmp>
c001946c:	83 c4 10             	add    esp,0x10
c001946f:	85 c0                	test   eax,eax
c0019471:	75 0f                	jne    c0019482 <CPU::detectFeatures()+0x32e>
c0019473:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001947d:	e9 a9 00 00 00       	jmp    c001952b <CPU::detectFeatures()+0x3d7>
c0019482:	50                   	push   eax
c0019483:	50                   	push   eax
c0019484:	68 55 ba 02 c0       	push   0xc002ba55
c0019489:	57                   	push   edi
c001948a:	e8 31 74 fe ff       	call   c00008c0 <strcmp>
c001948f:	83 c4 10             	add    esp,0x10
c0019492:	85 c0                	test   eax,eax
c0019494:	75 0f                	jne    c00194a5 <CPU::detectFeatures()+0x351>
c0019496:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00194a0:	e9 86 00 00 00       	jmp    c001952b <CPU::detectFeatures()+0x3d7>
c00194a5:	50                   	push   eax
c00194a6:	50                   	push   eax
c00194a7:	68 62 ba 02 c0       	push   0xc002ba62
c00194ac:	57                   	push   edi
c00194ad:	e8 0e 74 fe ff       	call   c00008c0 <strcmp>
c00194b2:	83 c4 10             	add    esp,0x10
c00194b5:	85 c0                	test   eax,eax
c00194b7:	75 0c                	jne    c00194c5 <CPU::detectFeatures()+0x371>
c00194b9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00194c3:	eb 66                	jmp    c001952b <CPU::detectFeatures()+0x3d7>
c00194c5:	50                   	push   eax
c00194c6:	50                   	push   eax
c00194c7:	68 6f ba 02 c0       	push   0xc002ba6f
c00194cc:	57                   	push   edi
c00194cd:	e8 ee 73 fe ff       	call   c00008c0 <strcmp>
c00194d2:	83 c4 10             	add    esp,0x10
c00194d5:	85 c0                	test   eax,eax
c00194d7:	75 0c                	jne    c00194e5 <CPU::detectFeatures()+0x391>
c00194d9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00194e3:	eb 46                	jmp    c001952b <CPU::detectFeatures()+0x3d7>
c00194e5:	50                   	push   eax
c00194e6:	50                   	push   eax
c00194e7:	68 7c ba 02 c0       	push   0xc002ba7c
c00194ec:	57                   	push   edi
c00194ed:	e8 ce 73 fe ff       	call   c00008c0 <strcmp>
c00194f2:	83 c4 10             	add    esp,0x10
c00194f5:	85 c0                	test   eax,eax
c00194f7:	74 e0                	je     c00194d9 <CPU::detectFeatures()+0x385>
c00194f9:	50                   	push   eax
c00194fa:	50                   	push   eax
c00194fb:	68 89 ba 02 c0       	push   0xc002ba89
c0019500:	57                   	push   edi
c0019501:	e8 ba 73 fe ff       	call   c00008c0 <strcmp>
c0019506:	83 c4 10             	add    esp,0x10
c0019509:	85 c0                	test   eax,eax
c001950b:	74 cc                	je     c00194d9 <CPU::detectFeatures()+0x385>
c001950d:	51                   	push   ecx
c001950e:	51                   	push   ecx
c001950f:	68 96 ba 02 c0       	push   0xc002ba96
c0019514:	57                   	push   edi
c0019515:	e8 a6 73 fe ff       	call   c00008c0 <strcmp>
c001951a:	83 c4 10             	add    esp,0x10
c001951d:	85 c0                	test   eax,eax
c001951f:	74 b8                	je     c00194d9 <CPU::detectFeatures()+0x385>
c0019521:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001952b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019530:	0f 86 be 00 00 00    	jbe    c00195f4 <CPU::detectFeatures()+0x4a0>
c0019536:	83 ec 0c             	sub    esp,0xc
c0019539:	68 80 00 00 00       	push   0x80
c001953e:	e8 ab f8 ff ff       	call   c0018dee <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019543:	83 e0 01             	and    eax,0x1
c0019546:	c1 e0 06             	shl    eax,0x6
c0019549:	88 c2                	mov    dl,al
c001954b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019551:	83 e0 bf             	and    eax,0xffffffbf
c0019554:	09 d0                	or     eax,edx
c0019556:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001955c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019563:	e8 86 f8 ff ff       	call   c0018dee <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019568:	83 e0 01             	and    eax,0x1
c001956b:	c1 e0 04             	shl    eax,0x4
c001956e:	88 c2                	mov    dl,al
c0019570:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019576:	83 e0 ef             	and    eax,0xffffffef
c0019579:	09 d0                	or     eax,edx
c001957b:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019581:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019588:	e8 61 f8 ff ff       	call   c0018dee <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001958d:	c1 e0 07             	shl    eax,0x7
c0019590:	88 c2                	mov    dl,al
c0019592:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019598:	83 e0 7f             	and    eax,0x7f
c001959b:	09 d0                	or     eax,edx
c001959d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195a3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00195aa:	e8 6d f8 ff ff       	call   c0018e1c <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195af:	83 e0 01             	and    eax,0x1
c00195b2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00195b9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195bf:	83 e0 f7             	and    eax,0xfffffff7
c00195c2:	09 d0                	or     eax,edx
c00195c4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195ca:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00195d1:	e8 46 f8 ff ff       	call   c0018e1c <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195d6:	83 c4 10             	add    esp,0x10
c00195d9:	83 e0 01             	and    eax,0x1
c00195dc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00195e3:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00195e9:	83 e0 fb             	and    eax,0xfffffffb
c00195ec:	09 d0                	or     eax,edx
c00195ee:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00195f4:	83 ec 0c             	sub    esp,0xc
c00195f7:	56                   	push   esi
c00195f8:	55                   	push   ebp
c00195f9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00195fd:	57                   	push   edi
c00195fe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019602:	50                   	push   eax
c0019603:	6a 01                	push   0x1
c0019605:	e8 04 f7 ff ff       	call   c0018d0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001960a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001960e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019614:	88 ca                	mov    dl,cl
c0019616:	83 e0 f0             	and    eax,0xfffffff0
c0019619:	83 e2 0f             	and    edx,0xf
c001961c:	09 d0                	or     eax,edx
c001961e:	88 ca                	mov    dl,cl
c0019620:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019626:	c0 ea 04             	shr    dl,0x4
c0019629:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001962d:	0f b6 c2             	movzx  eax,dl
c0019630:	83 c4 20             	add    esp,0x20
c0019633:	c1 e0 06             	shl    eax,0x6
c0019636:	89 c5                	mov    ebp,eax
c0019638:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001963e:	66 25 3f c0          	and    ax,0xc03f
c0019642:	09 e8                	or     eax,ebp
c0019644:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001964b:	89 c8                	mov    eax,ecx
c001964d:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019653:	c1 e8 08             	shr    eax,0x8
c0019656:	83 e2 3f             	and    edx,0x3f
c0019659:	83 e0 0f             	and    eax,0xf
c001965c:	89 c5                	mov    ebp,eax
c001965e:	c1 e5 06             	shl    ebp,0x6
c0019661:	09 d5                	or     ebp,edx
c0019663:	89 ea                	mov    edx,ebp
c0019665:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001966b:	88 c2                	mov    dl,al
c001966d:	c0 ea 02             	shr    dl,0x2
c0019670:	89 d5                	mov    ebp,edx
c0019672:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019678:	83 e2 c0             	and    edx,0xffffffc0
c001967b:	09 d5                	or     ebp,edx
c001967d:	89 ea                	mov    edx,ebp
c001967f:	89 cd                	mov    ebp,ecx
c0019681:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019687:	c1 ed 0c             	shr    ebp,0xc
c001968a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019690:	83 e5 03             	and    ebp,0x3
c0019693:	83 e2 cf             	and    edx,0xffffffcf
c0019696:	c1 e5 04             	shl    ebp,0x4
c0019699:	09 d5                	or     ebp,edx
c001969b:	3c 06                	cmp    al,0x6
c001969d:	89 ea                	mov    edx,ebp
c001969f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00196a5:	74 04                	je     c00196ab <CPU::detectFeatures()+0x557>
c00196a7:	3c 0f                	cmp    al,0xf
c00196a9:	75 5c                	jne    c0019707 <CPU::detectFeatures()+0x5b3>
c00196ab:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00196af:	89 cd                	mov    ebp,ecx
c00196b1:	c1 ed 10             	shr    ebp,0x10
c00196b4:	c1 e5 04             	shl    ebp,0x4
c00196b7:	09 ea                	or     edx,ebp
c00196b9:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00196bf:	0f b6 d2             	movzx  edx,dl
c00196c2:	66 81 e5 3f c0       	and    bp,0xc03f
c00196c7:	c1 e2 06             	shl    edx,0x6
c00196ca:	09 ea                	or     edx,ebp
c00196cc:	3c 0f                	cmp    al,0xf
c00196ce:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00196d5:	75 30                	jne    c0019707 <CPU::detectFeatures()+0x5b3>
c00196d7:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00196dd:	c1 e9 14             	shr    ecx,0x14
c00196e0:	83 e0 3f             	and    eax,0x3f
c00196e3:	83 c1 0f             	add    ecx,0xf
c00196e6:	88 ca                	mov    dl,cl
c00196e8:	c0 e9 02             	shr    cl,0x2
c00196eb:	c1 e2 06             	shl    edx,0x6
c00196ee:	09 d0                	or     eax,edx
c00196f0:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00196f6:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00196fc:	83 e0 c0             	and    eax,0xffffffc0
c00196ff:	09 c1                	or     ecx,eax
c0019701:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019707:	83 ec 0c             	sub    esp,0xc
c001970a:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019711:	56                   	push   esi
c0019712:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019716:	50                   	push   eax
c0019717:	57                   	push   edi
c0019718:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001971c:	55                   	push   ebp
c001971d:	68 00 00 00 80       	push   0x80000000
c0019722:	e8 e7 f5 ff ff       	call   c0018d0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019727:	83 c4 20             	add    esp,0x20
c001972a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019732:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019736:	76 1e                	jbe    c0019756 <CPU::detectFeatures()+0x602>
c0019738:	83 ec 0c             	sub    esp,0xc
c001973b:	56                   	push   esi
c001973c:	50                   	push   eax
c001973d:	57                   	push   edi
c001973e:	55                   	push   ebp
c001973f:	68 01 00 00 80       	push   0x80000001
c0019744:	e8 c5 f5 ff ff       	call   c0018d0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019749:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019753:	83 c4 20             	add    esp,0x20
c0019756:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001975c:	83 f8 01             	cmp    eax,0x1
c001975f:	75 6f                	jne    c00197d0 <CPU::detectFeatures()+0x67c>
c0019761:	51                   	push   ecx
c0019762:	51                   	push   ecx
c0019763:	68 a2 ba 02 c0       	push   0xc002baa2
c0019768:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001976c:	56                   	push   esi
c001976d:	e8 c2 70 fe ff       	call   c0000834 <strcpy>
c0019772:	5f                   	pop    edi
c0019773:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019779:	5d                   	pop    ebp
c001977a:	66 c1 e8 06          	shr    ax,0x6
c001977e:	0f b6 c0             	movzx  eax,al
c0019781:	50                   	push   eax
c0019782:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019788:	c1 e8 0e             	shr    eax,0xe
c001978b:	0f b6 c0             	movzx  eax,al
c001978e:	50                   	push   eax
c001978f:	e8 24 f2 ff ff       	call   c00189b8 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019794:	5a                   	pop    edx
c0019795:	59                   	pop    ecx
c0019796:	50                   	push   eax
c0019797:	56                   	push   esi
c0019798:	e8 d7 71 fe ff       	call   c0000974 <strcat>
c001979d:	5f                   	pop    edi
c001979e:	5d                   	pop    ebp
c001979f:	56                   	push   esi
c00197a0:	53                   	push   ebx
c00197a1:	e8 24 ae ff ff       	call   c00145ca <Device::setName(char const*)>
c00197a6:	58                   	pop    eax
c00197a7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197ad:	5a                   	pop    edx
c00197ae:	68 a9 ba 02 c0       	push   0xc002baa9
c00197b3:	50                   	push   eax
c00197b4:	e8 07 71 fe ff       	call   c00008c0 <strcmp>
c00197b9:	83 c4 10             	add    esp,0x10
c00197bc:	85 c0                	test   eax,eax
c00197be:	0f 85 71 03 00 00    	jne    c0019b35 <CPU::detectFeatures()+0x9e1>
c00197c4:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00197cb:	e9 65 03 00 00       	jmp    c0019b35 <CPU::detectFeatures()+0x9e1>
c00197d0:	83 f8 02             	cmp    eax,0x2
c00197d3:	0f 85 b5 00 00 00    	jne    c001988e <CPU::detectFeatures()+0x73a>
c00197d9:	57                   	push   edi
c00197da:	57                   	push   edi
c00197db:	68 bb ba 02 c0       	push   0xc002babb
c00197e0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00197e4:	56                   	push   esi
c00197e5:	e8 4a 70 fe ff       	call   c0000834 <strcpy>
c00197ea:	5d                   	pop    ebp
c00197eb:	58                   	pop    eax
c00197ec:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197f2:	66 c1 e8 06          	shr    ax,0x6
c00197f6:	0f b6 c0             	movzx  eax,al
c00197f9:	50                   	push   eax
c00197fa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019800:	c1 e8 0e             	shr    eax,0xe
c0019803:	0f b6 c0             	movzx  eax,al
c0019806:	50                   	push   eax
c0019807:	e8 18 f0 ff ff       	call   c0018824 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001980c:	5a                   	pop    edx
c001980d:	59                   	pop    ecx
c001980e:	50                   	push   eax
c001980f:	56                   	push   esi
c0019810:	e8 5f 71 fe ff       	call   c0000974 <strcat>
c0019815:	5f                   	pop    edi
c0019816:	5d                   	pop    ebp
c0019817:	56                   	push   esi
c0019818:	53                   	push   ebx
c0019819:	e8 ac ad ff ff       	call   c00145ca <Device::setName(char const*)>
c001981e:	58                   	pop    eax
c001981f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019825:	5a                   	pop    edx
c0019826:	68 c0 ba 02 c0       	push   0xc002bac0
c001982b:	50                   	push   eax
c001982c:	e8 8f 70 fe ff       	call   c00008c0 <strcmp>
c0019831:	83 c4 10             	add    esp,0x10
c0019834:	85 c0                	test   eax,eax
c0019836:	75 20                	jne    c0019858 <CPU::detectFeatures()+0x704>
c0019838:	8b 15 88 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e688
c001983e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019844:	a8 01                	test   al,0x1
c0019846:	74 10                	je     c0019858 <CPU::detectFeatures()+0x704>
c0019848:	83 e0 fe             	and    eax,0xfffffffe
c001984b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019851:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019858:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001985e:	c1 e8 0e             	shr    eax,0xe
c0019861:	3c 05                	cmp    al,0x5
c0019863:	0f 85 cc 02 00 00    	jne    c0019b35 <CPU::detectFeatures()+0x9e1>
c0019869:	56                   	push   esi
c001986a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019870:	83 e0 0f             	and    eax,0xf
c0019873:	50                   	push   eax
c0019874:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001987a:	66 c1 e8 06          	shr    ax,0x6
c001987e:	0f b6 c0             	movzx  eax,al
c0019881:	50                   	push   eax
c0019882:	6a 05                	push   0x5
c0019884:	e8 11 f4 ff ff       	call   c0018c9a <CPU::AMD_K6_writeback(int, int, int)>
c0019889:	e9 1f 02 00 00       	jmp    c0019aad <CPU::detectFeatures()+0x959>
c001988e:	8d 50 fd             	lea    edx,[eax-0x3]
c0019891:	83 fa 01             	cmp    edx,0x1
c0019894:	76 09                	jbe    c001989f <CPU::detectFeatures()+0x74b>
c0019896:	83 f8 06             	cmp    eax,0x6
c0019899:	0f 85 91 01 00 00    	jne    c0019a30 <CPU::detectFeatures()+0x8dc>
c001989f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198a5:	c1 ea 0e             	shr    edx,0xe
c00198a8:	80 fa 05             	cmp    dl,0x5
c00198ab:	75 7b                	jne    c0019928 <CPU::detectFeatures()+0x7d4>
c00198ad:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198b3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198b8:	66 81 fa 00 01       	cmp    dx,0x100
c00198bd:	75 0c                	jne    c00198cb <CPU::detectFeatures()+0x777>
c00198bf:	51                   	push   ecx
c00198c0:	51                   	push   ecx
c00198c1:	68 c7 ba 02 c0       	push   0xc002bac7
c00198c6:	e9 dc 01 00 00       	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c00198cb:	66 81 fa 00 02       	cmp    dx,0x200
c00198d0:	75 0c                	jne    c00198de <CPU::detectFeatures()+0x78a>
c00198d2:	52                   	push   edx
c00198d3:	52                   	push   edx
c00198d4:	68 da ba 02 c0       	push   0xc002bada
c00198d9:	e9 c9 01 00 00       	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c00198de:	66 81 fa 40 02       	cmp    dx,0x240
c00198e3:	75 0c                	jne    c00198f1 <CPU::detectFeatures()+0x79d>
c00198e5:	50                   	push   eax
c00198e6:	50                   	push   eax
c00198e7:	68 ec ba 02 c0       	push   0xc002baec
c00198ec:	e9 b6 01 00 00       	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c00198f1:	83 f8 06             	cmp    eax,0x6
c00198f4:	75 0c                	jne    c0019902 <CPU::detectFeatures()+0x7ae>
c00198f6:	50                   	push   eax
c00198f7:	50                   	push   eax
c00198f8:	68 fe ba 02 c0       	push   0xc002bafe
c00198fd:	e9 a5 01 00 00       	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c0019902:	83 f8 04             	cmp    eax,0x4
c0019905:	75 0c                	jne    c0019913 <CPU::detectFeatures()+0x7bf>
c0019907:	50                   	push   eax
c0019908:	50                   	push   eax
c0019909:	68 0a bb 02 c0       	push   0xc002bb0a
c001990e:	e9 94 01 00 00       	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c0019913:	83 f8 03             	cmp    eax,0x3
c0019916:	0f 85 19 02 00 00    	jne    c0019b35 <CPU::detectFeatures()+0x9e1>
c001991c:	50                   	push   eax
c001991d:	50                   	push   eax
c001991e:	68 12 bb 02 c0       	push   0xc002bb12
c0019923:	e9 7f 01 00 00       	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c0019928:	80 fa 06             	cmp    dl,0x6
c001992b:	0f 85 db 00 00 00    	jne    c0019a0c <CPU::detectFeatures()+0x8b8>
c0019931:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019937:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001993c:	66 81 fa 80 01       	cmp    dx,0x180
c0019941:	75 0c                	jne    c001994f <CPU::detectFeatures()+0x7fb>
c0019943:	50                   	push   eax
c0019944:	50                   	push   eax
c0019945:	68 1d bb 02 c0       	push   0xc002bb1d
c001994a:	e9 58 01 00 00       	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c001994f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019955:	66 f7 c1 80 ff       	test   cx,0xff80
c001995a:	75 0c                	jne    c0019968 <CPU::detectFeatures()+0x814>
c001995c:	50                   	push   eax
c001995d:	50                   	push   eax
c001995e:	68 2d bb 02 c0       	push   0xc002bb2d
c0019963:	e9 3f 01 00 00       	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c0019968:	66 81 fa 40 02       	cmp    dx,0x240
c001996d:	75 0c                	jne    c001997b <CPU::detectFeatures()+0x827>
c001996f:	55                   	push   ebp
c0019970:	55                   	push   ebp
c0019971:	68 34 bb 02 c0       	push   0xc002bb34
c0019976:	e9 2c 01 00 00       	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c001997b:	66 81 fa 80 02       	cmp    dx,0x280
c0019980:	75 0c                	jne    c001998e <CPU::detectFeatures()+0x83a>
c0019982:	57                   	push   edi
c0019983:	57                   	push   edi
c0019984:	68 3d bb 02 c0       	push   0xc002bb3d
c0019989:	e9 19 01 00 00       	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c001998e:	66 81 fa 40 03       	cmp    dx,0x340
c0019993:	74 ed                	je     c0019982 <CPU::detectFeatures()+0x82e>
c0019995:	66 81 fa c0 03       	cmp    dx,0x3c0
c001999a:	75 0c                	jne    c00199a8 <CPU::detectFeatures()+0x854>
c001999c:	56                   	push   esi
c001999d:	56                   	push   esi
c001999e:	68 44 bb 02 c0       	push   0xc002bb44
c00199a3:	e9 ff 00 00 00       	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c00199a8:	83 f8 06             	cmp    eax,0x6
c00199ab:	0f 84 45 ff ff ff    	je     c00198f6 <CPU::detectFeatures()+0x7a2>
c00199b1:	83 f8 04             	cmp    eax,0x4
c00199b4:	0f 84 4d ff ff ff    	je     c0019907 <CPU::detectFeatures()+0x7b3>
c00199ba:	83 f8 03             	cmp    eax,0x3
c00199bd:	0f 85 72 01 00 00    	jne    c0019b35 <CPU::detectFeatures()+0x9e1>
c00199c3:	51                   	push   ecx
c00199c4:	51                   	push   ecx
c00199c5:	68 4d bb 02 c0       	push   0xc002bb4d
c00199ca:	53                   	push   ebx
c00199cb:	e8 fa ab ff ff       	call   c00145ca <Device::setName(char const*)>
c00199d0:	b1 c1                	mov    cl,0xc1
c00199d2:	88 c8                	mov    al,cl
c00199d4:	e6 22                	out    0x22,al
c00199d6:	e4 23                	in     al,0x23
c00199d8:	88 c2                	mov    dl,al
c00199da:	88 c8                	mov    al,cl
c00199dc:	e6 22                	out    0x22,al
c00199de:	88 d0                	mov    al,dl
c00199e0:	83 c8 10             	or     eax,0x10
c00199e3:	e6 23                	out    0x23,al
c00199e5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00199ec:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00199ef:	89 d0                	mov    eax,edx
c00199f1:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00199f7:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00199fb:	40                   	inc    eax
c00199fc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019a02:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019a07:	e9 a1 00 00 00       	jmp    c0019aad <CPU::detectFeatures()+0x959>
c0019a0c:	83 f8 06             	cmp    eax,0x6
c0019a0f:	0f 84 e1 fe ff ff    	je     c00198f6 <CPU::detectFeatures()+0x7a2>
c0019a15:	83 f8 04             	cmp    eax,0x4
c0019a18:	0f 84 e9 fe ff ff    	je     c0019907 <CPU::detectFeatures()+0x7b3>
c0019a1e:	83 f8 03             	cmp    eax,0x3
c0019a21:	0f 85 0e 01 00 00    	jne    c0019b35 <CPU::detectFeatures()+0x9e1>
c0019a27:	52                   	push   edx
c0019a28:	52                   	push   edx
c0019a29:	68 58 bb 02 c0       	push   0xc002bb58
c0019a2e:	eb 77                	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c0019a30:	83 f8 07             	cmp    eax,0x7
c0019a33:	75 09                	jne    c0019a3e <CPU::detectFeatures()+0x8ea>
c0019a35:	50                   	push   eax
c0019a36:	50                   	push   eax
c0019a37:	68 62 bb 02 c0       	push   0xc002bb62
c0019a3c:	eb 69                	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c0019a3e:	83 f8 0a             	cmp    eax,0xa
c0019a41:	75 09                	jne    c0019a4c <CPU::detectFeatures()+0x8f8>
c0019a43:	50                   	push   eax
c0019a44:	50                   	push   eax
c0019a45:	68 6d bb 02 c0       	push   0xc002bb6d
c0019a4a:	eb 5b                	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c0019a4c:	83 f8 0b             	cmp    eax,0xb
c0019a4f:	75 09                	jne    c0019a5a <CPU::detectFeatures()+0x906>
c0019a51:	50                   	push   eax
c0019a52:	50                   	push   eax
c0019a53:	68 75 bb 02 c0       	push   0xc002bb75
c0019a58:	eb 4d                	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c0019a5a:	83 f8 08             	cmp    eax,0x8
c0019a5d:	75 09                	jne    c0019a68 <CPU::detectFeatures()+0x914>
c0019a5f:	50                   	push   eax
c0019a60:	50                   	push   eax
c0019a61:	68 7e bb 02 c0       	push   0xc002bb7e
c0019a66:	eb 3f                	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c0019a68:	83 f8 09             	cmp    eax,0x9
c0019a6b:	75 09                	jne    c0019a76 <CPU::detectFeatures()+0x922>
c0019a6d:	50                   	push   eax
c0019a6e:	50                   	push   eax
c0019a6f:	68 86 bb 02 c0       	push   0xc002bb86
c0019a74:	eb 31                	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c0019a76:	83 f8 05             	cmp    eax,0x5
c0019a79:	75 09                	jne    c0019a84 <CPU::detectFeatures()+0x930>
c0019a7b:	50                   	push   eax
c0019a7c:	50                   	push   eax
c0019a7d:	68 8e bb 02 c0       	push   0xc002bb8e
c0019a82:	eb 23                	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c0019a84:	83 f8 0c             	cmp    eax,0xc
c0019a87:	75 09                	jne    c0019a92 <CPU::detectFeatures()+0x93e>
c0019a89:	55                   	push   ebp
c0019a8a:	55                   	push   ebp
c0019a8b:	68 9c bb 02 c0       	push   0xc002bb9c
c0019a90:	eb 15                	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c0019a92:	83 f8 0d             	cmp    eax,0xd
c0019a95:	75 09                	jne    c0019aa0 <CPU::detectFeatures()+0x94c>
c0019a97:	57                   	push   edi
c0019a98:	57                   	push   edi
c0019a99:	68 a7 bb 02 c0       	push   0xc002bba7
c0019a9e:	eb 07                	jmp    c0019aa7 <CPU::detectFeatures()+0x953>
c0019aa0:	56                   	push   esi
c0019aa1:	56                   	push   esi
c0019aa2:	68 bb bb 02 c0       	push   0xc002bbbb
c0019aa7:	53                   	push   ebx
c0019aa8:	e8 1d ab ff ff       	call   c00145ca <Device::setName(char const*)>
c0019aad:	83 c4 10             	add    esp,0x10
c0019ab0:	e9 80 00 00 00       	jmp    c0019b35 <CPU::detectFeatures()+0x9e1>
c0019ab5:	51                   	push   ecx
c0019ab6:	51                   	push   ecx
c0019ab7:	68 07 ba 02 c0       	push   0xc002ba07
c0019abc:	57                   	push   edi
c0019abd:	e8 72 6d fe ff       	call   c0000834 <strcpy>
c0019ac2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019acc:	e8 dd 67 fe ff       	call   c00002ae <is486>
c0019ad1:	83 c4 10             	add    esp,0x10
c0019ad4:	85 c0                	test   eax,eax
c0019ad6:	74 2b                	je     c0019b03 <CPU::detectFeatures()+0x9af>
c0019ad8:	52                   	push   edx
c0019ad9:	52                   	push   edx
c0019ada:	68 c7 bb 02 c0       	push   0xc002bbc7
c0019adf:	53                   	push   ebx
c0019ae0:	e8 e5 aa ff ff       	call   c00145ca <Device::setName(char const*)>
c0019ae5:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019aec:	0f 20 c0             	mov    eax,cr0
c0019aef:	83 e0 14             	and    eax,0x14
c0019af2:	83 c4 10             	add    esp,0x10
c0019af5:	83 f8 04             	cmp    eax,0x4
c0019af8:	75 1f                	jne    c0019b19 <CPU::detectFeatures()+0x9c5>
c0019afa:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019b01:	eb 32                	jmp    c0019b35 <CPU::detectFeatures()+0x9e1>
c0019b03:	50                   	push   eax
c0019b04:	50                   	push   eax
c0019b05:	68 d2 bb 02 c0       	push   0xc002bbd2
c0019b0a:	53                   	push   ebx
c0019b0b:	e8 ba aa ff ff       	call   c00145ca <Device::setName(char const*)>
c0019b10:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019b17:	eb d3                	jmp    c0019aec <CPU::detectFeatures()+0x998>
c0019b19:	e8 6b 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019b1e:	83 e0 01             	and    eax,0x1
c0019b21:	8d 14 00             	lea    edx,[eax+eax*1]
c0019b24:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019b2a:	83 e0 fd             	and    eax,0xfffffffd
c0019b2d:	09 d0                	or     eax,edx
c0019b2f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019b35:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019b3c:	83 c4 4c             	add    esp,0x4c
c0019b3f:	5b                   	pop    ebx
c0019b40:	5e                   	pop    esi
c0019b41:	5f                   	pop    edi
c0019b42:	5d                   	pop    ebp
c0019b43:	c3                   	ret    

c0019b44 <CPU::setupSMEP()>:
c0019b44:	0f 20 e0             	mov    eax,cr4
c0019b47:	0d 00 00 10 00       	or     eax,0x100000
c0019b4c:	0f 22 e0             	mov    cr4,eax
c0019b4f:	c3                   	ret    

c0019b50 <CPU::setupUMIP()>:
c0019b50:	0f 20 e0             	mov    eax,cr4
c0019b53:	80 cc 08             	or     ah,0x8
c0019b56:	0f 22 e0             	mov    cr4,eax
c0019b59:	c3                   	ret    

c0019b5a <CPU::setupTSC()>:
c0019b5a:	0f 20 e0             	mov    eax,cr4
c0019b5d:	83 c8 04             	or     eax,0x4
c0019b60:	0f 22 e0             	mov    cr4,eax
c0019b63:	c3                   	ret    

c0019b64 <CPU::setupLargePages()>:
c0019b64:	0f 20 e0             	mov    eax,cr4
c0019b67:	83 c8 10             	or     eax,0x10
c0019b6a:	0f 22 e0             	mov    cr4,eax
c0019b6d:	c3                   	ret    

c0019b6e <CPU::setupPAT()>:
c0019b6e:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0019b73:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b7a:	74 2c                	je     c0019ba8 <CPU::setupPAT()+0x3a>
c0019b7c:	53                   	push   ebx
c0019b7d:	83 ec 10             	sub    esp,0x10
c0019b80:	68 77 02 00 00       	push   0x277
c0019b85:	50                   	push   eax
c0019b86:	e8 ff 52 ff ff       	call   c000ee8a <Computer::rdmsr(unsigned int)>
c0019b8b:	83 e2 f8             	and    edx,0xfffffff8
c0019b8e:	83 ca 01             	or     edx,0x1
c0019b91:	52                   	push   edx
c0019b92:	50                   	push   eax
c0019b93:	68 77 02 00 00       	push   0x277
c0019b98:	ff 35 88 e6 02 c0    	push   DWORD PTR ds:0xc002e688
c0019b9e:	e8 13 53 ff ff       	call   c000eeb6 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019ba3:	83 c4 28             	add    esp,0x28
c0019ba6:	5b                   	pop    ebx
c0019ba7:	c3                   	ret    
c0019ba8:	c3                   	ret    
c0019ba9:	90                   	nop

c0019baa <CPU::setupMTRR()>:
c0019baa:	c3                   	ret    
c0019bab:	90                   	nop

c0019bac <CPU::setupGlobalPages()>:
c0019bac:	0f 20 e0             	mov    eax,cr4
c0019baf:	0c 80                	or     al,0x80
c0019bb1:	0f 22 e0             	mov    cr4,eax
c0019bb4:	c3                   	ret    
c0019bb5:	90                   	nop

c0019bb6 <CPU::allowUsermodeDataAccess()>:
c0019bb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bba:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bc1:	74 03                	je     c0019bc6 <CPU::allowUsermodeDataAccess()+0x10>
c0019bc3:	0f 01 cb             	stac   
c0019bc6:	c3                   	ret    
c0019bc7:	90                   	nop

c0019bc8 <CPU::prohibitUsermodeDataAccess()>:
c0019bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bcc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bd3:	74 03                	je     c0019bd8 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019bd5:	0f 01 ca             	clac   
c0019bd8:	c3                   	ret    
c0019bd9:	90                   	nop

c0019bda <CPU::setupSMAP()>:
c0019bda:	0f 20 e0             	mov    eax,cr4
c0019bdd:	0d 00 00 20 00       	or     eax,0x200000
c0019be2:	0f 22 e0             	mov    cr4,eax
c0019be5:	eb e1                	jmp    c0019bc8 <CPU::prohibitUsermodeDataAccess()>
c0019be7:	90                   	nop

c0019be8 <CPU::setupFeatures()>:
c0019be8:	83 ec 0c             	sub    esp,0xc
c0019beb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bef:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019bf6:	74 07                	je     c0019bff <CPU::setupFeatures()+0x17>
c0019bf8:	52                   	push   edx
c0019bf9:	e8 46 ff ff ff       	call   c0019b44 <CPU::setupSMEP()>
c0019bfe:	58                   	pop    eax
c0019bff:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019c06:	74 07                	je     c0019c0f <CPU::setupFeatures()+0x27>
c0019c08:	52                   	push   edx
c0019c09:	e8 cc ff ff ff       	call   c0019bda <CPU::setupSMAP()>
c0019c0e:	58                   	pop    eax
c0019c0f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019c16:	74 07                	je     c0019c1f <CPU::setupFeatures()+0x37>
c0019c18:	52                   	push   edx
c0019c19:	e8 32 ff ff ff       	call   c0019b50 <CPU::setupUMIP()>
c0019c1e:	58                   	pop    eax
c0019c1f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019c26:	74 07                	je     c0019c2f <CPU::setupFeatures()+0x47>
c0019c28:	52                   	push   edx
c0019c29:	e8 2c ff ff ff       	call   c0019b5a <CPU::setupTSC()>
c0019c2e:	58                   	pop    eax
c0019c2f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019c36:	74 07                	je     c0019c3f <CPU::setupFeatures()+0x57>
c0019c38:	52                   	push   edx
c0019c39:	e8 26 ff ff ff       	call   c0019b64 <CPU::setupLargePages()>
c0019c3e:	59                   	pop    ecx
c0019c3f:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019c46:	74 07                	je     c0019c4f <CPU::setupFeatures()+0x67>
c0019c48:	52                   	push   edx
c0019c49:	e8 5e ff ff ff       	call   c0019bac <CPU::setupGlobalPages()>
c0019c4e:	58                   	pop    eax
c0019c4f:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c56:	74 0c                	je     c0019c64 <CPU::setupFeatures()+0x7c>
c0019c58:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c5c:	83 c4 0c             	add    esp,0xc
c0019c5f:	e9 0a ff ff ff       	jmp    c0019b6e <CPU::setupPAT()>
c0019c64:	83 c4 0c             	add    esp,0xc
c0019c67:	c3                   	ret    

c0019c68 <CPU::open(int, int, void*)>:
c0019c68:	57                   	push   edi
c0019c69:	56                   	push   esi
c0019c6a:	53                   	push   ebx
c0019c6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c6f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c73:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c79:	83 ec 0c             	sub    esp,0xc
c0019c7c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c82:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c88:	50                   	push   eax
c0019c89:	e8 e8 54 ff ff       	call   c000f176 <GDT::setup()>
c0019c8e:	83 c4 0c             	add    esp,0xc
c0019c91:	6a 00                	push   0x0
c0019c93:	68 ef be ad de       	push   0xdeadbeef
c0019c98:	57                   	push   edi
c0019c99:	e8 d4 78 ff ff       	call   c0011572 <TSS::setup(unsigned long, unsigned long)>
c0019c9e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ca1:	e8 ac 78 ff ff       	call   c0011552 <TSS::flush()>
c0019ca6:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019cac:	89 04 24             	mov    DWORD PTR [esp],eax
c0019caf:	e8 1e 57 ff ff       	call   c000f3d2 <IDT::setup()>
c0019cb4:	b8 00 04 00 00       	mov    eax,0x400
c0019cb9:	0f 23 f8             	mov    db7,eax
c0019cbc:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019cc6:	e8 b9 62 ff ff       	call   c000ff84 <Phys::allocatePage()>
c0019ccb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019cd1:	89 30                	mov    DWORD PTR [eax],esi
c0019cd3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019cd9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019cdc:	58                   	pop    eax
c0019cdd:	5a                   	pop    edx
c0019cde:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ce4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ce8:	e8 c3 89 ff ff       	call   c00126b0 <VAS::setCPUSpecific(unsigned long)>
c0019ced:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cf0:	e8 5f f4 ff ff       	call   c0019154 <CPU::detectFeatures()>
c0019cf5:	e8 ce bc ff ff       	call   c00159c8 <setupInterruptController()>
c0019cfa:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019d00:	a1 a0 e6 02 c0       	mov    eax,ds:0xc002e6a0
c0019d05:	83 e0 10             	and    eax,0x10
c0019d08:	83 f8 01             	cmp    eax,0x1
c0019d0b:	19 c0                	sbb    eax,eax
c0019d0d:	83 e0 46             	and    eax,0x46
c0019d10:	83 c0 1e             	add    eax,0x1e
c0019d13:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d16:	e8 bb d1 ff ff       	call   c0016ed6 <setupTimer(int)>
c0019d1b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019d21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d24:	e8 bf fe ff ff       	call   c0019be8 <CPU::setupFeatures()>
c0019d29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d2c:	e8 a7 f1 ff ff       	call   c0018ed8 <CPU::displayFeatures()>
c0019d31:	83 c4 10             	add    esp,0x10
c0019d34:	31 c0                	xor    eax,eax
c0019d36:	5b                   	pop    ebx
c0019d37:	5e                   	pop    esi
c0019d38:	5f                   	pop    edi
c0019d39:	c3                   	ret    

c0019d3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019d3a:	57                   	push   edi
c0019d3b:	56                   	push   esi
c0019d3c:	53                   	push   ebx
c0019d3d:	51                   	push   ecx
c0019d3e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d42:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d45:	0f 02 c0             	lar    eax,ax
c0019d48:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019d4b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d4f:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d52:	88 ca                	mov    dl,cl
c0019d54:	c0 ea 06             	shr    dl,0x6
c0019d57:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d5b:	89 ca                	mov    edx,ecx
c0019d5d:	66 c1 ea 03          	shr    dx,0x3
c0019d61:	83 e2 07             	and    edx,0x7
c0019d64:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d69:	88 17                	mov    BYTE PTR [edi],dl
c0019d6b:	0f 84 a6 01 00 00    	je     c0019f17 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d71:	83 e1 07             	and    ecx,0x7
c0019d74:	80 f9 04             	cmp    cl,0x4
c0019d77:	0f 84 98 00 00 00    	je     c0019e15 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d7d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d82:	0f 95 c0             	setne  al
c0019d85:	80 f9 05             	cmp    cl,0x5
c0019d88:	0f 95 c2             	setne  dl
c0019d8b:	08 c2                	or     dl,al
c0019d8d:	74 79                	je     c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d8f:	84 c9                	test   cl,cl
c0019d91:	75 05                	jne    c0019d98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d93:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d96:	eb 3c                	jmp    c0019dd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d98:	80 f9 01             	cmp    cl,0x1
c0019d9b:	75 05                	jne    c0019da2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d9d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019da0:	eb 32                	jmp    c0019dd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019da2:	80 f9 02             	cmp    cl,0x2
c0019da5:	75 05                	jne    c0019dac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019da7:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019daa:	eb 28                	jmp    c0019dd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dac:	31 c0                	xor    eax,eax
c0019dae:	80 f9 03             	cmp    cl,0x3
c0019db1:	75 05                	jne    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019db3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019db6:	eb 1c                	jmp    c0019dd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019db8:	80 f9 05             	cmp    cl,0x5
c0019dbb:	75 05                	jne    c0019dc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019dbd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019dc0:	eb 12                	jmp    c0019dd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dc2:	80 f9 06             	cmp    cl,0x6
c0019dc5:	75 05                	jne    c0019dcc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019dc7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019dca:	eb 08                	jmp    c0019dd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dcc:	80 f9 07             	cmp    cl,0x7
c0019dcf:	75 03                	jne    c0019dd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dd1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019dd4:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019dd9:	75 10                	jne    c0019deb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019ddb:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019ddf:	b9 03 00 00 00       	mov    ecx,0x3
c0019de4:	01 d0                	add    eax,edx
c0019de6:	e9 37 01 00 00       	jmp    c0019f22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019deb:	b9 02 00 00 00       	mov    ecx,0x2
c0019df0:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019df5:	0f 85 27 01 00 00    	jne    c0019f22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019dfb:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019dfe:	b9 06 00 00 00       	mov    ecx,0x6
c0019e03:	e9 1a 01 00 00       	jmp    c0019f22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e08:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019e0b:	b9 06 00 00 00       	mov    ecx,0x6
c0019e10:	e9 0f 01 00 00       	jmp    c0019f24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e15:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019e18:	88 ca                	mov    dl,cl
c0019e1a:	c0 ea 06             	shr    dl,0x6
c0019e1d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019e21:	89 ca                	mov    edx,ecx
c0019e23:	66 c1 ea 03          	shr    dx,0x3
c0019e27:	83 e2 07             	and    edx,0x7
c0019e2a:	80 e1 07             	and    cl,0x7
c0019e2d:	75 05                	jne    c0019e34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019e2f:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019e32:	eb 4c                	jmp    c0019e80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e34:	80 f9 01             	cmp    cl,0x1
c0019e37:	75 05                	jne    c0019e3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019e39:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019e3c:	eb 42                	jmp    c0019e80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e3e:	80 f9 02             	cmp    cl,0x2
c0019e41:	75 05                	jne    c0019e48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019e43:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e46:	eb 38                	jmp    c0019e80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e48:	80 f9 03             	cmp    cl,0x3
c0019e4b:	75 05                	jne    c0019e52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019e4d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e50:	eb 2e                	jmp    c0019e80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e52:	80 f9 04             	cmp    cl,0x4
c0019e55:	75 12                	jne    c0019e69 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e57:	f6 c4 60             	test   ah,0x60
c0019e5a:	75 08                	jne    c0019e64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e5c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e5f:	8d 78 14             	lea    edi,[eax+0x14]
c0019e62:	eb 1c                	jmp    c0019e80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e64:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e67:	eb 17                	jmp    c0019e80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e69:	80 f9 05             	cmp    cl,0x5
c0019e6c:	75 05                	jne    c0019e73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e6e:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e71:	eb 0d                	jmp    c0019e80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e73:	80 f9 06             	cmp    cl,0x6
c0019e76:	75 05                	jne    c0019e7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e78:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e7b:	eb 03                	jmp    c0019e80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e7d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e80:	84 d2                	test   dl,dl
c0019e82:	75 05                	jne    c0019e89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e84:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e87:	eb 3c                	jmp    c0019ec5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e89:	80 fa 01             	cmp    dl,0x1
c0019e8c:	75 05                	jne    c0019e93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e8e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e91:	eb 32                	jmp    c0019ec5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e93:	80 fa 02             	cmp    dl,0x2
c0019e96:	75 05                	jne    c0019e9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e98:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e9b:	eb 28                	jmp    c0019ec5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e9d:	80 fa 03             	cmp    dl,0x3
c0019ea0:	75 05                	jne    c0019ea7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019ea2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019ea5:	eb 1e                	jmp    c0019ec5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ea7:	31 c0                	xor    eax,eax
c0019ea9:	80 fa 04             	cmp    dl,0x4
c0019eac:	74 17                	je     c0019ec5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eae:	80 fa 05             	cmp    dl,0x5
c0019eb1:	75 05                	jne    c0019eb8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019eb3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019eb6:	eb 0d                	jmp    c0019ec5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eb8:	80 fa 06             	cmp    dl,0x6
c0019ebb:	75 05                	jne    c0019ec2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019ebd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019ec0:	eb 03                	jmp    c0019ec5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ec2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ec5:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019eca:	0f 94 c2             	sete   dl
c0019ecd:	80 f9 05             	cmp    cl,0x5
c0019ed0:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019ed4:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019ed9:	d3 e0                	shl    eax,cl
c0019edb:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019edf:	74 0a                	je     c0019eeb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019ee1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ee4:	b9 07 00 00 00       	mov    ecx,0x7
c0019ee9:	eb 37                	jmp    c0019f22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019eeb:	01 f8                	add    eax,edi
c0019eed:	b9 03 00 00 00       	mov    ecx,0x3
c0019ef2:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ef7:	74 2b                	je     c0019f24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ef9:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019efe:	75 0d                	jne    c0019f0d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019f00:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019f04:	01 c8                	add    eax,ecx
c0019f06:	b9 04 00 00 00       	mov    ecx,0x4
c0019f0b:	eb 17                	jmp    c0019f24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f0d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f10:	b9 07 00 00 00       	mov    ecx,0x7
c0019f15:	eb 0d                	jmp    c0019f24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f17:	b9 02 00 00 00       	mov    ecx,0x2
c0019f1c:	b2 01                	mov    dl,0x1
c0019f1e:	31 c0                	xor    eax,eax
c0019f20:	eb 02                	jmp    c0019f24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f22:	31 d2                	xor    edx,edx
c0019f24:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f28:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019f2a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019f2e:	88 11                	mov    BYTE PTR [ecx],dl
c0019f30:	5a                   	pop    edx
c0019f31:	5b                   	pop    ebx
c0019f32:	5e                   	pop    esi
c0019f33:	5f                   	pop    edi
c0019f34:	c3                   	ret    

c0019f35 <Krnl::smpEntry()>:
c0019f35:	eb fe                	jmp    c0019f35 <Krnl::smpEntry()>

c0019f37 <Krnl::startCPU(int)>:
c0019f37:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0019f3c:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f43:	0f 84 36 01 00 00    	je     c001a07f <Krnl::startCPU(int)+0x148>
c0019f49:	53                   	push   ebx
c0019f4a:	83 ec 08             	sub    esp,0x8
c0019f4d:	e8 46 3f 00 00       	call   c001de98 <lockScheduler()>
c0019f52:	52                   	push   edx
c0019f53:	52                   	push   edx
c0019f54:	6a 1b                	push   0x1b
c0019f56:	ff 35 88 e6 02 c0    	push   DWORD PTR ds:0xc002e688
c0019f5c:	e8 29 4f ff ff       	call   c000ee8a <Computer::rdmsr(unsigned int)>
c0019f61:	59                   	pop    ecx
c0019f62:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f67:	89 c3                	mov    ebx,eax
c0019f69:	58                   	pop    eax
c0019f6a:	53                   	push   ebx
c0019f6b:	68 0c bc 02 c0       	push   0xc002bc0c
c0019f70:	e8 4c 90 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0019f75:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f83:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f8d:	c1 e0 18             	shl    eax,0x18
c0019f90:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f96:	83 c4 10             	add    esp,0x10
c0019f99:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f9f:	09 c2                	or     edx,eax
c0019fa1:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019fa7:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019fad:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fb3:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fb9:	80 cd c5             	or     ch,0xc5
c0019fbc:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fc2:	f3 90                	pause  
c0019fc4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fc6:	0f ba e1 0c          	bt     ecx,0xc
c0019fca:	72 f6                	jb     c0019fc2 <Krnl::startCPU(int)+0x8b>
c0019fcc:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fd2:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fd8:	09 c1                	or     ecx,eax
c0019fda:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fe0:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fe6:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fec:	80 cd 85             	or     ch,0x85
c0019fef:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ff5:	f3 90                	pause  
c0019ff7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ff9:	0f ba e1 0c          	bt     ecx,0xc
c0019ffd:	72 f6                	jb     c0019ff5 <Krnl::startCPU(int)+0xbe>
c0019fff:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a009:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a00f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a015:	09 c1                	or     ecx,eax
c001a017:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a01d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a023:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a029:	81 c9 02 06 00 00    	or     ecx,0x602
c001a02f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a035:	f3 90                	pause  
c001a037:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a039:	0f ba e1 0c          	bt     ecx,0xc
c001a03d:	72 f6                	jb     c001a035 <Krnl::startCPU(int)+0xfe>
c001a03f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a049:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a04f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a055:	09 c8                	or     eax,ecx
c001a057:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a05d:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a063:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a068:	0d 02 06 00 00       	or     eax,0x602
c001a06d:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a073:	f3 90                	pause  
c001a075:	8b 02                	mov    eax,DWORD PTR [edx]
c001a077:	0f ba e0 0c          	bt     eax,0xc
c001a07b:	72 f6                	jb     c001a073 <Krnl::startCPU(int)+0x13c>
c001a07d:	eb fe                	jmp    c001a07d <Krnl::startCPU(int)+0x146>
c001a07f:	c3                   	ret    

c001a080 <Krnl::startCPUs()>:
c001a080:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c001a085:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a08b:	88 c2                	mov    dl,al
c001a08d:	83 e2 0a             	and    edx,0xa
c001a090:	80 fa 0a             	cmp    dl,0xa
c001a093:	75 09                	jne    c001a09e <Krnl::startCPUs()+0x1e>
c001a095:	a8 01                	test   al,0x1
c001a097:	74 05                	je     c001a09e <Krnl::startCPUs()+0x1e>
c001a099:	e9 fd 60 fe ff       	jmp    c000019b <prepareTramp>
c001a09e:	c3                   	ret    
c001a09f:	90                   	nop

c001a0a0 <EnvVarContainer::getEnv(char const*)>:
c001a0a0:	57                   	push   edi
c001a0a1:	56                   	push   esi
c001a0a2:	53                   	push   ebx
c001a0a3:	31 db                	xor    ebx,ebx
c001a0a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a0a9:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a0ab:	7e 2b                	jle    c001a0d8 <EnvVarContainer::getEnv(char const*)+0x38>
c001a0ad:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a0b4:	50                   	push   eax
c001a0b5:	50                   	push   eax
c001a0b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0b9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a0bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a0c0:	e8 fb 67 fe ff       	call   c00008c0 <strcmp>
c001a0c5:	83 c4 10             	add    esp,0x10
c001a0c8:	85 c0                	test   eax,eax
c001a0ca:	75 09                	jne    c001a0d5 <EnvVarContainer::getEnv(char const*)+0x35>
c001a0cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0cf:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a0d3:	eb 05                	jmp    c001a0da <EnvVarContainer::getEnv(char const*)+0x3a>
c001a0d5:	43                   	inc    ebx
c001a0d6:	eb d1                	jmp    c001a0a9 <EnvVarContainer::getEnv(char const*)+0x9>
c001a0d8:	31 c0                	xor    eax,eax
c001a0da:	5b                   	pop    ebx
c001a0db:	5e                   	pop    esi
c001a0dc:	5f                   	pop    edi
c001a0dd:	c3                   	ret    

c001a0de <EnvVarContainer::setEnv(char const*, char const*)>:
c001a0de:	57                   	push   edi
c001a0df:	56                   	push   esi
c001a0e0:	53                   	push   ebx
c001a0e1:	83 ec 1c             	sub    esp,0x1c
c001a0e4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a0e8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a0ec:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a0f0:	57                   	push   edi
c001a0f1:	e8 9e 66 fe ff       	call   c0000794 <strlen>
c001a0f6:	40                   	inc    eax
c001a0f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0fa:	e8 e3 57 ff ff       	call   c000f8e2 <malloc>
c001a0ff:	89 34 24             	mov    DWORD PTR [esp],esi
c001a102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a106:	e8 89 66 fe ff       	call   c0000794 <strlen>
c001a10b:	40                   	inc    eax
c001a10c:	89 04 24             	mov    DWORD PTR [esp],eax
c001a10f:	e8 ce 57 ff ff       	call   c000f8e2 <malloc>
c001a114:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a117:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a11b:	e8 74 66 fe ff       	call   c0000794 <strlen>
c001a120:	83 c4 0c             	add    esp,0xc
c001a123:	40                   	inc    eax
c001a124:	50                   	push   eax
c001a125:	6a 00                	push   0x0
c001a127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a12b:	e8 48 66 fe ff       	call   c0000778 <memset>
c001a130:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a133:	e8 5c 66 fe ff       	call   c0000794 <strlen>
c001a138:	83 c4 0c             	add    esp,0xc
c001a13b:	40                   	inc    eax
c001a13c:	50                   	push   eax
c001a13d:	57                   	push   edi
c001a13e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a142:	e8 fd 65 fe ff       	call   c0000744 <memcpy>
c001a147:	89 34 24             	mov    DWORD PTR [esp],esi
c001a14a:	e8 45 66 fe ff       	call   c0000794 <strlen>
c001a14f:	83 c4 0c             	add    esp,0xc
c001a152:	40                   	inc    eax
c001a153:	50                   	push   eax
c001a154:	6a 00                	push   0x0
c001a156:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a15a:	e8 19 66 fe ff       	call   c0000778 <memset>
c001a15f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a162:	e8 2d 66 fe ff       	call   c0000794 <strlen>
c001a167:	83 c4 0c             	add    esp,0xc
c001a16a:	40                   	inc    eax
c001a16b:	50                   	push   eax
c001a16c:	56                   	push   esi
c001a16d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a171:	e8 ce 65 fe ff       	call   c0000744 <memcpy>
c001a176:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a178:	40                   	inc    eax
c001a179:	89 03                	mov    DWORD PTR [ebx],eax
c001a17b:	c1 e0 03             	shl    eax,0x3
c001a17e:	5a                   	pop    edx
c001a17f:	59                   	pop    ecx
c001a180:	50                   	push   eax
c001a181:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a184:	e8 45 57 ff ff       	call   c000f8ce <realloc>
c001a189:	83 c4 0c             	add    esp,0xc
c001a18c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a18f:	6a 08                	push   0x8
c001a191:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a195:	52                   	push   edx
c001a196:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a198:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a19c:	50                   	push   eax
c001a19d:	e8 a2 65 fe ff       	call   c0000744 <memcpy>
c001a1a2:	83 c4 20             	add    esp,0x20
c001a1a5:	5b                   	pop    ebx
c001a1a6:	5e                   	pop    esi
c001a1a7:	5f                   	pop    edi
c001a1a8:	c3                   	ret    
c001a1a9:	90                   	nop

c001a1aa <EnvVarContainer::deleteEnv(char const*)>:
c001a1aa:	c3                   	ret    
c001a1ab:	90                   	nop

c001a1ac <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a1ac:	55                   	push   ebp
c001a1ad:	57                   	push   edi
c001a1ae:	56                   	push   esi
c001a1af:	53                   	push   ebx
c001a1b0:	81 ec 38 01 00 00    	sub    esp,0x138
c001a1b6:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a1bd:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a1c4:	68 14 01 00 00       	push   0x114
c001a1c9:	e8 14 57 ff ff       	call   c000f8e2 <malloc>
c001a1ce:	83 c4 0c             	add    esp,0xc
c001a1d1:	89 c7                	mov    edi,eax
c001a1d3:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a1d6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a1dd:	50                   	push   eax
c001a1de:	e8 37 93 ff ff       	call   c001351a <File::File(char const*, Process*)>
c001a1e3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a1e6:	e8 01 96 ff ff       	call   c00137ec <File::exists()>
c001a1eb:	83 c4 10             	add    esp,0x10
c001a1ee:	84 c0                	test   al,al
c001a1f0:	75 31                	jne    c001a223 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a1f2:	51                   	push   ecx
c001a1f3:	51                   	push   ecx
c001a1f4:	6a 12                	push   0x12
c001a1f6:	57                   	push   edi
c001a1f7:	e8 82 93 ff ff       	call   c001357e <File::open(FileOpenMode)>
c001a1fc:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1fe:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a201:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a204:	e8 8b 65 fe ff       	call   c0000794 <strlen>
c001a209:	5a                   	pop    edx
c001a20a:	31 d2                	xor    edx,edx
c001a20c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a210:	51                   	push   ecx
c001a211:	55                   	push   ebp
c001a212:	52                   	push   edx
c001a213:	50                   	push   eax
c001a214:	57                   	push   edi
c001a215:	ff d3                	call   ebx
c001a217:	83 c4 14             	add    esp,0x14
c001a21a:	57                   	push   edi
c001a21b:	e8 bc 93 ff ff       	call   c00135dc <File::close()>
c001a220:	83 c4 10             	add    esp,0x10
c001a223:	31 db                	xor    ebx,ebx
c001a225:	50                   	push   eax
c001a226:	31 ed                	xor    ebp,ebp
c001a228:	68 00 01 00 00       	push   0x100
c001a22d:	6a 00                	push   0x0
c001a22f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a233:	50                   	push   eax
c001a234:	e8 3f 65 fe ff       	call   c0000778 <memset>
c001a239:	58                   	pop    eax
c001a23a:	5a                   	pop    edx
c001a23b:	6a 01                	push   0x1
c001a23d:	57                   	push   edi
c001a23e:	e8 3b 93 ff ff       	call   c001357e <File::open(FileOpenMode)>
c001a243:	83 c4 10             	add    esp,0x10
c001a246:	83 ec 0c             	sub    esp,0xc
c001a249:	8b 07                	mov    eax,DWORD PTR [edi]
c001a24b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a24f:	51                   	push   ecx
c001a250:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a254:	52                   	push   edx
c001a255:	6a 00                	push   0x0
c001a257:	6a 01                	push   0x1
c001a259:	57                   	push   edi
c001a25a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a25d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a261:	83 c4 20             	add    esp,0x20
c001a264:	3c 0d                	cmp    al,0xd
c001a266:	0f 84 12 01 00 00    	je     c001a37e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a26c:	85 db                	test   ebx,ebx
c001a26e:	0f 84 fd 00 00 00    	je     c001a371 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a274:	3c 0a                	cmp    al,0xa
c001a276:	74 13                	je     c001a28b <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a278:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a27d:	74 0c                	je     c001a28b <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a27f:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a285:	0f 8e e6 00 00 00    	jle    c001a371 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a28b:	83 ec 0c             	sub    esp,0xc
c001a28e:	8d 53 01             	lea    edx,[ebx+0x1]
c001a291:	29 dd                	sub    ebp,ebx
c001a293:	52                   	push   edx
c001a294:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a298:	e8 45 56 ff ff       	call   c000f8e2 <malloc>
c001a29d:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a2a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a2a4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a2a7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a2ab:	e8 32 56 ff ff       	call   c000f8e2 <malloc>
c001a2b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a2b4:	83 c4 0c             	add    esp,0xc
c001a2b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a2bb:	52                   	push   edx
c001a2bc:	6a 00                	push   0x0
c001a2be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2c2:	e8 b1 64 fe ff       	call   c0000778 <memset>
c001a2c7:	83 c4 0c             	add    esp,0xc
c001a2ca:	53                   	push   ebx
c001a2cb:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a2cf:	55                   	push   ebp
c001a2d0:	01 eb                	add    ebx,ebp
c001a2d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2d6:	e8 69 64 fe ff       	call   c0000744 <memcpy>
c001a2db:	83 c4 0c             	add    esp,0xc
c001a2de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a2e2:	51                   	push   ecx
c001a2e3:	6a 00                	push   0x0
c001a2e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2e9:	e8 8a 64 fe ff       	call   c0000778 <memset>
c001a2ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a2f1:	e8 9e 64 fe ff       	call   c0000794 <strlen>
c001a2f6:	83 c4 0c             	add    esp,0xc
c001a2f9:	50                   	push   eax
c001a2fa:	53                   	push   ebx
c001a2fb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2ff:	e8 40 64 fe ff       	call   c0000744 <memcpy>
c001a304:	5b                   	pop    ebx
c001a305:	58                   	pop    eax
c001a306:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a30a:	68 1d bc 02 c0       	push   0xc002bc1d
c001a30f:	e8 ad 8c ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001a314:	8b 06                	mov    eax,DWORD PTR [esi]
c001a316:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a319:	40                   	inc    eax
c001a31a:	83 c4 10             	add    esp,0x10
c001a31d:	89 06                	mov    DWORD PTR [esi],eax
c001a31f:	85 d2                	test   edx,edx
c001a321:	75 0c                	jne    c001a32f <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a323:	83 ec 0c             	sub    esp,0xc
c001a326:	6a 08                	push   0x8
c001a328:	e8 b5 55 ff ff       	call   c000f8e2 <malloc>
c001a32d:	eb 0c                	jmp    c001a33b <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a32f:	c1 e0 03             	shl    eax,0x3
c001a332:	51                   	push   ecx
c001a333:	51                   	push   ecx
c001a334:	50                   	push   eax
c001a335:	52                   	push   edx
c001a336:	e8 93 55 ff ff       	call   c000f8ce <realloc>
c001a33b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a33e:	83 c4 10             	add    esp,0x10
c001a341:	31 db                	xor    ebx,ebx
c001a343:	52                   	push   edx
c001a344:	6a 08                	push   0x8
c001a346:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a34a:	50                   	push   eax
c001a34b:	8b 16                	mov    edx,DWORD PTR [esi]
c001a34d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a350:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a354:	50                   	push   eax
c001a355:	e8 ea 63 fe ff       	call   c0000744 <memcpy>
c001a35a:	83 c4 0c             	add    esp,0xc
c001a35d:	68 00 01 00 00       	push   0x100
c001a362:	6a 00                	push   0x0
c001a364:	55                   	push   ebp
c001a365:	31 ed                	xor    ebp,ebp
c001a367:	e8 0c 64 fe ff       	call   c0000778 <memset>
c001a36c:	83 c4 10             	add    esp,0x10
c001a36f:	eb 0d                	jmp    c001a37e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a371:	3c 3d                	cmp    al,0x3d
c001a373:	74 07                	je     c001a37c <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a375:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a379:	45                   	inc    ebp
c001a37a:	eb 02                	jmp    c001a37e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a37c:	89 eb                	mov    ebx,ebp
c001a37e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a383:	0f 85 bd fe ff ff    	jne    c001a246 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a389:	50                   	push   eax
c001a38a:	50                   	push   eax
c001a38b:	ff 36                	push   DWORD PTR [esi]
c001a38d:	68 2b bc 02 c0       	push   0xc002bc2b
c001a392:	e8 2a 8c ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001a397:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a39d:	5b                   	pop    ebx
c001a39e:	5e                   	pop    esi
c001a39f:	5f                   	pop    edi
c001a3a0:	5d                   	pop    ebp
c001a3a1:	c3                   	ret    

c001a3a2 <EnvVarContainer::__loadSystem()>:
c001a3a2:	83 ec 10             	sub    esp,0x10
c001a3a5:	68 c0 db 02 c0       	push   0xc002dbc0
c001a3aa:	68 56 bc 02 c0       	push   0xc002bc56
c001a3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3b3:	e8 f4 fd ff ff       	call   c001a1ac <EnvVarContainer::loadFrom(char const*, char const*)>
c001a3b8:	83 c4 1c             	add    esp,0x1c
c001a3bb:	c3                   	ret    

c001a3bc <EnvVarContainer::__loadUser()>:
c001a3bc:	c3                   	ret    
c001a3bd:	90                   	nop

c001a3be <EnvVarContainer::EnvVarContainer(Process*)>:
c001a3be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a3c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3d0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a3d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a3de:	90                   	nop
c001a3df:	c3                   	ret    

c001a3e0 <EnvVarContainer::~EnvVarContainer()>:
c001a3e0:	83 ec 0c             	sub    esp,0xc
c001a3e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3ea:	85 c0                	test   eax,eax
c001a3ec:	74 1d                	je     c001a40b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3f2:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3f4:	85 c0                	test   eax,eax
c001a3f6:	74 13                	je     c001a40b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3ff:	83 ec 0c             	sub    esp,0xc
c001a402:	50                   	push   eax
c001a403:	e8 ea 54 ff ff       	call   c000f8f2 <free>
c001a408:	83 c4 10             	add    esp,0x10
c001a40b:	90                   	nop
c001a40c:	83 c4 0c             	add    esp,0xc
c001a40f:	c3                   	ret    

c001a410 <Krnl::getEnv(Process*, char const*)>:
c001a410:	53                   	push   ebx
c001a411:	83 ec 08             	sub    esp,0x8
c001a414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a418:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a41c:	39 05 f8 1b 03 c0    	cmp    DWORD PTR ds:0xc0031bf8,eax
c001a422:	74 04                	je     c001a428 <Krnl::getEnv(Process*, char const*)+0x18>
c001a424:	85 c0                	test   eax,eax
c001a426:	75 0b                	jne    c001a433 <Krnl::getEnv(Process*, char const*)+0x23>
c001a428:	a1 d4 11 03 c0       	mov    eax,ds:0xc00311d4
c001a42d:	85 c0                	test   eax,eax
c001a42f:	75 19                	jne    c001a44a <Krnl::getEnv(Process*, char const*)+0x3a>
c001a431:	eb 27                	jmp    c001a45a <Krnl::getEnv(Process*, char const*)+0x4a>
c001a433:	52                   	push   edx
c001a434:	52                   	push   edx
c001a435:	53                   	push   ebx
c001a436:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a43c:	e8 5f fc ff ff       	call   c001a0a0 <EnvVarContainer::getEnv(char const*)>
c001a441:	83 c4 10             	add    esp,0x10
c001a444:	85 c0                	test   eax,eax
c001a446:	75 28                	jne    c001a470 <Krnl::getEnv(Process*, char const*)+0x60>
c001a448:	eb de                	jmp    c001a428 <Krnl::getEnv(Process*, char const*)+0x18>
c001a44a:	52                   	push   edx
c001a44b:	52                   	push   edx
c001a44c:	53                   	push   ebx
c001a44d:	50                   	push   eax
c001a44e:	e8 4d fc ff ff       	call   c001a0a0 <EnvVarContainer::getEnv(char const*)>
c001a453:	83 c4 10             	add    esp,0x10
c001a456:	85 c0                	test   eax,eax
c001a458:	75 16                	jne    c001a470 <Krnl::getEnv(Process*, char const*)+0x60>
c001a45a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a45e:	a1 d8 11 03 c0       	mov    eax,ds:0xc00311d8
c001a463:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a467:	83 c4 08             	add    esp,0x8
c001a46a:	5b                   	pop    ebx
c001a46b:	e9 30 fc ff ff       	jmp    c001a0a0 <EnvVarContainer::getEnv(char const*)>
c001a470:	83 c4 08             	add    esp,0x8
c001a473:	5b                   	pop    ebx
c001a474:	c3                   	ret    

c001a475 <Krnl::setEnvSystem(char const*, char const*)>:
c001a475:	83 ec 10             	sub    esp,0x10
c001a478:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a47c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a480:	ff 35 d8 11 03 c0    	push   DWORD PTR ds:0xc00311d8
c001a486:	e8 53 fc ff ff       	call   c001a0de <EnvVarContainer::setEnv(char const*, char const*)>
c001a48b:	83 c4 1c             	add    esp,0x1c
c001a48e:	c3                   	ret    

c001a48f <Krnl::setEnvUser(char const*, char const*)>:
c001a48f:	a1 d4 11 03 c0       	mov    eax,ds:0xc00311d4
c001a494:	85 c0                	test   eax,eax
c001a496:	74 15                	je     c001a4ad <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a498:	83 ec 10             	sub    esp,0x10
c001a49b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a49f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4a3:	50                   	push   eax
c001a4a4:	e8 35 fc ff ff       	call   c001a0de <EnvVarContainer::setEnv(char const*, char const*)>
c001a4a9:	83 c4 1c             	add    esp,0x1c
c001a4ac:	c3                   	ret    
c001a4ad:	c3                   	ret    

c001a4ae <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a4ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4b2:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a4b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4bc:	e9 1d fc ff ff       	jmp    c001a0de <EnvVarContainer::setEnv(char const*, char const*)>

c001a4c1 <Krnl::deleteEnvSystem(char const*)>:
c001a4c1:	c3                   	ret    

c001a4c2 <Krnl::deleteEnvUser(char const*)>:
c001a4c2:	c3                   	ret    

c001a4c3 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a4c3:	c3                   	ret    

c001a4c4 <Krnl::newProcessEnv(Process*)>:
c001a4c4:	83 ec 28             	sub    esp,0x28
c001a4c7:	6a 0c                	push   0xc
c001a4c9:	e8 14 54 ff ff       	call   c000f8e2 <malloc>
c001a4ce:	5a                   	pop    edx
c001a4cf:	59                   	pop    ecx
c001a4d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4d4:	50                   	push   eax
c001a4d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4d9:	e8 e0 fe ff ff       	call   c001a3be <EnvVarContainer::EnvVarContainer(Process*)>
c001a4de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4e2:	83 c4 2c             	add    esp,0x2c
c001a4e5:	c3                   	ret    

c001a4e6 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a4e6:	56                   	push   esi
c001a4e7:	53                   	push   ebx
c001a4e8:	83 ec 10             	sub    esp,0x10
c001a4eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4ef:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a4f5:	6a 0c                	push   0xc
c001a4f7:	e8 e6 53 ff ff       	call   c000f8e2 <malloc>
c001a4fc:	89 c3                	mov    ebx,eax
c001a4fe:	58                   	pop    eax
c001a4ff:	5a                   	pop    edx
c001a500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a504:	53                   	push   ebx
c001a505:	e8 b4 fe ff ff       	call   c001a3be <EnvVarContainer::EnvVarContainer(Process*)>
c001a50a:	8b 06                	mov    eax,DWORD PTR [esi]
c001a50c:	89 03                	mov    DWORD PTR [ebx],eax
c001a50e:	c1 e0 03             	shl    eax,0x3
c001a511:	89 04 24             	mov    DWORD PTR [esp],eax
c001a514:	e8 c9 53 ff ff       	call   c000f8e2 <malloc>
c001a519:	83 c4 0c             	add    esp,0xc
c001a51c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a51f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a521:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a528:	52                   	push   edx
c001a529:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a52c:	50                   	push   eax
c001a52d:	e8 12 62 fe ff       	call   c0000744 <memcpy>
c001a532:	89 d8                	mov    eax,ebx
c001a534:	83 c4 14             	add    esp,0x14
c001a537:	5b                   	pop    ebx
c001a538:	5e                   	pop    esi
c001a539:	c3                   	ret    

c001a53a <Krnl::loadSystemEnv()>:
c001a53a:	53                   	push   ebx
c001a53b:	83 ec 14             	sub    esp,0x14
c001a53e:	6a 0c                	push   0xc
c001a540:	e8 9d 53 ff ff       	call   c000f8e2 <malloc>
c001a545:	89 c3                	mov    ebx,eax
c001a547:	58                   	pop    eax
c001a548:	5a                   	pop    edx
c001a549:	ff 35 f8 1b 03 c0    	push   DWORD PTR ds:0xc0031bf8
c001a54f:	53                   	push   ebx
c001a550:	e8 69 fe ff ff       	call   c001a3be <EnvVarContainer::EnvVarContainer(Process*)>
c001a555:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a558:	89 1d d8 11 03 c0    	mov    DWORD PTR ds:0xc00311d8,ebx
c001a55e:	e8 3f fe ff ff       	call   c001a3a2 <EnvVarContainer::__loadSystem()>
c001a563:	83 c4 18             	add    esp,0x18
c001a566:	5b                   	pop    ebx
c001a567:	c3                   	ret    

c001a568 <Krnl::loadUserEnv()>:
c001a568:	53                   	push   ebx
c001a569:	83 ec 14             	sub    esp,0x14
c001a56c:	6a 0c                	push   0xc
c001a56e:	e8 6f 53 ff ff       	call   c000f8e2 <malloc>
c001a573:	89 c3                	mov    ebx,eax
c001a575:	58                   	pop    eax
c001a576:	5a                   	pop    edx
c001a577:	ff 35 f8 1b 03 c0    	push   DWORD PTR ds:0xc0031bf8
c001a57d:	53                   	push   ebx
c001a57e:	e8 3b fe ff ff       	call   c001a3be <EnvVarContainer::EnvVarContainer(Process*)>
c001a583:	89 1d d4 11 03 c0    	mov    DWORD PTR ds:0xc00311d4,ebx
c001a589:	83 c4 18             	add    esp,0x18
c001a58c:	5b                   	pop    ebx
c001a58d:	c3                   	ret    

c001a58e <Krnl::flushEnv()>:
c001a58e:	c3                   	ret    

c001a58f <Krnl::getProcessTotalEnvCount(Process*)>:
c001a58f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a593:	8b 15 d4 11 03 c0    	mov    edx,DWORD PTR ds:0xc00311d4
c001a599:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a59f:	a1 d8 11 03 c0       	mov    eax,ds:0xc00311d8
c001a5a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5a6:	03 01                	add    eax,DWORD PTR [ecx]
c001a5a8:	85 d2                	test   edx,edx
c001a5aa:	74 02                	je     c001a5ae <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a5ac:	03 02                	add    eax,DWORD PTR [edx]
c001a5ae:	c3                   	ret    

c001a5af <Krnl::getProcessEnvPair(Process*, int)>:
c001a5af:	57                   	push   edi
c001a5b0:	8b 0d d4 11 03 c0    	mov    ecx,DWORD PTR ds:0xc00311d4
c001a5b6:	56                   	push   esi
c001a5b7:	85 c9                	test   ecx,ecx
c001a5b9:	53                   	push   ebx
c001a5ba:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a5be:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5c2:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a5c8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5cc:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5ce:	75 47                	jne    c001a617 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a5d0:	39 c3                	cmp    ebx,eax
c001a5d2:	7c 47                	jl     c001a61b <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a5d4:	8b 15 d8 11 03 c0    	mov    edx,DWORD PTR ds:0xc00311d8
c001a5da:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a5dc:	01 c1                	add    ecx,eax
c001a5de:	39 d9                	cmp    ecx,ebx
c001a5e0:	7e 6c                	jle    c001a64e <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5e2:	51                   	push   ecx
c001a5e3:	89 d9                	mov    ecx,ebx
c001a5e5:	29 c1                	sub    ecx,eax
c001a5e7:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5ea:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a5ee:	53                   	push   ebx
c001a5ef:	68 78 bc 02 c0       	push   0xc002bc78
c001a5f4:	e8 c8 89 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001a5f9:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a5ff:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a601:	a1 d8 11 03 c0       	mov    eax,ds:0xc00311d8
c001a606:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a609:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a60d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a610:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a613:	89 06                	mov    DWORD PTR [esi],eax
c001a615:	eb 51                	jmp    c001a668 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a617:	39 c3                	cmp    ebx,eax
c001a619:	7d 05                	jge    c001a620 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a61b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a61e:	eb 20                	jmp    c001a640 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a620:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a622:	8d 14 07             	lea    edx,[edi+eax*1]
c001a625:	39 da                	cmp    edx,ebx
c001a627:	7e 04                	jle    c001a62d <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a629:	29 c3                	sub    ebx,eax
c001a62b:	eb 10                	jmp    c001a63d <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a62d:	8b 0d d8 11 03 c0    	mov    ecx,DWORD PTR ds:0xc00311d8
c001a633:	03 11                	add    edx,DWORD PTR [ecx]
c001a635:	39 da                	cmp    edx,ebx
c001a637:	7e 15                	jle    c001a64e <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a639:	29 c3                	sub    ebx,eax
c001a63b:	29 fb                	sub    ebx,edi
c001a63d:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a640:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a644:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a647:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a64a:	89 06                	mov    DWORD PTR [esi],eax
c001a64c:	eb 1d                	jmp    c001a66b <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a64e:	83 ec 0c             	sub    esp,0xc
c001a651:	68 8c bc 02 c0       	push   0xc002bc8c
c001a656:	e8 18 00 00 00       	call   c001a673 <Krnl::panic(char const*)>
c001a65b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a661:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a668:	83 c4 10             	add    esp,0x10
c001a66b:	89 f0                	mov    eax,esi
c001a66d:	5b                   	pop    ebx
c001a66e:	5e                   	pop    esi
c001a66f:	5f                   	pop    edi
c001a670:	c2 04 00             	ret    0x4

c001a673 <Krnl::panic(char const*)>:
c001a673:	55                   	push   ebp
c001a674:	89 e5                	mov    ebp,esp
c001a676:	53                   	push   ebx
c001a677:	83 ec 0c             	sub    esp,0xc
c001a67a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a67d:	fa                   	cli    
c001a67e:	c6 05 e4 11 03 c0 01 	mov    BYTE PTR ds:0xc00311e4,0x1
c001a685:	53                   	push   ebx
c001a686:	c6 05 c4 d5 02 c0 00 	mov    BYTE PTR ds:0xc002d5c4,0x0
c001a68d:	68 a6 bc 02 c0       	push   0xc002bca6
c001a692:	e8 2a 89 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001a697:	58                   	pop    eax
c001a698:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a69d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6a3:	e8 0b 67 ff ff       	call   c0010db3 <setActiveTerminal(VgaText*)>
c001a6a8:	83 c4 0c             	add    esp,0xc
c001a6ab:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a6b0:	6a 01                	push   0x1
c001a6b2:	6a 0f                	push   0xf
c001a6b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ba:	e8 25 61 ff ff       	call   c00107e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6bf:	58                   	pop    eax
c001a6c0:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a6c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6cb:	e8 84 69 ff ff       	call   c0011054 <VgaText::clearScreen()>
c001a6d0:	58                   	pop    eax
c001a6d1:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a6d6:	5a                   	pop    edx
c001a6d7:	68 bf bc 02 c0       	push   0xc002bcbf
c001a6dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6e2:	e8 eb 6a ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a6e7:	59                   	pop    ecx
c001a6e8:	58                   	pop    eax
c001a6e9:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a6ee:	68 64 bd 02 c0       	push   0xc002bd64
c001a6f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6f9:	e8 d4 6a ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a6fe:	58                   	pop    eax
c001a6ff:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a704:	5a                   	pop    edx
c001a705:	68 db bc 02 c0       	push   0xc002bcdb
c001a70a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a710:	e8 bd 6a ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a715:	59                   	pop    ecx
c001a716:	58                   	pop    eax
c001a717:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a71c:	53                   	push   ebx
c001a71d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a723:	e8 aa 6a ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a728:	58                   	pop    eax
c001a729:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a72e:	5a                   	pop    edx
c001a72f:	68 fb bc 02 c0       	push   0xc002bcfb
c001a734:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a73a:	e8 93 6a ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a73f:	a1 e0 11 03 c0       	mov    eax,ds:0xc00311e0
c001a744:	83 c4 10             	add    esp,0x10
c001a747:	85 c0                	test   eax,eax
c001a749:	74 02                	je     c001a74d <Krnl::panic(char const*)+0xda>
c001a74b:	ff d0                	call   eax
c001a74d:	83 ec 0c             	sub    esp,0xc
c001a750:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a753:	e8 47 30 00 00       	call   c001d79f <Thr::getDriverNameFromAddress(unsigned long)>
c001a758:	83 c4 10             	add    esp,0x10
c001a75b:	89 c3                	mov    ebx,eax
c001a75d:	85 c0                	test   eax,eax
c001a75f:	0f 84 50 02 00 00    	je     c001a9b5 <Krnl::panic(char const*)+0x342>
c001a765:	83 ec 08             	sub    esp,0x8
c001a768:	8b 15 f8 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bf8
c001a76e:	68 a0 bd 02 c0       	push   0xc002bda0
c001a773:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a779:	e8 54 6a ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a77e:	58                   	pop    eax
c001a77f:	5a                   	pop    edx
c001a780:	8b 15 f8 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bf8
c001a786:	68 db bc 02 c0       	push   0xc002bcdb
c001a78b:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a791:	e8 3c 6a ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a796:	59                   	pop    ecx
c001a797:	58                   	pop    eax
c001a798:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a79d:	53                   	push   ebx
c001a79e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7a4:	e8 29 6a ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a7a9:	83 c4 10             	add    esp,0x10
c001a7ac:	83 ec 08             	sub    esp,0x8
c001a7af:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a7b4:	68 fa bc 02 c0       	push   0xc002bcfa
c001a7b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7bf:	e8 0e 6a ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a7c4:	58                   	pop    eax
c001a7c5:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a7ca:	5a                   	pop    edx
c001a7cb:	68 f8 bd 02 c0       	push   0xc002bdf8
c001a7d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7d6:	e8 f7 69 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a7db:	59                   	pop    ecx
c001a7dc:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a7e1:	5b                   	pop    ebx
c001a7e2:	68 38 be 02 c0       	push   0xc002be38
c001a7e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ed:	e8 e0 69 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a7f2:	58                   	pop    eax
c001a7f3:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a7f8:	5a                   	pop    edx
c001a7f9:	68 e6 bc 02 c0       	push   0xc002bce6
c001a7fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a804:	e8 c9 69 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a809:	59                   	pop    ecx
c001a80a:	5b                   	pop    ebx
c001a80b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a80e:	68 fe bc 02 c0       	push   0xc002bcfe
c001a813:	e8 a9 87 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001a818:	58                   	pop    eax
c001a819:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a81c:	5a                   	pop    edx
c001a81d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a820:	68 07 bd 02 c0       	push   0xc002bd07
c001a825:	e8 97 87 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001a82a:	59                   	pop    ecx
c001a82b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a82e:	5b                   	pop    ebx
c001a82f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a831:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a834:	68 10 bd 02 c0       	push   0xc002bd10
c001a839:	e8 83 87 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001a83e:	58                   	pop    eax
c001a83f:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a844:	5a                   	pop    edx
c001a845:	68 7c be 02 c0       	push   0xc002be7c
c001a84a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a850:	e8 7d 69 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a855:	59                   	pop    ecx
c001a856:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a85b:	5b                   	pop    ebx
c001a85c:	68 19 bd 02 c0       	push   0xc002bd19
c001a861:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a867:	e8 66 69 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a86c:	0f 20 c0             	mov    eax,cr0
c001a86f:	5a                   	pop    edx
c001a870:	59                   	pop    ecx
c001a871:	50                   	push   eax
c001a872:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a877:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a87d:	e8 76 69 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c001a882:	5b                   	pop    ebx
c001a883:	58                   	pop    eax
c001a884:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a889:	68 23 bd 02 c0       	push   0xc002bd23
c001a88e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a894:	e8 39 69 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a899:	0f 20 d0             	mov    eax,cr2
c001a89c:	5a                   	pop    edx
c001a89d:	59                   	pop    ecx
c001a89e:	50                   	push   eax
c001a89f:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a8a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8aa:	e8 49 69 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c001a8af:	5b                   	pop    ebx
c001a8b0:	58                   	pop    eax
c001a8b1:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a8b6:	68 2d bd 02 c0       	push   0xc002bd2d
c001a8bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c1:	e8 0c 69 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a8c6:	0f 20 d8             	mov    eax,cr3
c001a8c9:	5a                   	pop    edx
c001a8ca:	59                   	pop    ecx
c001a8cb:	50                   	push   eax
c001a8cc:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a8d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d7:	e8 1c 69 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c001a8dc:	5b                   	pop    ebx
c001a8dd:	58                   	pop    eax
c001a8de:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a8e3:	68 40 bd 02 c0       	push   0xc002bd40
c001a8e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ee:	e8 df 68 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a8f3:	0f 20 e0             	mov    eax,cr4
c001a8f6:	5a                   	pop    edx
c001a8f7:	59                   	pop    ecx
c001a8f8:	50                   	push   eax
c001a8f9:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a8fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a904:	e8 ef 68 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c001a909:	5b                   	pop    ebx
c001a90a:	58                   	pop    eax
c001a90b:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a910:	68 4a bd 02 c0       	push   0xc002bd4a
c001a915:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a91b:	e8 b2 68 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a920:	5a                   	pop    edx
c001a921:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a926:	59                   	pop    ecx
c001a927:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a92d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a930:	50                   	push   eax
c001a931:	e8 c2 68 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c001a936:	5b                   	pop    ebx
c001a937:	58                   	pop    eax
c001a938:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a93d:	68 61 bd 02 c0       	push   0xc002bd61
c001a942:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a948:	e8 85 68 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a94d:	5a                   	pop    edx
c001a94e:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a953:	59                   	pop    ecx
c001a954:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a95a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a95d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a960:	50                   	push   eax
c001a961:	e8 92 68 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c001a966:	5b                   	pop    ebx
c001a967:	58                   	pop    eax
c001a968:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a96d:	68 61 bd 02 c0       	push   0xc002bd61
c001a972:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a978:	e8 55 68 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a97d:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a982:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a985:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a98b:	8b 12                	mov    edx,DWORD PTR [edx]
c001a98d:	59                   	pop    ecx
c001a98e:	5b                   	pop    ebx
c001a98f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a992:	50                   	push   eax
c001a993:	e8 60 68 ff ff       	call   c00111f8 <VgaText::putx(unsigned int)>
c001a998:	83 c4 10             	add    esp,0x10
c001a99b:	b2 fe                	mov    dl,0xfe
c001a99d:	e4 60                	in     al,0x60
c001a99f:	3c 1c                	cmp    al,0x1c
c001a9a1:	74 04                	je     c001a9a7 <Krnl::panic(char const*)+0x334>
c001a9a3:	3c 5a                	cmp    al,0x5a
c001a9a5:	75 f6                	jne    c001a99d <Krnl::panic(char const*)+0x32a>
c001a9a7:	e4 64                	in     al,0x64
c001a9a9:	a8 02                	test   al,0x2
c001a9ab:	75 fa                	jne    c001a9a7 <Krnl::panic(char const*)+0x334>
c001a9ad:	88 d0                	mov    al,dl
c001a9af:	e6 64                	out    0x64,al
c001a9b1:	fa                   	cli    
c001a9b2:	f4                   	hlt    
c001a9b3:	eb e8                	jmp    c001a99d <Krnl::panic(char const*)+0x32a>
c001a9b5:	50                   	push   eax
c001a9b6:	50                   	push   eax
c001a9b7:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a9bc:	68 cc bd 02 c0       	push   0xc002bdcc
c001a9c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9c7:	e8 06 68 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a9cc:	58                   	pop    eax
c001a9cd:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a9d2:	5a                   	pop    edx
c001a9d3:	68 db bc 02 c0       	push   0xc002bcdb
c001a9d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9de:	e8 ef 67 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001a9e3:	59                   	pop    ecx
c001a9e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9e9:	5b                   	pop    ebx
c001a9ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9ed:	83 c0 0c             	add    eax,0xc
c001a9f0:	50                   	push   eax
c001a9f1:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a9f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9fc:	e8 d1 67 ff ff       	call   c00111d2 <VgaText::puts(char const*)>
c001aa01:	83 c4 10             	add    esp,0x10
c001aa04:	e9 a3 fd ff ff       	jmp    c001a7ac <Krnl::panic(char const*)+0x139>

c001aa09 <Net::switchEndian16(unsigned short)>:
c001aa09:	83 ec 04             	sub    esp,0x4
c001aa0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa10:	66 89 04 24          	mov    WORD PTR [esp],ax
c001aa14:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa18:	c1 f8 08             	sar    eax,0x8
c001aa1b:	89 c2                	mov    edx,eax
c001aa1d:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa21:	c1 e0 08             	shl    eax,0x8
c001aa24:	09 d0                	or     eax,edx
c001aa26:	83 c4 04             	add    esp,0x4
c001aa29:	c3                   	ret    

c001aa2a <Net::switchEndian32(unsigned int)>:
c001aa2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa2e:	c1 e8 18             	shr    eax,0x18
c001aa31:	89 c2                	mov    edx,eax
c001aa33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa37:	c1 e0 08             	shl    eax,0x8
c001aa3a:	25 00 00 ff 00       	and    eax,0xff0000
c001aa3f:	09 c2                	or     edx,eax
c001aa41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa45:	c1 e8 08             	shr    eax,0x8
c001aa48:	25 00 ff 00 00       	and    eax,0xff00
c001aa4d:	09 c2                	or     edx,eax
c001aa4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa53:	c1 e0 18             	shl    eax,0x18
c001aa56:	09 d0                	or     eax,edx
c001aa58:	c3                   	ret    

c001aa59 <Net::crc32Calc(unsigned char*, int)>:
c001aa59:	83 ec 10             	sub    esp,0x10
c001aa5c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa61:	75 07                	jne    c001aa6a <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa63:	b8 00 00 00 00       	mov    eax,0x0
c001aa68:	eb 7c                	jmp    c001aae6 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa6a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa6f:	7f 07                	jg     c001aa78 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa71:	b8 00 00 00 00       	mov    eax,0x0
c001aa76:	eb 6e                	jmp    c001aae6 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa78:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa80:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa8c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa90:	7d 4e                	jge    c001aae0 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa9a:	01 d0                	add    eax,edx
c001aa9c:	8a 00                	mov    al,BYTE PTR [eax]
c001aa9e:	0f b6 c0             	movzx  eax,al
c001aaa1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aaa5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aaad:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aab2:	7f 26                	jg     c001aada <Net::crc32Calc(unsigned char*, int)+0x81>
c001aab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aab8:	83 e0 01             	and    eax,0x1
c001aabb:	74 0d                	je     c001aaca <Net::crc32Calc(unsigned char*, int)+0x71>
c001aabd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aac1:	d1 e8                	shr    eax,1
c001aac3:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aac8:	eb 06                	jmp    c001aad0 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aaca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aace:	d1 e8                	shr    eax,1
c001aad0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aad4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aad8:	eb d3                	jmp    c001aaad <Net::crc32Calc(unsigned char*, int)+0x54>
c001aada:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aade:	eb a8                	jmp    c001aa88 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aae4:	f7 d0                	not    eax
c001aae6:	83 c4 10             	add    esp,0x10
c001aae9:	c3                   	ret    

c001aaea <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aaea:	83 ec 1c             	sub    esp,0x1c
c001aaed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaf1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aaf5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aafd:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001ab02:	7f 14                	jg     c001ab18 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ab04:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab08:	8d 50 01             	lea    edx,[eax+0x1]
c001ab0b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab0f:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ab12:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab16:	eb e5                	jmp    c001aafd <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ab18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab1c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab1f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab23:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ab26:	83 ec 04             	sub    esp,0x4
c001ab29:	6a 06                	push   0x6
c001ab2b:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ab2f:	50                   	push   eax
c001ab30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab34:	e8 0b 5c fe ff       	call   c0000744 <memcpy>
c001ab39:	83 c4 10             	add    esp,0x10
c001ab3c:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab41:	83 ec 04             	sub    esp,0x4
c001ab44:	6a 06                	push   0x6
c001ab46:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ab4a:	50                   	push   eax
c001ab4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab4f:	e8 f0 5b fe ff       	call   c0000744 <memcpy>
c001ab54:	83 c4 10             	add    esp,0x10
c001ab57:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab5c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab60:	0f b7 c0             	movzx  eax,ax
c001ab63:	c1 f8 08             	sar    eax,0x8
c001ab66:	89 c1                	mov    ecx,eax
c001ab68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab6c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab6f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab73:	88 ca                	mov    dl,cl
c001ab75:	88 10                	mov    BYTE PTR [eax],dl
c001ab77:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab7f:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab82:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab86:	88 10                	mov    BYTE PTR [eax],dl
c001ab88:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab90:	83 ec 04             	sub    esp,0x4
c001ab93:	52                   	push   edx
c001ab94:	50                   	push   eax
c001ab95:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab99:	e8 a6 5b fe ff       	call   c0000744 <memcpy>
c001ab9e:	83 c4 10             	add    esp,0x10
c001aba1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aba5:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001aba9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abad:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001abb1:	83 ec 08             	sub    esp,0x8
c001abb4:	50                   	push   eax
c001abb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001abb9:	e8 9b fe ff ff       	call   c001aa59 <Net::crc32Calc(unsigned char*, int)>
c001abbe:	83 c4 10             	add    esp,0x10
c001abc1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001abc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abc9:	c1 e8 18             	shr    eax,0x18
c001abcc:	89 c1                	mov    ecx,eax
c001abce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abd2:	8d 50 01             	lea    edx,[eax+0x1]
c001abd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abd9:	88 ca                	mov    dl,cl
c001abdb:	88 10                	mov    BYTE PTR [eax],dl
c001abdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abe1:	c1 e8 10             	shr    eax,0x10
c001abe4:	89 c1                	mov    ecx,eax
c001abe6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abea:	8d 50 01             	lea    edx,[eax+0x1]
c001abed:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abf1:	88 ca                	mov    dl,cl
c001abf3:	88 10                	mov    BYTE PTR [eax],dl
c001abf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abf9:	c1 e8 08             	shr    eax,0x8
c001abfc:	89 c1                	mov    ecx,eax
c001abfe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac02:	8d 50 01             	lea    edx,[eax+0x1]
c001ac05:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac09:	88 ca                	mov    dl,cl
c001ac0b:	88 10                	mov    BYTE PTR [eax],dl
c001ac0d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac11:	8d 50 01             	lea    edx,[eax+0x1]
c001ac14:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac1c:	88 10                	mov    BYTE PTR [eax],dl
c001ac1e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac22:	83 c4 1c             	add    esp,0x1c
c001ac25:	c3                   	ret    

c001ac26 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ac26:	83 ec 2c             	sub    esp,0x2c
c001ac29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac2d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac31:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ac36:	83 ec 04             	sub    esp,0x4
c001ac39:	6a 06                	push   0x6
c001ac3b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac43:	83 c0 0e             	add    eax,0xe
c001ac46:	50                   	push   eax
c001ac47:	e8 f8 5a fe ff       	call   c0000744 <memcpy>
c001ac4c:	83 c4 10             	add    esp,0x10
c001ac4f:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac54:	83 ec 04             	sub    esp,0x4
c001ac57:	6a 06                	push   0x6
c001ac59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac5d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac61:	83 c0 08             	add    eax,0x8
c001ac64:	50                   	push   eax
c001ac65:	e8 da 5a fe ff       	call   c0000744 <memcpy>
c001ac6a:	83 c4 10             	add    esp,0x10
c001ac6d:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac76:	8d 50 01             	lea    edx,[eax+0x1]
c001ac79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac7d:	8a 00                	mov    al,BYTE PTR [eax]
c001ac7f:	0f b6 c0             	movzx  eax,al
c001ac82:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac8b:	8d 50 01             	lea    edx,[eax+0x1]
c001ac8e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac92:	8a 00                	mov    al,BYTE PTR [eax]
c001ac94:	0f b6 c0             	movzx  eax,al
c001ac97:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac9c:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001aca1:	c1 e0 08             	shl    eax,0x8
c001aca4:	89 c2                	mov    edx,eax
c001aca6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001acaa:	09 d0                	or     eax,edx
c001acac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001acb0:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001acb4:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001acb9:	75 3a                	jne    c001acf5 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001acbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acbf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001acc2:	66 3d dc 05          	cmp    ax,0x5dc
c001acc6:	77 10                	ja     c001acd8 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001acc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001accc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001accf:	0f b7 c0             	movzx  eax,ax
c001acd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001acd6:	eb 1d                	jmp    c001acf5 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001acd8:	83 ec 0c             	sub    esp,0xc
c001acdb:	68 a4 be 02 c0       	push   0xc002bea4
c001ace0:	e8 dc 82 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001ace5:	83 c4 10             	add    esp,0x10
c001ace8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acec:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001acf0:	e9 c0 00 00 00       	jmp    c001adb5 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001acf5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001acf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acfd:	8b 00                	mov    eax,DWORD PTR [eax]
c001acff:	83 ec 04             	sub    esp,0x4
c001ad02:	52                   	push   edx
c001ad03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad07:	50                   	push   eax
c001ad08:	e8 37 5a fe ff       	call   c0000744 <memcpy>
c001ad0d:	83 c4 10             	add    esp,0x10
c001ad10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad14:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ad18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad1c:	8d 50 01             	lea    edx,[eax+0x1]
c001ad1f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad23:	8a 00                	mov    al,BYTE PTR [eax]
c001ad25:	0f b6 c0             	movzx  eax,al
c001ad28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad2c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad30:	8d 50 01             	lea    edx,[eax+0x1]
c001ad33:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad37:	8a 00                	mov    al,BYTE PTR [eax]
c001ad39:	0f b6 c0             	movzx  eax,al
c001ad3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad40:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad44:	8d 50 01             	lea    edx,[eax+0x1]
c001ad47:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad4b:	8a 00                	mov    al,BYTE PTR [eax]
c001ad4d:	0f b6 c0             	movzx  eax,al
c001ad50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad58:	8d 50 01             	lea    edx,[eax+0x1]
c001ad5b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad5f:	8a 00                	mov    al,BYTE PTR [eax]
c001ad61:	0f b6 c0             	movzx  eax,al
c001ad64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad6c:	c1 e0 18             	shl    eax,0x18
c001ad6f:	89 c2                	mov    edx,eax
c001ad71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad75:	c1 e0 10             	shl    eax,0x10
c001ad78:	09 c2                	or     edx,eax
c001ad7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad7e:	c1 e0 08             	shl    eax,0x8
c001ad81:	09 d0                	or     eax,edx
c001ad83:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad8f:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad93:	83 e8 04             	sub    eax,0x4
c001ad96:	83 ec 08             	sub    esp,0x8
c001ad99:	50                   	push   eax
c001ad9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad9e:	e8 b6 fc ff ff       	call   c001aa59 <Net::crc32Calc(unsigned char*, int)>
c001ada3:	83 c4 10             	add    esp,0x10
c001ada6:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001adaa:	0f 94 c2             	sete   dl
c001adad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adb1:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001adb4:	90                   	nop
c001adb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adb9:	83 c4 2c             	add    esp,0x2c
c001adbc:	c2 04 00             	ret    0x4

c001adbf <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001adbf:	55                   	push   ebp
c001adc0:	57                   	push   edi
c001adc1:	56                   	push   esi
c001adc2:	53                   	push   ebx
c001adc3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001adc9:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001add0:	8a 1e                	mov    bl,BYTE PTR [esi]
c001add2:	8d 6e 01             	lea    ebp,[esi+0x1]
c001add5:	80 fb 40             	cmp    bl,0x40
c001add8:	75 1b                	jne    c001adf5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001adda:	8a 16                	mov    dl,BYTE PTR [esi]
c001addc:	84 d2                	test   dl,dl
c001adde:	0f 84 f1 00 00 00    	je     c001aed5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ade4:	8d 46 01             	lea    eax,[esi+0x1]
c001ade7:	80 fa 3a             	cmp    dl,0x3a
c001adea:	74 04                	je     c001adf0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001adec:	89 c6                	mov    esi,eax
c001adee:	eb ea                	jmp    c001adda <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001adf0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001adf3:	89 c6                	mov    esi,eax
c001adf5:	50                   	push   eax
c001adf6:	6a 40                	push   0x40
c001adf8:	6a 00                	push   0x0
c001adfa:	8d 44 24 24          	lea    eax,[esp+0x24]
c001adfe:	50                   	push   eax
c001adff:	e8 74 59 fe ff       	call   c0000778 <memset>
c001ae04:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ae0b:	31 c0                	xor    eax,eax
c001ae0d:	83 c4 10             	add    esp,0x10
c001ae10:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ae12:	84 c9                	test   cl,cl
c001ae14:	0f 84 bb 00 00 00    	je     c001aed5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae1a:	3d c7 00 00 00       	cmp    eax,0xc7
c001ae1f:	0f 8f b0 00 00 00    	jg     c001aed5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae25:	80 f9 0a             	cmp    cl,0xa
c001ae28:	0f 85 98 00 00 00    	jne    c001aec6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ae2e:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ae33:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ae37:	a8 df                	test   al,0xdf
c001ae39:	0f 94 c1             	sete   cl
c001ae3c:	3c 23                	cmp    al,0x23
c001ae3e:	0f 94 c2             	sete   dl
c001ae41:	08 d1                	or     cl,dl
c001ae43:	75 4a                	jne    c001ae8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae45:	8d 50 f7             	lea    edx,[eax-0x9]
c001ae48:	80 fa 01             	cmp    dl,0x1
c001ae4b:	76 42                	jbe    c001ae8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae4d:	3c 5b                	cmp    al,0x5b
c001ae4f:	75 42                	jne    c001ae93 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ae51:	80 fb 40             	cmp    bl,0x40
c001ae54:	75 39                	jne    c001ae8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae56:	83 ec 0c             	sub    esp,0xc
c001ae59:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ae5d:	52                   	push   edx
c001ae5e:	e8 31 59 fe ff       	call   c0000794 <strlen>
c001ae63:	83 c4 10             	add    esp,0x10
c001ae66:	83 f8 3f             	cmp    eax,0x3f
c001ae69:	77 6a                	ja     c001aed5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae6b:	50                   	push   eax
c001ae6c:	50                   	push   eax
c001ae6d:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae71:	52                   	push   edx
c001ae72:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae76:	52                   	push   edx
c001ae77:	e8 b8 59 fe ff       	call   c0000834 <strcpy>
c001ae7c:	58                   	pop    eax
c001ae7d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae81:	52                   	push   edx
c001ae82:	e8 0d 59 fe ff       	call   c0000794 <strlen>
c001ae87:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae8c:	83 c4 10             	add    esp,0x10
c001ae8f:	31 d2                	xor    edx,edx
c001ae91:	eb 3a                	jmp    c001aecd <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae93:	80 fb 40             	cmp    bl,0x40
c001ae96:	74 06                	je     c001ae9e <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae98:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae9c:	eb 20                	jmp    c001aebe <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae9e:	50                   	push   eax
c001ae9f:	50                   	push   eax
c001aea0:	55                   	push   ebp
c001aea1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aea5:	50                   	push   eax
c001aea6:	e8 15 5a fe ff       	call   c00008c0 <strcmp>
c001aeab:	83 c4 10             	add    esp,0x10
c001aeae:	85 c0                	test   eax,eax
c001aeb0:	75 dd                	jne    c001ae8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aeb2:	eb e4                	jmp    c001ae98 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001aeb4:	8d 50 01             	lea    edx,[eax+0x1]
c001aeb7:	80 f9 3d             	cmp    cl,0x3d
c001aeba:	74 1d                	je     c001aed9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001aebc:	89 d0                	mov    eax,edx
c001aebe:	8a 08                	mov    cl,BYTE PTR [eax]
c001aec0:	84 c9                	test   cl,cl
c001aec2:	75 f0                	jne    c001aeb4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aec4:	eb 0f                	jmp    c001aed5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aec6:	8d 50 01             	lea    edx,[eax+0x1]
c001aec9:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aecd:	47                   	inc    edi
c001aece:	89 d0                	mov    eax,edx
c001aed0:	e9 3b ff ff ff       	jmp    c001ae10 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aed5:	31 c0                	xor    eax,eax
c001aed7:	eb 33                	jmp    c001af0c <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aed9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aedd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001aee0:	50                   	push   eax
c001aee1:	50                   	push   eax
c001aee2:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aee6:	50                   	push   eax
c001aee7:	56                   	push   esi
c001aee8:	e8 d3 59 fe ff       	call   c00008c0 <strcmp>
c001aeed:	83 c4 10             	add    esp,0x10
c001aef0:	85 c0                	test   eax,eax
c001aef2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aef6:	75 97                	jne    c001ae8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aef8:	51                   	push   ecx
c001aef9:	51                   	push   ecx
c001aefa:	52                   	push   edx
c001aefb:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001af02:	e8 2d 59 fe ff       	call   c0000834 <strcpy>
c001af07:	83 c4 10             	add    esp,0x10
c001af0a:	b0 01                	mov    al,0x1
c001af0c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001af12:	5b                   	pop    ebx
c001af13:	5e                   	pop    esi
c001af14:	5f                   	pop    edi
c001af15:	5d                   	pop    ebp
c001af16:	c3                   	ret    

c001af17 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001af17:	57                   	push   edi
c001af18:	56                   	push   esi
c001af19:	53                   	push   ebx
c001af1a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001af20:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001af27:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001af2e:	53                   	push   ebx
c001af2f:	e8 60 58 fe ff       	call   c0000794 <strlen>
c001af34:	89 34 24             	mov    DWORD PTR [esp],esi
c001af37:	89 c7                	mov    edi,eax
c001af39:	e8 56 58 fe ff       	call   c0000794 <strlen>
c001af3e:	83 c4 10             	add    esp,0x10
c001af41:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001af45:	3d ff 00 00 00       	cmp    eax,0xff
c001af4a:	0f 87 d3 00 00 00    	ja     c001b023 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af50:	57                   	push   edi
c001af51:	57                   	push   edi
c001af52:	56                   	push   esi
c001af53:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af57:	56                   	push   esi
c001af58:	e8 d7 58 fe ff       	call   c0000834 <strcpy>
c001af5d:	58                   	pop    eax
c001af5e:	5a                   	pop    edx
c001af5f:	68 6d c4 02 c0       	push   0xc002c46d
c001af64:	56                   	push   esi
c001af65:	e8 0a 5a fe ff       	call   c0000974 <strcat>
c001af6a:	59                   	pop    ecx
c001af6b:	5f                   	pop    edi
c001af6c:	53                   	push   ebx
c001af6d:	56                   	push   esi
c001af6e:	e8 01 5a fe ff       	call   c0000974 <strcat>
c001af73:	58                   	pop    eax
c001af74:	5a                   	pop    edx
c001af75:	68 f0 be 02 c0       	push   0xc002bef0
c001af7a:	56                   	push   esi
c001af7b:	e8 f4 59 fe ff       	call   c0000974 <strcat>
c001af80:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af87:	e8 56 49 ff ff       	call   c000f8e2 <malloc>
c001af8c:	83 c4 0c             	add    esp,0xc
c001af8f:	89 c3                	mov    ebx,eax
c001af91:	ff 35 f8 1b 03 c0    	push   DWORD PTR ds:0xc0031bf8
c001af97:	56                   	push   esi
c001af98:	50                   	push   eax
c001af99:	e8 7c 85 ff ff       	call   c001351a <File::File(char const*, Process*)>
c001af9e:	83 c4 10             	add    esp,0x10
c001afa1:	85 db                	test   ebx,ebx
c001afa3:	74 7e                	je     c001b023 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001afa5:	51                   	push   ecx
c001afa6:	51                   	push   ecx
c001afa7:	6a 01                	push   0x1
c001afa9:	53                   	push   ebx
c001afaa:	e8 cf 85 ff ff       	call   c001357e <File::open(FileOpenMode)>
c001afaf:	83 c4 10             	add    esp,0x10
c001afb2:	85 c0                	test   eax,eax
c001afb4:	74 08                	je     c001afbe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001afb6:	83 ec 0c             	sub    esp,0xc
c001afb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afbb:	53                   	push   ebx
c001afbc:	eb 5f                	jmp    c001b01d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001afbe:	52                   	push   edx
c001afbf:	8d 44 24 17          	lea    eax,[esp+0x17]
c001afc3:	50                   	push   eax
c001afc4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001afc8:	50                   	push   eax
c001afc9:	53                   	push   ebx
c001afca:	e8 5b 88 ff ff       	call   c001382a <File::stat(unsigned long long*, bool*)>
c001afcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afd3:	83 c4 10             	add    esp,0x10
c001afd6:	89 c1                	mov    ecx,eax
c001afd8:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001afdc:	74 31                	je     c001b00f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001afde:	83 ec 0c             	sub    esp,0xc
c001afe1:	50                   	push   eax
c001afe2:	e8 fb 48 ff ff       	call   c000f8e2 <malloc>
c001afe7:	89 c6                	mov    esi,eax
c001afe9:	58                   	pop    eax
c001afea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afec:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aff0:	52                   	push   edx
c001aff1:	56                   	push   esi
c001aff2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aff6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001affa:	53                   	push   ebx
c001affb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001affe:	83 c4 20             	add    esp,0x20
c001b001:	85 c0                	test   eax,eax
c001b003:	75 0a                	jne    c001b00f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b005:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b009:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b00d:	74 18                	je     c001b027 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b00f:	83 ec 0c             	sub    esp,0xc
c001b012:	53                   	push   ebx
c001b013:	e8 c4 85 ff ff       	call   c00135dc <File::close()>
c001b018:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b01a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b01d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b020:	83 c4 10             	add    esp,0x10
c001b023:	31 c0                	xor    eax,eax
c001b025:	eb 3b                	jmp    c001b062 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b027:	83 ec 0c             	sub    esp,0xc
c001b02a:	53                   	push   ebx
c001b02b:	e8 ac 85 ff ff       	call   c00135dc <File::close()>
c001b030:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b032:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b035:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b038:	83 c4 0c             	add    esp,0xc
c001b03b:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b042:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b049:	56                   	push   esi
c001b04a:	e8 70 fd ff ff       	call   c001adbf <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b04f:	89 34 24             	mov    DWORD PTR [esp],esi
c001b052:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b056:	e8 97 48 ff ff       	call   c000f8f2 <free>
c001b05b:	83 c4 10             	add    esp,0x10
c001b05e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b062:	81 c4 20 01 00 00    	add    esp,0x120
c001b068:	5b                   	pop    ebx
c001b069:	5e                   	pop    esi
c001b06a:	5f                   	pop    edi
c001b06b:	c3                   	ret    

c001b06c <Reg::getLine(char*, char*, char*)>:
c001b06c:	57                   	push   edi
c001b06d:	56                   	push   esi
c001b06e:	53                   	push   ebx
c001b06f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b073:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b077:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b07b:	57                   	push   edi
c001b07c:	56                   	push   esi
c001b07d:	53                   	push   ebx
c001b07e:	68 f5 be 02 c0       	push   0xc002bef5
c001b083:	e8 8f fe ff ff       	call   c001af17 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b088:	83 c4 10             	add    esp,0x10
c001b08b:	84 c0                	test   al,al
c001b08d:	75 10                	jne    c001b09f <Reg::getLine(char*, char*, char*)+0x33>
c001b08f:	57                   	push   edi
c001b090:	56                   	push   esi
c001b091:	53                   	push   ebx
c001b092:	68 1a bf 02 c0       	push   0xc002bf1a
c001b097:	e8 7b fe ff ff       	call   c001af17 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b09c:	83 c4 10             	add    esp,0x10
c001b09f:	5b                   	pop    ebx
c001b0a0:	5e                   	pop    esi
c001b0a1:	5f                   	pop    edi
c001b0a2:	c3                   	ret    

c001b0a3 <Reg::readInt(char*, char*, int*)>:
c001b0a3:	55                   	push   ebp
c001b0a4:	57                   	push   edi
c001b0a5:	56                   	push   esi
c001b0a6:	53                   	push   ebx
c001b0a7:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b0ad:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b0b1:	57                   	push   edi
c001b0b2:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0b9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0c0:	e8 a7 ff ff ff       	call   c001b06c <Reg::getLine(char*, char*, char*)>
c001b0c5:	83 c4 10             	add    esp,0x10
c001b0c8:	84 c0                	test   al,al
c001b0ca:	0f 84 b3 00 00 00    	je     c001b183 <Reg::readInt(char*, char*, int*)+0xe0>
c001b0d0:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b0d4:	80 fa 2b             	cmp    dl,0x2b
c001b0d7:	74 0c                	je     c001b0e5 <Reg::readInt(char*, char*, int*)+0x42>
c001b0d9:	80 fa 2d             	cmp    dl,0x2d
c001b0dc:	75 0e                	jne    c001b0ec <Reg::readInt(char*, char*, int*)+0x49>
c001b0de:	ba 01 00 00 00       	mov    edx,0x1
c001b0e3:	eb 0b                	jmp    c001b0f0 <Reg::readInt(char*, char*, int*)+0x4d>
c001b0e5:	ba 01 00 00 00       	mov    edx,0x1
c001b0ea:	eb 02                	jmp    c001b0ee <Reg::readInt(char*, char*, int*)+0x4b>
c001b0ec:	31 d2                	xor    edx,edx
c001b0ee:	31 c0                	xor    eax,eax
c001b0f0:	be 0a 00 00 00       	mov    esi,0xa
c001b0f5:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b0fa:	75 20                	jne    c001b11c <Reg::readInt(char*, char*, int*)+0x79>
c001b0fc:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b100:	80 f9 78             	cmp    cl,0x78
c001b103:	75 0a                	jne    c001b10f <Reg::readInt(char*, char*, int*)+0x6c>
c001b105:	83 c2 02             	add    edx,0x2
c001b108:	be 10 00 00 00       	mov    esi,0x10
c001b10d:	eb 0d                	jmp    c001b11c <Reg::readInt(char*, char*, int*)+0x79>
c001b10f:	80 f9 62             	cmp    cl,0x62
c001b112:	75 08                	jne    c001b11c <Reg::readInt(char*, char*, int*)+0x79>
c001b114:	83 c2 02             	add    edx,0x2
c001b117:	be 02 00 00 00       	mov    esi,0x2
c001b11c:	01 d7                	add    edi,edx
c001b11e:	31 d2                	xor    edx,edx
c001b120:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b122:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b126:	80 fb 0d             	cmp    bl,0xd
c001b129:	0f 94 c3             	sete   bl
c001b12c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b131:	0f 94 c1             	sete   cl
c001b134:	08 cb                	or     bl,cl
c001b136:	75 3a                	jne    c001b172 <Reg::readInt(char*, char*, int*)+0xcf>
c001b138:	0f af d6             	imul   edx,esi
c001b13b:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b140:	83 fe 10             	cmp    esi,0x10
c001b143:	75 26                	jne    c001b16b <Reg::readInt(char*, char*, int*)+0xc8>
c001b145:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b149:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b14c:	89 e9                	mov    ecx,ebp
c001b14e:	80 f9 05             	cmp    cl,0x5
c001b151:	77 06                	ja     c001b159 <Reg::readInt(char*, char*, int*)+0xb6>
c001b153:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b157:	eb 16                	jmp    c001b16f <Reg::readInt(char*, char*, int*)+0xcc>
c001b159:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b15d:	83 e9 61             	sub    ecx,0x61
c001b160:	80 f9 05             	cmp    cl,0x5
c001b163:	77 06                	ja     c001b16b <Reg::readInt(char*, char*, int*)+0xc8>
c001b165:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b169:	eb 04                	jmp    c001b16f <Reg::readInt(char*, char*, int*)+0xcc>
c001b16b:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b16f:	47                   	inc    edi
c001b170:	eb ae                	jmp    c001b120 <Reg::readInt(char*, char*, int*)+0x7d>
c001b172:	84 c0                	test   al,al
c001b174:	74 02                	je     c001b178 <Reg::readInt(char*, char*, int*)+0xd5>
c001b176:	f7 da                	neg    edx
c001b178:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b17f:	89 10                	mov    DWORD PTR [eax],edx
c001b181:	88 d8                	mov    al,bl
c001b183:	81 c4 ec 00 00 00    	add    esp,0xec
c001b189:	5b                   	pop    ebx
c001b18a:	5e                   	pop    esi
c001b18b:	5f                   	pop    edi
c001b18c:	5d                   	pop    ebp
c001b18d:	c3                   	ret    

c001b18e <Reg::readString(char*, char*, char*, int)>:
c001b18e:	57                   	push   edi
c001b18f:	56                   	push   esi
c001b190:	53                   	push   ebx
c001b191:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b197:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b19e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b1a2:	57                   	push   edi
c001b1a3:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1aa:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1b1:	e8 b6 fe ff ff       	call   c001b06c <Reg::getLine(char*, char*, char*)>
c001b1b6:	83 c4 10             	add    esp,0x10
c001b1b9:	89 c6                	mov    esi,eax
c001b1bb:	84 c0                	test   al,al
c001b1bd:	74 44                	je     c001b203 <Reg::readString(char*, char*, char*, int)+0x75>
c001b1bf:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b1c6:	31 c0                	xor    eax,eax
c001b1c8:	4a                   	dec    edx
c001b1c9:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b1cc:	84 c9                	test   cl,cl
c001b1ce:	74 0f                	je     c001b1df <Reg::readString(char*, char*, char*, int)+0x51>
c001b1d0:	39 c2                	cmp    edx,eax
c001b1d2:	7e 0b                	jle    c001b1df <Reg::readString(char*, char*, char*, int)+0x51>
c001b1d4:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b1d7:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b1dc:	40                   	inc    eax
c001b1dd:	eb ea                	jmp    c001b1c9 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b1df:	83 ec 0c             	sub    esp,0xc
c001b1e2:	53                   	push   ebx
c001b1e3:	e8 ac 55 fe ff       	call   c0000794 <strlen>
c001b1e8:	83 c4 10             	add    esp,0x10
c001b1eb:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b1f0:	75 11                	jne    c001b203 <Reg::readString(char*, char*, char*, int)+0x75>
c001b1f2:	83 ec 0c             	sub    esp,0xc
c001b1f5:	53                   	push   ebx
c001b1f6:	e8 99 55 fe ff       	call   c0000794 <strlen>
c001b1fb:	83 c4 10             	add    esp,0x10
c001b1fe:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b203:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b209:	89 f0                	mov    eax,esi
c001b20b:	5b                   	pop    ebx
c001b20c:	5e                   	pop    esi
c001b20d:	5f                   	pop    edi
c001b20e:	c3                   	ret    

c001b20f <Reg::readBool(char*, char*, bool*)>:
c001b20f:	83 ec 20             	sub    esp,0x20
c001b212:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b216:	50                   	push   eax
c001b217:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b21b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b21f:	e8 7f fe ff ff       	call   c001b0a3 <Reg::readInt(char*, char*, int*)>
c001b224:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b229:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b22d:	0f 95 02             	setne  BYTE PTR [edx]
c001b230:	83 c4 2c             	add    esp,0x2c
c001b233:	c3                   	ret    

c001b234 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b234:	53                   	push   ebx
c001b235:	83 ec 1c             	sub    esp,0x1c
c001b238:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b23c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b240:	50                   	push   eax
c001b241:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b245:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b249:	e8 c1 ff ff ff       	call   c001b20f <Reg::readBool(char*, char*, bool*)>
c001b24e:	83 c4 10             	add    esp,0x10
c001b251:	84 c0                	test   al,al
c001b253:	74 04                	je     c001b259 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b255:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b259:	88 d8                	mov    al,bl
c001b25b:	83 c4 18             	add    esp,0x18
c001b25e:	5b                   	pop    ebx
c001b25f:	c3                   	ret    

c001b260 <Reg::readIntWithDefault(char*, char*, int)>:
c001b260:	53                   	push   ebx
c001b261:	83 ec 1c             	sub    esp,0x1c
c001b264:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b268:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b26c:	50                   	push   eax
c001b26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b275:	e8 29 fe ff ff       	call   c001b0a3 <Reg::readInt(char*, char*, int*)>
c001b27a:	83 c4 10             	add    esp,0x10
c001b27d:	84 c0                	test   al,al
c001b27f:	74 04                	je     c001b285 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b281:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b285:	89 d8                	mov    eax,ebx
c001b287:	83 c4 18             	add    esp,0x18
c001b28a:	5b                   	pop    ebx
c001b28b:	c3                   	ret    

c001b28c <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b28c:	57                   	push   edi
c001b28d:	56                   	push   esi
c001b28e:	53                   	push   ebx
c001b28f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b293:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b297:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b29b:	56                   	push   esi
c001b29c:	53                   	push   ebx
c001b29d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2a5:	e8 e4 fe ff ff       	call   c001b18e <Reg::readString(char*, char*, char*, int)>
c001b2aa:	83 c4 10             	add    esp,0x10
c001b2ad:	84 c0                	test   al,al
c001b2af:	75 1b                	jne    c001b2cc <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b2b1:	50                   	push   eax
c001b2b2:	56                   	push   esi
c001b2b3:	4e                   	dec    esi
c001b2b4:	6a 00                	push   0x0
c001b2b6:	53                   	push   ebx
c001b2b7:	e8 bc 54 fe ff       	call   c0000778 <memset>
c001b2bc:	83 c4 0c             	add    esp,0xc
c001b2bf:	56                   	push   esi
c001b2c0:	57                   	push   edi
c001b2c1:	53                   	push   ebx
c001b2c2:	89 fb                	mov    ebx,edi
c001b2c4:	e8 7b 54 fe ff       	call   c0000744 <memcpy>
c001b2c9:	83 c4 10             	add    esp,0x10
c001b2cc:	89 d8                	mov    eax,ebx
c001b2ce:	5b                   	pop    ebx
c001b2cf:	5e                   	pop    esi
c001b2d0:	5f                   	pop    edi
c001b2d1:	c3                   	ret    

c001b2d2 <Sys::eject(regs*)>:
c001b2d2:	83 ec 0c             	sub    esp,0xc
c001b2d5:	83 ca ff             	or     edx,0xffffffff
c001b2d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2dc:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b2df:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b2e4:	83 e9 41             	sub    ecx,0x41
c001b2e7:	83 f9 19             	cmp    ecx,0x19
c001b2ea:	77 18                	ja     c001b304 <Sys::eject(regs*)+0x32>
c001b2ec:	8b 0c 8d a0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1360]
c001b2f3:	85 c9                	test   ecx,ecx
c001b2f5:	74 0d                	je     c001b304 <Sys::eject(regs*)+0x32>
c001b2f7:	83 ec 0c             	sub    esp,0xc
c001b2fa:	51                   	push   ecx
c001b2fb:	e8 78 b4 ff ff       	call   c0016778 <LogicalDisk::eject()>
c001b300:	83 c4 10             	add    esp,0x10
c001b303:	99                   	cdq    
c001b304:	83 c4 0c             	add    esp,0xc
c001b307:	c3                   	ret    

c001b308 <Sys::exit(regs*)>:
c001b308:	83 ec 18             	sub    esp,0x18
c001b30b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b30f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b312:	e8 c4 35 00 00       	call   c001e8db <terminateTask(int)>
c001b317:	83 c8 ff             	or     eax,0xffffffff
c001b31a:	83 c4 1c             	add    esp,0x1c
c001b31d:	89 c2                	mov    edx,eax
c001b31f:	c3                   	ret    

c001b320 <Sys::getCwd(regs*)>:
c001b320:	83 ec 10             	sub    esp,0x10
c001b323:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b327:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b32a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b32d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b332:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b335:	e8 e2 7f ff ff       	call   c001331c <Fs::getcwd(Process*, char*, int)>
c001b33a:	83 c4 1c             	add    esp,0x1c
c001b33d:	99                   	cdq    
c001b33e:	c3                   	ret    

c001b33f <Sys::getPID(regs*)>:
c001b33f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b344:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b347:	8b 00                	mov    eax,DWORD PTR [eax]
c001b349:	99                   	cdq    
c001b34a:	c3                   	ret    

c001b34b <Sys::getRAMData(regs*)>:
c001b34b:	8b 0d d0 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e6d0
c001b351:	6b 05 cc e6 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e6cc,0x64
c001b358:	99                   	cdq    
c001b359:	f7 f9                	idiv   ecx
c001b35b:	c1 e0 18             	shl    eax,0x18
c001b35e:	09 c8                	or     eax,ecx
c001b360:	99                   	cdq    
c001b361:	c3                   	ret    

c001b362 <Sys::loadDLL(regs*)>:
c001b362:	56                   	push   esi
c001b363:	53                   	push   ebx
c001b364:	31 d2                	xor    edx,edx
c001b366:	51                   	push   ecx
c001b367:	b8 01 00 00 00       	mov    eax,0x1
c001b36c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b370:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b374:	0f 84 8c 00 00 00    	je     c001b406 <Sys::loadDLL(regs*)+0xa4>
c001b37a:	83 ec 0c             	sub    esp,0xc
c001b37d:	68 14 01 00 00       	push   0x114
c001b382:	e8 5b 45 ff ff       	call   c000f8e2 <malloc>
c001b387:	83 c4 0c             	add    esp,0xc
c001b38a:	89 c3                	mov    ebx,eax
c001b38c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b391:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b394:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b397:	53                   	push   ebx
c001b398:	e8 7d 81 ff ff       	call   c001351a <File::File(char const*, Process*)>
c001b39d:	83 c4 10             	add    esp,0x10
c001b3a0:	31 d2                	xor    edx,edx
c001b3a2:	b8 02 00 00 00       	mov    eax,0x2
c001b3a7:	85 db                	test   ebx,ebx
c001b3a9:	74 5b                	je     c001b406 <Sys::loadDLL(regs*)+0xa4>
c001b3ab:	83 ec 0c             	sub    esp,0xc
c001b3ae:	53                   	push   ebx
c001b3af:	e8 38 84 ff ff       	call   c00137ec <File::exists()>
c001b3b4:	83 c4 10             	add    esp,0x10
c001b3b7:	84 c0                	test   al,al
c001b3b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3bb:	75 11                	jne    c001b3ce <Sys::loadDLL(regs*)+0x6c>
c001b3bd:	83 ec 0c             	sub    esp,0xc
c001b3c0:	53                   	push   ebx
c001b3c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3c4:	83 c4 10             	add    esp,0x10
c001b3c7:	b8 03 00 00 00       	mov    eax,0x3
c001b3cc:	eb 36                	jmp    c001b404 <Sys::loadDLL(regs*)+0xa2>
c001b3ce:	83 ec 0c             	sub    esp,0xc
c001b3d1:	53                   	push   ebx
c001b3d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3d5:	58                   	pop    eax
c001b3d6:	5a                   	pop    edx
c001b3d7:	6a 00                	push   0x0
c001b3d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3dc:	e8 0f 24 00 00       	call   c001d7f0 <Thr::loadDLL(char const*, bool)>
c001b3e1:	83 c4 10             	add    esp,0x10
c001b3e4:	89 c1                	mov    ecx,eax
c001b3e6:	31 d2                	xor    edx,edx
c001b3e8:	b8 04 00 00 00       	mov    eax,0x4
c001b3ed:	85 c9                	test   ecx,ecx
c001b3ef:	74 15                	je     c001b406 <Sys::loadDLL(regs*)+0xa4>
c001b3f1:	53                   	push   ebx
c001b3f2:	53                   	push   ebx
c001b3f3:	ff 35 88 e6 02 c0    	push   DWORD PTR ds:0xc002e688
c001b3f9:	51                   	push   ecx
c001b3fa:	e8 25 26 00 00       	call   c001da24 <Thr::executeDLL(unsigned long, void*)>
c001b3ff:	83 c4 10             	add    esp,0x10
c001b402:	31 c0                	xor    eax,eax
c001b404:	31 d2                	xor    edx,edx
c001b406:	59                   	pop    ecx
c001b407:	5b                   	pop    ebx
c001b408:	5e                   	pop    esi
c001b409:	c3                   	ret    

c001b40a <Sys::read(regs*)>:
c001b40a:	57                   	push   edi
c001b40b:	56                   	push   esi
c001b40c:	53                   	push   ebx
c001b40d:	83 ec 10             	sub    esp,0x10
c001b410:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b414:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b417:	83 f8 02             	cmp    eax,0x2
c001b41a:	77 10                	ja     c001b42c <Sys::read(regs*)+0x22>
c001b41c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b421:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b424:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b42a:	eb 0e                	jmp    c001b43a <Sys::read(regs*)+0x30>
c001b42c:	83 ec 0c             	sub    esp,0xc
c001b42f:	50                   	push   eax
c001b430:	e8 76 66 ff ff       	call   c0011aab <getFromFileDescriptor(int)>
c001b435:	83 c4 10             	add    esp,0x10
c001b438:	89 c1                	mov    ecx,eax
c001b43a:	83 c8 ff             	or     eax,0xffffffff
c001b43d:	85 c9                	test   ecx,ecx
c001b43f:	89 c2                	mov    edx,eax
c001b441:	74 28                	je     c001b46b <Sys::read(regs*)+0x61>
c001b443:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b44b:	31 ff                	xor    edi,edi
c001b44d:	83 ec 0c             	sub    esp,0xc
c001b450:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b452:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b456:	52                   	push   edx
c001b457:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b45a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b45d:	57                   	push   edi
c001b45e:	56                   	push   esi
c001b45f:	51                   	push   ecx
c001b460:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b463:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b467:	83 c4 20             	add    esp,0x20
c001b46a:	99                   	cdq    
c001b46b:	83 c4 10             	add    esp,0x10
c001b46e:	5b                   	pop    ebx
c001b46f:	5e                   	pop    esi
c001b470:	5f                   	pop    edi
c001b471:	c3                   	ret    

c001b472 <Sys::sbrk(regs*)>:
c001b472:	56                   	push   esi
c001b473:	53                   	push   ebx
c001b474:	83 ec 0c             	sub    esp,0xc
c001b477:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b47b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b480:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b483:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b489:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b48c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b48f:	68 35 bf 02 c0       	push   0xc002bf35
c001b494:	e8 28 7b ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001b499:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b49c:	83 c4 10             	add    esp,0x10
c001b49f:	85 c0                	test   eax,eax
c001b4a1:	75 0a                	jne    c001b4ad <Sys::sbrk(regs*)+0x3b>
c001b4a3:	50                   	push   eax
c001b4a4:	50                   	push   eax
c001b4a5:	53                   	push   ebx
c001b4a6:	68 51 bf 02 c0       	push   0xc002bf51
c001b4ab:	eb 54                	jmp    c001b501 <Sys::sbrk(regs*)+0x8f>
c001b4ad:	79 0a                	jns    c001b4b9 <Sys::sbrk(regs*)+0x47>
c001b4af:	56                   	push   esi
c001b4b0:	56                   	push   esi
c001b4b1:	53                   	push   ebx
c001b4b2:	68 64 bf 02 c0       	push   0xc002bf64
c001b4b7:	eb 48                	jmp    c001b501 <Sys::sbrk(regs*)+0x8f>
c001b4b9:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b4be:	76 17                	jbe    c001b4d7 <Sys::sbrk(regs*)+0x65>
c001b4c0:	51                   	push   ecx
c001b4c1:	51                   	push   ecx
c001b4c2:	53                   	push   ebx
c001b4c3:	68 76 bf 02 c0       	push   0xc002bf76
c001b4c8:	e8 f4 7a ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001b4cd:	83 c8 ff             	or     eax,0xffffffff
c001b4d0:	83 c4 10             	add    esp,0x10
c001b4d3:	89 c2                	mov    edx,eax
c001b4d5:	eb 36                	jmp    c001b50d <Sys::sbrk(regs*)+0x9b>
c001b4d7:	05 ff 0f 00 00       	add    eax,0xfff
c001b4dc:	56                   	push   esi
c001b4dd:	c1 e8 0c             	shr    eax,0xc
c001b4e0:	68 07 04 00 00       	push   0x407
c001b4e5:	50                   	push   eax
c001b4e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4eb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4ee:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b4f4:	e8 df 6f ff ff       	call   c00124d8 <VAS::allocatePages(int, int)>
c001b4f9:	58                   	pop    eax
c001b4fa:	5a                   	pop    edx
c001b4fb:	53                   	push   ebx
c001b4fc:	68 8f bf 02 c0       	push   0xc002bf8f
c001b501:	e8 bb 7a ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001b506:	89 d8                	mov    eax,ebx
c001b508:	31 d2                	xor    edx,edx
c001b50a:	83 c4 10             	add    esp,0x10
c001b50d:	59                   	pop    ecx
c001b50e:	5b                   	pop    ebx
c001b50f:	5e                   	pop    esi
c001b510:	c3                   	ret    

c001b511 <Sys::setCwd(regs*)>:
c001b511:	83 ec 14             	sub    esp,0x14
c001b514:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b518:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b51b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b520:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b523:	e8 63 83 ff ff       	call   c001388b <Fs::setcwd(Process*, char*)>
c001b528:	83 c4 1c             	add    esp,0x1c
c001b52b:	99                   	cdq    
c001b52c:	c3                   	ret    

c001b52d <Sys::setTime(regs*)>:
c001b52d:	55                   	push   ebp
c001b52e:	31 d2                	xor    edx,edx
c001b530:	57                   	push   edi
c001b531:	bf 18 00 00 00       	mov    edi,0x18
c001b536:	56                   	push   esi
c001b537:	53                   	push   ebx
c001b538:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b53d:	83 ec 30             	sub    esp,0x30
c001b540:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b544:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b547:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b54a:	f7 f3                	div    ebx
c001b54c:	89 d6                	mov    esi,edx
c001b54e:	31 d2                	xor    edx,edx
c001b550:	f7 f3                	div    ebx
c001b552:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b555:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b559:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b55e:	31 d2                	xor    edx,edx
c001b560:	f7 f3                	div    ebx
c001b562:	31 d2                	xor    edx,edx
c001b564:	bb 0c 00 00 00       	mov    ebx,0xc
c001b569:	f7 f7                	div    edi
c001b56b:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b56e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b572:	0f b7 cd             	movzx  ecx,bp
c001b575:	56                   	push   esi
c001b576:	89 c7                	mov    edi,eax
c001b578:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b57c:	c1 e6 10             	shl    esi,0x10
c001b57f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b583:	83 e7 1f             	and    edi,0x1f
c001b586:	51                   	push   ecx
c001b587:	47                   	inc    edi
c001b588:	c1 e8 05             	shr    eax,0x5
c001b58b:	31 d2                	xor    edx,edx
c001b58d:	f7 f3                	div    ebx
c001b58f:	31 db                	xor    ebx,ebx
c001b591:	52                   	push   edx
c001b592:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b596:	57                   	push   edi
c001b597:	68 b5 bf 02 c0       	push   0xc002bfb5
c001b59c:	e8 20 7a ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001b5a1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b5a5:	89 f8                	mov    eax,edi
c001b5a7:	31 c9                	xor    ecx,ecx
c001b5a9:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b5ad:	88 c1                	mov    cl,al
c001b5af:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b5b5:	88 d5                	mov    ch,dl
c001b5b7:	c1 e0 10             	shl    eax,0x10
c001b5ba:	0f b7 d1             	movzx  edx,cx
c001b5bd:	09 c2                	or     edx,eax
c001b5bf:	89 d8                	mov    eax,ebx
c001b5c1:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b5c6:	09 f0                	or     eax,esi
c001b5c8:	89 c3                	mov    ebx,eax
c001b5ca:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b5ce:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b5d2:	83 c4 18             	add    esp,0x18
c001b5d5:	53                   	push   ebx
c001b5d6:	52                   	push   edx
c001b5d7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b5db:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b5df:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b5e3:	e8 bd 89 ff ff       	call   c0013fa5 <datetimeToSeconds(datetime_t)>
c001b5e8:	83 c4 0c             	add    esp,0xc
c001b5eb:	52                   	push   edx
c001b5ec:	50                   	push   eax
c001b5ed:	56                   	push   esi
c001b5ee:	e8 39 8b ff ff       	call   c001412c <secondsToDatetime(unsigned long long)>
c001b5f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5fb:	51                   	push   ecx
c001b5fc:	89 d6                	mov    esi,edx
c001b5fe:	51                   	push   ecx
c001b5ff:	c1 ee 10             	shr    esi,0x10
c001b602:	89 f3                	mov    ebx,esi
c001b604:	0f b6 f3             	movzx  esi,bl
c001b607:	56                   	push   esi
c001b608:	0f b6 f6             	movzx  esi,dh
c001b60b:	0f b6 d2             	movzx  edx,dl
c001b60e:	56                   	push   esi
c001b60f:	52                   	push   edx
c001b610:	89 c2                	mov    edx,eax
c001b612:	c1 ea 10             	shr    edx,0x10
c001b615:	52                   	push   edx
c001b616:	0f b6 d4             	movzx  edx,ah
c001b619:	0f b6 c0             	movzx  eax,al
c001b61c:	52                   	push   edx
c001b61d:	50                   	push   eax
c001b61e:	68 d1 bf 02 c0       	push   0xc002bfd1
c001b623:	e8 99 79 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001b628:	83 c4 2c             	add    esp,0x2c
c001b62b:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c001b630:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b634:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b638:	53                   	push   ebx
c001b639:	51                   	push   ecx
c001b63a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b640:	e8 87 8a ff ff       	call   c00140cc <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b645:	83 f0 01             	xor    eax,0x1
c001b648:	31 d2                	xor    edx,edx
c001b64a:	0f b6 c0             	movzx  eax,al
c001b64d:	83 c4 3c             	add    esp,0x3c
c001b650:	5b                   	pop    ebx
c001b651:	5e                   	pop    esi
c001b652:	5f                   	pop    edi
c001b653:	5d                   	pop    ebp
c001b654:	c3                   	ret    

c001b655 <Sys::timezone(regs*)>:
c001b655:	53                   	push   ebx
c001b656:	83 ec 08             	sub    esp,0x8
c001b659:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b65d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b661:	75 17                	jne    c001b67a <Sys::timezone(regs*)+0x25>
c001b663:	83 ec 0c             	sub    esp,0xc
c001b666:	68 ed bf 02 c0       	push   0xc002bfed
c001b66b:	e8 51 79 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001b670:	83 c8 ff             	or     eax,0xffffffff
c001b673:	83 c4 10             	add    esp,0x10
c001b676:	89 c2                	mov    edx,eax
c001b678:	eb 20                	jmp    c001b69a <Sys::timezone(regs*)+0x45>
c001b67a:	83 ec 0c             	sub    esp,0xc
c001b67d:	68 25 c0 02 c0       	push   0xc002c025
c001b682:	e8 3a 79 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001b687:	58                   	pop    eax
c001b688:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b68b:	e8 9e 87 ff ff       	call   c0013e2e <User::loadClockSettings(int)>
c001b690:	83 c4 10             	add    esp,0x10
c001b693:	b8 01 00 00 00       	mov    eax,0x1
c001b698:	31 d2                	xor    edx,edx
c001b69a:	83 c4 08             	add    esp,0x8
c001b69d:	5b                   	pop    ebx
c001b69e:	c3                   	ret    

c001b69f <Sys::write(regs*)>:
c001b69f:	57                   	push   edi
c001b6a0:	56                   	push   esi
c001b6a1:	53                   	push   ebx
c001b6a2:	83 ec 10             	sub    esp,0x10
c001b6a5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6a9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6ac:	83 f8 02             	cmp    eax,0x2
c001b6af:	77 10                	ja     c001b6c1 <Sys::write(regs*)+0x22>
c001b6b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6b9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b6bf:	eb 0e                	jmp    c001b6cf <Sys::write(regs*)+0x30>
c001b6c1:	83 ec 0c             	sub    esp,0xc
c001b6c4:	50                   	push   eax
c001b6c5:	e8 e1 63 ff ff       	call   c0011aab <getFromFileDescriptor(int)>
c001b6ca:	83 c4 10             	add    esp,0x10
c001b6cd:	89 c1                	mov    ecx,eax
c001b6cf:	83 c8 ff             	or     eax,0xffffffff
c001b6d2:	85 c9                	test   ecx,ecx
c001b6d4:	89 c2                	mov    edx,eax
c001b6d6:	74 28                	je     c001b700 <Sys::write(regs*)+0x61>
c001b6d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6e0:	31 ff                	xor    edi,edi
c001b6e2:	83 ec 0c             	sub    esp,0xc
c001b6e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b6e7:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b6eb:	52                   	push   edx
c001b6ec:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6ef:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b6f2:	57                   	push   edi
c001b6f3:	56                   	push   esi
c001b6f4:	51                   	push   ecx
c001b6f5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b6f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6fc:	83 c4 20             	add    esp,0x20
c001b6ff:	99                   	cdq    
c001b700:	83 c4 10             	add    esp,0x10
c001b703:	5b                   	pop    ebx
c001b704:	5e                   	pop    esi
c001b705:	5f                   	pop    edi
c001b706:	c3                   	ret    

c001b707 <Sys::wsbe(regs*)>:
c001b707:	57                   	push   edi
c001b708:	b9 0b 00 00 00       	mov    ecx,0xb
c001b70d:	56                   	push   esi
c001b70e:	be 64 c0 02 c0       	mov    esi,0xc002c064
c001b713:	53                   	push   ebx
c001b714:	83 ec 30             	sub    esp,0x30
c001b717:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b71b:	fc                   	cld    
c001b71c:	83 ec 0c             	sub    esp,0xc
c001b71f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b721:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b725:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b72a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b72d:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b733:	8b 06                	mov    eax,DWORD PTR [esi]
c001b735:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b738:	57                   	push   edi
c001b739:	e8 56 50 fe ff       	call   c0000794 <strlen>
c001b73e:	5a                   	pop    edx
c001b73f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b743:	52                   	push   edx
c001b744:	31 d2                	xor    edx,edx
c001b746:	57                   	push   edi
c001b747:	52                   	push   edx
c001b748:	50                   	push   eax
c001b749:	56                   	push   esi
c001b74a:	ff d3                	call   ebx
c001b74c:	83 c4 14             	add    esp,0x14
c001b74f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b753:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b756:	e8 80 31 00 00       	call   c001e8db <terminateTask(int)>
c001b75b:	83 c4 40             	add    esp,0x40
c001b75e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b763:	5b                   	pop    ebx
c001b764:	31 d2                	xor    edx,edx
c001b766:	5e                   	pop    esi
c001b767:	5f                   	pop    edi
c001b768:	c3                   	ret    

c001b769 <Sys::yield(regs*)>:
c001b769:	57                   	push   edi
c001b76a:	56                   	push   esi
c001b76b:	53                   	push   ebx
c001b76c:	e8 27 27 00 00       	call   c001de98 <lockScheduler()>
c001b771:	e8 5e 2a 00 00       	call   c001e1d4 <schedule()>
c001b776:	e8 1f 27 00 00       	call   c001de9a <unlockScheduler()>
c001b77b:	8b 35 10 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed10
c001b781:	8b 3d 14 ed 02 c0    	mov    edi,DWORD PTR ds:0xc002ed14
c001b787:	89 f0                	mov    eax,esi
c001b789:	89 fb                	mov    ebx,edi
c001b78b:	89 f1                	mov    ecx,esi
c001b78d:	c1 e0 07             	shl    eax,0x7
c001b790:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b794:	25 80 30 0f 00       	and    eax,0xf3080
c001b799:	c1 eb 17             	shr    ebx,0x17
c001b79c:	31 c8                	xor    eax,ecx
c001b79e:	89 da                	mov    edx,ebx
c001b7a0:	5b                   	pop    ebx
c001b7a1:	5e                   	pop    esi
c001b7a2:	5f                   	pop    edi
c001b7a3:	c3                   	ret    

c001b7a4 <sysCallSeekDir(regs*)>:
c001b7a4:	31 c0                	xor    eax,eax
c001b7a6:	31 d2                	xor    edx,edx
c001b7a8:	c3                   	ret    

c001b7a9 <sysCallTellDir(regs*)>:
c001b7a9:	31 c0                	xor    eax,eax
c001b7ab:	31 d2                	xor    edx,edx
c001b7ad:	c3                   	ret    

c001b7ae <sysCallVerify(regs*)>:
c001b7ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7b2:	31 d2                	xor    edx,edx
c001b7b4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7b7:	c3                   	ret    

c001b7b8 <sysFormatDisk(regs*)>:
c001b7b8:	56                   	push   esi
c001b7b9:	53                   	push   ebx
c001b7ba:	53                   	push   ebx
c001b7bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b7bf:	8b 1d 0c e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e80c
c001b7c5:	eb 25                	jmp    c001b7ec <sysFormatDisk(regs*)+0x34>
c001b7c7:	83 ec 0c             	sub    esp,0xc
c001b7ca:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b7cd:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7cf:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b7d2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b7d5:	50                   	push   eax
c001b7d6:	ff 34 85 a0 ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd1360]
c001b7dd:	53                   	push   ebx
c001b7de:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b7e1:	83 c4 20             	add    esp,0x20
c001b7e4:	83 f8 08             	cmp    eax,0x8
c001b7e7:	75 12                	jne    c001b7fb <sysFormatDisk(regs*)+0x43>
c001b7e9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b7ec:	85 db                	test   ebx,ebx
c001b7ee:	75 d7                	jne    c001b7c7 <sysFormatDisk(regs*)+0xf>
c001b7f0:	59                   	pop    ecx
c001b7f1:	b8 03 00 00 00       	mov    eax,0x3
c001b7f6:	31 d2                	xor    edx,edx
c001b7f8:	5b                   	pop    ebx
c001b7f9:	5e                   	pop    esi
c001b7fa:	c3                   	ret    
c001b7fb:	85 c0                	test   eax,eax
c001b7fd:	74 1b                	je     c001b81a <sysFormatDisk(regs*)+0x62>
c001b7ff:	83 f8 09             	cmp    eax,0x9
c001b802:	74 0b                	je     c001b80f <sysFormatDisk(regs*)+0x57>
c001b804:	59                   	pop    ecx
c001b805:	b8 02 00 00 00       	mov    eax,0x2
c001b80a:	31 d2                	xor    edx,edx
c001b80c:	5b                   	pop    ebx
c001b80d:	5e                   	pop    esi
c001b80e:	c3                   	ret    
c001b80f:	59                   	pop    ecx
c001b810:	b8 01 00 00 00       	mov    eax,0x1
c001b815:	31 d2                	xor    edx,edx
c001b817:	5b                   	pop    ebx
c001b818:	5e                   	pop    esi
c001b819:	c3                   	ret    
c001b81a:	59                   	pop    ecx
c001b81b:	31 c0                	xor    eax,eax
c001b81d:	31 d2                	xor    edx,edx
c001b81f:	5b                   	pop    ebx
c001b820:	5e                   	pop    esi
c001b821:	c3                   	ret    

c001b822 <sysSetDiskVolumeLabel(regs*)>:
c001b822:	56                   	push   esi
c001b823:	53                   	push   ebx
c001b824:	53                   	push   ebx
c001b825:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b829:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b82c:	83 f8 19             	cmp    eax,0x19
c001b82f:	77 29                	ja     c001b85a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b831:	8b 0c 85 a0 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1360]
c001b838:	85 c9                	test   ecx,ecx
c001b83a:	74 1e                	je     c001b85a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b83c:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b83f:	85 d2                	test   edx,edx
c001b841:	74 17                	je     c001b85a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b843:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b849:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b84b:	52                   	push   edx
c001b84c:	50                   	push   eax
c001b84d:	51                   	push   ecx
c001b84e:	53                   	push   ebx
c001b84f:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b852:	83 c4 10             	add    esp,0x10
c001b855:	99                   	cdq    
c001b856:	59                   	pop    ecx
c001b857:	5b                   	pop    ebx
c001b858:	5e                   	pop    esi
c001b859:	c3                   	ret    
c001b85a:	59                   	pop    ecx
c001b85b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b860:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b865:	5b                   	pop    ebx
c001b866:	5e                   	pop    esi
c001b867:	c3                   	ret    

c001b868 <sysGetDiskVolumeLabel(regs*)>:
c001b868:	57                   	push   edi
c001b869:	56                   	push   esi
c001b86a:	53                   	push   ebx
c001b86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b86f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b872:	83 fa 19             	cmp    edx,0x19
c001b875:	77 34                	ja     c001b8ab <sysGetDiskVolumeLabel(regs*)+0x43>
c001b877:	8b 0c 95 a0 ec 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1360]
c001b87e:	85 c9                	test   ecx,ecx
c001b880:	74 29                	je     c001b8ab <sysGetDiskVolumeLabel(regs*)+0x43>
c001b882:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b885:	85 db                	test   ebx,ebx
c001b887:	74 22                	je     c001b8ab <sysGetDiskVolumeLabel(regs*)+0x43>
c001b889:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b88c:	85 c0                	test   eax,eax
c001b88e:	74 1b                	je     c001b8ab <sysGetDiskVolumeLabel(regs*)+0x43>
c001b890:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b896:	83 ec 0c             	sub    esp,0xc
c001b899:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b89b:	50                   	push   eax
c001b89c:	53                   	push   ebx
c001b89d:	52                   	push   edx
c001b89e:	51                   	push   ecx
c001b89f:	56                   	push   esi
c001b8a0:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b8a3:	83 c4 20             	add    esp,0x20
c001b8a6:	99                   	cdq    
c001b8a7:	5b                   	pop    ebx
c001b8a8:	5e                   	pop    esi
c001b8a9:	5f                   	pop    edi
c001b8aa:	c3                   	ret    
c001b8ab:	5b                   	pop    ebx
c001b8ac:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b8b1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8b6:	5e                   	pop    esi
c001b8b7:	5f                   	pop    edi
c001b8b8:	c3                   	ret    

c001b8b9 <sysShutdown(regs*)>:
c001b8b9:	83 ec 0c             	sub    esp,0xc
c001b8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8c3:	85 c0                	test   eax,eax
c001b8c5:	74 18                	je     c001b8df <sysShutdown(regs*)+0x26>
c001b8c7:	83 f8 01             	cmp    eax,0x1
c001b8ca:	74 38                	je     c001b904 <sysShutdown(regs*)+0x4b>
c001b8cc:	83 f8 02             	cmp    eax,0x2
c001b8cf:	74 24                	je     c001b8f5 <sysShutdown(regs*)+0x3c>
c001b8d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8db:	83 c4 0c             	add    esp,0xc
c001b8de:	c3                   	ret    
c001b8df:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c001b8e4:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8e6:	6a 00                	push   0x0
c001b8e8:	6a 00                	push   0x0
c001b8ea:	6a 00                	push   0x0
c001b8ec:	50                   	push   eax
c001b8ed:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b8f0:	83 c4 10             	add    esp,0x10
c001b8f3:	eb dc                	jmp    c001b8d1 <sysShutdown(regs*)+0x18>
c001b8f5:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c001b8fa:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8fc:	6a 00                	push   0x0
c001b8fe:	6a 00                	push   0x0
c001b900:	6a 01                	push   0x1
c001b902:	eb e8                	jmp    c001b8ec <sysShutdown(regs*)+0x33>
c001b904:	a1 40 0d 03 c0       	mov    eax,ds:0xc0030d40
c001b909:	85 c0                	test   eax,eax
c001b90b:	74 02                	je     c001b90f <sysShutdown(regs*)+0x56>
c001b90d:	ff d0                	call   eax
c001b90f:	31 c0                	xor    eax,eax
c001b911:	31 d2                	xor    edx,edx
c001b913:	83 c4 0c             	add    esp,0xc
c001b916:	c3                   	ret    

c001b917 <sysCallRealpath(regs*)>:
c001b917:	83 ec 0c             	sub    esp,0xc
c001b91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b91e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b921:	85 d2                	test   edx,edx
c001b923:	74 07                	je     c001b92c <sysCallRealpath(regs*)+0x15>
c001b925:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b928:	85 c0                	test   eax,eax
c001b92a:	75 0b                	jne    c001b937 <sysCallRealpath(regs*)+0x20>
c001b92c:	b8 01 00 00 00       	mov    eax,0x1
c001b931:	31 d2                	xor    edx,edx
c001b933:	83 c4 0c             	add    esp,0xc
c001b936:	c3                   	ret    
c001b937:	51                   	push   ecx
c001b938:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b93e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b941:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b947:	51                   	push   ecx
c001b948:	52                   	push   edx
c001b949:	50                   	push   eax
c001b94a:	e8 21 7a ff ff       	call   c0013370 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b94f:	83 c4 10             	add    esp,0x10
c001b952:	31 c0                	xor    eax,eax
c001b954:	31 d2                	xor    edx,edx
c001b956:	83 c4 0c             	add    esp,0xc
c001b959:	c3                   	ret    

c001b95a <sysCallGetArgc(regs*)>:
c001b95a:	83 ec 14             	sub    esp,0x14
c001b95d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b962:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b965:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b96b:	68 90 c0 02 c0       	push   0xc002c090
c001b970:	e8 4c 76 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001b975:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b97a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b97d:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b983:	83 c4 1c             	add    esp,0x1c
c001b986:	99                   	cdq    
c001b987:	c3                   	ret    

c001b988 <sysCallReadDir(regs*)>:
c001b988:	53                   	push   ebx
c001b989:	83 ec 18             	sub    esp,0x18
c001b98c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b990:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b993:	83 f8 02             	cmp    eax,0x2
c001b996:	76 53                	jbe    c001b9eb <sysCallReadDir(regs*)+0x63>
c001b998:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b99b:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b9a1:	77 4f                	ja     c001b9f2 <sysCallReadDir(regs*)+0x6a>
c001b9a3:	83 ec 0c             	sub    esp,0xc
c001b9a6:	50                   	push   eax
c001b9a7:	e8 ff 60 ff ff       	call   c0011aab <getFromFileDescriptor(int)>
c001b9ac:	83 c4 10             	add    esp,0x10
c001b9af:	85 c0                	test   eax,eax
c001b9b1:	74 50                	je     c001ba03 <sysCallReadDir(regs*)+0x7b>
c001b9b3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9bb:	83 ec 0c             	sub    esp,0xc
c001b9be:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9c0:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b9c4:	51                   	push   ecx
c001b9c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9c8:	6a 00                	push   0x0
c001b9ca:	68 10 01 00 00       	push   0x110
c001b9cf:	50                   	push   eax
c001b9d0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b9d3:	83 c4 20             	add    esp,0x20
c001b9d6:	85 c0                	test   eax,eax
c001b9d8:	74 38                	je     c001ba12 <sysCallReadDir(regs*)+0x8a>
c001b9da:	83 f8 07             	cmp    eax,0x7
c001b9dd:	74 0c                	je     c001b9eb <sysCallReadDir(regs*)+0x63>
c001b9df:	b8 02 00 00 00       	mov    eax,0x2
c001b9e4:	31 d2                	xor    edx,edx
c001b9e6:	83 c4 18             	add    esp,0x18
c001b9e9:	5b                   	pop    ebx
c001b9ea:	c3                   	ret    
c001b9eb:	b8 01 00 00 00       	mov    eax,0x1
c001b9f0:	eb f2                	jmp    c001b9e4 <sysCallReadDir(regs*)+0x5c>
c001b9f2:	83 ec 08             	sub    esp,0x8
c001b9f5:	52                   	push   edx
c001b9f6:	68 a8 c1 02 c0       	push   0xc002c1a8
c001b9fb:	e8 c1 75 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001ba00:	83 c4 10             	add    esp,0x10
c001ba03:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba08:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba0d:	83 c4 18             	add    esp,0x18
c001ba10:	5b                   	pop    ebx
c001ba11:	c3                   	ret    
c001ba12:	31 c0                	xor    eax,eax
c001ba14:	eb ce                	jmp    c001b9e4 <sysCallReadDir(regs*)+0x5c>

c001ba16 <sysCallIsATTY(regs*)>:
c001ba16:	83 ec 0c             	sub    esp,0xc
c001ba19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba1d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba20:	83 f8 02             	cmp    eax,0x2
c001ba23:	76 07                	jbe    c001ba2c <sysCallIsATTY(regs*)+0x16>
c001ba25:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba2a:	75 26                	jne    c001ba52 <sysCallIsATTY(regs*)+0x3c>
c001ba2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba31:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba34:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ba3a:	85 c0                	test   eax,eax
c001ba3c:	74 24                	je     c001ba62 <sysCallIsATTY(regs*)+0x4c>
c001ba3e:	83 ec 0c             	sub    esp,0xc
c001ba41:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba43:	50                   	push   eax
c001ba44:	ff 12                	call   DWORD PTR [edx]
c001ba46:	31 d2                	xor    edx,edx
c001ba48:	0f b6 c0             	movzx  eax,al
c001ba4b:	83 c4 10             	add    esp,0x10
c001ba4e:	83 c4 0c             	add    esp,0xc
c001ba51:	c3                   	ret    
c001ba52:	83 ec 0c             	sub    esp,0xc
c001ba55:	50                   	push   eax
c001ba56:	e8 50 60 ff ff       	call   c0011aab <getFromFileDescriptor(int)>
c001ba5b:	83 c4 10             	add    esp,0x10
c001ba5e:	85 c0                	test   eax,eax
c001ba60:	75 dc                	jne    c001ba3e <sysCallIsATTY(regs*)+0x28>
c001ba62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba67:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba6c:	83 c4 0c             	add    esp,0xc
c001ba6f:	c3                   	ret    

c001ba70 <sysCallSeek(regs*)>:
c001ba70:	53                   	push   ebx
c001ba71:	83 ec 08             	sub    esp,0x8
c001ba74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba78:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba7b:	83 f8 02             	cmp    eax,0x2
c001ba7e:	76 4a                	jbe    c001baca <sysCallSeek(regs*)+0x5a>
c001ba80:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba85:	77 32                	ja     c001bab9 <sysCallSeek(regs*)+0x49>
c001ba87:	83 ec 0c             	sub    esp,0xc
c001ba8a:	50                   	push   eax
c001ba8b:	e8 1b 60 ff ff       	call   c0011aab <getFromFileDescriptor(int)>
c001ba90:	83 c4 0c             	add    esp,0xc
c001ba93:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba96:	31 db                	xor    ebx,ebx
c001ba98:	53                   	push   ebx
c001ba99:	51                   	push   ecx
c001ba9a:	50                   	push   eax
c001ba9b:	e8 9c 7b ff ff       	call   c001363c <File::seek(unsigned long long)>
c001baa0:	83 c4 10             	add    esp,0x10
c001baa3:	85 c0                	test   eax,eax
c001baa5:	0f 95 c0             	setne  al
c001baa8:	31 d2                	xor    edx,edx
c001baaa:	0f b6 c0             	movzx  eax,al
c001baad:	f7 d8                	neg    eax
c001baaf:	83 d2 00             	adc    edx,0x0
c001bab2:	83 c4 08             	add    esp,0x8
c001bab5:	f7 da                	neg    edx
c001bab7:	5b                   	pop    ebx
c001bab8:	c3                   	ret    
c001bab9:	83 ec 08             	sub    esp,0x8
c001babc:	50                   	push   eax
c001babd:	68 9b c0 02 c0       	push   0xc002c09b
c001bac2:	e8 fa 74 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001bac7:	83 c4 10             	add    esp,0x10
c001baca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bacf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bad4:	83 c4 08             	add    esp,0x8
c001bad7:	5b                   	pop    ebx
c001bad8:	c3                   	ret    

c001bad9 <sysCallTell(regs*)>:
c001bad9:	53                   	push   ebx
c001bada:	83 ec 08             	sub    esp,0x8
c001badd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bae1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bae4:	83 f8 02             	cmp    eax,0x2
c001bae7:	76 5e                	jbe    c001bb47 <sysCallTell(regs*)+0x6e>
c001bae9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baee:	77 2d                	ja     c001bb1d <sysCallTell(regs*)+0x44>
c001baf0:	83 ec 0c             	sub    esp,0xc
c001baf3:	50                   	push   eax
c001baf4:	e8 b2 5f ff ff       	call   c0011aab <getFromFileDescriptor(int)>
c001baf9:	5a                   	pop    edx
c001bafa:	59                   	pop    ecx
c001bafb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bafe:	50                   	push   eax
c001baff:	e8 8e 7b ff ff       	call   c0013692 <File::tell(unsigned long long*)>
c001bb04:	83 c4 10             	add    esp,0x10
c001bb07:	85 c0                	test   eax,eax
c001bb09:	0f 95 c0             	setne  al
c001bb0c:	31 d2                	xor    edx,edx
c001bb0e:	0f b6 c0             	movzx  eax,al
c001bb11:	f7 d8                	neg    eax
c001bb13:	83 d2 00             	adc    edx,0x0
c001bb16:	83 c4 08             	add    esp,0x8
c001bb19:	f7 da                	neg    edx
c001bb1b:	5b                   	pop    ebx
c001bb1c:	c3                   	ret    
c001bb1d:	83 ec 08             	sub    esp,0x8
c001bb20:	50                   	push   eax
c001bb21:	68 b5 c0 02 c0       	push   0xc002c0b5
c001bb26:	e8 96 74 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001bb2b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb2e:	83 c4 10             	add    esp,0x10
c001bb31:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb3e:	31 d2                	xor    edx,edx
c001bb40:	31 c0                	xor    eax,eax
c001bb42:	83 c4 08             	add    esp,0x8
c001bb45:	5b                   	pop    ebx
c001bb46:	c3                   	ret    
c001bb47:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb4c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb51:	83 c4 08             	add    esp,0x8
c001bb54:	5b                   	pop    ebx
c001bb55:	c3                   	ret    

c001bb56 <sysCallSize(regs*)>:
c001bb56:	53                   	push   ebx
c001bb57:	83 ec 18             	sub    esp,0x18
c001bb5a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb5e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb61:	83 f8 02             	cmp    eax,0x2
c001bb64:	76 64                	jbe    c001bbca <sysCallSize(regs*)+0x74>
c001bb66:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb6b:	77 33                	ja     c001bba0 <sysCallSize(regs*)+0x4a>
c001bb6d:	83 ec 0c             	sub    esp,0xc
c001bb70:	50                   	push   eax
c001bb71:	e8 35 5f ff ff       	call   c0011aab <getFromFileDescriptor(int)>
c001bb76:	83 c4 0c             	add    esp,0xc
c001bb79:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb7d:	52                   	push   edx
c001bb7e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb81:	50                   	push   eax
c001bb82:	e8 a3 7c ff ff       	call   c001382a <File::stat(unsigned long long*, bool*)>
c001bb87:	83 c4 10             	add    esp,0x10
c001bb8a:	85 c0                	test   eax,eax
c001bb8c:	0f 95 c0             	setne  al
c001bb8f:	31 d2                	xor    edx,edx
c001bb91:	0f b6 c0             	movzx  eax,al
c001bb94:	f7 d8                	neg    eax
c001bb96:	83 d2 00             	adc    edx,0x0
c001bb99:	83 c4 18             	add    esp,0x18
c001bb9c:	f7 da                	neg    edx
c001bb9e:	5b                   	pop    ebx
c001bb9f:	c3                   	ret    
c001bba0:	83 ec 08             	sub    esp,0x8
c001bba3:	50                   	push   eax
c001bba4:	68 cf c0 02 c0       	push   0xc002c0cf
c001bba9:	e8 13 74 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001bbae:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bbb1:	83 c4 10             	add    esp,0x10
c001bbb4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbc1:	31 d2                	xor    edx,edx
c001bbc3:	31 c0                	xor    eax,eax
c001bbc5:	83 c4 18             	add    esp,0x18
c001bbc8:	5b                   	pop    ebx
c001bbc9:	c3                   	ret    
c001bbca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbcf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbd4:	83 c4 18             	add    esp,0x18
c001bbd7:	5b                   	pop    ebx
c001bbd8:	c3                   	ret    

c001bbd9 <sysCallSizeFromFilename(regs*)>:
c001bbd9:	57                   	push   edi
c001bbda:	56                   	push   esi
c001bbdb:	53                   	push   ebx
c001bbdc:	83 ec 20             	sub    esp,0x20
c001bbdf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bbe3:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bbe6:	83 fb 02             	cmp    ebx,0x2
c001bbe9:	0f 86 99 00 00 00    	jbe    c001bc88 <sysCallSizeFromFilename(regs*)+0xaf>
c001bbef:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bbf5:	77 65                	ja     c001bc5c <sysCallSizeFromFilename(regs*)+0x83>
c001bbf7:	83 ec 0c             	sub    esp,0xc
c001bbfa:	68 14 01 00 00       	push   0x114
c001bbff:	e8 de 3c ff ff       	call   c000f8e2 <malloc>
c001bc04:	83 c4 0c             	add    esp,0xc
c001bc07:	89 c6                	mov    esi,eax
c001bc09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc0e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc11:	53                   	push   ebx
c001bc12:	56                   	push   esi
c001bc13:	e8 02 79 ff ff       	call   c001351a <File::File(char const*, Process*)>
c001bc18:	83 c4 0c             	add    esp,0xc
c001bc1b:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bc1f:	50                   	push   eax
c001bc20:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bc23:	56                   	push   esi
c001bc24:	e8 01 7c ff ff       	call   c001382a <File::stat(unsigned long long*, bool*)>
c001bc29:	83 c4 10             	add    esp,0x10
c001bc2c:	85 f6                	test   esi,esi
c001bc2e:	74 14                	je     c001bc44 <sysCallSizeFromFilename(regs*)+0x6b>
c001bc30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc34:	8b 16                	mov    edx,DWORD PTR [esi]
c001bc36:	83 ec 0c             	sub    esp,0xc
c001bc39:	56                   	push   esi
c001bc3a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bc3d:	83 c4 10             	add    esp,0x10
c001bc40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc44:	85 c0                	test   eax,eax
c001bc46:	0f 95 c0             	setne  al
c001bc49:	31 d2                	xor    edx,edx
c001bc4b:	0f b6 c0             	movzx  eax,al
c001bc4e:	f7 d8                	neg    eax
c001bc50:	83 d2 00             	adc    edx,0x0
c001bc53:	83 c4 20             	add    esp,0x20
c001bc56:	f7 da                	neg    edx
c001bc58:	5b                   	pop    ebx
c001bc59:	5e                   	pop    esi
c001bc5a:	5f                   	pop    edi
c001bc5b:	c3                   	ret    
c001bc5c:	83 ec 08             	sub    esp,0x8
c001bc5f:	53                   	push   ebx
c001bc60:	68 cf c0 02 c0       	push   0xc002c0cf
c001bc65:	e8 57 73 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001bc6a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc6d:	83 c4 10             	add    esp,0x10
c001bc70:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc7d:	31 d2                	xor    edx,edx
c001bc7f:	83 c4 20             	add    esp,0x20
c001bc82:	31 c0                	xor    eax,eax
c001bc84:	5b                   	pop    ebx
c001bc85:	5e                   	pop    esi
c001bc86:	5f                   	pop    edi
c001bc87:	c3                   	ret    
c001bc88:	83 c4 20             	add    esp,0x20
c001bc8b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc90:	5b                   	pop    ebx
c001bc91:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc96:	5e                   	pop    esi
c001bc97:	5f                   	pop    edi
c001bc98:	c3                   	ret    

c001bc99 <sysCallClose(regs*)>:
c001bc99:	53                   	push   ebx
c001bc9a:	83 ec 08             	sub    esp,0x8
c001bc9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bca1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bca4:	83 f8 02             	cmp    eax,0x2
c001bca7:	76 50                	jbe    c001bcf9 <sysCallClose(regs*)+0x60>
c001bca9:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bcae:	74 58                	je     c001bd08 <sysCallClose(regs*)+0x6f>
c001bcb0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcb5:	74 60                	je     c001bd17 <sysCallClose(regs*)+0x7e>
c001bcb7:	77 2f                	ja     c001bce8 <sysCallClose(regs*)+0x4f>
c001bcb9:	83 ec 0c             	sub    esp,0xc
c001bcbc:	50                   	push   eax
c001bcbd:	e8 e9 5d ff ff       	call   c0011aab <getFromFileDescriptor(int)>
c001bcc2:	89 c3                	mov    ebx,eax
c001bcc4:	89 04 24             	mov    DWORD PTR [esp],eax
c001bcc7:	e8 10 79 ff ff       	call   c00135dc <File::close()>
c001bccc:	83 c4 10             	add    esp,0x10
c001bccf:	85 db                	test   ebx,ebx
c001bcd1:	74 0c                	je     c001bcdf <sysCallClose(regs*)+0x46>
c001bcd3:	83 ec 0c             	sub    esp,0xc
c001bcd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcd8:	53                   	push   ebx
c001bcd9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bcdc:	83 c4 10             	add    esp,0x10
c001bcdf:	31 c0                	xor    eax,eax
c001bce1:	31 d2                	xor    edx,edx
c001bce3:	83 c4 08             	add    esp,0x8
c001bce6:	5b                   	pop    ebx
c001bce7:	c3                   	ret    
c001bce8:	83 ec 08             	sub    esp,0x8
c001bceb:	50                   	push   eax
c001bcec:	68 cc c1 02 c0       	push   0xc002c1cc
c001bcf1:	e8 cb 72 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001bcf6:	83 c4 10             	add    esp,0x10
c001bcf9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcfe:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd03:	83 c4 08             	add    esp,0x8
c001bd06:	5b                   	pop    ebx
c001bd07:	c3                   	ret    
c001bd08:	83 ec 0c             	sub    esp,0xc
c001bd0b:	68 ea c0 02 c0       	push   0xc002c0ea
c001bd10:	e8 ac 72 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001bd15:	eb c5                	jmp    c001bcdc <sysCallClose(regs*)+0x43>
c001bd17:	83 ec 0c             	sub    esp,0xc
c001bd1a:	68 f8 c0 02 c0       	push   0xc002c0f8
c001bd1f:	eb ef                	jmp    c001bd10 <sysCallClose(regs*)+0x77>

c001bd21 <sysCallOpenDir(regs*)>:
c001bd21:	56                   	push   esi
c001bd22:	53                   	push   ebx
c001bd23:	53                   	push   ebx
c001bd24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd28:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bd2b:	85 f6                	test   esi,esi
c001bd2d:	74 59                	je     c001bd88 <sysCallOpenDir(regs*)+0x67>
c001bd2f:	83 ec 0c             	sub    esp,0xc
c001bd32:	68 14 01 00 00       	push   0x114
c001bd37:	e8 a6 3b ff ff       	call   c000f8e2 <malloc>
c001bd3c:	83 c4 0c             	add    esp,0xc
c001bd3f:	89 c6                	mov    esi,eax
c001bd41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd46:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd49:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd4c:	56                   	push   esi
c001bd4d:	e8 74 7c ff ff       	call   c00139c6 <Directory::Directory(char const*, Process*)>
c001bd52:	83 c4 10             	add    esp,0x10
c001bd55:	85 f6                	test   esi,esi
c001bd57:	74 2f                	je     c001bd88 <sysCallOpenDir(regs*)+0x67>
c001bd59:	83 ec 0c             	sub    esp,0xc
c001bd5c:	56                   	push   esi
c001bd5d:	e8 c8 7c ff ff       	call   c0013a2a <Directory::open()>
c001bd62:	83 c4 10             	add    esp,0x10
c001bd65:	85 c0                	test   eax,eax
c001bd67:	75 1f                	jne    c001bd88 <sysCallOpenDir(regs*)+0x67>
c001bd69:	83 ec 0c             	sub    esp,0xc
c001bd6c:	56                   	push   esi
c001bd6d:	e8 44 5a ff ff       	call   c00117b6 <UnixFile::getFileDescriptor()>
c001bd72:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd75:	83 c4 10             	add    esp,0x10
c001bd78:	89 02                	mov    DWORD PTR [edx],eax
c001bd7a:	c1 f8 1f             	sar    eax,0x1f
c001bd7d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd80:	31 c0                	xor    eax,eax
c001bd82:	59                   	pop    ecx
c001bd83:	31 d2                	xor    edx,edx
c001bd85:	5b                   	pop    ebx
c001bd86:	5e                   	pop    esi
c001bd87:	c3                   	ret    
c001bd88:	59                   	pop    ecx
c001bd89:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd8e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd93:	5b                   	pop    ebx
c001bd94:	5e                   	pop    esi
c001bd95:	c3                   	ret    

c001bd96 <sysCallCloseDir(regs*)>:
c001bd96:	53                   	push   ebx
c001bd97:	83 ec 08             	sub    esp,0x8
c001bd9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd9e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bda1:	83 f8 02             	cmp    eax,0x2
c001bda4:	76 47                	jbe    c001bded <sysCallCloseDir(regs*)+0x57>
c001bda6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bdab:	77 2f                	ja     c001bddc <sysCallCloseDir(regs*)+0x46>
c001bdad:	83 ec 0c             	sub    esp,0xc
c001bdb0:	50                   	push   eax
c001bdb1:	e8 f5 5c ff ff       	call   c0011aab <getFromFileDescriptor(int)>
c001bdb6:	89 c3                	mov    ebx,eax
c001bdb8:	89 04 24             	mov    DWORD PTR [esp],eax
c001bdbb:	e8 c6 7c ff ff       	call   c0013a86 <Directory::close()>
c001bdc0:	83 c4 10             	add    esp,0x10
c001bdc3:	85 db                	test   ebx,ebx
c001bdc5:	74 0c                	je     c001bdd3 <sysCallCloseDir(regs*)+0x3d>
c001bdc7:	83 ec 0c             	sub    esp,0xc
c001bdca:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdcc:	53                   	push   ebx
c001bdcd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bdd0:	83 c4 10             	add    esp,0x10
c001bdd3:	31 c0                	xor    eax,eax
c001bdd5:	31 d2                	xor    edx,edx
c001bdd7:	83 c4 08             	add    esp,0x8
c001bdda:	5b                   	pop    ebx
c001bddb:	c3                   	ret    
c001bddc:	83 ec 08             	sub    esp,0x8
c001bddf:	50                   	push   eax
c001bde0:	68 f4 c1 02 c0       	push   0xc002c1f4
c001bde5:	e8 d7 71 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001bdea:	83 c4 10             	add    esp,0x10
c001bded:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdf2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdf7:	83 c4 08             	add    esp,0x8
c001bdfa:	5b                   	pop    ebx
c001bdfb:	c3                   	ret    

c001bdfc <sysCallMakeDir(regs*)>:
c001bdfc:	56                   	push   esi
c001bdfd:	53                   	push   ebx
c001bdfe:	83 ec 10             	sub    esp,0x10
c001be01:	68 14 01 00 00       	push   0x114
c001be06:	e8 d7 3a ff ff       	call   c000f8e2 <malloc>
c001be0b:	83 c4 0c             	add    esp,0xc
c001be0e:	89 c3                	mov    ebx,eax
c001be10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be15:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be1c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be1f:	53                   	push   ebx
c001be20:	e8 a1 7b ff ff       	call   c00139c6 <Directory::Directory(char const*, Process*)>
c001be25:	83 c4 10             	add    esp,0x10
c001be28:	85 db                	test   ebx,ebx
c001be2a:	74 32                	je     c001be5e <sysCallMakeDir(regs*)+0x62>
c001be2c:	83 ec 0c             	sub    esp,0xc
c001be2f:	53                   	push   ebx
c001be30:	e8 d5 7d ff ff       	call   c0013c0a <Directory::create()>
c001be35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be38:	89 c6                	mov    esi,eax
c001be3a:	e8 47 7c ff ff       	call   c0013a86 <Directory::close()>
c001be3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001be47:	83 c4 10             	add    esp,0x10
c001be4a:	31 c0                	xor    eax,eax
c001be4c:	59                   	pop    ecx
c001be4d:	85 f6                	test   esi,esi
c001be4f:	5b                   	pop    ebx
c001be50:	0f 95 c0             	setne  al
c001be53:	5e                   	pop    esi
c001be54:	31 d2                	xor    edx,edx
c001be56:	f7 d8                	neg    eax
c001be58:	83 d2 00             	adc    edx,0x0
c001be5b:	f7 da                	neg    edx
c001be5d:	c3                   	ret    
c001be5e:	59                   	pop    ecx
c001be5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be64:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be69:	5b                   	pop    ebx
c001be6a:	5e                   	pop    esi
c001be6b:	c3                   	ret    

c001be6c <sysCallWait(regs*)>:
c001be6c:	83 ec 10             	sub    esp,0x10
c001be6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be73:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be76:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be79:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be7c:	e8 ce 24 00 00       	call   c001e34f <waitTask(int, int*, int)>
c001be81:	83 c4 1c             	add    esp,0x1c
c001be84:	99                   	cdq    
c001be85:	c3                   	ret    

c001be86 <sysCallNotImpl(regs*)>:
c001be86:	83 ec 18             	sub    esp,0x18
c001be89:	68 06 c1 02 c0       	push   0xc002c106
c001be8e:	e8 e0 e7 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001be93:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be98:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be9d:	83 c4 1c             	add    esp,0x1c
c001bea0:	c3                   	ret    

c001bea1 <sysPanic(regs*)>:
c001bea1:	83 ec 18             	sub    esp,0x18
c001bea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bea8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001beab:	e8 c3 e7 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001beb0:	c7 04 24 20 c1 02 c0 	mov    DWORD PTR [esp],0xc002c120
c001beb7:	e8 b7 e7 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001bebc:	b8 01 00 00 00       	mov    eax,0x1
c001bec1:	31 d2                	xor    edx,edx
c001bec3:	83 c4 1c             	add    esp,0x1c
c001bec6:	c3                   	ret    

c001bec7 <sysCallRmdir(regs*)>:
c001bec7:	56                   	push   esi
c001bec8:	53                   	push   ebx
c001bec9:	83 ec 20             	sub    esp,0x20
c001becc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bed0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bed3:	68 14 01 00 00       	push   0x114
c001bed8:	e8 05 3a ff ff       	call   c000f8e2 <malloc>
c001bedd:	83 c4 0c             	add    esp,0xc
c001bee0:	89 c3                	mov    ebx,eax
c001bee2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bee7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001beea:	56                   	push   esi
c001beeb:	53                   	push   ebx
c001beec:	e8 29 76 ff ff       	call   c001351a <File::File(char const*, Process*)>
c001bef1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bef4:	e8 fd 77 ff ff       	call   c00136f6 <File::unlink()>
c001bef9:	83 c4 10             	add    esp,0x10
c001befc:	85 db                	test   ebx,ebx
c001befe:	74 14                	je     c001bf14 <sysCallRmdir(regs*)+0x4d>
c001bf00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf04:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf06:	83 ec 0c             	sub    esp,0xc
c001bf09:	53                   	push   ebx
c001bf0a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf0d:	83 c4 10             	add    esp,0x10
c001bf10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf14:	85 c0                	test   eax,eax
c001bf16:	0f 95 c0             	setne  al
c001bf19:	31 d2                	xor    edx,edx
c001bf1b:	0f b6 c0             	movzx  eax,al
c001bf1e:	f7 d8                	neg    eax
c001bf20:	83 d2 00             	adc    edx,0x0
c001bf23:	83 c4 14             	add    esp,0x14
c001bf26:	f7 da                	neg    edx
c001bf28:	5b                   	pop    ebx
c001bf29:	5e                   	pop    esi
c001bf2a:	c3                   	ret    

c001bf2b <sysCallUnlink(regs*)>:
c001bf2b:	56                   	push   esi
c001bf2c:	53                   	push   ebx
c001bf2d:	83 ec 20             	sub    esp,0x20
c001bf30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf34:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bf37:	68 14 01 00 00       	push   0x114
c001bf3c:	e8 a1 39 ff ff       	call   c000f8e2 <malloc>
c001bf41:	83 c4 0c             	add    esp,0xc
c001bf44:	89 c3                	mov    ebx,eax
c001bf46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf4b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf4e:	56                   	push   esi
c001bf4f:	53                   	push   ebx
c001bf50:	e8 c5 75 ff ff       	call   c001351a <File::File(char const*, Process*)>
c001bf55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf58:	e8 99 77 ff ff       	call   c00136f6 <File::unlink()>
c001bf5d:	83 c4 10             	add    esp,0x10
c001bf60:	85 db                	test   ebx,ebx
c001bf62:	74 14                	je     c001bf78 <sysCallUnlink(regs*)+0x4d>
c001bf64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf68:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf6a:	83 ec 0c             	sub    esp,0xc
c001bf6d:	53                   	push   ebx
c001bf6e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf71:	83 c4 10             	add    esp,0x10
c001bf74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf78:	85 c0                	test   eax,eax
c001bf7a:	0f 95 c0             	setne  al
c001bf7d:	31 d2                	xor    edx,edx
c001bf7f:	0f b6 c0             	movzx  eax,al
c001bf82:	f7 d8                	neg    eax
c001bf84:	83 d2 00             	adc    edx,0x0
c001bf87:	83 c4 14             	add    esp,0x14
c001bf8a:	f7 da                	neg    edx
c001bf8c:	5b                   	pop    ebx
c001bf8d:	5e                   	pop    esi
c001bf8e:	c3                   	ret    

c001bf8f <sysCallGetArgv(regs*)>:
c001bf8f:	83 ec 0c             	sub    esp,0xc
c001bf92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf96:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bf99:	85 c0                	test   eax,eax
c001bf9b:	78 2b                	js     c001bfc8 <sysCallGetArgv(regs*)+0x39>
c001bf9d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bfa3:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bfa6:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bfac:	7d 1a                	jge    c001bfc8 <sysCallGetArgv(regs*)+0x39>
c001bfae:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bfb5:	85 c0                	test   eax,eax
c001bfb7:	74 17                	je     c001bfd0 <sysCallGetArgv(regs*)+0x41>
c001bfb9:	83 ec 08             	sub    esp,0x8
c001bfbc:	50                   	push   eax
c001bfbd:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bfc0:	e8 6f 48 fe ff       	call   c0000834 <strcpy>
c001bfc5:	83 c4 10             	add    esp,0x10
c001bfc8:	31 c0                	xor    eax,eax
c001bfca:	31 d2                	xor    edx,edx
c001bfcc:	83 c4 0c             	add    esp,0xc
c001bfcf:	c3                   	ret    
c001bfd0:	b8 01 00 00 00       	mov    eax,0x1
c001bfd5:	31 d2                	xor    edx,edx
c001bfd7:	83 c4 0c             	add    esp,0xc
c001bfda:	c3                   	ret    

c001bfdb <sysCallTTYName(regs*)>:
c001bfdb:	56                   	push   esi
c001bfdc:	53                   	push   ebx
c001bfdd:	53                   	push   ebx
c001bfde:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bfe2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bfe5:	85 c0                	test   eax,eax
c001bfe7:	74 5f                	je     c001c048 <sysCallTTYName(regs*)+0x6d>
c001bfe9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bfec:	83 f8 02             	cmp    eax,0x2
c001bfef:	77 3e                	ja     c001c02f <sysCallTTYName(regs*)+0x54>
c001bff1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bff6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bff9:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bfff:	85 db                	test   ebx,ebx
c001c001:	74 45                	je     c001c048 <sysCallTTYName(regs*)+0x6d>
c001c003:	83 ec 0c             	sub    esp,0xc
c001c006:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c008:	53                   	push   ebx
c001c009:	ff 10                	call   DWORD PTR [eax]
c001c00b:	83 c4 10             	add    esp,0x10
c001c00e:	84 c0                	test   al,al
c001c010:	74 41                	je     c001c053 <sysCallTTYName(regs*)+0x78>
c001c012:	83 ec 08             	sub    esp,0x8
c001c015:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001c01b:	53                   	push   ebx
c001c01c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c01f:	e8 10 48 fe ff       	call   c0000834 <strcpy>
c001c024:	83 c4 10             	add    esp,0x10
c001c027:	31 c0                	xor    eax,eax
c001c029:	59                   	pop    ecx
c001c02a:	31 d2                	xor    edx,edx
c001c02c:	5b                   	pop    ebx
c001c02d:	5e                   	pop    esi
c001c02e:	c3                   	ret    
c001c02f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c034:	74 bb                	je     c001bff1 <sysCallTTYName(regs*)+0x16>
c001c036:	83 ec 0c             	sub    esp,0xc
c001c039:	50                   	push   eax
c001c03a:	e8 6c 5a ff ff       	call   c0011aab <getFromFileDescriptor(int)>
c001c03f:	83 c4 10             	add    esp,0x10
c001c042:	89 c3                	mov    ebx,eax
c001c044:	85 db                	test   ebx,ebx
c001c046:	75 bb                	jne    c001c003 <sysCallTTYName(regs*)+0x28>
c001c048:	59                   	pop    ecx
c001c049:	b8 01 00 00 00       	mov    eax,0x1
c001c04e:	31 d2                	xor    edx,edx
c001c050:	5b                   	pop    ebx
c001c051:	5e                   	pop    esi
c001c052:	c3                   	ret    
c001c053:	59                   	pop    ecx
c001c054:	b8 02 00 00 00       	mov    eax,0x2
c001c059:	31 d2                	xor    edx,edx
c001c05b:	5b                   	pop    ebx
c001c05c:	5e                   	pop    esi
c001c05d:	c3                   	ret    

c001c05e <sysCallUSleep(regs*)>:
c001c05e:	83 ec 14             	sub    esp,0x14
c001c061:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c066:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c06a:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c071:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c074:	01 ca                	add    edx,ecx
c001c076:	52                   	push   edx
c001c077:	50                   	push   eax
c001c078:	e8 6b 23 00 00       	call   c001e3e8 <nanoSleep(unsigned long long)>
c001c07d:	31 c0                	xor    eax,eax
c001c07f:	31 d2                	xor    edx,edx
c001c081:	83 c4 1c             	add    esp,0x1c
c001c084:	c3                   	ret    

c001c085 <sysCallSpawn(regs*)>:
c001c085:	56                   	push   esi
c001c086:	53                   	push   ebx
c001c087:	53                   	push   ebx
c001c088:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c08c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c08f:	85 f6                	test   esi,esi
c001c091:	75 08                	jne    c001c09b <sysCallSpawn(regs*)+0x16>
c001c093:	59                   	pop    ecx
c001c094:	31 c0                	xor    eax,eax
c001c096:	31 d2                	xor    edx,edx
c001c098:	5b                   	pop    ebx
c001c099:	5e                   	pop    esi
c001c09a:	c3                   	ret    
c001c09b:	83 ec 0c             	sub    esp,0xc
c001c09e:	68 3f 07 00 00       	push   0x73f
c001c0a3:	e8 3a 38 ff ff       	call   c000f8e2 <malloc>
c001c0a8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c0ab:	89 c6                	mov    esi,eax
c001c0ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0b2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0b5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0b8:	56                   	push   esi
c001c0b9:	e8 2a 1a 00 00       	call   c001dae8 <Process::Process(char const*, Process*, char**)>
c001c0be:	83 c4 20             	add    esp,0x20
c001c0c1:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c0c8:	75 c9                	jne    c001c093 <sysCallSpawn(regs*)+0xe>
c001c0ca:	83 ec 0c             	sub    esp,0xc
c001c0cd:	56                   	push   esi
c001c0ce:	e8 db 1f 00 00       	call   c001e0ae <Process::createUserThread()>
c001c0d3:	8b 06                	mov    eax,DWORD PTR [esi]
c001c0d5:	83 c4 10             	add    esp,0x10
c001c0d8:	99                   	cdq    
c001c0d9:	59                   	pop    ecx
c001c0da:	5b                   	pop    ebx
c001c0db:	5e                   	pop    esi
c001c0dc:	c3                   	ret    

c001c0dd <sysCallGetEnv(regs*)>:
c001c0dd:	55                   	push   ebp
c001c0de:	57                   	push   edi
c001c0df:	56                   	push   esi
c001c0e0:	53                   	push   ebx
c001c0e1:	83 ec 28             	sub    esp,0x28
c001c0e4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c0e8:	68 2f c1 02 c0       	push   0xc002c12f
c001c0ed:	e8 cf 6e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001c0f2:	5f                   	pop    edi
c001c0f3:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c0f6:	5d                   	pop    ebp
c001c0f7:	53                   	push   ebx
c001c0f8:	68 5e c4 02 c0       	push   0xc002c45e
c001c0fd:	e8 bf 6e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001c102:	58                   	pop    eax
c001c103:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c106:	5a                   	pop    edx
c001c107:	57                   	push   edi
c001c108:	68 38 c1 02 c0       	push   0xc002c138
c001c10d:	e8 af 6e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001c112:	59                   	pop    ecx
c001c113:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c118:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c11b:	e8 6f e4 ff ff       	call   c001a58f <Krnl::getProcessTotalEnvCount(Process*)>
c001c120:	5a                   	pop    edx
c001c121:	89 c5                	mov    ebp,eax
c001c123:	59                   	pop    ecx
c001c124:	50                   	push   eax
c001c125:	68 42 c1 02 c0       	push   0xc002c142
c001c12a:	e8 92 6e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001c12f:	83 c4 10             	add    esp,0x10
c001c132:	39 ef                	cmp    edi,ebp
c001c134:	7c 15                	jl     c001c14b <sysCallGetEnv(regs*)+0x6e>
c001c136:	85 db                	test   ebx,ebx
c001c138:	75 0c                	jne    c001c146 <sysCallGetEnv(regs*)+0x69>
c001c13a:	83 c4 1c             	add    esp,0x1c
c001c13d:	31 c0                	xor    eax,eax
c001c13f:	5b                   	pop    ebx
c001c140:	31 d2                	xor    edx,edx
c001c142:	5e                   	pop    esi
c001c143:	5f                   	pop    edi
c001c144:	5d                   	pop    ebp
c001c145:	c3                   	ret    
c001c146:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c149:	eb ef                	jmp    c001c13a <sysCallGetEnv(regs*)+0x5d>
c001c14b:	83 ec 0c             	sub    esp,0xc
c001c14e:	68 4e c1 02 c0       	push   0xc002c14e
c001c153:	e8 69 6e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001c158:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c15c:	83 c4 0c             	add    esp,0xc
c001c15f:	57                   	push   edi
c001c160:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c166:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c169:	50                   	push   eax
c001c16a:	e8 40 e4 ff ff       	call   c001a5af <Krnl::getProcessEnvPair(Process*, int)>
c001c16f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c173:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c177:	68 dd c4 02 c0       	push   0xc002c4dd
c001c17c:	e8 40 6e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001c181:	83 c4 10             	add    esp,0x10
c001c184:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c187:	85 f6                	test   esi,esi
c001c189:	75 47                	jne    c001c1d2 <sysCallGetEnv(regs*)+0xf5>
c001c18b:	83 ec 0c             	sub    esp,0xc
c001c18e:	55                   	push   ebp
c001c18f:	e8 00 46 fe ff       	call   c0000794 <strlen>
c001c194:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c197:	89 c3                	mov    ebx,eax
c001c199:	e8 f6 45 fe ff       	call   c0000794 <strlen>
c001c19e:	5a                   	pop    edx
c001c19f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c1a3:	59                   	pop    ecx
c001c1a4:	50                   	push   eax
c001c1a5:	68 51 c1 02 c0       	push   0xc002c151
c001c1aa:	e8 12 6e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001c1af:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c1b2:	e8 dd 45 fe ff       	call   c0000794 <strlen>
c001c1b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1ba:	89 c3                	mov    ebx,eax
c001c1bc:	e8 d3 45 fe ff       	call   c0000794 <strlen>
c001c1c1:	83 c4 10             	add    esp,0x10
c001c1c4:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c1c8:	83 c4 1c             	add    esp,0x1c
c001c1cb:	31 d2                	xor    edx,edx
c001c1cd:	5b                   	pop    ebx
c001c1ce:	5e                   	pop    esi
c001c1cf:	5f                   	pop    edi
c001c1d0:	5d                   	pop    ebp
c001c1d1:	c3                   	ret    
c001c1d2:	83 ec 0c             	sub    esp,0xc
c001c1d5:	68 f7 c4 02 c0       	push   0xc002c4f7
c001c1da:	e8 e2 6d ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001c1df:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c1e2:	58                   	pop    eax
c001c1e3:	5a                   	pop    edx
c001c1e4:	55                   	push   ebp
c001c1e5:	53                   	push   ebx
c001c1e6:	e8 49 46 fe ff       	call   c0000834 <strcpy>
c001c1eb:	59                   	pop    ecx
c001c1ec:	5e                   	pop    esi
c001c1ed:	68 5b c1 02 c0       	push   0xc002c15b
c001c1f2:	53                   	push   ebx
c001c1f3:	e8 7c 47 fe ff       	call   c0000974 <strcat>
c001c1f8:	5d                   	pop    ebp
c001c1f9:	58                   	pop    eax
c001c1fa:	57                   	push   edi
c001c1fb:	53                   	push   ebx
c001c1fc:	e8 73 47 fe ff       	call   c0000974 <strcat>
c001c201:	c7 04 24 11 c5 02 c0 	mov    DWORD PTR [esp],0xc002c511
c001c208:	e8 b4 6d ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001c20d:	83 c4 10             	add    esp,0x10
c001c210:	e9 25 ff ff ff       	jmp    c001c13a <sysCallGetEnv(regs*)+0x5d>

c001c215 <sysAppSettings(regs*)>:
c001c215:	53                   	push   ebx
c001c216:	83 ec 08             	sub    esp,0x8
c001c219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c21d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c220:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c226:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c22b:	66 3d c0 09          	cmp    ax,0x9c0
c001c22f:	75 2f                	jne    c001c260 <sysAppSettings(regs*)+0x4b>
c001c231:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c237:	83 e0 1f             	and    eax,0x1f
c001c23a:	3c 01                	cmp    al,0x1
c001c23c:	74 2e                	je     c001c26c <sysAppSettings(regs*)+0x57>
c001c23e:	3c 07                	cmp    al,0x7
c001c240:	0f 84 bd 00 00 00    	je     c001c303 <sysAppSettings(regs*)+0xee>
c001c246:	84 c0                	test   al,al
c001c248:	0f 84 dc 00 00 00    	je     c001c32a <sysAppSettings(regs*)+0x115>
c001c24e:	3c 08                	cmp    al,0x8
c001c250:	74 6d                	je     c001c2bf <sysAppSettings(regs*)+0xaa>
c001c252:	0f b6 c0             	movzx  eax,al
c001c255:	83 c4 08             	add    esp,0x8
c001c258:	05 e8 03 00 00       	add    eax,0x3e8
c001c25d:	5b                   	pop    ebx
c001c25e:	99                   	cdq    
c001c25f:	c3                   	ret    
c001c260:	b8 01 00 00 00       	mov    eax,0x1
c001c265:	31 d2                	xor    edx,edx
c001c267:	83 c4 08             	add    esp,0x8
c001c26a:	5b                   	pop    ebx
c001c26b:	c3                   	ret    
c001c26c:	51                   	push   ecx
c001c26d:	68 00 01 00 00       	push   0x100
c001c272:	6a 00                	push   0x0
c001c274:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c279:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c27c:	83 c0 0c             	add    eax,0xc
c001c27f:	50                   	push   eax
c001c280:	e8 f3 44 fe ff       	call   c0000778 <memset>
c001c285:	83 c4 0c             	add    esp,0xc
c001c288:	68 ff 00 00 00       	push   0xff
c001c28d:	53                   	push   ebx
c001c28e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c293:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c296:	83 c0 0c             	add    eax,0xc
c001c299:	50                   	push   eax
c001c29a:	e8 a5 44 fe ff       	call   c0000744 <memcpy>
c001c29f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2a4:	5b                   	pop    ebx
c001c2a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2a8:	5a                   	pop    edx
c001c2a9:	8d 50 0c             	lea    edx,[eax+0xc]
c001c2ac:	52                   	push   edx
c001c2ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2b3:	e8 6e 49 ff ff       	call   c0010c26 <VgaText::setTitle(char*)>
c001c2b8:	83 c4 10             	add    esp,0x10
c001c2bb:	31 c0                	xor    eax,eax
c001c2bd:	eb a6                	jmp    c001c265 <sysAppSettings(regs*)+0x50>
c001c2bf:	83 ec 08             	sub    esp,0x8
c001c2c2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c2c8:	83 e0 0f             	and    eax,0xf
c001c2cb:	50                   	push   eax
c001c2cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2da:	e8 37 49 ff ff       	call   c0010c16 <VgaText::setTitleColour(VgaColour)>
c001c2df:	58                   	pop    eax
c001c2e0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c2e6:	5a                   	pop    edx
c001c2e7:	c1 e8 04             	shr    eax,0x4
c001c2ea:	83 e0 0f             	and    eax,0xf
c001c2ed:	50                   	push   eax
c001c2ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2fc:	e8 05 49 ff ff       	call   c0010c06 <VgaText::setTitleTextColour(VgaColour)>
c001c301:	eb b5                	jmp    c001c2b8 <sysAppSettings(regs*)+0xa3>
c001c303:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c308:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c30b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c311:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c317:	c0 e8 06             	shr    al,0x6
c001c31a:	83 e0 01             	and    eax,0x1
c001c31d:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c323:	31 c0                	xor    eax,eax
c001c325:	e9 3b ff ff ff       	jmp    c001c265 <sysAppSettings(regs*)+0x50>
c001c32a:	b8 02 00 00 00       	mov    eax,0x2
c001c32f:	e9 31 ff ff ff       	jmp    c001c265 <sysAppSettings(regs*)+0x50>

c001c334 <sysSetFatAttrib(regs*)>:
c001c334:	57                   	push   edi
c001c335:	56                   	push   esi
c001c336:	53                   	push   ebx
c001c337:	83 ec 1c             	sub    esp,0x1c
c001c33a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c33e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c341:	68 14 01 00 00       	push   0x114
c001c346:	e8 97 35 ff ff       	call   c000f8e2 <malloc>
c001c34b:	83 c4 0c             	add    esp,0xc
c001c34e:	89 c3                	mov    ebx,eax
c001c350:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c355:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c358:	57                   	push   edi
c001c359:	53                   	push   ebx
c001c35a:	e8 bb 71 ff ff       	call   c001351a <File::File(char const*, Process*)>
c001c35f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c362:	83 c4 0c             	add    esp,0xc
c001c365:	0f b6 d4             	movzx  edx,ah
c001c368:	0f b6 c0             	movzx  eax,al
c001c36b:	52                   	push   edx
c001c36c:	50                   	push   eax
c001c36d:	53                   	push   ebx
c001c36e:	e8 1d 74 ff ff       	call   c0013790 <File::chfatattr(unsigned char, unsigned char)>
c001c373:	83 c4 10             	add    esp,0x10
c001c376:	85 db                	test   ebx,ebx
c001c378:	74 14                	je     c001c38e <sysSetFatAttrib(regs*)+0x5a>
c001c37a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c37e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c380:	83 ec 0c             	sub    esp,0xc
c001c383:	53                   	push   ebx
c001c384:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c387:	83 c4 10             	add    esp,0x10
c001c38a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c38e:	85 c0                	test   eax,eax
c001c390:	0f 95 c0             	setne  al
c001c393:	31 d2                	xor    edx,edx
c001c395:	0f b6 c0             	movzx  eax,al
c001c398:	f7 d8                	neg    eax
c001c39a:	83 d2 00             	adc    edx,0x0
c001c39d:	83 c4 10             	add    esp,0x10
c001c3a0:	f7 da                	neg    edx
c001c3a2:	5b                   	pop    ebx
c001c3a3:	5e                   	pop    esi
c001c3a4:	5f                   	pop    edi
c001c3a5:	c3                   	ret    

c001c3a6 <sysPipe(regs*)>:
c001c3a6:	57                   	push   edi
c001c3a7:	56                   	push   esi
c001c3a8:	53                   	push   ebx
c001c3a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ad:	83 ec 0c             	sub    esp,0xc
c001c3b0:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c3b3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c3b6:	6a 20                	push   0x20
c001c3b8:	e8 25 35 ff ff       	call   c000f8e2 <malloc>
c001c3bd:	89 c3                	mov    ebx,eax
c001c3bf:	58                   	pop    eax
c001c3c0:	5a                   	pop    edx
c001c3c1:	68 00 50 00 00       	push   0x5000
c001c3c6:	53                   	push   ebx
c001c3c7:	e8 8a 41 ff ff       	call   c0010556 <Pipe::Pipe(int)>
c001c3cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3cf:	e8 e2 53 ff ff       	call   c00117b6 <UnixFile::getFileDescriptor()>
c001c3d4:	89 07                	mov    DWORD PTR [edi],eax
c001c3d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3d9:	e8 d8 53 ff ff       	call   c00117b6 <UnixFile::getFileDescriptor()>
c001c3de:	83 c4 10             	add    esp,0x10
c001c3e1:	89 06                	mov    DWORD PTR [esi],eax
c001c3e3:	31 d2                	xor    edx,edx
c001c3e5:	5b                   	pop    ebx
c001c3e6:	31 c0                	xor    eax,eax
c001c3e8:	5e                   	pop    esi
c001c3e9:	5f                   	pop    edi
c001c3ea:	c3                   	ret    

c001c3eb <sysGetUnixTime(regs*)>:
c001c3eb:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c001c3f0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c3f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c3fa:	e9 05 7b ff ff       	jmp    c0013f04 <Clock::timeInSecondsLocal()>

c001c3ff <string_ends_with(char const*, char const*)>:
c001c3ff:	57                   	push   edi
c001c400:	56                   	push   esi
c001c401:	53                   	push   ebx
c001c402:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c406:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c40a:	83 ec 0c             	sub    esp,0xc
c001c40d:	53                   	push   ebx
c001c40e:	e8 81 43 fe ff       	call   c0000794 <strlen>
c001c413:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c416:	89 c6                	mov    esi,eax
c001c418:	e8 77 43 fe ff       	call   c0000794 <strlen>
c001c41d:	83 c4 10             	add    esp,0x10
c001c420:	39 c6                	cmp    esi,eax
c001c422:	7d 06                	jge    c001c42a <string_ends_with(char const*, char const*)+0x2b>
c001c424:	5b                   	pop    ebx
c001c425:	31 c0                	xor    eax,eax
c001c427:	5e                   	pop    esi
c001c428:	5f                   	pop    edi
c001c429:	c3                   	ret    
c001c42a:	83 ec 08             	sub    esp,0x8
c001c42d:	29 c6                	sub    esi,eax
c001c42f:	57                   	push   edi
c001c430:	01 f3                	add    ebx,esi
c001c432:	53                   	push   ebx
c001c433:	e8 88 44 fe ff       	call   c00008c0 <strcmp>
c001c438:	83 c4 10             	add    esp,0x10
c001c43b:	85 c0                	test   eax,eax
c001c43d:	5b                   	pop    ebx
c001c43e:	0f 94 c0             	sete   al
c001c441:	5e                   	pop    esi
c001c442:	0f b6 c0             	movzx  eax,al
c001c445:	5f                   	pop    edi
c001c446:	c3                   	ret    

c001c447 <sysCallOpen(regs*)>:
c001c447:	56                   	push   esi
c001c448:	53                   	push   ebx
c001c449:	81 ec 04 01 00 00    	sub    esp,0x104
c001c44f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c456:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c459:	85 c9                	test   ecx,ecx
c001c45b:	0f 84 b3 00 00 00    	je     c001c514 <sysCallOpen(regs*)+0xcd>
c001c461:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c464:	85 c0                	test   eax,eax
c001c466:	0f 84 a8 00 00 00    	je     c001c514 <sysCallOpen(regs*)+0xcd>
c001c46c:	52                   	push   edx
c001c46d:	68 5d c1 02 c0       	push   0xc002c15d
c001c472:	50                   	push   eax
c001c473:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c477:	56                   	push   esi
c001c478:	e8 f3 6e ff ff       	call   c0013370 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c47d:	89 34 24             	mov    DWORD PTR [esp],esi
c001c480:	e8 0f 43 fe ff       	call   c0000794 <strlen>
c001c485:	83 c4 10             	add    esp,0x10
c001c488:	48                   	dec    eax
c001c489:	74 1d                	je     c001c4a8 <sysCallOpen(regs*)+0x61>
c001c48b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c48e:	eb 0f                	jmp    c001c49f <sysCallOpen(regs*)+0x58>
c001c490:	80 fa 3a             	cmp    dl,0x3a
c001c493:	74 0f                	je     c001c4a4 <sysCallOpen(regs*)+0x5d>
c001c495:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c499:	48                   	dec    eax
c001c49a:	74 0c                	je     c001c4a8 <sysCallOpen(regs*)+0x61>
c001c49c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c49f:	80 fa 2e             	cmp    dl,0x2e
c001c4a2:	75 ec                	jne    c001c490 <sysCallOpen(regs*)+0x49>
c001c4a4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c4a8:	83 ec 08             	sub    esp,0x8
c001c4ab:	68 61 c1 02 c0       	push   0xc002c161
c001c4b0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4b3:	e8 47 ff ff ff       	call   c001c3ff <string_ends_with(char const*, char const*)>
c001c4b8:	83 c4 10             	add    esp,0x10
c001c4bb:	85 c0                	test   eax,eax
c001c4bd:	75 17                	jne    c001c4d6 <sysCallOpen(regs*)+0x8f>
c001c4bf:	83 ec 08             	sub    esp,0x8
c001c4c2:	68 82 c1 02 c0       	push   0xc002c182
c001c4c7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4ca:	e8 30 ff ff ff       	call   c001c3ff <string_ends_with(char const*, char const*)>
c001c4cf:	83 c4 10             	add    esp,0x10
c001c4d2:	85 c0                	test   eax,eax
c001c4d4:	74 51                	je     c001c527 <sysCallOpen(regs*)+0xe0>
c001c4d6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4d9:	83 ec 08             	sub    esp,0x8
c001c4dc:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c4e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4e9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4ec:	ff 30                	push   DWORD PTR [eax]
c001c4ee:	68 66 c1 02 c0       	push   0xc002c166
c001c4f3:	e8 c9 6a ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001c4f8:	c7 04 24 75 c1 02 c0 	mov    DWORD PTR [esp],0xc002c175
c001c4ff:	e8 bd 6a ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001c504:	83 c4 10             	add    esp,0x10
c001c507:	81 c4 04 01 00 00    	add    esp,0x104
c001c50d:	31 c0                	xor    eax,eax
c001c50f:	31 d2                	xor    edx,edx
c001c511:	5b                   	pop    ebx
c001c512:	5e                   	pop    esi
c001c513:	c3                   	ret    
c001c514:	81 c4 04 01 00 00    	add    esp,0x104
c001c51a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c51f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c524:	5b                   	pop    ebx
c001c525:	5e                   	pop    esi
c001c526:	c3                   	ret    
c001c527:	83 ec 08             	sub    esp,0x8
c001c52a:	68 62 c1 02 c0       	push   0xc002c162
c001c52f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c532:	e8 89 43 fe ff       	call   c00008c0 <strcmp>
c001c537:	83 c4 10             	add    esp,0x10
c001c53a:	85 c0                	test   eax,eax
c001c53c:	74 98                	je     c001c4d6 <sysCallOpen(regs*)+0x8f>
c001c53e:	83 ec 08             	sub    esp,0x8
c001c541:	68 61 c1 02 c0       	push   0xc002c161
c001c546:	56                   	push   esi
c001c547:	e8 b3 fe ff ff       	call   c001c3ff <string_ends_with(char const*, char const*)>
c001c54c:	83 c4 10             	add    esp,0x10
c001c54f:	85 c0                	test   eax,eax
c001c551:	75 83                	jne    c001c4d6 <sysCallOpen(regs*)+0x8f>
c001c553:	83 ec 08             	sub    esp,0x8
c001c556:	68 87 c1 02 c0       	push   0xc002c187
c001c55b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c55e:	e8 9c fe ff ff       	call   c001c3ff <string_ends_with(char const*, char const*)>
c001c563:	83 c4 10             	add    esp,0x10
c001c566:	85 c0                	test   eax,eax
c001c568:	0f 85 d9 00 00 00    	jne    c001c647 <sysCallOpen(regs*)+0x200>
c001c56e:	83 ec 08             	sub    esp,0x8
c001c571:	68 8c c1 02 c0       	push   0xc002c18c
c001c576:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c579:	e8 81 fe ff ff       	call   c001c3ff <string_ends_with(char const*, char const*)>
c001c57e:	83 c4 10             	add    esp,0x10
c001c581:	85 c0                	test   eax,eax
c001c583:	0f 85 be 00 00 00    	jne    c001c647 <sysCallOpen(regs*)+0x200>
c001c589:	83 ec 08             	sub    esp,0x8
c001c58c:	68 88 c1 02 c0       	push   0xc002c188
c001c591:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c594:	e8 27 43 fe ff       	call   c00008c0 <strcmp>
c001c599:	83 c4 10             	add    esp,0x10
c001c59c:	85 c0                	test   eax,eax
c001c59e:	0f 84 a3 00 00 00    	je     c001c647 <sysCallOpen(regs*)+0x200>
c001c5a4:	83 ec 08             	sub    esp,0x8
c001c5a7:	68 87 c1 02 c0       	push   0xc002c187
c001c5ac:	56                   	push   esi
c001c5ad:	e8 4d fe ff ff       	call   c001c3ff <string_ends_with(char const*, char const*)>
c001c5b2:	83 c4 10             	add    esp,0x10
c001c5b5:	85 c0                	test   eax,eax
c001c5b7:	0f 85 8a 00 00 00    	jne    c001c647 <sysCallOpen(regs*)+0x200>
c001c5bd:	83 ec 0c             	sub    esp,0xc
c001c5c0:	68 14 01 00 00       	push   0x114
c001c5c5:	e8 18 33 ff ff       	call   c000f8e2 <malloc>
c001c5ca:	83 c4 0c             	add    esp,0xc
c001c5cd:	89 c6                	mov    esi,eax
c001c5cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5d4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5d7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5da:	56                   	push   esi
c001c5db:	e8 3a 6f ff ff       	call   c001351a <File::File(char const*, Process*)>
c001c5e0:	83 c4 10             	add    esp,0x10
c001c5e3:	85 f6                	test   esi,esi
c001c5e5:	0f 84 29 ff ff ff    	je     c001c514 <sysCallOpen(regs*)+0xcd>
c001c5eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c5ee:	0f b6 c2             	movzx  eax,dl
c001c5f1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c5f4:	89 d0                	mov    eax,edx
c001c5f6:	83 e0 01             	and    eax,0x1
c001c5f9:	f6 c2 02             	test   dl,0x2
c001c5fc:	74 03                	je     c001c601 <sysCallOpen(regs*)+0x1ba>
c001c5fe:	83 c8 02             	or     eax,0x2
c001c601:	f6 c2 04             	test   dl,0x4
c001c604:	74 03                	je     c001c609 <sysCallOpen(regs*)+0x1c2>
c001c606:	83 c8 04             	or     eax,0x4
c001c609:	f6 c2 08             	test   dl,0x8
c001c60c:	74 03                	je     c001c611 <sysCallOpen(regs*)+0x1ca>
c001c60e:	83 c8 0a             	or     eax,0xa
c001c611:	83 e2 10             	and    edx,0x10
c001c614:	74 03                	je     c001c619 <sysCallOpen(regs*)+0x1d2>
c001c616:	83 c8 12             	or     eax,0x12
c001c619:	83 ec 08             	sub    esp,0x8
c001c61c:	50                   	push   eax
c001c61d:	56                   	push   esi
c001c61e:	e8 5b 6f ff ff       	call   c001357e <File::open(FileOpenMode)>
c001c623:	83 c4 10             	add    esp,0x10
c001c626:	85 c0                	test   eax,eax
c001c628:	0f 85 e6 fe ff ff    	jne    c001c514 <sysCallOpen(regs*)+0xcd>
c001c62e:	83 ec 0c             	sub    esp,0xc
c001c631:	56                   	push   esi
c001c632:	e8 7f 51 ff ff       	call   c00117b6 <UnixFile::getFileDescriptor()>
c001c637:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c63a:	89 02                	mov    DWORD PTR [edx],eax
c001c63c:	c1 f8 1f             	sar    eax,0x1f
c001c63f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c642:	e9 bd fe ff ff       	jmp    c001c504 <sysCallOpen(regs*)+0xbd>
c001c647:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c64a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c650:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c657:	e9 ab fe ff ff       	jmp    c001c507 <sysCallOpen(regs*)+0xc0>

c001c65c <Sys::loadSyscalls()>:
c001c65c:	c7 05 00 12 03 c0 69 b7 01 c0 	mov    DWORD PTR ds:0xc0031200,0xc001b769
c001c666:	c7 05 04 12 03 c0 08 b3 01 c0 	mov    DWORD PTR ds:0xc0031204,0xc001b308
c001c670:	c7 05 08 12 03 c0 72 b4 01 c0 	mov    DWORD PTR ds:0xc0031208,0xc001b472
c001c67a:	c7 05 0c 12 03 c0 9f b6 01 c0 	mov    DWORD PTR ds:0xc003120c,0xc001b69f
c001c684:	c7 05 10 12 03 c0 0a b4 01 c0 	mov    DWORD PTR ds:0xc0031210,0xc001b40a
c001c68e:	c7 05 14 12 03 c0 3f b3 01 c0 	mov    DWORD PTR ds:0xc0031214,0xc001b33f
c001c698:	c7 05 18 12 03 c0 20 b3 01 c0 	mov    DWORD PTR ds:0xc0031218,0xc001b320
c001c6a2:	c7 05 1c 12 03 c0 11 b5 01 c0 	mov    DWORD PTR ds:0xc003121c,0xc001b511
c001c6ac:	c7 05 24 12 03 c0 99 bc 01 c0 	mov    DWORD PTR ds:0xc0031224,0xc001bc99
c001c6b6:	c7 05 20 12 03 c0 47 c4 01 c0 	mov    DWORD PTR ds:0xc0031220,0xc001c447
c001c6c0:	c7 05 28 12 03 c0 21 bd 01 c0 	mov    DWORD PTR ds:0xc0031228,0xc001bd21
c001c6ca:	c7 05 2c 12 03 c0 88 b9 01 c0 	mov    DWORD PTR ds:0xc003122c,0xc001b988
c001c6d4:	c7 05 30 12 03 c0 a4 b7 01 c0 	mov    DWORD PTR ds:0xc0031230,0xc001b7a4
c001c6de:	c7 05 34 12 03 c0 a9 b7 01 c0 	mov    DWORD PTR ds:0xc0031234,0xc001b7a9
c001c6e8:	c7 05 38 12 03 c0 fc bd 01 c0 	mov    DWORD PTR ds:0xc0031238,0xc001bdfc
c001c6f2:	c7 05 3c 12 03 c0 96 bd 01 c0 	mov    DWORD PTR ds:0xc003123c,0xc001bd96
c001c6fc:	c7 05 40 12 03 c0 70 ba 01 c0 	mov    DWORD PTR ds:0xc0031240,0xc001ba70
c001c706:	c7 05 44 12 03 c0 d9 ba 01 c0 	mov    DWORD PTR ds:0xc0031244,0xc001bad9
c001c710:	c7 05 48 12 03 c0 56 bb 01 c0 	mov    DWORD PTR ds:0xc0031248,0xc001bb56
c001c71a:	c7 05 4c 12 03 c0 ae b7 01 c0 	mov    DWORD PTR ds:0xc003124c,0xc001b7ae
c001c724:	c7 05 50 12 03 c0 6c be 01 c0 	mov    DWORD PTR ds:0xc0031250,0xc001be6c
c001c72e:	c7 05 54 12 03 c0 86 be 01 c0 	mov    DWORD PTR ds:0xc0031254,0xc001be86
c001c738:	c7 05 58 12 03 c0 86 be 01 c0 	mov    DWORD PTR ds:0xc0031258,0xc001be86
c001c742:	c7 05 5c 12 03 c0 c7 be 01 c0 	mov    DWORD PTR ds:0xc003125c,0xc001bec7
c001c74c:	c7 05 60 12 03 c0 2b bf 01 c0 	mov    DWORD PTR ds:0xc0031260,0xc001bf2b
c001c756:	c7 05 64 12 03 c0 5a b9 01 c0 	mov    DWORD PTR ds:0xc0031264,0xc001b95a
c001c760:	c7 05 68 12 03 c0 8f bf 01 c0 	mov    DWORD PTR ds:0xc0031268,0xc001bf8f
c001c76a:	c7 05 6c 12 03 c0 17 b9 01 c0 	mov    DWORD PTR ds:0xc003126c,0xc001b917
c001c774:	c7 05 70 12 03 c0 db bf 01 c0 	mov    DWORD PTR ds:0xc0031270,0xc001bfdb
c001c77e:	c7 05 74 12 03 c0 16 ba 01 c0 	mov    DWORD PTR ds:0xc0031274,0xc001ba16
c001c788:	c7 05 78 12 03 c0 5e c0 01 c0 	mov    DWORD PTR ds:0xc0031278,0xc001c05e
c001c792:	c7 05 7c 12 03 c0 d9 bb 01 c0 	mov    DWORD PTR ds:0xc003127c,0xc001bbd9
c001c79c:	c7 05 80 12 03 c0 85 c0 01 c0 	mov    DWORD PTR ds:0xc0031280,0xc001c085
c001c7a6:	c7 05 84 12 03 c0 dd c0 01 c0 	mov    DWORD PTR ds:0xc0031284,0xc001c0dd
c001c7b0:	c7 05 88 12 03 c0 15 c2 01 c0 	mov    DWORD PTR ds:0xc0031288,0xc001c215
c001c7ba:	c7 05 8c 12 03 c0 b8 b7 01 c0 	mov    DWORD PTR ds:0xc003128c,0xc001b7b8
c001c7c4:	c7 05 90 12 03 c0 22 b8 01 c0 	mov    DWORD PTR ds:0xc0031290,0xc001b822
c001c7ce:	c7 05 94 12 03 c0 68 b8 01 c0 	mov    DWORD PTR ds:0xc0031294,0xc001b868
c001c7d8:	c7 05 98 12 03 c0 34 c3 01 c0 	mov    DWORD PTR ds:0xc0031298,0xc001c334
c001c7e2:	c7 05 9c 12 03 c0 a1 be 01 c0 	mov    DWORD PTR ds:0xc003129c,0xc001bea1
c001c7ec:	c7 05 a0 12 03 c0 b9 b8 01 c0 	mov    DWORD PTR ds:0xc00312a0,0xc001b8b9
c001c7f6:	c7 05 a4 12 03 c0 a6 c3 01 c0 	mov    DWORD PTR ds:0xc00312a4,0xc001c3a6
c001c800:	c7 05 a8 12 03 c0 eb c3 01 c0 	mov    DWORD PTR ds:0xc00312a8,0xc001c3eb
c001c80a:	c7 05 ac 12 03 c0 62 b3 01 c0 	mov    DWORD PTR ds:0xc00312ac,0xc001b362
c001c814:	c7 05 b0 12 03 c0 2d b5 01 c0 	mov    DWORD PTR ds:0xc00312b0,0xc001b52d
c001c81e:	c7 05 b4 12 03 c0 55 b6 01 c0 	mov    DWORD PTR ds:0xc00312b4,0xc001b655
c001c828:	c7 05 b8 12 03 c0 d2 b2 01 c0 	mov    DWORD PTR ds:0xc00312b8,0xc001b2d2
c001c832:	c7 05 bc 12 03 c0 07 b7 01 c0 	mov    DWORD PTR ds:0xc00312bc,0xc001b707
c001c83c:	c7 05 c0 12 03 c0 4b b3 01 c0 	mov    DWORD PTR ds:0xc00312c0,0xc001b34b
c001c846:	c3                   	ret    

c001c847 <Sys::systemCall(regs*, void*)>:
c001c847:	53                   	push   ebx
c001c848:	83 ec 08             	sub    esp,0x8
c001c84b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c84f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c852:	83 f8 7f             	cmp    eax,0x7f
c001c855:	77 16                	ja     c001c86d <Sys::systemCall(regs*, void*)+0x26>
c001c857:	8b 14 85 00 12 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcee00]
c001c85e:	85 d2                	test   edx,edx
c001c860:	74 0b                	je     c001c86d <Sys::systemCall(regs*, void*)+0x26>
c001c862:	83 ec 0c             	sub    esp,0xc
c001c865:	53                   	push   ebx
c001c866:	ff d2                	call   edx
c001c868:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c86b:	eb 0d                	jmp    c001c87a <Sys::systemCall(regs*, void*)+0x33>
c001c86d:	52                   	push   edx
c001c86e:	52                   	push   edx
c001c86f:	50                   	push   eax
c001c870:	68 91 c1 02 c0       	push   0xc002c191
c001c875:	e8 47 67 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001c87a:	83 c4 10             	add    esp,0x10
c001c87d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c882:	31 d2                	xor    edx,edx
c001c884:	83 c4 08             	add    esp,0x8
c001c887:	5b                   	pop    ebx
c001c888:	c3                   	ret    

c001c889 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c889:	55                   	push   ebp
c001c88a:	57                   	push   edi
c001c88b:	56                   	push   esi
c001c88c:	53                   	push   ebx
c001c88d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c893:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c89a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c8a1:	85 c0                	test   eax,eax
c001c8a3:	0f 95 c1             	setne  cl
c001c8a6:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c8ae:	0f 94 c2             	sete   dl
c001c8b1:	84 d1                	test   cl,dl
c001c8b3:	74 23                	je     c001c8d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c8b5:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c8bb:	74 1b                	je     c001c8d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c8bd:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c8c3:	89 da                	mov    edx,ebx
c001c8c5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c8cb:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c8d1:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c8d8:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c8df:	05 ff 0f 00 00       	add    eax,0xfff
c001c8e4:	83 ec 0c             	sub    esp,0xc
c001c8e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c8eb:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c8f1:	c1 e8 0c             	shr    eax,0xc
c001c8f4:	89 ef                	mov    edi,ebp
c001c8f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8fa:	c1 ef 0c             	shr    edi,0xc
c001c8fd:	6a 01                	push   0x1
c001c8ff:	e8 fd 52 ff ff       	call   c0011c01 <Virt::allocateKernelVirtualPages(int)>
c001c904:	89 c6                	mov    esi,eax
c001c906:	58                   	pop    eax
c001c907:	5a                   	pop    edx
c001c908:	57                   	push   edi
c001c909:	68 17 c2 02 c0       	push   0xc002c217
c001c90e:	e8 ae 66 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001c913:	59                   	pop    ecx
c001c914:	58                   	pop    eax
c001c915:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c919:	68 29 c2 02 c0       	push   0xc002c229
c001c91e:	e8 9e 66 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001c923:	83 c4 10             	add    esp,0x10
c001c926:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c92c:	0f 86 24 01 00 00    	jbe    c001ca56 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c932:	c1 e7 0c             	shl    edi,0xc
c001c935:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c938:	89 df                	mov    edi,ebx
c001c93a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c93e:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c945:	01 dd                	add    ebp,ebx
c001c947:	29 fd                	sub    ebp,edi
c001c949:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c94d:	0f 84 01 01 00 00    	je     c001ca54 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c953:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c959:	76 05                	jbe    c001c960 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c95b:	bd 00 10 00 00       	mov    ebp,0x1000
c001c960:	83 ec 0c             	sub    esp,0xc
c001c963:	31 d2                	xor    edx,edx
c001c965:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c96c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c96e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c972:	50                   	push   eax
c001c973:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c977:	50                   	push   eax
c001c978:	52                   	push   edx
c001c979:	55                   	push   ebp
c001c97a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c981:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c984:	83 c4 20             	add    esp,0x20
c001c987:	85 c0                	test   eax,eax
c001c989:	74 0a                	je     c001c995 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c98b:	53                   	push   ebx
c001c98c:	53                   	push   ebx
c001c98d:	50                   	push   eax
c001c98e:	68 3b c2 02 c0       	push   0xc002c23b
c001c993:	eb 0f                	jmp    c001c9a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c995:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c999:	74 20                	je     c001c9bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c99b:	51                   	push   ecx
c001c99c:	51                   	push   ecx
c001c99d:	6a 00                	push   0x0
c001c99f:	68 66 c2 02 c0       	push   0xc002c266
c001c9a4:	e8 18 66 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001c9a9:	89 34 24             	mov    DWORD PTR [esp],esi
c001c9ac:	e8 c0 56 ff ff       	call   c0012071 <Virt::freeKernelVirtualPages(unsigned long)>
c001c9b1:	83 c4 10             	add    esp,0x10
c001c9b4:	31 c0                	xor    eax,eax
c001c9b6:	e9 55 01 00 00       	jmp    c001cb10 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c9bb:	e8 d8 14 00 00       	call   c001de98 <lockScheduler()>
c001c9c0:	e8 bf 35 ff ff       	call   c000ff84 <Phys::allocatePage()>
c001c9c5:	6a 07                	push   0x7
c001c9c7:	89 c5                	mov    ebp,eax
c001c9c9:	56                   	push   esi
c001c9ca:	50                   	push   eax
c001c9cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9d3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9d9:	e8 fa 59 ff ff       	call   c00123d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c9de:	83 c4 0c             	add    esp,0xc
c001c9e1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ee:	6a 00                	push   0x0
c001c9f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9f8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9fe:	e8 3f 58 ff ff       	call   c0012242 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca03:	58                   	pop    eax
c001ca04:	5a                   	pop    edx
c001ca05:	68 07 0c 00 00       	push   0xc07
c001ca0a:	57                   	push   edi
c001ca0b:	81 c7 00 10 00 00    	add    edi,0x1000
c001ca11:	55                   	push   ebp
c001ca12:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca19:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca1f:	6a 00                	push   0x0
c001ca21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca26:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca29:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca2f:	e8 5e 5d ff ff       	call   c0012792 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca34:	83 c4 1c             	add    esp,0x1c
c001ca37:	68 00 10 00 00       	push   0x1000
c001ca3c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ca40:	50                   	push   eax
c001ca41:	56                   	push   esi
c001ca42:	e8 fd 3c fe ff       	call   c0000744 <memcpy>
c001ca47:	e8 4e 14 00 00       	call   c001de9a <unlockScheduler()>
c001ca4c:	83 c4 10             	add    esp,0x10
c001ca4f:	e9 ea fe ff ff       	jmp    c001c93e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001ca54:	89 fb                	mov    ebx,edi
c001ca56:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ca5e:	0f 86 9e 00 00 00    	jbe    c001cb02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001ca64:	e8 2f 14 00 00       	call   c001de98 <lockScheduler()>
c001ca69:	51                   	push   ecx
c001ca6a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca71:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca77:	6a 00                	push   0x0
c001ca79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca7e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca81:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca87:	e8 b6 57 ff ff       	call   c0012242 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca8c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ca90:	c1 e7 0c             	shl    edi,0xc
c001ca93:	01 df                	add    edi,ebx
c001ca95:	83 c4 10             	add    esp,0x10
c001ca98:	39 fb                	cmp    ebx,edi
c001ca9a:	74 61                	je     c001cafd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca9c:	e8 e3 34 ff ff       	call   c000ff84 <Phys::allocatePage()>
c001caa1:	6a 07                	push   0x7
c001caa3:	89 c5                	mov    ebp,eax
c001caa5:	56                   	push   esi
c001caa6:	50                   	push   eax
c001caa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001caaf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cab5:	e8 1e 59 ff ff       	call   c00123d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001caba:	58                   	pop    eax
c001cabb:	5a                   	pop    edx
c001cabc:	68 07 0c 00 00       	push   0xc07
c001cac1:	53                   	push   ebx
c001cac2:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cac8:	55                   	push   ebp
c001cac9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cad0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cad6:	6a 00                	push   0x0
c001cad8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cadd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cae0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cae6:	e8 a7 5c ff ff       	call   c0012792 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001caeb:	83 c4 1c             	add    esp,0x1c
c001caee:	68 00 10 00 00       	push   0x1000
c001caf3:	6a 00                	push   0x0
c001caf5:	56                   	push   esi
c001caf6:	e8 7d 3c fe ff       	call   c0000778 <memset>
c001cafb:	eb 98                	jmp    c001ca95 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001cafd:	e8 98 13 00 00       	call   c001de9a <unlockScheduler()>
c001cb02:	83 ec 0c             	sub    esp,0xc
c001cb05:	56                   	push   esi
c001cb06:	e8 66 55 ff ff       	call   c0012071 <Virt::freeKernelVirtualPages(unsigned long)>
c001cb0b:	83 c4 10             	add    esp,0x10
c001cb0e:	b0 01                	mov    al,0x1
c001cb10:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cb16:	5b                   	pop    ebx
c001cb17:	5e                   	pop    esi
c001cb18:	5f                   	pop    edi
c001cb19:	5d                   	pop    ebp
c001cb1a:	c3                   	ret    

c001cb1b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cb1b:	55                   	push   ebp
c001cb1c:	57                   	push   edi
c001cb1d:	56                   	push   esi
c001cb1e:	53                   	push   ebx
c001cb1f:	83 ec 48             	sub    esp,0x48
c001cb22:	68 14 01 00 00       	push   0x114
c001cb27:	e8 b6 2d ff ff       	call   c000f8e2 <malloc>
c001cb2c:	83 c4 0c             	add    esp,0xc
c001cb2f:	89 c6                	mov    esi,eax
c001cb31:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cb35:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cb39:	50                   	push   eax
c001cb3a:	e8 db 69 ff ff       	call   c001351a <File::File(char const*, Process*)>
c001cb3f:	58                   	pop    eax
c001cb40:	5a                   	pop    edx
c001cb41:	6a 01                	push   0x1
c001cb43:	56                   	push   esi
c001cb44:	e8 35 6a ff ff       	call   c001357e <File::open(FileOpenMode)>
c001cb49:	83 c4 10             	add    esp,0x10
c001cb4c:	85 c0                	test   eax,eax
c001cb4e:	0f 85 47 01 00 00    	jne    c001cc9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb54:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cb5c:	83 ec 0c             	sub    esp,0xc
c001cb5f:	6a 34                	push   0x34
c001cb61:	e8 7c 2d ff ff       	call   c000f8e2 <malloc>
c001cb66:	89 c3                	mov    ebx,eax
c001cb68:	58                   	pop    eax
c001cb69:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb6b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cb6f:	57                   	push   edi
c001cb70:	53                   	push   ebx
c001cb71:	6a 00                	push   0x0
c001cb73:	6a 34                	push   0x34
c001cb75:	56                   	push   esi
c001cb76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb79:	83 c4 20             	add    esp,0x20
c001cb7c:	85 c0                	test   eax,eax
c001cb7e:	0f 85 17 01 00 00    	jne    c001cc9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb84:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb8a:	0f 85 0b 01 00 00    	jne    c001cc9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb90:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb93:	85 c0                	test   eax,eax
c001cb95:	0f 84 00 01 00 00    	je     c001cc9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb9b:	31 d2                	xor    edx,edx
c001cb9d:	55                   	push   ebp
c001cb9e:	52                   	push   edx
c001cb9f:	50                   	push   eax
c001cba0:	56                   	push   esi
c001cba1:	e8 96 6a ff ff       	call   c001363c <File::seek(unsigned long long)>
c001cba6:	83 c4 10             	add    esp,0x10
c001cba9:	85 c0                	test   eax,eax
c001cbab:	0f 85 ea 00 00 00    	jne    c001cc9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbb1:	83 ec 0c             	sub    esp,0xc
c001cbb4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cbb7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbbb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cbbf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cbc3:	0f af c2             	imul   eax,edx
c001cbc6:	50                   	push   eax
c001cbc7:	e8 16 2d ff ff       	call   c000f8e2 <malloc>
c001cbcc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbd2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbd5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbd9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbdd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cbe1:	0f af c2             	imul   eax,edx
c001cbe4:	99                   	cdq    
c001cbe5:	52                   	push   edx
c001cbe6:	50                   	push   eax
c001cbe7:	56                   	push   esi
c001cbe8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbeb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cbee:	83 c4 20             	add    esp,0x20
c001cbf1:	85 c0                	test   eax,eax
c001cbf3:	0f 84 a2 00 00 00    	je     c001cc9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbf9:	31 d2                	xor    edx,edx
c001cbfb:	51                   	push   ecx
c001cbfc:	52                   	push   edx
c001cbfd:	50                   	push   eax
c001cbfe:	56                   	push   esi
c001cbff:	e8 38 6a ff ff       	call   c001363c <File::seek(unsigned long long)>
c001cc04:	83 c4 10             	add    esp,0x10
c001cc07:	85 c0                	test   eax,eax
c001cc09:	0f 85 8c 00 00 00    	jne    c001cc9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc0f:	83 ec 0c             	sub    esp,0xc
c001cc12:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc16:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc1a:	31 ed                	xor    ebp,ebp
c001cc1c:	0f af c2             	imul   eax,edx
c001cc1f:	50                   	push   eax
c001cc20:	e8 bd 2c ff ff       	call   c000f8e2 <malloc>
c001cc25:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cc27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc2b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc32:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc36:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc3a:	0f af c2             	imul   eax,edx
c001cc3d:	99                   	cdq    
c001cc3e:	52                   	push   edx
c001cc3f:	50                   	push   eax
c001cc40:	56                   	push   esi
c001cc41:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc44:	83 c4 20             	add    esp,0x20
c001cc47:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cc4f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cc53:	0f 86 80 00 00 00    	jbe    c001ccd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc59:	0f b7 fd             	movzx  edi,bp
c001cc5c:	c1 e7 05             	shl    edi,0x5
c001cc5f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cc63:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cc66:	75 6b                	jne    c001ccd3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc68:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cc6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc6f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cc72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc76:	52                   	push   edx
c001cc77:	31 d2                	xor    edx,edx
c001cc79:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc7c:	52                   	push   edx
c001cc7d:	50                   	push   eax
c001cc7e:	56                   	push   esi
c001cc7f:	e8 b8 69 ff ff       	call   c001363c <File::seek(unsigned long long)>
c001cc84:	83 c4 10             	add    esp,0x10
c001cc87:	85 c0                	test   eax,eax
c001cc89:	74 17                	je     c001cca2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc8b:	83 ec 0c             	sub    esp,0xc
c001cc8e:	68 92 c2 02 c0       	push   0xc002c292
c001cc93:	e8 29 63 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001cc98:	83 c4 10             	add    esp,0x10
c001cc9b:	31 c0                	xor    eax,eax
c001cc9d:	e9 87 00 00 00       	jmp    c001cd29 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cca2:	83 ec 0c             	sub    esp,0xc
c001cca5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cca8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ccab:	50                   	push   eax
c001ccac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ccb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccb4:	56                   	push   esi
c001ccb5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ccb9:	e8 cb fb ff ff       	call   c001c889 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ccbe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ccc2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ccc6:	83 c4 20             	add    esp,0x20
c001ccc9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cccd:	73 04                	jae    c001ccd3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cccf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccd3:	45                   	inc    ebp
c001ccd4:	e9 76 ff ff ff       	jmp    c001cc4f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ccd9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ccdd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cce1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cce5:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cceb:	83 ec 0c             	sub    esp,0xc
c001ccee:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ccf4:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ccf9:	05 00 10 00 00       	add    eax,0x1000
c001ccfe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cd01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd05:	e8 e8 2b ff ff       	call   c000f8f2 <free>
c001cd0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd0d:	e8 e0 2b ff ff       	call   c000f8f2 <free>
c001cd12:	58                   	pop    eax
c001cd13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd17:	e8 d6 2b ff ff       	call   c000f8f2 <free>
c001cd1c:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd1f:	e8 b8 68 ff ff       	call   c00135dc <File::close()>
c001cd24:	83 c4 10             	add    esp,0x10
c001cd27:	b0 01                	mov    al,0x1
c001cd29:	83 c4 3c             	add    esp,0x3c
c001cd2c:	5b                   	pop    ebx
c001cd2d:	5e                   	pop    esi
c001cd2e:	5f                   	pop    edi
c001cd2f:	5d                   	pop    ebp
c001cd30:	c3                   	ret    

c001cd31 <Thr::runtimeReferenceHelper()>:
c001cd31:	83 ec 18             	sub    esp,0x18
c001cd34:	68 9a c2 02 c0       	push   0xc002c29a
c001cd39:	e8 83 62 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001cd3e:	fa                   	cli    
c001cd3f:	83 c4 10             	add    esp,0x10
c001cd42:	eb fe                	jmp    c001cd42 <Thr::runtimeReferenceHelper()+0x11>

c001cd44 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cd44:	57                   	push   edi
c001cd45:	56                   	push   esi
c001cd46:	53                   	push   ebx
c001cd47:	31 db                	xor    ebx,ebx
c001cd49:	39 1d a0 1b 03 c0    	cmp    DWORD PTR ds:0xc0031ba0,ebx
c001cd4f:	7e 3c                	jle    c001cd8d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cd51:	8b 34 9d 20 1b 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce4e0]
c001cd58:	31 ff                	xor    edi,edi
c001cd5a:	39 3c 9d 20 1a 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce5e0],edi
c001cd61:	7e 27                	jle    c001cd8a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cd63:	50                   	push   eax
c001cd64:	50                   	push   eax
c001cd65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd69:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd6b:	03 04 9d a0 1a 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce560]
c001cd72:	50                   	push   eax
c001cd73:	e8 48 3b fe ff       	call   c00008c0 <strcmp>
c001cd78:	83 c4 10             	add    esp,0x10
c001cd7b:	85 c0                	test   eax,eax
c001cd7d:	75 05                	jne    c001cd84 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd7f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd82:	eb 0b                	jmp    c001cd8f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd84:	83 c6 10             	add    esi,0x10
c001cd87:	47                   	inc    edi
c001cd88:	eb d0                	jmp    c001cd5a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd8a:	43                   	inc    ebx
c001cd8b:	eb bc                	jmp    c001cd49 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd8d:	31 c0                	xor    eax,eax
c001cd8f:	5b                   	pop    ebx
c001cd90:	5e                   	pop    esi
c001cd91:	5f                   	pop    edi
c001cd92:	c3                   	ret    

c001cd93 <Thr::loadKernelSymbolTable(char const*)>:
c001cd93:	55                   	push   ebp
c001cd94:	57                   	push   edi
c001cd95:	56                   	push   esi
c001cd96:	53                   	push   ebx
c001cd97:	83 ec 68             	sub    esp,0x68
c001cd9a:	8b 35 f8 1b 03 c0    	mov    esi,DWORD PTR ds:0xc0031bf8
c001cda0:	68 14 01 00 00       	push   0x114
c001cda5:	e8 38 2b ff ff       	call   c000f8e2 <malloc>
c001cdaa:	83 c4 0c             	add    esp,0xc
c001cdad:	89 c3                	mov    ebx,eax
c001cdaf:	56                   	push   esi
c001cdb0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cdb4:	50                   	push   eax
c001cdb5:	e8 60 67 ff ff       	call   c001351a <File::File(char const*, Process*)>
c001cdba:	5e                   	pop    esi
c001cdbb:	5f                   	pop    edi
c001cdbc:	6a 01                	push   0x1
c001cdbe:	53                   	push   ebx
c001cdbf:	e8 ba 67 ff ff       	call   c001357e <File::open(FileOpenMode)>
c001cdc4:	83 c4 10             	add    esp,0x10
c001cdc7:	85 c0                	test   eax,eax
c001cdc9:	74 0a                	je     c001cdd5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cdcb:	83 ec 0c             	sub    esp,0xc
c001cdce:	68 bc c2 02 c0       	push   0xc002c2bc
c001cdd3:	eb 34                	jmp    c001ce09 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cdd5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cddd:	83 ec 0c             	sub    esp,0xc
c001cde0:	6a 34                	push   0x34
c001cde2:	e8 fb 2a ff ff       	call   c000f8e2 <malloc>
c001cde7:	59                   	pop    ecx
c001cde8:	89 c7                	mov    edi,eax
c001cdea:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cdee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdf0:	56                   	push   esi
c001cdf1:	57                   	push   edi
c001cdf2:	6a 00                	push   0x0
c001cdf4:	6a 34                	push   0x34
c001cdf6:	53                   	push   ebx
c001cdf7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdfa:	83 c4 20             	add    esp,0x20
c001cdfd:	85 c0                	test   eax,eax
c001cdff:	74 17                	je     c001ce18 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ce01:	83 ec 0c             	sub    esp,0xc
c001ce04:	68 d3 c2 02 c0       	push   0xc002c2d3
c001ce09:	e8 65 d8 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001ce0e:	83 c4 10             	add    esp,0x10
c001ce11:	31 c0                	xor    eax,eax
c001ce13:	e9 31 02 00 00       	jmp    c001d049 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001ce18:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce1e:	75 e1                	jne    c001ce01 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce20:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce23:	85 c0                	test   eax,eax
c001ce25:	74 da                	je     c001ce01 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce27:	52                   	push   edx
c001ce28:	31 d2                	xor    edx,edx
c001ce2a:	52                   	push   edx
c001ce2b:	50                   	push   eax
c001ce2c:	53                   	push   ebx
c001ce2d:	e8 0a 68 ff ff       	call   c001363c <File::seek(unsigned long long)>
c001ce32:	83 c4 10             	add    esp,0x10
c001ce35:	85 c0                	test   eax,eax
c001ce37:	75 c8                	jne    c001ce01 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce39:	83 ec 0c             	sub    esp,0xc
c001ce3c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce40:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce44:	31 ed                	xor    ebp,ebp
c001ce46:	0f af c2             	imul   eax,edx
c001ce49:	50                   	push   eax
c001ce4a:	e8 93 2a ff ff       	call   c000f8e2 <malloc>
c001ce4f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce55:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce5c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce60:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce64:	0f af c2             	imul   eax,edx
c001ce67:	99                   	cdq    
c001ce68:	52                   	push   edx
c001ce69:	50                   	push   eax
c001ce6a:	53                   	push   ebx
c001ce6b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce6e:	83 c4 20             	add    esp,0x20
c001ce71:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce79:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce81:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce89:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce91:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce95:	0f 86 aa 00 00 00    	jbe    c001cf45 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce9b:	0f b7 f5             	movzx  esi,bp
c001ce9e:	6b f6 28             	imul   esi,esi,0x28
c001cea1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cea5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cea8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ceac:	50                   	push   eax
c001cead:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ceb1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ceb5:	8b 16                	mov    edx,DWORD PTR [esi]
c001ceb7:	6b c0 28             	imul   eax,eax,0x28
c001ceba:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cebe:	89 d0                	mov    eax,edx
c001cec0:	31 d2                	xor    edx,edx
c001cec2:	52                   	push   edx
c001cec3:	50                   	push   eax
c001cec4:	53                   	push   ebx
c001cec5:	e8 72 67 ff ff       	call   c001363c <File::seek(unsigned long long)>
c001ceca:	83 c4 0c             	add    esp,0xc
c001cecd:	6a 20                	push   0x20
c001cecf:	6a 00                	push   0x0
c001ced1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ced5:	52                   	push   edx
c001ced6:	e8 9d 38 fe ff       	call   c0000778 <memset>
c001cedb:	58                   	pop    eax
c001cedc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cede:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cee2:	51                   	push   ecx
c001cee3:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cee7:	52                   	push   edx
c001cee8:	6a 00                	push   0x0
c001ceea:	6a 1f                	push   0x1f
c001ceec:	53                   	push   ebx
c001ceed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cef0:	83 c4 18             	add    esp,0x18
c001cef3:	68 ea c2 02 c0       	push   0xc002c2ea
c001cef8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cefc:	52                   	push   edx
c001cefd:	e8 be 39 fe ff       	call   c00008c0 <strcmp>
c001cf02:	83 c4 10             	add    esp,0x10
c001cf05:	85 c0                	test   eax,eax
c001cf07:	75 0f                	jne    c001cf18 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cf09:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf18:	50                   	push   eax
c001cf19:	50                   	push   eax
c001cf1a:	68 f2 c2 02 c0       	push   0xc002c2f2
c001cf1f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cf23:	50                   	push   eax
c001cf24:	e8 97 39 fe ff       	call   c00008c0 <strcmp>
c001cf29:	83 c4 10             	add    esp,0x10
c001cf2c:	85 c0                	test   eax,eax
c001cf2e:	75 0f                	jne    c001cf3f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cf30:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf3f:	45                   	inc    ebp
c001cf40:	e9 4c ff ff ff       	jmp    c001ce91 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cf45:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf4a:	75 10                	jne    c001cf5c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cf4c:	83 ec 0c             	sub    esp,0xc
c001cf4f:	68 fa c2 02 c0       	push   0xc002c2fa
c001cf54:	e8 1a d7 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001cf59:	83 c4 10             	add    esp,0x10
c001cf5c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cf61:	75 10                	jne    c001cf73 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cf63:	83 ec 0c             	sub    esp,0xc
c001cf66:	68 fa c2 02 c0       	push   0xc002c2fa
c001cf6b:	e8 03 d7 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001cf70:	83 c4 10             	add    esp,0x10
c001cf73:	31 d2                	xor    edx,edx
c001cf75:	50                   	push   eax
c001cf76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf7a:	52                   	push   edx
c001cf7b:	50                   	push   eax
c001cf7c:	53                   	push   ebx
c001cf7d:	e8 ba 66 ff ff       	call   c001363c <File::seek(unsigned long long)>
c001cf82:	5a                   	pop    edx
c001cf83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf87:	e8 56 29 ff ff       	call   c000f8e2 <malloc>
c001cf8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf90:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf94:	31 c9                	xor    ecx,ecx
c001cf96:	5e                   	pop    esi
c001cf97:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf99:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf9d:	55                   	push   ebp
c001cf9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfa2:	51                   	push   ecx
c001cfa3:	52                   	push   edx
c001cfa4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cfa8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cfac:	53                   	push   ebx
c001cfad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfb0:	83 c4 14             	add    esp,0x14
c001cfb3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cfb7:	e8 26 29 ff ff       	call   c000f8e2 <malloc>
c001cfbc:	89 c6                	mov    esi,eax
c001cfbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfc0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfc3:	56                   	push   esi
c001cfc4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cfc8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cfcc:	51                   	push   ecx
c001cfcd:	52                   	push   edx
c001cfce:	53                   	push   ebx
c001cfcf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfd2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfd6:	8b 15 a0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031ba0
c001cfdc:	83 c4 1c             	add    esp,0x1c
c001cfdf:	c1 e8 04             	shr    eax,0x4
c001cfe2:	89 04 95 20 1a 03 c0 	mov    DWORD PTR [edx*4-0x3ffce5e0],eax
c001cfe9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cfed:	31 d2                	xor    edx,edx
c001cfef:	52                   	push   edx
c001cff0:	50                   	push   eax
c001cff1:	53                   	push   ebx
c001cff2:	e8 45 66 ff ff       	call   c001363c <File::seek(unsigned long long)>
c001cff7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cff9:	31 d2                	xor    edx,edx
c001cffb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cffe:	56                   	push   esi
c001cfff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d003:	52                   	push   edx
c001d004:	50                   	push   eax
c001d005:	53                   	push   ebx
c001d006:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d009:	83 c4 14             	add    esp,0x14
c001d00c:	53                   	push   ebx
c001d00d:	e8 ca 65 ff ff       	call   c00135dc <File::close()>
c001d012:	5d                   	pop    ebp
c001d013:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d017:	e8 d6 28 ff ff       	call   c000f8f2 <free>
c001d01c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d01f:	e8 ce 28 ff ff       	call   c000f8f2 <free>
c001d024:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c001d029:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d02d:	8d 50 01             	lea    edx,[eax+0x1]
c001d030:	89 0c 85 20 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4e0],ecx
c001d037:	89 34 85 a0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce560],esi
c001d03e:	89 15 a0 1b 03 c0    	mov    DWORD PTR ds:0xc0031ba0,edx
c001d044:	83 c4 10             	add    esp,0x10
c001d047:	b0 01                	mov    al,0x1
c001d049:	83 c4 5c             	add    esp,0x5c
c001d04c:	5b                   	pop    ebx
c001d04d:	5e                   	pop    esi
c001d04e:	5f                   	pop    edi
c001d04f:	5d                   	pop    ebp
c001d050:	c3                   	ret    

c001d051 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d051:	55                   	push   ebp
c001d052:	57                   	push   edi
c001d053:	56                   	push   esi
c001d054:	53                   	push   ebx
c001d055:	81 ec 68 03 00 00    	sub    esp,0x368
c001d05b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d062:	8b 1d f8 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031bf8
c001d068:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d06c:	68 14 01 00 00       	push   0x114
c001d071:	e8 6c 28 ff ff       	call   c000f8e2 <malloc>
c001d076:	83 c4 0c             	add    esp,0xc
c001d079:	89 c5                	mov    ebp,eax
c001d07b:	53                   	push   ebx
c001d07c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d083:	50                   	push   eax
c001d084:	e8 91 64 ff ff       	call   c001351a <File::File(char const*, Process*)>
c001d089:	5e                   	pop    esi
c001d08a:	5f                   	pop    edi
c001d08b:	6a 01                	push   0x1
c001d08d:	55                   	push   ebp
c001d08e:	e8 eb 64 ff ff       	call   c001357e <File::open(FileOpenMode)>
c001d093:	83 c4 10             	add    esp,0x10
c001d096:	85 c0                	test   eax,eax
c001d098:	0f 85 8d 06 00 00    	jne    c001d72b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d09e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d0a6:	83 ec 0c             	sub    esp,0xc
c001d0a9:	6a 34                	push   0x34
c001d0ab:	e8 32 28 ff ff       	call   c000f8e2 <malloc>
c001d0b0:	5b                   	pop    ebx
c001d0b1:	89 c7                	mov    edi,eax
c001d0b3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d0b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0ba:	53                   	push   ebx
c001d0bb:	57                   	push   edi
c001d0bc:	6a 00                	push   0x0
c001d0be:	6a 34                	push   0x34
c001d0c0:	55                   	push   ebp
c001d0c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0c4:	83 c4 20             	add    esp,0x20
c001d0c7:	85 c0                	test   eax,eax
c001d0c9:	0f 85 5c 06 00 00    	jne    c001d72b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0cf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0d5:	0f 85 50 06 00 00    	jne    c001d72b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0db:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d0de:	85 c0                	test   eax,eax
c001d0e0:	0f 84 45 06 00 00    	je     c001d72b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0e6:	31 d2                	xor    edx,edx
c001d0e8:	51                   	push   ecx
c001d0e9:	52                   	push   edx
c001d0ea:	50                   	push   eax
c001d0eb:	55                   	push   ebp
c001d0ec:	e8 4b 65 ff ff       	call   c001363c <File::seek(unsigned long long)>
c001d0f1:	83 c4 10             	add    esp,0x10
c001d0f4:	85 c0                	test   eax,eax
c001d0f6:	0f 85 2f 06 00 00    	jne    c001d72b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0fc:	83 ec 0c             	sub    esp,0xc
c001d0ff:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d102:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d106:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d10a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d10e:	0f af c2             	imul   eax,edx
c001d111:	50                   	push   eax
c001d112:	e8 cb 27 ff ff       	call   c000f8e2 <malloc>
c001d117:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d11a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d11e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d121:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d125:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d129:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d12d:	0f af c2             	imul   eax,edx
c001d130:	99                   	cdq    
c001d131:	52                   	push   edx
c001d132:	50                   	push   eax
c001d133:	55                   	push   ebp
c001d134:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d137:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d13a:	83 c4 20             	add    esp,0x20
c001d13d:	85 c0                	test   eax,eax
c001d13f:	0f 84 e6 05 00 00    	je     c001d72b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d145:	52                   	push   edx
c001d146:	31 d2                	xor    edx,edx
c001d148:	52                   	push   edx
c001d149:	50                   	push   eax
c001d14a:	55                   	push   ebp
c001d14b:	e8 ec 64 ff ff       	call   c001363c <File::seek(unsigned long long)>
c001d150:	83 c4 10             	add    esp,0x10
c001d153:	85 c0                	test   eax,eax
c001d155:	0f 85 d0 05 00 00    	jne    c001d72b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d15b:	83 ec 0c             	sub    esp,0xc
c001d15e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d162:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d166:	31 f6                	xor    esi,esi
c001d168:	0f af c2             	imul   eax,edx
c001d16b:	50                   	push   eax
c001d16c:	e8 71 27 ff ff       	call   c000f8e2 <malloc>
c001d171:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d174:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d178:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d17b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d17f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d183:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d187:	0f af c2             	imul   eax,edx
c001d18a:	99                   	cdq    
c001d18b:	52                   	push   edx
c001d18c:	50                   	push   eax
c001d18d:	55                   	push   ebp
c001d18e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d191:	83 c4 20             	add    esp,0x20
c001d194:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d198:	0f 86 8a 00 00 00    	jbe    c001d228 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d19e:	0f b7 de             	movzx  ebx,si
c001d1a1:	c1 e3 05             	shl    ebx,0x5
c001d1a4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d1a8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d1ab:	75 75                	jne    c001d222 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d1ad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d1b0:	31 d2                	xor    edx,edx
c001d1b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1bd:	50                   	push   eax
c001d1be:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d1c1:	52                   	push   edx
c001d1c2:	50                   	push   eax
c001d1c3:	55                   	push   ebp
c001d1c4:	e8 73 64 ff ff       	call   c001363c <File::seek(unsigned long long)>
c001d1c9:	83 c4 10             	add    esp,0x10
c001d1cc:	85 c0                	test   eax,eax
c001d1ce:	0f 85 57 05 00 00    	jne    c001d72b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d1d4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d1db:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1de:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d1e2:	31 d2                	xor    edx,edx
c001d1e4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d1e8:	83 ec 0c             	sub    esp,0xc
c001d1eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1ef:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1f6:	50                   	push   eax
c001d1f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d1fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1ff:	52                   	push   edx
c001d200:	50                   	push   eax
c001d201:	55                   	push   ebp
c001d202:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d205:	83 c4 1c             	add    esp,0x1c
c001d208:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d20b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d20e:	50                   	push   eax
c001d20f:	6a 00                	push   0x0
c001d211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d215:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d219:	50                   	push   eax
c001d21a:	e8 59 35 fe ff       	call   c0000778 <memset>
c001d21f:	83 c4 10             	add    esp,0x10
c001d222:	46                   	inc    esi
c001d223:	e9 6c ff ff ff       	jmp    c001d194 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d228:	53                   	push   ebx
c001d229:	31 db                	xor    ebx,ebx
c001d22b:	68 00 01 00 00       	push   0x100
c001d230:	6a 00                	push   0x0
c001d232:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d236:	50                   	push   eax
c001d237:	e8 3c 35 fe ff       	call   c0000778 <memset>
c001d23c:	83 c4 0c             	add    esp,0xc
c001d23f:	68 00 01 00 00       	push   0x100
c001d244:	6a 00                	push   0x0
c001d246:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d24d:	50                   	push   eax
c001d24e:	e8 25 35 fe ff       	call   c0000778 <memset>
c001d253:	83 c4 10             	add    esp,0x10
c001d256:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d25e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d266:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d26e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d276:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d27e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d282:	0f 86 30 01 00 00    	jbe    c001d3b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d288:	0f b7 f3             	movzx  esi,bx
c001d28b:	6b f6 28             	imul   esi,esi,0x28
c001d28e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d292:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d295:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d299:	52                   	push   edx
c001d29a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d29e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d2a2:	8b 06                	mov    eax,DWORD PTR [esi]
c001d2a4:	6b d2 28             	imul   edx,edx,0x28
c001d2a7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d2ab:	31 d2                	xor    edx,edx
c001d2ad:	52                   	push   edx
c001d2ae:	50                   	push   eax
c001d2af:	55                   	push   ebp
c001d2b0:	e8 87 63 ff ff       	call   c001363c <File::seek(unsigned long long)>
c001d2b5:	83 c4 0c             	add    esp,0xc
c001d2b8:	6a 20                	push   0x20
c001d2ba:	6a 00                	push   0x0
c001d2bc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2c3:	51                   	push   ecx
c001d2c4:	e8 af 34 fe ff       	call   c0000778 <memset>
c001d2c9:	59                   	pop    ecx
c001d2ca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2cd:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d2d1:	52                   	push   edx
c001d2d2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d2d9:	51                   	push   ecx
c001d2da:	6a 00                	push   0x0
c001d2dc:	6a 1f                	push   0x1f
c001d2de:	55                   	push   ebp
c001d2df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2e2:	83 c4 1c             	add    esp,0x1c
c001d2e5:	6a 09                	push   0x9
c001d2e7:	68 14 c3 02 c0       	push   0xc002c314
c001d2ec:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2f3:	51                   	push   ecx
c001d2f4:	e8 47 33 fe ff       	call   c0000640 <memcmp>
c001d2f9:	83 c4 10             	add    esp,0x10
c001d2fc:	85 c0                	test   eax,eax
c001d2fe:	75 21                	jne    c001d321 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d304:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d308:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d30c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d310:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d313:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d31a:	89 d0                	mov    eax,edx
c001d31c:	40                   	inc    eax
c001d31d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d321:	50                   	push   eax
c001d322:	6a 09                	push   0x9
c001d324:	68 1e c3 02 c0       	push   0xc002c31e
c001d329:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d330:	50                   	push   eax
c001d331:	e8 0a 33 fe ff       	call   c0000640 <memcmp>
c001d336:	83 c4 10             	add    esp,0x10
c001d339:	85 c0                	test   eax,eax
c001d33b:	75 21                	jne    c001d35e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d33d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d341:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d345:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d349:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d34d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d350:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d357:	89 d0                	mov    eax,edx
c001d359:	40                   	inc    eax
c001d35a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d35e:	50                   	push   eax
c001d35f:	50                   	push   eax
c001d360:	68 ea c2 02 c0       	push   0xc002c2ea
c001d365:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d36c:	50                   	push   eax
c001d36d:	e8 4e 35 fe ff       	call   c00008c0 <strcmp>
c001d372:	83 c4 10             	add    esp,0x10
c001d375:	85 c0                	test   eax,eax
c001d377:	75 0f                	jne    c001d388 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d379:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d37c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d380:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d384:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d388:	50                   	push   eax
c001d389:	50                   	push   eax
c001d38a:	68 f2 c2 02 c0       	push   0xc002c2f2
c001d38f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d396:	50                   	push   eax
c001d397:	e8 24 35 fe ff       	call   c00008c0 <strcmp>
c001d39c:	83 c4 10             	add    esp,0x10
c001d39f:	85 c0                	test   eax,eax
c001d3a1:	75 0f                	jne    c001d3b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d3a3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3a6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3ae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d3b2:	43                   	inc    ebx
c001d3b3:	e9 c6 fe ff ff       	jmp    c001d27e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d3b8:	31 d2                	xor    edx,edx
c001d3ba:	50                   	push   eax
c001d3bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d3bf:	52                   	push   edx
c001d3c0:	50                   	push   eax
c001d3c1:	55                   	push   ebp
c001d3c2:	e8 75 62 ff ff       	call   c001363c <File::seek(unsigned long long)>
c001d3c7:	58                   	pop    eax
c001d3c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d3cc:	e8 11 25 ff ff       	call   c000f8e2 <malloc>
c001d3d1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3d4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d3d8:	31 d2                	xor    edx,edx
c001d3da:	58                   	pop    eax
c001d3db:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d3df:	53                   	push   ebx
c001d3e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d3e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3e8:	52                   	push   edx
c001d3e9:	50                   	push   eax
c001d3ea:	55                   	push   ebp
c001d3eb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3ee:	83 c4 14             	add    esp,0x14
c001d3f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3f5:	e8 e8 24 ff ff       	call   c000f8e2 <malloc>
c001d3fa:	31 d2                	xor    edx,edx
c001d3fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d400:	83 c4 0c             	add    esp,0xc
c001d403:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d407:	52                   	push   edx
c001d408:	50                   	push   eax
c001d409:	55                   	push   ebp
c001d40a:	e8 2d 62 ff ff       	call   c001363c <File::seek(unsigned long long)>
c001d40f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d412:	31 d2                	xor    edx,edx
c001d414:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d417:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d41b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d41f:	52                   	push   edx
c001d420:	50                   	push   eax
c001d421:	55                   	push   ebp
c001d422:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d425:	83 c4 20             	add    esp,0x20
c001d428:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d430:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d434:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d438:	0f 84 f1 02 00 00    	je     c001d72f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d43e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d445:	31 d2                	xor    edx,edx
c001d447:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d44b:	c1 e8 03             	shr    eax,0x3
c001d44e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d452:	51                   	push   ecx
c001d453:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d457:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d45b:	52                   	push   edx
c001d45c:	50                   	push   eax
c001d45d:	55                   	push   ebp
c001d45e:	e8 d9 61 ff ff       	call   c001363c <File::seek(unsigned long long)>
c001d463:	5b                   	pop    ebx
c001d464:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d468:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d46f:	e8 6e 24 ff ff       	call   c000f8e2 <malloc>
c001d474:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d477:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d47b:	31 d2                	xor    edx,edx
c001d47d:	5e                   	pop    esi
c001d47e:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d482:	50                   	push   eax
c001d483:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d487:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d48b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d492:	52                   	push   edx
c001d493:	50                   	push   eax
c001d494:	55                   	push   ebp
c001d495:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d498:	83 c4 20             	add    esp,0x20
c001d49b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d4a3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d4a7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d4ab:	0f 8d 62 02 00 00    	jge    c001d713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d4b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d4b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4b9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d4be:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d4c1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4c9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d4cd:	89 d8                	mov    eax,ebx
c001d4cf:	c1 e8 08             	shr    eax,0x8
c001d4d2:	89 c6                	mov    esi,eax
c001d4d4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d4d8:	c1 e6 04             	shl    esi,0x4
c001d4db:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d4df:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d4e2:	85 d2                	test   edx,edx
c001d4e4:	0f 85 bf 00 00 00    	jne    c001d5a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4ea:	83 ec 0c             	sub    esp,0xc
c001d4ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4f1:	03 06                	add    eax,DWORD PTR [esi]
c001d4f3:	50                   	push   eax
c001d4f4:	e8 4b f8 ff ff       	call   c001cd44 <Thr::getAddressOfKernelSymbol(char const*)>
c001d4f9:	83 c4 10             	add    esp,0x10
c001d4fc:	89 c2                	mov    edx,eax
c001d4fe:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d503:	85 c0                	test   eax,eax
c001d505:	0f 85 9e 00 00 00    	jne    c001d5a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d50b:	83 ec 0c             	sub    esp,0xc
c001d50e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d512:	03 06                	add    eax,DWORD PTR [esi]
c001d514:	50                   	push   eax
c001d515:	e8 db 0f ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d51a:	83 c4 10             	add    esp,0x10
c001d51d:	89 c2                	mov    edx,eax
c001d51f:	85 c0                	test   eax,eax
c001d521:	0f 85 82 00 00 00    	jne    c001d5a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d527:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d52b:	50                   	push   eax
c001d52c:	50                   	push   eax
c001d52d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d531:	03 06                	add    eax,DWORD PTR [esi]
c001d533:	50                   	push   eax
c001d534:	68 28 c3 02 c0       	push   0xc002c328
c001d539:	e8 83 5a ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001d53e:	58                   	pop    eax
c001d53f:	5a                   	pop    edx
c001d540:	68 42 c3 02 c0       	push   0xc002c342
c001d545:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d54c:	50                   	push   eax
c001d54d:	e8 e2 32 fe ff       	call   c0000834 <strcpy>
c001d552:	59                   	pop    ecx
c001d553:	58                   	pop    eax
c001d554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d558:	03 06                	add    eax,DWORD PTR [esi]
c001d55a:	50                   	push   eax
c001d55b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d562:	50                   	push   eax
c001d563:	e8 0c 34 fe ff       	call   c0000974 <strcat>
c001d568:	58                   	pop    eax
c001d569:	5a                   	pop    edx
c001d56a:	68 d8 c3 02 c0       	push   0xc002c3d8
c001d56f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d576:	50                   	push   eax
c001d577:	e8 f8 33 fe ff       	call   c0000974 <strcat>
c001d57c:	83 c4 10             	add    esp,0x10
c001d57f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d584:	0f 84 43 01 00 00    	je     c001d6cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d58a:	83 ec 0c             	sub    esp,0xc
c001d58d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d594:	50                   	push   eax
c001d595:	e8 d9 d0 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001d59a:	83 c4 10             	add    esp,0x10
c001d59d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d5a1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d5a5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d5a9:	80 fb 01             	cmp    bl,0x1
c001d5ac:	75 7d                	jne    c001d62b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d5ae:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d5b5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d5b9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d5bd:	01 ce                	add    esi,ecx
c001d5bf:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5c5:	0f 94 c0             	sete   al
c001d5c8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5ce:	0f 94 c3             	sete   bl
c001d5d1:	09 c3                	or     ebx,eax
c001d5d3:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5d5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5da:	74 36                	je     c001d612 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d5dc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d5df:	84 db                	test   bl,bl
c001d5e1:	75 0a                	jne    c001d5ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d5e3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5e7:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5eb:	76 37                	jbe    c001d624 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5ed:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d5f1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5f6:	0f 84 d1 00 00 00    	je     c001d6cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5fc:	83 ec 0c             	sub    esp,0xc
c001d5ff:	68 59 c3 02 c0       	push   0xc002c359
c001d604:	e8 6a d0 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001d609:	83 c4 10             	add    esp,0x10
c001d60c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d610:	eb 12                	jmp    c001d624 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d612:	01 c1                	add    ecx,eax
c001d614:	84 db                	test   bl,bl
c001d616:	75 0c                	jne    c001d624 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d618:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d61c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d620:	77 02                	ja     c001d624 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d622:	01 d1                	add    ecx,edx
c001d624:	89 0e                	mov    DWORD PTR [esi],ecx
c001d626:	e9 df 00 00 00       	jmp    c001d70a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d62b:	80 fb 02             	cmp    bl,0x2
c001d62e:	75 71                	jne    c001d6a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d630:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d637:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d63b:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d63f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d645:	74 15                	je     c001d65c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d647:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d64d:	74 0d                	je     c001d65c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d64f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d653:	83 e8 04             	sub    eax,0x4
c001d656:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d65a:	76 1f                	jbe    c001d67b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d65c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d660:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d665:	74 66                	je     c001d6cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d667:	83 ec 0c             	sub    esp,0xc
c001d66a:	68 75 c3 02 c0       	push   0xc002c375
c001d66f:	e8 ff cf ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001d674:	83 c4 10             	add    esp,0x10
c001d677:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d67b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d67d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d682:	74 13                	je     c001d697 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d684:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d688:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d68f:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d693:	01 c8                	add    eax,ecx
c001d695:	eb 04                	jmp    c001d69b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d697:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d69b:	01 c2                	add    edx,eax
c001d69d:	89 16                	mov    DWORD PTR [esi],edx
c001d69f:	eb 69                	jmp    c001d70a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d6a1:	0f b6 db             	movzx  ebx,bl
c001d6a4:	50                   	push   eax
c001d6a5:	50                   	push   eax
c001d6a6:	53                   	push   ebx
c001d6a7:	68 91 c3 02 c0       	push   0xc002c391
c001d6ac:	e8 10 59 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001d6b1:	83 c4 10             	add    esp,0x10
c001d6b4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d6b9:	74 12                	je     c001d6cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d6bb:	83 ec 0c             	sub    esp,0xc
c001d6be:	68 9c c3 02 c0       	push   0xc002c39c
c001d6c3:	e8 ab cf ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001d6c8:	83 c4 10             	add    esp,0x10
c001d6cb:	eb 3d                	jmp    c001d70a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d6cd:	83 ec 0c             	sub    esp,0xc
c001d6d0:	55                   	push   ebp
c001d6d1:	e8 06 5f ff ff       	call   c00135dc <File::close()>
c001d6d6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6d9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6df:	59                   	pop    ecx
c001d6e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6e4:	e8 09 22 ff ff       	call   c000f8f2 <free>
c001d6e9:	5b                   	pop    ebx
c001d6ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6ee:	e8 ff 21 ff ff       	call   c000f8f2 <free>
c001d6f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6f6:	e8 f7 21 ff ff       	call   c000f8f2 <free>
c001d6fb:	5e                   	pop    esi
c001d6fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d700:	e8 ed 21 ff ff       	call   c000f8f2 <free>
c001d705:	83 c4 10             	add    esp,0x10
c001d708:	eb 21                	jmp    c001d72b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d70a:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d70e:	e9 90 fd ff ff       	jmp    c001d4a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d713:	83 ec 0c             	sub    esp,0xc
c001d716:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d71a:	e8 d3 21 ff ff       	call   c000f8f2 <free>
c001d71f:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d723:	83 c4 10             	add    esp,0x10
c001d726:	e9 05 fd ff ff       	jmp    c001d430 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d72b:	31 c0                	xor    eax,eax
c001d72d:	eb 33                	jmp    c001d762 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d72f:	83 ec 0c             	sub    esp,0xc
c001d732:	55                   	push   ebp
c001d733:	e8 a4 5e ff ff       	call   c00135dc <File::close()>
c001d738:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d73b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d73e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d741:	58                   	pop    eax
c001d742:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d746:	e8 a7 21 ff ff       	call   c000f8f2 <free>
c001d74b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d74e:	e8 9f 21 ff ff       	call   c000f8f2 <free>
c001d753:	5a                   	pop    edx
c001d754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d758:	e8 95 21 ff ff       	call   c000f8f2 <free>
c001d75d:	83 c4 10             	add    esp,0x10
c001d760:	b0 01                	mov    al,0x1
c001d762:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d768:	5b                   	pop    ebx
c001d769:	5e                   	pop    esi
c001d76a:	5f                   	pop    edi
c001d76b:	5d                   	pop    ebp
c001d76c:	c3                   	ret    

c001d76d <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d76d:	56                   	push   esi
c001d76e:	31 d2                	xor    edx,edx
c001d770:	53                   	push   ebx
c001d771:	8b 1d 00 14 03 c0    	mov    ebx,DWORD PTR ds:0xc0031400
c001d777:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d77b:	39 d3                	cmp    ebx,edx
c001d77d:	7e 1b                	jle    c001d79a <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d77f:	8b 04 95 20 16 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce9e0]
c001d786:	39 c8                	cmp    eax,ecx
c001d788:	77 0d                	ja     c001d797 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d78a:	8b 34 95 20 14 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcebe0]
c001d791:	01 c6                	add    esi,eax
c001d793:	39 ce                	cmp    esi,ecx
c001d795:	77 05                	ja     c001d79c <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d797:	42                   	inc    edx
c001d798:	eb e1                	jmp    c001d77b <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d79a:	31 c0                	xor    eax,eax
c001d79c:	5b                   	pop    ebx
c001d79d:	5e                   	pop    esi
c001d79e:	c3                   	ret    

c001d79f <Thr::getDriverNameFromAddress(unsigned long)>:
c001d79f:	53                   	push   ebx
c001d7a0:	31 c0                	xor    eax,eax
c001d7a2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d7a6:	8b 1d 00 14 03 c0    	mov    ebx,DWORD PTR ds:0xc0031400
c001d7ac:	39 c3                	cmp    ebx,eax
c001d7ae:	7e 22                	jle    c001d7d2 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d7b0:	8b 14 85 20 16 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce9e0]
c001d7b7:	39 ca                	cmp    edx,ecx
c001d7b9:	77 14                	ja     c001d7cf <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7bb:	03 14 85 20 14 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcebe0]
c001d7c2:	39 ca                	cmp    edx,ecx
c001d7c4:	76 09                	jbe    c001d7cf <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7c6:	8b 04 85 20 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce7e0]
c001d7cd:	eb 05                	jmp    c001d7d4 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d7cf:	40                   	inc    eax
c001d7d0:	eb da                	jmp    c001d7ac <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d7d2:	31 c0                	xor    eax,eax
c001d7d4:	5b                   	pop    ebx
c001d7d5:	c3                   	ret    

c001d7d6 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d7d6:	53                   	push   ebx
c001d7d7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d7db:	53                   	push   ebx
c001d7dc:	e8 8c ff ff ff       	call   c001d76d <Thr::getDriverBaseFromAddress(unsigned long)>
c001d7e1:	5a                   	pop    edx
c001d7e2:	31 d2                	xor    edx,edx
c001d7e4:	85 c0                	test   eax,eax
c001d7e6:	74 04                	je     c001d7ec <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d7e8:	89 da                	mov    edx,ebx
c001d7ea:	29 c2                	sub    edx,eax
c001d7ec:	89 d0                	mov    eax,edx
c001d7ee:	5b                   	pop    ebx
c001d7ef:	c3                   	ret    

c001d7f0 <Thr::loadDLL(char const*, bool)>:
c001d7f0:	55                   	push   ebp
c001d7f1:	57                   	push   edi
c001d7f2:	56                   	push   esi
c001d7f3:	53                   	push   ebx
c001d7f4:	81 ec 34 01 00 00    	sub    esp,0x134
c001d7fa:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d801:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d808:	56                   	push   esi
c001d809:	68 b4 c3 02 c0       	push   0xc002c3b4
c001d80e:	e8 ae 57 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001d813:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d81a:	e8 c3 20 ff ff       	call   c000f8e2 <malloc>
c001d81f:	83 c4 0c             	add    esp,0xc
c001d822:	89 c3                	mov    ebx,eax
c001d824:	ff 35 f8 1b 03 c0    	push   DWORD PTR ds:0xc0031bf8
c001d82a:	56                   	push   esi
c001d82b:	50                   	push   eax
c001d82c:	e8 e9 5c ff ff       	call   c001351a <File::File(char const*, Process*)>
c001d831:	83 c4 10             	add    esp,0x10
c001d834:	85 db                	test   ebx,ebx
c001d836:	75 3c                	jne    c001d874 <Thr::loadDLL(char const*, bool)+0x84>
c001d838:	89 e8                	mov    eax,ebp
c001d83a:	84 c0                	test   al,al
c001d83c:	0f 84 d5 01 00 00    	je     c001da17 <Thr::loadDLL(char const*, bool)+0x227>
c001d842:	57                   	push   edi
c001d843:	57                   	push   edi
c001d844:	68 c5 c3 02 c0       	push   0xc002c3c5
c001d849:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d84d:	57                   	push   edi
c001d84e:	e8 e1 2f fe ff       	call   c0000834 <strcpy>
c001d853:	58                   	pop    eax
c001d854:	5a                   	pop    edx
c001d855:	56                   	push   esi
c001d856:	57                   	push   edi
c001d857:	e8 18 31 fe ff       	call   c0000974 <strcat>
c001d85c:	59                   	pop    ecx
c001d85d:	58                   	pop    eax
c001d85e:	68 d8 c3 02 c0       	push   0xc002c3d8
c001d863:	57                   	push   edi
c001d864:	e8 0b 31 fe ff       	call   c0000974 <strcat>
c001d869:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d86c:	e8 02 ce ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001d871:	83 c4 10             	add    esp,0x10
c001d874:	51                   	push   ecx
c001d875:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d879:	50                   	push   eax
c001d87a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d87e:	50                   	push   eax
c001d87f:	53                   	push   ebx
c001d880:	e8 a5 5f ff ff       	call   c001382a <File::stat(unsigned long long*, bool*)>
c001d885:	83 c4 10             	add    esp,0x10
c001d888:	85 db                	test   ebx,ebx
c001d88a:	74 0c                	je     c001d898 <Thr::loadDLL(char const*, bool)+0xa8>
c001d88c:	83 ec 0c             	sub    esp,0xc
c001d88f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d891:	53                   	push   ebx
c001d892:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d895:	83 c4 10             	add    esp,0x10
c001d898:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d89d:	75 0a                	jne    c001d8a9 <Thr::loadDLL(char const*, bool)+0xb9>
c001d89f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d8a3:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d8a7:	75 3c                	jne    c001d8e5 <Thr::loadDLL(char const*, bool)+0xf5>
c001d8a9:	89 e8                	mov    eax,ebp
c001d8ab:	84 c0                	test   al,al
c001d8ad:	0f 84 4c 01 00 00    	je     c001d9ff <Thr::loadDLL(char const*, bool)+0x20f>
c001d8b3:	51                   	push   ecx
c001d8b4:	51                   	push   ecx
c001d8b5:	68 c5 c3 02 c0       	push   0xc002c3c5
c001d8ba:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d8be:	53                   	push   ebx
c001d8bf:	e8 70 2f fe ff       	call   c0000834 <strcpy>
c001d8c4:	5f                   	pop    edi
c001d8c5:	58                   	pop    eax
c001d8c6:	56                   	push   esi
c001d8c7:	53                   	push   ebx
c001d8c8:	e8 a7 30 fe ff       	call   c0000974 <strcat>
c001d8cd:	58                   	pop    eax
c001d8ce:	5a                   	pop    edx
c001d8cf:	68 d8 c3 02 c0       	push   0xc002c3d8
c001d8d4:	53                   	push   ebx
c001d8d5:	e8 9a 30 fe ff       	call   c0000974 <strcat>
c001d8da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8dd:	e8 91 cd ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001d8e2:	83 c4 10             	add    esp,0x10
c001d8e5:	e8 b2 45 ff ff       	call   c0011e9c <Virt::getAKernelVAS()>
c001d8ea:	51                   	push   ecx
c001d8eb:	6a 03                	push   0x3
c001d8ed:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d8f1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d8f5:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d8fb:	83 d3 00             	adc    ebx,0x0
c001d8fe:	89 ca                	mov    edx,ecx
c001d900:	89 d1                	mov    ecx,edx
c001d902:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d906:	51                   	push   ecx
c001d907:	50                   	push   eax
c001d908:	e8 cb 4b ff ff       	call   c00124d8 <VAS::allocatePages(int, int)>
c001d90d:	5f                   	pop    edi
c001d90e:	89 c3                	mov    ebx,eax
c001d910:	58                   	pop    eax
c001d911:	53                   	push   ebx
c001d912:	68 da c3 02 c0       	push   0xc002c3da
c001d917:	e8 a5 56 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001d91c:	89 34 24             	mov    DWORD PTR [esp],esi
c001d91f:	e8 70 2e fe ff       	call   c0000794 <strlen>
c001d924:	8b 3d 00 14 03 c0    	mov    edi,DWORD PTR ds:0xc0031400
c001d92a:	40                   	inc    eax
c001d92b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d92e:	e8 af 1f ff ff       	call   c000f8e2 <malloc>
c001d933:	89 04 bd 20 18 03 c0 	mov    DWORD PTR [edi*4-0x3ffce7e0],eax
c001d93a:	58                   	pop    eax
c001d93b:	a1 00 14 03 c0       	mov    eax,ds:0xc0031400
c001d940:	5a                   	pop    edx
c001d941:	56                   	push   esi
c001d942:	ff 34 85 20 18 03 c0 	push   DWORD PTR [eax*4-0x3ffce7e0]
c001d949:	e8 e6 2e fe ff       	call   c0000834 <strcpy>
c001d94e:	a1 00 14 03 c0       	mov    eax,ds:0xc0031400
c001d953:	8d 50 01             	lea    edx,[eax+0x1]
c001d956:	89 1c 85 20 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce9e0],ebx
c001d95d:	89 15 00 14 03 c0    	mov    DWORD PTR ds:0xc0031400,edx
c001d963:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d967:	83 c4 0c             	add    esp,0xc
c001d96a:	89 14 85 20 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffcebe0],edx
c001d971:	6a 01                	push   0x1
c001d973:	53                   	push   ebx
c001d974:	56                   	push   esi
c001d975:	e8 d7 f6 ff ff       	call   c001d051 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d97a:	83 c4 10             	add    esp,0x10
c001d97d:	89 c7                	mov    edi,eax
c001d97f:	84 c0                	test   al,al
c001d981:	0f 85 8c 00 00 00    	jne    c001da13 <Thr::loadDLL(char const*, bool)+0x223>
c001d987:	89 e8                	mov    eax,ebp
c001d989:	84 c0                	test   al,al
c001d98b:	74 76                	je     c001da03 <Thr::loadDLL(char const*, bool)+0x213>
c001d98d:	83 ec 0c             	sub    esp,0xc
c001d990:	68 e7 c3 02 c0       	push   0xc002c3e7
c001d995:	e8 d9 cc ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001d99a:	83 c4 10             	add    esp,0x10
c001d99d:	eb 64                	jmp    c001da03 <Thr::loadDLL(char const*, bool)+0x213>
c001d99f:	e8 f8 44 ff ff       	call   c0011e9c <Virt::getAKernelVAS()>
c001d9a4:	89 f5                	mov    ebp,esi
c001d9a6:	c1 e5 0c             	shl    ebp,0xc
c001d9a9:	52                   	push   edx
c001d9aa:	01 dd                	add    ebp,ebx
c001d9ac:	52                   	push   edx
c001d9ad:	55                   	push   ebp
c001d9ae:	50                   	push   eax
c001d9af:	e8 9e 46 ff ff       	call   c0012052 <VAS::getPageTableEntry(unsigned long)>
c001d9b4:	83 c4 10             	add    esp,0x10
c001d9b7:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d9ba:	75 0c                	jne    c001d9c8 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d9bc:	83 ec 0c             	sub    esp,0xc
c001d9bf:	55                   	push   ebp
c001d9c0:	e8 35 25 ff ff       	call   c000fefa <Phys::freePage(unsigned long)>
c001d9c5:	83 c4 10             	add    esp,0x10
c001d9c8:	46                   	inc    esi
c001d9c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9d1:	05 ff 0f 00 00       	add    eax,0xfff
c001d9d6:	83 d2 00             	adc    edx,0x0
c001d9d9:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d9dd:	c1 ea 0c             	shr    edx,0xc
c001d9e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d9e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d9e8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d9ec:	ba 00 00 00 00       	mov    edx,0x0
c001d9f1:	89 d0                	mov    eax,edx
c001d9f3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d9f7:	72 a6                	jb     c001d99f <Thr::loadDLL(char const*, bool)+0x1af>
c001d9f9:	89 f8                	mov    eax,edi
c001d9fb:	84 c0                	test   al,al
c001d9fd:	75 18                	jne    c001da17 <Thr::loadDLL(char const*, bool)+0x227>
c001d9ff:	31 db                	xor    ebx,ebx
c001da01:	eb 14                	jmp    c001da17 <Thr::loadDLL(char const*, bool)+0x227>
c001da03:	83 ec 0c             	sub    esp,0xc
c001da06:	68 06 c4 02 c0       	push   0xc002c406
c001da0b:	e8 63 cc ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001da10:	83 c4 10             	add    esp,0x10
c001da13:	31 f6                	xor    esi,esi
c001da15:	eb b2                	jmp    c001d9c9 <Thr::loadDLL(char const*, bool)+0x1d9>
c001da17:	81 c4 2c 01 00 00    	add    esp,0x12c
c001da1d:	89 d8                	mov    eax,ebx
c001da1f:	5b                   	pop    ebx
c001da20:	5e                   	pop    esi
c001da21:	5f                   	pop    edi
c001da22:	5d                   	pop    ebp
c001da23:	c3                   	ret    

c001da24 <Thr::executeDLL(unsigned long, void*)>:
c001da24:	56                   	push   esi
c001da25:	53                   	push   ebx
c001da26:	52                   	push   edx
c001da27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da2b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da2f:	85 db                	test   ebx,ebx
c001da31:	75 10                	jne    c001da43 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001da33:	83 ec 0c             	sub    esp,0xc
c001da36:	68 22 c4 02 c0       	push   0xc002c422
c001da3b:	e8 33 cc ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001da40:	83 c4 10             	add    esp,0x10
c001da43:	50                   	push   eax
c001da44:	50                   	push   eax
c001da45:	53                   	push   ebx
c001da46:	68 4c c4 02 c0       	push   0xc002c44c
c001da4b:	e8 71 55 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001da50:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da54:	89 d8                	mov    eax,ebx
c001da56:	83 c4 14             	add    esp,0x14
c001da59:	5b                   	pop    ebx
c001da5a:	5e                   	pop    esi
c001da5b:	ff e0                	jmp    eax
c001da5d:	90                   	nop

c001da5e <changeTSS>:
c001da5e:	83 ec 14             	sub    esp,0x14
c001da61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da66:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da69:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da6e:	c1 e2 15             	shl    edx,0x15
c001da71:	29 d0                	sub    eax,edx
c001da73:	50                   	push   eax
c001da74:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c001da79:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da7f:	05 7c 11 00 00       	add    eax,0x117c
c001da84:	50                   	push   eax
c001da85:	e8 b6 3a ff ff       	call   c0011540 <TSS::setESP(unsigned long)>
c001da8a:	83 c4 1c             	add    esp,0x1c
c001da8d:	c3                   	ret    

c001da8e <Process::addArgs(char**)>:
c001da8e:	57                   	push   edi
c001da8f:	56                   	push   esi
c001da90:	53                   	push   ebx
c001da91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da95:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da99:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001daa3:	85 ff                	test   edi,edi
c001daa5:	74 3d                	je     c001dae4 <Process::addArgs(char**)+0x56>
c001daa7:	8b 07                	mov    eax,DWORD PTR [edi]
c001daa9:	85 c0                	test   eax,eax
c001daab:	74 37                	je     c001dae4 <Process::addArgs(char**)+0x56>
c001daad:	31 db                	xor    ebx,ebx
c001daaf:	83 ec 0c             	sub    esp,0xc
c001dab2:	50                   	push   eax
c001dab3:	e8 dc 2c fe ff       	call   c0000794 <strlen>
c001dab8:	40                   	inc    eax
c001dab9:	89 04 24             	mov    DWORD PTR [esp],eax
c001dabc:	e8 21 1e ff ff       	call   c000f8e2 <malloc>
c001dac1:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001dac8:	5a                   	pop    edx
c001dac9:	59                   	pop    ecx
c001daca:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001dacd:	43                   	inc    ebx
c001dace:	50                   	push   eax
c001dacf:	e8 60 2d fe ff       	call   c0000834 <strcpy>
c001dad4:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001dada:	83 c4 10             	add    esp,0x10
c001dadd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001dae0:	85 c0                	test   eax,eax
c001dae2:	75 cb                	jne    c001daaf <Process::addArgs(char**)+0x21>
c001dae4:	5b                   	pop    ebx
c001dae5:	5e                   	pop    esi
c001dae6:	5f                   	pop    edi
c001dae7:	c3                   	ret    

c001dae8 <Process::Process(char const*, Process*, char**)>:
c001dae8:	56                   	push   esi
c001dae9:	53                   	push   ebx
c001daea:	83 ec 14             	sub    esp,0x14
c001daed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf1:	05 0c 02 00 00       	add    eax,0x20c
c001daf6:	bb 07 00 00 00       	mov    ebx,0x7
c001dafb:	89 c6                	mov    esi,eax
c001dafd:	85 db                	test   ebx,ebx
c001daff:	78 12                	js     c001db13 <Process::Process(char const*, Process*, char**)+0x2b>
c001db01:	83 ec 0c             	sub    esp,0xc
c001db04:	56                   	push   esi
c001db05:	e8 28 b2 00 00       	call   c0028d32 <ThreadControlBlock::ThreadControlBlock()>
c001db0a:	83 c4 10             	add    esp,0x10
c001db0d:	83 c6 63             	add    esi,0x63
c001db10:	4b                   	dec    ebx
c001db11:	eb ea                	jmp    c001dafd <Process::Process(char const*, Process*, char**)+0x15>
c001db13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db17:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db1e:	83 ec 0c             	sub    esp,0xc
c001db21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db25:	e8 9a c9 ff ff       	call   c001a4c4 <Krnl::newProcessEnv(Process*)>
c001db2a:	83 c4 10             	add    esp,0x10
c001db2d:	89 c2                	mov    edx,eax
c001db2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db33:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db3d:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db46:	a1 10 dc 02 c0       	mov    eax,ds:0xc002dc10
c001db4b:	8d 50 01             	lea    edx,[eax+0x1]
c001db4e:	89 15 10 dc 02 c0    	mov    DWORD PTR ds:0xc002dc10,edx
c001db54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db58:	89 02                	mov    DWORD PTR [edx],eax
c001db5a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001db62:	83 ec 0c             	sub    esp,0xc
c001db65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db69:	e8 74 1d ff ff       	call   c000f8e2 <malloc>
c001db6e:	83 c4 10             	add    esp,0x10
c001db71:	89 c3                	mov    ebx,eax
c001db73:	83 ec 08             	sub    esp,0x8
c001db76:	6a 00                	push   0x0
c001db78:	53                   	push   ebx
c001db79:	e8 02 4d ff ff       	call   c0012880 <VAS::VAS(bool)>
c001db7e:	83 c4 10             	add    esp,0x10
c001db81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db85:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db8f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dba1:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbab:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbb1:	85 c0                	test   eax,eax
c001dbb3:	74 42                	je     c001dbf7 <Process::Process(char const*, Process*, char**)+0x10f>
c001dbb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbbf:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dbc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbc9:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dbcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbd3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbd9:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dbdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe3:	05 0c 01 00 00       	add    eax,0x10c
c001dbe8:	83 ec 08             	sub    esp,0x8
c001dbeb:	52                   	push   edx
c001dbec:	50                   	push   eax
c001dbed:	e8 42 2c fe ff       	call   c0000834 <strcpy>
c001dbf2:	83 c4 10             	add    esp,0x10
c001dbf5:	eb 63                	jmp    c001dc5a <Process::Process(char const*, Process*, char**)+0x172>
c001dbf7:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dbff:	83 ec 0c             	sub    esp,0xc
c001dc02:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dc06:	e8 d7 1c ff ff       	call   c000f8e2 <malloc>
c001dc0b:	83 c4 10             	add    esp,0x10
c001dc0e:	89 c3                	mov    ebx,eax
c001dc10:	83 ec 08             	sub    esp,0x8
c001dc13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc17:	53                   	push   ebx
c001dc18:	e8 21 36 ff ff       	call   c001123e <VgaText::VgaText(char const*)>
c001dc1d:	83 c4 10             	add    esp,0x10
c001dc20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc24:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc2e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc34:	83 ec 0c             	sub    esp,0xc
c001dc37:	50                   	push   eax
c001dc38:	e8 f4 29 ff ff       	call   c0010631 <addToTerminalCycle(VgaText*)>
c001dc3d:	83 c4 10             	add    esp,0x10
c001dc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc44:	05 0c 01 00 00       	add    eax,0x10c
c001dc49:	83 ec 08             	sub    esp,0x8
c001dc4c:	68 6b c4 02 c0       	push   0xc002c46b
c001dc51:	50                   	push   eax
c001dc52:	e8 dd 2b fe ff       	call   c0000834 <strcpy>
c001dc57:	83 c4 10             	add    esp,0x10
c001dc5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc5e:	83 c0 0c             	add    eax,0xc
c001dc61:	83 ec 08             	sub    esp,0x8
c001dc64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc68:	50                   	push   eax
c001dc69:	e8 c6 2b fe ff       	call   c0000834 <strcpy>
c001dc6e:	83 c4 10             	add    esp,0x10
c001dc71:	83 ec 08             	sub    esp,0x8
c001dc74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc7c:	e8 0d fe ff ff       	call   c001da8e <Process::addArgs(char**)>
c001dc81:	83 c4 10             	add    esp,0x10
c001dc84:	83 ec 08             	sub    esp,0x8
c001dc87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc8f:	e8 87 ee ff ff       	call   c001cb1b <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc94:	83 c4 10             	add    esp,0x10
c001dc97:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc9b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc9f:	83 f0 01             	xor    eax,0x1
c001dca2:	88 c2                	mov    dl,al
c001dca4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dca8:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dcae:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dcb3:	83 ec 08             	sub    esp,0x8
c001dcb6:	50                   	push   eax
c001dcb7:	68 68 c5 02 c0       	push   0xc002c568
c001dcbc:	e8 00 53 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001dcc1:	83 c4 10             	add    esp,0x10
c001dcc4:	90                   	nop
c001dcc5:	83 c4 14             	add    esp,0x14
c001dcc8:	5b                   	pop    ebx
c001dcc9:	5e                   	pop    esi
c001dcca:	c3                   	ret    
c001dccb:	90                   	nop

c001dccc <Process::Process(bool, char const*, Process*, char**)>:
c001dccc:	56                   	push   esi
c001dccd:	53                   	push   ebx
c001dcce:	83 ec 24             	sub    esp,0x24
c001dcd1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dcd5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dcd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcdd:	05 0c 02 00 00       	add    eax,0x20c
c001dce2:	bb 07 00 00 00       	mov    ebx,0x7
c001dce7:	89 c6                	mov    esi,eax
c001dce9:	85 db                	test   ebx,ebx
c001dceb:	78 12                	js     c001dcff <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dced:	83 ec 0c             	sub    esp,0xc
c001dcf0:	56                   	push   esi
c001dcf1:	e8 3c b0 00 00       	call   c0028d32 <ThreadControlBlock::ThreadControlBlock()>
c001dcf6:	83 c4 10             	add    esp,0x10
c001dcf9:	83 c6 63             	add    esi,0x63
c001dcfc:	4b                   	dec    ebx
c001dcfd:	eb ea                	jmp    c001dce9 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dcff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd03:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dd0a:	83 ec 0c             	sub    esp,0xc
c001dd0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd11:	e8 ae c7 ff ff       	call   c001a4c4 <Krnl::newProcessEnv(Process*)>
c001dd16:	83 c4 10             	add    esp,0x10
c001dd19:	89 c2                	mov    edx,eax
c001dd1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd1f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dd25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd29:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dd32:	a1 10 dc 02 c0       	mov    eax,ds:0xc002dc10
c001dd37:	8d 50 01             	lea    edx,[eax+0x1]
c001dd3a:	89 15 10 dc 02 c0    	mov    DWORD PTR ds:0xc002dc10,edx
c001dd40:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd44:	89 02                	mov    DWORD PTR [edx],eax
c001dd46:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dd4e:	83 ec 0c             	sub    esp,0xc
c001dd51:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd55:	e8 88 1b ff ff       	call   c000f8e2 <malloc>
c001dd5a:	83 c4 10             	add    esp,0x10
c001dd5d:	89 c3                	mov    ebx,eax
c001dd5f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd64:	83 ec 08             	sub    esp,0x8
c001dd67:	50                   	push   eax
c001dd68:	53                   	push   ebx
c001dd69:	e8 12 4b ff ff       	call   c0012880 <VAS::VAS(bool)>
c001dd6e:	83 c4 10             	add    esp,0x10
c001dd71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd75:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd7f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd8d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd91:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd9b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dda1:	85 c0                	test   eax,eax
c001dda3:	74 42                	je     c001dde7 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dda5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddaf:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ddb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb9:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001ddbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddc3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddc9:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ddcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd3:	05 0c 01 00 00       	add    eax,0x10c
c001ddd8:	83 ec 08             	sub    esp,0x8
c001dddb:	52                   	push   edx
c001dddc:	50                   	push   eax
c001dddd:	e8 52 2a fe ff       	call   c0000834 <strcpy>
c001dde2:	83 c4 10             	add    esp,0x10
c001dde5:	eb 63                	jmp    c001de4a <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dde7:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001ddef:	83 ec 0c             	sub    esp,0xc
c001ddf2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ddf6:	e8 e7 1a ff ff       	call   c000f8e2 <malloc>
c001ddfb:	83 c4 10             	add    esp,0x10
c001ddfe:	89 c3                	mov    ebx,eax
c001de00:	83 ec 08             	sub    esp,0x8
c001de03:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de07:	53                   	push   ebx
c001de08:	e8 31 34 ff ff       	call   c001123e <VgaText::VgaText(char const*)>
c001de0d:	83 c4 10             	add    esp,0x10
c001de10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de14:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001de1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de1e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001de24:	83 ec 0c             	sub    esp,0xc
c001de27:	50                   	push   eax
c001de28:	e8 04 28 ff ff       	call   c0010631 <addToTerminalCycle(VgaText*)>
c001de2d:	83 c4 10             	add    esp,0x10
c001de30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de34:	05 0c 01 00 00       	add    eax,0x10c
c001de39:	83 ec 08             	sub    esp,0x8
c001de3c:	68 6b c4 02 c0       	push   0xc002c46b
c001de41:	50                   	push   eax
c001de42:	e8 ed 29 fe ff       	call   c0000834 <strcpy>
c001de47:	83 c4 10             	add    esp,0x10
c001de4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de4e:	83 c0 0c             	add    eax,0xc
c001de51:	83 ec 08             	sub    esp,0x8
c001de54:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de58:	50                   	push   eax
c001de59:	e8 d6 29 fe ff       	call   c0000834 <strcpy>
c001de5e:	83 c4 10             	add    esp,0x10
c001de61:	83 ec 08             	sub    esp,0x8
c001de64:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de6c:	e8 1d fc ff ff       	call   c001da8e <Process::addArgs(char**)>
c001de71:	83 c4 10             	add    esp,0x10
c001de74:	90                   	nop
c001de75:	83 c4 24             	add    esp,0x24
c001de78:	5b                   	pop    ebx
c001de79:	5e                   	pop    esi
c001de7a:	c3                   	ret    

c001de7b <disableIRQs()>:
c001de7b:	fa                   	cli    
c001de7c:	ff 05 d0 1b 03 c0    	inc    DWORD PTR ds:0xc0031bd0
c001de82:	c3                   	ret    

c001de83 <getIRQNestingLevel()>:
c001de83:	a1 d0 1b 03 c0       	mov    eax,ds:0xc0031bd0
c001de88:	c3                   	ret    

c001de89 <enableIRQs()>:
c001de89:	a1 d0 1b 03 c0       	mov    eax,ds:0xc0031bd0
c001de8e:	48                   	dec    eax
c001de8f:	a3 d0 1b 03 c0       	mov    ds:0xc0031bd0,eax
c001de94:	75 01                	jne    c001de97 <enableIRQs()+0xe>
c001de96:	fb                   	sti    
c001de97:	c3                   	ret    

c001de98 <lockScheduler()>:
c001de98:	eb e1                	jmp    c001de7b <disableIRQs()>

c001de9a <unlockScheduler()>:
c001de9a:	eb ed                	jmp    c001de89 <enableIRQs()>

c001de9c <userModeEntryPoint(void*)>:
c001de9c:	83 ec 0c             	sub    esp,0xc
c001de9f:	e8 f6 ff ff ff       	call   c001de9a <unlockScheduler()>
c001dea4:	fb                   	sti    
c001dea5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001deaa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dead:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001deb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001deb7:	83 c4 0c             	add    esp,0xc
c001deba:	e9 6b 24 fe ff       	jmp    c000032a <goToUsermode>

c001debf <lockStuff()>:
c001debf:	e8 b7 ff ff ff       	call   c001de7b <disableIRQs()>
c001dec4:	ff 05 cc 1b 03 c0    	inc    DWORD PTR ds:0xc0031bcc
c001deca:	c3                   	ret    

c001decb <taskStartupFunction>:
c001decb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ded0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001ded3:	c3                   	ret    

c001ded4 <updateTimeUsed()>:
c001ded4:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c001ded9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dedf:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dee6:	74 50                	je     c001df38 <updateTimeUsed()+0x64>
c001dee8:	57                   	push   edi
c001dee9:	56                   	push   esi
c001deea:	53                   	push   ebx
c001deeb:	0f 31                	rdtsc  
c001deed:	89 c1                	mov    ecx,eax
c001deef:	a3 10 1c 03 c0       	mov    ds:0xc0031c10,eax
c001def4:	2b 0d 00 1c 03 c0    	sub    ecx,DWORD PTR ds:0xc0031c00
c001defa:	89 d3                	mov    ebx,edx
c001defc:	89 0d 08 1c 03 c0    	mov    DWORD PTR ds:0xc0031c08,ecx
c001df02:	1b 1d 04 1c 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031c04
c001df08:	a3 00 1c 03 c0       	mov    ds:0xc0031c00,eax
c001df0d:	89 1d 0c 1c 03 c0    	mov    DWORD PTR ds:0xc0031c0c,ebx
c001df13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df18:	89 15 14 1c 03 c0    	mov    DWORD PTR ds:0xc0031c14,edx
c001df1e:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001df21:	89 15 04 1c 03 c0    	mov    DWORD PTR ds:0xc0031c04,edx
c001df27:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001df2a:	01 f1                	add    ecx,esi
c001df2c:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001df2f:	11 fb                	adc    ebx,edi
c001df31:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001df34:	5b                   	pop    ebx
c001df35:	5e                   	pop    esi
c001df36:	5f                   	pop    edi
c001df37:	c3                   	ret    
c001df38:	c3                   	ret    

c001df39 <switchToThread(ThreadControlBlock*)>:
c001df39:	53                   	push   ebx
c001df3a:	83 ec 08             	sub    esp,0x8
c001df3d:	a1 cc 1b 03 c0       	mov    eax,ds:0xc0031bcc
c001df42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df46:	85 c0                	test   eax,eax
c001df48:	75 30                	jne    c001df7a <switchToThread(ThreadControlBlock*)+0x41>
c001df4a:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001df4d:	3c ff                	cmp    al,0xff
c001df4f:	74 25                	je     c001df76 <switchToThread(ThreadControlBlock*)+0x3d>
c001df51:	0f b6 d0             	movzx  edx,al
c001df54:	b8 84 03 00 00       	mov    eax,0x384
c001df59:	29 d0                	sub    eax,edx
c001df5b:	c1 e0 10             	shl    eax,0x10
c001df5e:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001df61:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001df64:	e8 6b ff ff ff       	call   c001ded4 <updateTimeUsed()>
c001df69:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001df6d:	83 c4 08             	add    esp,0x8
c001df70:	5b                   	pop    ebx
c001df71:	e9 ec 23 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df76:	31 c0                	xor    eax,eax
c001df78:	eb e7                	jmp    c001df61 <switchToThread(ThreadControlBlock*)+0x28>
c001df7a:	c7 05 c8 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031bc8,0x1
c001df84:	83 c4 08             	add    esp,0x8
c001df87:	5b                   	pop    ebx
c001df88:	c3                   	ret    
c001df89:	90                   	nop

c001df8a <Semaphore::Semaphore(int)>:
c001df8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df92:	89 10                	mov    DWORD PTR [eax],edx
c001df94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df98:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfa3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dfaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dfb5:	90                   	nop
c001dfb6:	c3                   	ret    
c001dfb7:	90                   	nop

c001dfb8 <Mutex::Mutex()>:
c001dfb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfbc:	6a 01                	push   0x1
c001dfbe:	50                   	push   eax
c001dfbf:	e8 c6 ff ff ff       	call   c001df8a <Semaphore::Semaphore(int)>
c001dfc4:	83 c4 08             	add    esp,0x8
c001dfc7:	90                   	nop
c001dfc8:	c3                   	ret    
c001dfc9:	90                   	nop

c001dfca <Process::createThread(void (*)(void*), void*, int)>:
c001dfca:	55                   	push   ebp
c001dfcb:	31 c9                	xor    ecx,ecx
c001dfcd:	57                   	push   edi
c001dfce:	56                   	push   esi
c001dfcf:	53                   	push   ebx
c001dfd0:	83 ec 1c             	sub    esp,0x1c
c001dfd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dfd7:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dfde:	89 f2                	mov    edx,esi
c001dfe0:	0f b7 c2             	movzx  eax,dx
c001dfe3:	83 e2 01             	and    edx,0x1
c001dfe6:	74 14                	je     c001dffc <Process::createThread(void (*)(void*), void*, int)+0x32>
c001dfe8:	d1 f8                	sar    eax,1
c001dfea:	41                   	inc    ecx
c001dfeb:	89 c2                	mov    edx,eax
c001dfed:	83 f9 10             	cmp    ecx,0x10
c001dff0:	75 ee                	jne    c001dfe0 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dff2:	83 c4 1c             	add    esp,0x1c
c001dff5:	31 c0                	xor    eax,eax
c001dff7:	5b                   	pop    ebx
c001dff8:	5e                   	pop    esi
c001dff9:	5f                   	pop    edi
c001dffa:	5d                   	pop    ebp
c001dffb:	c3                   	ret    
c001dffc:	83 ec 08             	sub    esp,0x8
c001dfff:	b8 01 00 00 00       	mov    eax,0x1
c001e004:	d3 e0                	shl    eax,cl
c001e006:	09 c6                	or     esi,eax
c001e008:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e00e:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e015:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001e018:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e01b:	01 ce                	add    esi,ecx
c001e01d:	89 f0                	mov    eax,esi
c001e01f:	c1 e0 05             	shl    eax,0x5
c001e022:	01 c6                	add    esi,eax
c001e024:	8d 04 33             	lea    eax,[ebx+esi*1]
c001e027:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001e02d:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e033:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e037:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e03d:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001e043:	89 ca                	mov    edx,ecx
c001e045:	f7 da                	neg    edx
c001e047:	c1 e2 15             	shl    edx,0x15
c001e04a:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001e050:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001e056:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e05a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e064:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e06a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e06e:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001e074:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e07e:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e088:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e08f:	50                   	push   eax
c001e090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e094:	68 ec 1b 03 c0       	push   0xc0031bec
c001e099:	e8 22 ab 00 00       	call   c0028bc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e09e:	83 c4 10             	add    esp,0x10
c001e0a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0a5:	83 c4 1c             	add    esp,0x1c
c001e0a8:	5b                   	pop    ebx
c001e0a9:	5e                   	pop    esi
c001e0aa:	5f                   	pop    edi
c001e0ab:	5d                   	pop    ebp
c001e0ac:	c3                   	ret    
c001e0ad:	90                   	nop

c001e0ae <Process::createUserThread()>:
c001e0ae:	83 ec 0c             	sub    esp,0xc
c001e0b1:	68 80 00 00 00       	push   0x80
c001e0b6:	6a 00                	push   0x0
c001e0b8:	68 9c de 01 c0       	push   0xc001de9c
c001e0bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0c1:	e8 04 ff ff ff       	call   c001dfca <Process::createThread(void (*)(void*), void*, int)>
c001e0c6:	83 c4 1c             	add    esp,0x1c
c001e0c9:	c3                   	ret    

c001e0ca <setupMultitasking(void (*)())>:
c001e0ca:	56                   	push   esi
c001e0cb:	53                   	push   ebx
c001e0cc:	53                   	push   ebx
c001e0cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e0d1:	eb 10                	jmp    c001e0e3 <setupMultitasking(void (*)())+0x19>
c001e0d3:	83 ec 0c             	sub    esp,0xc
c001e0d6:	68 ec 1b 03 c0       	push   0xc0031bec
c001e0db:	e8 32 aa 00 00       	call   c0028b12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0e0:	83 c4 10             	add    esp,0x10
c001e0e3:	83 ec 0c             	sub    esp,0xc
c001e0e6:	68 ec 1b 03 c0       	push   0xc0031bec
c001e0eb:	e8 06 aa 00 00       	call   c0028af6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0f0:	83 c4 10             	add    esp,0x10
c001e0f3:	84 c0                	test   al,al
c001e0f5:	74 dc                	je     c001e0d3 <setupMultitasking(void (*)())+0x9>
c001e0f7:	83 ec 0c             	sub    esp,0xc
c001e0fa:	68 3f 07 00 00       	push   0x73f
c001e0ff:	e8 de 17 ff ff       	call   c000f8e2 <malloc>
c001e104:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e10b:	89 c3                	mov    ebx,eax
c001e10d:	6a 00                	push   0x0
c001e10f:	68 6f c4 02 c0       	push   0xc002c46f
c001e114:	6a 01                	push   0x1
c001e116:	50                   	push   eax
c001e117:	e8 b0 fb ff ff       	call   c001dccc <Process::Process(bool, char const*, Process*, char**)>
c001e11c:	83 c4 18             	add    esp,0x18
c001e11f:	89 1d f8 1b 03 c0    	mov    DWORD PTR ds:0xc0031bf8,ebx
c001e125:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e12b:	68 90 c5 02 c0       	push   0xc002c590
c001e130:	e8 8c 4e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e135:	58                   	pop    eax
c001e136:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e13c:	e8 72 2c ff ff       	call   c0010db3 <setActiveTerminal(VgaText*)>
c001e141:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e149:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e14f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e152:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e15c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e162:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e168:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e172:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e17c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e186:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e18c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e192:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e19c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e1a2:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e1ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e1b2:	5a                   	pop    edx
c001e1b3:	59                   	pop    ecx
c001e1b4:	68 6b c4 02 c0       	push   0xc002c46b
c001e1b9:	50                   	push   eax
c001e1ba:	e8 75 26 fe ff       	call   c0000834 <strcpy>
c001e1bf:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e1c6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e1ca:	83 c4 14             	add    esp,0x14
c001e1cd:	5b                   	pop    ebx
c001e1ce:	5e                   	pop    esi
c001e1cf:	e9 80 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e1d4 <schedule()>:
c001e1d4:	a1 cc 1b 03 c0       	mov    eax,ds:0xc0031bcc
c001e1d9:	85 c0                	test   eax,eax
c001e1db:	74 0b                	je     c001e1e8 <schedule()+0x14>
c001e1dd:	c7 05 c8 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031bc8,0x1
c001e1e7:	c3                   	ret    
c001e1e8:	53                   	push   ebx
c001e1e9:	83 ec 14             	sub    esp,0x14
c001e1ec:	68 ec 1b 03 c0       	push   0xc0031bec
c001e1f1:	e8 00 a9 00 00       	call   c0028af6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1f6:	83 c4 10             	add    esp,0x10
c001e1f9:	84 c0                	test   al,al
c001e1fb:	75 38                	jne    c001e235 <schedule()+0x61>
c001e1fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e202:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e205:	4a                   	dec    edx
c001e206:	74 32                	je     c001e23a <schedule()+0x66>
c001e208:	83 ec 0c             	sub    esp,0xc
c001e20b:	68 ec 1b 03 c0       	push   0xc0031bec
c001e210:	e8 d9 a8 00 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e215:	c7 04 24 ec 1b 03 c0 	mov    DWORD PTR [esp],0xc0031bec
c001e21c:	89 c3                	mov    ebx,eax
c001e21e:	e8 ef a8 00 00       	call   c0028b12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e223:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e22a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e22d:	e8 07 fd ff ff       	call   c001df39 <switchToThread(ThreadControlBlock*)>
c001e232:	83 c4 10             	add    esp,0x10
c001e235:	83 c4 08             	add    esp,0x8
c001e238:	5b                   	pop    ebx
c001e239:	c3                   	ret    
c001e23a:	83 ec 08             	sub    esp,0x8
c001e23d:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e244:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e24a:	68 ec 1b 03 c0       	push   0xc0031bec
c001e24f:	e8 6c a9 00 00       	call   c0028bc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e254:	83 c4 10             	add    esp,0x10
c001e257:	eb af                	jmp    c001e208 <schedule()+0x34>

c001e259 <unlockStuff()>:
c001e259:	a1 cc 1b 03 c0       	mov    eax,ds:0xc0031bcc
c001e25e:	48                   	dec    eax
c001e25f:	a3 cc 1b 03 c0       	mov    ds:0xc0031bcc,eax
c001e264:	75 09                	jne    c001e26f <unlockStuff()+0x16>
c001e266:	a1 c8 1b 03 c0       	mov    eax,ds:0xc0031bc8
c001e26b:	85 c0                	test   eax,eax
c001e26d:	75 05                	jne    c001e274 <unlockStuff()+0x1b>
c001e26f:	e9 15 fc ff ff       	jmp    c001de89 <enableIRQs()>
c001e274:	83 ec 0c             	sub    esp,0xc
c001e277:	c7 05 c8 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031bc8,0x0
c001e281:	e8 4e ff ff ff       	call   c001e1d4 <schedule()>
c001e286:	83 c4 0c             	add    esp,0xc
c001e289:	e9 fb fb ff ff       	jmp    c001de89 <enableIRQs()>

c001e28e <Semaphore::tryAcquire()>:
c001e28e:	83 ec 0c             	sub    esp,0xc
c001e291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e295:	e8 25 fc ff ff       	call   c001debf <lockStuff()>
c001e29a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e29d:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e29f:	7c 0b                	jl     c001e2ac <Semaphore::tryAcquire()+0x1e>
c001e2a1:	e8 b3 ff ff ff       	call   c001e259 <unlockStuff()>
c001e2a6:	31 c0                	xor    eax,eax
c001e2a8:	83 c4 0c             	add    esp,0xc
c001e2ab:	c3                   	ret    
c001e2ac:	42                   	inc    edx
c001e2ad:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e2b0:	e8 a4 ff ff ff       	call   c001e259 <unlockStuff()>
c001e2b5:	b0 01                	mov    al,0x1
c001e2b7:	83 c4 0c             	add    esp,0xc
c001e2ba:	c3                   	ret    
c001e2bb:	90                   	nop

c001e2bc <Semaphore::assertLocked(char const*)>:
c001e2bc:	83 ec 0c             	sub    esp,0xc
c001e2bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2c7:	e8 f3 fb ff ff       	call   c001debf <lockStuff()>
c001e2cc:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e2ce:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e2d1:	7c 05                	jl     c001e2d8 <Semaphore::assertLocked(char const*)+0x1c>
c001e2d3:	83 c4 0c             	add    esp,0xc
c001e2d6:	eb 81                	jmp    c001e259 <unlockStuff()>
c001e2d8:	83 ec 0c             	sub    esp,0xc
c001e2db:	52                   	push   edx
c001e2dc:	e8 92 c3 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001e2e1:	83 c4 10             	add    esp,0x10
c001e2e4:	83 c4 0c             	add    esp,0xc
c001e2e7:	e9 6d ff ff ff       	jmp    c001e259 <unlockStuff()>

c001e2ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e2ec:	83 ec 0c             	sub    esp,0xc
c001e2ef:	e8 8f fb ff ff       	call   c001de83 <getIRQNestingLevel()>
c001e2f4:	83 ec 08             	sub    esp,0x8
c001e2f7:	50                   	push   eax
c001e2f8:	68 c4 c5 02 c0       	push   0xc002c5c4
c001e2fd:	e8 bf 4c ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e302:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e306:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e30b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e30e:	e8 c1 fe ff ff       	call   c001e1d4 <schedule()>
c001e313:	e8 82 fb ff ff       	call   c001de9a <unlockScheduler()>
c001e318:	e8 66 fb ff ff       	call   c001de83 <getIRQNestingLevel()>
c001e31d:	5a                   	pop    edx
c001e31e:	59                   	pop    ecx
c001e31f:	50                   	push   eax
c001e320:	68 f8 c5 02 c0       	push   0xc002c5f8
c001e325:	e8 97 4c ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e32a:	83 c4 1c             	add    esp,0x1c
c001e32d:	c3                   	ret    

c001e32e <blockTask(TaskState)>:
c001e32e:	83 ec 0c             	sub    esp,0xc
c001e331:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e335:	e8 5e fb ff ff       	call   c001de98 <lockScheduler()>
c001e33a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e33f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e342:	e8 8d fe ff ff       	call   c001e1d4 <schedule()>
c001e347:	83 c4 0c             	add    esp,0xc
c001e34a:	e9 4b fb ff ff       	jmp    c001de9a <unlockScheduler()>

c001e34f <waitTask(int, int*, int)>:
c001e34f:	83 ec 18             	sub    esp,0x18
c001e352:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e35b:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e35e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e362:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e367:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e36a:	6a 07                	push   0x7
c001e36c:	e8 bd ff ff ff       	call   c001e32e <blockTask(TaskState)>
c001e371:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e376:	83 c4 10             	add    esp,0x10
c001e379:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e37c:	85 d2                	test   edx,edx
c001e37e:	74 0a                	je     c001e38a <waitTask(int, int*, int)+0x3b>
c001e380:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e383:	89 02                	mov    DWORD PTR [edx],eax
c001e385:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e38a:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e38d:	83 c4 0c             	add    esp,0xc
c001e390:	c3                   	ret    

c001e391 <nanoSleepUntil(unsigned long long)>:
c001e391:	83 ec 0c             	sub    esp,0xc
c001e394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e39c:	3b 05 10 ed 02 c0    	cmp    eax,DWORD PTR ds:0xc002ed10
c001e3a2:	89 d1                	mov    ecx,edx
c001e3a4:	1b 0d 14 ed 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ed14
c001e3aa:	73 04                	jae    c001e3b0 <nanoSleepUntil(unsigned long long)+0x1f>
c001e3ac:	83 c4 0c             	add    esp,0xc
c001e3af:	c3                   	ret    
c001e3b0:	e8 0a fb ff ff       	call   c001debf <lockStuff()>
c001e3b5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3bb:	83 ec 08             	sub    esp,0x8
c001e3be:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e3c1:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e3c4:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e3ca:	68 e0 1b 03 c0       	push   0xc0031be0
c001e3cf:	e8 ec a7 00 00       	call   c0028bc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3d4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e3db:	e8 4e ff ff ff       	call   c001e32e <blockTask(TaskState)>
c001e3e0:	83 c4 1c             	add    esp,0x1c
c001e3e3:	e9 71 fe ff ff       	jmp    c001e259 <unlockStuff()>

c001e3e8 <nanoSleep(unsigned long long)>:
c001e3e8:	a1 10 ed 02 c0       	mov    eax,ds:0xc002ed10
c001e3ed:	8b 15 14 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed14
c001e3f3:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3f7:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3fb:	eb 94                	jmp    c001e391 <nanoSleepUntil(unsigned long long)>

c001e3fd <sleep(unsigned long long)>:
c001e3fd:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e405:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e40a:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e40e:	01 ca                	add    edx,ecx
c001e410:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e414:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e418:	eb ce                	jmp    c001e3e8 <nanoSleep(unsigned long long)>

c001e41a <Semaphore::acquire()>:
c001e41a:	83 ec 0c             	sub    esp,0xc
c001e41d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e421:	e8 99 fa ff ff       	call   c001debf <lockStuff()>
c001e426:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e429:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e42b:	7d 0c                	jge    c001e439 <Semaphore::acquire()+0x1f>
c001e42d:	42                   	inc    edx
c001e42e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e431:	83 c4 0c             	add    esp,0xc
c001e434:	e9 20 fe ff ff       	jmp    c001e259 <unlockStuff()>
c001e439:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e43f:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e446:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e449:	85 d2                	test   edx,edx
c001e44b:	74 2a                	je     c001e477 <Semaphore::acquire()+0x5d>
c001e44d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e450:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e456:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e459:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e45f:	83 ec 0c             	sub    esp,0xc
c001e462:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e465:	6a 05                	push   0x5
c001e467:	e8 c2 fe ff ff       	call   c001e32e <blockTask(TaskState)>
c001e46c:	83 c4 10             	add    esp,0x10
c001e46f:	83 c4 0c             	add    esp,0xc
c001e472:	e9 e2 fd ff ff       	jmp    c001e259 <unlockStuff()>
c001e477:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e47d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e480:	eb d7                	jmp    c001e459 <Semaphore::acquire()+0x3f>

c001e482 <taskReturned>:
c001e482:	83 ec 18             	sub    esp,0x18
c001e485:	68 2c c6 02 c0       	push   0xc002c62c
c001e48a:	e8 e4 c1 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001e48f:	83 c4 10             	add    esp,0x10
c001e492:	83 ec 0c             	sub    esp,0xc
c001e495:	6a 02                	push   0x2
c001e497:	e8 92 fe ff ff       	call   c001e32e <blockTask(TaskState)>
c001e49c:	e8 f7 f9 ff ff       	call   c001de98 <lockScheduler()>
c001e4a1:	e8 2e fd ff ff       	call   c001e1d4 <schedule()>
c001e4a6:	e8 ef f9 ff ff       	call   c001de9a <unlockScheduler()>
c001e4ab:	83 c4 10             	add    esp,0x10
c001e4ae:	eb e2                	jmp    c001e492 <taskReturned+0x10>

c001e4b0 <unblockTask(ThreadControlBlock*)>:
c001e4b0:	53                   	push   ebx
c001e4b1:	83 ec 08             	sub    esp,0x8
c001e4b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e4b8:	e8 db f9 ff ff       	call   c001de98 <lockScheduler()>
c001e4bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4c0:	85 c0                	test   eax,eax
c001e4c2:	74 5c                	je     c001e520 <unblockTask(ThreadControlBlock*)+0x70>
c001e4c4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4c7:	48                   	dec    eax
c001e4c8:	74 31                	je     c001e4fb <unblockTask(ThreadControlBlock*)+0x4b>
c001e4ca:	83 ec 0c             	sub    esp,0xc
c001e4cd:	68 ec 1b 03 c0       	push   0xc0031bec
c001e4d2:	e8 17 a6 00 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4d7:	83 c4 10             	add    esp,0x10
c001e4da:	85 c0                	test   eax,eax
c001e4dc:	75 17                	jne    c001e4f5 <unblockTask(ThreadControlBlock*)+0x45>
c001e4de:	eb 65                	jmp    c001e545 <unblockTask(ThreadControlBlock*)+0x95>
c001e4e0:	83 ec 08             	sub    esp,0x8
c001e4e3:	50                   	push   eax
c001e4e4:	68 ec 1b 03 c0       	push   0xc0031bec
c001e4e9:	e8 da a8 00 00       	call   c0028dc8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e4ee:	83 c4 10             	add    esp,0x10
c001e4f1:	85 c0                	test   eax,eax
c001e4f3:	74 50                	je     c001e545 <unblockTask(ThreadControlBlock*)+0x95>
c001e4f5:	39 c3                	cmp    ebx,eax
c001e4f7:	75 e7                	jne    c001e4e0 <unblockTask(ThreadControlBlock*)+0x30>
c001e4f9:	eb 1c                	jmp    c001e517 <unblockTask(ThreadControlBlock*)+0x67>
c001e4fb:	83 ec 0c             	sub    esp,0xc
c001e4fe:	68 1c c7 02 c0       	push   0xc002c71c
c001e503:	e8 b9 4a ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e508:	c7 04 24 a8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6a8
c001e50f:	e8 ad 4a ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e514:	83 c4 10             	add    esp,0x10
c001e517:	83 c4 08             	add    esp,0x8
c001e51a:	5b                   	pop    ebx
c001e51b:	e9 7a f9 ff ff       	jmp    c001de9a <unlockScheduler()>
c001e520:	83 ec 0c             	sub    esp,0xc
c001e523:	68 60 c6 02 c0       	push   0xc002c660
c001e528:	e8 94 4a ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e52d:	c7 04 24 a8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6a8
c001e534:	e8 88 4a ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e539:	83 c4 10             	add    esp,0x10
c001e53c:	83 c4 08             	add    esp,0x8
c001e53f:	5b                   	pop    ebx
c001e540:	e9 55 f9 ff ff       	jmp    c001de9a <unlockScheduler()>
c001e545:	83 ec 08             	sub    esp,0x8
c001e548:	53                   	push   ebx
c001e549:	68 ec 1b 03 c0       	push   0xc0031bec
c001e54e:	e8 6d a6 00 00       	call   c0028bc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e553:	83 c4 10             	add    esp,0x10
c001e556:	83 c4 08             	add    esp,0x8
c001e559:	5b                   	pop    ebx
c001e55a:	e9 3b f9 ff ff       	jmp    c001de9a <unlockScheduler()>

c001e55f <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e55f:	55                   	push   ebp
c001e560:	57                   	push   edi
c001e561:	56                   	push   esi
c001e562:	53                   	push   ebx
c001e563:	83 ec 1c             	sub    esp,0x1c
c001e566:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e56a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e56d:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e573:	85 ff                	test   edi,edi
c001e575:	7e 20                	jle    c001e597 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e577:	31 f6                	xor    esi,esi
c001e579:	83 ec 0c             	sub    esp,0xc
c001e57c:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e583:	46                   	inc    esi
c001e584:	e8 69 13 ff ff       	call   c000f8f2 <free>
c001e589:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e58c:	83 c4 10             	add    esp,0x10
c001e58f:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e595:	7f e2                	jg     c001e579 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e597:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e5a1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e5a6:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e5a9:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e5ac:	d3 c0                	rol    eax,cl
c001e5ae:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e5b5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5b8:	89 f7                	mov    edi,esi
c001e5ba:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e5c2:	0f 85 74 01 00 00    	jne    c001e73c <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e5c8:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e5ce:	85 ed                	test   ebp,ebp
c001e5d0:	74 1b                	je     c001e5ed <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e5d2:	83 ec 0c             	sub    esp,0xc
c001e5d5:	55                   	push   ebp
c001e5d6:	e8 05 be ff ff       	call   c001a3e0 <EnvVarContainer::~EnvVarContainer()>
c001e5db:	59                   	pop    ecx
c001e5dc:	5e                   	pop    esi
c001e5dd:	6a 0c                	push   0xc
c001e5df:	55                   	push   ebp
c001e5e0:	e8 fc 48 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c001e5e5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5e8:	83 c4 10             	add    esp,0x10
c001e5eb:	89 f7                	mov    edi,esi
c001e5ed:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5f3:	85 c0                	test   eax,eax
c001e5f5:	0f 84 aa 00 00 00    	je     c001e6a5 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5fb:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e5fe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e602:	31 c9                	xor    ecx,ecx
c001e604:	eb 10                	jmp    c001e616 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e606:	41                   	inc    ecx
c001e607:	83 f9 10             	cmp    ecx,0x10
c001e60a:	0f 84 95 00 00 00    	je     c001e6a5 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e610:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e616:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e61d:	d3 fa                	sar    edx,cl
c001e61f:	83 e2 01             	and    edx,0x1
c001e622:	74 e2                	je     c001e606 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e624:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e627:	01 ca                	add    edx,ecx
c001e629:	89 d5                	mov    ebp,edx
c001e62b:	c1 e5 05             	shl    ebp,0x5
c001e62e:	01 ea                	add    edx,ebp
c001e630:	01 d0                	add    eax,edx
c001e632:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e638:	83 fd 07             	cmp    ebp,0x7
c001e63b:	75 c9                	jne    c001e606 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e63d:	05 40 02 00 00       	add    eax,0x240
c001e642:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e645:	83 fd ff             	cmp    ebp,0xffffffff
c001e648:	0f 8c 08 01 00 00    	jl     c001e756 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e64e:	0f 84 b9 01 00 00    	je     c001e80d <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e654:	85 ed                	test   ebp,ebp
c001e656:	0f 84 a0 01 00 00    	je     c001e7fc <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e65c:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e65e:	75 a6                	jne    c001e606 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e660:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e666:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e66a:	01 d0                	add    eax,edx
c001e66c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e670:	83 ec 0c             	sub    esp,0xc
c001e673:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e679:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e67c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e682:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e689:	50                   	push   eax
c001e68a:	e8 21 fe ff ff       	call   c001e4b0 <unblockTask(ThreadControlBlock*)>
c001e68f:	83 c4 10             	add    esp,0x10
c001e692:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e695:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e699:	89 f7                	mov    edi,esi
c001e69b:	41                   	inc    ecx
c001e69c:	83 f9 10             	cmp    ecx,0x10
c001e69f:	0f 85 6b ff ff ff    	jne    c001e610 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e6a5:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e6ab:	85 c0                	test   eax,eax
c001e6ad:	74 5d                	je     c001e70c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6af:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e6b5:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e6bb:	74 4f                	je     c001e70c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6bd:	83 ec 0c             	sub    esp,0xc
c001e6c0:	68 ec 1b 03 c0       	push   0xc0031bec
c001e6c5:	e8 24 a4 00 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6ca:	c7 04 24 ec 1b 03 c0 	mov    DWORD PTR [esp],0xc0031bec
c001e6d1:	89 c7                	mov    edi,eax
c001e6d3:	e8 1e a4 00 00       	call   c0028af6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e6d8:	83 c4 10             	add    esp,0x10
c001e6db:	84 c0                	test   al,al
c001e6dd:	0f 84 e4 00 00 00    	je     c001e7c7 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e6e3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6e6:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e6ec:	85 d2                	test   edx,edx
c001e6ee:	74 0f                	je     c001e6ff <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e6f0:	83 ec 0c             	sub    esp,0xc
c001e6f3:	8b 02                	mov    eax,DWORD PTR [edx]
c001e6f5:	52                   	push   edx
c001e6f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e6f9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6fc:	83 c4 10             	add    esp,0x10
c001e6ff:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e709:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e70c:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e712:	85 db                	test   ebx,ebx
c001e714:	74 16                	je     c001e72c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e716:	83 ec 0c             	sub    esp,0xc
c001e719:	53                   	push   ebx
c001e71a:	e8 4d 3b ff ff       	call   c001226c <VAS::~VAS()>
c001e71f:	58                   	pop    eax
c001e720:	5a                   	pop    edx
c001e721:	6a 10                	push   0x10
c001e723:	53                   	push   ebx
c001e724:	e8 b8 47 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c001e729:	83 c4 10             	add    esp,0x10
c001e72c:	83 ec 0c             	sub    esp,0xc
c001e72f:	68 76 c4 02 c0       	push   0xc002c476
c001e734:	e8 88 48 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e739:	83 c4 10             	add    esp,0x10
c001e73c:	83 ec 08             	sub    esp,0x8
c001e73f:	68 3f 07 00 00       	push   0x73f
c001e744:	68 84 c4 02 c0       	push   0xc002c484
c001e749:	e8 73 48 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e74e:	83 c4 2c             	add    esp,0x2c
c001e751:	5b                   	pop    ebx
c001e752:	5e                   	pop    esi
c001e753:	5f                   	pop    edi
c001e754:	5d                   	pop    ebp
c001e755:	c3                   	ret    
c001e756:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e75a:	83 ec 0c             	sub    esp,0xc
c001e75d:	68 60 c7 02 c0       	push   0xc002c760
c001e762:	e8 0c bf ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001e767:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e76a:	83 c4 10             	add    esp,0x10
c001e76d:	89 f7                	mov    edi,esi
c001e76f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e773:	e9 8e fe ff ff       	jmp    c001e606 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e778:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e77e:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e784:	75 1c                	jne    c001e7a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e786:	83 ec 0c             	sub    esp,0xc
c001e789:	68 c8 c7 02 c0       	push   0xc002c7c8
c001e78e:	e8 2e 48 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e793:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e79a:	e8 8f fb ff ff       	call   c001e32e <blockTask(TaskState)>
c001e79f:	83 c4 10             	add    esp,0x10
c001e7a2:	83 ec 08             	sub    esp,0x8
c001e7a5:	56                   	push   esi
c001e7a6:	68 ec 1b 03 c0       	push   0xc0031bec
c001e7ab:	e8 10 a4 00 00       	call   c0028bc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7b0:	c7 04 24 ec 1b 03 c0 	mov    DWORD PTR [esp],0xc0031bec
c001e7b7:	e8 32 a3 00 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7bc:	83 c4 10             	add    esp,0x10
c001e7bf:	39 f8                	cmp    eax,edi
c001e7c1:	0f 84 1c ff ff ff    	je     c001e6e3 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e7c7:	83 ec 0c             	sub    esp,0xc
c001e7ca:	68 ec 1b 03 c0       	push   0xc0031bec
c001e7cf:	e8 1a a3 00 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7d4:	c7 04 24 ec 1b 03 c0 	mov    DWORD PTR [esp],0xc0031bec
c001e7db:	89 c6                	mov    esi,eax
c001e7dd:	e8 30 a3 00 00       	call   c0028b12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7e2:	83 c4 10             	add    esp,0x10
c001e7e5:	39 f3                	cmp    ebx,esi
c001e7e7:	74 b9                	je     c001e7a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7e9:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e7ec:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7ef:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e7f5:	75 ab                	jne    c001e7a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7f7:	e9 7c ff ff ff       	jmp    c001e778 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e7fc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e800:	83 ec 0c             	sub    esp,0xc
c001e803:	68 94 c7 02 c0       	push   0xc002c794
c001e808:	e9 55 ff ff ff       	jmp    c001e762 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e80d:	8b 36                	mov    esi,DWORD PTR [esi]
c001e80f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e813:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e816:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e819:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e81f:	01 d7                	add    edi,edx
c001e821:	89 f8                	mov    eax,edi
c001e823:	e9 44 fe ff ff       	jmp    c001e66c <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e828 <cleanerTaskFunction(void*)>:
c001e828:	53                   	push   ebx
c001e829:	83 ec 08             	sub    esp,0x8
c001e82c:	e8 69 f6 ff ff       	call   c001de9a <unlockScheduler()>
c001e831:	e8 62 f6 ff ff       	call   c001de98 <lockScheduler()>
c001e836:	80 3d b0 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031bb0,0x0
c001e83d:	0f 85 8e 00 00 00    	jne    c001e8d1 <cleanerTaskFunction(void*)+0xa9>
c001e843:	83 ec 0c             	sub    esp,0xc
c001e846:	6a 02                	push   0x2
c001e848:	e8 9f fa ff ff       	call   c001e2ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e84d:	83 c4 10             	add    esp,0x10
c001e850:	c6 05 b0 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031bb0,0x0
c001e857:	e8 63 f6 ff ff       	call   c001debf <lockStuff()>
c001e85c:	e8 37 f6 ff ff       	call   c001de98 <lockScheduler()>
c001e861:	83 ec 0c             	sub    esp,0xc
c001e864:	68 d4 1b 03 c0       	push   0xc0031bd4
c001e869:	e8 88 a2 00 00       	call   c0028af6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e86e:	83 c4 10             	add    esp,0x10
c001e871:	84 c0                	test   al,al
c001e873:	75 40                	jne    c001e8b5 <cleanerTaskFunction(void*)+0x8d>
c001e875:	83 ec 0c             	sub    esp,0xc
c001e878:	68 d4 1b 03 c0       	push   0xc0031bd4
c001e87d:	e8 6c a2 00 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e882:	c7 04 24 d4 1b 03 c0 	mov    DWORD PTR [esp],0xc0031bd4
c001e889:	89 c3                	mov    ebx,eax
c001e88b:	e8 82 a2 00 00       	call   c0028b12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e890:	c7 04 24 9a c4 02 c0 	mov    DWORD PTR [esp],0xc002c49a
c001e897:	e8 25 47 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e89c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e89f:	e8 bb fc ff ff       	call   c001e55f <cleanupTerminatedTask(ThreadControlBlock*)>
c001e8a4:	c7 04 24 b3 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4b3
c001e8ab:	e8 11 47 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e8b0:	83 c4 10             	add    esp,0x10
c001e8b3:	eb ac                	jmp    c001e861 <cleanerTaskFunction(void*)+0x39>
c001e8b5:	e8 e0 f5 ff ff       	call   c001de9a <unlockScheduler()>
c001e8ba:	e8 9a f9 ff ff       	call   c001e259 <unlockStuff()>
c001e8bf:	e8 d4 f5 ff ff       	call   c001de98 <lockScheduler()>
c001e8c4:	80 3d b0 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031bb0,0x0
c001e8cb:	0f 84 72 ff ff ff    	je     c001e843 <cleanerTaskFunction(void*)+0x1b>
c001e8d1:	e8 c4 f5 ff ff       	call   c001de9a <unlockScheduler()>
c001e8d6:	e9 75 ff ff ff       	jmp    c001e850 <cleanerTaskFunction(void*)+0x28>

c001e8db <terminateTask(int)>:
c001e8db:	83 ec 14             	sub    esp,0x14
c001e8de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e8e6:	83 c0 0c             	add    eax,0xc
c001e8e9:	50                   	push   eax
c001e8ea:	68 f0 c7 02 c0       	push   0xc002c7f0
c001e8ef:	e8 cd 46 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e8f4:	e8 c6 f5 ff ff       	call   c001debf <lockStuff()>
c001e8f9:	e8 9a f5 ff ff       	call   c001de98 <lockScheduler()>
c001e8fe:	c7 04 24 c6 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4c6
c001e905:	e8 b7 46 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e90a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e90e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e913:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e916:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e91b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e91e:	5a                   	pop    edx
c001e91f:	59                   	pop    ecx
c001e920:	50                   	push   eax
c001e921:	68 d4 1b 03 c0       	push   0xc0031bd4
c001e926:	e8 95 a2 00 00       	call   c0028bc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e92b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e930:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e937:	c7 04 24 e0 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4e0
c001e93e:	e8 7e 46 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e943:	83 c4 10             	add    esp,0x10
c001e946:	a1 ac 1b 03 c0       	mov    eax,ds:0xc0031bac
c001e94b:	85 c0                	test   eax,eax
c001e94d:	74 5a                	je     c001e9a9 <terminateTask(int)+0xce>
c001e94f:	83 ec 0c             	sub    esp,0xc
c001e952:	68 fa c4 02 c0       	push   0xc002c4fa
c001e957:	e8 65 46 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e95c:	58                   	pop    eax
c001e95d:	c6 05 b0 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031bb0,0x1
c001e964:	ff 35 ac 1b 03 c0    	push   DWORD PTR ds:0xc0031bac
c001e96a:	e8 41 fb ff ff       	call   c001e4b0 <unblockTask(ThreadControlBlock*)>
c001e96f:	c7 04 24 14 c5 02 c0 	mov    DWORD PTR [esp],0xc002c514
c001e976:	e8 46 46 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e97b:	83 c4 10             	add    esp,0x10
c001e97e:	e8 17 f5 ff ff       	call   c001de9a <unlockScheduler()>
c001e983:	e8 d1 f8 ff ff       	call   c001e259 <unlockStuff()>
c001e988:	83 ec 0c             	sub    esp,0xc
c001e98b:	68 4c c5 02 c0       	push   0xc002c54c
c001e990:	e8 2c 46 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e995:	83 c4 10             	add    esp,0x10
c001e998:	e8 fb f4 ff ff       	call   c001de98 <lockScheduler()>
c001e99d:	e8 32 f8 ff ff       	call   c001e1d4 <schedule()>
c001e9a2:	e8 f3 f4 ff ff       	call   c001de9a <unlockScheduler()>
c001e9a7:	eb ef                	jmp    c001e998 <terminateTask(int)+0xbd>
c001e9a9:	83 ec 0c             	sub    esp,0xc
c001e9ac:	68 2e c5 02 c0       	push   0xc002c52e
c001e9b1:	e8 0b 46 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001e9b6:	83 c4 10             	add    esp,0x10
c001e9b9:	eb c3                	jmp    c001e97e <terminateTask(int)+0xa3>

c001e9bb <Thr::terminateFromIRQ(int)>:
c001e9bb:	83 ec 18             	sub    esp,0x18
c001e9be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9c2:	e8 14 ff ff ff       	call   c001e8db <terminateTask(int)>
c001e9c7:	90                   	nop

c001e9c8 <Semaphore::release()>:
c001e9c8:	83 ec 0c             	sub    esp,0xc
c001e9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cf:	e8 eb f4 ff ff       	call   c001debf <lockStuff()>
c001e9d4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e9d7:	85 d2                	test   edx,edx
c001e9d9:	74 1a                	je     c001e9f5 <Semaphore::release()+0x2d>
c001e9db:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e9de:	83 ec 0c             	sub    esp,0xc
c001e9e1:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e9e4:	52                   	push   edx
c001e9e5:	e8 c6 fa ff ff       	call   c001e4b0 <unblockTask(ThreadControlBlock*)>
c001e9ea:	83 c4 10             	add    esp,0x10
c001e9ed:	83 c4 0c             	add    esp,0xc
c001e9f0:	e9 64 f8 ff ff       	jmp    c001e259 <unlockStuff()>
c001e9f5:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e9f8:	83 c4 0c             	add    esp,0xc
c001e9fb:	e9 59 f8 ff ff       	jmp    c001e259 <unlockStuff()>

c001ea00 <__static_initialization_and_destruction_0(int, int)>:
c001ea00:	83 ec 0c             	sub    esp,0xc
c001ea03:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ea08:	0f 85 88 00 00 00    	jne    c001ea96 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea0e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ea16:	75 7e                	jne    c001ea96 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea18:	83 ec 0c             	sub    esp,0xc
c001ea1b:	68 ec 1b 03 c0       	push   0xc0031bec
c001ea20:	e8 4b a3 00 00       	call   c0028d70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea25:	83 c4 10             	add    esp,0x10
c001ea28:	83 ec 04             	sub    esp,0x4
c001ea2b:	68 a8 d5 02 c0       	push   0xc002d5a8
c001ea30:	68 ec 1b 03 c0       	push   0xc0031bec
c001ea35:	68 30 8d 02 c0       	push   0xc0028d30
c001ea3a:	e8 1c 44 ff ff       	call   c0012e5b <__cxa_atexit>
c001ea3f:	83 c4 10             	add    esp,0x10
c001ea42:	83 ec 0c             	sub    esp,0xc
c001ea45:	68 e0 1b 03 c0       	push   0xc0031be0
c001ea4a:	e8 21 a3 00 00       	call   c0028d70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea4f:	83 c4 10             	add    esp,0x10
c001ea52:	83 ec 04             	sub    esp,0x4
c001ea55:	68 a8 d5 02 c0       	push   0xc002d5a8
c001ea5a:	68 e0 1b 03 c0       	push   0xc0031be0
c001ea5f:	68 30 8d 02 c0       	push   0xc0028d30
c001ea64:	e8 f2 43 ff ff       	call   c0012e5b <__cxa_atexit>
c001ea69:	83 c4 10             	add    esp,0x10
c001ea6c:	83 ec 0c             	sub    esp,0xc
c001ea6f:	68 d4 1b 03 c0       	push   0xc0031bd4
c001ea74:	e8 f7 a2 00 00       	call   c0028d70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea79:	83 c4 10             	add    esp,0x10
c001ea7c:	83 ec 04             	sub    esp,0x4
c001ea7f:	68 a8 d5 02 c0       	push   0xc002d5a8
c001ea84:	68 d4 1b 03 c0       	push   0xc0031bd4
c001ea89:	68 30 8d 02 c0       	push   0xc0028d30
c001ea8e:	e8 c8 43 ff ff       	call   c0012e5b <__cxa_atexit>
c001ea93:	83 c4 10             	add    esp,0x10
c001ea96:	90                   	nop
c001ea97:	83 c4 0c             	add    esp,0xc
c001ea9a:	c3                   	ret    

c001ea9b <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea9b:	83 ec 0c             	sub    esp,0xc
c001ea9e:	83 ec 08             	sub    esp,0x8
c001eaa1:	68 ff ff 00 00       	push   0xffff
c001eaa6:	6a 01                	push   0x1
c001eaa8:	e8 53 ff ff ff       	call   c001ea00 <__static_initialization_and_destruction_0(int, int)>
c001eaad:	83 c4 10             	add    esp,0x10
c001eab0:	83 c4 0c             	add    esp,0xc
c001eab3:	c3                   	ret    

c001eab4 <Vm::inbv(unsigned short)>:
c001eab4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eab8:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eabd:	75 06                	jne    c001eac5 <Vm::inbv(unsigned short)+0x11>
c001eabf:	a0 2c 1c 03 c0       	mov    al,ds:0xc0031c2c
c001eac4:	c3                   	ret    
c001eac5:	ec                   	in     al,dx
c001eac6:	c3                   	ret    

c001eac7 <Vm::outbv(unsigned short, unsigned char)>:
c001eac7:	53                   	push   ebx
c001eac8:	83 ec 08             	sub    esp,0x8
c001eacb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eacf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ead3:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ead8:	75 38                	jne    c001eb12 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001eada:	0f b6 c3             	movzx  eax,bl
c001eadd:	51                   	push   ecx
c001eade:	51                   	push   ecx
c001eadf:	50                   	push   eax
c001eae0:	68 0f c8 02 c0       	push   0xc002c80f
c001eae5:	e8 d7 44 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001eaea:	8b 15 2c 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c2c
c001eaf0:	83 c4 10             	add    esp,0x10
c001eaf3:	8d 42 01             	lea    eax,[edx+0x1]
c001eaf6:	88 9a 40 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce3c0],bl
c001eafc:	a3 2c 1c 03 c0       	mov    ds:0xc0031c2c,eax
c001eb01:	83 f8 20             	cmp    eax,0x20
c001eb04:	75 0f                	jne    c001eb15 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb06:	c7 05 2c 1c 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031c2c,0x1f
c001eb10:	eb 03                	jmp    c001eb15 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb12:	88 d8                	mov    al,bl
c001eb14:	ee                   	out    dx,al
c001eb15:	83 c4 08             	add    esp,0x8
c001eb18:	5b                   	pop    ebx
c001eb19:	c3                   	ret    

c001eb1a <Vm::realToLinear(unsigned short, unsigned short)>:
c001eb1a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb1f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb24:	c1 e0 04             	shl    eax,0x4
c001eb27:	01 d0                	add    eax,edx
c001eb29:	c3                   	ret    

c001eb2a <Vm::getSegment(unsigned int)>:
c001eb2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb2e:	c1 e8 10             	shr    eax,0x10
c001eb31:	c3                   	ret    

c001eb32 <Vm::getOffset(unsigned int)>:
c001eb32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb36:	c3                   	ret    

c001eb37 <Vm::mainloop2()>:
c001eb37:	83 ec 0c             	sub    esp,0xc
c001eb3a:	e8 59 f3 ff ff       	call   c001de98 <lockScheduler()>
c001eb3f:	83 ec 0c             	sub    esp,0xc
c001eb42:	c6 05 25 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c25,0x1
c001eb49:	6a 02                	push   0x2
c001eb4b:	e8 9c f7 ff ff       	call   c001e2ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb55:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb59:	52                   	push   edx
c001eb5a:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eb5e:	52                   	push   edx
c001eb5f:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eb63:	52                   	push   edx
c001eb64:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eb68:	50                   	push   eax
c001eb69:	e8 8c 17 fe ff       	call   c00002fa <goToVM86>
c001eb6e:	83 c4 2c             	add    esp,0x2c
c001eb71:	c3                   	ret    

c001eb72 <Vm::mainVm8086Loop(void*)>:
c001eb72:	83 ec 0c             	sub    esp,0xc
c001eb75:	e8 20 f3 ff ff       	call   c001de9a <unlockScheduler()>
c001eb7a:	83 c4 0c             	add    esp,0xc
c001eb7d:	eb b8                	jmp    c001eb37 <Vm::mainloop2()>

c001eb7f <Vm::mainloop3(unsigned long)>:
c001eb7f:	53                   	push   ebx
c001eb80:	83 ec 08             	sub    esp,0x8
c001eb83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb87:	e8 0c f3 ff ff       	call   c001de98 <lockScheduler()>
c001eb8c:	83 ec 0c             	sub    esp,0xc
c001eb8f:	89 1d 20 1c 03 c0    	mov    DWORD PTR ds:0xc0031c20,ebx
c001eb95:	6a 02                	push   0x2
c001eb97:	c6 05 24 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c24,0x1
c001eb9e:	e8 49 f7 ff ff       	call   c001e2ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eba3:	83 c4 18             	add    esp,0x18
c001eba6:	5b                   	pop    ebx
c001eba7:	eb 8e                	jmp    c001eb37 <Vm::mainloop2()>

c001eba9 <Vm::initialise8086()>:
c001eba9:	83 ec 0c             	sub    esp,0xc
c001ebac:	68 80 00 00 00       	push   0x80
c001ebb1:	6a 00                	push   0x0
c001ebb3:	68 72 eb 01 c0       	push   0xc001eb72
c001ebb8:	ff 35 f8 1b 03 c0    	push   DWORD PTR ds:0xc0031bf8
c001ebbe:	e8 07 f4 ff ff       	call   c001dfca <Process::createThread(void (*)(void*), void*, int)>
c001ebc3:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ebca:	a3 28 1c 03 c0       	mov    ds:0xc0031c28,eax
c001ebcf:	68 00 01 00 00       	push   0x100
c001ebd4:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001ebd9:	6a 00                	push   0x0
c001ebdb:	6a 00                	push   0x0
c001ebdd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ebe3:	e8 e4 3a ff ff       	call   c00126cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ebe8:	83 c4 2c             	add    esp,0x2c
c001ebeb:	c3                   	ret    

c001ebec <Vm::finish8086()>:
c001ebec:	53                   	push   ebx
c001ebed:	83 ec 08             	sub    esp,0x8
c001ebf0:	e8 a3 f2 ff ff       	call   c001de98 <lockScheduler()>
c001ebf5:	80 3d 24 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c24,0x0
c001ebfc:	75 0c                	jne    c001ec0a <Vm::finish8086()+0x1e>
c001ebfe:	e8 d1 f5 ff ff       	call   c001e1d4 <schedule()>
c001ec03:	e8 92 f2 ff ff       	call   c001de9a <unlockScheduler()>
c001ec08:	eb e6                	jmp    c001ebf0 <Vm::finish8086()+0x4>
c001ec0a:	83 ec 0c             	sub    esp,0xc
c001ec0d:	8b 1d 20 1c 03 c0    	mov    ebx,DWORD PTR ds:0xc0031c20
c001ec13:	ff 35 28 1c 03 c0    	push   DWORD PTR ds:0xc0031c28
c001ec19:	c6 05 24 1c 03 c0 00 	mov    BYTE PTR ds:0xc0031c24,0x0
c001ec20:	e8 8b f8 ff ff       	call   c001e4b0 <unblockTask(ThreadControlBlock*)>
c001ec25:	e8 70 f2 ff ff       	call   c001de9a <unlockScheduler()>
c001ec2a:	89 d8                	mov    eax,ebx
c001ec2c:	83 c4 18             	add    esp,0x18
c001ec2f:	5b                   	pop    ebx
c001ec30:	c3                   	ret    

c001ec31 <Vm::getOutput8086(unsigned char*)>:
c001ec31:	83 ec 10             	sub    esp,0x10
c001ec34:	ff 35 2c 1c 03 c0    	push   DWORD PTR ds:0xc0031c2c
c001ec3a:	68 40 1c 03 c0       	push   0xc0031c40
c001ec3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec43:	e8 fc 1a fe ff       	call   c0000744 <memcpy>
c001ec48:	a1 2c 1c 03 c0       	mov    eax,ds:0xc0031c2c
c001ec4d:	c7 05 2c 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c2c,0x0
c001ec57:	83 c4 1c             	add    esp,0x1c
c001ec5a:	c3                   	ret    

c001ec5b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ec5b:	55                   	push   ebp
c001ec5c:	57                   	push   edi
c001ec5d:	56                   	push   esi
c001ec5e:	53                   	push   ebx
c001ec5f:	83 ec 2c             	sub    esp,0x2c
c001ec62:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec66:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ec6a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ec6e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec72:	e8 21 f2 ff ff       	call   c001de98 <lockScheduler()>
c001ec77:	a0 25 1c 03 c0       	mov    al,ds:0xc0031c25
c001ec7c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec80:	84 c0                	test   al,al
c001ec82:	75 0c                	jne    c001ec90 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec84:	e8 4b f5 ff ff       	call   c001e1d4 <schedule()>
c001ec89:	e8 0c f2 ff ff       	call   c001de9a <unlockScheduler()>
c001ec8e:	eb e2                	jmp    c001ec72 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec90:	a1 28 1c 03 c0       	mov    eax,ds:0xc0031c28
c001ec95:	c7 05 2c 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c2c,0x0
c001ec9f:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001eca3:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eca7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ecab:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ecaf:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ecb3:	50                   	push   eax
c001ecb4:	6a 20                	push   0x20
c001ecb6:	6a 00                	push   0x0
c001ecb8:	68 40 1c 03 c0       	push   0xc0031c40
c001ecbd:	e8 b6 1a fe ff       	call   c0000778 <memset>
c001ecc2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ecc9:	e8 14 0c ff ff       	call   c000f8e2 <malloc>
c001ecce:	83 c4 0c             	add    esp,0xc
c001ecd1:	89 c7                	mov    edi,eax
c001ecd3:	ff 35 f8 1b 03 c0    	push   DWORD PTR ds:0xc0031bf8
c001ecd9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ecdd:	50                   	push   eax
c001ecde:	e8 37 48 ff ff       	call   c001351a <File::File(char const*, Process*)>
c001ece3:	83 c4 10             	add    esp,0x10
c001ece6:	85 ff                	test   edi,edi
c001ece8:	75 0a                	jne    c001ecf4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ecea:	83 ec 0c             	sub    esp,0xc
c001eced:	68 2b c8 02 c0       	push   0xc002c82b
c001ecf2:	eb 27                	jmp    c001ed1b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ecf4:	50                   	push   eax
c001ecf5:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ecf9:	50                   	push   eax
c001ecfa:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ecfe:	50                   	push   eax
c001ecff:	57                   	push   edi
c001ed00:	e8 25 4b ff ff       	call   c001382a <File::stat(unsigned long long*, bool*)>
c001ed05:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ed0a:	83 c4 10             	add    esp,0x10
c001ed0d:	89 e8                	mov    eax,ebp
c001ed0f:	84 c0                	test   al,al
c001ed11:	74 19                	je     c001ed2c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ed13:	83 ec 0c             	sub    esp,0xc
c001ed16:	68 3f c8 02 c0       	push   0xc002c83f
c001ed1b:	e8 53 b9 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001ed20:	31 ed                	xor    ebp,ebp
c001ed22:	e8 73 f1 ff ff       	call   c001de9a <unlockScheduler()>
c001ed27:	83 c4 10             	add    esp,0x10
c001ed2a:	eb 75                	jmp    c001eda1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed2c:	50                   	push   eax
c001ed2d:	50                   	push   eax
c001ed2e:	6a 01                	push   0x1
c001ed30:	57                   	push   edi
c001ed31:	e8 48 48 ff ff       	call   c001357e <File::open(FileOpenMode)>
c001ed36:	83 c4 10             	add    esp,0x10
c001ed39:	85 c0                	test   eax,eax
c001ed3b:	74 17                	je     c001ed54 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ed3d:	83 ec 0c             	sub    esp,0xc
c001ed40:	68 58 c8 02 c0       	push   0xc002c858
c001ed45:	e8 29 b9 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001ed4a:	e8 4b f1 ff ff       	call   c001de9a <unlockScheduler()>
c001ed4f:	83 c4 10             	add    esp,0x10
c001ed52:	eb 4d                	jmp    c001eda1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed54:	0f b7 f6             	movzx  esi,si
c001ed57:	50                   	push   eax
c001ed58:	0f b7 db             	movzx  ebx,bx
c001ed5b:	50                   	push   eax
c001ed5c:	56                   	push   esi
c001ed5d:	53                   	push   ebx
c001ed5e:	e8 b7 fd ff ff       	call   c001eb1a <Vm::realToLinear(unsigned short, unsigned short)>
c001ed63:	5a                   	pop    edx
c001ed64:	8b 17                	mov    edx,DWORD PTR [edi]
c001ed66:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ed6a:	51                   	push   ecx
c001ed6b:	50                   	push   eax
c001ed6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed70:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed74:	57                   	push   edi
c001ed75:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed78:	83 c4 14             	add    esp,0x14
c001ed7b:	57                   	push   edi
c001ed7c:	e8 5b 48 ff ff       	call   c00135dc <File::close()>
c001ed81:	c6 05 25 1c 03 c0 00 	mov    BYTE PTR ds:0xc0031c25,0x0
c001ed88:	e8 0d f1 ff ff       	call   c001de9a <unlockScheduler()>
c001ed8d:	59                   	pop    ecx
c001ed8e:	ff 35 28 1c 03 c0    	push   DWORD PTR ds:0xc0031c28
c001ed94:	e8 17 f7 ff ff       	call   c001e4b0 <unblockTask(ThreadControlBlock*)>
c001ed99:	83 c4 10             	add    esp,0x10
c001ed9c:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001eda1:	83 c4 2c             	add    esp,0x2c
c001eda4:	89 e8                	mov    eax,ebp
c001eda6:	5b                   	pop    ebx
c001eda7:	5e                   	pop    esi
c001eda8:	5f                   	pop    edi
c001eda9:	5d                   	pop    ebp
c001edaa:	c3                   	ret    

c001edab <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001edab:	57                   	push   edi
c001edac:	56                   	push   esi
c001edad:	53                   	push   ebx
c001edae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edb6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001edba:	83 e8 06             	sub    eax,0x6
c001edbd:	0f b7 c0             	movzx  eax,ax
c001edc0:	50                   	push   eax
c001edc1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001edc6:	50                   	push   eax
c001edc7:	e8 4e fd ff ff       	call   c001eb1a <Vm::realToLinear(unsigned short, unsigned short)>
c001edcc:	5a                   	pop    edx
c001edcd:	5e                   	pop    esi
c001edce:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001edd1:	8d 56 fa             	lea    edx,[esi-0x6]
c001edd4:	81 e2 ff ff 00 00    	and    edx,0xffff
c001edda:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001eddd:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ede0:	83 c2 02             	add    edx,0x2
c001ede3:	66 89 10             	mov    WORD PTR [eax],dx
c001ede6:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ede9:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001eded:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001edf0:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001edf4:	89 d6                	mov    esi,edx
c001edf6:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001edfc:	66 81 e6 ff fd       	and    si,0xfdff
c001ee01:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ee05:	74 07                	je     c001ee0e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ee07:	89 d6                	mov    esi,edx
c001ee09:	66 81 ce 00 02       	or     si,0x200
c001ee0e:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ee12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee17:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ee1b:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ee23:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ee26:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ee2e:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ee31:	5b                   	pop    ebx
c001ee32:	5e                   	pop    esi
c001ee33:	5f                   	pop    edi
c001ee34:	c3                   	ret    

c001ee35 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ee35:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee3a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee3f:	c1 e0 04             	shl    eax,0x4
c001ee42:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ee45:	c3                   	ret    

c001ee46 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ee46:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee4b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee50:	c1 e0 04             	shl    eax,0x4
c001ee53:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee57:	c3                   	ret    

c001ee58 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee58:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee5d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee62:	c1 e0 04             	shl    eax,0x4
c001ee65:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ee68:	c3                   	ret    

c001ee69 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ee69:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee6e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee73:	c1 e0 04             	shl    eax,0x4
c001ee76:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee7a:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee7d:	c3                   	ret    

c001ee7e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ee7e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee83:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee88:	c1 e0 04             	shl    eax,0x4
c001ee8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee8f:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee93:	c3                   	ret    

c001ee94 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee94:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee99:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee9e:	c1 e0 04             	shl    eax,0x4
c001eea1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eea5:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001eea8:	c3                   	ret    

c001eea9 <Vm::faultHandler(regs*)>:
c001eea9:	55                   	push   ebp
c001eeaa:	57                   	push   edi
c001eeab:	56                   	push   esi
c001eeac:	53                   	push   ebx
c001eead:	83 ec 1c             	sub    esp,0x1c
c001eeb0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eeb4:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001eeb7:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001eeba:	0f b7 c1             	movzx  eax,cx
c001eebd:	50                   	push   eax
c001eebe:	0f b7 c3             	movzx  eax,bx
c001eec1:	c1 e3 04             	shl    ebx,0x4
c001eec4:	50                   	push   eax
c001eec5:	e8 50 fc ff ff       	call   c001eb1a <Vm::realToLinear(unsigned short, unsigned short)>
c001eeca:	5a                   	pop    edx
c001eecb:	89 c5                	mov    ebp,eax
c001eecd:	5e                   	pop    esi
c001eece:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001eed2:	50                   	push   eax
c001eed3:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001eed7:	50                   	push   eax
c001eed8:	e8 3d fc ff ff       	call   c001eb1a <Vm::realToLinear(unsigned short, unsigned short)>
c001eedd:	01 cb                	add    ebx,ecx
c001eedf:	89 c6                	mov    esi,eax
c001eee1:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001eee5:	50                   	push   eax
c001eee6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eeea:	50                   	push   eax
c001eeeb:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eeef:	50                   	push   eax
c001eef0:	55                   	push   ebp
c001eef1:	53                   	push   ebx
c001eef2:	b3 06                	mov    bl,0x6
c001eef4:	68 71 c8 02 c0       	push   0xc002c871
c001eef9:	e8 c3 40 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001eefe:	83 c4 20             	add    esp,0x20
c001ef01:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ef06:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ef0b:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef0f:	3c 9d                	cmp    al,0x9d
c001ef11:	0f 84 d7 02 00 00    	je     c001f1ee <Vm::faultHandler(regs*)+0x345>
c001ef17:	0f 87 a3 00 00 00    	ja     c001efc0 <Vm::faultHandler(regs*)+0x117>
c001ef1d:	3c 66                	cmp    al,0x66
c001ef1f:	0f 84 15 02 00 00    	je     c001f13a <Vm::faultHandler(regs*)+0x291>
c001ef25:	77 5f                	ja     c001ef86 <Vm::faultHandler(regs*)+0xdd>
c001ef27:	3c 36                	cmp    al,0x36
c001ef29:	0f 84 f1 01 00 00    	je     c001f120 <Vm::faultHandler(regs*)+0x277>
c001ef2f:	77 28                	ja     c001ef59 <Vm::faultHandler(regs*)+0xb0>
c001ef31:	3c 26                	cmp    al,0x26
c001ef33:	0f 84 99 01 00 00    	je     c001f0d2 <Vm::faultHandler(regs*)+0x229>
c001ef39:	3c 2e                	cmp    al,0x2e
c001ef3b:	0f 85 3b 07 00 00    	jne    c001f67c <Vm::faultHandler(regs*)+0x7d3>
c001ef41:	83 ec 0c             	sub    esp,0xc
c001ef44:	31 db                	xor    ebx,ebx
c001ef46:	68 86 c8 02 c0       	push   0xc002c886
c001ef4b:	e8 71 40 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001ef50:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef53:	83 c4 10             	add    esp,0x10
c001ef56:	45                   	inc    ebp
c001ef57:	eb b2                	jmp    c001ef0b <Vm::faultHandler(regs*)+0x62>
c001ef59:	3c 64                	cmp    al,0x64
c001ef5b:	0f 84 8b 01 00 00    	je     c001f0ec <Vm::faultHandler(regs*)+0x243>
c001ef61:	0f 87 9f 01 00 00    	ja     c001f106 <Vm::faultHandler(regs*)+0x25d>
c001ef67:	3c 3e                	cmp    al,0x3e
c001ef69:	0f 85 0d 07 00 00    	jne    c001f67c <Vm::faultHandler(regs*)+0x7d3>
c001ef6f:	83 ec 0c             	sub    esp,0xc
c001ef72:	b3 01                	mov    bl,0x1
c001ef74:	68 8a c8 02 c0       	push   0xc002c88a
c001ef79:	e8 43 40 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001ef7e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef81:	83 c4 10             	add    esp,0x10
c001ef84:	eb d0                	jmp    c001ef56 <Vm::faultHandler(regs*)+0xad>
c001ef86:	3c 6d                	cmp    al,0x6d
c001ef88:	0f 84 af 03 00 00    	je     c001f33d <Vm::faultHandler(regs*)+0x494>
c001ef8e:	77 15                	ja     c001efa5 <Vm::faultHandler(regs*)+0xfc>
c001ef90:	3c 67                	cmp    al,0x67
c001ef92:	0f 84 bf 01 00 00    	je     c001f157 <Vm::faultHandler(regs*)+0x2ae>
c001ef98:	3c 6c                	cmp    al,0x6c
c001ef9a:	0f 84 3f 03 00 00    	je     c001f2df <Vm::faultHandler(regs*)+0x436>
c001efa0:	e9 d7 06 00 00       	jmp    c001f67c <Vm::faultHandler(regs*)+0x7d3>
c001efa5:	3c 6f                	cmp    al,0x6f
c001efa7:	0f 84 a4 04 00 00    	je     c001f451 <Vm::faultHandler(regs*)+0x5a8>
c001efad:	0f 82 11 04 00 00    	jb     c001f3c4 <Vm::faultHandler(regs*)+0x51b>
c001efb3:	3c 9c                	cmp    al,0x9c
c001efb5:	0f 84 ba 01 00 00    	je     c001f175 <Vm::faultHandler(regs*)+0x2cc>
c001efbb:	e9 bc 06 00 00       	jmp    c001f67c <Vm::faultHandler(regs*)+0x7d3>
c001efc0:	3c ec                	cmp    al,0xec
c001efc2:	0f 84 24 06 00 00    	je     c001f5ec <Vm::faultHandler(regs*)+0x743>
c001efc8:	0f 87 93 00 00 00    	ja     c001f061 <Vm::faultHandler(regs*)+0x1b8>
c001efce:	3c e4                	cmp    al,0xe4
c001efd0:	0f 84 5c 05 00 00    	je     c001f532 <Vm::faultHandler(regs*)+0x689>
c001efd6:	77 6a                	ja     c001f042 <Vm::faultHandler(regs*)+0x199>
c001efd8:	3c cd                	cmp    al,0xcd
c001efda:	0f 84 7e 02 00 00    	je     c001f25e <Vm::faultHandler(regs*)+0x3b5>
c001efe0:	3c cf                	cmp    al,0xcf
c001efe2:	0f 85 94 06 00 00    	jne    c001f67c <Vm::faultHandler(regs*)+0x7d3>
c001efe8:	83 ec 0c             	sub    esp,0xc
c001efeb:	68 ce c8 02 c0       	push   0xc002c8ce
c001eff0:	e8 cc 3f ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001eff5:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001eff8:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001effb:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001efff:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f002:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f006:	0d 00 02 02 00       	or     eax,0x20200
c001f00b:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f00e:	56                   	push   esi
c001f00f:	53                   	push   ebx
c001f010:	52                   	push   edx
c001f011:	68 d4 c8 02 c0       	push   0xc002c8d4
c001f016:	e8 a6 3f ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f01b:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f01f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f025:	66 c1 e8 09          	shr    ax,0x9
c001f029:	83 e0 01             	and    eax,0x1
c001f02c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f02f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f032:	83 c0 06             	add    eax,0x6
c001f035:	25 ff ff 00 00       	and    eax,0xffff
c001f03a:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f03d:	e9 95 02 00 00       	jmp    c001f2d7 <Vm::faultHandler(regs*)+0x42e>
c001f042:	3c e6                	cmp    al,0xe6
c001f044:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f048:	0f 84 4e 05 00 00    	je     c001f59c <Vm::faultHandler(regs*)+0x6f3>
c001f04e:	0f 82 0a 05 00 00    	jb     c001f55e <Vm::faultHandler(regs*)+0x6b5>
c001f054:	3c e7                	cmp    al,0xe7
c001f056:	0f 84 69 05 00 00    	je     c001f5c5 <Vm::faultHandler(regs*)+0x71c>
c001f05c:	e9 1b 06 00 00       	jmp    c001f67c <Vm::faultHandler(regs*)+0x7d3>
c001f061:	3c ef                	cmp    al,0xef
c001f063:	0f 84 e6 05 00 00    	je     c001f64f <Vm::faultHandler(regs*)+0x7a6>
c001f069:	77 37                	ja     c001f0a2 <Vm::faultHandler(regs*)+0x1f9>
c001f06b:	3c ed                	cmp    al,0xed
c001f06d:	0f 84 a3 05 00 00    	je     c001f616 <Vm::faultHandler(regs*)+0x76d>
c001f073:	3c ee                	cmp    al,0xee
c001f075:	0f 85 01 06 00 00    	jne    c001f67c <Vm::faultHandler(regs*)+0x7d3>
c001f07b:	52                   	push   edx
c001f07c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f07f:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f082:	68 6f c9 02 c0       	push   0xc002c96f
c001f087:	e8 35 3f ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f08c:	59                   	pop    ecx
c001f08d:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f091:	5b                   	pop    ebx
c001f092:	50                   	push   eax
c001f093:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f097:	50                   	push   eax
c001f098:	e8 2a fa ff ff       	call   c001eac7 <Vm::outbv(unsigned short, unsigned char)>
c001f09d:	e9 a5 05 00 00       	jmp    c001f647 <Vm::faultHandler(regs*)+0x79e>
c001f0a2:	3c fa                	cmp    al,0xfa
c001f0a4:	0f 84 f7 01 00 00    	je     c001f2a1 <Vm::faultHandler(regs*)+0x3f8>
c001f0aa:	3c fb                	cmp    al,0xfb
c001f0ac:	0f 84 0a 02 00 00    	je     c001f2bc <Vm::faultHandler(regs*)+0x413>
c001f0b2:	3c f3                	cmp    al,0xf3
c001f0b4:	0f 85 c2 05 00 00    	jne    c001f67c <Vm::faultHandler(regs*)+0x7d3>
c001f0ba:	83 ec 0c             	sub    esp,0xc
c001f0bd:	68 a7 c8 02 c0       	push   0xc002c8a7
c001f0c2:	e8 fa 3e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f0c7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0ca:	83 c4 10             	add    esp,0x10
c001f0cd:	e9 84 fe ff ff       	jmp    c001ef56 <Vm::faultHandler(regs*)+0xad>
c001f0d2:	83 ec 0c             	sub    esp,0xc
c001f0d5:	b3 02                	mov    bl,0x2
c001f0d7:	68 82 c8 02 c0       	push   0xc002c882
c001f0dc:	e8 e0 3e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f0e1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0e4:	83 c4 10             	add    esp,0x10
c001f0e7:	e9 6a fe ff ff       	jmp    c001ef56 <Vm::faultHandler(regs*)+0xad>
c001f0ec:	83 ec 0c             	sub    esp,0xc
c001f0ef:	b3 03                	mov    bl,0x3
c001f0f1:	68 8e c8 02 c0       	push   0xc002c88e
c001f0f6:	e8 c6 3e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f0fb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0fe:	83 c4 10             	add    esp,0x10
c001f101:	e9 50 fe ff ff       	jmp    c001ef56 <Vm::faultHandler(regs*)+0xad>
c001f106:	83 ec 0c             	sub    esp,0xc
c001f109:	b3 04                	mov    bl,0x4
c001f10b:	68 92 c8 02 c0       	push   0xc002c892
c001f110:	e8 ac 3e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f115:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f118:	83 c4 10             	add    esp,0x10
c001f11b:	e9 36 fe ff ff       	jmp    c001ef56 <Vm::faultHandler(regs*)+0xad>
c001f120:	83 ec 0c             	sub    esp,0xc
c001f123:	b3 05                	mov    bl,0x5
c001f125:	68 96 c8 02 c0       	push   0xc002c896
c001f12a:	e8 92 3e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f12f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f132:	83 c4 10             	add    esp,0x10
c001f135:	e9 1c fe ff ff       	jmp    c001ef56 <Vm::faultHandler(regs*)+0xad>
c001f13a:	83 ec 0c             	sub    esp,0xc
c001f13d:	68 9a c8 02 c0       	push   0xc002c89a
c001f142:	e8 7a 3e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f147:	83 c4 10             	add    esp,0x10
c001f14a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f14d:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f152:	e9 ff fd ff ff       	jmp    c001ef56 <Vm::faultHandler(regs*)+0xad>
c001f157:	50                   	push   eax
c001f158:	50                   	push   eax
c001f159:	6a 01                	push   0x1
c001f15b:	68 9f c8 02 c0       	push   0xc002c89f
c001f160:	e8 5c 3e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f165:	83 c4 10             	add    esp,0x10
c001f168:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f16b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f170:	e9 e1 fd ff ff       	jmp    c001ef56 <Vm::faultHandler(regs*)+0xad>
c001f175:	83 ec 0c             	sub    esp,0xc
c001f178:	68 ad c8 02 c0       	push   0xc002c8ad
c001f17d:	e8 3f 3e ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f182:	83 c4 10             	add    esp,0x10
c001f185:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f188:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f18d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f190:	74 2f                	je     c001f1c1 <Vm::faultHandler(regs*)+0x318>
c001f192:	83 ea 04             	sub    edx,0x4
c001f195:	25 ff 0d 00 00       	and    eax,0xdff
c001f19a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f1a0:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f1a3:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1a6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1ac:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f1b0:	0f 84 bf 04 00 00    	je     c001f675 <Vm::faultHandler(regs*)+0x7cc>
c001f1b6:	80 cc 02             	or     ah,0x2
c001f1b9:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1bc:	e9 b4 04 00 00       	jmp    c001f675 <Vm::faultHandler(regs*)+0x7cc>
c001f1c1:	83 ea 02             	sub    edx,0x2
c001f1c4:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f1ca:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f1cd:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1d1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1d7:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f1db:	74 05                	je     c001f1e2 <Vm::faultHandler(regs*)+0x339>
c001f1dd:	80 cc 02             	or     ah,0x2
c001f1e0:	eb 03                	jmp    c001f1e5 <Vm::faultHandler(regs*)+0x33c>
c001f1e2:	80 e4 fd             	and    ah,0xfd
c001f1e5:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1e9:	e9 87 04 00 00       	jmp    c001f675 <Vm::faultHandler(regs*)+0x7cc>
c001f1ee:	83 ec 0c             	sub    esp,0xc
c001f1f1:	68 b4 c8 02 c0       	push   0xc002c8b4
c001f1f6:	e8 c6 3d ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f1fb:	83 c4 10             	add    esp,0x10
c001f1fe:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f203:	74 28                	je     c001f22d <Vm::faultHandler(regs*)+0x384>
c001f205:	8b 06                	mov    eax,DWORD PTR [esi]
c001f207:	25 ff 0d 00 00       	and    eax,0xdff
c001f20c:	0d 00 02 02 00       	or     eax,0x20200
c001f211:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f214:	8b 06                	mov    eax,DWORD PTR [esi]
c001f216:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f21c:	c1 e8 09             	shr    eax,0x9
c001f21f:	83 e0 01             	and    eax,0x1
c001f222:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f225:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f228:	83 c0 04             	add    eax,0x4
c001f22b:	eb 24                	jmp    c001f251 <Vm::faultHandler(regs*)+0x3a8>
c001f22d:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f230:	0d 00 02 02 00       	or     eax,0x20200
c001f235:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f238:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f23b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f241:	66 c1 e8 09          	shr    ax,0x9
c001f245:	83 e0 01             	and    eax,0x1
c001f248:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f24b:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f24e:	83 c0 02             	add    eax,0x2
c001f251:	25 ff ff 00 00       	and    eax,0xffff
c001f256:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f259:	e9 17 04 00 00       	jmp    c001f675 <Vm::faultHandler(regs*)+0x7cc>
c001f25e:	53                   	push   ebx
c001f25f:	53                   	push   ebx
c001f260:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f264:	50                   	push   eax
c001f265:	68 ba c8 02 c0       	push   0xc002c8ba
c001f26a:	e8 52 3d ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f26f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f273:	83 c4 10             	add    esp,0x10
c001f276:	3c ee                	cmp    al,0xee
c001f278:	75 10                	jne    c001f28a <Vm::faultHandler(regs*)+0x3e1>
c001f27a:	83 ec 0c             	sub    esp,0xc
c001f27d:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f280:	e8 fa f8 ff ff       	call   c001eb7f <Vm::mainloop3(unsigned long)>
c001f285:	e9 c0 03 00 00       	jmp    c001f64a <Vm::faultHandler(regs*)+0x7a1>
c001f28a:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f28e:	83 ec 0c             	sub    esp,0xc
c001f291:	53                   	push   ebx
c001f292:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f296:	53                   	push   ebx
c001f297:	55                   	push   ebp
c001f298:	50                   	push   eax
c001f299:	57                   	push   edi
c001f29a:	e8 0c fb ff ff       	call   c001edab <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f29f:	eb 36                	jmp    c001f2d7 <Vm::faultHandler(regs*)+0x42e>
c001f2a1:	83 ec 0c             	sub    esp,0xc
c001f2a4:	68 c4 c8 02 c0       	push   0xc002c8c4
c001f2a9:	e8 13 3d ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f2ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2b3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f2b7:	e9 8b 03 00 00       	jmp    c001f647 <Vm::faultHandler(regs*)+0x79e>
c001f2bc:	83 ec 0c             	sub    esp,0xc
c001f2bf:	68 c9 c8 02 c0       	push   0xc002c8c9
c001f2c4:	e8 f8 3c ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f2c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2ce:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f2d2:	e9 70 03 00 00       	jmp    c001f647 <Vm::faultHandler(regs*)+0x79e>
c001f2d7:	83 c4 20             	add    esp,0x20
c001f2da:	e9 99 03 00 00       	jmp    c001f678 <Vm::faultHandler(regs*)+0x7cf>
c001f2df:	83 ec 0c             	sub    esp,0xc
c001f2e2:	68 07 c9 02 c0       	push   0xc002c907
c001f2e7:	e8 d5 3c ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f2ec:	83 c4 10             	add    esp,0x10
c001f2ef:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2f2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2f7:	74 0d                	je     c001f306 <Vm::faultHandler(regs*)+0x45d>
c001f2f9:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f300:	0f 87 9e 01 00 00    	ja     c001f4a4 <Vm::faultHandler(regs*)+0x5fb>
c001f306:	83 ec 0c             	sub    esp,0xc
c001f309:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f30d:	0f b7 db             	movzx  ebx,bx
c001f310:	50                   	push   eax
c001f311:	e8 9e f7 ff ff       	call   c001eab4 <Vm::inbv(unsigned short)>
c001f316:	83 c4 0c             	add    esp,0xc
c001f319:	0f b6 c0             	movzx  eax,al
c001f31c:	50                   	push   eax
c001f31d:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f321:	50                   	push   eax
c001f322:	53                   	push   ebx
c001f323:	e8 41 fb ff ff       	call   c001ee69 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f328:	83 c4 10             	add    esp,0x10
c001f32b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f32e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f332:	74 03                	je     c001f337 <Vm::faultHandler(regs*)+0x48e>
c001f334:	48                   	dec    eax
c001f335:	eb 01                	jmp    c001f338 <Vm::faultHandler(regs*)+0x48f>
c001f337:	40                   	inc    eax
c001f338:	0f b7 c0             	movzx  eax,ax
c001f33b:	eb 7f                	jmp    c001f3bc <Vm::faultHandler(regs*)+0x513>
c001f33d:	83 ec 0c             	sub    esp,0xc
c001f340:	68 39 c9 02 c0       	push   0xc002c939
c001f345:	e8 77 3c ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f34a:	83 c4 10             	add    esp,0x10
c001f34d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f350:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f355:	74 0d                	je     c001f364 <Vm::faultHandler(regs*)+0x4bb>
c001f357:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f35e:	0f 87 40 01 00 00    	ja     c001f4a4 <Vm::faultHandler(regs*)+0x5fb>
c001f364:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f367:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f36b:	0f b7 db             	movzx  ebx,bx
c001f36e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f373:	74 20                	je     c001f395 <Vm::faultHandler(regs*)+0x4ec>
c001f375:	ed                   	in     eax,dx
c001f376:	51                   	push   ecx
c001f377:	50                   	push   eax
c001f378:	56                   	push   esi
c001f379:	53                   	push   ebx
c001f37a:	e8 15 fb ff ff       	call   c001ee94 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f37f:	83 c4 10             	add    esp,0x10
c001f382:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f385:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f389:	74 05                	je     c001f390 <Vm::faultHandler(regs*)+0x4e7>
c001f38b:	83 e8 04             	sub    eax,0x4
c001f38e:	eb 27                	jmp    c001f3b7 <Vm::faultHandler(regs*)+0x50e>
c001f390:	83 c0 04             	add    eax,0x4
c001f393:	eb 22                	jmp    c001f3b7 <Vm::faultHandler(regs*)+0x50e>
c001f395:	66 ed                	in     ax,dx
c001f397:	0f b7 c0             	movzx  eax,ax
c001f39a:	52                   	push   edx
c001f39b:	50                   	push   eax
c001f39c:	56                   	push   esi
c001f39d:	53                   	push   ebx
c001f39e:	e8 db fa ff ff       	call   c001ee7e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f3a3:	83 c4 10             	add    esp,0x10
c001f3a6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f3a9:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3ad:	74 05                	je     c001f3b4 <Vm::faultHandler(regs*)+0x50b>
c001f3af:	83 e8 02             	sub    eax,0x2
c001f3b2:	eb 03                	jmp    c001f3b7 <Vm::faultHandler(regs*)+0x50e>
c001f3b4:	83 c0 02             	add    eax,0x2
c001f3b7:	25 ff ff 00 00       	and    eax,0xffff
c001f3bc:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f3bf:	e9 b1 02 00 00       	jmp    c001f675 <Vm::faultHandler(regs*)+0x7cc>
c001f3c4:	83 ec 0c             	sub    esp,0xc
c001f3c7:	4b                   	dec    ebx
c001f3c8:	68 3f c9 02 c0       	push   0xc002c93f
c001f3cd:	e8 ef 3b ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f3d2:	83 c4 10             	add    esp,0x10
c001f3d5:	80 fb 05             	cmp    bl,0x5
c001f3d8:	77 0a                	ja     c001f3e4 <Vm::faultHandler(regs*)+0x53b>
c001f3da:	0f b6 db             	movzx  ebx,bl
c001f3dd:	ff 24 9d b0 c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3650]
c001f3e4:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3e8:	eb 1b                	jmp    c001f405 <Vm::faultHandler(regs*)+0x55c>
c001f3ea:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3ee:	eb 15                	jmp    c001f405 <Vm::faultHandler(regs*)+0x55c>
c001f3f0:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3f4:	eb 0f                	jmp    c001f405 <Vm::faultHandler(regs*)+0x55c>
c001f3f6:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3fa:	eb 09                	jmp    c001f405 <Vm::faultHandler(regs*)+0x55c>
c001f3fc:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3ff:	eb 04                	jmp    c001f405 <Vm::faultHandler(regs*)+0x55c>
c001f401:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f405:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f40a:	74 0d                	je     c001f419 <Vm::faultHandler(regs*)+0x570>
c001f40c:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f413:	0f 87 8b 00 00 00    	ja     c001f4a4 <Vm::faultHandler(regs*)+0x5fb>
c001f419:	53                   	push   ebx
c001f41a:	53                   	push   ebx
c001f41b:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f41f:	52                   	push   edx
c001f420:	50                   	push   eax
c001f421:	e8 0f fa ff ff       	call   c001ee35 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f426:	5e                   	pop    esi
c001f427:	0f b6 c0             	movzx  eax,al
c001f42a:	5d                   	pop    ebp
c001f42b:	50                   	push   eax
c001f42c:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f430:	50                   	push   eax
c001f431:	e8 91 f6 ff ff       	call   c001eac7 <Vm::outbv(unsigned short, unsigned char)>
c001f436:	83 c4 10             	add    esp,0x10
c001f439:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f43c:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f440:	74 03                	je     c001f445 <Vm::faultHandler(regs*)+0x59c>
c001f442:	48                   	dec    eax
c001f443:	eb 01                	jmp    c001f446 <Vm::faultHandler(regs*)+0x59d>
c001f445:	40                   	inc    eax
c001f446:	0f b7 c0             	movzx  eax,ax
c001f449:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f44c:	e9 24 02 00 00       	jmp    c001f675 <Vm::faultHandler(regs*)+0x7cc>
c001f451:	83 ec 0c             	sub    esp,0xc
c001f454:	4b                   	dec    ebx
c001f455:	68 3f c9 02 c0       	push   0xc002c93f
c001f45a:	e8 62 3b ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f45f:	83 c4 10             	add    esp,0x10
c001f462:	80 fb 05             	cmp    bl,0x5
c001f465:	77 0a                	ja     c001f471 <Vm::faultHandler(regs*)+0x5c8>
c001f467:	0f b6 db             	movzx  ebx,bl
c001f46a:	ff 24 9d c8 c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3638]
c001f471:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f475:	eb 1b                	jmp    c001f492 <Vm::faultHandler(regs*)+0x5e9>
c001f477:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f47b:	eb 15                	jmp    c001f492 <Vm::faultHandler(regs*)+0x5e9>
c001f47d:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f481:	eb 0f                	jmp    c001f492 <Vm::faultHandler(regs*)+0x5e9>
c001f483:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f487:	eb 09                	jmp    c001f492 <Vm::faultHandler(regs*)+0x5e9>
c001f489:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f48c:	eb 04                	jmp    c001f492 <Vm::faultHandler(regs*)+0x5e9>
c001f48e:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f492:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f495:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f49a:	74 39                	je     c001f4d5 <Vm::faultHandler(regs*)+0x62c>
c001f49c:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f4a2:	76 31                	jbe    c001f4d5 <Vm::faultHandler(regs*)+0x62c>
c001f4a4:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f4a8:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4ac:	51                   	push   ecx
c001f4ad:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f4b1:	51                   	push   ecx
c001f4b2:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f4b6:	51                   	push   ecx
c001f4b7:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f4bb:	51                   	push   ecx
c001f4bc:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4c0:	52                   	push   edx
c001f4c1:	50                   	push   eax
c001f4c2:	50                   	push   eax
c001f4c3:	68 0c c9 02 c0       	push   0xc002c90c
c001f4c8:	e8 f4 3a ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f4cd:	83 c4 20             	add    esp,0x20
c001f4d0:	e9 fb 01 00 00       	jmp    c001f6d0 <Vm::faultHandler(regs*)+0x827>
c001f4d5:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f4d8:	0f b7 d3             	movzx  edx,bx
c001f4db:	81 e6 00 04 00 00    	and    esi,0x400
c001f4e1:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f4e4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4e9:	74 1d                	je     c001f508 <Vm::faultHandler(regs*)+0x65f>
c001f4eb:	51                   	push   ecx
c001f4ec:	51                   	push   ecx
c001f4ed:	52                   	push   edx
c001f4ee:	50                   	push   eax
c001f4ef:	e8 64 f9 ff ff       	call   c001ee58 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f4f4:	83 c4 10             	add    esp,0x10
c001f4f7:	89 ea                	mov    edx,ebp
c001f4f9:	ef                   	out    dx,eax
c001f4fa:	85 f6                	test   esi,esi
c001f4fc:	74 05                	je     c001f503 <Vm::faultHandler(regs*)+0x65a>
c001f4fe:	83 eb 04             	sub    ebx,0x4
c001f501:	eb 21                	jmp    c001f524 <Vm::faultHandler(regs*)+0x67b>
c001f503:	83 c3 04             	add    ebx,0x4
c001f506:	eb 1c                	jmp    c001f524 <Vm::faultHandler(regs*)+0x67b>
c001f508:	51                   	push   ecx
c001f509:	51                   	push   ecx
c001f50a:	52                   	push   edx
c001f50b:	50                   	push   eax
c001f50c:	e8 35 f9 ff ff       	call   c001ee46 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f511:	83 c4 10             	add    esp,0x10
c001f514:	89 ea                	mov    edx,ebp
c001f516:	66 ef                	out    dx,ax
c001f518:	85 f6                	test   esi,esi
c001f51a:	74 05                	je     c001f521 <Vm::faultHandler(regs*)+0x678>
c001f51c:	83 eb 02             	sub    ebx,0x2
c001f51f:	eb 03                	jmp    c001f524 <Vm::faultHandler(regs*)+0x67b>
c001f521:	83 c3 02             	add    ebx,0x2
c001f524:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f52a:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f52d:	e9 43 01 00 00       	jmp    c001f675 <Vm::faultHandler(regs*)+0x7cc>
c001f532:	53                   	push   ebx
c001f533:	53                   	push   ebx
c001f534:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f538:	50                   	push   eax
c001f539:	68 45 c9 02 c0       	push   0xc002c945
c001f53e:	e8 7e 3a ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f543:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f54a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f54e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f551:	e8 5e f5 ff ff       	call   c001eab4 <Vm::inbv(unsigned short)>
c001f556:	0f b6 c0             	movzx  eax,al
c001f559:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f55c:	eb 5e                	jmp    c001f5bc <Vm::faultHandler(regs*)+0x713>
c001f55e:	51                   	push   ecx
c001f55f:	51                   	push   ecx
c001f560:	53                   	push   ebx
c001f561:	68 4b c9 02 c0       	push   0xc002c94b
c001f566:	e8 56 3a ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f56b:	83 c4 10             	add    esp,0x10
c001f56e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f573:	74 07                	je     c001f57c <Vm::faultHandler(regs*)+0x6d3>
c001f575:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f579:	ed                   	in     eax,dx
c001f57a:	eb 14                	jmp    c001f590 <Vm::faultHandler(regs*)+0x6e7>
c001f57c:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f57f:	66 31 db             	xor    bx,bx
c001f582:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f585:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f589:	66 ed                	in     ax,dx
c001f58b:	0f b7 c0             	movzx  eax,ax
c001f58e:	09 d8                	or     eax,ebx
c001f590:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f593:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f597:	e9 dc 00 00 00       	jmp    c001f678 <Vm::faultHandler(regs*)+0x7cf>
c001f59c:	50                   	push   eax
c001f59d:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5a0:	53                   	push   ebx
c001f5a1:	68 51 c9 02 c0       	push   0xc002c951
c001f5a6:	e8 16 3a ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f5ab:	58                   	pop    eax
c001f5ac:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f5b0:	5a                   	pop    edx
c001f5b1:	50                   	push   eax
c001f5b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5b6:	50                   	push   eax
c001f5b7:	e8 0b f5 ff ff       	call   c001eac7 <Vm::outbv(unsigned short, unsigned char)>
c001f5bc:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f5c0:	e9 85 00 00 00       	jmp    c001f64a <Vm::faultHandler(regs*)+0x7a1>
c001f5c5:	50                   	push   eax
c001f5c6:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5c9:	53                   	push   ebx
c001f5ca:	68 5a c9 02 c0       	push   0xc002c95a
c001f5cf:	e8 ed 39 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f5d4:	83 c4 10             	add    esp,0x10
c001f5d7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5db:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5e0:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5e3:	74 03                	je     c001f5e8 <Vm::faultHandler(regs*)+0x73f>
c001f5e5:	ef                   	out    dx,eax
c001f5e6:	eb ab                	jmp    c001f593 <Vm::faultHandler(regs*)+0x6ea>
c001f5e8:	66 ef                	out    dx,ax
c001f5ea:	eb a7                	jmp    c001f593 <Vm::faultHandler(regs*)+0x6ea>
c001f5ec:	55                   	push   ebp
c001f5ed:	55                   	push   ebp
c001f5ee:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5f1:	68 63 c9 02 c0       	push   0xc002c963
c001f5f6:	e8 c6 39 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f5fb:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f602:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f606:	89 04 24             	mov    DWORD PTR [esp],eax
c001f609:	e8 a6 f4 ff ff       	call   c001eab4 <Vm::inbv(unsigned short)>
c001f60e:	0f b6 c0             	movzx  eax,al
c001f611:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f614:	eb 31                	jmp    c001f647 <Vm::faultHandler(regs*)+0x79e>
c001f616:	56                   	push   esi
c001f617:	56                   	push   esi
c001f618:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f61b:	68 69 c9 02 c0       	push   0xc002c969
c001f620:	e8 9c 39 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f625:	83 c4 10             	add    esp,0x10
c001f628:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f62b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f630:	74 03                	je     c001f635 <Vm::faultHandler(regs*)+0x78c>
c001f632:	ed                   	in     eax,dx
c001f633:	eb 0d                	jmp    c001f642 <Vm::faultHandler(regs*)+0x799>
c001f635:	66 ed                	in     ax,dx
c001f637:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f63a:	0f b7 c0             	movzx  eax,ax
c001f63d:	66 31 d2             	xor    dx,dx
c001f640:	09 d0                	or     eax,edx
c001f642:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f645:	eb 2e                	jmp    c001f675 <Vm::faultHandler(regs*)+0x7cc>
c001f647:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f64a:	83 c4 10             	add    esp,0x10
c001f64d:	eb 29                	jmp    c001f678 <Vm::faultHandler(regs*)+0x7cf>
c001f64f:	50                   	push   eax
c001f650:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f653:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f656:	68 78 c9 02 c0       	push   0xc002c978
c001f65b:	e8 61 39 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f660:	83 c4 10             	add    esp,0x10
c001f663:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f666:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f66b:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f66e:	74 03                	je     c001f673 <Vm::faultHandler(regs*)+0x7ca>
c001f670:	ef                   	out    dx,eax
c001f671:	eb 02                	jmp    c001f675 <Vm::faultHandler(regs*)+0x7cc>
c001f673:	66 ef                	out    dx,ax
c001f675:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f678:	b0 01                	mov    al,0x1
c001f67a:	eb 56                	jmp    c001f6d2 <Vm::faultHandler(regs*)+0x829>
c001f67c:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f680:	51                   	push   ecx
c001f681:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f685:	51                   	push   ecx
c001f686:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f68a:	51                   	push   ecx
c001f68b:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f68f:	51                   	push   ecx
c001f690:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f694:	52                   	push   edx
c001f695:	50                   	push   eax
c001f696:	50                   	push   eax
c001f697:	68 81 c9 02 c0       	push   0xc002c981
c001f69c:	e8 20 39 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c001f6a1:	83 c4 20             	add    esp,0x20
c001f6a4:	83 ec 0c             	sub    esp,0xc
c001f6a7:	6a 60                	push   0x60
c001f6a9:	e8 06 f4 ff ff       	call   c001eab4 <Vm::inbv(unsigned short)>
c001f6ae:	83 c4 10             	add    esp,0x10
c001f6b1:	3c 1c                	cmp    al,0x1c
c001f6b3:	74 04                	je     c001f6b9 <Vm::faultHandler(regs*)+0x810>
c001f6b5:	3c 5a                	cmp    al,0x5a
c001f6b7:	75 eb                	jne    c001f6a4 <Vm::faultHandler(regs*)+0x7fb>
c001f6b9:	3c 1c                	cmp    al,0x1c
c001f6bb:	74 04                	je     c001f6c1 <Vm::faultHandler(regs*)+0x818>
c001f6bd:	3c 5a                	cmp    al,0x5a
c001f6bf:	75 0f                	jne    c001f6d0 <Vm::faultHandler(regs*)+0x827>
c001f6c1:	83 ec 0c             	sub    esp,0xc
c001f6c4:	6a 60                	push   0x60
c001f6c6:	e8 e9 f3 ff ff       	call   c001eab4 <Vm::inbv(unsigned short)>
c001f6cb:	83 c4 10             	add    esp,0x10
c001f6ce:	eb e9                	jmp    c001f6b9 <Vm::faultHandler(regs*)+0x810>
c001f6d0:	31 c0                	xor    eax,eax
c001f6d2:	83 c4 1c             	add    esp,0x1c
c001f6d5:	5b                   	pop    ebx
c001f6d6:	5e                   	pop    esi
c001f6d7:	5f                   	pop    edi
c001f6d8:	5d                   	pop    ebp
c001f6d9:	c3                   	ret    

c001f6da <Vm::fpuInternalTo32(unsigned long long)>:
c001f6da:	57                   	push   edi
c001f6db:	56                   	push   esi
c001f6dc:	53                   	push   ebx
c001f6dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e5:	89 d6                	mov    esi,edx
c001f6e7:	89 d7                	mov    edi,edx
c001f6e9:	89 c1                	mov    ecx,eax
c001f6eb:	c1 ef 14             	shr    edi,0x14
c001f6ee:	89 d3                	mov    ebx,edx
c001f6f0:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f6f6:	31 d2                	xor    edx,edx
c001f6f8:	89 f8                	mov    eax,edi
c001f6fa:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f700:	bf ff 00 00 00       	mov    edi,0xff
c001f705:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f70a:	83 d2 ff             	adc    edx,0xffffffff
c001f70d:	39 c7                	cmp    edi,eax
c001f70f:	bf 00 00 00 00       	mov    edi,0x0
c001f714:	19 d7                	sbb    edi,edx
c001f716:	72 15                	jb     c001f72d <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f718:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f71c:	c1 e0 17             	shl    eax,0x17
c001f71f:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f725:	09 f1                	or     ecx,esi
c001f727:	09 c1                	or     ecx,eax
c001f729:	89 cf                	mov    edi,ecx
c001f72b:	eb 02                	jmp    c001f72f <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f72d:	31 ff                	xor    edi,edi
c001f72f:	89 f8                	mov    eax,edi
c001f731:	5b                   	pop    ebx
c001f732:	5e                   	pop    esi
c001f733:	5f                   	pop    edi
c001f734:	c3                   	ret    

c001f735 <Vm::fpuInternalTo64(unsigned long long)>:
c001f735:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f739:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f73d:	c3                   	ret    

c001f73e <Vm::fpu32ToInternal(unsigned int)>:
c001f73e:	57                   	push   edi
c001f73f:	31 ff                	xor    edi,edi
c001f741:	56                   	push   esi
c001f742:	53                   	push   ebx
c001f743:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f747:	89 cb                	mov    ebx,ecx
c001f749:	89 ce                	mov    esi,ecx
c001f74b:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f751:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f757:	c1 e9 17             	shr    ecx,0x17
c001f75a:	89 f0                	mov    eax,esi
c001f75c:	0f b6 d1             	movzx  edx,cl
c001f75f:	81 c2 80 03 00 00    	add    edx,0x380
c001f765:	89 d1                	mov    ecx,edx
c001f767:	89 fa                	mov    edx,edi
c001f769:	c1 e1 14             	shl    ecx,0x14
c001f76c:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f770:	c1 e0 1d             	shl    eax,0x1d
c001f773:	89 d7                	mov    edi,edx
c001f775:	89 c6                	mov    esi,eax
c001f777:	89 ca                	mov    edx,ecx
c001f779:	89 f0                	mov    eax,esi
c001f77b:	09 fa                	or     edx,edi
c001f77d:	09 da                	or     edx,ebx
c001f77f:	5b                   	pop    ebx
c001f780:	5e                   	pop    esi
c001f781:	5f                   	pop    edi
c001f782:	c3                   	ret    

c001f783 <Vm::fpu64ToInternal(unsigned long long)>:
c001f783:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f787:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f78b:	c3                   	ret    

c001f78c <Vm::fpuFloatToLong(unsigned long long)>:
c001f78c:	57                   	push   edi
c001f78d:	31 c0                	xor    eax,eax
c001f78f:	56                   	push   esi
c001f790:	31 d2                	xor    edx,edx
c001f792:	53                   	push   ebx
c001f793:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f797:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f79b:	89 d9                	mov    ecx,ebx
c001f79d:	c1 e9 14             	shr    ecx,0x14
c001f7a0:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f7a6:	89 cf                	mov    edi,ecx
c001f7a8:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f7ae:	78 33                	js     c001f7e3 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7b0:	89 d9                	mov    ecx,ebx
c001f7b2:	89 f0                	mov    eax,esi
c001f7b4:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7ba:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f7c0:	89 ca                	mov    edx,ecx
c001f7c2:	b9 34 00 00 00       	mov    ecx,0x34
c001f7c7:	29 f9                	sub    ecx,edi
c001f7c9:	0f ad d0             	shrd   eax,edx,cl
c001f7cc:	d3 fa                	sar    edx,cl
c001f7ce:	f6 c1 20             	test   cl,0x20
c001f7d1:	74 05                	je     c001f7d8 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f7d3:	89 d0                	mov    eax,edx
c001f7d5:	c1 fa 1f             	sar    edx,0x1f
c001f7d8:	85 db                	test   ebx,ebx
c001f7da:	79 07                	jns    c001f7e3 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7dc:	f7 d8                	neg    eax
c001f7de:	83 d2 00             	adc    edx,0x0
c001f7e1:	f7 da                	neg    edx
c001f7e3:	5b                   	pop    ebx
c001f7e4:	5e                   	pop    esi
c001f7e5:	5f                   	pop    edi
c001f7e6:	c3                   	ret    

c001f7e7 <Vm::fpuULongToFloat(unsigned long long)>:
c001f7e7:	57                   	push   edi
c001f7e8:	31 c9                	xor    ecx,ecx
c001f7ea:	56                   	push   esi
c001f7eb:	53                   	push   ebx
c001f7ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7f0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f7f4:	0f ba e7 14          	bt     edi,0x14
c001f7f8:	72 07                	jb     c001f801 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f7fa:	01 f6                	add    esi,esi
c001f7fc:	11 ff                	adc    edi,edi
c001f7fe:	41                   	inc    ecx
c001f7ff:	eb f3                	jmp    c001f7f4 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f801:	89 fa                	mov    edx,edi
c001f803:	89 f0                	mov    eax,esi
c001f805:	bb 33 04 00 00       	mov    ebx,0x433
c001f80a:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f810:	29 cb                	sub    ebx,ecx
c001f812:	89 d9                	mov    ecx,ebx
c001f814:	5b                   	pop    ebx
c001f815:	c1 e1 14             	shl    ecx,0x14
c001f818:	5e                   	pop    esi
c001f819:	09 ca                	or     edx,ecx
c001f81b:	5f                   	pop    edi
c001f81c:	c3                   	ret    

c001f81d <Vm::fpuLongToFloat(long long)>:
c001f81d:	56                   	push   esi
c001f81e:	31 c0                	xor    eax,eax
c001f820:	53                   	push   ebx
c001f821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f829:	39 c8                	cmp    eax,ecx
c001f82b:	19 d8                	sbb    eax,ebx
c001f82d:	7d 04                	jge    c001f833 <Vm::fpuLongToFloat(long long)+0x16>
c001f82f:	31 f6                	xor    esi,esi
c001f831:	eb 0c                	jmp    c001f83f <Vm::fpuLongToFloat(long long)+0x22>
c001f833:	f7 d9                	neg    ecx
c001f835:	be 01 00 00 00       	mov    esi,0x1
c001f83a:	83 d3 00             	adc    ebx,0x0
c001f83d:	f7 db                	neg    ebx
c001f83f:	31 c0                	xor    eax,eax
c001f841:	0f ba e3 14          	bt     ebx,0x14
c001f845:	72 07                	jb     c001f84e <Vm::fpuLongToFloat(long long)+0x31>
c001f847:	01 c9                	add    ecx,ecx
c001f849:	11 db                	adc    ebx,ebx
c001f84b:	40                   	inc    eax
c001f84c:	eb f3                	jmp    c001f841 <Vm::fpuLongToFloat(long long)+0x24>
c001f84e:	ba 33 04 00 00       	mov    edx,0x433
c001f853:	29 c2                	sub    edx,eax
c001f855:	89 c8                	mov    eax,ecx
c001f857:	c1 e2 14             	shl    edx,0x14
c001f85a:	89 d9                	mov    ecx,ebx
c001f85c:	89 f3                	mov    ebx,esi
c001f85e:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f864:	09 ca                	or     edx,ecx
c001f866:	84 db                	test   bl,bl
c001f868:	74 06                	je     c001f870 <Vm::fpuLongToFloat(long long)+0x53>
c001f86a:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f870:	5b                   	pop    ebx
c001f871:	5e                   	pop    esi
c001f872:	c3                   	ret    

c001f873 <Vm::fpuGet0()>:
c001f873:	31 c0                	xor    eax,eax
c001f875:	31 d2                	xor    edx,edx
c001f877:	c3                   	ret    

c001f878 <Vm::fpuGet1()>:
c001f878:	b8 01 00 00 00       	mov    eax,0x1
c001f87d:	31 d2                	xor    edx,edx
c001f87f:	c3                   	ret    

c001f880 <Vm::fpuGetPi()>:
c001f880:	b8 03 00 00 00       	mov    eax,0x3
c001f885:	31 d2                	xor    edx,edx
c001f887:	c3                   	ret    

c001f888 <Vm::fpuGetLog2E()>:
c001f888:	83 ec 18             	sub    esp,0x18
c001f88b:	68 e0 c9 02 c0       	push   0xc002c9e0
c001f890:	e8 de ad ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001f895:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f89a:	31 d2                	xor    edx,edx
c001f89c:	83 c4 1c             	add    esp,0x1c
c001f89f:	c3                   	ret    

c001f8a0 <Vm::fpuGetLogE2()>:
c001f8a0:	83 ec 18             	sub    esp,0x18
c001f8a3:	68 ec c9 02 c0       	push   0xc002c9ec
c001f8a8:	e8 c6 ad ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001f8ad:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8b2:	31 d2                	xor    edx,edx
c001f8b4:	83 c4 1c             	add    esp,0x1c
c001f8b7:	c3                   	ret    

c001f8b8 <Vm::fpuGetLog210()>:
c001f8b8:	83 ec 18             	sub    esp,0x18
c001f8bb:	68 f8 c9 02 c0       	push   0xc002c9f8
c001f8c0:	e8 ae ad ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001f8c5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8ca:	31 d2                	xor    edx,edx
c001f8cc:	83 c4 1c             	add    esp,0x1c
c001f8cf:	c3                   	ret    

c001f8d0 <Vm::fpuGetLog102()>:
c001f8d0:	83 ec 18             	sub    esp,0x18
c001f8d3:	68 05 ca 02 c0       	push   0xc002ca05
c001f8d8:	e8 96 ad ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001f8dd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8e2:	31 d2                	xor    edx,edx
c001f8e4:	83 c4 1c             	add    esp,0x1c
c001f8e7:	c3                   	ret    

c001f8e8 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f8e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8ec:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f8f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8f4:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f8f8:	0f 92 c0             	setb   al
c001f8fb:	c3                   	ret    

c001f8fc <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f8fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f904:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f908:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f90c:	09 c2                	or     edx,eax
c001f90e:	0f 94 c0             	sete   al
c001f911:	c3                   	ret    

c001f912 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f912:	57                   	push   edi
c001f913:	56                   	push   esi
c001f914:	53                   	push   ebx
c001f915:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f919:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f91d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f921:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f925:	57                   	push   edi
c001f926:	56                   	push   esi
c001f927:	53                   	push   ebx
c001f928:	51                   	push   ecx
c001f929:	e8 ce ff ff ff       	call   c001f8fc <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f92e:	83 c4 10             	add    esp,0x10
c001f931:	88 c2                	mov    dl,al
c001f933:	31 c0                	xor    eax,eax
c001f935:	84 d2                	test   dl,dl
c001f937:	75 0c                	jne    c001f945 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f939:	57                   	push   edi
c001f93a:	56                   	push   esi
c001f93b:	53                   	push   ebx
c001f93c:	51                   	push   ecx
c001f93d:	e8 a6 ff ff ff       	call   c001f8e8 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f942:	83 c4 10             	add    esp,0x10
c001f945:	83 e0 01             	and    eax,0x1
c001f948:	5b                   	pop    ebx
c001f949:	88 c1                	mov    cl,al
c001f94b:	83 e2 01             	and    edx,0x1
c001f94e:	a0 61 1c 03 c0       	mov    al,ds:0xc0031c61
c001f953:	c1 e2 06             	shl    edx,0x6
c001f956:	83 e0 ba             	and    eax,0xffffffba
c001f959:	5e                   	pop    esi
c001f95a:	09 c8                	or     eax,ecx
c001f95c:	5f                   	pop    edi
c001f95d:	09 d0                	or     eax,edx
c001f95f:	a2 61 1c 03 c0       	mov    ds:0xc0031c61,al
c001f964:	c3                   	ret    

c001f965 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f965:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f969:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f96d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f971:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f975:	c3                   	ret    

c001f976 <Vm::fpuAbs(unsigned long long)>:
c001f976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f97a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f97e:	c3                   	ret    

c001f97f <Vm::fpuChs(unsigned long long)>:
c001f97f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f983:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f987:	f7 d8                	neg    eax
c001f989:	83 d2 00             	adc    edx,0x0
c001f98c:	f7 da                	neg    edx
c001f98e:	c3                   	ret    

c001f98f <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f98f:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f993:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f998:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f99c:	eb c7                	jmp    c001f965 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f99e <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f99e:	53                   	push   ebx
c001f99f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f9ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f9af:	0f af ca             	imul   ecx,edx
c001f9b2:	0f af d8             	imul   ebx,eax
c001f9b5:	f7 e2                	mul    edx
c001f9b7:	01 d9                	add    ecx,ebx
c001f9b9:	5b                   	pop    ebx
c001f9ba:	01 ca                	add    edx,ecx
c001f9bc:	c3                   	ret    

c001f9bd <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f9bd:	83 ec 0c             	sub    esp,0xc
c001f9c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9d0:	e8 a7 70 00 00       	call   c0026a7c <__udivdi3>
c001f9d5:	83 c4 1c             	add    esp,0x1c
c001f9d8:	c3                   	ret    

c001f9d9 <Vm::fpuSquare(unsigned long long)>:
c001f9d9:	50                   	push   eax
c001f9da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f9e2:	52                   	push   edx
c001f9e3:	50                   	push   eax
c001f9e4:	52                   	push   edx
c001f9e5:	50                   	push   eax
c001f9e6:	e8 b3 ff ff ff       	call   c001f99e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f9eb:	83 c4 14             	add    esp,0x14
c001f9ee:	c3                   	ret    

c001f9ef <Vm::fpuGetReg(int)>:
c001f9ef:	83 ec 0c             	sub    esp,0xc
c001f9f2:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9f7:	76 10                	jbe    c001fa09 <Vm::fpuGetReg(int)+0x1a>
c001f9f9:	83 ec 0c             	sub    esp,0xc
c001f9fc:	68 12 ca 02 c0       	push   0xc002ca12
c001fa01:	e8 6d ac ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001fa06:	83 c4 10             	add    esp,0x10
c001fa09:	a0 61 1c 03 c0       	mov    al,ds:0xc0031c61
c001fa0e:	b9 08 00 00 00       	mov    ecx,0x8
c001fa13:	c0 e8 03             	shr    al,0x3
c001fa16:	83 e0 07             	and    eax,0x7
c001fa19:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa1d:	99                   	cdq    
c001fa1e:	f7 f9                	idiv   ecx
c001fa20:	8b 04 d5 64 1c 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce39c]
c001fa27:	8b 14 d5 68 1c 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce398]
c001fa2e:	83 c4 0c             	add    esp,0xc
c001fa31:	c3                   	ret    

c001fa32 <Vm::fpuSetReg(int, unsigned long long)>:
c001fa32:	57                   	push   edi
c001fa33:	56                   	push   esi
c001fa34:	52                   	push   edx
c001fa35:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa39:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa3d:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa42:	76 10                	jbe    c001fa54 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa44:	83 ec 0c             	sub    esp,0xc
c001fa47:	68 25 ca 02 c0       	push   0xc002ca25
c001fa4c:	e8 22 ac ff ff       	call   c001a673 <Krnl::panic(char const*)>
c001fa51:	83 c4 10             	add    esp,0x10
c001fa54:	a0 61 1c 03 c0       	mov    al,ds:0xc0031c61
c001fa59:	b9 08 00 00 00       	mov    ecx,0x8
c001fa5e:	c0 e8 03             	shr    al,0x3
c001fa61:	83 e0 07             	and    eax,0x7
c001fa64:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa68:	99                   	cdq    
c001fa69:	f7 f9                	idiv   ecx
c001fa6b:	89 34 d5 64 1c 03 c0 	mov    DWORD PTR [edx*8-0x3ffce39c],esi
c001fa72:	89 3c d5 68 1c 03 c0 	mov    DWORD PTR [edx*8-0x3ffce398],edi
c001fa79:	58                   	pop    eax
c001fa7a:	5e                   	pop    esi
c001fa7b:	5f                   	pop    edi
c001fa7c:	c3                   	ret    

c001fa7d <Vm::fpuPush(unsigned long long)>:
c001fa7d:	a0 61 1c 03 c0       	mov    al,ds:0xc0031c61
c001fa82:	c0 e8 03             	shr    al,0x3
c001fa85:	83 e0 07             	and    eax,0x7
c001fa88:	83 c0 07             	add    eax,0x7
c001fa8b:	88 c2                	mov    dl,al
c001fa8d:	83 e0 07             	and    eax,0x7
c001fa90:	83 e2 07             	and    edx,0x7
c001fa93:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa9a:	8a 15 61 1c 03 c0    	mov    dl,BYTE PTR ds:0xc0031c61
c001faa0:	83 e2 c7             	and    edx,0xffffffc7
c001faa3:	09 ca                	or     edx,ecx
c001faa5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001faa9:	88 15 61 1c 03 c0    	mov    BYTE PTR ds:0xc0031c61,dl
c001faaf:	89 0c c5 68 1c 03 c0 	mov    DWORD PTR [eax*8-0x3ffce398],ecx
c001fab6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001faba:	89 14 c5 64 1c 03 c0 	mov    DWORD PTR [eax*8-0x3ffce39c],edx
c001fac1:	a1 a4 1c 03 c0       	mov    eax,ds:0xc0031ca4
c001fac6:	83 f8 08             	cmp    eax,0x8
c001fac9:	75 08                	jne    c001fad3 <Vm::fpuPush(unsigned long long)+0x56>
c001facb:	80 0d 60 1c 03 c0 40 	or     BYTE PTR ds:0xc0031c60,0x40
c001fad2:	c3                   	ret    
c001fad3:	40                   	inc    eax
c001fad4:	a3 a4 1c 03 c0       	mov    ds:0xc0031ca4,eax
c001fad9:	c3                   	ret    

c001fada <Vm::fpuPop()>:
c001fada:	8a 0d 61 1c 03 c0    	mov    cl,BYTE PTR ds:0xc0031c61
c001fae0:	53                   	push   ebx
c001fae1:	c0 e9 03             	shr    cl,0x3
c001fae4:	8a 1d 61 1c 03 c0    	mov    bl,BYTE PTR ds:0xc0031c61
c001faea:	83 e1 07             	and    ecx,0x7
c001faed:	83 e3 c7             	and    ebx,0xffffffc7
c001faf0:	8b 04 cd 64 1c 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce39c]
c001faf7:	8b 14 cd 68 1c 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce398]
c001fafe:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fb05:	83 e1 38             	and    ecx,0x38
c001fb08:	09 d9                	or     ecx,ebx
c001fb0a:	88 0d 61 1c 03 c0    	mov    BYTE PTR ds:0xc0031c61,cl
c001fb10:	8b 0d a4 1c 03 c0    	mov    ecx,DWORD PTR ds:0xc0031ca4
c001fb16:	85 c9                	test   ecx,ecx
c001fb18:	74 09                	je     c001fb23 <Vm::fpuPop()+0x49>
c001fb1a:	49                   	dec    ecx
c001fb1b:	89 0d a4 1c 03 c0    	mov    DWORD PTR ds:0xc0031ca4,ecx
c001fb21:	eb 07                	jmp    c001fb2a <Vm::fpuPop()+0x50>
c001fb23:	80 0d 60 1c 03 c0 40 	or     BYTE PTR ds:0xc0031c60,0x40
c001fb2a:	5b                   	pop    ebx
c001fb2b:	c3                   	ret    

c001fb2c <Vm::x87Handler(regs*)>:
c001fb2c:	55                   	push   ebp
c001fb2d:	57                   	push   edi
c001fb2e:	56                   	push   esi
c001fb2f:	53                   	push   ebx
c001fb30:	83 ec 1c             	sub    esp,0x1c
c001fb33:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb37:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fb3c:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb3f:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb47:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb4b:	50                   	push   eax
c001fb4c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb50:	50                   	push   eax
c001fb51:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb55:	50                   	push   eax
c001fb56:	53                   	push   ebx
c001fb57:	e8 de a1 ff ff       	call   c0019d3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb5c:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fb5f:	83 c4 10             	add    esp,0x10
c001fb62:	89 c6                	mov    esi,eax
c001fb64:	80 fa d9             	cmp    dl,0xd9
c001fb67:	0f 85 52 01 00 00    	jne    c001fcbf <Vm::x87Handler(regs*)+0x193>
c001fb6d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb71:	8d 50 20             	lea    edx,[eax+0x20]
c001fb74:	80 fa 0e             	cmp    dl,0xe
c001fb77:	0f 87 86 00 00 00    	ja     c001fc03 <Vm::x87Handler(regs*)+0xd7>
c001fb7d:	0f b6 d2             	movzx  edx,dl
c001fb80:	ff 24 95 38 ca 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd35c8]
c001fb87:	e8 e7 fc ff ff       	call   c001f873 <Vm::fpuGet0()>
c001fb8c:	eb 05                	jmp    c001fb93 <Vm::x87Handler(regs*)+0x67>
c001fb8e:	e8 e5 fc ff ff       	call   c001f878 <Vm::fpuGet1()>
c001fb93:	57                   	push   edi
c001fb94:	57                   	push   edi
c001fb95:	52                   	push   edx
c001fb96:	50                   	push   eax
c001fb97:	e8 e1 fe ff ff       	call   c001fa7d <Vm::fpuPush(unsigned long long)>
c001fb9c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fba0:	83 c4 10             	add    esp,0x10
c001fba3:	b0 01                	mov    al,0x1
c001fba5:	e9 e3 09 00 00       	jmp    c002058d <Vm::x87Handler(regs*)+0xa61>
c001fbaa:	83 ec 0c             	sub    esp,0xc
c001fbad:	6a 00                	push   0x0
c001fbaf:	e8 3b fe ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001fbb4:	59                   	pop    ecx
c001fbb5:	5e                   	pop    esi
c001fbb6:	52                   	push   edx
c001fbb7:	50                   	push   eax
c001fbb8:	e8 c2 fd ff ff       	call   c001f97f <Vm::fpuChs(unsigned long long)>
c001fbbd:	eb 13                	jmp    c001fbd2 <Vm::x87Handler(regs*)+0xa6>
c001fbbf:	83 ec 0c             	sub    esp,0xc
c001fbc2:	6a 00                	push   0x0
c001fbc4:	e8 26 fe ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001fbc9:	5f                   	pop    edi
c001fbca:	5d                   	pop    ebp
c001fbcb:	52                   	push   edx
c001fbcc:	50                   	push   eax
c001fbcd:	e8 a4 fd ff ff       	call   c001f976 <Vm::fpuAbs(unsigned long long)>
c001fbd2:	83 c4 0c             	add    esp,0xc
c001fbd5:	52                   	push   edx
c001fbd6:	50                   	push   eax
c001fbd7:	6a 00                	push   0x0
c001fbd9:	e8 54 fe ff ff       	call   c001fa32 <Vm::fpuSetReg(int, unsigned long long)>
c001fbde:	eb bc                	jmp    c001fb9c <Vm::x87Handler(regs*)+0x70>
c001fbe0:	e8 d3 fc ff ff       	call   c001f8b8 <Vm::fpuGetLog210()>
c001fbe5:	eb ac                	jmp    c001fb93 <Vm::x87Handler(regs*)+0x67>
c001fbe7:	e8 9c fc ff ff       	call   c001f888 <Vm::fpuGetLog2E()>
c001fbec:	eb a5                	jmp    c001fb93 <Vm::x87Handler(regs*)+0x67>
c001fbee:	e8 8d fc ff ff       	call   c001f880 <Vm::fpuGetPi()>
c001fbf3:	eb 9e                	jmp    c001fb93 <Vm::x87Handler(regs*)+0x67>
c001fbf5:	e8 d6 fc ff ff       	call   c001f8d0 <Vm::fpuGetLog102()>
c001fbfa:	eb 97                	jmp    c001fb93 <Vm::x87Handler(regs*)+0x67>
c001fbfc:	e8 9f fc ff ff       	call   c001f8a0 <Vm::fpuGetLogE2()>
c001fc01:	eb 90                	jmp    c001fb93 <Vm::x87Handler(regs*)+0x67>
c001fc03:	8d 50 40             	lea    edx,[eax+0x40]
c001fc06:	80 fa 07             	cmp    dl,0x7
c001fc09:	77 15                	ja     c001fc20 <Vm::x87Handler(regs*)+0xf4>
c001fc0b:	83 ec 0c             	sub    esp,0xc
c001fc0e:	2d c0 00 00 00       	sub    eax,0xc0
c001fc13:	50                   	push   eax
c001fc14:	e8 d6 fd ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001fc19:	59                   	pop    ecx
c001fc1a:	5e                   	pop    esi
c001fc1b:	e9 75 ff ff ff       	jmp    c001fb95 <Vm::x87Handler(regs*)+0x69>
c001fc20:	8d 50 38             	lea    edx,[eax+0x38]
c001fc23:	80 fa 07             	cmp    dl,0x7
c001fc26:	77 3c                	ja     c001fc64 <Vm::x87Handler(regs*)+0x138>
c001fc28:	83 ec 0c             	sub    esp,0xc
c001fc2b:	2d c8 00 00 00       	sub    eax,0xc8
c001fc30:	50                   	push   eax
c001fc31:	e8 b9 fd ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001fc36:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc3d:	89 c6                	mov    esi,eax
c001fc3f:	89 d7                	mov    edi,edx
c001fc41:	e8 a9 fd ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001fc46:	83 c4 0c             	add    esp,0xc
c001fc49:	52                   	push   edx
c001fc4a:	50                   	push   eax
c001fc4b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc4f:	2d c8 00 00 00       	sub    eax,0xc8
c001fc54:	50                   	push   eax
c001fc55:	e8 d8 fd ff ff       	call   c001fa32 <Vm::fpuSetReg(int, unsigned long long)>
c001fc5a:	83 c4 0c             	add    esp,0xc
c001fc5d:	57                   	push   edi
c001fc5e:	56                   	push   esi
c001fc5f:	e9 73 ff ff ff       	jmp    c001fbd7 <Vm::x87Handler(regs*)+0xab>
c001fc64:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc68:	84 d2                	test   dl,dl
c001fc6a:	75 0f                	jne    c001fc7b <Vm::x87Handler(regs*)+0x14f>
c001fc6c:	83 ec 0c             	sub    esp,0xc
c001fc6f:	ff 36                	push   DWORD PTR [esi]
c001fc71:	e8 c8 fa ff ff       	call   c001f73e <Vm::fpu32ToInternal(unsigned int)>
c001fc76:	e9 bf 00 00 00       	jmp    c001fd3a <Vm::x87Handler(regs*)+0x20e>
c001fc7b:	80 fa 03             	cmp    dl,0x3
c001fc7e:	75 13                	jne    c001fc93 <Vm::x87Handler(regs*)+0x167>
c001fc80:	e8 55 fe ff ff       	call   c001fada <Vm::fpuPop()>
c001fc85:	55                   	push   ebp
c001fc86:	55                   	push   ebp
c001fc87:	52                   	push   edx
c001fc88:	50                   	push   eax
c001fc89:	e8 4c fa ff ff       	call   c001f6da <Vm::fpuInternalTo32(unsigned long long)>
c001fc8e:	e9 88 00 00 00       	jmp    c001fd1b <Vm::x87Handler(regs*)+0x1ef>
c001fc93:	80 fa 05             	cmp    dl,0x5
c001fc96:	75 0e                	jne    c001fca6 <Vm::x87Handler(regs*)+0x17a>
c001fc98:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc9b:	66 a3 62 1c 03 c0    	mov    ds:0xc0031c62,ax
c001fca1:	e9 df 00 00 00       	jmp    c001fd85 <Vm::x87Handler(regs*)+0x259>
c001fca6:	31 c0                	xor    eax,eax
c001fca8:	80 fa 07             	cmp    dl,0x7
c001fcab:	0f 85 dc 08 00 00    	jne    c002058d <Vm::x87Handler(regs*)+0xa61>
c001fcb1:	66 a1 62 1c 03 c0    	mov    ax,ds:0xc0031c62
c001fcb7:	66 89 06             	mov    WORD PTR [esi],ax
c001fcba:	e9 c6 00 00 00       	jmp    c001fd85 <Vm::x87Handler(regs*)+0x259>
c001fcbf:	80 fa d8             	cmp    dl,0xd8
c001fcc2:	0f 84 c9 00 00 00    	je     c001fd91 <Vm::x87Handler(regs*)+0x265>
c001fcc8:	80 fa dc             	cmp    dl,0xdc
c001fccb:	0f 84 0d 02 00 00    	je     c001fede <Vm::x87Handler(regs*)+0x3b2>
c001fcd1:	80 fa de             	cmp    dl,0xde
c001fcd4:	0f 84 cd 02 00 00    	je     c001ffa7 <Vm::x87Handler(regs*)+0x47b>
c001fcda:	80 fa dd             	cmp    dl,0xdd
c001fcdd:	0f 84 5f 04 00 00    	je     c0020142 <Vm::x87Handler(regs*)+0x616>
c001fce3:	80 fa da             	cmp    dl,0xda
c001fce6:	0f 84 24 05 00 00    	je     c0020210 <Vm::x87Handler(regs*)+0x6e4>
c001fcec:	80 fa df             	cmp    dl,0xdf
c001fcef:	0f 84 68 05 00 00    	je     c002025d <Vm::x87Handler(regs*)+0x731>
c001fcf5:	31 c0                	xor    eax,eax
c001fcf7:	80 fa db             	cmp    dl,0xdb
c001fcfa:	0f 85 8d 08 00 00    	jne    c002058d <Vm::x87Handler(regs*)+0xa61>
c001fd00:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd04:	80 fa 03             	cmp    dl,0x3
c001fd07:	0f 85 70 06 00 00    	jne    c002037d <Vm::x87Handler(regs*)+0x851>
c001fd0d:	e8 c8 fd ff ff       	call   c001fada <Vm::fpuPop()>
c001fd12:	55                   	push   ebp
c001fd13:	55                   	push   ebp
c001fd14:	52                   	push   edx
c001fd15:	50                   	push   eax
c001fd16:	e8 71 fa ff ff       	call   c001f78c <Vm::fpuFloatToLong(unsigned long long)>
c001fd1b:	83 c4 10             	add    esp,0x10
c001fd1e:	89 06                	mov    DWORD PTR [esi],eax
c001fd20:	eb 63                	jmp    c001fd85 <Vm::x87Handler(regs*)+0x259>
c001fd22:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd26:	84 d2                	test   dl,dl
c001fd28:	0f 85 e6 05 00 00    	jne    c0020314 <Vm::x87Handler(regs*)+0x7e8>
c001fd2e:	57                   	push   edi
c001fd2f:	57                   	push   edi
c001fd30:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd33:	ff 36                	push   DWORD PTR [esi]
c001fd35:	e8 49 fa ff ff       	call   c001f783 <Vm::fpu64ToInternal(unsigned long long)>
c001fd3a:	5e                   	pop    esi
c001fd3b:	5f                   	pop    edi
c001fd3c:	52                   	push   edx
c001fd3d:	50                   	push   eax
c001fd3e:	e8 3a fd ff ff       	call   c001fa7d <Vm::fpuPush(unsigned long long)>
c001fd43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd47:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd4a:	e9 51 fe ff ff       	jmp    c001fba0 <Vm::x87Handler(regs*)+0x74>
c001fd4f:	80 fa 03             	cmp    dl,0x3
c001fd52:	0f 85 d7 06 00 00    	jne    c002042f <Vm::x87Handler(regs*)+0x903>
c001fd58:	57                   	push   edi
c001fd59:	57                   	push   edi
c001fd5a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd5d:	ff 36                	push   DWORD PTR [esi]
c001fd5f:	e8 1f fa ff ff       	call   c001f783 <Vm::fpu64ToInternal(unsigned long long)>
c001fd64:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd6b:	89 c6                	mov    esi,eax
c001fd6d:	89 d7                	mov    edi,edx
c001fd6f:	e8 7b fc ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001fd74:	57                   	push   edi
c001fd75:	56                   	push   esi
c001fd76:	52                   	push   edx
c001fd77:	50                   	push   eax
c001fd78:	e8 95 fb ff ff       	call   c001f912 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd7d:	83 c4 20             	add    esp,0x20
c001fd80:	e8 55 fd ff ff       	call   c001fada <Vm::fpuPop()>
c001fd85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd89:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd8c:	e9 12 fe ff ff       	jmp    c001fba3 <Vm::x87Handler(regs*)+0x77>
c001fd91:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd95:	8d 50 40             	lea    edx,[eax+0x40]
c001fd98:	80 fa 07             	cmp    dl,0x7
c001fd9b:	77 29                	ja     c001fdc6 <Vm::x87Handler(regs*)+0x29a>
c001fd9d:	83 ec 0c             	sub    esp,0xc
c001fda0:	2d c0 00 00 00       	sub    eax,0xc0
c001fda5:	50                   	push   eax
c001fda6:	e8 44 fc ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001fdab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdb2:	89 c6                	mov    esi,eax
c001fdb4:	89 d7                	mov    edi,edx
c001fdb6:	e8 34 fc ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001fdbb:	57                   	push   edi
c001fdbc:	56                   	push   esi
c001fdbd:	52                   	push   edx
c001fdbe:	50                   	push   eax
c001fdbf:	e8 a1 fb ff ff       	call   c001f965 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fdc4:	eb 2f                	jmp    c001fdf5 <Vm::x87Handler(regs*)+0x2c9>
c001fdc6:	8d 50 38             	lea    edx,[eax+0x38]
c001fdc9:	80 fa 07             	cmp    dl,0x7
c001fdcc:	77 2f                	ja     c001fdfd <Vm::x87Handler(regs*)+0x2d1>
c001fdce:	83 ec 0c             	sub    esp,0xc
c001fdd1:	2d c8 00 00 00       	sub    eax,0xc8
c001fdd6:	50                   	push   eax
c001fdd7:	e8 13 fc ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001fddc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fde3:	89 c6                	mov    esi,eax
c001fde5:	89 d7                	mov    edi,edx
c001fde7:	e8 03 fc ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001fdec:	57                   	push   edi
c001fded:	56                   	push   esi
c001fdee:	52                   	push   edx
c001fdef:	50                   	push   eax
c001fdf0:	e8 a9 fb ff ff       	call   c001f99e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdf5:	83 c4 1c             	add    esp,0x1c
c001fdf8:	e9 d8 fd ff ff       	jmp    c001fbd5 <Vm::x87Handler(regs*)+0xa9>
c001fdfd:	8d 50 30             	lea    edx,[eax+0x30]
c001fe00:	80 fa 07             	cmp    dl,0x7
c001fe03:	77 0d                	ja     c001fe12 <Vm::x87Handler(regs*)+0x2e6>
c001fe05:	83 ec 0c             	sub    esp,0xc
c001fe08:	2d d0 00 00 00       	sub    eax,0xd0
c001fe0d:	e9 99 03 00 00       	jmp    c00201ab <Vm::x87Handler(regs*)+0x67f>
c001fe12:	8d 50 28             	lea    edx,[eax+0x28]
c001fe15:	80 fa 07             	cmp    dl,0x7
c001fe18:	77 0d                	ja     c001fe27 <Vm::x87Handler(regs*)+0x2fb>
c001fe1a:	83 ec 0c             	sub    esp,0xc
c001fe1d:	2d d8 00 00 00       	sub    eax,0xd8
c001fe22:	e9 c0 03 00 00       	jmp    c00201e7 <Vm::x87Handler(regs*)+0x6bb>
c001fe27:	8d 50 20             	lea    edx,[eax+0x20]
c001fe2a:	80 fa 07             	cmp    dl,0x7
c001fe2d:	77 1b                	ja     c001fe4a <Vm::x87Handler(regs*)+0x31e>
c001fe2f:	83 ec 0c             	sub    esp,0xc
c001fe32:	2d e0 00 00 00       	sub    eax,0xe0
c001fe37:	50                   	push   eax
c001fe38:	e8 b2 fb ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001fe3d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe44:	89 c6                	mov    esi,eax
c001fe46:	89 d7                	mov    edi,edx
c001fe48:	eb 22                	jmp    c001fe6c <Vm::x87Handler(regs*)+0x340>
c001fe4a:	8d 50 18             	lea    edx,[eax+0x18]
c001fe4d:	80 fa 07             	cmp    dl,0x7
c001fe50:	77 2d                	ja     c001fe7f <Vm::x87Handler(regs*)+0x353>
c001fe52:	83 ec 0c             	sub    esp,0xc
c001fe55:	6a 00                	push   0x0
c001fe57:	e8 93 fb ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001fe5c:	89 c6                	mov    esi,eax
c001fe5e:	89 d7                	mov    edi,edx
c001fe60:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe64:	2d e8 00 00 00       	sub    eax,0xe8
c001fe69:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe6c:	e8 7e fb ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001fe71:	57                   	push   edi
c001fe72:	56                   	push   esi
c001fe73:	52                   	push   edx
c001fe74:	50                   	push   eax
c001fe75:	e8 15 fb ff ff       	call   c001f98f <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe7a:	e9 76 ff ff ff       	jmp    c001fdf5 <Vm::x87Handler(regs*)+0x2c9>
c001fe7f:	8d 50 10             	lea    edx,[eax+0x10]
c001fe82:	80 fa 07             	cmp    dl,0x7
c001fe85:	77 1b                	ja     c001fea2 <Vm::x87Handler(regs*)+0x376>
c001fe87:	83 ec 0c             	sub    esp,0xc
c001fe8a:	2d f0 00 00 00       	sub    eax,0xf0
c001fe8f:	50                   	push   eax
c001fe90:	e8 5a fb ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001fe95:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe9c:	89 c6                	mov    esi,eax
c001fe9e:	89 d7                	mov    edi,edx
c001fea0:	eb 22                	jmp    c001fec4 <Vm::x87Handler(regs*)+0x398>
c001fea2:	3c f7                	cmp    al,0xf7
c001fea4:	0f 86 d1 03 00 00    	jbe    c002027b <Vm::x87Handler(regs*)+0x74f>
c001feaa:	83 ec 0c             	sub    esp,0xc
c001fead:	6a 00                	push   0x0
c001feaf:	e8 3b fb ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001feb4:	89 c6                	mov    esi,eax
c001feb6:	89 d7                	mov    edi,edx
c001feb8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001febc:	2d f8 00 00 00       	sub    eax,0xf8
c001fec1:	89 04 24             	mov    DWORD PTR [esp],eax
c001fec4:	e8 26 fb ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001fec9:	57                   	push   edi
c001feca:	56                   	push   esi
c001fecb:	52                   	push   edx
c001fecc:	50                   	push   eax
c001fecd:	e8 eb fa ff ff       	call   c001f9bd <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fed2:	83 c4 1c             	add    esp,0x1c
c001fed5:	52                   	push   edx
c001fed6:	50                   	push   eax
c001fed7:	6a 00                	push   0x0
c001fed9:	e9 51 02 00 00       	jmp    c002012f <Vm::x87Handler(regs*)+0x603>
c001fede:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee2:	8d 50 40             	lea    edx,[eax+0x40]
c001fee5:	80 fa 07             	cmp    dl,0x7
c001fee8:	77 37                	ja     c001ff21 <Vm::x87Handler(regs*)+0x3f5>
c001feea:	83 ec 0c             	sub    esp,0xc
c001feed:	2d c0 00 00 00       	sub    eax,0xc0
c001fef2:	50                   	push   eax
c001fef3:	e8 f7 fa ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001fef8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feff:	89 c6                	mov    esi,eax
c001ff01:	89 d7                	mov    edi,edx
c001ff03:	e8 e7 fa ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001ff08:	57                   	push   edi
c001ff09:	56                   	push   esi
c001ff0a:	52                   	push   edx
c001ff0b:	50                   	push   eax
c001ff0c:	e8 54 fa ff ff       	call   c001f965 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff11:	83 c4 1c             	add    esp,0x1c
c001ff14:	52                   	push   edx
c001ff15:	50                   	push   eax
c001ff16:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff1a:	2d c0 00 00 00       	sub    eax,0xc0
c001ff1f:	eb 3d                	jmp    c001ff5e <Vm::x87Handler(regs*)+0x432>
c001ff21:	8d 50 38             	lea    edx,[eax+0x38]
c001ff24:	80 fa 07             	cmp    dl,0x7
c001ff27:	77 3b                	ja     c001ff64 <Vm::x87Handler(regs*)+0x438>
c001ff29:	83 ec 0c             	sub    esp,0xc
c001ff2c:	2d c8 00 00 00       	sub    eax,0xc8
c001ff31:	50                   	push   eax
c001ff32:	e8 b8 fa ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001ff37:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff3e:	89 c6                	mov    esi,eax
c001ff40:	89 d7                	mov    edi,edx
c001ff42:	e8 a8 fa ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001ff47:	57                   	push   edi
c001ff48:	56                   	push   esi
c001ff49:	52                   	push   edx
c001ff4a:	50                   	push   eax
c001ff4b:	e8 4e fa ff ff       	call   c001f99e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff50:	83 c4 1c             	add    esp,0x1c
c001ff53:	52                   	push   edx
c001ff54:	50                   	push   eax
c001ff55:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff59:	2d c8 00 00 00       	sub    eax,0xc8
c001ff5e:	50                   	push   eax
c001ff5f:	e9 75 fc ff ff       	jmp    c001fbd9 <Vm::x87Handler(regs*)+0xad>
c001ff64:	83 c0 18             	add    eax,0x18
c001ff67:	3c 07                	cmp    al,0x7
c001ff69:	0f 87 3b 04 00 00    	ja     c00203aa <Vm::x87Handler(regs*)+0x87e>
c001ff6f:	83 ec 0c             	sub    esp,0xc
c001ff72:	6a 00                	push   0x0
c001ff74:	e8 76 fa ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001ff79:	89 c6                	mov    esi,eax
c001ff7b:	89 d7                	mov    edi,edx
c001ff7d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff81:	2d e8 00 00 00       	sub    eax,0xe8
c001ff86:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff89:	e8 61 fa ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001ff8e:	57                   	push   edi
c001ff8f:	56                   	push   esi
c001ff90:	52                   	push   edx
c001ff91:	50                   	push   eax
c001ff92:	e8 f8 f9 ff ff       	call   c001f98f <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff97:	83 c4 1c             	add    esp,0x1c
c001ff9a:	52                   	push   edx
c001ff9b:	50                   	push   eax
c001ff9c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa0:	2d e8 00 00 00       	sub    eax,0xe8
c001ffa5:	eb b7                	jmp    c001ff5e <Vm::x87Handler(regs*)+0x432>
c001ffa7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffab:	8d 50 40             	lea    edx,[eax+0x40]
c001ffae:	80 fa 07             	cmp    dl,0x7
c001ffb1:	77 3a                	ja     c001ffed <Vm::x87Handler(regs*)+0x4c1>
c001ffb3:	83 ec 0c             	sub    esp,0xc
c001ffb6:	2d c0 00 00 00       	sub    eax,0xc0
c001ffbb:	50                   	push   eax
c001ffbc:	e8 2e fa ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001ffc1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffc8:	89 c6                	mov    esi,eax
c001ffca:	89 d7                	mov    edi,edx
c001ffcc:	e8 1e fa ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c001ffd1:	57                   	push   edi
c001ffd2:	56                   	push   esi
c001ffd3:	52                   	push   edx
c001ffd4:	50                   	push   eax
c001ffd5:	e8 8b f9 ff ff       	call   c001f965 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ffda:	83 c4 1c             	add    esp,0x1c
c001ffdd:	52                   	push   edx
c001ffde:	50                   	push   eax
c001ffdf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe3:	2d c0 00 00 00       	sub    eax,0xc0
c001ffe8:	e9 9e 01 00 00       	jmp    c002018b <Vm::x87Handler(regs*)+0x65f>
c001ffed:	8d 50 20             	lea    edx,[eax+0x20]
c001fff0:	80 fa 07             	cmp    dl,0x7
c001fff3:	77 3a                	ja     c002002f <Vm::x87Handler(regs*)+0x503>
c001fff5:	83 ec 0c             	sub    esp,0xc
c001fff8:	2d e0 00 00 00       	sub    eax,0xe0
c001fffd:	50                   	push   eax
c001fffe:	e8 ec f9 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020003:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002000a:	89 c6                	mov    esi,eax
c002000c:	89 d7                	mov    edi,edx
c002000e:	e8 dc f9 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020013:	57                   	push   edi
c0020014:	56                   	push   esi
c0020015:	52                   	push   edx
c0020016:	50                   	push   eax
c0020017:	e8 73 f9 ff ff       	call   c001f98f <Vm::fpuSub(unsigned long long, unsigned long long)>
c002001c:	83 c4 1c             	add    esp,0x1c
c002001f:	52                   	push   edx
c0020020:	50                   	push   eax
c0020021:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020025:	2d e0 00 00 00       	sub    eax,0xe0
c002002a:	e9 5c 01 00 00       	jmp    c002018b <Vm::x87Handler(regs*)+0x65f>
c002002f:	8d 50 18             	lea    edx,[eax+0x18]
c0020032:	80 fa 07             	cmp    dl,0x7
c0020035:	77 3b                	ja     c0020072 <Vm::x87Handler(regs*)+0x546>
c0020037:	83 ec 0c             	sub    esp,0xc
c002003a:	6a 00                	push   0x0
c002003c:	e8 ae f9 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020041:	89 c6                	mov    esi,eax
c0020043:	89 d7                	mov    edi,edx
c0020045:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020049:	2d e8 00 00 00       	sub    eax,0xe8
c002004e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020051:	e8 99 f9 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020056:	57                   	push   edi
c0020057:	56                   	push   esi
c0020058:	52                   	push   edx
c0020059:	50                   	push   eax
c002005a:	e8 30 f9 ff ff       	call   c001f98f <Vm::fpuSub(unsigned long long, unsigned long long)>
c002005f:	83 c4 1c             	add    esp,0x1c
c0020062:	52                   	push   edx
c0020063:	50                   	push   eax
c0020064:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020068:	2d e8 00 00 00       	sub    eax,0xe8
c002006d:	e9 19 01 00 00       	jmp    c002018b <Vm::x87Handler(regs*)+0x65f>
c0020072:	8d 50 38             	lea    edx,[eax+0x38]
c0020075:	80 fa 07             	cmp    dl,0x7
c0020078:	77 37                	ja     c00200b1 <Vm::x87Handler(regs*)+0x585>
c002007a:	83 ec 0c             	sub    esp,0xc
c002007d:	2d c8 00 00 00       	sub    eax,0xc8
c0020082:	50                   	push   eax
c0020083:	e8 67 f9 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020088:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002008f:	89 c6                	mov    esi,eax
c0020091:	89 d7                	mov    edi,edx
c0020093:	e8 57 f9 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020098:	57                   	push   edi
c0020099:	56                   	push   esi
c002009a:	52                   	push   edx
c002009b:	50                   	push   eax
c002009c:	e8 fd f8 ff ff       	call   c001f99e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00200a1:	83 c4 1c             	add    esp,0x1c
c00200a4:	52                   	push   edx
c00200a5:	50                   	push   eax
c00200a6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200aa:	2d c8 00 00 00       	sub    eax,0xc8
c00200af:	eb 7d                	jmp    c002012e <Vm::x87Handler(regs*)+0x602>
c00200b1:	3c f7                	cmp    al,0xf7
c00200b3:	76 38                	jbe    c00200ed <Vm::x87Handler(regs*)+0x5c1>
c00200b5:	83 ec 0c             	sub    esp,0xc
c00200b8:	6a 00                	push   0x0
c00200ba:	e8 30 f9 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c00200bf:	89 c6                	mov    esi,eax
c00200c1:	89 d7                	mov    edi,edx
c00200c3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200c7:	2d f8 00 00 00       	sub    eax,0xf8
c00200cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00200cf:	e8 1b f9 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c00200d4:	57                   	push   edi
c00200d5:	56                   	push   esi
c00200d6:	52                   	push   edx
c00200d7:	50                   	push   eax
c00200d8:	e8 e0 f8 ff ff       	call   c001f9bd <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200dd:	83 c4 1c             	add    esp,0x1c
c00200e0:	52                   	push   edx
c00200e1:	50                   	push   eax
c00200e2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200e6:	2d f8 00 00 00       	sub    eax,0xf8
c00200eb:	eb 41                	jmp    c002012e <Vm::x87Handler(regs*)+0x602>
c00200ed:	8d 50 10             	lea    edx,[eax+0x10]
c00200f0:	80 fa 07             	cmp    dl,0x7
c00200f3:	0f 87 5a 01 00 00    	ja     c0020253 <Vm::x87Handler(regs*)+0x727>
c00200f9:	83 ec 0c             	sub    esp,0xc
c00200fc:	2d f0 00 00 00       	sub    eax,0xf0
c0020101:	50                   	push   eax
c0020102:	e8 e8 f8 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020107:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002010e:	89 c6                	mov    esi,eax
c0020110:	89 d7                	mov    edi,edx
c0020112:	e8 d8 f8 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020117:	57                   	push   edi
c0020118:	56                   	push   esi
c0020119:	52                   	push   edx
c002011a:	50                   	push   eax
c002011b:	e8 9d f8 ff ff       	call   c001f9bd <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020120:	83 c4 1c             	add    esp,0x1c
c0020123:	52                   	push   edx
c0020124:	50                   	push   eax
c0020125:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020129:	2d f0 00 00 00       	sub    eax,0xf0
c002012e:	50                   	push   eax
c002012f:	e8 fe f8 ff ff       	call   c001fa32 <Vm::fpuSetReg(int, unsigned long long)>
c0020134:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020138:	e8 9d f9 ff ff       	call   c001fada <Vm::fpuPop()>
c002013d:	e9 5e fa ff ff       	jmp    c001fba0 <Vm::x87Handler(regs*)+0x74>
c0020142:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020146:	8d 50 30             	lea    edx,[eax+0x30]
c0020149:	80 fa 07             	cmp    dl,0x7
c002014c:	77 1d                	ja     c002016b <Vm::x87Handler(regs*)+0x63f>
c002014e:	83 ec 0c             	sub    esp,0xc
c0020151:	6a 00                	push   0x0
c0020153:	e8 97 f8 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020158:	83 c4 0c             	add    esp,0xc
c002015b:	52                   	push   edx
c002015c:	50                   	push   eax
c002015d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020161:	2d d0 00 00 00       	sub    eax,0xd0
c0020166:	e9 f3 fd ff ff       	jmp    c001ff5e <Vm::x87Handler(regs*)+0x432>
c002016b:	8d 50 28             	lea    edx,[eax+0x28]
c002016e:	80 fa 07             	cmp    dl,0x7
c0020171:	77 28                	ja     c002019b <Vm::x87Handler(regs*)+0x66f>
c0020173:	83 ec 0c             	sub    esp,0xc
c0020176:	6a 00                	push   0x0
c0020178:	e8 72 f8 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c002017d:	83 c4 0c             	add    esp,0xc
c0020180:	52                   	push   edx
c0020181:	50                   	push   eax
c0020182:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020186:	2d d8 00 00 00       	sub    eax,0xd8
c002018b:	50                   	push   eax
c002018c:	e8 a1 f8 ff ff       	call   c001fa32 <Vm::fpuSetReg(int, unsigned long long)>
c0020191:	e8 44 f9 ff ff       	call   c001fada <Vm::fpuPop()>
c0020196:	e9 01 fa ff ff       	jmp    c001fb9c <Vm::x87Handler(regs*)+0x70>
c002019b:	8d 50 20             	lea    edx,[eax+0x20]
c002019e:	80 fa 07             	cmp    dl,0x7
c00201a1:	77 30                	ja     c00201d3 <Vm::x87Handler(regs*)+0x6a7>
c00201a3:	83 ec 0c             	sub    esp,0xc
c00201a6:	2d e0 00 00 00       	sub    eax,0xe0
c00201ab:	50                   	push   eax
c00201ac:	e8 3e f8 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c00201b1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201b8:	89 c6                	mov    esi,eax
c00201ba:	89 d7                	mov    edi,edx
c00201bc:	e8 2e f8 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c00201c1:	57                   	push   edi
c00201c2:	56                   	push   esi
c00201c3:	52                   	push   edx
c00201c4:	50                   	push   eax
c00201c5:	e8 48 f7 ff ff       	call   c001f912 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201ca:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201ce:	e9 54 02 00 00       	jmp    c0020427 <Vm::x87Handler(regs*)+0x8fb>
c00201d3:	8d 50 18             	lea    edx,[eax+0x18]
c00201d6:	80 fa 07             	cmp    dl,0x7
c00201d9:	0f 87 43 fb ff ff    	ja     c001fd22 <Vm::x87Handler(regs*)+0x1f6>
c00201df:	83 ec 0c             	sub    esp,0xc
c00201e2:	2d e8 00 00 00       	sub    eax,0xe8
c00201e7:	50                   	push   eax
c00201e8:	e8 02 f8 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c00201ed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201f4:	89 c6                	mov    esi,eax
c00201f6:	89 d7                	mov    edi,edx
c00201f8:	e8 f2 f7 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c00201fd:	57                   	push   edi
c00201fe:	56                   	push   esi
c00201ff:	52                   	push   edx
c0020200:	50                   	push   eax
c0020201:	e8 0c f7 ff ff       	call   c001f912 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020206:	83 c4 20             	add    esp,0x20
c0020209:	e8 cc f8 ff ff       	call   c001fada <Vm::fpuPop()>
c002020e:	eb 62                	jmp    c0020272 <Vm::x87Handler(regs*)+0x746>
c0020210:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020214:	0f 85 0f 01 00 00    	jne    c0020329 <Vm::x87Handler(regs*)+0x7fd>
c002021a:	83 ec 0c             	sub    esp,0xc
c002021d:	6a 01                	push   0x1
c002021f:	e8 cb f7 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020224:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002022b:	89 c6                	mov    esi,eax
c002022d:	89 d7                	mov    edi,edx
c002022f:	e8 bb f7 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020234:	57                   	push   edi
c0020235:	56                   	push   esi
c0020236:	52                   	push   edx
c0020237:	50                   	push   eax
c0020238:	e8 d5 f6 ff ff       	call   c001f912 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002023d:	83 c4 20             	add    esp,0x20
c0020240:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020244:	e8 91 f8 ff ff       	call   c001fada <Vm::fpuPop()>
c0020249:	e8 8c f8 ff ff       	call   c001fada <Vm::fpuPop()>
c002024e:	e9 50 f9 ff ff       	jmp    c001fba3 <Vm::x87Handler(regs*)+0x77>
c0020253:	3c d9                	cmp    al,0xd9
c0020255:	0f 85 b5 02 00 00    	jne    c0020510 <Vm::x87Handler(regs*)+0x9e4>
c002025b:	eb bd                	jmp    c002021a <Vm::x87Handler(regs*)+0x6ee>
c002025d:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020261:	0f 85 ea 02 00 00    	jne    c0020551 <Vm::x87Handler(regs*)+0xa25>
c0020267:	0f b7 05 60 1c 03 c0 	movzx  eax,WORD PTR ds:0xc0031c60
c002026e:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020272:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020276:	e9 28 f9 ff ff       	jmp    c001fba3 <Vm::x87Handler(regs*)+0x77>
c002027b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002027f:	84 d2                	test   dl,dl
c0020281:	75 0f                	jne    c0020292 <Vm::x87Handler(regs*)+0x766>
c0020283:	83 ec 0c             	sub    esp,0xc
c0020286:	ff 36                	push   DWORD PTR [esi]
c0020288:	e8 b1 f4 ff ff       	call   c001f73e <Vm::fpu32ToInternal(unsigned int)>
c002028d:	e9 2c 01 00 00       	jmp    c00203be <Vm::x87Handler(regs*)+0x892>
c0020292:	80 fa 01             	cmp    dl,0x1
c0020295:	75 0f                	jne    c00202a6 <Vm::x87Handler(regs*)+0x77a>
c0020297:	83 ec 0c             	sub    esp,0xc
c002029a:	ff 36                	push   DWORD PTR [esi]
c002029c:	e8 9d f4 ff ff       	call   c001f73e <Vm::fpu32ToInternal(unsigned int)>
c00202a1:	e9 81 02 00 00       	jmp    c0020527 <Vm::x87Handler(regs*)+0x9fb>
c00202a6:	80 fa 04             	cmp    dl,0x4
c00202a9:	75 0f                	jne    c00202ba <Vm::x87Handler(regs*)+0x78e>
c00202ab:	83 ec 0c             	sub    esp,0xc
c00202ae:	ff 36                	push   DWORD PTR [esi]
c00202b0:	e8 89 f4 ff ff       	call   c001f73e <Vm::fpu32ToInternal(unsigned int)>
c00202b5:	e9 86 01 00 00       	jmp    c0020440 <Vm::x87Handler(regs*)+0x914>
c00202ba:	80 fa 05             	cmp    dl,0x5
c00202bd:	75 1b                	jne    c00202da <Vm::x87Handler(regs*)+0x7ae>
c00202bf:	83 ec 0c             	sub    esp,0xc
c00202c2:	6a 00                	push   0x0
c00202c4:	e8 26 f7 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c00202c9:	89 c7                	mov    edi,eax
c00202cb:	89 d5                	mov    ebp,edx
c00202cd:	58                   	pop    eax
c00202ce:	ff 36                	push   DWORD PTR [esi]
c00202d0:	e8 69 f4 ff ff       	call   c001f73e <Vm::fpu32ToInternal(unsigned int)>
c00202d5:	e9 a3 01 00 00       	jmp    c002047d <Vm::x87Handler(regs*)+0x951>
c00202da:	80 fa 06             	cmp    dl,0x6
c00202dd:	75 0f                	jne    c00202ee <Vm::x87Handler(regs*)+0x7c2>
c00202df:	83 ec 0c             	sub    esp,0xc
c00202e2:	ff 36                	push   DWORD PTR [esi]
c00202e4:	e8 55 f4 ff ff       	call   c001f73e <Vm::fpu32ToInternal(unsigned int)>
c00202e9:	e9 ae 01 00 00       	jmp    c002049c <Vm::x87Handler(regs*)+0x970>
c00202ee:	31 c0                	xor    eax,eax
c00202f0:	80 fa 07             	cmp    dl,0x7
c00202f3:	0f 85 94 02 00 00    	jne    c002058d <Vm::x87Handler(regs*)+0xa61>
c00202f9:	83 ec 0c             	sub    esp,0xc
c00202fc:	6a 00                	push   0x0
c00202fe:	e8 ec f6 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020303:	89 c7                	mov    edi,eax
c0020305:	89 d5                	mov    ebp,edx
c0020307:	58                   	pop    eax
c0020308:	ff 36                	push   DWORD PTR [esi]
c002030a:	e8 2f f4 ff ff       	call   c001f73e <Vm::fpu32ToInternal(unsigned int)>
c002030f:	e9 cb 01 00 00       	jmp    c00204df <Vm::x87Handler(regs*)+0x9b3>
c0020314:	80 fa 03             	cmp    dl,0x3
c0020317:	0f 85 d3 01 00 00    	jne    c00204f0 <Vm::x87Handler(regs*)+0x9c4>
c002031d:	e8 b8 f7 ff ff       	call   c001fada <Vm::fpuPop()>
c0020322:	51                   	push   ecx
c0020323:	51                   	push   ecx
c0020324:	e9 de 01 00 00       	jmp    c0020507 <Vm::x87Handler(regs*)+0x9db>
c0020329:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002032d:	80 fa 01             	cmp    dl,0x1
c0020330:	75 09                	jne    c002033b <Vm::x87Handler(regs*)+0x80f>
c0020332:	57                   	push   edi
c0020333:	57                   	push   edi
c0020334:	8b 06                	mov    eax,DWORD PTR [esi]
c0020336:	e9 e3 01 00 00       	jmp    c002051e <Vm::x87Handler(regs*)+0x9f2>
c002033b:	80 fa 04             	cmp    dl,0x4
c002033e:	75 12                	jne    c0020352 <Vm::x87Handler(regs*)+0x826>
c0020340:	31 d2                	xor    edx,edx
c0020342:	51                   	push   ecx
c0020343:	51                   	push   ecx
c0020344:	8b 06                	mov    eax,DWORD PTR [esi]
c0020346:	52                   	push   edx
c0020347:	50                   	push   eax
c0020348:	e8 d0 f4 ff ff       	call   c001f81d <Vm::fpuLongToFloat(long long)>
c002034d:	e9 ee 00 00 00       	jmp    c0020440 <Vm::x87Handler(regs*)+0x914>
c0020352:	31 c0                	xor    eax,eax
c0020354:	80 fa 07             	cmp    dl,0x7
c0020357:	0f 85 30 02 00 00    	jne    c002058d <Vm::x87Handler(regs*)+0xa61>
c002035d:	83 ec 0c             	sub    esp,0xc
c0020360:	6a 00                	push   0x0
c0020362:	e8 88 f6 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020367:	89 c7                	mov    edi,eax
c0020369:	89 d5                	mov    ebp,edx
c002036b:	58                   	pop    eax
c002036c:	8b 06                	mov    eax,DWORD PTR [esi]
c002036e:	5a                   	pop    edx
c002036f:	31 d2                	xor    edx,edx
c0020371:	52                   	push   edx
c0020372:	50                   	push   eax
c0020373:	e8 a5 f4 ff ff       	call   c001f81d <Vm::fpuLongToFloat(long long)>
c0020378:	e9 62 01 00 00       	jmp    c00204df <Vm::x87Handler(regs*)+0x9b3>
c002037d:	84 d2                	test   dl,dl
c002037f:	75 0d                	jne    c002038e <Vm::x87Handler(regs*)+0x862>
c0020381:	31 d2                	xor    edx,edx
c0020383:	55                   	push   ebp
c0020384:	55                   	push   ebp
c0020385:	8b 06                	mov    eax,DWORD PTR [esi]
c0020387:	52                   	push   edx
c0020388:	50                   	push   eax
c0020389:	e9 d3 01 00 00       	jmp    c0020561 <Vm::x87Handler(regs*)+0xa35>
c002038e:	31 c0                	xor    eax,eax
c0020390:	80 fa 02             	cmp    dl,0x2
c0020393:	0f 85 f4 01 00 00    	jne    c002058d <Vm::x87Handler(regs*)+0xa61>
c0020399:	83 ec 0c             	sub    esp,0xc
c002039c:	6a 00                	push   0x0
c002039e:	e8 4c f6 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c00203a3:	59                   	pop    ecx
c00203a4:	5f                   	pop    edi
c00203a5:	e9 6a f9 ff ff       	jmp    c001fd14 <Vm::x87Handler(regs*)+0x1e8>
c00203aa:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203ae:	84 d2                	test   dl,dl
c00203b0:	75 2a                	jne    c00203dc <Vm::x87Handler(regs*)+0x8b0>
c00203b2:	50                   	push   eax
c00203b3:	50                   	push   eax
c00203b4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203b7:	ff 36                	push   DWORD PTR [esi]
c00203b9:	e8 c5 f3 ff ff       	call   c001f783 <Vm::fpu64ToInternal(unsigned long long)>
c00203be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203c5:	89 c6                	mov    esi,eax
c00203c7:	89 d7                	mov    edi,edx
c00203c9:	e8 21 f6 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c00203ce:	57                   	push   edi
c00203cf:	56                   	push   esi
c00203d0:	52                   	push   edx
c00203d1:	50                   	push   eax
c00203d2:	e8 8e f5 ff ff       	call   c001f965 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00203d7:	e9 64 01 00 00       	jmp    c0020540 <Vm::x87Handler(regs*)+0xa14>
c00203dc:	80 fa 01             	cmp    dl,0x1
c00203df:	75 11                	jne    c00203f2 <Vm::x87Handler(regs*)+0x8c6>
c00203e1:	50                   	push   eax
c00203e2:	50                   	push   eax
c00203e3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203e6:	ff 36                	push   DWORD PTR [esi]
c00203e8:	e8 96 f3 ff ff       	call   c001f783 <Vm::fpu64ToInternal(unsigned long long)>
c00203ed:	e9 35 01 00 00       	jmp    c0020527 <Vm::x87Handler(regs*)+0x9fb>
c00203f2:	80 fa 02             	cmp    dl,0x2
c00203f5:	0f 85 54 f9 ff ff    	jne    c001fd4f <Vm::x87Handler(regs*)+0x223>
c00203fb:	55                   	push   ebp
c00203fc:	55                   	push   ebp
c00203fd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020400:	ff 36                	push   DWORD PTR [esi]
c0020402:	e8 7c f3 ff ff       	call   c001f783 <Vm::fpu64ToInternal(unsigned long long)>
c0020407:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002040e:	89 c6                	mov    esi,eax
c0020410:	89 d7                	mov    edi,edx
c0020412:	e8 d8 f5 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020417:	57                   	push   edi
c0020418:	56                   	push   esi
c0020419:	52                   	push   edx
c002041a:	50                   	push   eax
c002041b:	e8 f2 f4 ff ff       	call   c001f912 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020420:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020424:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020427:	83 c4 20             	add    esp,0x20
c002042a:	e9 74 f7 ff ff       	jmp    c001fba3 <Vm::x87Handler(regs*)+0x77>
c002042f:	80 fa 04             	cmp    dl,0x4
c0020432:	75 2a                	jne    c002045e <Vm::x87Handler(regs*)+0x932>
c0020434:	51                   	push   ecx
c0020435:	51                   	push   ecx
c0020436:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020439:	ff 36                	push   DWORD PTR [esi]
c002043b:	e8 43 f3 ff ff       	call   c001f783 <Vm::fpu64ToInternal(unsigned long long)>
c0020440:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020447:	89 c6                	mov    esi,eax
c0020449:	89 d7                	mov    edi,edx
c002044b:	e8 9f f5 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020450:	57                   	push   edi
c0020451:	56                   	push   esi
c0020452:	52                   	push   edx
c0020453:	50                   	push   eax
c0020454:	e8 36 f5 ff ff       	call   c001f98f <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020459:	e9 e2 00 00 00       	jmp    c0020540 <Vm::x87Handler(regs*)+0xa14>
c002045e:	80 fa 05             	cmp    dl,0x5
c0020461:	75 28                	jne    c002048b <Vm::x87Handler(regs*)+0x95f>
c0020463:	83 ec 0c             	sub    esp,0xc
c0020466:	6a 00                	push   0x0
c0020468:	e8 82 f5 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c002046d:	89 c7                	mov    edi,eax
c002046f:	89 d5                	mov    ebp,edx
c0020471:	58                   	pop    eax
c0020472:	5a                   	pop    edx
c0020473:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020476:	ff 36                	push   DWORD PTR [esi]
c0020478:	e8 06 f3 ff ff       	call   c001f783 <Vm::fpu64ToInternal(unsigned long long)>
c002047d:	83 c4 10             	add    esp,0x10
c0020480:	55                   	push   ebp
c0020481:	57                   	push   edi
c0020482:	52                   	push   edx
c0020483:	50                   	push   eax
c0020484:	e8 06 f5 ff ff       	call   c001f98f <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020489:	eb 60                	jmp    c00204eb <Vm::x87Handler(regs*)+0x9bf>
c002048b:	80 fa 06             	cmp    dl,0x6
c002048e:	75 2a                	jne    c00204ba <Vm::x87Handler(regs*)+0x98e>
c0020490:	51                   	push   ecx
c0020491:	51                   	push   ecx
c0020492:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020495:	ff 36                	push   DWORD PTR [esi]
c0020497:	e8 e7 f2 ff ff       	call   c001f783 <Vm::fpu64ToInternal(unsigned long long)>
c002049c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204a3:	89 c6                	mov    esi,eax
c00204a5:	89 d7                	mov    edi,edx
c00204a7:	e8 43 f5 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c00204ac:	57                   	push   edi
c00204ad:	56                   	push   esi
c00204ae:	52                   	push   edx
c00204af:	50                   	push   eax
c00204b0:	e8 08 f5 ff ff       	call   c001f9bd <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204b5:	e9 86 00 00 00       	jmp    c0020540 <Vm::x87Handler(regs*)+0xa14>
c00204ba:	31 c0                	xor    eax,eax
c00204bc:	80 fa 07             	cmp    dl,0x7
c00204bf:	0f 85 c8 00 00 00    	jne    c002058d <Vm::x87Handler(regs*)+0xa61>
c00204c5:	83 ec 0c             	sub    esp,0xc
c00204c8:	6a 00                	push   0x0
c00204ca:	e8 20 f5 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c00204cf:	89 c7                	mov    edi,eax
c00204d1:	89 d5                	mov    ebp,edx
c00204d3:	58                   	pop    eax
c00204d4:	5a                   	pop    edx
c00204d5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204d8:	ff 36                	push   DWORD PTR [esi]
c00204da:	e8 a4 f2 ff ff       	call   c001f783 <Vm::fpu64ToInternal(unsigned long long)>
c00204df:	83 c4 10             	add    esp,0x10
c00204e2:	55                   	push   ebp
c00204e3:	57                   	push   edi
c00204e4:	52                   	push   edx
c00204e5:	50                   	push   eax
c00204e6:	e8 d2 f4 ff ff       	call   c001f9bd <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204eb:	83 c4 0c             	add    esp,0xc
c00204ee:	eb 53                	jmp    c0020543 <Vm::x87Handler(regs*)+0xa17>
c00204f0:	31 c0                	xor    eax,eax
c00204f2:	80 fa 02             	cmp    dl,0x2
c00204f5:	0f 85 92 00 00 00    	jne    c002058d <Vm::x87Handler(regs*)+0xa61>
c00204fb:	83 ec 0c             	sub    esp,0xc
c00204fe:	6a 00                	push   0x0
c0020500:	e8 ea f4 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020505:	59                   	pop    ecx
c0020506:	5f                   	pop    edi
c0020507:	52                   	push   edx
c0020508:	50                   	push   eax
c0020509:	e8 27 f2 ff ff       	call   c001f735 <Vm::fpuInternalTo64(unsigned long long)>
c002050e:	eb 70                	jmp    c0020580 <Vm::x87Handler(regs*)+0xa54>
c0020510:	31 c0                	xor    eax,eax
c0020512:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020517:	75 74                	jne    c002058d <Vm::x87Handler(regs*)+0xa61>
c0020519:	50                   	push   eax
c002051a:	50                   	push   eax
c002051b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002051e:	31 d2                	xor    edx,edx
c0020520:	52                   	push   edx
c0020521:	50                   	push   eax
c0020522:	e8 f6 f2 ff ff       	call   c001f81d <Vm::fpuLongToFloat(long long)>
c0020527:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002052e:	89 c6                	mov    esi,eax
c0020530:	89 d7                	mov    edi,edx
c0020532:	e8 b8 f4 ff ff       	call   c001f9ef <Vm::fpuGetReg(int)>
c0020537:	57                   	push   edi
c0020538:	56                   	push   esi
c0020539:	52                   	push   edx
c002053a:	50                   	push   eax
c002053b:	e8 5e f4 ff ff       	call   c001f99e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020540:	83 c4 1c             	add    esp,0x1c
c0020543:	52                   	push   edx
c0020544:	50                   	push   eax
c0020545:	6a 00                	push   0x0
c0020547:	e8 e6 f4 ff ff       	call   c001fa32 <Vm::fpuSetReg(int, unsigned long long)>
c002054c:	e9 f2 f7 ff ff       	jmp    c001fd43 <Vm::x87Handler(regs*)+0x217>
c0020551:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020555:	80 fa 05             	cmp    dl,0x5
c0020558:	75 11                	jne    c002056b <Vm::x87Handler(regs*)+0xa3f>
c002055a:	55                   	push   ebp
c002055b:	55                   	push   ebp
c002055c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002055f:	ff 36                	push   DWORD PTR [esi]
c0020561:	e8 81 f2 ff ff       	call   c001f7e7 <Vm::fpuULongToFloat(unsigned long long)>
c0020566:	e9 cf f7 ff ff       	jmp    c001fd3a <Vm::x87Handler(regs*)+0x20e>
c002056b:	31 c0                	xor    eax,eax
c002056d:	80 fa 07             	cmp    dl,0x7
c0020570:	75 1b                	jne    c002058d <Vm::x87Handler(regs*)+0xa61>
c0020572:	e8 63 f5 ff ff       	call   c001fada <Vm::fpuPop()>
c0020577:	51                   	push   ecx
c0020578:	51                   	push   ecx
c0020579:	52                   	push   edx
c002057a:	50                   	push   eax
c002057b:	e8 0c f2 ff ff       	call   c001f78c <Vm::fpuFloatToLong(unsigned long long)>
c0020580:	83 c4 10             	add    esp,0x10
c0020583:	89 06                	mov    DWORD PTR [esi],eax
c0020585:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020588:	e9 f8 f7 ff ff       	jmp    c001fd85 <Vm::x87Handler(regs*)+0x259>
c002058d:	83 c4 1c             	add    esp,0x1c
c0020590:	5b                   	pop    ebx
c0020591:	5e                   	pop    esi
c0020592:	5f                   	pop    edi
c0020593:	5d                   	pop    ebp
c0020594:	c3                   	ret    

c0020595 <__static_initialization_and_destruction_0(int, int)>:
c0020595:	83 ec 0c             	sub    esp,0xc
c0020598:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002059d:	75 1a                	jne    c00205b9 <__static_initialization_and_destruction_0(int, int)+0x24>
c002059f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00205a7:	75 10                	jne    c00205b9 <__static_initialization_and_destruction_0(int, int)+0x24>
c00205a9:	83 ec 0c             	sub    esp,0xc
c00205ac:	68 60 1c 03 c0       	push   0xc0031c60
c00205b1:	e8 1a 88 00 00       	call   c0028dd0 <Vm::_FPUState::_FPUState()>
c00205b6:	83 c4 10             	add    esp,0x10
c00205b9:	90                   	nop
c00205ba:	83 c4 0c             	add    esp,0xc
c00205bd:	c3                   	ret    

c00205be <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00205be:	83 ec 0c             	sub    esp,0xc
c00205c1:	83 ec 08             	sub    esp,0x8
c00205c4:	68 ff ff 00 00       	push   0xffff
c00205c9:	6a 01                	push   0x1
c00205cb:	e8 c5 ff ff ff       	call   c0020595 <__static_initialization_and_destruction_0(int, int)>
c00205d0:	83 c4 10             	add    esp,0x10
c00205d3:	83 c4 0c             	add    esp,0xc
c00205d6:	c3                   	ret    
c00205d7:	90                   	nop

c00205d8 <FAT::getName()>:
c00205d8:	b8 74 ca 02 c0       	mov    eax,0xc002ca74
c00205dd:	c3                   	ret    

c00205de <FAT::tell(void*, unsigned long long*)>:
c00205de:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205e3:	75 06                	jne    c00205eb <FAT::tell(void*, unsigned long long*)+0xd>
c00205e5:	b8 04 00 00 00       	mov    eax,0x4
c00205ea:	c3                   	ret    
c00205eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205f0:	75 06                	jne    c00205f8 <FAT::tell(void*, unsigned long long*)+0x1a>
c00205f2:	b8 04 00 00 00       	mov    eax,0x4
c00205f7:	c3                   	ret    
c00205f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205fc:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00205ff:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020602:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020606:	89 01                	mov    DWORD PTR [ecx],eax
c0020608:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002060b:	b8 00 00 00 00       	mov    eax,0x0
c0020610:	c3                   	ret    
c0020611:	90                   	nop

c0020612 <FAT::stat(void*, unsigned long long*)>:
c0020612:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020617:	75 06                	jne    c002061f <FAT::stat(void*, unsigned long long*)+0xd>
c0020619:	b8 04 00 00 00       	mov    eax,0x4
c002061e:	c3                   	ret    
c002061f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020624:	75 06                	jne    c002062c <FAT::stat(void*, unsigned long long*)+0x1a>
c0020626:	b8 04 00 00 00       	mov    eax,0x4
c002062b:	c3                   	ret    
c002062c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020630:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020633:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002063a:	89 01                	mov    DWORD PTR [ecx],eax
c002063c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002063f:	b8 00 00 00 00       	mov    eax,0x0
c0020644:	c3                   	ret    
c0020645:	90                   	nop

c0020646 <FAT::~FAT()>:
c0020646:	83 ec 0c             	sub    esp,0xc
c0020649:	ba f8 ca 02 c0       	mov    edx,0xc002caf8
c002064e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020652:	89 10                	mov    DWORD PTR [eax],edx
c0020654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020658:	83 ec 0c             	sub    esp,0xc
c002065b:	50                   	push   eax
c002065c:	e8 89 2c ff ff       	call   c00132ea <Filesystem::~Filesystem()>
c0020661:	83 c4 10             	add    esp,0x10
c0020664:	90                   	nop
c0020665:	83 c4 0c             	add    esp,0xc
c0020668:	c3                   	ret    
c0020669:	90                   	nop

c002066a <FAT::~FAT()>:
c002066a:	83 ec 0c             	sub    esp,0xc
c002066d:	83 ec 0c             	sub    esp,0xc
c0020670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020674:	e8 cd ff ff ff       	call   c0020646 <FAT::~FAT()>
c0020679:	83 c4 10             	add    esp,0x10
c002067c:	83 ec 08             	sub    esp,0x8
c002067f:	6a 08                	push   0x8
c0020681:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020685:	e8 57 28 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c002068a:	83 c4 10             	add    esp,0x10
c002068d:	83 c4 0c             	add    esp,0xc
c0020690:	c3                   	ret    
c0020691:	90                   	nop

c0020692 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020692:	83 ec 1c             	sub    esp,0x1c
c0020695:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002069c:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00206a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206a5:	8b 04 85 e0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce320]
c00206ac:	83 f8 ff             	cmp    eax,0xffffffff
c00206af:	75 34                	jne    c00206e5 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00206b1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206b5:	88 c2                	mov    dl,al
c00206b7:	a1 c0 1c 03 c0       	mov    eax,ds:0xc0031cc0
c00206bc:	01 d0                	add    eax,edx
c00206be:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206c2:	8b 15 c0 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031cc0
c00206c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206cc:	89 14 85 e0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce320],edx
c00206d3:	a1 c0 1c 03 c0       	mov    eax,ds:0xc0031cc0
c00206d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00206dc:	89 14 85 60 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2a0],edx
c00206e3:	eb 17                	jmp    c00206fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00206e5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206e9:	88 c2                	mov    dl,al
c00206eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206ef:	8b 04 85 e0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce320]
c00206f6:	01 d0                	add    eax,edx
c00206f8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206fc:	83 ec 04             	sub    esp,0x4
c00206ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020703:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020707:	8d 44 24 15          	lea    eax,[esp+0x15]
c002070b:	50                   	push   eax
c002070c:	e8 27 66 fe ff       	call   c0006d38 <f_getlabel>
c0020711:	83 c4 10             	add    esp,0x10
c0020714:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020718:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002071d:	75 07                	jne    c0020726 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002071f:	b8 00 00 00 00       	mov    eax,0x0
c0020724:	eb 05                	jmp    c002072b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020726:	b8 01 00 00 00       	mov    eax,0x1
c002072b:	83 c4 1c             	add    esp,0x1c
c002072e:	c3                   	ret    
c002072f:	90                   	nop

c0020730 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020730:	57                   	push   edi
c0020731:	83 ec 58             	sub    esp,0x58
c0020734:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002073c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020740:	b9 0f 00 00 00       	mov    ecx,0xf
c0020745:	b8 00 00 00 00       	mov    eax,0x0
c002074a:	fc                   	cld    
c002074b:	89 d7                	mov    edi,edx
c002074d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002074f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020753:	8b 04 85 e0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce320]
c002075a:	83 f8 ff             	cmp    eax,0xffffffff
c002075d:	75 34                	jne    c0020793 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002075f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020763:	88 c2                	mov    dl,al
c0020765:	a1 c0 1c 03 c0       	mov    eax,ds:0xc0031cc0
c002076a:	01 d0                	add    eax,edx
c002076c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020770:	8b 15 c0 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031cc0
c0020776:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002077a:	89 14 85 e0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce320],edx
c0020781:	a1 c0 1c 03 c0       	mov    eax,ds:0xc0031cc0
c0020786:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c002078a:	89 14 85 60 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2a0],edx
c0020791:	eb 17                	jmp    c00207aa <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020793:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020797:	88 c2                	mov    dl,al
c0020799:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002079d:	8b 04 85 e0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce320]
c00207a4:	01 d0                	add    eax,edx
c00207a6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207aa:	83 ec 08             	sub    esp,0x8
c00207ad:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00207b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207b5:	50                   	push   eax
c00207b6:	e8 b9 01 fe ff       	call   c0000974 <strcat>
c00207bb:	83 c4 10             	add    esp,0x10
c00207be:	83 ec 0c             	sub    esp,0xc
c00207c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207c5:	50                   	push   eax
c00207c6:	e8 5b 67 fe ff       	call   c0006f26 <f_setlabel>
c00207cb:	83 c4 10             	add    esp,0x10
c00207ce:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00207d2:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00207d7:	75 07                	jne    c00207e0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00207d9:	b8 00 00 00 00       	mov    eax,0x0
c00207de:	eb 05                	jmp    c00207e5 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00207e0:	b8 01 00 00 00       	mov    eax,0x1
c00207e5:	83 c4 58             	add    esp,0x58
c00207e8:	5f                   	pop    edi
c00207e9:	c3                   	ret    

c00207ea <FAT::format(LogicalDisk*, int, char const*, int)>:
c00207ea:	83 ec 2c             	sub    esp,0x2c
c00207ed:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00207f5:	83 ec 08             	sub    esp,0x8
c00207f8:	68 98 ca 02 c0       	push   0xc002ca98
c00207fd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020801:	e8 ba 00 fe ff       	call   c00008c0 <strcmp>
c0020806:	83 c4 10             	add    esp,0x10
c0020809:	85 c0                	test   eax,eax
c002080b:	0f 94 c0             	sete   al
c002080e:	84 c0                	test   al,al
c0020810:	74 0d                	je     c002081f <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020812:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002081a:	e9 a6 00 00 00       	jmp    c00208c5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002081f:	83 ec 08             	sub    esp,0x8
c0020822:	68 8a ca 02 c0       	push   0xc002ca8a
c0020827:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002082b:	e8 90 00 fe ff       	call   c00008c0 <strcmp>
c0020830:	83 c4 10             	add    esp,0x10
c0020833:	85 c0                	test   eax,eax
c0020835:	0f 94 c0             	sete   al
c0020838:	84 c0                	test   al,al
c002083a:	74 0a                	je     c0020846 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002083c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020844:	eb 7f                	jmp    c00208c5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020846:	83 ec 08             	sub    esp,0x8
c0020849:	68 90 ca 02 c0       	push   0xc002ca90
c002084e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020852:	e8 69 00 fe ff       	call   c00008c0 <strcmp>
c0020857:	83 c4 10             	add    esp,0x10
c002085a:	85 c0                	test   eax,eax
c002085c:	0f 94 c0             	sete   al
c002085f:	84 c0                	test   al,al
c0020861:	74 0a                	je     c002086d <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020863:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002086b:	eb 58                	jmp    c00208c5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002086d:	83 ec 08             	sub    esp,0x8
c0020870:	68 2c 95 02 c0       	push   0xc002952c
c0020875:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020879:	e8 42 00 fe ff       	call   c00008c0 <strcmp>
c002087e:	83 c4 10             	add    esp,0x10
c0020881:	85 c0                	test   eax,eax
c0020883:	0f 94 c0             	sete   al
c0020886:	84 c0                	test   al,al
c0020888:	74 0a                	je     c0020894 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002088a:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020892:	eb 31                	jmp    c00208c5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020894:	83 ec 08             	sub    esp,0x8
c0020897:	68 96 ca 02 c0       	push   0xc002ca96
c002089c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208a0:	e8 1b 00 fe ff       	call   c00008c0 <strcmp>
c00208a5:	83 c4 10             	add    esp,0x10
c00208a8:	85 c0                	test   eax,eax
c00208aa:	0f 94 c0             	sete   al
c00208ad:	84 c0                	test   al,al
c00208af:	74 0a                	je     c00208bb <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00208b1:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00208b9:	eb 0a                	jmp    c00208c5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208bb:	b8 08 00 00 00       	mov    eax,0x8
c00208c0:	e9 04 01 00 00       	jmp    c00209c9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208c5:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00208cc:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00208d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208d5:	8b 04 85 e0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce320]
c00208dc:	83 f8 ff             	cmp    eax,0xffffffff
c00208df:	75 34                	jne    c0020915 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00208e1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208e5:	88 c2                	mov    dl,al
c00208e7:	a1 c0 1c 03 c0       	mov    eax,ds:0xc0031cc0
c00208ec:	01 d0                	add    eax,edx
c00208ee:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208f2:	8b 15 c0 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031cc0
c00208f8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208fc:	89 14 85 e0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce320],edx
c0020903:	a1 c0 1c 03 c0       	mov    eax,ds:0xc0031cc0
c0020908:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002090c:	89 14 85 60 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2a0],edx
c0020913:	eb 17                	jmp    c002092c <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020915:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020919:	88 c2                	mov    dl,al
c002091b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002091f:	8b 04 85 e0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce320]
c0020926:	01 d0                	add    eax,edx
c0020928:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002092c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020930:	88 04 24             	mov    BYTE PTR [esp],al
c0020933:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020937:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002093b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020943:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020948:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020950:	83 ec 0c             	sub    esp,0xc
c0020953:	68 00 20 00 00       	push   0x2000
c0020958:	e8 85 ef fe ff       	call   c000f8e2 <malloc>
c002095d:	83 c4 10             	add    esp,0x10
c0020960:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020964:	68 00 20 00 00       	push   0x2000
c0020969:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002096d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020971:	50                   	push   eax
c0020972:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020976:	50                   	push   eax
c0020977:	e8 f5 69 fe ff       	call   c0007371 <f_mkfs>
c002097c:	83 c4 10             	add    esp,0x10
c002097f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020983:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020988:	75 07                	jne    c0020991 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002098a:	b8 00 00 00 00       	mov    eax,0x0
c002098f:	eb 38                	jmp    c00209c9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020991:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020996:	75 17                	jne    c00209af <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020998:	83 ec 0c             	sub    esp,0xc
c002099b:	68 c8 ca 02 c0       	push   0xc002cac8
c00209a0:	e8 1c 26 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00209a5:	83 c4 10             	add    esp,0x10
c00209a8:	b8 09 00 00 00       	mov    eax,0x9
c00209ad:	eb 1a                	jmp    c00209c9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209b3:	83 ec 08             	sub    esp,0x8
c00209b6:	50                   	push   eax
c00209b7:	68 9c ca 02 c0       	push   0xc002ca9c
c00209bc:	e8 00 26 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00209c1:	83 c4 10             	add    esp,0x10
c00209c4:	b8 01 00 00 00       	mov    eax,0x1
c00209c9:	83 c4 2c             	add    esp,0x2c
c00209cc:	c3                   	ret    
c00209cd:	90                   	nop

c00209ce <FAT::tryMount(LogicalDisk*, int)>:
c00209ce:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00209d4:	a1 c0 1c 03 c0       	mov    eax,ds:0xc0031cc0
c00209d9:	83 f8 14             	cmp    eax,0x14
c00209dc:	75 17                	jne    c00209f5 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00209de:	83 ec 0c             	sub    esp,0xc
c00209e1:	68 ae ca 02 c0       	push   0xc002caae
c00209e6:	e8 88 9c ff ff       	call   c001a673 <Krnl::panic(char const*)>
c00209eb:	83 c4 10             	add    esp,0x10
c00209ee:	b0 00                	mov    al,0x0
c00209f0:	e9 d7 01 00 00       	jmp    c0020bcc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209f5:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00209fc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020a02:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a08:	3d 00 02 00 00       	cmp    eax,0x200
c0020a0d:	74 07                	je     c0020a16 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020a0f:	b0 00                	mov    al,0x0
c0020a11:	e9 b6 01 00 00       	jmp    c0020bcc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a16:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a1e:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a25:	8b 04 85 e0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce320]
c0020a2c:	83 f8 ff             	cmp    eax,0xffffffff
c0020a2f:	74 07                	je     c0020a38 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a31:	b0 01                	mov    al,0x1
c0020a33:	e9 94 01 00 00       	jmp    c0020bcc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a38:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a42:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a4a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a51:	88 c2                	mov    dl,al
c0020a53:	a1 c0 1c 03 c0       	mov    eax,ds:0xc0031cc0
c0020a58:	01 d0                	add    eax,edx
c0020a5a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020a61:	8b 15 c0 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031cc0
c0020a67:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a6e:	89 14 85 e0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce320],edx
c0020a75:	a1 c0 1c 03 c0       	mov    eax,ds:0xc0031cc0
c0020a7a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020a81:	89 14 85 60 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2a0],edx
c0020a88:	83 ec 0c             	sub    esp,0xc
c0020a8b:	68 54 02 00 00       	push   0x254
c0020a90:	e8 4d ee fe ff       	call   c000f8e2 <malloc>
c0020a95:	83 c4 10             	add    esp,0x10
c0020a98:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a9f:	83 ec 04             	sub    esp,0x4
c0020aa2:	6a 00                	push   0x0
c0020aa4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020aab:	50                   	push   eax
c0020aac:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ab3:	e8 77 44 fe ff       	call   c0004f2f <f_mount>
c0020ab8:	83 c4 10             	add    esp,0x10
c0020abb:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020ac2:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020aca:	74 19                	je     c0020ae5 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020acc:	83 ec 0c             	sub    esp,0xc
c0020acf:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ad6:	e8 27 ee fe ff       	call   c000f902 <rfree>
c0020adb:	83 c4 10             	add    esp,0x10
c0020ade:	b0 00                	mov    al,0x0
c0020ae0:	e9 e7 00 00 00       	jmp    c0020bcc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ae5:	83 ec 04             	sub    esp,0x4
c0020ae8:	68 00 01 00 00       	push   0x100
c0020aed:	6a 00                	push   0x0
c0020aef:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020af6:	50                   	push   eax
c0020af7:	e8 7c fc fd ff       	call   c0000778 <memset>
c0020afc:	83 c4 10             	add    esp,0x10
c0020aff:	83 ec 08             	sub    esp,0x8
c0020b02:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b09:	50                   	push   eax
c0020b0a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b11:	50                   	push   eax
c0020b12:	e8 5d fe fd ff       	call   c0000974 <strcat>
c0020b17:	83 c4 10             	add    esp,0x10
c0020b1a:	83 ec 08             	sub    esp,0x8
c0020b1d:	68 bc ca 02 c0       	push   0xc002cabc
c0020b22:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b29:	50                   	push   eax
c0020b2a:	e8 45 fe fd ff       	call   c0000974 <strcat>
c0020b2f:	83 c4 10             	add    esp,0x10
c0020b32:	83 ec 04             	sub    esp,0x4
c0020b35:	6a 01                	push   0x1
c0020b37:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b3e:	50                   	push   eax
c0020b3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b43:	50                   	push   eax
c0020b44:	e8 48 44 fe ff       	call   c0004f91 <f_open>
c0020b49:	83 c4 10             	add    esp,0x10
c0020b4c:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b53:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020b5a:	85 c0                	test   eax,eax
c0020b5c:	74 0a                	je     c0020b68 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020b5e:	78 2d                	js     c0020b8d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b60:	83 e8 04             	sub    eax,0x4
c0020b63:	83 f8 01             	cmp    eax,0x1
c0020b66:	77 25                	ja     c0020b8d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b68:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020b70:	83 ec 0c             	sub    esp,0xc
c0020b73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b77:	50                   	push   eax
c0020b78:	e8 66 4f fe ff       	call   c0005ae3 <f_close>
c0020b7d:	83 c4 10             	add    esp,0x10
c0020b80:	90                   	nop
c0020b81:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b89:	74 3a                	je     c0020bc5 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b8b:	eb 2d                	jmp    c0020bba <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b8d:	83 ec 0c             	sub    esp,0xc
c0020b90:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b97:	e8 66 ed fe ff       	call   c000f902 <rfree>
c0020b9c:	83 c4 10             	add    esp,0x10
c0020b9f:	83 ec 04             	sub    esp,0x4
c0020ba2:	6a 00                	push   0x0
c0020ba4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020bab:	50                   	push   eax
c0020bac:	6a 00                	push   0x0
c0020bae:	e8 7c 43 fe ff       	call   c0004f2f <f_mount>
c0020bb3:	83 c4 10             	add    esp,0x10
c0020bb6:	b0 00                	mov    al,0x0
c0020bb8:	eb 12                	jmp    c0020bcc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020bba:	a1 c0 1c 03 c0       	mov    eax,ds:0xc0031cc0
c0020bbf:	40                   	inc    eax
c0020bc0:	a3 c0 1c 03 c0       	mov    ds:0xc0031cc0,eax
c0020bc5:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020bcc:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020bd2:	c3                   	ret    
c0020bd3:	90                   	nop

c0020bd4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020bd4:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020bda:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020be2:	74 0a                	je     c0020bee <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020be4:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020bec:	75 0a                	jne    c0020bf8 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020bee:	b8 04 00 00 00       	mov    eax,0x4
c0020bf3:	e9 db 00 00 00       	jmp    c0020cd3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bf8:	83 ec 08             	sub    esp,0x8
c0020bfb:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c02:	50                   	push   eax
c0020c03:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020c0a:	e8 de 54 fe ff       	call   c00060ed <f_readdir>
c0020c0f:	83 c4 10             	add    esp,0x10
c0020c12:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020c19:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020c1f:	83 ec 0c             	sub    esp,0xc
c0020c22:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020c29:	83 c0 1a             	add    eax,0x1a
c0020c2c:	50                   	push   eax
c0020c2d:	e8 62 fb fd ff       	call   c0000794 <strlen>
c0020c32:	83 c4 10             	add    esp,0x10
c0020c35:	ba 00 00 00 00       	mov    edx,0x0
c0020c3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c3e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020c42:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020c49:	0f b6 c0             	movzx  eax,al
c0020c4c:	83 e0 10             	and    eax,0x10
c0020c4f:	74 07                	je     c0020c58 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020c51:	b8 02 00 00 00       	mov    eax,0x2
c0020c56:	eb 05                	jmp    c0020c5d <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020c58:	b8 01 00 00 00       	mov    eax,0x1
c0020c5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c61:	83 ec 08             	sub    esp,0x8
c0020c64:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c6b:	83 c0 1a             	add    eax,0x1a
c0020c6e:	50                   	push   eax
c0020c6f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c73:	83 c0 10             	add    eax,0x10
c0020c76:	50                   	push   eax
c0020c77:	e8 b8 fb fd ff       	call   c0000834 <strcpy>
c0020c7c:	83 c4 10             	add    esp,0x10
c0020c7f:	83 ec 04             	sub    esp,0x4
c0020c82:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020c89:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c8d:	50                   	push   eax
c0020c8e:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020c95:	e8 aa fa fd ff       	call   c0000744 <memcpy>
c0020c9a:	83 c4 10             	add    esp,0x10
c0020c9d:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020ca4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020caa:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020cb1:	84 c0                	test   al,al
c0020cb3:	75 07                	jne    c0020cbc <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020cb5:	b8 07 00 00 00       	mov    eax,0x7
c0020cba:	eb 17                	jmp    c0020cd3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020cbc:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020cc3:	85 c0                	test   eax,eax
c0020cc5:	75 07                	jne    c0020cce <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020cc7:	b8 00 00 00 00       	mov    eax,0x0
c0020ccc:	eb 05                	jmp    c0020cd3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020cce:	b8 01 00 00 00       	mov    eax,0x1
c0020cd3:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020cd9:	c3                   	ret    

c0020cda <FAT::read(void*, unsigned long, void*, int*)>:
c0020cda:	83 ec 1c             	sub    esp,0x1c
c0020cdd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ce2:	74 07                	je     c0020ceb <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020ce4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ce9:	75 07                	jne    c0020cf2 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020ceb:	b8 04 00 00 00       	mov    eax,0x4
c0020cf0:	eb 3d                	jmp    c0020d2f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020cf2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cf6:	50                   	push   eax
c0020cf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cfb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d03:	e8 c5 46 fe ff       	call   c00053cd <f_read>
c0020d08:	83 c4 10             	add    esp,0x10
c0020d0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d13:	89 c2                	mov    edx,eax
c0020d15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d19:	89 10                	mov    DWORD PTR [eax],edx
c0020d1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d1f:	85 c0                	test   eax,eax
c0020d21:	75 07                	jne    c0020d2a <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020d23:	b8 00 00 00 00       	mov    eax,0x0
c0020d28:	eb 05                	jmp    c0020d2f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d2a:	b8 01 00 00 00       	mov    eax,0x1
c0020d2f:	83 c4 1c             	add    esp,0x1c
c0020d32:	c3                   	ret    
c0020d33:	90                   	nop

c0020d34 <FAT::write(void*, unsigned long, void*, int*)>:
c0020d34:	83 ec 1c             	sub    esp,0x1c
c0020d37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d3c:	74 07                	je     c0020d45 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020d3e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d43:	75 07                	jne    c0020d4c <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020d45:	b8 04 00 00 00       	mov    eax,0x4
c0020d4a:	eb 3d                	jmp    c0020d89 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d4c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d50:	50                   	push   eax
c0020d51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d55:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d59:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d5d:	e8 eb 48 fe ff       	call   c000564d <f_write>
c0020d62:	83 c4 10             	add    esp,0x10
c0020d65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d6d:	89 c2                	mov    edx,eax
c0020d6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d73:	89 10                	mov    DWORD PTR [eax],edx
c0020d75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d79:	85 c0                	test   eax,eax
c0020d7b:	75 07                	jne    c0020d84 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020d7d:	b8 00 00 00 00       	mov    eax,0x0
c0020d82:	eb 05                	jmp    c0020d89 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d84:	b8 01 00 00 00       	mov    eax,0x1
c0020d89:	83 c4 1c             	add    esp,0x1c
c0020d8c:	c3                   	ret    
c0020d8d:	90                   	nop

c0020d8e <FAT::close(void*)>:
c0020d8e:	83 ec 1c             	sub    esp,0x1c
c0020d91:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d96:	75 07                	jne    c0020d9f <FAT::close(void*)+0x11>
c0020d98:	b8 04 00 00 00       	mov    eax,0x4
c0020d9d:	eb 36                	jmp    c0020dd5 <FAT::close(void*)+0x47>
c0020d9f:	83 ec 0c             	sub    esp,0xc
c0020da2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020da6:	e8 38 4d fe ff       	call   c0005ae3 <f_close>
c0020dab:	83 c4 10             	add    esp,0x10
c0020dae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020db2:	83 ec 0c             	sub    esp,0xc
c0020db5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020db9:	e8 34 eb fe ff       	call   c000f8f2 <free>
c0020dbe:	83 c4 10             	add    esp,0x10
c0020dc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020dc5:	85 c0                	test   eax,eax
c0020dc7:	75 07                	jne    c0020dd0 <FAT::close(void*)+0x42>
c0020dc9:	b8 00 00 00 00       	mov    eax,0x0
c0020dce:	eb 05                	jmp    c0020dd5 <FAT::close(void*)+0x47>
c0020dd0:	b8 01 00 00 00       	mov    eax,0x1
c0020dd5:	83 c4 1c             	add    esp,0x1c
c0020dd8:	c3                   	ret    
c0020dd9:	90                   	nop

c0020dda <FAT::closeDir(void*)>:
c0020dda:	83 ec 1c             	sub    esp,0x1c
c0020ddd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020de2:	75 07                	jne    c0020deb <FAT::closeDir(void*)+0x11>
c0020de4:	b8 04 00 00 00       	mov    eax,0x4
c0020de9:	eb 36                	jmp    c0020e21 <FAT::closeDir(void*)+0x47>
c0020deb:	83 ec 0c             	sub    esp,0xc
c0020dee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020df2:	e8 d4 52 fe ff       	call   c00060cb <f_closedir>
c0020df7:	83 c4 10             	add    esp,0x10
c0020dfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dfe:	83 ec 0c             	sub    esp,0xc
c0020e01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e05:	e8 e8 ea fe ff       	call   c000f8f2 <free>
c0020e0a:	83 c4 10             	add    esp,0x10
c0020e0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e11:	85 c0                	test   eax,eax
c0020e13:	75 07                	jne    c0020e1c <FAT::closeDir(void*)+0x42>
c0020e15:	b8 00 00 00 00       	mov    eax,0x0
c0020e1a:	eb 05                	jmp    c0020e21 <FAT::closeDir(void*)+0x47>
c0020e1c:	b8 01 00 00 00       	mov    eax,0x1
c0020e21:	83 c4 1c             	add    esp,0x1c
c0020e24:	c3                   	ret    
c0020e25:	90                   	nop

c0020e26 <FAT::seek(void*, unsigned long long)>:
c0020e26:	83 ec 2c             	sub    esp,0x2c
c0020e29:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e31:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e39:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020e3e:	75 07                	jne    c0020e47 <FAT::seek(void*, unsigned long long)+0x21>
c0020e40:	b8 04 00 00 00       	mov    eax,0x4
c0020e45:	eb 2f                	jmp    c0020e76 <FAT::seek(void*, unsigned long long)+0x50>
c0020e47:	83 ec 04             	sub    esp,0x4
c0020e4a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e4e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e52:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020e56:	e8 b7 4c fe ff       	call   c0005b12 <f_lseek>
c0020e5b:	83 c4 10             	add    esp,0x10
c0020e5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e66:	85 c0                	test   eax,eax
c0020e68:	75 07                	jne    c0020e71 <FAT::seek(void*, unsigned long long)+0x4b>
c0020e6a:	b8 00 00 00 00       	mov    eax,0x0
c0020e6f:	eb 05                	jmp    c0020e76 <FAT::seek(void*, unsigned long long)+0x50>
c0020e71:	b8 01 00 00 00       	mov    eax,0x1
c0020e76:	83 c4 2c             	add    esp,0x2c
c0020e79:	c3                   	ret    

c0020e7a <fatWrapperReadDisk>:
c0020e7a:	83 ec 1c             	sub    esp,0x1c
c0020e7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e81:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e85:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e89:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e8c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e94:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e99:	8b 04 85 a0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1360]
c0020ea0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ea4:	83 ec 0c             	sub    esp,0xc
c0020ea7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020eab:	52                   	push   edx
c0020eac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020eb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020eb4:	50                   	push   eax
c0020eb5:	e8 28 59 ff ff       	call   c00167e2 <LogicalDisk::read(unsigned long long, int, void*)>
c0020eba:	83 c4 20             	add    esp,0x20
c0020ebd:	83 c4 1c             	add    esp,0x1c
c0020ec0:	c3                   	ret    

c0020ec1 <fatWrapperWriteDisk>:
c0020ec1:	83 ec 1c             	sub    esp,0x1c
c0020ec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ec8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ecc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ed0:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ed3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020ed7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020edb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ee0:	8b 04 85 a0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1360]
c0020ee7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020eeb:	83 ec 0c             	sub    esp,0xc
c0020eee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ef2:	52                   	push   edx
c0020ef3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ef7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020efb:	50                   	push   eax
c0020efc:	e8 4d 59 ff ff       	call   c001684e <LogicalDisk::write(unsigned long long, int, void*)>
c0020f01:	83 c4 20             	add    esp,0x20
c0020f04:	83 c4 1c             	add    esp,0x1c
c0020f07:	c3                   	ret    

c0020f08 <fatWrapperIoctl>:
c0020f08:	53                   	push   ebx
c0020f09:	83 ec 28             	sub    esp,0x28
c0020f0c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020f14:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020f18:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f1c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020f21:	75 31                	jne    c0020f54 <fatWrapperIoctl+0x4c>
c0020f23:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020f2b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f30:	8b 04 85 a0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1360]
c0020f37:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f3d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020f43:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020f47:	66 89 02             	mov    WORD PTR [edx],ax
c0020f4a:	b8 00 00 00 00       	mov    eax,0x0
c0020f4f:	e9 b2 00 00 00       	jmp    c0021006 <fatWrapperIoctl+0xfe>
c0020f54:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020f59:	75 6a                	jne    c0020fc5 <fatWrapperIoctl+0xbd>
c0020f5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f63:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f68:	8b 04 85 a0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1360]
c0020f6f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f75:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020f7b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020f81:	89 c8                	mov    eax,ecx
c0020f83:	89 da                	mov    edx,ebx
c0020f85:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020f89:	c1 e0 0a             	shl    eax,0xa
c0020f8c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f91:	8b 0c 8d a0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1360]
c0020f98:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f9e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020fa4:	89 cb                	mov    ebx,ecx
c0020fa6:	c1 fb 1f             	sar    ebx,0x1f
c0020fa9:	53                   	push   ebx
c0020faa:	51                   	push   ecx
c0020fab:	52                   	push   edx
c0020fac:	50                   	push   eax
c0020fad:	e8 ca 5a 00 00       	call   c0026a7c <__udivdi3>
c0020fb2:	83 c4 10             	add    esp,0x10
c0020fb5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020fb9:	89 01                	mov    DWORD PTR [ecx],eax
c0020fbb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020fbe:	b8 00 00 00 00       	mov    eax,0x0
c0020fc3:	eb 41                	jmp    c0021006 <fatWrapperIoctl+0xfe>
c0020fc5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020fca:	75 07                	jne    c0020fd3 <fatWrapperIoctl+0xcb>
c0020fcc:	b8 00 00 00 00       	mov    eax,0x0
c0020fd1:	eb 33                	jmp    c0021006 <fatWrapperIoctl+0xfe>
c0020fd3:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020fd8:	75 19                	jne    c0020ff3 <fatWrapperIoctl+0xeb>
c0020fda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020fde:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020fe2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fe6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020fec:	b8 00 00 00 00       	mov    eax,0x0
c0020ff1:	eb 13                	jmp    c0021006 <fatWrapperIoctl+0xfe>
c0020ff3:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020ff8:	75 07                	jne    c0021001 <fatWrapperIoctl+0xf9>
c0020ffa:	b8 00 00 00 00       	mov    eax,0x0
c0020fff:	eb 05                	jmp    c0021006 <fatWrapperIoctl+0xfe>
c0021001:	b8 04 00 00 00       	mov    eax,0x4
c0021006:	83 c4 28             	add    esp,0x28
c0021009:	5b                   	pop    ebx
c002100a:	c3                   	ret    
c002100b:	90                   	nop

c002100c <FAT::FAT()>:
c002100c:	83 ec 1c             	sub    esp,0x1c
c002100f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021013:	83 ec 0c             	sub    esp,0xc
c0021016:	50                   	push   eax
c0021017:	e8 aa 22 ff ff       	call   c00132c6 <Filesystem::Filesystem()>
c002101c:	83 c4 10             	add    esp,0x10
c002101f:	ba f8 ca 02 c0       	mov    edx,0xc002caf8
c0021024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021028:	89 10                	mov    DWORD PTR [eax],edx
c002102a:	c7 05 c0 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031cc0,0x0
c0021034:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002103c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021041:	7f 15                	jg     c0021058 <FAT::FAT()+0x4c>
c0021043:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021047:	c7 04 85 e0 1c 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce320],0xffffffff
c0021052:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021056:	eb e4                	jmp    c002103c <FAT::FAT()+0x30>
c0021058:	90                   	nop
c0021059:	83 c4 1c             	add    esp,0x1c
c002105c:	c3                   	ret    
c002105d:	90                   	nop

c002105e <FAT::fixFilepath(char*)>:
c002105e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021062:	8a 00                	mov    al,BYTE PTR [eax]
c0021064:	3c 40                	cmp    al,0x40
c0021066:	7e 2c                	jle    c0021094 <FAT::fixFilepath(char*)+0x36>
c0021068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002106c:	8a 00                	mov    al,BYTE PTR [eax]
c002106e:	83 e8 41             	sub    eax,0x41
c0021071:	88 c2                	mov    dl,al
c0021073:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021077:	88 10                	mov    BYTE PTR [eax],dl
c0021079:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002107d:	8a 00                	mov    al,BYTE PTR [eax]
c002107f:	0f be c0             	movsx  eax,al
c0021082:	8b 04 85 e0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce320]
c0021089:	83 c0 30             	add    eax,0x30
c002108c:	88 c2                	mov    dl,al
c002108e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021092:	88 10                	mov    BYTE PTR [eax],dl
c0021094:	90                   	nop
c0021095:	c3                   	ret    

c0021096 <FAT::open(char const*, void**, FileOpenMode)>:
c0021096:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002109c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210a4:	74 0a                	je     c00210b0 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00210a6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210ae:	75 0a                	jne    c00210ba <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00210b0:	b8 04 00 00 00       	mov    eax,0x4
c00210b5:	e9 fd 00 00 00       	jmp    c00211b7 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210ba:	83 ec 08             	sub    esp,0x8
c00210bd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210c8:	50                   	push   eax
c00210c9:	e8 66 f7 fd ff       	call   c0000834 <strcpy>
c00210ce:	83 c4 10             	add    esp,0x10
c00210d1:	83 ec 08             	sub    esp,0x8
c00210d4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00210d8:	50                   	push   eax
c00210d9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210e0:	e8 79 ff ff ff       	call   c002105e <FAT::fixFilepath(char*)>
c00210e5:	83 c4 10             	add    esp,0x10
c00210e8:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00210f0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210f7:	83 e0 01             	and    eax,0x1
c00210fa:	74 08                	je     c0021104 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00210fc:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021104:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002110b:	83 e0 04             	and    eax,0x4
c002110e:	74 10                	je     c0021120 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021110:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021118:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021120:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021127:	83 e0 02             	and    eax,0x2
c002112a:	74 08                	je     c0021134 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002112c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021134:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002113b:	83 e0 08             	and    eax,0x8
c002113e:	74 08                	je     c0021148 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021140:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021148:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002114f:	83 e0 10             	and    eax,0x10
c0021152:	74 08                	je     c002115c <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021154:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002115c:	83 ec 0c             	sub    esp,0xc
c002115f:	68 50 02 00 00       	push   0x250
c0021164:	e8 79 e7 fe ff       	call   c000f8e2 <malloc>
c0021169:	83 c4 10             	add    esp,0x10
c002116c:	89 c2                	mov    edx,eax
c002116e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021175:	89 10                	mov    DWORD PTR [eax],edx
c0021177:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002117f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021186:	8b 00                	mov    eax,DWORD PTR [eax]
c0021188:	83 ec 04             	sub    esp,0x4
c002118b:	52                   	push   edx
c002118c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021190:	52                   	push   edx
c0021191:	50                   	push   eax
c0021192:	e8 fa 3d fe ff       	call   c0004f91 <f_open>
c0021197:	83 c4 10             	add    esp,0x10
c002119a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00211a1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00211a9:	74 07                	je     c00211b2 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00211ab:	b8 01 00 00 00       	mov    eax,0x1
c00211b0:	eb 05                	jmp    c00211b7 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00211b2:	b8 00 00 00 00       	mov    eax,0x0
c00211b7:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211bd:	c3                   	ret    

c00211be <FAT::openDir(char const*, void**)>:
c00211be:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00211c4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00211cc:	74 0a                	je     c00211d8 <FAT::openDir(char const*, void**)+0x1a>
c00211ce:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00211d6:	75 07                	jne    c00211df <FAT::openDir(char const*, void**)+0x21>
c00211d8:	b8 04 00 00 00       	mov    eax,0x4
c00211dd:	eb 7d                	jmp    c002125c <FAT::openDir(char const*, void**)+0x9e>
c00211df:	83 ec 08             	sub    esp,0x8
c00211e2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211e9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211ed:	50                   	push   eax
c00211ee:	e8 41 f6 fd ff       	call   c0000834 <strcpy>
c00211f3:	83 c4 10             	add    esp,0x10
c00211f6:	83 ec 08             	sub    esp,0x8
c00211f9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211fd:	50                   	push   eax
c00211fe:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021205:	e8 54 fe ff ff       	call   c002105e <FAT::fixFilepath(char*)>
c002120a:	83 c4 10             	add    esp,0x10
c002120d:	83 ec 0c             	sub    esp,0xc
c0021210:	6a 4c                	push   0x4c
c0021212:	e8 cb e6 fe ff       	call   c000f8e2 <malloc>
c0021217:	83 c4 10             	add    esp,0x10
c002121a:	89 c2                	mov    edx,eax
c002121c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021223:	89 10                	mov    DWORD PTR [eax],edx
c0021225:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002122c:	8b 00                	mov    eax,DWORD PTR [eax]
c002122e:	83 ec 08             	sub    esp,0x8
c0021231:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021235:	52                   	push   edx
c0021236:	50                   	push   eax
c0021237:	e8 8d 4d fe ff       	call   c0005fc9 <f_opendir>
c002123c:	83 c4 10             	add    esp,0x10
c002123f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021246:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002124e:	74 07                	je     c0021257 <FAT::openDir(char const*, void**)+0x99>
c0021250:	b8 01 00 00 00       	mov    eax,0x1
c0021255:	eb 05                	jmp    c002125c <FAT::openDir(char const*, void**)+0x9e>
c0021257:	b8 00 00 00 00       	mov    eax,0x0
c002125c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021262:	c3                   	ret    
c0021263:	90                   	nop

c0021264 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021264:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002126a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021272:	75 0a                	jne    c002127e <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021274:	b8 04 00 00 00       	mov    eax,0x4
c0021279:	e9 c9 00 00 00       	jmp    c0021347 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002127e:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021286:	75 0a                	jne    c0021292 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021288:	b8 04 00 00 00       	mov    eax,0x4
c002128d:	e9 b5 00 00 00       	jmp    c0021347 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021292:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002129a:	75 0a                	jne    c00212a6 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002129c:	b8 04 00 00 00       	mov    eax,0x4
c00212a1:	e9 a1 00 00 00       	jmp    c0021347 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212a6:	83 ec 08             	sub    esp,0x8
c00212a9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212b0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212b7:	50                   	push   eax
c00212b8:	e8 77 f5 fd ff       	call   c0000834 <strcpy>
c00212bd:	83 c4 10             	add    esp,0x10
c00212c0:	83 ec 08             	sub    esp,0x8
c00212c3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00212ca:	50                   	push   eax
c00212cb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212d2:	e8 87 fd ff ff       	call   c002105e <FAT::fixFilepath(char*)>
c00212d7:	83 c4 10             	add    esp,0x10
c00212da:	83 ec 08             	sub    esp,0x8
c00212dd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00212e1:	50                   	push   eax
c00212e2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212e9:	50                   	push   eax
c00212ea:	e8 99 4e fe ff       	call   c0006188 <f_stat>
c00212ef:	83 c4 10             	add    esp,0x10
c00212f2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00212f9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021300:	85 c0                	test   eax,eax
c0021302:	74 07                	je     c002130b <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021304:	83 f8 04             	cmp    eax,0x4
c0021307:	74 32                	je     c002133b <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021309:	eb 37                	jmp    c0021342 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002130b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002130f:	0f b6 c0             	movzx  eax,al
c0021312:	83 e0 10             	and    eax,0x10
c0021315:	0f 95 c2             	setne  dl
c0021318:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002131f:	88 10                	mov    BYTE PTR [eax],dl
c0021321:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021328:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002132f:	89 01                	mov    DWORD PTR [ecx],eax
c0021331:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021334:	b8 00 00 00 00       	mov    eax,0x0
c0021339:	eb 0c                	jmp    c0021347 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002133b:	b8 02 00 00 00       	mov    eax,0x2
c0021340:	eb 05                	jmp    c0021347 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021342:	b8 01 00 00 00       	mov    eax,0x1
c0021347:	81 c4 2c 02 00 00    	add    esp,0x22c
c002134d:	c3                   	ret    

c002134e <FAT::unlink(char const*)>:
c002134e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021354:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002135c:	75 07                	jne    c0021365 <FAT::unlink(char const*)+0x17>
c002135e:	b8 04 00 00 00       	mov    eax,0x4
c0021363:	eb 5c                	jmp    c00213c1 <FAT::unlink(char const*)+0x73>
c0021365:	83 ec 08             	sub    esp,0x8
c0021368:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002136f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021373:	50                   	push   eax
c0021374:	e8 bb f4 fd ff       	call   c0000834 <strcpy>
c0021379:	83 c4 10             	add    esp,0x10
c002137c:	83 ec 08             	sub    esp,0x8
c002137f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021383:	50                   	push   eax
c0021384:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002138b:	e8 ce fc ff ff       	call   c002105e <FAT::fixFilepath(char*)>
c0021390:	83 c4 10             	add    esp,0x10
c0021393:	83 ec 0c             	sub    esp,0xc
c0021396:	8d 44 24 18          	lea    eax,[esp+0x18]
c002139a:	50                   	push   eax
c002139b:	e8 3a 51 fe ff       	call   c00064da <f_unlink>
c00213a0:	83 c4 10             	add    esp,0x10
c00213a3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00213aa:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00213b1:	85 c0                	test   eax,eax
c00213b3:	75 07                	jne    c00213bc <FAT::unlink(char const*)+0x6e>
c00213b5:	b8 00 00 00 00       	mov    eax,0x0
c00213ba:	eb 05                	jmp    c00213c1 <FAT::unlink(char const*)+0x73>
c00213bc:	b8 01 00 00 00       	mov    eax,0x1
c00213c1:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213c7:	c3                   	ret    

c00213c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00213c8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00213ce:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00213d5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00213dc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00213e0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00213e4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00213ec:	75 0a                	jne    c00213f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00213ee:	b8 04 00 00 00       	mov    eax,0x4
c00213f3:	e9 1c 01 00 00       	jmp    c0021514 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00213f8:	83 ec 08             	sub    esp,0x8
c00213fb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021402:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021406:	50                   	push   eax
c0021407:	e8 28 f4 fd ff       	call   c0000834 <strcpy>
c002140c:	83 c4 10             	add    esp,0x10
c002140f:	83 ec 08             	sub    esp,0x8
c0021412:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021416:	50                   	push   eax
c0021417:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002141e:	e8 3b fc ff ff       	call   c002105e <FAT::fixFilepath(char*)>
c0021423:	83 c4 10             	add    esp,0x10
c0021426:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002142e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021436:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002143b:	83 e0 01             	and    eax,0x1
c002143e:	74 08                	je     c0021448 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021440:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021448:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002144d:	83 e0 02             	and    eax,0x2
c0021450:	74 08                	je     c002145a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021452:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002145a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002145f:	83 e0 04             	and    eax,0x4
c0021462:	74 08                	je     c002146c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021464:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002146c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021471:	83 e0 08             	and    eax,0x8
c0021474:	74 08                	je     c002147e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021476:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002147e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021483:	83 e0 01             	and    eax,0x1
c0021486:	74 08                	je     c0021490 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021488:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021490:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021495:	83 e0 02             	and    eax,0x2
c0021498:	74 08                	je     c00214a2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002149a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00214a2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214a7:	83 e0 04             	and    eax,0x4
c00214aa:	74 08                	je     c00214b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00214ac:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00214b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214b9:	83 e0 08             	and    eax,0x8
c00214bc:	74 08                	je     c00214c6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00214be:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00214c6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00214cd:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00214d4:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00214dc:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00214e4:	83 ec 04             	sub    esp,0x4
c00214e7:	52                   	push   edx
c00214e8:	50                   	push   eax
c00214e9:	8d 44 24 24          	lea    eax,[esp+0x24]
c00214ed:	50                   	push   eax
c00214ee:	e8 89 56 fe ff       	call   c0006b7c <f_chmod>
c00214f3:	83 c4 10             	add    esp,0x10
c00214f6:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00214fd:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021504:	85 c0                	test   eax,eax
c0021506:	75 07                	jne    c002150f <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021508:	b8 00 00 00 00       	mov    eax,0x0
c002150d:	eb 05                	jmp    c0021514 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002150f:	b8 01 00 00 00       	mov    eax,0x1
c0021514:	81 c4 2c 01 00 00    	add    esp,0x12c
c002151a:	c3                   	ret    
c002151b:	90                   	nop

c002151c <FAT::rename(char const*, char const*)>:
c002151c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021522:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002152a:	74 0a                	je     c0021536 <FAT::rename(char const*, char const*)+0x1a>
c002152c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021534:	75 0a                	jne    c0021540 <FAT::rename(char const*, char const*)+0x24>
c0021536:	b8 04 00 00 00       	mov    eax,0x4
c002153b:	e9 98 00 00 00       	jmp    c00215d8 <FAT::rename(char const*, char const*)+0xbc>
c0021540:	83 ec 08             	sub    esp,0x8
c0021543:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002154a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021551:	50                   	push   eax
c0021552:	e8 dd f2 fd ff       	call   c0000834 <strcpy>
c0021557:	83 c4 10             	add    esp,0x10
c002155a:	83 ec 08             	sub    esp,0x8
c002155d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021564:	50                   	push   eax
c0021565:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002156c:	e8 ed fa ff ff       	call   c002105e <FAT::fixFilepath(char*)>
c0021571:	83 c4 10             	add    esp,0x10
c0021574:	83 ec 08             	sub    esp,0x8
c0021577:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002157e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021582:	50                   	push   eax
c0021583:	e8 ac f2 fd ff       	call   c0000834 <strcpy>
c0021588:	83 c4 10             	add    esp,0x10
c002158b:	83 ec 08             	sub    esp,0x8
c002158e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021592:	50                   	push   eax
c0021593:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002159a:	e8 bf fa ff ff       	call   c002105e <FAT::fixFilepath(char*)>
c002159f:	83 c4 10             	add    esp,0x10
c00215a2:	83 ec 08             	sub    esp,0x8
c00215a5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215a9:	50                   	push   eax
c00215aa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00215b1:	50                   	push   eax
c00215b2:	e8 d2 52 fe ff       	call   c0006889 <f_rename>
c00215b7:	83 c4 10             	add    esp,0x10
c00215ba:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00215c1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00215c8:	85 c0                	test   eax,eax
c00215ca:	75 07                	jne    c00215d3 <FAT::rename(char const*, char const*)+0xb7>
c00215cc:	b8 00 00 00 00       	mov    eax,0x0
c00215d1:	eb 05                	jmp    c00215d8 <FAT::rename(char const*, char const*)+0xbc>
c00215d3:	b8 01 00 00 00       	mov    eax,0x1
c00215d8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00215de:	c3                   	ret    
c00215df:	90                   	nop

c00215e0 <FAT::mkdir(char const*)>:
c00215e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00215e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00215ee:	75 07                	jne    c00215f7 <FAT::mkdir(char const*)+0x17>
c00215f0:	b8 04 00 00 00       	mov    eax,0x4
c00215f5:	eb 5c                	jmp    c0021653 <FAT::mkdir(char const*)+0x73>
c00215f7:	83 ec 08             	sub    esp,0x8
c00215fa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021601:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021605:	50                   	push   eax
c0021606:	e8 29 f2 fd ff       	call   c0000834 <strcpy>
c002160b:	83 c4 10             	add    esp,0x10
c002160e:	83 ec 08             	sub    esp,0x8
c0021611:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021615:	50                   	push   eax
c0021616:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002161d:	e8 3c fa ff ff       	call   c002105e <FAT::fixFilepath(char*)>
c0021622:	83 c4 10             	add    esp,0x10
c0021625:	83 ec 0c             	sub    esp,0xc
c0021628:	8d 44 24 18          	lea    eax,[esp+0x18]
c002162c:	50                   	push   eax
c002162d:	e8 2b 50 fe ff       	call   c000665d <f_mkdir>
c0021632:	83 c4 10             	add    esp,0x10
c0021635:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002163c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021643:	85 c0                	test   eax,eax
c0021645:	75 07                	jne    c002164e <FAT::mkdir(char const*)+0x6e>
c0021647:	b8 00 00 00 00       	mov    eax,0x0
c002164c:	eb 05                	jmp    c0021653 <FAT::mkdir(char const*)+0x73>
c002164e:	b8 01 00 00 00       	mov    eax,0x1
c0021653:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021659:	c3                   	ret    

c002165a <FAT::exists(char const*)>:
c002165a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021660:	83 ec 08             	sub    esp,0x8
c0021663:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002166a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002166e:	50                   	push   eax
c002166f:	e8 c0 f1 fd ff       	call   c0000834 <strcpy>
c0021674:	83 c4 10             	add    esp,0x10
c0021677:	83 ec 08             	sub    esp,0x8
c002167a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002167e:	50                   	push   eax
c002167f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021686:	e8 d3 f9 ff ff       	call   c002105e <FAT::fixFilepath(char*)>
c002168b:	83 c4 10             	add    esp,0x10
c002168e:	83 ec 08             	sub    esp,0x8
c0021691:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021698:	50                   	push   eax
c0021699:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002169d:	50                   	push   eax
c002169e:	e8 e5 4a fe ff       	call   c0006188 <f_stat>
c00216a3:	83 c4 10             	add    esp,0x10
c00216a6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00216ad:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00216b4:	85 c0                	test   eax,eax
c00216b6:	75 04                	jne    c00216bc <FAT::exists(char const*)+0x62>
c00216b8:	b0 01                	mov    al,0x1
c00216ba:	eb 02                	jmp    c00216be <FAT::exists(char const*)+0x64>
c00216bc:	b0 00                	mov    al,0x0
c00216be:	81 c4 2c 02 00 00    	add    esp,0x22c
c00216c4:	c3                   	ret    
c00216c5:	90                   	nop

c00216c6 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00216c6:	b8 08 00 00 00       	mov    eax,0x8
c00216cb:	c3                   	ret    

c00216cc <ISO9660::seek(void*, unsigned long long)>:
c00216cc:	53                   	push   ebx
c00216cd:	b8 04 00 00 00       	mov    eax,0x4
c00216d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00216d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00216da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00216de:	85 d2                	test   edx,edx
c00216e0:	74 17                	je     c00216f9 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00216e2:	89 c8                	mov    eax,ecx
c00216e4:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00216e7:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00216ea:	b8 01 00 00 00       	mov    eax,0x1
c00216ef:	73 08                	jae    c00216f9 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00216f1:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00216f4:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00216f7:	31 c0                	xor    eax,eax
c00216f9:	5b                   	pop    ebx
c00216fa:	c3                   	ret    
c00216fb:	90                   	nop

c00216fc <ISO9660::tell(void*, unsigned long long*)>:
c00216fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021700:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021704:	85 d2                	test   edx,edx
c0021706:	74 12                	je     c002171a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021708:	85 c0                	test   eax,eax
c002170a:	74 0e                	je     c002171a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002170c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002170f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021712:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021715:	89 10                	mov    DWORD PTR [eax],edx
c0021717:	31 c0                	xor    eax,eax
c0021719:	c3                   	ret    
c002171a:	b8 04 00 00 00       	mov    eax,0x4
c002171f:	c3                   	ret    

c0021720 <ISO9660::getName()>:
c0021720:	b8 54 cb 02 c0       	mov    eax,0xc002cb54
c0021725:	c3                   	ret    

c0021726 <ISO9660::stat(void*, unsigned long long*)>:
c0021726:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002172a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002172e:	85 d2                	test   edx,edx
c0021730:	74 12                	je     c0021744 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021732:	85 c0                	test   eax,eax
c0021734:	74 0e                	je     c0021744 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021736:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021739:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002173c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002173f:	89 10                	mov    DWORD PTR [eax],edx
c0021741:	31 c0                	xor    eax,eax
c0021743:	c3                   	ret    
c0021744:	b8 04 00 00 00       	mov    eax,0x4
c0021749:	c3                   	ret    

c002174a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002174a:	b8 01 00 00 00       	mov    eax,0x1
c002174f:	c3                   	ret    

c0021750 <ISO9660::unlink(char const*)>:
c0021750:	b8 01 00 00 00       	mov    eax,0x1
c0021755:	c3                   	ret    

c0021756 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021756:	b8 01 00 00 00       	mov    eax,0x1
c002175b:	c3                   	ret    

c002175c <ISO9660::rename(char const*, char const*)>:
c002175c:	b8 01 00 00 00       	mov    eax,0x1
c0021761:	c3                   	ret    

c0021762 <ISO9660::mkdir(char const*)>:
c0021762:	b8 01 00 00 00       	mov    eax,0x1
c0021767:	c3                   	ret    

c0021768 <ISO9660::close(void*)>:
c0021768:	83 ec 0c             	sub    esp,0xc
c002176b:	b8 04 00 00 00       	mov    eax,0x4
c0021770:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021774:	85 d2                	test   edx,edx
c0021776:	74 0e                	je     c0021786 <ISO9660::close(void*)+0x1e>
c0021778:	83 ec 0c             	sub    esp,0xc
c002177b:	52                   	push   edx
c002177c:	e8 71 e1 fe ff       	call   c000f8f2 <free>
c0021781:	83 c4 10             	add    esp,0x10
c0021784:	31 c0                	xor    eax,eax
c0021786:	83 c4 0c             	add    esp,0xc
c0021789:	c3                   	ret    

c002178a <ISO9660::closeDir(void*)>:
c002178a:	83 ec 0c             	sub    esp,0xc
c002178d:	b8 04 00 00 00       	mov    eax,0x4
c0021792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021796:	85 d2                	test   edx,edx
c0021798:	74 0e                	je     c00217a8 <ISO9660::closeDir(void*)+0x1e>
c002179a:	83 ec 0c             	sub    esp,0xc
c002179d:	52                   	push   edx
c002179e:	e8 4f e1 fe ff       	call   c000f8f2 <free>
c00217a3:	83 c4 10             	add    esp,0x10
c00217a6:	31 c0                	xor    eax,eax
c00217a8:	83 c4 0c             	add    esp,0xc
c00217ab:	c3                   	ret    

c00217ac <ISO9660::~ISO9660()>:
c00217ac:	83 ec 0c             	sub    esp,0xc
c00217af:	ba b8 cb 02 c0       	mov    edx,0xc002cbb8
c00217b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217b8:	89 10                	mov    DWORD PTR [eax],edx
c00217ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217be:	83 ec 0c             	sub    esp,0xc
c00217c1:	50                   	push   eax
c00217c2:	e8 23 1b ff ff       	call   c00132ea <Filesystem::~Filesystem()>
c00217c7:	83 c4 10             	add    esp,0x10
c00217ca:	90                   	nop
c00217cb:	83 c4 0c             	add    esp,0xc
c00217ce:	c3                   	ret    
c00217cf:	90                   	nop

c00217d0 <ISO9660::~ISO9660()>:
c00217d0:	83 ec 0c             	sub    esp,0xc
c00217d3:	83 ec 0c             	sub    esp,0xc
c00217d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217da:	e8 cd ff ff ff       	call   c00217ac <ISO9660::~ISO9660()>
c00217df:	83 c4 10             	add    esp,0x10
c00217e2:	83 ec 08             	sub    esp,0x8
c00217e5:	6a 08                	push   0x8
c00217e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217eb:	e8 f1 16 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c00217f0:	83 c4 10             	add    esp,0x10
c00217f3:	83 c4 0c             	add    esp,0xc
c00217f6:	c3                   	ret    

c00217f7 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00217f7:	55                   	push   ebp
c00217f8:	31 c9                	xor    ecx,ecx
c00217fa:	57                   	push   edi
c00217fb:	56                   	push   esi
c00217fc:	53                   	push   ebx
c00217fd:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021801:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021805:	89 eb                	mov    ebx,ebp
c0021807:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002180b:	39 ce                	cmp    esi,ecx
c002180d:	7e 17                	jle    c0021826 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002180f:	31 d2                	xor    edx,edx
c0021811:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021815:	7d 13                	jge    c002182a <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021817:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002181b:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002181e:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021821:	75 0d                	jne    c0021830 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021823:	42                   	inc    edx
c0021824:	eb eb                	jmp    c0021811 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021826:	31 c0                	xor    eax,eax
c0021828:	eb 0a                	jmp    c0021834 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002182a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002182e:	eb 04                	jmp    c0021834 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021830:	41                   	inc    ecx
c0021831:	43                   	inc    ebx
c0021832:	eb d7                	jmp    c002180b <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021834:	5b                   	pop    ebx
c0021835:	5e                   	pop    esi
c0021836:	5f                   	pop    edi
c0021837:	5d                   	pop    ebp
c0021838:	c3                   	ret    

c0021839 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021839:	56                   	push   esi
c002183a:	53                   	push   ebx
c002183b:	52                   	push   edx
c002183c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021840:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021844:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021848:	39 0d c0 1d 03 c0    	cmp    DWORD PTR ds:0xc0031dc0,ecx
c002184e:	75 08                	jne    c0021858 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021850:	38 05 14 dc 02 c0    	cmp    BYTE PTR ds:0xc002dc14,al
c0021856:	74 2b                	je     c0021883 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021858:	83 ec 0c             	sub    esp,0xc
c002185b:	a2 14 dc 02 c0       	mov    ds:0xc002dc14,al
c0021860:	68 e0 1d 03 c0       	push   0xc0031de0
c0021865:	0f be c0             	movsx  eax,al
c0021868:	6a 01                	push   0x1
c002186a:	89 0d c0 1d 03 c0    	mov    DWORD PTR ds:0xc0031dc0,ecx
c0021870:	31 db                	xor    ebx,ebx
c0021872:	53                   	push   ebx
c0021873:	51                   	push   ecx
c0021874:	ff 34 85 9c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1464]
c002187b:	e8 62 4f ff ff       	call   c00167e2 <LogicalDisk::read(unsigned long long, int, void*)>
c0021880:	83 c4 20             	add    esp,0x20
c0021883:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c002188b:	c7 44 24 14 e0 1d 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031de0
c0021893:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021897:	58                   	pop    eax
c0021898:	5b                   	pop    ebx
c0021899:	5e                   	pop    esi
c002189a:	e9 a5 ee fd ff       	jmp    c0000744 <memcpy>
c002189f:	90                   	nop

c00218a0 <ISO9660::tryMount(LogicalDisk*, int)>:
c00218a0:	81 ec 10 08 00 00    	sub    esp,0x810
c00218a6:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00218ad:	83 c0 41             	add    eax,0x41
c00218b0:	0f be c0             	movsx  eax,al
c00218b3:	50                   	push   eax
c00218b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00218b8:	50                   	push   eax
c00218b9:	6a 10                	push   0x10
c00218bb:	e8 79 ff ff ff       	call   c0021839 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218c0:	83 c4 10             	add    esp,0x10
c00218c3:	31 c0                	xor    eax,eax
c00218c5:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00218ca:	75 1d                	jne    c00218e9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218cc:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00218d1:	75 16                	jne    c00218e9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218d3:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00218d8:	75 0f                	jne    c00218e9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218da:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00218df:	75 08                	jne    c00218e9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218e1:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00218e6:	0f 94 c0             	sete   al
c00218e9:	81 c4 0c 08 00 00    	add    esp,0x80c
c00218ef:	c3                   	ret    

c00218f0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00218f0:	55                   	push   ebp
c00218f1:	57                   	push   edi
c00218f2:	56                   	push   esi
c00218f3:	53                   	push   ebx
c00218f4:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00218fa:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021901:	85 ed                	test   ebp,ebp
c0021903:	0f 84 d6 01 00 00    	je     c0021adf <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021909:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021911:	0f 84 c8 01 00 00    	je     c0021adf <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021917:	b8 01 00 00 00       	mov    eax,0x1
c002191c:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021920:	0f 85 be 01 00 00    	jne    c0021ae4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021926:	31 d2                	xor    edx,edx
c0021928:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002192f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021932:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021935:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021939:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002193c:	89 04 24             	mov    DWORD PTR [esp],eax
c002193f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021943:	01 f0                	add    eax,esi
c0021945:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021948:	11 fa                	adc    edx,edi
c002194a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002194e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021952:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021956:	19 d1                	sbb    ecx,edx
c0021958:	72 0a                	jb     c0021964 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002195a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002195e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021962:	eb 13                	jmp    c0021977 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021964:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021968:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002196c:	29 f0                	sub    eax,esi
c002196e:	19 fa                	sbb    edx,edi
c0021970:	89 04 24             	mov    DWORD PTR [esp],eax
c0021973:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021977:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002197a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002197d:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021981:	51                   	push   ecx
c0021982:	c1 e0 0b             	shl    eax,0xb
c0021985:	01 c6                	add    esi,eax
c0021987:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002198b:	11 d7                	adc    edi,edx
c002198d:	50                   	push   eax
c002198e:	89 fa                	mov    edx,edi
c0021990:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021994:	89 f0                	mov    eax,esi
c0021996:	53                   	push   ebx
c0021997:	0f ac d0 0b          	shrd   eax,edx,0xb
c002199b:	50                   	push   eax
c002199c:	e8 98 fe ff ff       	call   c0021839 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219a5:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00219a8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00219ac:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00219b2:	83 c4 10             	add    esp,0x10
c00219b5:	b8 00 08 00 00       	mov    eax,0x800
c00219ba:	29 d0                	sub    eax,edx
c00219bc:	39 c1                	cmp    ecx,eax
c00219be:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00219c2:	83 d9 00             	sbb    ecx,0x0
c00219c5:	7d 1c                	jge    c00219e3 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00219c7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00219cc:	75 12                	jne    c00219e0 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00219ce:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00219db:	e9 fb 00 00 00       	jmp    c0021adb <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00219e0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219e3:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00219e6:	31 d2                	xor    edx,edx
c00219e8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00219ec:	39 c2                	cmp    edx,eax
c00219ee:	7d 14                	jge    c0021a04 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00219f0:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00219f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219fb:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00219fe:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021a01:	42                   	inc    edx
c0021a02:	eb e8                	jmp    c00219ec <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021a04:	89 c3                	mov    ebx,eax
c0021a06:	85 c0                	test   eax,eax
c0021a08:	79 02                	jns    c0021a0c <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021a0a:	31 db                	xor    ebx,ebx
c0021a0c:	99                   	cdq    
c0021a0d:	01 c3                	add    ebx,eax
c0021a0f:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021a16:	01 c6                	add    esi,eax
c0021a18:	11 d7                	adc    edi,edx
c0021a1a:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021a1e:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021a22:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021a25:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021a29:	29 c6                	sub    esi,eax
c0021a2b:	19 d7                	sbb    edi,edx
c0021a2d:	89 34 24             	mov    DWORD PTR [esp],esi
c0021a30:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021a34:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021a39:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021a3c:	b8 00 00 00 00       	mov    eax,0x0
c0021a41:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a45:	7d 3e                	jge    c0021a85 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021a47:	52                   	push   edx
c0021a48:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a4c:	50                   	push   eax
c0021a4d:	53                   	push   ebx
c0021a4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a52:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021a56:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021a5a:	50                   	push   eax
c0021a5b:	e8 d9 fd ff ff       	call   c0021839 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a60:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021a68:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021a6d:	81 c3 00 08 00 00    	add    ebx,0x800
c0021a73:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021a7b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021a80:	83 c4 10             	add    esp,0x10
c0021a83:	eb af                	jmp    c0021a34 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021a85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a89:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021a8c:	74 32                	je     c0021ac0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021a8e:	50                   	push   eax
c0021a8f:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a93:	50                   	push   eax
c0021a94:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a98:	50                   	push   eax
c0021a99:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021a9d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021aa1:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021aa5:	56                   	push   esi
c0021aa6:	e8 8e fd ff ff       	call   c0021839 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021aab:	83 c4 0c             	add    esp,0xc
c0021aae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021ab2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021ab6:	50                   	push   eax
c0021ab7:	53                   	push   ebx
c0021ab8:	e8 87 ec fd ff       	call   c0000744 <memcpy>
c0021abd:	83 c4 10             	add    esp,0x10
c0021ac0:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021ac7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021acf:	89 38                	mov    DWORD PTR [eax],edi
c0021ad1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ad5:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021ad8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021adb:	31 c0                	xor    eax,eax
c0021add:	eb 05                	jmp    c0021ae4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021adf:	b8 04 00 00 00       	mov    eax,0x4
c0021ae4:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021aea:	5b                   	pop    ebx
c0021aeb:	5e                   	pop    esi
c0021aec:	5f                   	pop    edi
c0021aed:	5d                   	pop    ebp
c0021aee:	c3                   	ret    
c0021aef:	90                   	nop

c0021af0 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021af0:	55                   	push   ebp
c0021af1:	57                   	push   edi
c0021af2:	56                   	push   esi
c0021af3:	53                   	push   ebx
c0021af4:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021afa:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021b01:	85 f6                	test   esi,esi
c0021b03:	0f 84 64 02 00 00    	je     c0021d6d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b09:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021b11:	0f 84 56 02 00 00    	je     c0021d6d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b17:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021b1a:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021b1d:	75 0a                	jne    c0021b29 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021b1f:	b8 07 00 00 00       	mov    eax,0x7
c0021b24:	e9 49 02 00 00       	jmp    c0021d72 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b29:	50                   	push   eax
c0021b2a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b2e:	50                   	push   eax
c0021b2f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b36:	53                   	push   ebx
c0021b37:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b39:	c1 e0 0b             	shl    eax,0xb
c0021b3c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021b3f:	c1 e8 0b             	shr    eax,0xb
c0021b42:	50                   	push   eax
c0021b43:	e8 f1 fc ff ff       	call   c0021839 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b48:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b4b:	83 c4 10             	add    esp,0x10
c0021b4e:	89 c1                	mov    ecx,eax
c0021b50:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021b53:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021b59:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021b5c:	84 db                	test   bl,bl
c0021b5e:	0f 85 90 00 00 00    	jne    c0021bf4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021b64:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021b6a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b70:	29 c7                	sub    edi,eax
c0021b72:	89 fb                	mov    ebx,edi
c0021b74:	c1 fb 1f             	sar    ebx,0x1f
c0021b77:	01 f8                	add    eax,edi
c0021b79:	11 da                	adc    edx,ebx
c0021b7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b83:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021b86:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021b89:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b8c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b92:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b96:	89 d8                	mov    eax,ebx
c0021b98:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b9b:	ba 00 00 00 00       	mov    edx,0x0
c0021ba0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021ba4:	b8 00 00 00 00       	mov    eax,0x0
c0021ba9:	73 0b                	jae    c0021bb6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021bab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021bae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021bb2:	29 f8                	sub    eax,edi
c0021bb4:	19 da                	sbb    edx,ebx
c0021bb6:	89 d3                	mov    ebx,edx
c0021bb8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021bbb:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021bbe:	09 c3                	or     ebx,eax
c0021bc0:	0f 84 59 ff ff ff    	je     c0021b1f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021bc6:	55                   	push   ebp
c0021bc7:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021bcb:	50                   	push   eax
c0021bcc:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021bd3:	53                   	push   ebx
c0021bd4:	8b 06                	mov    eax,DWORD PTR [esi]
c0021bd6:	c1 e0 0b             	shl    eax,0xb
c0021bd9:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021bdd:	c1 e8 0b             	shr    eax,0xb
c0021be0:	50                   	push   eax
c0021be1:	e8 53 fc ff ff       	call   c0021839 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021be6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021be9:	83 c4 10             	add    esp,0x10
c0021bec:	25 ff 07 00 00       	and    eax,0x7ff
c0021bf1:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021bf4:	57                   	push   edi
c0021bf5:	6a 28                	push   0x28
c0021bf7:	6a 00                	push   0x0
c0021bf9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021bfd:	50                   	push   eax
c0021bfe:	e8 75 eb fd ff       	call   c0000778 <memset>
c0021c03:	31 d2                	xor    edx,edx
c0021c05:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021c08:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021c0e:	89 f8                	mov    eax,edi
c0021c10:	83 c0 21             	add    eax,0x21
c0021c13:	83 d2 00             	adc    edx,0x0
c0021c16:	89 c7                	mov    edi,eax
c0021c18:	89 d5                	mov    ebp,edx
c0021c1a:	83 c4 10             	add    esp,0x10
c0021c1d:	31 c9                	xor    ecx,ecx
c0021c1f:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021c26:	83 f9 28             	cmp    ecx,0x28
c0021c29:	88 04 24             	mov    BYTE PTR [esp],al
c0021c2c:	0f 94 c2             	sete   dl
c0021c2f:	88 d0                	mov    al,dl
c0021c31:	ba ff 07 00 00       	mov    edx,0x7ff
c0021c36:	39 fa                	cmp    edx,edi
c0021c38:	ba 00 00 00 00       	mov    edx,0x0
c0021c3d:	19 ea                	sbb    edx,ebp
c0021c3f:	0f 92 c2             	setb   dl
c0021c42:	09 c2                	or     edx,eax
c0021c44:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021c48:	0f 94 c0             	sete   al
c0021c4b:	08 d0                	or     al,dl
c0021c4d:	75 16                	jne    c0021c65 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c4f:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021c53:	74 10                	je     c0021c65 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c55:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021c58:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021c5c:	41                   	inc    ecx
c0021c5d:	83 c7 01             	add    edi,0x1
c0021c60:	83 d5 00             	adc    ebp,0x0
c0021c63:	eb ba                	jmp    c0021c1f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021c65:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021c6c:	83 ec 0c             	sub    esp,0xc
c0021c6f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021c73:	57                   	push   edi
c0021c74:	e8 1b eb fd ff       	call   c0000794 <strlen>
c0021c79:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021c81:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c85:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021c8c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c8f:	5a                   	pop    edx
c0021c90:	25 ff 07 00 00       	and    eax,0x7ff
c0021c95:	01 c8                	add    eax,ecx
c0021c97:	59                   	pop    ecx
c0021c98:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c9e:	83 e0 02             	and    eax,0x2
c0021ca1:	3c 01                	cmp    al,0x1
c0021ca3:	19 c0                	sbb    eax,eax
c0021ca5:	83 c0 02             	add    eax,0x2
c0021ca8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021cac:	57                   	push   edi
c0021cad:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021cb1:	50                   	push   eax
c0021cb2:	e8 7d eb fd ff       	call   c0000834 <strcpy>
c0021cb7:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021cbb:	83 c4 10             	add    esp,0x10
c0021cbe:	84 c0                	test   al,al
c0021cc0:	75 21                	jne    c0021ce3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021cc2:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021cca:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021cd2:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021cda:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021ce1:	eb 28                	jmp    c0021d0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ce3:	fe c8                	dec    al
c0021ce5:	75 24                	jne    c0021d0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ce7:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021cef:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021cf7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021cff:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021d06:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021d0b:	0f b6 fb             	movzx  edi,bl
c0021d0e:	31 db                	xor    ebx,ebx
c0021d10:	50                   	push   eax
c0021d11:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021d18:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021d1c:	50                   	push   eax
c0021d1d:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021d24:	e8 1b ea fd ff       	call   c0000744 <memcpy>
c0021d29:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021d30:	89 f9                	mov    ecx,edi
c0021d32:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021d38:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021d3b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021d3e:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021d41:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021d44:	83 c4 10             	add    esp,0x10
c0021d47:	39 c7                	cmp    edi,eax
c0021d49:	89 df                	mov    edi,ebx
c0021d4b:	19 d7                	sbb    edi,edx
c0021d4d:	72 10                	jb     c0021d5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021d4f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021d56:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021d5d:	eb 0a                	jmp    c0021d69 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021d5f:	29 c8                	sub    eax,ecx
c0021d61:	19 da                	sbb    edx,ebx
c0021d63:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021d66:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021d69:	31 c0                	xor    eax,eax
c0021d6b:	eb 05                	jmp    c0021d72 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021d6d:	b8 04 00 00 00       	mov    eax,0x4
c0021d72:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021d78:	5b                   	pop    ebx
c0021d79:	5e                   	pop    esi
c0021d7a:	5f                   	pop    edi
c0021d7b:	5d                   	pop    ebp
c0021d7c:	c3                   	ret    

c0021d7d <readRoot(unsigned int*, unsigned int*, char)>:
c0021d7d:	81 ec 40 08 00 00    	sub    esp,0x840
c0021d83:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021d8b:	50                   	push   eax
c0021d8c:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021d90:	50                   	push   eax
c0021d91:	6a 10                	push   0x10
c0021d93:	e8 a1 fa ff ff       	call   c0021839 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d98:	83 c4 0c             	add    esp,0xc
c0021d9b:	6a 22                	push   0x22
c0021d9d:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021da4:	50                   	push   eax
c0021da5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021da9:	50                   	push   eax
c0021daa:	e8 95 e9 fd ff       	call   c0000744 <memcpy>
c0021daf:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021db6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021dba:	89 10                	mov    DWORD PTR [eax],edx
c0021dbc:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021dc3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021dc7:	89 10                	mov    DWORD PTR [eax],edx
c0021dc9:	b0 01                	mov    al,0x1
c0021dcb:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021dd1:	c3                   	ret    

c0021dd2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021dd2:	55                   	push   ebp
c0021dd3:	57                   	push   edi
c0021dd4:	56                   	push   esi
c0021dd5:	53                   	push   ebx
c0021dd6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021ddc:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021de3:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021dea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021dee:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021df2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021df6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021dfa:	75 03                	jne    c0021dff <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021dfc:	83 c3 02             	add    ebx,0x2
c0021dff:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021e02:	75 03                	jne    c0021e07 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021e04:	43                   	inc    ebx
c0021e05:	eb f8                	jmp    c0021dff <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021e07:	51                   	push   ecx
c0021e08:	68 00 01 00 00       	push   0x100
c0021e0d:	6a 00                	push   0x0
c0021e0f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e13:	50                   	push   eax
c0021e14:	e8 5f e9 fd ff       	call   c0000778 <memset>
c0021e19:	83 c4 10             	add    esp,0x10
c0021e1c:	31 d2                	xor    edx,edx
c0021e1e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021e21:	84 c0                	test   al,al
c0021e23:	74 21                	je     c0021e46 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021e25:	3c 2f                	cmp    al,0x2f
c0021e27:	75 0b                	jne    c0021e34 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021e29:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021e2d:	bd 01 00 00 00       	mov    ebp,0x1
c0021e32:	eb 14                	jmp    c0021e48 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021e34:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021e37:	80 f9 19             	cmp    cl,0x19
c0021e3a:	77 03                	ja     c0021e3f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e3c:	83 e8 20             	sub    eax,0x20
c0021e3f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021e43:	42                   	inc    edx
c0021e44:	eb d8                	jmp    c0021e1e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021e46:	31 ed                	xor    ebp,ebp
c0021e48:	83 ec 0c             	sub    esp,0xc
c0021e4b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021e52:	e8 8b da fe ff       	call   c000f8e2 <malloc>
c0021e57:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021e5e:	89 c6                	mov    esi,eax
c0021e60:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021e66:	c1 ef 0b             	shr    edi,0xb
c0021e69:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021e70:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021e74:	83 c4 10             	add    esp,0x10
c0021e77:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021e7c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e80:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021e87:	74 28                	je     c0021eb1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021e89:	52                   	push   edx
c0021e8a:	57                   	push   edi
c0021e8b:	50                   	push   eax
c0021e8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e90:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021e97:	e8 9d f9 ff ff       	call   c0021839 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021ea0:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021ea7:	05 00 08 00 00       	add    eax,0x800
c0021eac:	83 c4 10             	add    esp,0x10
c0021eaf:	eb cb                	jmp    c0021e7c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021eb1:	83 ec 0c             	sub    esp,0xc
c0021eb4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021eb8:	57                   	push   edi
c0021eb9:	e8 d6 e8 fd ff       	call   c0000794 <strlen>
c0021ebe:	50                   	push   eax
c0021ebf:	57                   	push   edi
c0021ec0:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021ec7:	56                   	push   esi
c0021ec8:	e8 2a f9 ff ff       	call   c00217f7 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021ecd:	83 c4 20             	add    esp,0x20
c0021ed0:	85 c0                	test   eax,eax
c0021ed2:	75 13                	jne    c0021ee7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021ed4:	83 ec 0c             	sub    esp,0xc
c0021ed7:	56                   	push   esi
c0021ed8:	e8 15 da fe ff       	call   c000f8f2 <free>
c0021edd:	83 c4 10             	add    esp,0x10
c0021ee0:	31 c0                	xor    eax,eax
c0021ee2:	e9 b3 00 00 00       	jmp    c0021f9a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ee7:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021eeb:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021eef:	c1 e7 08             	shl    edi,0x8
c0021ef2:	c1 e2 10             	shl    edx,0x10
c0021ef5:	09 d7                	or     edi,edx
c0021ef7:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021efb:	09 d7                	or     edi,edx
c0021efd:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021f01:	c1 e2 18             	shl    edx,0x18
c0021f04:	09 d7                	or     edi,edx
c0021f06:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021f0a:	89 d1                	mov    ecx,edx
c0021f0c:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021f10:	c1 e1 08             	shl    ecx,0x8
c0021f13:	c1 e2 10             	shl    edx,0x10
c0021f16:	09 ca                	or     edx,ecx
c0021f18:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021f1c:	09 ca                	or     edx,ecx
c0021f1e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021f22:	c1 e1 18             	shl    ecx,0x18
c0021f25:	09 ca                	or     edx,ecx
c0021f27:	89 e9                	mov    ecx,ebp
c0021f29:	84 c9                	test   cl,cl
c0021f2b:	74 3c                	je     c0021f69 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021f2d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021f31:	83 ec 0c             	sub    esp,0xc
c0021f34:	56                   	push   esi
c0021f35:	e8 b8 d9 fe ff       	call   c000f8f2 <free>
c0021f3a:	83 c4 0c             	add    esp,0xc
c0021f3d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f44:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021f49:	50                   	push   eax
c0021f4a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f51:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f5c:	52                   	push   edx
c0021f5d:	57                   	push   edi
c0021f5e:	53                   	push   ebx
c0021f5f:	e8 6e fe ff ff       	call   c0021dd2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f64:	83 c4 20             	add    esp,0x20
c0021f67:	eb 31                	jmp    c0021f9a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f69:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021f6c:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021f73:	d0 e8                	shr    al,1
c0021f75:	89 3b                	mov    DWORD PTR [ebx],edi
c0021f77:	83 e0 01             	and    eax,0x1
c0021f7a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021f81:	83 ec 0c             	sub    esp,0xc
c0021f84:	89 13                	mov    DWORD PTR [ebx],edx
c0021f86:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021f8d:	89 03                	mov    DWORD PTR [ebx],eax
c0021f8f:	56                   	push   esi
c0021f90:	e8 5d d9 fe ff       	call   c000f8f2 <free>
c0021f95:	83 c4 10             	add    esp,0x10
c0021f98:	b0 01                	mov    al,0x1
c0021f9a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021fa0:	5b                   	pop    ebx
c0021fa1:	5e                   	pop    esi
c0021fa2:	5f                   	pop    edi
c0021fa3:	5d                   	pop    ebp
c0021fa4:	c3                   	ret    

c0021fa5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021fa5:	55                   	push   ebp
c0021fa6:	57                   	push   edi
c0021fa7:	56                   	push   esi
c0021fa8:	53                   	push   ebx
c0021fa9:	83 ec 20             	sub    esp,0x20
c0021fac:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021fb0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021fb4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021fb8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021fc0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021fc8:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021fcd:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021fd3:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021fd9:	57                   	push   edi
c0021fda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021fde:	50                   	push   eax
c0021fdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021fe3:	50                   	push   eax
c0021fe4:	e8 94 fd ff ff       	call   c0021d7d <readRoot(unsigned int*, unsigned int*, char)>
c0021fe9:	5a                   	pop    edx
c0021fea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021fee:	e8 a1 e7 fd ff       	call   c0000794 <strlen>
c0021ff3:	83 c4 10             	add    esp,0x10
c0021ff6:	83 f8 03             	cmp    eax,0x3
c0021ff9:	77 17                	ja     c0022012 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021ffb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fff:	89 03                	mov    DWORD PTR [ebx],eax
c0022001:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022005:	89 06                	mov    DWORD PTR [esi],eax
c0022007:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002200e:	b0 01                	mov    al,0x1
c0022010:	eb 19                	jmp    c002202b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0022012:	50                   	push   eax
c0022013:	55                   	push   ebp
c0022014:	57                   	push   edi
c0022015:	56                   	push   esi
c0022016:	53                   	push   ebx
c0022017:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002201b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002201f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022023:	e8 aa fd ff ff       	call   c0021dd2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022028:	83 c4 20             	add    esp,0x20
c002202b:	83 c4 1c             	add    esp,0x1c
c002202e:	5b                   	pop    ebx
c002202f:	5e                   	pop    esi
c0022030:	5f                   	pop    edi
c0022031:	5d                   	pop    ebp
c0022032:	c3                   	ret    
c0022033:	90                   	nop

c0022034 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022034:	57                   	push   edi
c0022035:	56                   	push   esi
c0022036:	53                   	push   ebx
c0022037:	83 ec 10             	sub    esp,0x10
c002203a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002203e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022042:	85 ff                	test   edi,edi
c0022044:	0f 84 9d 00 00 00    	je     c00220e7 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002204a:	85 f6                	test   esi,esi
c002204c:	0f 84 95 00 00 00    	je     c00220e7 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022052:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022057:	74 17                	je     c0022070 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022059:	83 ec 0c             	sub    esp,0xc
c002205c:	68 6f cb 02 c0       	push   0xc002cb6f
c0022061:	e8 5b 0f ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0022066:	83 c4 10             	add    esp,0x10
c0022069:	b8 03 00 00 00       	mov    eax,0x3
c002206e:	eb 7c                	jmp    c00220ec <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022070:	83 ec 0c             	sub    esp,0xc
c0022073:	6a 1c                	push   0x1c
c0022075:	e8 68 d8 fe ff       	call   c000f8e2 <malloc>
c002207a:	89 07                	mov    DWORD PTR [edi],eax
c002207c:	89 c3                	mov    ebx,eax
c002207e:	58                   	pop    eax
c002207f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022083:	50                   	push   eax
c0022084:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022087:	50                   	push   eax
c0022088:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002208c:	50                   	push   eax
c002208d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022091:	50                   	push   eax
c0022092:	56                   	push   esi
c0022093:	e8 0d ff ff ff       	call   c0021fa5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022098:	83 c4 20             	add    esp,0x20
c002209b:	84 c0                	test   al,al
c002209d:	74 07                	je     c00220a6 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002209f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00220a4:	74 0b                	je     c00220b1 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00220a6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00220aa:	b8 01 00 00 00       	mov    eax,0x1
c00220af:	eb 3b                	jmp    c00220ec <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220b5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00220b9:	89 03                	mov    DWORD PTR [ebx],eax
c00220bb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00220c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220c6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00220cd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220d4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00220d7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00220de:	8a 06                	mov    al,BYTE PTR [esi]
c00220e0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00220e3:	31 c0                	xor    eax,eax
c00220e5:	eb 05                	jmp    c00220ec <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220e7:	b8 04 00 00 00       	mov    eax,0x4
c00220ec:	83 c4 10             	add    esp,0x10
c00220ef:	5b                   	pop    ebx
c00220f0:	5e                   	pop    esi
c00220f1:	5f                   	pop    edi
c00220f2:	c3                   	ret    
c00220f3:	90                   	nop

c00220f4 <ISO9660::exists(char const*)>:
c00220f4:	83 ec 28             	sub    esp,0x28
c00220f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220fb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00220ff:	52                   	push   edx
c0022100:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022103:	52                   	push   edx
c0022104:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022108:	52                   	push   edx
c0022109:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002210d:	52                   	push   edx
c002210e:	50                   	push   eax
c002210f:	e8 91 fe ff ff       	call   c0021fa5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022114:	83 c4 3c             	add    esp,0x3c
c0022117:	c3                   	ret    

c0022118 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022118:	56                   	push   esi
c0022119:	53                   	push   ebx
c002211a:	83 ec 14             	sub    esp,0x14
c002211d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022121:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022125:	85 db                	test   ebx,ebx
c0022127:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002212b:	0f 94 c2             	sete   dl
c002212e:	85 f6                	test   esi,esi
c0022130:	0f 94 c0             	sete   al
c0022133:	08 c2                	or     dl,al
c0022135:	75 68                	jne    c002219f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022137:	85 c9                	test   ecx,ecx
c0022139:	74 64                	je     c002219f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002213b:	83 ec 0c             	sub    esp,0xc
c002213e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022141:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022145:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002214b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022152:	50                   	push   eax
c0022153:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022156:	50                   	push   eax
c0022157:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002215b:	50                   	push   eax
c002215c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022160:	50                   	push   eax
c0022161:	51                   	push   ecx
c0022162:	e8 3e fe ff ff       	call   c0021fa5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022167:	83 c4 20             	add    esp,0x20
c002216a:	ba 01 00 00 00       	mov    edx,0x1
c002216f:	84 c0                	test   al,al
c0022171:	74 31                	je     c00221a4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022173:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022177:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002217e:	89 03                	mov    DWORD PTR [ebx],eax
c0022180:	ba 00 00 00 00       	mov    edx,0x0
c0022185:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022189:	85 c0                	test   eax,eax
c002218b:	0f 95 06             	setne  BYTE PTR [esi]
c002218e:	74 14                	je     c00221a4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022190:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022196:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002219d:	eb 05                	jmp    c00221a4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002219f:	ba 04 00 00 00       	mov    edx,0x4
c00221a4:	83 c4 14             	add    esp,0x14
c00221a7:	89 d0                	mov    eax,edx
c00221a9:	5b                   	pop    ebx
c00221aa:	5e                   	pop    esi
c00221ab:	c3                   	ret    

c00221ac <ISO9660::openDir(char const*, void**)>:
c00221ac:	57                   	push   edi
c00221ad:	56                   	push   esi
c00221ae:	53                   	push   ebx
c00221af:	83 ec 10             	sub    esp,0x10
c00221b2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00221b6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00221ba:	85 ff                	test   edi,edi
c00221bc:	0f 84 95 00 00 00    	je     c0022257 <ISO9660::openDir(char const*, void**)+0xab>
c00221c2:	85 f6                	test   esi,esi
c00221c4:	0f 84 8d 00 00 00    	je     c0022257 <ISO9660::openDir(char const*, void**)+0xab>
c00221ca:	83 ec 0c             	sub    esp,0xc
c00221cd:	6a 1c                	push   0x1c
c00221cf:	e8 0e d7 fe ff       	call   c000f8e2 <malloc>
c00221d4:	89 07                	mov    DWORD PTR [edi],eax
c00221d6:	89 c3                	mov    ebx,eax
c00221d8:	59                   	pop    ecx
c00221d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00221dd:	50                   	push   eax
c00221de:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00221e1:	50                   	push   eax
c00221e2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221e6:	50                   	push   eax
c00221e7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221eb:	50                   	push   eax
c00221ec:	56                   	push   esi
c00221ed:	e8 b3 fd ff ff       	call   c0021fa5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221f2:	83 c4 20             	add    esp,0x20
c00221f5:	84 c0                	test   al,al
c00221f7:	74 07                	je     c0022200 <ISO9660::openDir(char const*, void**)+0x54>
c00221f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00221fe:	75 21                	jne    c0022221 <ISO9660::openDir(char const*, void**)+0x75>
c0022200:	0f b6 c0             	movzx  eax,al
c0022203:	52                   	push   edx
c0022204:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022208:	50                   	push   eax
c0022209:	68 95 cb 02 c0       	push   0xc002cb95
c002220e:	e8 ae 0d ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0022213:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022217:	83 c4 10             	add    esp,0x10
c002221a:	b8 01 00 00 00       	mov    eax,0x1
c002221f:	eb 3b                	jmp    c002225c <ISO9660::openDir(char const*, void**)+0xb0>
c0022221:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022225:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022229:	89 03                	mov    DWORD PTR [ebx],eax
c002222b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022232:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022236:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002223d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022244:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022247:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002224e:	8a 06                	mov    al,BYTE PTR [esi]
c0022250:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022253:	31 c0                	xor    eax,eax
c0022255:	eb 05                	jmp    c002225c <ISO9660::openDir(char const*, void**)+0xb0>
c0022257:	b8 04 00 00 00       	mov    eax,0x4
c002225c:	83 c4 10             	add    esp,0x10
c002225f:	5b                   	pop    ebx
c0022260:	5e                   	pop    esi
c0022261:	5f                   	pop    edi
c0022262:	c3                   	ret    
c0022263:	90                   	nop

c0022264 <ISO9660::ISO9660()>:
c0022264:	83 ec 0c             	sub    esp,0xc
c0022267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002226b:	83 ec 0c             	sub    esp,0xc
c002226e:	50                   	push   eax
c002226f:	e8 52 10 ff ff       	call   c00132c6 <Filesystem::Filesystem()>
c0022274:	83 c4 10             	add    esp,0x10
c0022277:	ba b8 cb 02 c0       	mov    edx,0xc002cbb8
c002227c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022280:	89 10                	mov    DWORD PTR [eax],edx
c0022282:	90                   	nop
c0022283:	83 c4 0c             	add    esp,0xc
c0022286:	c3                   	ret    
c0022287:	90                   	nop

c0022288 <SoundChannel::~SoundChannel()>:
c0022288:	83 ec 0c             	sub    esp,0xc
c002228b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002228f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022292:	83 ec 0c             	sub    esp,0xc
c0022295:	50                   	push   eax
c0022296:	e8 57 d6 fe ff       	call   c000f8f2 <free>
c002229b:	83 c4 10             	add    esp,0x10
c002229e:	90                   	nop
c002229f:	83 c4 0c             	add    esp,0xc
c00222a2:	c3                   	ret    
c00222a3:	90                   	nop

c00222a4 <SoundChannel::setSpeed(float)>:
c00222a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222ac:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00222af:	c3                   	ret    

c00222b0 <SoundChannel::getSpeed()>:
c00222b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222b4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00222b7:	c3                   	ret    

c00222b8 <SoundChannel::setVolume(int)>:
c00222b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222bc:	83 f8 64             	cmp    eax,0x64
c00222bf:	7e 05                	jle    c00222c6 <SoundChannel::setVolume(int)+0xe>
c00222c1:	b8 64 00 00 00       	mov    eax,0x64
c00222c6:	85 c0                	test   eax,eax
c00222c8:	79 02                	jns    c00222cc <SoundChannel::setVolume(int)+0x14>
c00222ca:	31 c0                	xor    eax,eax
c00222cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00222d0:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00222d3:	c3                   	ret    

c00222d4 <SoundChannel::getVolume()>:
c00222d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222d8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00222db:	c3                   	ret    

c00222dc <SoundChannel::pause()>:
c00222dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222e0:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00222e4:	c3                   	ret    
c00222e5:	90                   	nop

c00222e6 <SoundChannel::SoundChannel(int, int, int, int)>:
c00222e6:	83 ec 1c             	sub    esp,0x1c
c00222e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222ed:	e8 ea ff ff ff       	call   c00222dc <SoundChannel::pause()>
c00222f2:	83 c4 04             	add    esp,0x4
c00222f5:	6a 50                	push   0x50
c00222f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222fb:	e8 b8 ff ff ff       	call   c00222b8 <SoundChannel::setVolume(int)>
c0022300:	83 c4 08             	add    esp,0x8
c0022303:	a1 30 cc 02 c0       	mov    eax,ds:0xc002cc30
c0022308:	50                   	push   eax
c0022309:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002230d:	e8 92 ff ff ff       	call   c00222a4 <SoundChannel::setSpeed(float)>
c0022312:	83 c4 08             	add    esp,0x8
c0022315:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022319:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002231d:	89 10                	mov    DWORD PTR [eax],edx
c002231f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022323:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022327:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002232a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002232e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022332:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022335:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002233a:	75 23                	jne    c002235f <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002233c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022340:	8b 10                	mov    edx,DWORD PTR [eax]
c0022342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022346:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022349:	0f af c2             	imul   eax,edx
c002234c:	85 c0                	test   eax,eax
c002234e:	79 03                	jns    c0022353 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022350:	83 c0 03             	add    eax,0x3
c0022353:	c1 f8 02             	sar    eax,0x2
c0022356:	05 a0 0f 00 00       	add    eax,0xfa0
c002235b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002235f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022363:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022367:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002236a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002236e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022375:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022379:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022380:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022384:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022387:	c1 e0 02             	shl    eax,0x2
c002238a:	83 ec 0c             	sub    esp,0xc
c002238d:	50                   	push   eax
c002238e:	e8 4f d5 fe ff       	call   c000f8e2 <malloc>
c0022393:	83 c4 10             	add    esp,0x10
c0022396:	89 c2                	mov    edx,eax
c0022398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002239c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002239f:	83 ec 04             	sub    esp,0x4
c00223a2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00223a6:	50                   	push   eax
c00223a7:	6a 01                	push   0x1
c00223a9:	6a 04                	push   0x4
c00223ab:	e8 ef 67 fe ff       	call   c0008b9f <src_new>
c00223b0:	83 c4 10             	add    esp,0x10
c00223b3:	89 c2                	mov    edx,eax
c00223b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223b9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00223bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223c0:	85 c0                	test   eax,eax
c00223c2:	74 10                	je     c00223d4 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00223c4:	83 ec 0c             	sub    esp,0xc
c00223c7:	68 14 cc 02 c0       	push   0xc002cc14
c00223cc:	e8 a2 82 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c00223d1:	83 c4 10             	add    esp,0x10
c00223d4:	a0 e0 29 03 c0       	mov    al,ds:0xc00329e0
c00223d9:	83 f0 01             	xor    eax,0x1
c00223dc:	84 c0                	test   al,al
c00223de:	74 57                	je     c0022437 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00223e0:	a1 34 cc 02 c0       	mov    eax,ds:0xc002cc34
c00223e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00223e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00223f1:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00223f9:	7f 35                	jg     c0022430 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00223fb:	83 ec 0c             	sub    esp,0xc
c00223fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022402:	e8 a0 4f 00 00       	call   c00273a7 <__floatsisf>
c0022407:	83 c4 10             	add    esp,0x10
c002240a:	8b 15 34 cc 02 c0    	mov    edx,DWORD PTR ds:0xc002cc34
c0022410:	83 ec 08             	sub    esp,0x8
c0022413:	52                   	push   edx
c0022414:	50                   	push   eax
c0022415:	e8 9f 4b 00 00       	call   c0026fb9 <__mulsf3>
c002241a:	83 c4 10             	add    esp,0x10
c002241d:	89 c2                	mov    edx,eax
c002241f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022423:	89 14 85 e0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda20],edx
c002242a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002242e:	eb c1                	jmp    c00223f1 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022430:	c6 05 e0 29 03 c0 01 	mov    BYTE PTR ds:0xc00329e0,0x1
c0022437:	90                   	nop
c0022438:	83 c4 1c             	add    esp,0x1c
c002243b:	c3                   	ret    

c002243c <SoundChannel::play()>:
c002243c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022440:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022444:	c3                   	ret    
c0022445:	90                   	nop

c0022446 <SoundChannel::paused()>:
c0022446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002244a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002244d:	c3                   	ret    

c002244e <SoundChannel::getSampleRate()>:
c002244e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022452:	8b 00                	mov    eax,DWORD PTR [eax]
c0022454:	c3                   	ret    
c0022455:	90                   	nop

c0022456 <SoundChannel::getBits()>:
c0022456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002245a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002245d:	c3                   	ret    

c002245e <SoundChannel::getBufferUsed()>:
c002245e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022462:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022465:	c3                   	ret    

c0022466 <SoundChannel::getBufferSize()>:
c0022466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002246a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002246d:	c3                   	ret    

c002246e <SoundChannel::unbuffer(float*, int, int)>:
c002246e:	56                   	push   esi
c002246f:	53                   	push   ebx
c0022470:	83 ec 40             	sub    esp,0x40
c0022473:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022477:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002247a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002247e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022481:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022485:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022489:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002248d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022491:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022495:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022499:	e8 09 4f 00 00       	call   c00273a7 <__floatsisf>
c002249e:	5a                   	pop    edx
c002249f:	89 c6                	mov    esi,eax
c00224a1:	ff 33                	push   DWORD PTR [ebx]
c00224a3:	e8 ff 4e 00 00       	call   c00273a7 <__floatsisf>
c00224a8:	59                   	pop    ecx
c00224a9:	5a                   	pop    edx
c00224aa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00224ad:	50                   	push   eax
c00224ae:	e8 06 4b 00 00       	call   c0026fb9 <__mulsf3>
c00224b3:	59                   	pop    ecx
c00224b4:	5a                   	pop    edx
c00224b5:	50                   	push   eax
c00224b6:	56                   	push   esi
c00224b7:	e8 c0 4c 00 00       	call   c002717c <__divsf3>
c00224bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00224bf:	e8 b3 61 00 00       	call   c0028677 <__extendsfdf2>
c00224c4:	59                   	pop    ecx
c00224c5:	5e                   	pop    esi
c00224c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00224ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00224ce:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00224d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00224da:	50                   	push   eax
c00224db:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00224de:	e8 b1 62 fe ff       	call   c0008794 <src_process>
c00224e3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00224e7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00224ea:	83 c4 0c             	add    esp,0xc
c00224ed:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00224f0:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00224f3:	29 d0                	sub    eax,edx
c00224f5:	c1 e0 02             	shl    eax,0x2
c00224f8:	50                   	push   eax
c00224f9:	8d 04 91             	lea    eax,[ecx+edx*4]
c00224fc:	50                   	push   eax
c00224fd:	51                   	push   ecx
c00224fe:	e8 79 e1 fd ff       	call   c000067c <memmove>
c0022503:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022507:	83 c4 44             	add    esp,0x44
c002250a:	5b                   	pop    ebx
c002250b:	5e                   	pop    esi
c002250c:	c3                   	ret    
c002250d:	90                   	nop

c002250e <SoundChannel::buffer8(unsigned char*, int)>:
c002250e:	55                   	push   ebp
c002250f:	57                   	push   edi
c0022510:	56                   	push   esi
c0022511:	53                   	push   ebx
c0022512:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022516:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002251a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002251d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022521:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022524:	74 7a                	je     c00225a0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022526:	85 ff                	test   edi,edi
c0022528:	7e 76                	jle    c00225a0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002252a:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002252e:	8d 70 01             	lea    esi,[eax+0x1]
c0022531:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022534:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022537:	8b 1c 9d e0 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcda20]
c002253e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022541:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022544:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022547:	74 5e                	je     c00225a7 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022549:	83 ff 01             	cmp    edi,0x1
c002254c:	74 4b                	je     c0022599 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002254e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022552:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022555:	8d 70 01             	lea    esi,[eax+0x1]
c0022558:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002255b:	8b 1c 9d e0 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcda20]
c0022562:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022565:	b8 02 00 00 00       	mov    eax,0x2
c002256a:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002256d:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022570:	75 23                	jne    c0022595 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022572:	eb 27                	jmp    c002259b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022574:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022579:	8d 71 01             	lea    esi,[ecx+0x1]
c002257c:	40                   	inc    eax
c002257d:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022580:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022583:	8b 1c 9d e0 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcda20]
c002258a:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002258d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022590:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022593:	74 06                	je     c002259b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022595:	39 c7                	cmp    edi,eax
c0022597:	75 db                	jne    c0022574 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022599:	89 f8                	mov    eax,edi
c002259b:	5b                   	pop    ebx
c002259c:	5e                   	pop    esi
c002259d:	5f                   	pop    edi
c002259e:	5d                   	pop    ebp
c002259f:	c3                   	ret    
c00225a0:	5b                   	pop    ebx
c00225a1:	31 c0                	xor    eax,eax
c00225a3:	5e                   	pop    esi
c00225a4:	5f                   	pop    edi
c00225a5:	5d                   	pop    ebp
c00225a6:	c3                   	ret    
c00225a7:	b8 01 00 00 00       	mov    eax,0x1
c00225ac:	eb ed                	jmp    c002259b <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00225ae <SoundDevice::SoundDevice(char const*)>:
c00225ae:	83 ec 1c             	sub    esp,0x1c
c00225b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225b5:	83 ec 08             	sub    esp,0x8
c00225b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225bc:	50                   	push   eax
c00225bd:	e8 16 20 ff ff       	call   c00145d8 <Device::Device(char const*)>
c00225c2:	83 c4 10             	add    esp,0x10
c00225c5:	ba 40 cc 02 c0       	mov    edx,0xc002cc40
c00225ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225ce:	89 10                	mov    DWORD PTR [eax],edx
c00225d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225d4:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00225de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225e2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00225ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225f4:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225f9:	7f 19                	jg     c0022614 <SoundDevice::SoundDevice(char const*)+0x66>
c00225fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022603:	83 c2 54             	add    edx,0x54
c0022606:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002260e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022612:	eb e0                	jmp    c00225f4 <SoundDevice::SoundDevice(char const*)+0x46>
c0022614:	90                   	nop
c0022615:	83 c4 1c             	add    esp,0x1c
c0022618:	c3                   	ret    
c0022619:	90                   	nop

c002261a <SoundDevice::~SoundDevice()>:
c002261a:	53                   	push   ebx
c002261b:	83 ec 18             	sub    esp,0x18
c002261e:	ba 40 cc 02 c0       	mov    edx,0xc002cc40
c0022623:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022627:	89 10                	mov    DWORD PTR [eax],edx
c0022629:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022631:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022636:	7f 46                	jg     c002267e <SoundDevice::~SoundDevice()+0x64>
c0022638:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002263c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022640:	83 c2 54             	add    edx,0x54
c0022643:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022647:	85 c0                	test   eax,eax
c0022649:	74 2d                	je     c0022678 <SoundDevice::~SoundDevice()+0x5e>
c002264b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002264f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022653:	83 c2 54             	add    edx,0x54
c0022656:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002265a:	85 db                	test   ebx,ebx
c002265c:	74 1a                	je     c0022678 <SoundDevice::~SoundDevice()+0x5e>
c002265e:	83 ec 0c             	sub    esp,0xc
c0022661:	53                   	push   ebx
c0022662:	e8 21 fc ff ff       	call   c0022288 <SoundChannel::~SoundChannel()>
c0022667:	83 c4 10             	add    esp,0x10
c002266a:	83 ec 08             	sub    esp,0x8
c002266d:	6a 2c                	push   0x2c
c002266f:	53                   	push   ebx
c0022670:	e8 6c 08 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0022675:	83 c4 10             	add    esp,0x10
c0022678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002267c:	eb b3                	jmp    c0022631 <SoundDevice::~SoundDevice()+0x17>
c002267e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022682:	83 ec 0c             	sub    esp,0xc
c0022685:	50                   	push   eax
c0022686:	e8 2f 1c ff ff       	call   c00142ba <Device::~Device()>
c002268b:	83 c4 10             	add    esp,0x10
c002268e:	90                   	nop
c002268f:	83 c4 18             	add    esp,0x18
c0022692:	5b                   	pop    ebx
c0022693:	c3                   	ret    

c0022694 <SoundDevice::~SoundDevice()>:
c0022694:	83 ec 0c             	sub    esp,0xc
c0022697:	83 ec 0c             	sub    esp,0xc
c002269a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002269e:	e8 77 ff ff ff       	call   c002261a <SoundDevice::~SoundDevice()>
c00226a3:	83 c4 10             	add    esp,0x10
c00226a6:	83 ec 08             	sub    esp,0x8
c00226a9:	68 e4 01 00 00       	push   0x1e4
c00226ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226b2:	e8 2a 08 ff ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c00226b7:	83 c4 10             	add    esp,0x10
c00226ba:	83 c4 0c             	add    esp,0xc
c00226bd:	c3                   	ret    

c00226be <SoundDevice::getFreeChannelNum()>:
c00226be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00226c2:	31 c0                	xor    eax,eax
c00226c4:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00226cc:	74 09                	je     c00226d7 <SoundDevice::getFreeChannelNum()+0x19>
c00226ce:	40                   	inc    eax
c00226cf:	83 f8 20             	cmp    eax,0x20
c00226d2:	75 f0                	jne    c00226c4 <SoundDevice::getFreeChannelNum()+0x6>
c00226d4:	83 c8 ff             	or     eax,0xffffffff
c00226d7:	c3                   	ret    

c00226d8 <SoundDevice::addChannel(SoundChannel*)>:
c00226d8:	56                   	push   esi
c00226d9:	53                   	push   ebx
c00226da:	51                   	push   ecx
c00226db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00226df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00226e3:	53                   	push   ebx
c00226e4:	e8 d5 ff ff ff       	call   c00226be <SoundDevice::getFreeChannelNum()>
c00226e9:	5a                   	pop    edx
c00226ea:	83 f8 ff             	cmp    eax,0xffffffff
c00226ed:	74 51                	je     c0022740 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226ef:	85 f6                	test   esi,esi
c00226f1:	74 4d                	je     c0022740 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226f3:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00226fa:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022701:	75 30                	jne    c0022733 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022703:	83 ec 0c             	sub    esp,0xc
c0022706:	56                   	push   esi
c0022707:	e8 42 fd ff ff       	call   c002244e <SoundChannel::getSampleRate()>
c002270c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022712:	89 34 24             	mov    DWORD PTR [esp],esi
c0022715:	e8 3c fd ff ff       	call   c0022456 <SoundChannel::getBits()>
c002271a:	83 c4 0c             	add    esp,0xc
c002271d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022725:	50                   	push   eax
c0022726:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002272c:	53                   	push   ebx
c002272d:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022730:	83 c4 10             	add    esp,0x10
c0022733:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022739:	b8 01 00 00 00       	mov    eax,0x1
c002273e:	eb 03                	jmp    c0022743 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022740:	83 c8 ff             	or     eax,0xffffffff
c0022743:	5a                   	pop    edx
c0022744:	5b                   	pop    ebx
c0022745:	5e                   	pop    esi
c0022746:	c3                   	ret    
c0022747:	90                   	nop

c0022748 <SoundDevice::removeChannel(int)>:
c0022748:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002274c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022750:	83 fa 1f             	cmp    edx,0x1f
c0022753:	77 23                	ja     c0022778 <SoundDevice::removeChannel(int)+0x30>
c0022755:	8d 14 90             	lea    edx,[eax+edx*4]
c0022758:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002275f:	74 17                	je     c0022778 <SoundDevice::removeChannel(int)+0x30>
c0022761:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002276b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022771:	75 05                	jne    c0022778 <SoundDevice::removeChannel(int)+0x30>
c0022773:	8b 00                	mov    eax,DWORD PTR [eax]
c0022775:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022778:	c3                   	ret    
c0022779:	90                   	nop

c002277a <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002277a:	57                   	push   edi
c002277b:	56                   	push   esi
c002277c:	53                   	push   ebx
c002277d:	31 db                	xor    ebx,ebx
c002277f:	83 ec 10             	sub    esp,0x10
c0022782:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022786:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002278a:	0f 8d cb 00 00 00    	jge    c002285b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022790:	83 ec 0c             	sub    esp,0xc
c0022793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022797:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002279a:	e8 d8 5e 00 00       	call   c0028677 <__extendsfdf2>
c002279f:	83 c4 10             	add    esp,0x10
c00227a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227aa:	68 00 00 f0 3f       	push   0x3ff00000
c00227af:	6a 00                	push   0x0
c00227b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227b9:	e8 45 4e 00 00       	call   c0027603 <__adddf3>
c00227be:	83 c4 10             	add    esp,0x10
c00227c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227c9:	68 00 00 e0 3f       	push   0x3fe00000
c00227ce:	6a 00                	push   0x0
c00227d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227d8:	e8 a3 54 00 00       	call   c0027c80 <__muldf3>
c00227dd:	83 c4 10             	add    esp,0x10
c00227e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227e8:	68 00 00 60 40       	push   0x40600000
c00227ed:	6a 00                	push   0x0
c00227ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227f7:	e8 84 54 00 00       	call   c0027c80 <__muldf3>
c00227fc:	59                   	pop    ecx
c00227fd:	5f                   	pop    edi
c00227fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022802:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002280a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002280e:	e8 40 5d 00 00       	call   c0028553 <__truncdfsf2>
c0022813:	5a                   	pop    edx
c0022814:	89 c7                	mov    edi,eax
c0022816:	59                   	pop    ecx
c0022817:	68 00 00 fe 42       	push   0x42fe0000
c002281c:	50                   	push   eax
c002281d:	e8 db 4d 00 00       	call   c00275fd <__gesf2>
c0022822:	83 c4 10             	add    esp,0x10
c0022825:	85 c0                	test   eax,eax
c0022827:	78 06                	js     c002282f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022829:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002282d:	eb 26                	jmp    c0022855 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002282f:	50                   	push   eax
c0022830:	50                   	push   eax
c0022831:	6a 00                	push   0x0
c0022833:	57                   	push   edi
c0022834:	e8 c8 4d 00 00       	call   c0027601 <__lesf2>
c0022839:	83 c4 10             	add    esp,0x10
c002283c:	85 c0                	test   eax,eax
c002283e:	7f 06                	jg     c0022846 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022840:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022844:	eb 0f                	jmp    c0022855 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022846:	83 ec 0c             	sub    esp,0xc
c0022849:	57                   	push   edi
c002284a:	e8 bd 5e 00 00       	call   c002870c <lrintf>
c002284f:	83 c4 10             	add    esp,0x10
c0022852:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022855:	43                   	inc    ebx
c0022856:	e9 2b ff ff ff       	jmp    c0022786 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002285b:	83 c4 10             	add    esp,0x10
c002285e:	5b                   	pop    ebx
c002285f:	5e                   	pop    esi
c0022860:	5f                   	pop    edi
c0022861:	c3                   	ret    

c0022862 <SoundDevice::getAudio(int, float*, float*)>:
c0022862:	55                   	push   ebp
c0022863:	57                   	push   edi
c0022864:	56                   	push   esi
c0022865:	53                   	push   ebx
c0022866:	31 db                	xor    ebx,ebx
c0022868:	83 ec 20             	sub    esp,0x20
c002286b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002286f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022873:	c1 e0 02             	shl    eax,0x2
c0022876:	50                   	push   eax
c0022877:	6a 00                	push   0x0
c0022879:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002287d:	e8 f6 de fd ff       	call   c0000778 <memset>
c0022882:	83 c4 10             	add    esp,0x10
c0022885:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022889:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022890:	85 c0                	test   eax,eax
c0022892:	0f 84 d7 00 00 00    	je     c002296f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022898:	83 ec 0c             	sub    esp,0xc
c002289b:	50                   	push   eax
c002289c:	e8 a5 fb ff ff       	call   c0022446 <SoundChannel::paused()>
c00228a1:	83 c4 10             	add    esp,0x10
c00228a4:	84 c0                	test   al,al
c00228a6:	0f 85 c3 00 00 00    	jne    c002296f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228ac:	83 ec 0c             	sub    esp,0xc
c00228af:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228b6:	e8 19 fa ff ff       	call   c00222d4 <SoundChannel::getVolume()>
c00228bb:	83 c4 10             	add    esp,0x10
c00228be:	85 c0                	test   eax,eax
c00228c0:	0f 84 a9 00 00 00    	je     c002296f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228c6:	83 ec 0c             	sub    esp,0xc
c00228c9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228d0:	e8 ff f9 ff ff       	call   c00222d4 <SoundChannel::getVolume()>
c00228d5:	83 ec 0c             	sub    esp,0xc
c00228d8:	50                   	push   eax
c00228d9:	e8 c9 4a 00 00       	call   c00273a7 <__floatsisf>
c00228de:	59                   	pop    ecx
c00228df:	5d                   	pop    ebp
c00228e0:	31 ed                	xor    ebp,ebp
c00228e2:	68 00 00 c8 42       	push   0x42c80000
c00228e7:	50                   	push   eax
c00228e8:	e8 8f 48 00 00       	call   c002717c <__divsf3>
c00228ed:	83 c4 10             	add    esp,0x10
c00228f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00228f8:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00228fe:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022902:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022909:	e8 60 fb ff ff       	call   c002246e <SoundChannel::unbuffer(float*, int, int)>
c002290e:	83 c4 20             	add    esp,0x20
c0022911:	89 c1                	mov    ecx,eax
c0022913:	39 cd                	cmp    ebp,ecx
c0022915:	7d 52                	jge    c0022969 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022917:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002291b:	50                   	push   eax
c002291c:	50                   	push   eax
c002291d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022921:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022924:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022928:	e8 8c 46 00 00       	call   c0026fb9 <__mulsf3>
c002292d:	5a                   	pop    edx
c002292e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022932:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022938:	e8 6a 4a 00 00       	call   c00273a7 <__floatsisf>
c002293d:	59                   	pop    ecx
c002293e:	5a                   	pop    edx
c002293f:	50                   	push   eax
c0022940:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022944:	e8 33 48 00 00       	call   c002717c <__divsf3>
c0022949:	59                   	pop    ecx
c002294a:	5a                   	pop    edx
c002294b:	50                   	push   eax
c002294c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022950:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022953:	e8 3e 43 00 00       	call   c0026c96 <__addsf3>
c0022958:	83 c4 10             	add    esp,0x10
c002295b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002295f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022963:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022966:	45                   	inc    ebp
c0022967:	eb aa                	jmp    c0022913 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022969:	39 cf                	cmp    edi,ecx
c002296b:	7e 02                	jle    c002296f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002296d:	89 cf                	mov    edi,ecx
c002296f:	43                   	inc    ebx
c0022970:	83 fb 20             	cmp    ebx,0x20
c0022973:	0f 85 10 ff ff ff    	jne    c0022889 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022979:	83 c4 1c             	add    esp,0x1c
c002297c:	89 f8                	mov    eax,edi
c002297e:	5b                   	pop    ebx
c002297f:	5e                   	pop    esi
c0022980:	5f                   	pop    edi
c0022981:	5d                   	pop    ebp
c0022982:	c3                   	ret    
c0022983:	90                   	nop

c0022984 <PCI::open(int, int, void*)>:
c0022984:	83 ec 18             	sub    esp,0x18
c0022987:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002298b:	8b 10                	mov    edx,DWORD PTR [eax]
c002298d:	50                   	push   eax
c002298e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022991:	31 c0                	xor    eax,eax
c0022993:	83 c4 1c             	add    esp,0x1c
c0022996:	c3                   	ret    
c0022997:	90                   	nop

c0022998 <PCI::close(int, int, void*)>:
c0022998:	31 c0                	xor    eax,eax
c002299a:	c3                   	ret    
c002299b:	90                   	nop

c002299c <PCI::PCI()>:
c002299c:	83 ec 0c             	sub    esp,0xc
c002299f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a3:	83 ec 08             	sub    esp,0x8
c00229a6:	68 70 cc 02 c0       	push   0xc002cc70
c00229ab:	50                   	push   eax
c00229ac:	e8 ab 12 ff ff       	call   c0013c5c <Bus::Bus(char const*)>
c00229b1:	83 c4 10             	add    esp,0x10
c00229b4:	ba dc cc 02 c0       	mov    edx,0xc002ccdc
c00229b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229bd:	89 10                	mov    DWORD PTR [eax],edx
c00229bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229c9:	0f b6 d0             	movzx  edx,al
c00229cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d0:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00229d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229db:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229e1:	0f b6 d0             	movzx  edx,al
c00229e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e8:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00229ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229f7:	8d 50 01             	lea    edx,[eax+0x1]
c00229fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229fe:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a04:	0f b6 d0             	movzx  edx,al
c0022a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a0b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a0f:	83 c9 c0             	or     ecx,0xffffffc0
c0022a12:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a16:	90                   	nop
c0022a17:	83 c4 0c             	add    esp,0xc
c0022a1a:	c3                   	ret    
c0022a1b:	90                   	nop

c0022a1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a1c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022a20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022a25:	89 ca                	mov    edx,ecx
c0022a27:	c1 e0 10             	shl    eax,0x10
c0022a2a:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022a30:	09 d0                	or     eax,edx
c0022a32:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022a37:	c1 e2 08             	shl    edx,0x8
c0022a3a:	09 d0                	or     eax,edx
c0022a3c:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022a41:	c1 e2 0b             	shl    edx,0xb
c0022a44:	09 d0                	or     eax,edx
c0022a46:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a4b:	0d 00 00 00 80       	or     eax,0x80000000
c0022a50:	ef                   	out    dx,eax
c0022a51:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a56:	ed                   	in     eax,dx
c0022a57:	83 e1 02             	and    ecx,0x2
c0022a5a:	0f b6 c9             	movzx  ecx,cl
c0022a5d:	c1 e1 03             	shl    ecx,0x3
c0022a60:	d3 e8                	shr    eax,cl
c0022a62:	c3                   	ret    
c0022a63:	90                   	nop

c0022a64 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022a64:	6a 00                	push   0x0
c0022a66:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a6b:	50                   	push   eax
c0022a6c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a71:	50                   	push   eax
c0022a72:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a77:	50                   	push   eax
c0022a78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a7c:	e8 9b ff ff ff       	call   c0022a1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a81:	83 c4 14             	add    esp,0x14
c0022a84:	c3                   	ret    
c0022a85:	90                   	nop

c0022a86 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022a86:	6a 0e                	push   0xe
c0022a88:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a8d:	50                   	push   eax
c0022a8e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a93:	50                   	push   eax
c0022a94:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a99:	50                   	push   eax
c0022a9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a9e:	e8 79 ff ff ff       	call   c0022a1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aa3:	83 c4 14             	add    esp,0x14
c0022aa6:	0f b6 c0             	movzx  eax,al
c0022aa9:	c3                   	ret    

c0022aaa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022aaa:	55                   	push   ebp
c0022aab:	57                   	push   edi
c0022aac:	56                   	push   esi
c0022aad:	53                   	push   ebx
c0022aae:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022ab3:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022ab8:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022abd:	6a 0a                	push   0xa
c0022abf:	56                   	push   esi
c0022ac0:	55                   	push   ebp
c0022ac1:	57                   	push   edi
c0022ac2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022ac6:	e8 51 ff ff ff       	call   c0022a1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022acb:	6a 0a                	push   0xa
c0022acd:	89 c3                	mov    ebx,eax
c0022acf:	56                   	push   esi
c0022ad0:	0f b6 db             	movzx  ebx,bl
c0022ad3:	55                   	push   ebp
c0022ad4:	57                   	push   edi
c0022ad5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022ad9:	e8 3e ff ff ff       	call   c0022a1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ade:	83 c4 28             	add    esp,0x28
c0022ae1:	25 00 ff 00 00       	and    eax,0xff00
c0022ae6:	09 d8                	or     eax,ebx
c0022ae8:	5b                   	pop    ebx
c0022ae9:	5e                   	pop    esi
c0022aea:	5f                   	pop    edi
c0022aeb:	5d                   	pop    ebp
c0022aec:	c3                   	ret    
c0022aed:	90                   	nop

c0022aee <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022aee:	6a 08                	push   0x8
c0022af0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af5:	50                   	push   eax
c0022af6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022afb:	50                   	push   eax
c0022afc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b01:	50                   	push   eax
c0022b02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b06:	e8 11 ff ff ff       	call   c0022a1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b0b:	83 c4 14             	add    esp,0x14
c0022b0e:	0f b6 c4             	movzx  eax,ah
c0022b11:	c3                   	ret    

c0022b12 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022b12:	6a 08                	push   0x8
c0022b14:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b19:	50                   	push   eax
c0022b1a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b1f:	50                   	push   eax
c0022b20:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b25:	50                   	push   eax
c0022b26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b2a:	e8 ed fe ff ff       	call   c0022a1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b2f:	83 c4 14             	add    esp,0x14
c0022b32:	c3                   	ret    
c0022b33:	90                   	nop

c0022b34 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022b34:	6a 3c                	push   0x3c
c0022b36:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b3b:	50                   	push   eax
c0022b3c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b41:	50                   	push   eax
c0022b42:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b47:	50                   	push   eax
c0022b48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b4c:	e8 cb fe ff ff       	call   c0022a1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b51:	83 c4 14             	add    esp,0x14
c0022b54:	c3                   	ret    
c0022b55:	90                   	nop

c0022b56 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022b56:	6a 18                	push   0x18
c0022b58:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b5d:	50                   	push   eax
c0022b5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b63:	50                   	push   eax
c0022b64:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b69:	50                   	push   eax
c0022b6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b6e:	e8 a9 fe ff ff       	call   c0022a1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b73:	83 c4 14             	add    esp,0x14
c0022b76:	0f b6 c4             	movzx  eax,ah
c0022b79:	c3                   	ret    

c0022b7a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b7a:	55                   	push   ebp
c0022b7b:	57                   	push   edi
c0022b7c:	56                   	push   esi
c0022b7d:	53                   	push   ebx
c0022b7e:	50                   	push   eax
c0022b7f:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022b83:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022b88:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b8d:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022b92:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022b99:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b9c:	83 c3 10             	add    ebx,0x10
c0022b9f:	0f b6 c0             	movzx  eax,al
c0022ba2:	0f b6 db             	movzx  ebx,bl
c0022ba5:	50                   	push   eax
c0022ba6:	51                   	push   ecx
c0022ba7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022bab:	57                   	push   edi
c0022bac:	55                   	push   ebp
c0022bad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022bb1:	e8 66 fe ff ff       	call   c0022a1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bb6:	53                   	push   ebx
c0022bb7:	89 c6                	mov    esi,eax
c0022bb9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022bbd:	c1 e6 10             	shl    esi,0x10
c0022bc0:	51                   	push   ecx
c0022bc1:	57                   	push   edi
c0022bc2:	55                   	push   ebp
c0022bc3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022bc7:	e8 50 fe ff ff       	call   c0022a1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bcc:	83 c4 2c             	add    esp,0x2c
c0022bcf:	0f b7 c0             	movzx  eax,ax
c0022bd2:	5b                   	pop    ebx
c0022bd3:	09 f0                	or     eax,esi
c0022bd5:	5e                   	pop    esi
c0022bd6:	5f                   	pop    edi
c0022bd7:	5d                   	pop    ebp
c0022bd8:	c3                   	ret    
c0022bd9:	90                   	nop

c0022bda <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022bda:	53                   	push   ebx
c0022bdb:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022be0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022be5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022be9:	c1 e1 10             	shl    ecx,0x10
c0022bec:	25 fc 00 00 00       	and    eax,0xfc
c0022bf1:	09 c1                	or     ecx,eax
c0022bf3:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bf8:	c1 e0 08             	shl    eax,0x8
c0022bfb:	09 c1                	or     ecx,eax
c0022bfd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022c02:	c1 e0 0b             	shl    eax,0xb
c0022c05:	09 c1                	or     ecx,eax
c0022c07:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022c0d:	89 c8                	mov    eax,ecx
c0022c0f:	ef                   	out    dx,eax
c0022c10:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c15:	ed                   	in     eax,dx
c0022c16:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022c1b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022c20:	74 0a                	je     c0022c2c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022c22:	0f b7 d8             	movzx  ebx,ax
c0022c25:	89 d0                	mov    eax,edx
c0022c27:	c1 e0 10             	shl    eax,0x10
c0022c2a:	eb 05                	jmp    c0022c31 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022c2c:	66 31 c0             	xor    ax,ax
c0022c2f:	89 d3                	mov    ebx,edx
c0022c31:	09 c3                	or     ebx,eax
c0022c33:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c38:	89 c8                	mov    eax,ecx
c0022c3a:	ef                   	out    dx,eax
c0022c3b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c40:	89 d8                	mov    eax,ebx
c0022c42:	ef                   	out    dx,eax
c0022c43:	5b                   	pop    ebx
c0022c44:	c3                   	ret    
c0022c45:	90                   	nop

c0022c46 <PCI::checkBus(unsigned char)>:
c0022c46:	56                   	push   esi
c0022c47:	53                   	push   ebx
c0022c48:	31 db                	xor    ebx,ebx
c0022c4a:	51                   	push   ecx
c0022c4b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c50:	52                   	push   edx
c0022c51:	53                   	push   ebx
c0022c52:	43                   	inc    ebx
c0022c53:	56                   	push   esi
c0022c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c58:	e8 2b 03 00 00       	call   c0022f88 <PCI::checkDevice(unsigned char, unsigned char)>
c0022c5d:	83 c4 10             	add    esp,0x10
c0022c60:	83 fb 20             	cmp    ebx,0x20
c0022c63:	75 eb                	jne    c0022c50 <PCI::checkBus(unsigned char)+0xa>
c0022c65:	58                   	pop    eax
c0022c66:	5b                   	pop    ebx
c0022c67:	5e                   	pop    esi
c0022c68:	c3                   	ret    
c0022c69:	90                   	nop

c0022c6a <PCI::foundDevice(PCIDeviceInfo)>:
c0022c6a:	55                   	push   ebp
c0022c6b:	57                   	push   edi
c0022c6c:	56                   	push   esi
c0022c6d:	53                   	push   ebx
c0022c6e:	83 ec 1c             	sub    esp,0x1c
c0022c71:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c75:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c7b:	0f 84 52 01 00 00    	je     c0022dd3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c81:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c85:	66 81 f9 06 04       	cmp    cx,0x406
c0022c8a:	75 2c                	jne    c0022cb8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022c8c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c91:	50                   	push   eax
c0022c92:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c97:	50                   	push   eax
c0022c98:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c9d:	50                   	push   eax
c0022c9e:	56                   	push   esi
c0022c9f:	e8 b2 fe ff ff       	call   c0022b56 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022ca4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022ca8:	0f b6 c0             	movzx  eax,al
c0022cab:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022caf:	83 c4 2c             	add    esp,0x2c
c0022cb2:	5b                   	pop    ebx
c0022cb3:	5e                   	pop    esi
c0022cb4:	5f                   	pop    edi
c0022cb5:	5d                   	pop    ebp
c0022cb6:	eb 8e                	jmp    c0022c46 <PCI::checkBus(unsigned char)>
c0022cb8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022cbc:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022cc6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022cca:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022cce:	88 d3                	mov    bl,dl
c0022cd0:	85 c0                	test   eax,eax
c0022cd2:	74 33                	je     c0022d07 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022cd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022cd7:	85 d2                	test   edx,edx
c0022cd9:	74 28                	je     c0022d03 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cdb:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022ce1:	31 ef                	xor    edi,ebp
c0022ce3:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022ce9:	75 18                	jne    c0022d03 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ceb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022cef:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022cf5:	75 0c                	jne    c0022d03 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cf7:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022cfd:	0f 84 d0 00 00 00    	je     c0022dd3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022d03:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d05:	eb c9                	jmp    c0022cd0 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022d07:	66 81 f9 01 06       	cmp    cx,0x601
c0022d0c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022d10:	75 19                	jne    c0022d2b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022d12:	83 ec 0c             	sub    esp,0xc
c0022d15:	68 64 01 00 00       	push   0x164
c0022d1a:	e8 c3 cb fe ff       	call   c000f8e2 <malloc>
c0022d1f:	89 c5                	mov    ebp,eax
c0022d21:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d24:	e8 95 0f 00 00       	call   c0023cbe <SATABus::SATABus()>
c0022d29:	eb 1e                	jmp    c0022d49 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022d2b:	66 81 f9 01 01       	cmp    cx,0x101
c0022d30:	75 60                	jne    c0022d92 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022d32:	83 ec 0c             	sub    esp,0xc
c0022d35:	68 70 02 00 00       	push   0x270
c0022d3a:	e8 a3 cb fe ff       	call   c000f8e2 <malloc>
c0022d3f:	89 c5                	mov    ebp,eax
c0022d41:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d44:	e8 03 03 00 00       	call   c002304c <IDE::IDE()>
c0022d49:	58                   	pop    eax
c0022d4a:	5a                   	pop    edx
c0022d4b:	55                   	push   ebp
c0022d4c:	56                   	push   esi
c0022d4d:	e8 96 16 ff ff       	call   c00143e8 <Device::addChild(Device*)>
c0022d52:	83 ec 1c             	sub    esp,0x1c
c0022d55:	b9 09 00 00 00       	mov    ecx,0x9
c0022d5a:	fc                   	cld    
c0022d5b:	89 e7                	mov    edi,esp
c0022d5d:	89 de                	mov    esi,ebx
c0022d5f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d61:	55                   	push   ebp
c0022d62:	e8 8b 15 ff ff       	call   c00142f2 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d67:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d6a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d6e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d76:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d7e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d86:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d89:	83 c4 4c             	add    esp,0x4c
c0022d8c:	5b                   	pop    ebx
c0022d8d:	5e                   	pop    esi
c0022d8e:	5f                   	pop    edi
c0022d8f:	5d                   	pop    ebp
c0022d90:	ff e0                	jmp    eax
c0022d92:	83 ec 0c             	sub    esp,0xc
c0022d95:	68 58 01 00 00       	push   0x158
c0022d9a:	e8 43 cb fe ff       	call   c000f8e2 <malloc>
c0022d9f:	89 c5                	mov    ebp,eax
c0022da1:	58                   	pop    eax
c0022da2:	5a                   	pop    edx
c0022da3:	68 78 cc 02 c0       	push   0xc002cc78
c0022da8:	55                   	push   ebp
c0022da9:	e8 30 19 ff ff       	call   c00146de <DriverlessDevice::DriverlessDevice(char const*)>
c0022dae:	59                   	pop    ecx
c0022daf:	5f                   	pop    edi
c0022db0:	55                   	push   ebp
c0022db1:	56                   	push   esi
c0022db2:	e8 31 16 ff ff       	call   c00143e8 <Device::addChild(Device*)>
c0022db7:	b9 09 00 00 00       	mov    ecx,0x9
c0022dbc:	fc                   	cld    
c0022dbd:	89 df                	mov    edi,ebx
c0022dbf:	89 de                	mov    esi,ebx
c0022dc1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022dc3:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022dc7:	83 c4 2c             	add    esp,0x2c
c0022dca:	5b                   	pop    ebx
c0022dcb:	5e                   	pop    esi
c0022dcc:	5f                   	pop    edi
c0022dcd:	5d                   	pop    ebp
c0022dce:	e9 1f 15 ff ff       	jmp    c00142f2 <Device::preOpenPCI(PCIDeviceInfo)>
c0022dd3:	83 c4 1c             	add    esp,0x1c
c0022dd6:	5b                   	pop    ebx
c0022dd7:	5e                   	pop    esi
c0022dd8:	5f                   	pop    edi
c0022dd9:	5d                   	pop    ebp
c0022dda:	c3                   	ret    
c0022ddb:	90                   	nop

c0022ddc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022ddc:	55                   	push   ebp
c0022ddd:	57                   	push   edi
c0022dde:	56                   	push   esi
c0022ddf:	53                   	push   ebx
c0022de0:	83 ec 5c             	sub    esp,0x5c
c0022de3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022de7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022deb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022def:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022df4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022df8:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022dfc:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022e01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022e05:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022e0a:	6a 0c                	push   0xc
c0022e0c:	55                   	push   ebp
c0022e0d:	53                   	push   ebx
c0022e0e:	57                   	push   edi
c0022e0f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022e16:	e8 01 fc ff ff       	call   c0022a1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e1b:	55                   	push   ebp
c0022e1c:	53                   	push   ebx
c0022e1d:	57                   	push   edi
c0022e1e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e25:	e8 80 fc ff ff       	call   c0022aaa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022e2a:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022e2f:	83 c4 24             	add    esp,0x24
c0022e32:	55                   	push   ebp
c0022e33:	53                   	push   ebx
c0022e34:	57                   	push   edi
c0022e35:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e39:	e8 f6 fc ff ff       	call   c0022b34 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022e3e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022e42:	6a 3c                	push   0x3c
c0022e44:	55                   	push   ebp
c0022e45:	53                   	push   ebx
c0022e46:	57                   	push   edi
c0022e47:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e4e:	e8 c9 fb ff ff       	call   c0022a1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e53:	0f b6 c4             	movzx  eax,ah
c0022e56:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022e5a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022e5e:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022e62:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0022e67:	83 c4 24             	add    esp,0x24
c0022e6a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e70:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e77:	74 6c                	je     c0022ee5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e79:	31 f6                	xor    esi,esi
c0022e7b:	8b 15 88 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e688
c0022e81:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e87:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022e8d:	7e 56                	jle    c0022ee5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e8f:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022e92:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e99:	39 cb                	cmp    ebx,ecx
c0022e9b:	75 45                	jne    c0022ee2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e9d:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022ea4:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022ea8:	75 38                	jne    c0022ee2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022eaa:	83 ec 0c             	sub    esp,0xc
c0022ead:	68 92 cc 02 c0       	push   0xc002cc92
c0022eb2:	e8 0a 01 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0022eb7:	8b 15 88 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e688
c0022ebd:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022ec3:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022ecb:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022ecf:	52                   	push   edx
c0022ed0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022ed4:	53                   	push   ebx
c0022ed5:	68 b7 cc 02 c0       	push   0xc002ccb7
c0022eda:	e8 e2 00 ff ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0022edf:	83 c4 20             	add    esp,0x20
c0022ee2:	46                   	inc    esi
c0022ee3:	eb 96                	jmp    c0022e7b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022ee5:	31 d2                	xor    edx,edx
c0022ee7:	83 ec 0c             	sub    esp,0xc
c0022eea:	55                   	push   ebp
c0022eeb:	53                   	push   ebx
c0022eec:	57                   	push   edi
c0022eed:	52                   	push   edx
c0022eee:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022ef2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022ef9:	e8 7c fc ff ff       	call   c0022b7a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022efe:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022f02:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022f06:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022f0a:	42                   	inc    edx
c0022f0b:	83 c4 20             	add    esp,0x20
c0022f0e:	83 fa 06             	cmp    edx,0x6
c0022f11:	75 d4                	jne    c0022ee7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022f13:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022f17:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022f1b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022f1f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022f23:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022f27:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022f2b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022f30:	86 e0                	xchg   al,ah
c0022f32:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022f37:	55                   	push   ebp
c0022f38:	53                   	push   ebx
c0022f39:	57                   	push   edi
c0022f3a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022f3e:	e8 ab fb ff ff       	call   c0022aee <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022f43:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022f47:	55                   	push   ebp
c0022f48:	53                   	push   ebx
c0022f49:	57                   	push   edi
c0022f4a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f51:	e8 0e fb ff ff       	call   c0022a64 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f56:	83 ec 0c             	sub    esp,0xc
c0022f59:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022f5e:	b9 09 00 00 00       	mov    ecx,0x9
c0022f63:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022f67:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022f6b:	fc                   	cld    
c0022f6c:	89 e7                	mov    edi,esp
c0022f6e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f70:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022f77:	e8 ee fc ff ff       	call   c0022c6a <PCI::foundDevice(PCIDeviceInfo)>
c0022f7c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f82:	5b                   	pop    ebx
c0022f83:	5e                   	pop    esi
c0022f84:	5f                   	pop    edi
c0022f85:	5d                   	pop    ebp
c0022f86:	c3                   	ret    
c0022f87:	90                   	nop

c0022f88 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f88:	55                   	push   ebp
c0022f89:	57                   	push   edi
c0022f8a:	56                   	push   esi
c0022f8b:	53                   	push   ebx
c0022f8c:	83 ec 0c             	sub    esp,0xc
c0022f8f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f93:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f98:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f9d:	6a 00                	push   0x0
c0022f9f:	56                   	push   esi
c0022fa0:	57                   	push   edi
c0022fa1:	55                   	push   ebp
c0022fa2:	e8 bd fa ff ff       	call   c0022a64 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fa7:	6a 00                	push   0x0
c0022fa9:	56                   	push   esi
c0022faa:	57                   	push   edi
c0022fab:	55                   	push   ebp
c0022fac:	e8 2b fe ff ff       	call   c0022ddc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fb1:	83 c4 20             	add    esp,0x20
c0022fb4:	6a 00                	push   0x0
c0022fb6:	56                   	push   esi
c0022fb7:	57                   	push   edi
c0022fb8:	55                   	push   ebp
c0022fb9:	e8 c8 fa ff ff       	call   c0022a86 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022fbe:	83 c4 10             	add    esp,0x10
c0022fc1:	84 c0                	test   al,al
c0022fc3:	79 27                	jns    c0022fec <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022fc5:	bb 01 00 00 00       	mov    ebx,0x1
c0022fca:	53                   	push   ebx
c0022fcb:	56                   	push   esi
c0022fcc:	57                   	push   edi
c0022fcd:	55                   	push   ebp
c0022fce:	e8 91 fa ff ff       	call   c0022a64 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fd3:	83 c4 10             	add    esp,0x10
c0022fd6:	66 40                	inc    ax
c0022fd8:	74 0c                	je     c0022fe6 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022fda:	53                   	push   ebx
c0022fdb:	56                   	push   esi
c0022fdc:	57                   	push   edi
c0022fdd:	55                   	push   ebp
c0022fde:	e8 f9 fd ff ff       	call   c0022ddc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fe3:	83 c4 10             	add    esp,0x10
c0022fe6:	43                   	inc    ebx
c0022fe7:	83 fb 08             	cmp    ebx,0x8
c0022fea:	75 de                	jne    c0022fca <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022fec:	83 c4 0c             	add    esp,0xc
c0022fef:	5b                   	pop    ebx
c0022ff0:	5e                   	pop    esi
c0022ff1:	5f                   	pop    edi
c0022ff2:	5d                   	pop    ebp
c0022ff3:	c3                   	ret    

c0022ff4 <PCI::detect()>:
c0022ff4:	56                   	push   esi
c0022ff5:	53                   	push   ebx
c0022ff6:	53                   	push   ebx
c0022ff7:	31 db                	xor    ebx,ebx
c0022ff9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022ffd:	6a 00                	push   0x0
c0022fff:	6a 00                	push   0x0
c0023001:	6a 00                	push   0x0
c0023003:	56                   	push   esi
c0023004:	e8 7d fa ff ff       	call   c0022a86 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023009:	83 c4 10             	add    esp,0x10
c002300c:	a8 80                	test   al,0x80
c002300e:	75 21                	jne    c0023031 <PCI::detect()+0x3d>
c0023010:	51                   	push   ecx
c0023011:	51                   	push   ecx
c0023012:	6a 00                	push   0x0
c0023014:	56                   	push   esi
c0023015:	e8 2c fc ff ff       	call   c0022c46 <PCI::checkBus(unsigned char)>
c002301a:	83 c4 10             	add    esp,0x10
c002301d:	eb 24                	jmp    c0023043 <PCI::detect()+0x4f>
c002301f:	52                   	push   edx
c0023020:	52                   	push   edx
c0023021:	53                   	push   ebx
c0023022:	43                   	inc    ebx
c0023023:	56                   	push   esi
c0023024:	e8 1d fc ff ff       	call   c0022c46 <PCI::checkBus(unsigned char)>
c0023029:	83 c4 10             	add    esp,0x10
c002302c:	83 fb 08             	cmp    ebx,0x8
c002302f:	74 12                	je     c0023043 <PCI::detect()+0x4f>
c0023031:	53                   	push   ebx
c0023032:	6a 00                	push   0x0
c0023034:	6a 00                	push   0x0
c0023036:	56                   	push   esi
c0023037:	e8 28 fa ff ff       	call   c0022a64 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002303c:	83 c4 10             	add    esp,0x10
c002303f:	66 40                	inc    ax
c0023041:	74 dc                	je     c002301f <PCI::detect()+0x2b>
c0023043:	58                   	pop    eax
c0023044:	5b                   	pop    ebx
c0023045:	5e                   	pop    esi
c0023046:	c3                   	ret    
c0023047:	90                   	nop

c0023048 <IDE::close(int, int, void*)>:
c0023048:	83 c8 ff             	or     eax,0xffffffff
c002304b:	c3                   	ret    

c002304c <IDE::IDE()>:
c002304c:	83 ec 0c             	sub    esp,0xc
c002304f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023053:	83 ec 08             	sub    esp,0x8
c0023056:	68 00 cd 02 c0       	push   0xc002cd00
c002305b:	50                   	push   eax
c002305c:	e8 13 17 ff ff       	call   c0014774 <HardDiskController::HardDiskController(char const*)>
c0023061:	83 c4 10             	add    esp,0x10
c0023064:	ba 40 cf 02 c0       	mov    edx,0xc002cf40
c0023069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002306d:	89 10                	mov    DWORD PTR [eax],edx
c002306f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023073:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002307a:	90                   	nop
c002307b:	83 c4 0c             	add    esp,0xc
c002307e:	c3                   	ret    
c002307f:	90                   	nop

c0023080 <IDE::prepareInterrupt(unsigned char)>:
c0023080:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023085:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023089:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023091:	c3                   	ret    

c0023092 <selectDrive(unsigned char, unsigned char)>:
c0023092:	c3                   	ret    
c0023093:	90                   	nop

c0023094 <IDE::getBase(unsigned char)>:
c0023094:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023099:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002309d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00230a5:	c3                   	ret    

c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00230a6:	55                   	push   ebp
c00230a7:	57                   	push   edi
c00230a8:	56                   	push   esi
c00230a9:	53                   	push   ebx
c00230aa:	83 ec 1c             	sub    esp,0x1c
c00230ad:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230b1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230b5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00230b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230c0:	80 f9 03             	cmp    cl,0x3
c00230c3:	77 51                	ja     c0023116 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00230c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00230c9:	0f b6 f2             	movzx  esi,dl
c00230cc:	0f b6 db             	movzx  ebx,bl
c00230cf:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230d2:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00230d6:	83 ca 80             	or     edx,0xffffff80
c00230d9:	0f b6 d2             	movzx  edx,dl
c00230dc:	52                   	push   edx
c00230dd:	6a 0c                	push   0xc
c00230df:	56                   	push   esi
c00230e0:	57                   	push   edi
c00230e1:	e8 c0 ff ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230e6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00230eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00230ef:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00230f3:	ee                   	out    dx,al
c00230f4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00230f9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00230fd:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023101:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023105:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002310d:	83 c4 2c             	add    esp,0x2c
c0023110:	5b                   	pop    ebx
c0023111:	5e                   	pop    esi
c0023112:	5f                   	pop    edi
c0023113:	5d                   	pop    ebp
c0023114:	eb 90                	jmp    c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023116:	80 fb 07             	cmp    bl,0x7
c0023119:	77 12                	ja     c002312d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002311b:	0f b6 d2             	movzx  edx,dl
c002311e:	0f b6 db             	movzx  ebx,bl
c0023121:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023129:	89 da                	mov    edx,ebx
c002312b:	eb 2f                	jmp    c002315c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002312d:	80 fb 0d             	cmp    bl,0xd
c0023130:	77 13                	ja     c0023145 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023132:	0f b6 d2             	movzx  edx,dl
c0023135:	0f b6 db             	movzx  ebx,bl
c0023138:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002313f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023143:	eb 17                	jmp    c002315c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023145:	80 fb 15             	cmp    bl,0x15
c0023148:	77 13                	ja     c002315d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002314a:	0f b6 d2             	movzx  edx,dl
c002314d:	0f b6 db             	movzx  ebx,bl
c0023150:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023158:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002315c:	ee                   	out    dx,al
c002315d:	83 c4 1c             	add    esp,0x1c
c0023160:	5b                   	pop    ebx
c0023161:	5e                   	pop    esi
c0023162:	5f                   	pop    edi
c0023163:	5d                   	pop    ebp
c0023164:	c3                   	ret    
c0023165:	90                   	nop

c0023166 <IDE::read(unsigned char, unsigned char)>:
c0023166:	55                   	push   ebp
c0023167:	57                   	push   edi
c0023168:	56                   	push   esi
c0023169:	53                   	push   ebx
c002316a:	83 ec 1c             	sub    esp,0x1c
c002316d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023171:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023175:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023178:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002317c:	3c 03                	cmp    al,0x3
c002317e:	77 43                	ja     c00231c3 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023180:	0f b6 f2             	movzx  esi,dl
c0023183:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023186:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002318a:	83 c8 80             	or     eax,0xffffff80
c002318d:	0f b6 c0             	movzx  eax,al
c0023190:	50                   	push   eax
c0023191:	6a 0c                	push   0xc
c0023193:	56                   	push   esi
c0023194:	57                   	push   edi
c0023195:	e8 0c ff ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002319a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002319f:	0f b6 c3             	movzx  eax,bl
c00231a2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00231a6:	ec                   	in     al,dx
c00231a7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00231ab:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00231b0:	52                   	push   edx
c00231b1:	6a 0c                	push   0xc
c00231b3:	56                   	push   esi
c00231b4:	57                   	push   edi
c00231b5:	e8 ec fe ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231ba:	83 c4 20             	add    esp,0x20
c00231bd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00231c1:	eb 49                	jmp    c002320c <IDE::read(unsigned char, unsigned char)+0xa6>
c00231c3:	80 fb 07             	cmp    bl,0x7
c00231c6:	77 12                	ja     c00231da <IDE::read(unsigned char, unsigned char)+0x74>
c00231c8:	0f b6 d2             	movzx  edx,dl
c00231cb:	0f b6 c3             	movzx  eax,bl
c00231ce:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00231d6:	89 c2                	mov    edx,eax
c00231d8:	eb 31                	jmp    c002320b <IDE::read(unsigned char, unsigned char)+0xa5>
c00231da:	80 fb 0d             	cmp    bl,0xd
c00231dd:	77 13                	ja     c00231f2 <IDE::read(unsigned char, unsigned char)+0x8c>
c00231df:	0f b6 d2             	movzx  edx,dl
c00231e2:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00231e9:	0f b6 d3             	movzx  edx,bl
c00231ec:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00231f0:	eb 19                	jmp    c002320b <IDE::read(unsigned char, unsigned char)+0xa5>
c00231f2:	31 c0                	xor    eax,eax
c00231f4:	80 fb 15             	cmp    bl,0x15
c00231f7:	77 13                	ja     c002320c <IDE::read(unsigned char, unsigned char)+0xa6>
c00231f9:	0f b6 d2             	movzx  edx,dl
c00231fc:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023204:	0f b6 d3             	movzx  edx,bl
c0023207:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002320b:	ec                   	in     al,dx
c002320c:	83 c4 1c             	add    esp,0x1c
c002320f:	5b                   	pop    ebx
c0023210:	5e                   	pop    esi
c0023211:	5f                   	pop    edi
c0023212:	5d                   	pop    ebp
c0023213:	c3                   	ret    

c0023214 <IDE::waitInterrupt(unsigned char)>:
c0023214:	55                   	push   ebp
c0023215:	57                   	push   edi
c0023216:	56                   	push   esi
c0023217:	53                   	push   ebx
c0023218:	31 db                	xor    ebx,ebx
c002321a:	83 ec 0c             	sub    esp,0xc
c002321d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023221:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023226:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002322e:	89 e8                	mov    eax,ebp
c0023230:	84 c0                	test   al,al
c0023232:	75 34                	jne    c0023268 <IDE::waitInterrupt(unsigned char)+0x54>
c0023234:	52                   	push   edx
c0023235:	6a 0c                	push   0xc
c0023237:	56                   	push   esi
c0023238:	57                   	push   edi
c0023239:	e8 28 ff ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c002323e:	83 c4 10             	add    esp,0x10
c0023241:	a8 01                	test   al,0x1
c0023243:	75 2b                	jne    c0023270 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023245:	f6 c3 04             	test   bl,0x4
c0023248:	75 16                	jne    c0023260 <IDE::waitInterrupt(unsigned char)+0x4c>
c002324a:	83 fb 32             	cmp    ebx,0x32
c002324d:	7e 11                	jle    c0023260 <IDE::waitInterrupt(unsigned char)+0x4c>
c002324f:	50                   	push   eax
c0023250:	50                   	push   eax
c0023251:	6a 00                	push   0x0
c0023253:	68 80 96 98 00       	push   0x989680
c0023258:	e8 8b b1 ff ff       	call   c001e3e8 <nanoSleep(unsigned long long)>
c002325d:	83 c4 10             	add    esp,0x10
c0023260:	83 fb 3c             	cmp    ebx,0x3c
c0023263:	74 0b                	je     c0023270 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023265:	43                   	inc    ebx
c0023266:	eb be                	jmp    c0023226 <IDE::waitInterrupt(unsigned char)+0x12>
c0023268:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023270:	83 c4 0c             	add    esp,0xc
c0023273:	89 e8                	mov    eax,ebp
c0023275:	5b                   	pop    ebx
c0023276:	5e                   	pop    esi
c0023277:	5f                   	pop    edi
c0023278:	5d                   	pop    ebp
c0023279:	c3                   	ret    

c002327a <ideChannel0IRQHandler(regs*, void*)>:
c002327a:	83 ec 10             	sub    esp,0x10
c002327d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023281:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023288:	6a 07                	push   0x7
c002328a:	6a 00                	push   0x0
c002328c:	50                   	push   eax
c002328d:	e8 d4 fe ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c0023292:	83 c4 1c             	add    esp,0x1c
c0023295:	c3                   	ret    

c0023296 <ideChannel1IRQHandler(regs*, void*)>:
c0023296:	83 ec 10             	sub    esp,0x10
c0023299:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002329d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00232a4:	6a 07                	push   0x7
c00232a6:	6a 01                	push   0x1
c00232a8:	50                   	push   eax
c00232a9:	e8 b8 fe ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c00232ae:	83 c4 1c             	add    esp,0x1c
c00232b1:	c3                   	ret    

c00232b2 <IDE::enableIRQs(unsigned char, bool)>:
c00232b2:	57                   	push   edi
c00232b3:	56                   	push   esi
c00232b4:	be 04 00 00 00       	mov    esi,0x4
c00232b9:	53                   	push   ebx
c00232ba:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00232bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00232c3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00232c8:	0f 94 c0             	sete   al
c00232cb:	d1 e0                	shl    eax,1
c00232cd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00232d4:	0f b6 c0             	movzx  eax,al
c00232d7:	50                   	push   eax
c00232d8:	6a 0c                	push   0xc
c00232da:	57                   	push   edi
c00232db:	53                   	push   ebx
c00232dc:	e8 c5 fd ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232e1:	83 c4 10             	add    esp,0x10
c00232e4:	50                   	push   eax
c00232e5:	6a 0c                	push   0xc
c00232e7:	57                   	push   edi
c00232e8:	53                   	push   ebx
c00232e9:	e8 78 fe ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c00232ee:	83 c4 10             	add    esp,0x10
c00232f1:	4e                   	dec    esi
c00232f2:	75 f0                	jne    c00232e4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00232f4:	5b                   	pop    ebx
c00232f5:	5e                   	pop    esi
c00232f6:	5f                   	pop    edi
c00232f7:	c3                   	ret    

c00232f8 <IDE::open(int, int, void*)>:
c00232f8:	55                   	push   ebp
c00232f9:	57                   	push   edi
c00232fa:	56                   	push   esi
c00232fb:	53                   	push   ebx
c00232fc:	83 ec 1c             	sub    esp,0x1c
c00232ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023303:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002330c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023315:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002331c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023323:	0f 85 b0 02 00 00    	jne    c00235d9 <IDE::open(int, int, void*)+0x2e1>
c0023329:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002332f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023333:	83 e0 7f             	and    eax,0x7f
c0023336:	3c 05                	cmp    al,0x5
c0023338:	74 04                	je     c002333e <IDE::open(int, int, void*)+0x46>
c002333a:	3c 0f                	cmp    al,0xf
c002333c:	75 32                	jne    c0023370 <IDE::open(int, int, void*)+0x78>
c002333e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023344:	83 e0 fc             	and    eax,0xfffffffc
c0023347:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002334e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023354:	83 e0 fc             	and    eax,0xfffffffc
c0023357:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002335e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023364:	83 e0 fc             	and    eax,0xfffffffc
c0023367:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002336e:	eb 14                	jmp    c0023384 <IDE::open(int, int, void*)+0x8c>
c0023370:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002337a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023384:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002338b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023392:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023396:	89 c6                	mov    esi,eax
c0023398:	bf f8 0c 00 00       	mov    edi,0xcf8
c002339d:	c1 e6 10             	shl    esi,0x10
c00233a0:	89 e8                	mov    eax,ebp
c00233a2:	89 fa                	mov    edx,edi
c00233a4:	c1 e0 0b             	shl    eax,0xb
c00233a7:	09 f0                	or     eax,esi
c00233a9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00233b0:	c1 e6 08             	shl    esi,0x8
c00233b3:	09 c6                	or     esi,eax
c00233b5:	89 f0                	mov    eax,esi
c00233b7:	0d 08 00 00 80       	or     eax,0x80000008
c00233bc:	ef                   	out    dx,eax
c00233bd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00233c2:	89 ca                	mov    edx,ecx
c00233c4:	ed                   	in     eax,dx
c00233c5:	c1 e8 10             	shr    eax,0x10
c00233c8:	3d ff ff 00 00       	cmp    eax,0xffff
c00233cd:	0f 84 f5 00 00 00    	je     c00234c8 <IDE::open(int, int, void*)+0x1d0>
c00233d3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00233d9:	89 fa                	mov    edx,edi
c00233db:	89 f0                	mov    eax,esi
c00233dd:	ef                   	out    dx,eax
c00233de:	b0 fe                	mov    al,0xfe
c00233e0:	89 ca                	mov    edx,ecx
c00233e2:	ee                   	out    dx,al
c00233e3:	89 f0                	mov    eax,esi
c00233e5:	89 fa                	mov    edx,edi
c00233e7:	ef                   	out    dx,eax
c00233e8:	89 ca                	mov    edx,ecx
c00233ea:	ed                   	in     eax,dx
c00233eb:	3c fe                	cmp    al,0xfe
c00233ed:	0f 85 a9 00 00 00    	jne    c002349c <IDE::open(int, int, void*)+0x1a4>
c00233f3:	8b 15 88 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e688
c00233f9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023400:	74 33                	je     c0023435 <IDE::open(int, int, void*)+0x13d>
c0023402:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023408:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002340c:	40                   	inc    eax
c002340d:	83 ec 0c             	sub    esp,0xc
c0023410:	0f b6 c0             	movzx  eax,al
c0023413:	50                   	push   eax
c0023414:	55                   	push   ebp
c0023415:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023419:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002341f:	51                   	push   ecx
c0023420:	e8 a7 4e ff ff       	call   c00182cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023425:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002342a:	83 c4 1c             	add    esp,0x1c
c002342d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023433:	eb 0a                	jmp    c002343f <IDE::open(int, int, void*)+0x147>
c0023435:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002343f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023446:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002344d:	c1 e1 10             	shl    ecx,0x10
c0023450:	c1 e0 08             	shl    eax,0x8
c0023453:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023458:	09 c1                	or     ecx,eax
c002345a:	89 fa                	mov    edx,edi
c002345c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023463:	c1 e0 0b             	shl    eax,0xb
c0023466:	09 c1                	or     ecx,eax
c0023468:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002346e:	89 c8                	mov    eax,ecx
c0023470:	ef                   	out    dx,eax
c0023471:	be fc 0c 00 00       	mov    esi,0xcfc
c0023476:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002347c:	89 f2                	mov    edx,esi
c002347e:	ee                   	out    dx,al
c002347f:	89 c8                	mov    eax,ecx
c0023481:	89 fa                	mov    edx,edi
c0023483:	ef                   	out    dx,eax
c0023484:	89 f2                	mov    edx,esi
c0023486:	ed                   	in     eax,dx
c0023487:	0f b6 c0             	movzx  eax,al
c002348a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023490:	74 46                	je     c00234d8 <IDE::open(int, int, void*)+0x1e0>
c0023492:	83 ec 0c             	sub    esp,0xc
c0023495:	68 18 cd 02 c0       	push   0xc002cd18
c002349a:	eb 34                	jmp    c00234d0 <IDE::open(int, int, void*)+0x1d8>
c002349c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00234a5:	75 17                	jne    c00234be <IDE::open(int, int, void*)+0x1c6>
c00234a7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00234ac:	74 07                	je     c00234b5 <IDE::open(int, int, void*)+0x1bd>
c00234ae:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00234b3:	75 09                	jne    c00234be <IDE::open(int, int, void*)+0x1c6>
c00234b5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234bc:	eb 1a                	jmp    c00234d8 <IDE::open(int, int, void*)+0x1e0>
c00234be:	83 ec 0c             	sub    esp,0xc
c00234c1:	68 20 cd 02 c0       	push   0xc002cd20
c00234c6:	eb 08                	jmp    c00234d0 <IDE::open(int, int, void*)+0x1d8>
c00234c8:	83 ec 0c             	sub    esp,0xc
c00234cb:	68 51 cd 02 c0       	push   0xc002cd51
c00234d0:	e8 9e 71 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c00234d5:	83 c4 10             	add    esp,0x10
c00234d8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00234df:	79 1a                	jns    c00234fb <IDE::open(int, int, void*)+0x203>
c00234e1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00234e7:	83 e0 fc             	and    eax,0xfffffffc
c00234ea:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00234f1:	83 c0 08             	add    eax,0x8
c00234f4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00234fb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023501:	89 c2                	mov    edx,eax
c0023503:	83 e2 0f             	and    edx,0xf
c0023506:	66 83 fa 08          	cmp    dx,0x8
c002350a:	75 0a                	jne    c0023516 <IDE::open(int, int, void*)+0x21e>
c002350c:	83 e8 02             	sub    eax,0x2
c002350f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023516:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002351c:	89 c2                	mov    edx,eax
c002351e:	83 e2 0f             	and    edx,0xf
c0023521:	66 83 fa 08          	cmp    dx,0x8
c0023525:	75 0a                	jne    c0023531 <IDE::open(int, int, void*)+0x239>
c0023527:	83 e8 02             	sub    eax,0x2
c002352a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023531:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023538:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002353f:	89 d0                	mov    eax,edx
c0023541:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023544:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023548:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002354c:	8d 4a 01             	lea    ecx,[edx+0x1]
c002354f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023554:	0f b6 c9             	movzx  ecx,cl
c0023557:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002355e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023561:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023565:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023569:	8d 50 02             	lea    edx,[eax+0x2]
c002356c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023571:	0f b6 d2             	movzx  edx,dl
c0023574:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002357a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002357d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023581:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023585:	8d 48 03             	lea    ecx,[eax+0x3]
c0023588:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002358d:	0f b6 c9             	movzx  ecx,cl
c0023590:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023596:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023599:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002359d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00235a1:	8d 50 04             	lea    edx,[eax+0x4]
c00235a4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00235aa:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00235af:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00235b6:	66 85 f6             	test   si,si
c00235b9:	74 3e                	je     c00235f9 <IDE::open(int, int, void*)+0x301>
c00235bb:	0f b6 d2             	movzx  edx,dl
c00235be:	83 c0 05             	add    eax,0x5
c00235c1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235c4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235c8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00235cc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00235d2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235d7:	eb 20                	jmp    c00235f9 <IDE::open(int, int, void*)+0x301>
c00235d9:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00235e3:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00235ed:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00235f4:	e9 02 ff ff ff       	jmp    c00234fb <IDE::open(int, int, void*)+0x203>
c00235f9:	52                   	push   edx
c00235fa:	52                   	push   edx
c00235fb:	6a 00                	push   0x0
c00235fd:	53                   	push   ebx
c00235fe:	e8 7d fa ff ff       	call   c0023080 <IDE::prepareInterrupt(unsigned char)>
c0023603:	59                   	pop    ecx
c0023604:	5e                   	pop    esi
c0023605:	6a 01                	push   0x1
c0023607:	53                   	push   ebx
c0023608:	e8 73 fa ff ff       	call   c0023080 <IDE::prepareInterrupt(unsigned char)>
c002360d:	83 c4 0c             	add    esp,0xc
c0023610:	6a 00                	push   0x0
c0023612:	6a 00                	push   0x0
c0023614:	53                   	push   ebx
c0023615:	e8 98 fc ff ff       	call   c00232b2 <IDE::enableIRQs(unsigned char, bool)>
c002361a:	83 c4 0c             	add    esp,0xc
c002361d:	6a 00                	push   0x0
c002361f:	6a 01                	push   0x1
c0023621:	53                   	push   ebx
c0023622:	e8 8b fc ff ff       	call   c00232b2 <IDE::enableIRQs(unsigned char, bool)>
c0023627:	83 c4 10             	add    esp,0x10
c002362a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023631:	74 40                	je     c0023673 <IDE::open(int, int, void*)+0x37b>
c0023633:	83 ec 0c             	sub    esp,0xc
c0023636:	68 7b cd 02 c0       	push   0xc002cd7b
c002363b:	e8 81 f9 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023640:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023643:	6a 01                	push   0x1
c0023645:	68 7a 32 02 c0       	push   0xc002327a
c002364a:	6a 0e                	push   0xe
c002364c:	53                   	push   ebx
c002364d:	e8 1a 0d ff ff       	call   c001436c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023652:	83 c4 14             	add    esp,0x14
c0023655:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002365b:	53                   	push   ebx
c002365c:	6a 01                	push   0x1
c002365e:	68 96 32 02 c0       	push   0xc0023296
c0023663:	6a 0f                	push   0xf
c0023665:	53                   	push   ebx
c0023666:	e8 01 0d ff ff       	call   c001436c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002366b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023671:	eb 4a                	jmp    c00236bd <IDE::open(int, int, void*)+0x3c5>
c0023673:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002367d:	50                   	push   eax
c002367e:	6a 0f                	push   0xf
c0023680:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023686:	68 97 cd 02 c0       	push   0xc002cd97
c002368b:	e8 31 f9 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023690:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023693:	6a 00                	push   0x0
c0023695:	68 7a 32 02 c0       	push   0xc002327a
c002369a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00236a0:	53                   	push   ebx
c00236a1:	e8 c6 0c ff ff       	call   c001436c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236a6:	83 c4 14             	add    esp,0x14
c00236a9:	53                   	push   ebx
c00236aa:	6a 00                	push   0x0
c00236ac:	68 96 32 02 c0       	push   0xc0023296
c00236b1:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00236b7:	53                   	push   ebx
c00236b8:	e8 af 0c ff ff       	call   c001436c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236bf:	83 c4 20             	add    esp,0x20
c00236c2:	83 ec 0c             	sub    esp,0xc
c00236c5:	53                   	push   ebx
c00236c6:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00236c9:	83 c4 0c             	add    esp,0xc
c00236cc:	6a 07                	push   0x7
c00236ce:	6a 00                	push   0x0
c00236d0:	53                   	push   ebx
c00236d1:	e8 90 fa ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c00236d6:	83 c4 0c             	add    esp,0xc
c00236d9:	6a 07                	push   0x7
c00236db:	6a 01                	push   0x1
c00236dd:	53                   	push   ebx
c00236de:	e8 83 fa ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c00236e3:	83 c4 0c             	add    esp,0xc
c00236e6:	6a 01                	push   0x1
c00236e8:	6a 00                	push   0x0
c00236ea:	53                   	push   ebx
c00236eb:	e8 c2 fb ff ff       	call   c00232b2 <IDE::enableIRQs(unsigned char, bool)>
c00236f0:	83 c4 0c             	add    esp,0xc
c00236f3:	6a 01                	push   0x1
c00236f5:	6a 01                	push   0x1
c00236f7:	53                   	push   ebx
c00236f8:	e8 b5 fb ff ff       	call   c00232b2 <IDE::enableIRQs(unsigned char, bool)>
c00236fd:	83 c4 2c             	add    esp,0x2c
c0023700:	31 c0                	xor    eax,eax
c0023702:	5b                   	pop    ebx
c0023703:	5e                   	pop    esi
c0023704:	5f                   	pop    edi
c0023705:	5d                   	pop    ebp
c0023706:	c3                   	ret    
c0023707:	90                   	nop

c0023708 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023708:	55                   	push   ebp
c0023709:	57                   	push   edi
c002370a:	56                   	push   esi
c002370b:	53                   	push   ebx
c002370c:	83 ec 1c             	sub    esp,0x1c
c002370f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023713:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023717:	8d 50 f8             	lea    edx,[eax-0x8]
c002371a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002371e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023722:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023726:	80 fa 03             	cmp    dl,0x3
c0023729:	77 5d                	ja     c0023788 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002372b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002372f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023733:	0f b6 db             	movzx  ebx,bl
c0023736:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023739:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002373d:	83 ca 80             	or     edx,0xffffff80
c0023740:	0f b6 d2             	movzx  edx,dl
c0023743:	52                   	push   edx
c0023744:	6a 0c                	push   0xc
c0023746:	53                   	push   ebx
c0023747:	56                   	push   esi
c0023748:	e8 59 f9 ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002374d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023752:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023756:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002375a:	0f b6 c0             	movzx  eax,al
c002375d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023761:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023763:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023768:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002376c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023770:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023774:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002377c:	83 c4 2c             	add    esp,0x2c
c002377f:	5b                   	pop    ebx
c0023780:	5e                   	pop    esi
c0023781:	5f                   	pop    edi
c0023782:	5d                   	pop    ebp
c0023783:	e9 1e f9 ff ff       	jmp    c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023788:	3c 07                	cmp    al,0x7
c002378a:	77 10                	ja     c002379c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002378c:	0f b6 db             	movzx  ebx,bl
c002378f:	0f b6 d0             	movzx  edx,al
c0023792:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002379a:	eb 2d                	jmp    c00237c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002379c:	3c 0d                	cmp    al,0xd
c002379e:	77 13                	ja     c00237b3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00237a0:	0f b6 db             	movzx  ebx,bl
c00237a3:	0f b6 c0             	movzx  eax,al
c00237a6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00237ad:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00237b1:	eb 16                	jmp    c00237c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00237b3:	3c 15                	cmp    al,0x15
c00237b5:	77 14                	ja     c00237cb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00237b7:	0f b6 db             	movzx  ebx,bl
c00237ba:	0f b6 c0             	movzx  eax,al
c00237bd:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00237c5:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00237c9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00237cb:	83 c4 1c             	add    esp,0x1c
c00237ce:	5b                   	pop    ebx
c00237cf:	5e                   	pop    esi
c00237d0:	5f                   	pop    edi
c00237d1:	5d                   	pop    ebp
c00237d2:	c3                   	ret    
c00237d3:	90                   	nop

c00237d4 <IDE::detect()>:
c00237d4:	55                   	push   ebp
c00237d5:	57                   	push   edi
c00237d6:	56                   	push   esi
c00237d7:	53                   	push   ebx
c00237d8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00237de:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00237e5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00237ec:	0f 85 be 02 00 00    	jne    c0023ab0 <IDE::detect()+0x2dc>
c00237f2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00237f9:	31 f6                	xor    esi,esi
c00237fb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023803:	31 ed                	xor    ebp,ebp
c0023805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023809:	c1 e0 06             	shl    eax,0x6
c002380c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023814:	89 e8                	mov    eax,ebp
c0023816:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002381a:	c1 e0 04             	shl    eax,0x4
c002381d:	83 c8 a0             	or     eax,0xffffffa0
c0023820:	0f b6 c0             	movzx  eax,al
c0023823:	50                   	push   eax
c0023824:	6a 06                	push   0x6
c0023826:	56                   	push   esi
c0023827:	53                   	push   ebx
c0023828:	e8 79 f8 ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002382d:	83 c4 0c             	add    esp,0xc
c0023830:	6a 0c                	push   0xc
c0023832:	56                   	push   esi
c0023833:	53                   	push   ebx
c0023834:	e8 2d f9 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c0023839:	83 c4 0c             	add    esp,0xc
c002383c:	6a 0c                	push   0xc
c002383e:	56                   	push   esi
c002383f:	53                   	push   ebx
c0023840:	e8 21 f9 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c0023845:	83 c4 0c             	add    esp,0xc
c0023848:	6a 0c                	push   0xc
c002384a:	56                   	push   esi
c002384b:	53                   	push   ebx
c002384c:	e8 15 f9 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c0023851:	83 c4 0c             	add    esp,0xc
c0023854:	6a 0c                	push   0xc
c0023856:	56                   	push   esi
c0023857:	53                   	push   ebx
c0023858:	e8 09 f9 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c002385d:	68 ec 00 00 00       	push   0xec
c0023862:	6a 07                	push   0x7
c0023864:	56                   	push   esi
c0023865:	53                   	push   ebx
c0023866:	e8 3b f8 ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002386b:	83 c4 1c             	add    esp,0x1c
c002386e:	6a 0c                	push   0xc
c0023870:	56                   	push   esi
c0023871:	53                   	push   ebx
c0023872:	e8 ef f8 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c0023877:	83 c4 0c             	add    esp,0xc
c002387a:	6a 0c                	push   0xc
c002387c:	56                   	push   esi
c002387d:	53                   	push   ebx
c002387e:	e8 e3 f8 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c0023883:	83 c4 0c             	add    esp,0xc
c0023886:	6a 0c                	push   0xc
c0023888:	56                   	push   esi
c0023889:	53                   	push   ebx
c002388a:	e8 d7 f8 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c002388f:	83 c4 0c             	add    esp,0xc
c0023892:	6a 0c                	push   0xc
c0023894:	56                   	push   esi
c0023895:	53                   	push   ebx
c0023896:	e8 cb f8 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c002389b:	83 c4 0c             	add    esp,0xc
c002389e:	6a 0c                	push   0xc
c00238a0:	56                   	push   esi
c00238a1:	53                   	push   ebx
c00238a2:	e8 bf f8 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c00238a7:	83 c4 10             	add    esp,0x10
c00238aa:	84 c0                	test   al,al
c00238ac:	0f 84 8b 01 00 00    	je     c0023a3d <IDE::detect()+0x269>
c00238b2:	31 ff                	xor    edi,edi
c00238b4:	50                   	push   eax
c00238b5:	6a 0c                	push   0xc
c00238b7:	56                   	push   esi
c00238b8:	53                   	push   ebx
c00238b9:	e8 a8 f8 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c00238be:	83 c4 10             	add    esp,0x10
c00238c1:	a8 01                	test   al,0x1
c00238c3:	0f 85 8e 01 00 00    	jne    c0023a57 <IDE::detect()+0x283>
c00238c9:	84 c0                	test   al,al
c00238cb:	78 04                	js     c00238d1 <IDE::detect()+0xfd>
c00238cd:	a8 08                	test   al,0x8
c00238cf:	75 27                	jne    c00238f8 <IDE::detect()+0x124>
c00238d1:	47                   	inc    edi
c00238d2:	81 ff 17 01 00 00    	cmp    edi,0x117
c00238d8:	7e da                	jle    c00238b4 <IDE::detect()+0xe0>
c00238da:	50                   	push   eax
c00238db:	50                   	push   eax
c00238dc:	6a 00                	push   0x0
c00238de:	68 40 4b 4c 00       	push   0x4c4b40
c00238e3:	e8 00 ab ff ff       	call   c001e3e8 <nanoSleep(unsigned long long)>
c00238e8:	83 c4 10             	add    esp,0x10
c00238eb:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00238f1:	75 c1                	jne    c00238b4 <IDE::detect()+0xe0>
c00238f3:	e9 5f 01 00 00       	jmp    c0023a57 <IDE::detect()+0x283>
c00238f8:	31 c9                	xor    ecx,ecx
c00238fa:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00238fe:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023902:	83 ec 0c             	sub    esp,0xc
c0023905:	68 80 00 00 00       	push   0x80
c002390a:	57                   	push   edi
c002390b:	6a 00                	push   0x0
c002390d:	56                   	push   esi
c002390e:	53                   	push   ebx
c002390f:	e8 f4 fd ff ff       	call   c0023708 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023914:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023919:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002391d:	89 d1                	mov    ecx,edx
c002391f:	c1 e0 06             	shl    eax,0x6
c0023922:	01 d8                	add    eax,ebx
c0023924:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002392b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023932:	89 f2                	mov    edx,esi
c0023934:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002393a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002393e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023944:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023948:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002394f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023957:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002395e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023966:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002396c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023973:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023979:	8d 54 24 58          	lea    edx,[esp+0x58]
c002397d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023981:	83 c4 20             	add    esp,0x20
c0023984:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023987:	83 c0 02             	add    eax,0x2
c002398a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023990:	83 c7 02             	add    edi,0x2
c0023993:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023996:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002399c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00239a0:	75 e2                	jne    c0023984 <IDE::detect()+0x1b0>
c00239a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239a6:	c1 e0 06             	shl    eax,0x6
c00239a9:	01 d8                	add    eax,ebx
c00239ab:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00239b1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00239b8:	66 c1 ea 09          	shr    dx,0x9
c00239bc:	83 e2 01             	and    edx,0x1
c00239bf:	84 c9                	test   cl,cl
c00239c1:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00239c7:	75 2f                	jne    c00239f8 <IDE::detect()+0x224>
c00239c9:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00239cf:	85 c0                	test   eax,eax
c00239d1:	74 66                	je     c0023a39 <IDE::detect()+0x265>
c00239d3:	50                   	push   eax
c00239d4:	55                   	push   ebp
c00239d5:	56                   	push   esi
c00239d6:	68 b3 cd 02 c0       	push   0xc002cdb3
c00239db:	e8 e1 f5 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00239e0:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00239e7:	e8 f6 be fe ff       	call   c000f8e2 <malloc>
c00239ec:	89 c7                	mov    edi,eax
c00239ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00239f1:	e8 78 06 00 00       	call   c002406e <ATA::ATA()>
c00239f6:	eb 28                	jmp    c0023a20 <IDE::detect()+0x24c>
c00239f8:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00239fe:	55                   	push   ebp
c00239ff:	56                   	push   esi
c0023a00:	68 e2 cd 02 c0       	push   0xc002cde2
c0023a05:	e8 b7 f5 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023a0a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023a11:	e8 cc be fe ff       	call   c000f8e2 <malloc>
c0023a16:	89 c7                	mov    edi,eax
c0023a18:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a1b:	e8 8e 0c 00 00       	call   c00246ae <ATAPI::ATAPI()>
c0023a20:	5a                   	pop    edx
c0023a21:	59                   	pop    ecx
c0023a22:	57                   	push   edi
c0023a23:	53                   	push   ebx
c0023a24:	e8 bf 09 ff ff       	call   c00143e8 <Device::addChild(Device*)>
c0023a29:	8b 07                	mov    eax,DWORD PTR [edi]
c0023a2b:	53                   	push   ebx
c0023a2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023a30:	6a 00                	push   0x0
c0023a32:	57                   	push   edi
c0023a33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023a36:	83 c4 20             	add    esp,0x20
c0023a39:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023a3d:	4d                   	dec    ebp
c0023a3e:	74 0a                	je     c0023a4a <IDE::detect()+0x276>
c0023a40:	bd 01 00 00 00       	mov    ebp,0x1
c0023a45:	e9 bb fd ff ff       	jmp    c0023805 <IDE::detect()+0x31>
c0023a4a:	4e                   	dec    esi
c0023a4b:	74 63                	je     c0023ab0 <IDE::detect()+0x2dc>
c0023a4d:	be 01 00 00 00       	mov    esi,0x1
c0023a52:	e9 ac fd ff ff       	jmp    c0023803 <IDE::detect()+0x2f>
c0023a57:	50                   	push   eax
c0023a58:	6a 04                	push   0x4
c0023a5a:	56                   	push   esi
c0023a5b:	53                   	push   ebx
c0023a5c:	e8 05 f7 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c0023a61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a65:	83 c4 0c             	add    esp,0xc
c0023a68:	6a 05                	push   0x5
c0023a6a:	56                   	push   esi
c0023a6b:	53                   	push   ebx
c0023a6c:	e8 f5 f6 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c0023a71:	83 c4 10             	add    esp,0x10
c0023a74:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a78:	80 fa 14             	cmp    dl,0x14
c0023a7b:	75 04                	jne    c0023a81 <IDE::detect()+0x2ad>
c0023a7d:	3c eb                	cmp    al,0xeb
c0023a7f:	eb 07                	jmp    c0023a88 <IDE::detect()+0x2b4>
c0023a81:	3c 96                	cmp    al,0x96
c0023a83:	75 b8                	jne    c0023a3d <IDE::detect()+0x269>
c0023a85:	80 fa 69             	cmp    dl,0x69
c0023a88:	75 b3                	jne    c0023a3d <IDE::detect()+0x269>
c0023a8a:	68 a1 00 00 00       	push   0xa1
c0023a8f:	6a 07                	push   0x7
c0023a91:	56                   	push   esi
c0023a92:	53                   	push   ebx
c0023a93:	e8 0e f6 ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a98:	5f                   	pop    edi
c0023a99:	58                   	pop    eax
c0023a9a:	6a 00                	push   0x0
c0023a9c:	68 40 42 0f 00       	push   0xf4240
c0023aa1:	e8 42 a9 ff ff       	call   c001e3e8 <nanoSleep(unsigned long long)>
c0023aa6:	83 c4 10             	add    esp,0x10
c0023aa9:	b1 01                	mov    cl,0x1
c0023aab:	e9 4a fe ff ff       	jmp    c00238fa <IDE::detect()+0x126>
c0023ab0:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023ab6:	5b                   	pop    ebx
c0023ab7:	5e                   	pop    esi
c0023ab8:	5f                   	pop    edi
c0023ab9:	5d                   	pop    ebp
c0023aba:	c3                   	ret    
c0023abb:	90                   	nop

c0023abc <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023abc:	55                   	push   ebp
c0023abd:	57                   	push   edi
c0023abe:	56                   	push   esi
c0023abf:	53                   	push   ebx
c0023ac0:	83 ec 1c             	sub    esp,0x1c
c0023ac3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023ac7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023acb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023acf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023ad3:	88 c3                	mov    bl,al
c0023ad5:	84 c0                	test   al,al
c0023ad7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023adb:	0f 84 67 01 00 00    	je     c0023c48 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023ae1:	83 ec 0c             	sub    esp,0xc
c0023ae4:	68 13 ce 02 c0       	push   0xc002ce13
c0023ae9:	e8 d3 f4 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023aee:	83 c4 10             	add    esp,0x10
c0023af1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023af5:	3c 01                	cmp    al,0x1
c0023af7:	75 17                	jne    c0023b10 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023af9:	83 ec 0c             	sub    esp,0xc
c0023afc:	b3 13                	mov    bl,0x13
c0023afe:	68 1f ce 02 c0       	push   0xc002ce1f
c0023b03:	e8 b9 f4 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023b08:	83 c4 10             	add    esp,0x10
c0023b0b:	e9 25 01 00 00       	jmp    c0023c35 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b10:	3c 02                	cmp    al,0x2
c0023b12:	0f 85 ef 00 00 00    	jne    c0023c07 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023b18:	d1 e6                	shl    esi,1
c0023b1a:	09 ee                	or     esi,ebp
c0023b1c:	52                   	push   edx
c0023b1d:	89 f0                	mov    eax,esi
c0023b1f:	6a 01                	push   0x1
c0023b21:	0f b6 f0             	movzx  esi,al
c0023b24:	c1 e6 06             	shl    esi,0x6
c0023b27:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023b2f:	50                   	push   eax
c0023b30:	57                   	push   edi
c0023b31:	e8 30 f6 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c0023b36:	83 c4 10             	add    esp,0x10
c0023b39:	89 c6                	mov    esi,eax
c0023b3b:	a8 01                	test   al,0x1
c0023b3d:	74 12                	je     c0023b51 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023b3f:	83 ec 0c             	sub    esp,0xc
c0023b42:	b3 07                	mov    bl,0x7
c0023b44:	68 34 ce 02 c0       	push   0xc002ce34
c0023b49:	e8 73 f4 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023b4e:	83 c4 10             	add    esp,0x10
c0023b51:	f7 c6 02 00 00 00    	test   esi,0x2
c0023b57:	74 12                	je     c0023b6b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023b59:	83 ec 0c             	sub    esp,0xc
c0023b5c:	b3 03                	mov    bl,0x3
c0023b5e:	68 52 ce 02 c0       	push   0xc002ce52
c0023b63:	e8 59 f4 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023b68:	83 c4 10             	add    esp,0x10
c0023b6b:	f7 c6 04 00 00 00    	test   esi,0x4
c0023b71:	74 12                	je     c0023b85 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023b73:	83 ec 0c             	sub    esp,0xc
c0023b76:	b3 14                	mov    bl,0x14
c0023b78:	68 72 ce 02 c0       	push   0xc002ce72
c0023b7d:	e8 3f f4 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023b82:	83 c4 10             	add    esp,0x10
c0023b85:	f7 c6 08 00 00 00    	test   esi,0x8
c0023b8b:	74 12                	je     c0023b9f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023b8d:	83 ec 0c             	sub    esp,0xc
c0023b90:	b3 03                	mov    bl,0x3
c0023b92:	68 52 ce 02 c0       	push   0xc002ce52
c0023b97:	e8 25 f4 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023b9c:	83 c4 10             	add    esp,0x10
c0023b9f:	f7 c6 10 00 00 00    	test   esi,0x10
c0023ba5:	74 12                	je     c0023bb9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023ba7:	83 ec 0c             	sub    esp,0xc
c0023baa:	b3 15                	mov    bl,0x15
c0023bac:	68 8a ce 02 c0       	push   0xc002ce8a
c0023bb1:	e8 0b f4 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023bb6:	83 c4 10             	add    esp,0x10
c0023bb9:	f7 c6 20 00 00 00    	test   esi,0x20
c0023bbf:	74 12                	je     c0023bd3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023bc1:	83 ec 0c             	sub    esp,0xc
c0023bc4:	b3 03                	mov    bl,0x3
c0023bc6:	68 52 ce 02 c0       	push   0xc002ce52
c0023bcb:	e8 f1 f3 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023bd0:	83 c4 10             	add    esp,0x10
c0023bd3:	f7 c6 40 00 00 00    	test   esi,0x40
c0023bd9:	74 12                	je     c0023bed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023bdb:	83 ec 0c             	sub    esp,0xc
c0023bde:	b3 16                	mov    bl,0x16
c0023be0:	68 a4 ce 02 c0       	push   0xc002cea4
c0023be5:	e8 d7 f3 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023bea:	83 c4 10             	add    esp,0x10
c0023bed:	89 f0                	mov    eax,esi
c0023bef:	84 c0                	test   al,al
c0023bf1:	79 42                	jns    c0023c35 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bf3:	83 ec 0c             	sub    esp,0xc
c0023bf6:	b3 0d                	mov    bl,0xd
c0023bf8:	68 c5 ce 02 c0       	push   0xc002cec5
c0023bfd:	e8 bf f3 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023c02:	83 c4 10             	add    esp,0x10
c0023c05:	eb 2e                	jmp    c0023c35 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c07:	3c 03                	cmp    al,0x3
c0023c09:	75 14                	jne    c0023c1f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023c0b:	83 ec 0c             	sub    esp,0xc
c0023c0e:	b3 17                	mov    bl,0x17
c0023c10:	68 d9 ce 02 c0       	push   0xc002ced9
c0023c15:	e8 a7 f3 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023c1a:	83 c4 10             	add    esp,0x10
c0023c1d:	eb 16                	jmp    c0023c35 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c1f:	3c 04                	cmp    al,0x4
c0023c21:	75 12                	jne    c0023c35 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c23:	83 ec 0c             	sub    esp,0xc
c0023c26:	b3 08                	mov    bl,0x8
c0023c28:	68 ef ce 02 c0       	push   0xc002ceef
c0023c2d:	e8 8f f3 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023c32:	83 c4 10             	add    esp,0x10
c0023c35:	50                   	push   eax
c0023c36:	50                   	push   eax
c0023c37:	0f b6 c3             	movzx  eax,bl
c0023c3a:	50                   	push   eax
c0023c3b:	68 07 cf 02 c0       	push   0xc002cf07
c0023c40:	e8 7c f3 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023c45:	83 c4 10             	add    esp,0x10
c0023c48:	83 c4 1c             	add    esp,0x1c
c0023c4b:	88 d8                	mov    al,bl
c0023c4d:	5b                   	pop    ebx
c0023c4e:	5e                   	pop    esi
c0023c4f:	5f                   	pop    edi
c0023c50:	5d                   	pop    ebp
c0023c51:	c3                   	ret    

c0023c52 <IDE::polling(unsigned char, unsigned int)>:
c0023c52:	57                   	push   edi
c0023c53:	56                   	push   esi
c0023c54:	53                   	push   ebx
c0023c55:	bb 04 00 00 00       	mov    ebx,0x4
c0023c5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023c5e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023c63:	52                   	push   edx
c0023c64:	6a 0c                	push   0xc
c0023c66:	56                   	push   esi
c0023c67:	57                   	push   edi
c0023c68:	e8 f9 f4 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c0023c6d:	83 c4 10             	add    esp,0x10
c0023c70:	4b                   	dec    ebx
c0023c71:	75 f0                	jne    c0023c63 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023c73:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023c78:	50                   	push   eax
c0023c79:	6a 0c                	push   0xc
c0023c7b:	56                   	push   esi
c0023c7c:	57                   	push   edi
c0023c7d:	e8 e4 f4 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c0023c82:	83 c4 10             	add    esp,0x10
c0023c85:	a8 01                	test   al,0x1
c0023c87:	74 12                	je     c0023c9b <IDE::polling(unsigned char, unsigned int)+0x49>
c0023c89:	83 ec 0c             	sub    esp,0xc
c0023c8c:	68 21 cf 02 c0       	push   0xc002cf21
c0023c91:	e8 2b f3 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023c96:	83 c4 10             	add    esp,0x10
c0023c99:	eb 17                	jmp    c0023cb2 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c9b:	a8 20                	test   al,0x20
c0023c9d:	75 0f                	jne    c0023cae <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c9f:	4b                   	dec    ebx
c0023ca0:	74 10                	je     c0023cb2 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023ca2:	84 c0                	test   al,al
c0023ca4:	78 d2                	js     c0023c78 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ca6:	a8 08                	test   al,0x8
c0023ca8:	74 ce                	je     c0023c78 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023caa:	31 c0                	xor    eax,eax
c0023cac:	eb 06                	jmp    c0023cb4 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023cae:	b0 01                	mov    al,0x1
c0023cb0:	eb 02                	jmp    c0023cb4 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023cb2:	b0 02                	mov    al,0x2
c0023cb4:	5b                   	pop    ebx
c0023cb5:	5e                   	pop    esi
c0023cb6:	5f                   	pop    edi
c0023cb7:	c3                   	ret    

c0023cb8 <SATABus::close(int, int, void*)>:
c0023cb8:	31 c0                	xor    eax,eax
c0023cba:	c3                   	ret    
c0023cbb:	90                   	nop

c0023cbc <SATABus::detect()>:
c0023cbc:	c3                   	ret    
c0023cbd:	90                   	nop

c0023cbe <SATABus::SATABus()>:
c0023cbe:	83 ec 0c             	sub    esp,0xc
c0023cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cc5:	83 ec 08             	sub    esp,0x8
c0023cc8:	68 64 cf 02 c0       	push   0xc002cf64
c0023ccd:	50                   	push   eax
c0023cce:	e8 a1 0a ff ff       	call   c0014774 <HardDiskController::HardDiskController(char const*)>
c0023cd3:	83 c4 10             	add    esp,0x10
c0023cd6:	ba 20 d0 02 c0       	mov    edx,0xc002d020
c0023cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cdf:	89 10                	mov    DWORD PTR [eax],edx
c0023ce1:	83 ec 0c             	sub    esp,0xc
c0023ce4:	6a 50                	push   0x50
c0023ce6:	e8 9c c3 fe ff       	call   c0010087 <Phys::allocateContiguousPages(int)>
c0023ceb:	83 c4 10             	add    esp,0x10
c0023cee:	89 c2                	mov    edx,eax
c0023cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cf4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023cfa:	83 ec 0c             	sub    esp,0xc
c0023cfd:	6a 50                	push   0x50
c0023cff:	e8 fd de fe ff       	call   c0011c01 <Virt::allocateKernelVirtualPages(int)>
c0023d04:	83 c4 10             	add    esp,0x10
c0023d07:	89 c2                	mov    edx,eax
c0023d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d0d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023d13:	e8 84 e1 fe ff       	call   c0011e9c <Virt::getAKernelVAS()>
c0023d18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d1c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023d22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d26:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023d2c:	83 ec 0c             	sub    esp,0xc
c0023d2f:	6a 03                	push   0x3
c0023d31:	6a 50                	push   0x50
c0023d33:	51                   	push   ecx
c0023d34:	52                   	push   edx
c0023d35:	50                   	push   eax
c0023d36:	e8 91 e9 fe ff       	call   c00126cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023d3b:	83 c4 20             	add    esp,0x20
c0023d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d42:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d4c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023d52:	83 ec 04             	sub    esp,0x4
c0023d55:	52                   	push   edx
c0023d56:	50                   	push   eax
c0023d57:	68 88 cf 02 c0       	push   0xc002cf88
c0023d5c:	e8 60 f2 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023d61:	83 c4 10             	add    esp,0x10
c0023d64:	90                   	nop
c0023d65:	83 c4 0c             	add    esp,0xc
c0023d68:	c3                   	ret    
c0023d69:	90                   	nop

c0023d6a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023d6a:	83 ec 0c             	sub    esp,0xc
c0023d6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d71:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023d74:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023d77:	09 c2                	or     edx,eax
c0023d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d7d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d83:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023d85:	31 c0                	xor    eax,eax
c0023d87:	c1 e9 08             	shr    ecx,0x8
c0023d8a:	83 e1 0f             	and    ecx,0xf
c0023d8d:	39 c8                	cmp    eax,ecx
c0023d8f:	74 0a                	je     c0023d9b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023d91:	f6 c2 01             	test   dl,0x1
c0023d94:	74 18                	je     c0023dae <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d96:	d1 ea                	shr    edx,1
c0023d98:	40                   	inc    eax
c0023d99:	eb f2                	jmp    c0023d8d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023d9b:	83 ec 0c             	sub    esp,0xc
c0023d9e:	68 ac cf 02 c0       	push   0xc002cfac
c0023da3:	e8 cb 68 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0023da8:	83 c4 10             	add    esp,0x10
c0023dab:	83 c8 ff             	or     eax,0xffffffff
c0023dae:	83 c4 0c             	add    esp,0xc
c0023db1:	c3                   	ret    

c0023db2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023db2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023db6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023db9:	89 c2                	mov    edx,eax
c0023dbb:	c1 ea 08             	shr    edx,0x8
c0023dbe:	83 e2 0f             	and    edx,0xf
c0023dc1:	fe ca                	dec    dl
c0023dc3:	75 31                	jne    c0023df6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023dc5:	83 e0 0f             	and    eax,0xf
c0023dc8:	3c 03                	cmp    al,0x3
c0023dca:	75 2a                	jne    c0023df6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023dcc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023dcf:	b8 02 00 00 00       	mov    eax,0x2
c0023dd4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023dda:	74 1c                	je     c0023df8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023ddc:	b8 04 00 00 00       	mov    eax,0x4
c0023de1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023de7:	74 0f                	je     c0023df8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023de9:	31 c0                	xor    eax,eax
c0023deb:	83 fa 03             	cmp    edx,0x3
c0023dee:	0f 94 c0             	sete   al
c0023df1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023df5:	c3                   	ret    
c0023df6:	31 c0                	xor    eax,eax
c0023df8:	c3                   	ret    
c0023df9:	90                   	nop

c0023dfa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023dfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023dfe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e01:	0f ba e2 0f          	bt     edx,0xf
c0023e05:	72 f7                	jb     c0023dfe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023e07:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e0a:	83 ca 10             	or     edx,0x10
c0023e0d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e10:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e13:	83 ca 01             	or     edx,0x1
c0023e16:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e19:	c3                   	ret    

c0023e1a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e1e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e21:	83 e2 fe             	and    edx,0xfffffffe
c0023e24:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e27:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e2a:	83 e2 ef             	and    edx,0xffffffef
c0023e2d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e30:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e33:	0f ba e2 0e          	bt     edx,0xe
c0023e37:	72 f7                	jb     c0023e30 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e39:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e3c:	0f ba e2 0f          	bt     edx,0xf
c0023e40:	72 ee                	jb     c0023e30 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e42:	c3                   	ret    
c0023e43:	90                   	nop

c0023e44 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023e44:	55                   	push   ebp
c0023e45:	57                   	push   edi
c0023e46:	56                   	push   esi
c0023e47:	53                   	push   ebx
c0023e48:	83 ec 1c             	sub    esp,0x1c
c0023e4b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e4f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e53:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023e57:	53                   	push   ebx
c0023e58:	89 fd                	mov    ebp,edi
c0023e5a:	56                   	push   esi
c0023e5b:	c1 e5 0a             	shl    ebp,0xa
c0023e5e:	e8 b7 ff ff ff       	call   c0023e1a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023e63:	83 ec 0c             	sub    esp,0xc
c0023e66:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023e6c:	01 e8                	add    eax,ebp
c0023e6e:	89 03                	mov    DWORD PTR [ebx],eax
c0023e70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e72:	68 00 04 00 00       	push   0x400
c0023e77:	6a 00                	push   0x0
c0023e79:	50                   	push   eax
c0023e7a:	e8 f9 c8 fd ff       	call   c0000778 <memset>
c0023e7f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023e85:	89 fa                	mov    edx,edi
c0023e87:	01 e8                	add    eax,ebp
c0023e89:	c1 e7 0d             	shl    edi,0xd
c0023e8c:	89 03                	mov    DWORD PTR [ebx],eax
c0023e8e:	c1 e2 08             	shl    edx,0x8
c0023e91:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023e98:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023ea2:	89 d0                	mov    eax,edx
c0023ea4:	83 c4 1c             	add    esp,0x1c
c0023ea7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ead:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023eb0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023eb3:	68 00 01 00 00       	push   0x100
c0023eb8:	6a 00                	push   0x0
c0023eba:	50                   	push   eax
c0023ebb:	e8 b8 c8 fd ff       	call   c0000778 <memset>
c0023ec0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023ec4:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023eca:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023ed0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023ed4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023ed7:	83 c4 10             	add    esp,0x10
c0023eda:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023ee1:	31 ff                	xor    edi,edi
c0023ee3:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023ee9:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023eef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ef3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ef9:	83 c5 20             	add    ebp,0x20
c0023efc:	01 f8                	add    eax,edi
c0023efe:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f01:	52                   	push   edx
c0023f02:	68 00 01 00 00       	push   0x100
c0023f07:	6a 00                	push   0x0
c0023f09:	50                   	push   eax
c0023f0a:	e8 69 c8 fd ff       	call   c0000778 <memset>
c0023f0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023f13:	83 c4 10             	add    esp,0x10
c0023f16:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023f1c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023f23:	01 f8                	add    eax,edi
c0023f25:	81 c7 00 01 00 00    	add    edi,0x100
c0023f2b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f2e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023f34:	75 b3                	jne    c0023ee9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023f36:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023f3a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023f3e:	83 c4 1c             	add    esp,0x1c
c0023f41:	5b                   	pop    ebx
c0023f42:	5e                   	pop    esi
c0023f43:	5f                   	pop    edi
c0023f44:	5d                   	pop    ebp
c0023f45:	e9 b0 fe ff ff       	jmp    c0023dfa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023f4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023f4a:	55                   	push   ebp
c0023f4b:	57                   	push   edi
c0023f4c:	56                   	push   esi
c0023f4d:	53                   	push   ebx
c0023f4e:	31 db                	xor    ebx,ebx
c0023f50:	83 ec 0c             	sub    esp,0xc
c0023f53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023f57:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023f5b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023f5e:	f7 c7 01 00 00 00    	test   edi,0x1
c0023f64:	0f 84 aa 00 00 00    	je     c0024014 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f6a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023f6e:	89 d8                	mov    eax,ebx
c0023f70:	c1 e0 07             	shl    eax,0x7
c0023f73:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023f7a:	55                   	push   ebp
c0023f7b:	56                   	push   esi
c0023f7c:	e8 31 fe ff ff       	call   c0023db2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023f81:	5a                   	pop    edx
c0023f82:	83 f8 01             	cmp    eax,0x1
c0023f85:	59                   	pop    ecx
c0023f86:	75 30                	jne    c0023fb8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023f88:	50                   	push   eax
c0023f89:	50                   	push   eax
c0023f8a:	53                   	push   ebx
c0023f8b:	68 d1 cf 02 c0       	push   0xc002cfd1
c0023f90:	e8 2c f0 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023f95:	83 c4 0c             	add    esp,0xc
c0023f98:	53                   	push   ebx
c0023f99:	55                   	push   ebp
c0023f9a:	56                   	push   esi
c0023f9b:	e8 a4 fe ff ff       	call   c0023e44 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023fa0:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023fa7:	e8 36 b9 fe ff       	call   c000f8e2 <malloc>
c0023fac:	89 c5                	mov    ebp,eax
c0023fae:	89 04 24             	mov    DWORD PTR [esp],eax
c0023fb1:	e8 60 0d 00 00       	call   c0024d16 <SATA::SATA()>
c0023fb6:	eb 33                	jmp    c0023feb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023fb8:	83 f8 04             	cmp    eax,0x4
c0023fbb:	75 47                	jne    c0024004 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023fbd:	50                   	push   eax
c0023fbe:	50                   	push   eax
c0023fbf:	53                   	push   ebx
c0023fc0:	68 e8 cf 02 c0       	push   0xc002cfe8
c0023fc5:	e8 f7 ef fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0023fca:	83 c4 0c             	add    esp,0xc
c0023fcd:	53                   	push   ebx
c0023fce:	55                   	push   ebp
c0023fcf:	56                   	push   esi
c0023fd0:	e8 6f fe ff ff       	call   c0023e44 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023fd5:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023fdc:	e8 01 b9 fe ff       	call   c000f8e2 <malloc>
c0023fe1:	89 c5                	mov    ebp,eax
c0023fe3:	89 04 24             	mov    DWORD PTR [esp],eax
c0023fe6:	e8 d7 10 00 00       	call   c00250c2 <SATAPI::SATAPI()>
c0023feb:	5a                   	pop    edx
c0023fec:	59                   	pop    ecx
c0023fed:	55                   	push   ebp
c0023fee:	56                   	push   esi
c0023fef:	e8 f4 03 ff ff       	call   c00143e8 <Device::addChild(Device*)>
c0023ff4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023ff7:	56                   	push   esi
c0023ff8:	6a 00                	push   0x0
c0023ffa:	53                   	push   ebx
c0023ffb:	55                   	push   ebp
c0023ffc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023fff:	83 c4 20             	add    esp,0x20
c0024002:	eb 10                	jmp    c0024014 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024004:	50                   	push   eax
c0024005:	50                   	push   eax
c0024006:	53                   	push   ebx
c0024007:	68 01 d0 02 c0       	push   0xc002d001
c002400c:	e8 b0 ef fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0024011:	83 c4 10             	add    esp,0x10
c0024014:	d1 ef                	shr    edi,1
c0024016:	43                   	inc    ebx
c0024017:	83 fb 20             	cmp    ebx,0x20
c002401a:	0f 85 3e ff ff ff    	jne    c0023f5e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024020:	83 c4 0c             	add    esp,0xc
c0024023:	5b                   	pop    ebx
c0024024:	5e                   	pop    esi
c0024025:	5f                   	pop    edi
c0024026:	5d                   	pop    ebp
c0024027:	c3                   	ret    

c0024028 <SATABus::open(int, int, void*)>:
c0024028:	83 ec 14             	sub    esp,0x14
c002402b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002402f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024035:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002403b:	52                   	push   edx
c002403c:	50                   	push   eax
c002403d:	e8 08 ff ff ff       	call   c0023f4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024042:	31 c0                	xor    eax,eax
c0024044:	83 c4 1c             	add    esp,0x1c
c0024047:	c3                   	ret    

c0024048 <ATA::close(int, int, void*)>:
c0024048:	83 ec 0c             	sub    esp,0xc
c002404b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002404f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024055:	85 c0                	test   eax,eax
c0024057:	74 0c                	je     c0024065 <ATA::close(int, int, void*)+0x1d>
c0024059:	83 ec 0c             	sub    esp,0xc
c002405c:	8b 10                	mov    edx,DWORD PTR [eax]
c002405e:	50                   	push   eax
c002405f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024062:	83 c4 10             	add    esp,0x10
c0024065:	31 c0                	xor    eax,eax
c0024067:	83 c4 0c             	add    esp,0xc
c002406a:	c3                   	ret    
c002406b:	90                   	nop

c002406c <ATA::powerSaving(PowerSavingLevel)>:
c002406c:	c3                   	ret    
c002406d:	90                   	nop

c002406e <ATA::ATA()>:
c002406e:	83 ec 0c             	sub    esp,0xc
c0024071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024075:	83 ec 04             	sub    esp,0x4
c0024078:	68 00 02 00 00       	push   0x200
c002407d:	68 e9 d0 02 c0       	push   0xc002d0e9
c0024082:	50                   	push   eax
c0024083:	e8 84 07 ff ff       	call   c001480c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024088:	83 c4 10             	add    esp,0x10
c002408b:	ba 6c d0 02 c0       	mov    edx,0xc002d06c
c0024090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024094:	89 10                	mov    DWORD PTR [eax],edx
c0024096:	90                   	nop
c0024097:	83 c4 0c             	add    esp,0xc
c002409a:	c3                   	ret    
c002409b:	90                   	nop

c002409c <ATA::flush(bool)>:
c002409c:	53                   	push   ebx
c002409d:	83 ec 08             	sub    esp,0x8
c00240a0:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00240a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00240a9:	19 c0                	sbb    eax,eax
c00240ab:	83 e0 fd             	and    eax,0xfffffffd
c00240ae:	05 ea 00 00 00       	add    eax,0xea
c00240b3:	50                   	push   eax
c00240b4:	6a 07                	push   0x7
c00240b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240bd:	50                   	push   eax
c00240be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240c4:	e8 dd ef ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240c9:	83 c4 0c             	add    esp,0xc
c00240cc:	6a 00                	push   0x0
c00240ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240d5:	50                   	push   eax
c00240d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240dc:	e8 71 fb ff ff       	call   c0023c52 <IDE::polling(unsigned char, unsigned int)>
c00240e1:	83 c4 18             	add    esp,0x18
c00240e4:	5b                   	pop    ebx
c00240e5:	c3                   	ret    

c00240e6 <ATA::readyForCommand()>:
c00240e6:	56                   	push   esi
c00240e7:	53                   	push   ebx
c00240e8:	31 db                	xor    ebx,ebx
c00240ea:	50                   	push   eax
c00240eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00240ef:	50                   	push   eax
c00240f0:	6a 0c                	push   0xc
c00240f2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00240f9:	50                   	push   eax
c00240fa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024100:	e8 61 f0 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c0024105:	83 c4 10             	add    esp,0x10
c0024108:	a8 88                	test   al,0x88
c002410a:	74 23                	je     c002412f <ATA::readyForCommand()+0x49>
c002410c:	43                   	inc    ebx
c002410d:	83 fb 63             	cmp    ebx,0x63
c0024110:	7e dd                	jle    c00240ef <ATA::readyForCommand()+0x9>
c0024112:	51                   	push   ecx
c0024113:	51                   	push   ecx
c0024114:	6a 00                	push   0x0
c0024116:	68 40 42 0f 00       	push   0xf4240
c002411b:	e8 c8 a2 ff ff       	call   c001e3e8 <nanoSleep(unsigned long long)>
c0024120:	83 c4 10             	add    esp,0x10
c0024123:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024129:	75 c4                	jne    c00240ef <ATA::readyForCommand()+0x9>
c002412b:	31 c0                	xor    eax,eax
c002412d:	eb 02                	jmp    c0024131 <ATA::readyForCommand()+0x4b>
c002412f:	b0 01                	mov    al,0x1
c0024131:	5a                   	pop    edx
c0024132:	5b                   	pop    ebx
c0024133:	5e                   	pop    esi
c0024134:	c3                   	ret    
c0024135:	90                   	nop

c0024136 <ATA::access(unsigned long long, int, void*, bool)>:
c0024136:	55                   	push   ebp
c0024137:	57                   	push   edi
c0024138:	56                   	push   esi
c0024139:	53                   	push   ebx
c002413a:	83 ec 2c             	sub    esp,0x2c
c002413d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024141:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024145:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024149:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002414d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024151:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024155:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024159:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002415f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024163:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024169:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002416d:	c1 e0 06             	shl    eax,0x6
c0024170:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024178:	74 5d                	je     c00241d7 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002417a:	89 fa                	mov    edx,edi
c002417c:	89 f0                	mov    eax,esi
c002417e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024182:	c1 ea 1c             	shr    edx,0x1c
c0024185:	89 d1                	mov    ecx,edx
c0024187:	09 c1                	or     ecx,eax
c0024189:	74 25                	je     c00241b0 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002418b:	31 ed                	xor    ebp,ebp
c002418d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024194:	89 fa                	mov    edx,edi
c0024196:	89 f0                	mov    eax,esi
c0024198:	0f ad d0             	shrd   eax,edx,cl
c002419b:	d3 ea                	shr    edx,cl
c002419d:	f6 c1 20             	test   cl,0x20
c00241a0:	74 02                	je     c00241a4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00241a2:	89 d0                	mov    eax,edx
c00241a4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00241a8:	45                   	inc    ebp
c00241a9:	83 fd 06             	cmp    ebp,0x6
c00241ac:	75 df                	jne    c002418d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00241ae:	eb 76                	jmp    c0024226 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00241b0:	89 f0                	mov    eax,esi
c00241b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00241b7:	89 fa                	mov    edx,edi
c00241b9:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00241c0:	0f ac d0 10          	shrd   eax,edx,0x10
c00241c4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00241c9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00241cd:	c1 ee 18             	shr    esi,0x18
c00241d0:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00241d5:	eb 56                	jmp    c002422d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241d7:	6a 00                	push   0x0
c00241d9:	6a 3f                	push   0x3f
c00241db:	57                   	push   edi
c00241dc:	56                   	push   esi
c00241dd:	e8 9a 29 00 00       	call   c0026b7c <__umoddi3>
c00241e2:	83 c4 10             	add    esp,0x10
c00241e5:	40                   	inc    eax
c00241e6:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00241ea:	6a 00                	push   0x0
c00241ec:	68 f0 03 00 00       	push   0x3f0
c00241f1:	57                   	push   edi
c00241f2:	56                   	push   esi
c00241f3:	e8 84 28 00 00       	call   c0026a7c <__udivdi3>
c00241f8:	83 c4 10             	add    esp,0x10
c00241fb:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024200:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024207:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002420c:	6a 00                	push   0x0
c002420e:	6a 3f                	push   0x3f
c0024210:	57                   	push   edi
c0024211:	56                   	push   esi
c0024212:	e8 65 28 00 00       	call   c0026a7c <__udivdi3>
c0024217:	83 c4 10             	add    esp,0x10
c002421a:	89 c6                	mov    esi,eax
c002421c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024221:	83 e6 0f             	and    esi,0xf
c0024224:	eb 07                	jmp    c002422d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024226:	31 f6                	xor    esi,esi
c0024228:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002422d:	bf 01 00 00 00       	mov    edi,0x1
c0024232:	50                   	push   eax
c0024233:	6a 00                	push   0x0
c0024235:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002423c:	50                   	push   eax
c002423d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024241:	e8 6c f0 ff ff       	call   c00232b2 <IDE::enableIRQs(unsigned char, bool)>
c0024246:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024249:	e8 98 fe ff ff       	call   c00240e6 <ATA::readyForCommand()>
c002424e:	83 c4 10             	add    esp,0x10
c0024251:	84 c0                	test   al,al
c0024253:	0f 84 5a 02 00 00    	je     c00244b3 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024259:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002425f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024265:	c1 e0 04             	shl    eax,0x4
c0024268:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002426f:	09 c6                	or     esi,eax
c0024271:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024276:	75 05                	jne    c002427d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024278:	83 ce a0             	or     esi,0xffffffa0
c002427b:	eb 03                	jmp    c0024280 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002427d:	83 ce e0             	or     esi,0xffffffe0
c0024280:	89 f0                	mov    eax,esi
c0024282:	0f b6 f0             	movzx  esi,al
c0024285:	56                   	push   esi
c0024286:	6a 06                	push   0x6
c0024288:	51                   	push   ecx
c0024289:	52                   	push   edx
c002428a:	e8 17 ee ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002428f:	83 c4 10             	add    esp,0x10
c0024292:	6a 00                	push   0x0
c0024294:	6a 01                	push   0x1
c0024296:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002429d:	50                   	push   eax
c002429e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242a4:	e8 fd ed ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242a9:	83 c4 10             	add    esp,0x10
c00242ac:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242b1:	75 6e                	jne    c0024321 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00242b3:	6a 00                	push   0x0
c00242b5:	6a 08                	push   0x8
c00242b7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242be:	50                   	push   eax
c00242bf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242c5:	e8 dc ed ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ca:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00242cf:	50                   	push   eax
c00242d0:	6a 09                	push   0x9
c00242d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242d9:	50                   	push   eax
c00242da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242e0:	e8 c1 ed ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242e5:	83 c4 20             	add    esp,0x20
c00242e8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00242ed:	50                   	push   eax
c00242ee:	6a 0a                	push   0xa
c00242f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242f7:	50                   	push   eax
c00242f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242fe:	e8 a3 ed ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024303:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024308:	50                   	push   eax
c0024309:	6a 0b                	push   0xb
c002430b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024312:	50                   	push   eax
c0024313:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024319:	e8 88 ed ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002431e:	83 c4 20             	add    esp,0x20
c0024321:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024326:	50                   	push   eax
c0024327:	6a 02                	push   0x2
c0024329:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024330:	50                   	push   eax
c0024331:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024337:	e8 6a ed ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002433c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024341:	50                   	push   eax
c0024342:	6a 03                	push   0x3
c0024344:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002434b:	50                   	push   eax
c002434c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024352:	e8 4f ed ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024357:	83 c4 20             	add    esp,0x20
c002435a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002435f:	50                   	push   eax
c0024360:	6a 04                	push   0x4
c0024362:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024369:	50                   	push   eax
c002436a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024370:	e8 31 ed ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024375:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002437a:	50                   	push   eax
c002437b:	6a 05                	push   0x5
c002437d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024384:	50                   	push   eax
c0024385:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002438b:	e8 16 ed ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024390:	83 c4 20             	add    esp,0x20
c0024393:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024398:	0f 94 c0             	sete   al
c002439b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243a0:	74 09                	je     c00243ab <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00243a2:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00243a9:	eb 07                	jmp    c00243b2 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00243ab:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00243b2:	0f b6 c0             	movzx  eax,al
c00243b5:	50                   	push   eax
c00243b6:	6a 07                	push   0x7
c00243b8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243bf:	50                   	push   eax
c00243c0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243c6:	e8 db ec ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243cb:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00243cf:	83 c4 10             	add    esp,0x10
c00243d2:	85 f6                	test   esi,esi
c00243d4:	0f 84 ba 00 00 00    	je     c0024494 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00243da:	50                   	push   eax
c00243db:	6a 01                	push   0x1
c00243dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243e4:	50                   	push   eax
c00243e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243eb:	e8 62 f8 ff ff       	call   c0023c52 <IDE::polling(unsigned char, unsigned int)>
c00243f0:	83 c4 10             	add    esp,0x10
c00243f3:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00243f9:	84 c0                	test   al,al
c00243fb:	74 2c                	je     c0024429 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00243fd:	0f b6 f8             	movzx  edi,al
c0024400:	0f b6 d2             	movzx  edx,dl
c0024403:	57                   	push   edi
c0024404:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002440b:	50                   	push   eax
c002440c:	52                   	push   edx
c002440d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024413:	e8 a4 f6 ff ff       	call   c0023abc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024418:	c7 04 24 44 d0 02 c0 	mov    DWORD PTR [esp],0xc002d044
c002441f:	e8 9d eb fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0024424:	e9 87 00 00 00       	jmp    c00244b0 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024429:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002442e:	74 33                	je     c0024463 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024430:	31 ed                	xor    ebp,ebp
c0024432:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024436:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002443a:	50                   	push   eax
c002443b:	50                   	push   eax
c002443c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024443:	50                   	push   eax
c0024444:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002444a:	e8 45 ec ff ff       	call   c0023094 <IDE::getBase(unsigned char)>
c002444f:	89 c2                	mov    edx,eax
c0024451:	89 f8                	mov    eax,edi
c0024453:	66 ef                	out    dx,ax
c0024455:	45                   	inc    ebp
c0024456:	83 c4 10             	add    esp,0x10
c0024459:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002445f:	75 d1                	jne    c0024432 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024461:	eb 23                	jmp    c0024486 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024463:	0f b6 d2             	movzx  edx,dl
c0024466:	51                   	push   ecx
c0024467:	51                   	push   ecx
c0024468:	52                   	push   edx
c0024469:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002446f:	e8 20 ec ff ff       	call   c0023094 <IDE::getBase(unsigned char)>
c0024474:	b9 00 01 00 00       	mov    ecx,0x100
c0024479:	89 c2                	mov    edx,eax
c002447b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002447f:	fc                   	cld    
c0024480:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024483:	83 c4 10             	add    esp,0x10
c0024486:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002448e:	4e                   	dec    esi
c002448f:	e9 3e ff ff ff       	jmp    c00243d2 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024494:	31 ff                	xor    edi,edi
c0024496:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002449b:	74 16                	je     c00244b3 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002449d:	50                   	push   eax
c002449e:	50                   	push   eax
c002449f:	31 c0                	xor    eax,eax
c00244a1:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00244a6:	0f 94 c0             	sete   al
c00244a9:	50                   	push   eax
c00244aa:	53                   	push   ebx
c00244ab:	e8 ec fb ff ff       	call   c002409c <ATA::flush(bool)>
c00244b0:	83 c4 10             	add    esp,0x10
c00244b3:	83 c4 2c             	add    esp,0x2c
c00244b6:	89 f8                	mov    eax,edi
c00244b8:	5b                   	pop    ebx
c00244b9:	5e                   	pop    esi
c00244ba:	5f                   	pop    edi
c00244bb:	5d                   	pop    ebp
c00244bc:	c3                   	ret    
c00244bd:	90                   	nop

c00244be <ATA::read(unsigned long long, int, void*)>:
c00244be:	57                   	push   edi
c00244bf:	b8 04 00 00 00       	mov    eax,0x4
c00244c4:	56                   	push   esi
c00244c5:	53                   	push   ebx
c00244c6:	83 ec 10             	sub    esp,0x10
c00244c9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244cd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244d1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244d4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244dc:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244e2:	77 3b                	ja     c002451f <ATA::read(unsigned long long, int, void*)+0x61>
c00244e4:	b8 06 00 00 00       	mov    eax,0x6
c00244e9:	85 d2                	test   edx,edx
c00244eb:	74 32                	je     c002451f <ATA::read(unsigned long long, int, void*)+0x61>
c00244ed:	50                   	push   eax
c00244ee:	50                   	push   eax
c00244ef:	6a 00                	push   0x0
c00244f1:	52                   	push   edx
c00244f2:	53                   	push   ebx
c00244f3:	57                   	push   edi
c00244f4:	56                   	push   esi
c00244f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244f9:	e8 38 fc ff ff       	call   c0024136 <ATA::access(unsigned long long, int, void*, bool)>
c00244fe:	83 c4 20             	add    esp,0x20
c0024501:	85 c0                	test   eax,eax
c0024503:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024507:	75 11                	jne    c002451a <ATA::read(unsigned long long, int, void*)+0x5c>
c0024509:	01 1d e8 29 03 c0    	add    DWORD PTR ds:0xc00329e8,ebx
c002450f:	e8 42 c5 fe ff       	call   c0010a56 <VgaText::updateDiskUsage()>
c0024514:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024518:	eb 05                	jmp    c002451f <ATA::read(unsigned long long, int, void*)+0x61>
c002451a:	b8 01 00 00 00       	mov    eax,0x1
c002451f:	83 c4 10             	add    esp,0x10
c0024522:	5b                   	pop    ebx
c0024523:	5e                   	pop    esi
c0024524:	5f                   	pop    edi
c0024525:	c3                   	ret    

c0024526 <ATA::write(unsigned long long, int, void*)>:
c0024526:	57                   	push   edi
c0024527:	b8 04 00 00 00       	mov    eax,0x4
c002452c:	56                   	push   esi
c002452d:	53                   	push   ebx
c002452e:	83 ec 10             	sub    esp,0x10
c0024531:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024535:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024539:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002453c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024540:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024544:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002454a:	77 3b                	ja     c0024587 <ATA::write(unsigned long long, int, void*)+0x61>
c002454c:	b8 06 00 00 00       	mov    eax,0x6
c0024551:	85 d2                	test   edx,edx
c0024553:	74 32                	je     c0024587 <ATA::write(unsigned long long, int, void*)+0x61>
c0024555:	50                   	push   eax
c0024556:	50                   	push   eax
c0024557:	6a 01                	push   0x1
c0024559:	52                   	push   edx
c002455a:	53                   	push   ebx
c002455b:	57                   	push   edi
c002455c:	56                   	push   esi
c002455d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024561:	e8 d0 fb ff ff       	call   c0024136 <ATA::access(unsigned long long, int, void*, bool)>
c0024566:	83 c4 20             	add    esp,0x20
c0024569:	85 c0                	test   eax,eax
c002456b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002456f:	75 11                	jne    c0024582 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024571:	01 1d e4 29 03 c0    	add    DWORD PTR ds:0xc00329e4,ebx
c0024577:	e8 da c4 fe ff       	call   c0010a56 <VgaText::updateDiskUsage()>
c002457c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024580:	eb 05                	jmp    c0024587 <ATA::write(unsigned long long, int, void*)+0x61>
c0024582:	b8 01 00 00 00       	mov    eax,0x1
c0024587:	83 c4 10             	add    esp,0x10
c002458a:	5b                   	pop    ebx
c002458b:	5e                   	pop    esi
c002458c:	5f                   	pop    edi
c002458d:	c3                   	ret    

c002458e <ATA::detectCHS()>:
c002458e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024592:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024598:	c1 e0 06             	shl    eax,0x6
c002459b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00245a1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00245ab:	c7 44 24 04 4f d0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d04f
c00245b3:	e9 bb 60 ff ff       	jmp    c001a673 <Krnl::panic(char const*)>

c00245b8 <ATA::open(int, int, void*)>:
c00245b8:	53                   	push   ebx
c00245b9:	83 ec 08             	sub    esp,0x8
c00245bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00245c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00245c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00245c8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00245ce:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00245d4:	c1 e0 06             	shl    eax,0x6
c00245d7:	01 d0                	add    eax,edx
c00245d9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00245e0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00245e6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00245ed:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00245f7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00245fd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024604:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002460b:	75 0c                	jne    c0024619 <ATA::open(int, int, void*)+0x61>
c002460d:	83 ec 0c             	sub    esp,0xc
c0024610:	53                   	push   ebx
c0024611:	e8 78 ff ff ff       	call   c002458e <ATA::detectCHS()>
c0024616:	83 c4 10             	add    esp,0x10
c0024619:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002461f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024625:	c1 e0 06             	shl    eax,0x6
c0024628:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002462f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024639:	d1 e8                	shr    eax,1
c002463b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024641:	6a 04                	push   0x4
c0024643:	6a 0c                	push   0xc
c0024645:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002464c:	50                   	push   eax
c002464d:	52                   	push   edx
c002464e:	e8 53 ea ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024653:	90                   	nop
c0024654:	90                   	nop
c0024655:	6a 00                	push   0x0
c0024657:	6a 0c                	push   0xc
c0024659:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024660:	50                   	push   eax
c0024661:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024667:	e8 3a ea ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002466c:	83 c4 14             	add    esp,0x14
c002466f:	53                   	push   ebx
c0024670:	e8 ff 01 ff ff       	call   c0014874 <PhysicalDisk::startCache()>
c0024675:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024678:	e8 7d 23 ff ff       	call   c00169fa <createPartitionsForDisk(PhysicalDisk*)>
c002467d:	31 c0                	xor    eax,eax
c002467f:	83 c4 18             	add    esp,0x18
c0024682:	5b                   	pop    ebx
c0024683:	c3                   	ret    

c0024684 <ATAPI::write(unsigned long long, int, void*)>:
c0024684:	b8 03 00 00 00       	mov    eax,0x3
c0024689:	c3                   	ret    

c002468a <ATAPI::close(int, int, void*)>:
c002468a:	83 ec 0c             	sub    esp,0xc
c002468d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024691:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024697:	85 c0                	test   eax,eax
c0024699:	74 0c                	je     c00246a7 <ATAPI::close(int, int, void*)+0x1d>
c002469b:	83 ec 0c             	sub    esp,0xc
c002469e:	8b 10                	mov    edx,DWORD PTR [eax]
c00246a0:	50                   	push   eax
c00246a1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00246a4:	83 c4 10             	add    esp,0x10
c00246a7:	31 c0                	xor    eax,eax
c00246a9:	83 c4 0c             	add    esp,0xc
c00246ac:	c3                   	ret    
c00246ad:	90                   	nop

c00246ae <ATAPI::ATAPI()>:
c00246ae:	83 ec 0c             	sub    esp,0xc
c00246b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246b5:	83 ec 04             	sub    esp,0x4
c00246b8:	68 00 08 00 00       	push   0x800
c00246bd:	68 89 d1 02 c0       	push   0xc002d189
c00246c2:	50                   	push   eax
c00246c3:	e8 44 01 ff ff       	call   c001480c <PhysicalDisk::PhysicalDisk(char const*, int)>
c00246c8:	83 c4 10             	add    esp,0x10
c00246cb:	ba a4 d0 02 c0       	mov    edx,0xc002d0a4
c00246d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246d4:	89 10                	mov    DWORD PTR [eax],edx
c00246d6:	90                   	nop
c00246d7:	83 c4 0c             	add    esp,0xc
c00246da:	c3                   	ret    
c00246db:	90                   	nop

c00246dc <ATAPI::readyForCommand()>:
c00246dc:	56                   	push   esi
c00246dd:	53                   	push   ebx
c00246de:	31 db                	xor    ebx,ebx
c00246e0:	50                   	push   eax
c00246e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00246e5:	50                   	push   eax
c00246e6:	6a 0c                	push   0xc
c00246e8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00246ef:	50                   	push   eax
c00246f0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00246f6:	e8 6b ea ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c00246fb:	83 c4 10             	add    esp,0x10
c00246fe:	a8 88                	test   al,0x88
c0024700:	74 23                	je     c0024725 <ATAPI::readyForCommand()+0x49>
c0024702:	43                   	inc    ebx
c0024703:	83 fb 63             	cmp    ebx,0x63
c0024706:	7e dd                	jle    c00246e5 <ATAPI::readyForCommand()+0x9>
c0024708:	51                   	push   ecx
c0024709:	51                   	push   ecx
c002470a:	6a 00                	push   0x0
c002470c:	68 40 42 0f 00       	push   0xf4240
c0024711:	e8 d2 9c ff ff       	call   c001e3e8 <nanoSleep(unsigned long long)>
c0024716:	83 c4 10             	add    esp,0x10
c0024719:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002471f:	75 c4                	jne    c00246e5 <ATAPI::readyForCommand()+0x9>
c0024721:	31 c0                	xor    eax,eax
c0024723:	eb 02                	jmp    c0024727 <ATAPI::readyForCommand()+0x4b>
c0024725:	b0 01                	mov    al,0x1
c0024727:	5a                   	pop    edx
c0024728:	5b                   	pop    ebx
c0024729:	5e                   	pop    esi
c002472a:	c3                   	ret    
c002472b:	90                   	nop

c002472c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002472c:	55                   	push   ebp
c002472d:	57                   	push   edi
c002472e:	56                   	push   esi
c002472f:	53                   	push   ebx
c0024730:	83 ec 20             	sub    esp,0x20
c0024733:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024737:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002473b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002473f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024743:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024747:	6a 01                	push   0x1
c0024749:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024750:	50                   	push   eax
c0024751:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024757:	e8 56 eb ff ff       	call   c00232b2 <IDE::enableIRQs(unsigned char, bool)>
c002475c:	5e                   	pop    esi
c002475d:	58                   	pop    eax
c002475e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024765:	50                   	push   eax
c0024766:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002476c:	e8 0f e9 ff ff       	call   c0023080 <IDE::prepareInterrupt(unsigned char)>
c0024771:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024774:	e8 63 ff ff ff       	call   c00246dc <ATAPI::readyForCommand()>
c0024779:	83 c4 10             	add    esp,0x10
c002477c:	84 c0                	test   al,al
c002477e:	75 0a                	jne    c002478a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024780:	bb 01 00 00 00       	mov    ebx,0x1
c0024785:	e9 57 02 00 00       	jmp    c00249e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002478a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024790:	c1 e0 04             	shl    eax,0x4
c0024793:	0f b6 c0             	movzx  eax,al
c0024796:	50                   	push   eax
c0024797:	6a 06                	push   0x6
c0024799:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247a0:	50                   	push   eax
c00247a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247a7:	e8 fa e8 ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247ac:	6a 00                	push   0x0
c00247ae:	6a 01                	push   0x1
c00247b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247b7:	50                   	push   eax
c00247b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247be:	e8 e3 e8 ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247c3:	83 c4 20             	add    esp,0x20
c00247c6:	0f b6 c3             	movzx  eax,bl
c00247c9:	0f b6 df             	movzx  ebx,bh
c00247cc:	50                   	push   eax
c00247cd:	6a 04                	push   0x4
c00247cf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247d6:	50                   	push   eax
c00247d7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247dd:	e8 c4 e8 ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247e2:	53                   	push   ebx
c00247e3:	6a 05                	push   0x5
c00247e5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247ec:	50                   	push   eax
c00247ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247f3:	e8 ae e8 ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247f8:	83 c4 20             	add    esp,0x20
c00247fb:	68 a0 00 00 00       	push   0xa0
c0024800:	6a 07                	push   0x7
c0024802:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024809:	50                   	push   eax
c002480a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024810:	e8 91 e8 ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024815:	83 c4 0c             	add    esp,0xc
c0024818:	6a 01                	push   0x1
c002481a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024821:	50                   	push   eax
c0024822:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024828:	e8 25 f4 ff ff       	call   c0023c52 <IDE::polling(unsigned char, unsigned int)>
c002482d:	83 c4 10             	add    esp,0x10
c0024830:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024836:	84 c0                	test   al,al
c0024838:	74 23                	je     c002485d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002483a:	0f b6 d8             	movzx  ebx,al
c002483d:	0f b6 d2             	movzx  edx,dl
c0024840:	53                   	push   ebx
c0024841:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024848:	50                   	push   eax
c0024849:	52                   	push   edx
c002484a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024850:	e8 67 f2 ff ff       	call   c0023abc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024855:	83 c4 10             	add    esp,0x10
c0024858:	e9 84 01 00 00       	jmp    c00249e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002485d:	0f b6 d2             	movzx  edx,dl
c0024860:	53                   	push   ebx
c0024861:	53                   	push   ebx
c0024862:	52                   	push   edx
c0024863:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024869:	e8 26 e8 ff ff       	call   c0023094 <IDE::getBase(unsigned char)>
c002486e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024872:	b9 06 00 00 00       	mov    ecx,0x6
c0024877:	89 c2                	mov    edx,eax
c0024879:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002487c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024880:	83 c4 10             	add    esp,0x10
c0024883:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024889:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024890:	85 db                	test   ebx,ebx
c0024892:	0f 84 ec 00 00 00    	je     c0024984 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024898:	51                   	push   ecx
c0024899:	51                   	push   ecx
c002489a:	52                   	push   edx
c002489b:	50                   	push   eax
c002489c:	e8 73 e9 ff ff       	call   c0023214 <IDE::waitInterrupt(unsigned char)>
c00248a1:	83 c4 10             	add    esp,0x10
c00248a4:	84 c0                	test   al,al
c00248a6:	0f 84 d4 fe ff ff    	je     c0024780 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248ac:	56                   	push   esi
c00248ad:	56                   	push   esi
c00248ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248b5:	50                   	push   eax
c00248b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248bc:	e8 bf e7 ff ff       	call   c0023080 <IDE::prepareInterrupt(unsigned char)>
c00248c1:	83 c4 0c             	add    esp,0xc
c00248c4:	6a 04                	push   0x4
c00248c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248cd:	50                   	push   eax
c00248ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248d4:	e8 8d e8 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c00248d9:	83 c4 0c             	add    esp,0xc
c00248dc:	89 c6                	mov    esi,eax
c00248de:	6a 05                	push   0x5
c00248e0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248e7:	50                   	push   eax
c00248e8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248ee:	e8 73 e8 ff ff       	call   c0023166 <IDE::read(unsigned char, unsigned char)>
c00248f3:	89 f1                	mov    ecx,esi
c00248f5:	0f b6 c0             	movzx  eax,al
c00248f8:	0f b6 f1             	movzx  esi,cl
c00248fb:	c1 e0 08             	shl    eax,0x8
c00248fe:	09 c6                	or     esi,eax
c0024900:	d1 fe                	sar    esi,1
c0024902:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024906:	83 c4 10             	add    esp,0x10
c0024909:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002490e:	74 41                	je     c0024951 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024910:	31 c9                	xor    ecx,ecx
c0024912:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024918:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002491f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024923:	75 0a                	jne    c002492f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024925:	01 c9                	add    ecx,ecx
c0024927:	01 cd                	add    ebp,ecx
c0024929:	4b                   	dec    ebx
c002492a:	e9 54 ff ff ff       	jmp    c0024883 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002492f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024934:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024938:	51                   	push   ecx
c0024939:	51                   	push   ecx
c002493a:	52                   	push   edx
c002493b:	50                   	push   eax
c002493c:	e8 53 e7 ff ff       	call   c0023094 <IDE::getBase(unsigned char)>
c0024941:	89 c2                	mov    edx,eax
c0024943:	89 f0                	mov    eax,esi
c0024945:	66 ef                	out    dx,ax
c0024947:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002494b:	83 c4 10             	add    esp,0x10
c002494e:	41                   	inc    ecx
c002494f:	eb c1                	jmp    c0024912 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024951:	31 f6                	xor    esi,esi
c0024953:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024959:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024960:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024964:	75 06                	jne    c002496c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024966:	01 f6                	add    esi,esi
c0024968:	01 f5                	add    ebp,esi
c002496a:	eb bd                	jmp    c0024929 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002496c:	51                   	push   ecx
c002496d:	51                   	push   ecx
c002496e:	52                   	push   edx
c002496f:	50                   	push   eax
c0024970:	e8 1f e7 ff ff       	call   c0023094 <IDE::getBase(unsigned char)>
c0024975:	89 c2                	mov    edx,eax
c0024977:	66 ed                	in     ax,dx
c0024979:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002497e:	83 c4 10             	add    esp,0x10
c0024981:	46                   	inc    esi
c0024982:	eb cf                	jmp    c0024953 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024984:	51                   	push   ecx
c0024985:	51                   	push   ecx
c0024986:	52                   	push   edx
c0024987:	50                   	push   eax
c0024988:	e8 87 e8 ff ff       	call   c0023214 <IDE::waitInterrupt(unsigned char)>
c002498d:	83 c4 10             	add    esp,0x10
c0024990:	84 c0                	test   al,al
c0024992:	0f 84 e8 fd ff ff    	je     c0024780 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024998:	bb a0 86 01 00       	mov    ebx,0x186a0
c002499d:	52                   	push   edx
c002499e:	52                   	push   edx
c002499f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249a6:	50                   	push   eax
c00249a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249ad:	e8 ce e6 ff ff       	call   c0023080 <IDE::prepareInterrupt(unsigned char)>
c00249b2:	83 c4 10             	add    esp,0x10
c00249b5:	50                   	push   eax
c00249b6:	50                   	push   eax
c00249b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249be:	50                   	push   eax
c00249bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249c5:	e8 ca e6 ff ff       	call   c0023094 <IDE::getBase(unsigned char)>
c00249ca:	8d 50 07             	lea    edx,[eax+0x7]
c00249cd:	ec                   	in     al,dx
c00249ce:	83 c4 10             	add    esp,0x10
c00249d1:	a8 88                	test   al,0x88
c00249d3:	74 0a                	je     c00249df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00249d5:	4b                   	dec    ebx
c00249d6:	75 dd                	jne    c00249b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00249d8:	bb 02 00 00 00       	mov    ebx,0x2
c00249dd:	eb 02                	jmp    c00249e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00249df:	31 db                	xor    ebx,ebx
c00249e1:	83 c4 1c             	add    esp,0x1c
c00249e4:	89 d8                	mov    eax,ebx
c00249e6:	5b                   	pop    ebx
c00249e7:	5e                   	pop    esi
c00249e8:	5f                   	pop    edi
c00249e9:	5d                   	pop    ebp
c00249ea:	c3                   	ret    
c00249eb:	90                   	nop

c00249ec <ATAPI::diskRemoved()>:
c00249ec:	83 ec 18             	sub    esp,0x18
c00249ef:	68 95 d1 02 c0       	push   0xc002d195
c00249f4:	e8 c8 e5 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00249f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00249fd:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024a04:	83 c4 1c             	add    esp,0x1c
c0024a07:	c3                   	ret    

c0024a08 <ATAPI::eject()>:
c0024a08:	57                   	push   edi
c0024a09:	b9 03 00 00 00       	mov    ecx,0x3
c0024a0e:	53                   	push   ebx
c0024a0f:	83 ec 14             	sub    esp,0x14
c0024a12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024a16:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a1a:	fc                   	cld    
c0024a1b:	31 c0                	xor    eax,eax
c0024a1d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a1f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024a24:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024a29:	50                   	push   eax
c0024a2a:	50                   	push   eax
c0024a2b:	6a 00                	push   0x0
c0024a2d:	6a 00                	push   0x0
c0024a2f:	6a 00                	push   0x0
c0024a31:	6a 02                	push   0x2
c0024a33:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a37:	50                   	push   eax
c0024a38:	53                   	push   ebx
c0024a39:	e8 ee fc ff ff       	call   c002472c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a3e:	83 c4 14             	add    esp,0x14
c0024a41:	53                   	push   ebx
c0024a42:	e8 a5 ff ff ff       	call   c00249ec <ATAPI::diskRemoved()>
c0024a47:	83 c4 24             	add    esp,0x24
c0024a4a:	31 c0                	xor    eax,eax
c0024a4c:	5b                   	pop    ebx
c0024a4d:	5f                   	pop    edi
c0024a4e:	c3                   	ret    
c0024a4f:	90                   	nop

c0024a50 <ATAPI::diskInserted()>:
c0024a50:	53                   	push   ebx
c0024a51:	83 ec 14             	sub    esp,0x14
c0024a54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024a58:	68 ac d1 02 c0       	push   0xc002d1ac
c0024a5d:	e8 5f e5 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0024a62:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024a69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a6c:	e8 03 fe fe ff       	call   c0014874 <PhysicalDisk::startCache()>
c0024a71:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024a75:	83 c4 18             	add    esp,0x18
c0024a78:	5b                   	pop    ebx
c0024a79:	e9 7c 1f ff ff       	jmp    c00169fa <createPartitionsForDisk(PhysicalDisk*)>

c0024a7e <ATAPI::detectMedia()>:
c0024a7e:	56                   	push   esi
c0024a7f:	53                   	push   ebx
c0024a80:	83 ec 28             	sub    esp,0x28
c0024a83:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a87:	6a 0c                	push   0xc
c0024a89:	6a 00                	push   0x0
c0024a8b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a8f:	56                   	push   esi
c0024a90:	e8 e3 bc fd ff       	call   c0000778 <memset>
c0024a95:	58                   	pop    eax
c0024a96:	5a                   	pop    edx
c0024a97:	6a 00                	push   0x0
c0024a99:	6a 00                	push   0x0
c0024a9b:	6a 00                	push   0x0
c0024a9d:	6a 00                	push   0x0
c0024a9f:	56                   	push   esi
c0024aa0:	53                   	push   ebx
c0024aa1:	e8 86 fc ff ff       	call   c002472c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024aa6:	83 c4 1c             	add    esp,0x1c
c0024aa9:	6a 0c                	push   0xc
c0024aab:	6a 00                	push   0x0
c0024aad:	56                   	push   esi
c0024aae:	e8 c5 bc fd ff       	call   c0000778 <memset>
c0024ab3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024ab8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024abd:	59                   	pop    ecx
c0024abe:	58                   	pop    eax
c0024abf:	6a 01                	push   0x1
c0024ac1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024ac5:	50                   	push   eax
c0024ac6:	6a 00                	push   0x0
c0024ac8:	6a 12                	push   0x12
c0024aca:	56                   	push   esi
c0024acb:	53                   	push   ebx
c0024acc:	e8 5b fc ff ff       	call   c002472c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ad1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024ad5:	83 c4 20             	add    esp,0x20
c0024ad8:	83 e0 7f             	and    eax,0x7f
c0024adb:	3c 70                	cmp    al,0x70
c0024add:	74 15                	je     c0024af4 <ATAPI::detectMedia()+0x76>
c0024adf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024ae6:	75 0c                	jne    c0024af4 <ATAPI::detectMedia()+0x76>
c0024ae8:	83 ec 0c             	sub    esp,0xc
c0024aeb:	53                   	push   ebx
c0024aec:	e8 5f ff ff ff       	call   c0024a50 <ATAPI::diskInserted()>
c0024af1:	83 c4 10             	add    esp,0x10
c0024af4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024af8:	83 e0 0f             	and    eax,0xf
c0024afb:	3c 02                	cmp    al,0x2
c0024afd:	75 1b                	jne    c0024b1a <ATAPI::detectMedia()+0x9c>
c0024aff:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024b04:	75 2d                	jne    c0024b33 <ATAPI::detectMedia()+0xb5>
c0024b06:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b0d:	74 24                	je     c0024b33 <ATAPI::detectMedia()+0xb5>
c0024b0f:	83 ec 0c             	sub    esp,0xc
c0024b12:	53                   	push   ebx
c0024b13:	e8 d4 fe ff ff       	call   c00249ec <ATAPI::diskRemoved()>
c0024b18:	eb 16                	jmp    c0024b30 <ATAPI::detectMedia()+0xb2>
c0024b1a:	84 c0                	test   al,al
c0024b1c:	75 15                	jne    c0024b33 <ATAPI::detectMedia()+0xb5>
c0024b1e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b25:	75 0c                	jne    c0024b33 <ATAPI::detectMedia()+0xb5>
c0024b27:	83 ec 0c             	sub    esp,0xc
c0024b2a:	53                   	push   ebx
c0024b2b:	e8 20 ff ff ff       	call   c0024a50 <ATAPI::diskInserted()>
c0024b30:	83 c4 10             	add    esp,0x10
c0024b33:	83 c4 24             	add    esp,0x24
c0024b36:	5b                   	pop    ebx
c0024b37:	5e                   	pop    esi
c0024b38:	c3                   	ret    
c0024b39:	90                   	nop

c0024b3a <ATAPI::open(int, int, void*)>:
c0024b3a:	53                   	push   ebx
c0024b3b:	83 ec 08             	sub    esp,0x8
c0024b3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b4a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b50:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024b56:	c1 e0 06             	shl    eax,0x6
c0024b59:	01 d0                	add    eax,edx
c0024b5b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024b62:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024b68:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024b6f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b79:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b7f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b86:	6a 04                	push   0x4
c0024b88:	6a 0c                	push   0xc
c0024b8a:	51                   	push   ecx
c0024b8b:	52                   	push   edx
c0024b8c:	e8 15 e5 ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b91:	90                   	nop
c0024b92:	90                   	nop
c0024b93:	6a 00                	push   0x0
c0024b95:	6a 0c                	push   0xc
c0024b97:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b9e:	50                   	push   eax
c0024b9f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ba5:	e8 fc e4 ff ff       	call   c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024baa:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024bb1:	83 c4 14             	add    esp,0x14
c0024bb4:	53                   	push   ebx
c0024bb5:	e8 c4 fe ff ff       	call   c0024a7e <ATAPI::detectMedia()>
c0024bba:	31 c0                	xor    eax,eax
c0024bbc:	83 c4 18             	add    esp,0x18
c0024bbf:	5b                   	pop    ebx
c0024bc0:	c3                   	ret    
c0024bc1:	90                   	nop

c0024bc2 <ATAPI::read(unsigned long long, int, void*)>:
c0024bc2:	55                   	push   ebp
c0024bc3:	57                   	push   edi
c0024bc4:	56                   	push   esi
c0024bc5:	53                   	push   ebx
c0024bc6:	83 ec 1c             	sub    esp,0x1c
c0024bc9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024bcd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024bd1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024bd5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024bdc:	74 41                	je     c0024c1f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024bde:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024be2:	b9 03 00 00 00       	mov    ecx,0x3
c0024be7:	fc                   	cld    
c0024be8:	31 c0                	xor    eax,eax
c0024bea:	86 fb                	xchg   bl,bh
c0024bec:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024bee:	c1 c3 10             	rol    ebx,0x10
c0024bf1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024bf6:	89 e8                	mov    eax,ebp
c0024bf8:	86 fb                	xchg   bl,bh
c0024bfa:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024bfe:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024c02:	50                   	push   eax
c0024c03:	50                   	push   eax
c0024c04:	55                   	push   ebp
c0024c05:	c1 e5 0b             	shl    ebp,0xb
c0024c08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024c0c:	6a 00                	push   0x0
c0024c0e:	55                   	push   ebp
c0024c0f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c13:	50                   	push   eax
c0024c14:	56                   	push   esi
c0024c15:	e8 12 fb ff ff       	call   c002472c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024c1a:	83 c4 20             	add    esp,0x20
c0024c1d:	eb 1a                	jmp    c0024c39 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024c1f:	83 ec 0c             	sub    esp,0xc
c0024c22:	56                   	push   esi
c0024c23:	e8 56 fe ff ff       	call   c0024a7e <ATAPI::detectMedia()>
c0024c28:	83 c4 10             	add    esp,0x10
c0024c2b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c32:	75 aa                	jne    c0024bde <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024c34:	b8 02 00 00 00       	mov    eax,0x2
c0024c39:	83 c4 1c             	add    esp,0x1c
c0024c3c:	5b                   	pop    ebx
c0024c3d:	5e                   	pop    esi
c0024c3e:	5f                   	pop    edi
c0024c3f:	5d                   	pop    ebp
c0024c40:	c3                   	ret    
c0024c41:	90                   	nop

c0024c42 <SATA::close(int, int, void*)>:
c0024c42:	83 ec 0c             	sub    esp,0xc
c0024c45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c49:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c4f:	85 c0                	test   eax,eax
c0024c51:	74 0c                	je     c0024c5f <SATA::close(int, int, void*)+0x1d>
c0024c53:	83 ec 0c             	sub    esp,0xc
c0024c56:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c58:	50                   	push   eax
c0024c59:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c5c:	83 c4 10             	add    esp,0x10
c0024c5f:	31 c0                	xor    eax,eax
c0024c61:	83 c4 0c             	add    esp,0xc
c0024c64:	c3                   	ret    
c0024c65:	90                   	nop

c0024c66 <SATA::powerSaving(PowerSavingLevel)>:
c0024c66:	c3                   	ret    
c0024c67:	90                   	nop

c0024c68 <SATA::open(int, int, void*)>:
c0024c68:	56                   	push   esi
c0024c69:	53                   	push   ebx
c0024c6a:	50                   	push   eax
c0024c6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c73:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024c7d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c83:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c91:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c9b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024ca1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024ca8:	e8 d7 b2 fe ff       	call   c000ff84 <Phys::allocatePage()>
c0024cad:	89 c6                	mov    esi,eax
c0024caf:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024cb5:	81 c6 00 10 00 00    	add    esi,0x1000
c0024cbb:	e8 c4 b2 fe ff       	call   c000ff84 <Phys::allocatePage()>
c0024cc0:	39 c6                	cmp    esi,eax
c0024cc2:	74 10                	je     c0024cd4 <SATA::open(int, int, void*)+0x6c>
c0024cc4:	83 ec 0c             	sub    esp,0xc
c0024cc7:	68 d4 d0 02 c0       	push   0xc002d0d4
c0024ccc:	e8 a2 59 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0024cd1:	83 c4 10             	add    esp,0x10
c0024cd4:	83 ec 0c             	sub    esp,0xc
c0024cd7:	6a 02                	push   0x2
c0024cd9:	e8 23 cf fe ff       	call   c0011c01 <Virt::allocateKernelVirtualPages(int)>
c0024cde:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ce4:	e8 b3 d1 fe ff       	call   c0011e9c <Virt::getAKernelVAS()>
c0024ce9:	6a 03                	push   0x3
c0024ceb:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024cf1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024cf7:	50                   	push   eax
c0024cf8:	e8 db d6 fe ff       	call   c00123d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024cfd:	83 c4 14             	add    esp,0x14
c0024d00:	53                   	push   ebx
c0024d01:	e8 6e fb fe ff       	call   c0014874 <PhysicalDisk::startCache()>
c0024d06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024d09:	e8 ec 1c ff ff       	call   c00169fa <createPartitionsForDisk(PhysicalDisk*)>
c0024d0e:	83 c4 14             	add    esp,0x14
c0024d11:	31 c0                	xor    eax,eax
c0024d13:	5b                   	pop    ebx
c0024d14:	5e                   	pop    esi
c0024d15:	c3                   	ret    

c0024d16 <SATA::SATA()>:
c0024d16:	83 ec 0c             	sub    esp,0xc
c0024d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d1d:	83 ec 04             	sub    esp,0x4
c0024d20:	68 00 02 00 00       	push   0x200
c0024d25:	68 e8 d0 02 c0       	push   0xc002d0e8
c0024d2a:	50                   	push   eax
c0024d2b:	e8 dc fa fe ff       	call   c001480c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d30:	83 c4 10             	add    esp,0x10
c0024d33:	ba 58 d1 02 c0       	mov    edx,0xc002d158
c0024d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d3c:	89 10                	mov    DWORD PTR [eax],edx
c0024d3e:	90                   	nop
c0024d3f:	83 c4 0c             	add    esp,0xc
c0024d42:	c3                   	ret    
c0024d43:	90                   	nop

c0024d44 <SATA::access(unsigned long long, int, void*, bool)>:
c0024d44:	55                   	push   ebp
c0024d45:	57                   	push   edi
c0024d46:	56                   	push   esi
c0024d47:	53                   	push   ebx
c0024d48:	83 ec 2c             	sub    esp,0x2c
c0024d4b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024d4f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024d53:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d57:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024d5b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024d5f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024d64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d68:	7e 10                	jle    c0024d7a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024d6a:	83 ec 0c             	sub    esp,0xc
c0024d6d:	68 f8 d0 02 c0       	push   0xc002d0f8
c0024d72:	e8 fc 58 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0024d77:	83 c4 10             	add    esp,0x10
c0024d7a:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024d80:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d90:	89 f0                	mov    eax,esi
c0024d92:	c1 e0 07             	shl    eax,0x7
c0024d95:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d99:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024da3:	53                   	push   ebx
c0024da4:	8d 46 02             	lea    eax,[esi+0x2]
c0024da7:	53                   	push   ebx
c0024da8:	c1 e0 07             	shl    eax,0x7
c0024dab:	bb 01 00 00 00       	mov    ebx,0x1
c0024db0:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024db4:	50                   	push   eax
c0024db5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024dbb:	e8 aa ef ff ff       	call   c0023d6a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024dc0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024dc4:	83 c4 10             	add    esp,0x10
c0024dc7:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024dcc:	0f 84 ce 01 00 00    	je     c0024fa0 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024dd2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024dd6:	c1 e0 09             	shl    eax,0x9
c0024dd9:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024dde:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024de2:	74 17                	je     c0024dfb <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024de4:	51                   	push   ecx
c0024de5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024de9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024ded:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024df3:	e8 4c b9 fd ff       	call   c0000744 <memcpy>
c0024df8:	83 c4 10             	add    esp,0x10
c0024dfb:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e01:	8d 46 02             	lea    eax,[esi+0x2]
c0024e04:	c1 e0 07             	shl    eax,0x7
c0024e07:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024e0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e0d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e13:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e19:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024e1d:	c1 e1 05             	shl    ecx,0x5
c0024e20:	01 c8                	add    eax,ecx
c0024e22:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024e26:	8a 18                	mov    bl,BYTE PTR [eax]
c0024e28:	83 e1 01             	and    ecx,0x1
c0024e2b:	83 e3 bf             	and    ebx,0xffffffbf
c0024e2e:	c1 e1 06             	shl    ecx,0x6
c0024e31:	09 d9                	or     ecx,ebx
c0024e33:	88 08                	mov    BYTE PTR [eax],cl
c0024e35:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e37:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024e3d:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024e43:	89 08                	mov    DWORD PTR [eax],ecx
c0024e45:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e4b:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e51:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e57:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e5a:	52                   	push   edx
c0024e5b:	68 90 00 00 00       	push   0x90
c0024e60:	6a 00                	push   0x0
c0024e62:	53                   	push   ebx
c0024e63:	e8 10 b9 fd ff       	call   c0000778 <memset>
c0024e68:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024e6e:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024e72:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e78:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e80:	83 c4 10             	add    esp,0x10
c0024e83:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024e86:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024e8c:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024e92:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e97:	09 c8                	or     eax,ecx
c0024e99:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e9f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024ea2:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024ea9:	66 25 00 7f          	and    ax,0x7f00
c0024ead:	66 0d 27 80          	or     ax,0x8027
c0024eb1:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024eb6:	66 89 03             	mov    WORD PTR [ebx],ax
c0024eb9:	19 c0                	sbb    eax,eax
c0024ebb:	83 e0 f0             	and    eax,0xfffffff0
c0024ebe:	83 c0 35             	add    eax,0x35
c0024ec1:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024ec4:	89 f8                	mov    eax,edi
c0024ec6:	c1 e8 10             	shr    eax,0x10
c0024ec9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024ecc:	89 f8                	mov    eax,edi
c0024ece:	c1 e8 18             	shr    eax,0x18
c0024ed1:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024ed4:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024ed8:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024edb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024edf:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024ee2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ee6:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024eea:	89 f3                	mov    ebx,esi
c0024eec:	31 c0                	xor    eax,eax
c0024eee:	c1 e3 07             	shl    ebx,0x7
c0024ef1:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024ef5:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024efb:	80 e1 88             	and    cl,0x88
c0024efe:	74 0a                	je     c0024f0a <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024f00:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f05:	74 0a                	je     c0024f11 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024f07:	40                   	inc    eax
c0024f08:	eb eb                	jmp    c0024ef5 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024f0a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f0f:	75 0a                	jne    c0024f1b <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024f11:	83 ec 0c             	sub    esp,0xc
c0024f14:	68 31 d1 02 c0       	push   0xc002d131
c0024f19:	eb 56                	jmp    c0024f71 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024f1b:	b8 01 00 00 00       	mov    eax,0x1
c0024f20:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024f24:	c1 e6 07             	shl    esi,0x7
c0024f27:	d3 e0                	shl    eax,cl
c0024f29:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024f2d:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024f33:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024f39:	85 c8                	test   eax,ecx
c0024f3b:	74 20                	je     c0024f5d <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024f3d:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024f43:	0f ba e1 1e          	bt     ecx,0x1e
c0024f47:	73 ea                	jae    c0024f33 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024f49:	83 ec 0c             	sub    esp,0xc
c0024f4c:	31 db                	xor    ebx,ebx
c0024f4e:	68 3f d1 02 c0       	push   0xc002d13f
c0024f53:	e8 1b 57 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0024f58:	83 c4 10             	add    esp,0x10
c0024f5b:	eb 43                	jmp    c0024fa0 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f5d:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024f63:	0f ba e0 1e          	bt     eax,0x1e
c0024f67:	73 17                	jae    c0024f80 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024f69:	83 ec 0c             	sub    esp,0xc
c0024f6c:	68 3f d1 02 c0       	push   0xc002d13f
c0024f71:	e8 fd 56 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0024f76:	bb 01 00 00 00       	mov    ebx,0x1
c0024f7b:	83 c4 10             	add    esp,0x10
c0024f7e:	eb 20                	jmp    c0024fa0 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f80:	31 db                	xor    ebx,ebx
c0024f82:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024f87:	75 17                	jne    c0024fa0 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f89:	50                   	push   eax
c0024f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f8e:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f94:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024f98:	e8 a7 b7 fd ff       	call   c0000744 <memcpy>
c0024f9d:	83 c4 10             	add    esp,0x10
c0024fa0:	83 c4 2c             	add    esp,0x2c
c0024fa3:	89 d8                	mov    eax,ebx
c0024fa5:	5b                   	pop    ebx
c0024fa6:	5e                   	pop    esi
c0024fa7:	5f                   	pop    edi
c0024fa8:	5d                   	pop    ebp
c0024fa9:	c3                   	ret    

c0024faa <SATA::read(unsigned long long, int, void*)>:
c0024faa:	57                   	push   edi
c0024fab:	b8 04 00 00 00       	mov    eax,0x4
c0024fb0:	56                   	push   esi
c0024fb1:	53                   	push   ebx
c0024fb2:	83 ec 10             	sub    esp,0x10
c0024fb5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fb9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024fbd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024fc0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024fc4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024fc8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024fce:	77 3b                	ja     c002500b <SATA::read(unsigned long long, int, void*)+0x61>
c0024fd0:	b8 06 00 00 00       	mov    eax,0x6
c0024fd5:	85 d2                	test   edx,edx
c0024fd7:	74 32                	je     c002500b <SATA::read(unsigned long long, int, void*)+0x61>
c0024fd9:	50                   	push   eax
c0024fda:	50                   	push   eax
c0024fdb:	6a 00                	push   0x0
c0024fdd:	52                   	push   edx
c0024fde:	53                   	push   ebx
c0024fdf:	57                   	push   edi
c0024fe0:	56                   	push   esi
c0024fe1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024fe5:	e8 5a fd ff ff       	call   c0024d44 <SATA::access(unsigned long long, int, void*, bool)>
c0024fea:	83 c4 20             	add    esp,0x20
c0024fed:	85 c0                	test   eax,eax
c0024fef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024ff3:	75 11                	jne    c0025006 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024ff5:	01 1d e8 29 03 c0    	add    DWORD PTR ds:0xc00329e8,ebx
c0024ffb:	e8 56 ba fe ff       	call   c0010a56 <VgaText::updateDiskUsage()>
c0025000:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025004:	eb 05                	jmp    c002500b <SATA::read(unsigned long long, int, void*)+0x61>
c0025006:	b8 01 00 00 00       	mov    eax,0x1
c002500b:	83 c4 10             	add    esp,0x10
c002500e:	5b                   	pop    ebx
c002500f:	5e                   	pop    esi
c0025010:	5f                   	pop    edi
c0025011:	c3                   	ret    

c0025012 <SATA::write(unsigned long long, int, void*)>:
c0025012:	55                   	push   ebp
c0025013:	b8 04 00 00 00       	mov    eax,0x4
c0025018:	57                   	push   edi
c0025019:	56                   	push   esi
c002501a:	53                   	push   ebx
c002501b:	83 ec 1c             	sub    esp,0x1c
c002501e:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025022:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025026:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025029:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002502d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025031:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025037:	77 56                	ja     c002508f <SATA::write(unsigned long long, int, void*)+0x7d>
c0025039:	b8 06 00 00 00       	mov    eax,0x6
c002503e:	85 ff                	test   edi,edi
c0025040:	74 4d                	je     c002508f <SATA::write(unsigned long long, int, void*)+0x7d>
c0025042:	89 ee                	mov    esi,ebp
c0025044:	c1 e6 09             	shl    esi,0x9
c0025047:	01 fe                	add    esi,edi
c0025049:	89 c8                	mov    eax,ecx
c002504b:	89 da                	mov    edx,ebx
c002504d:	83 c0 01             	add    eax,0x1
c0025050:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025054:	83 d2 00             	adc    edx,0x0
c0025057:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002505b:	50                   	push   eax
c002505c:	50                   	push   eax
c002505d:	6a 01                	push   0x1
c002505f:	57                   	push   edi
c0025060:	81 c7 00 02 00 00    	add    edi,0x200
c0025066:	6a 01                	push   0x1
c0025068:	53                   	push   ebx
c0025069:	51                   	push   ecx
c002506a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002506e:	e8 d1 fc ff ff       	call   c0024d44 <SATA::access(unsigned long long, int, void*, bool)>
c0025073:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025077:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002507b:	83 c4 20             	add    esp,0x20
c002507e:	39 f7                	cmp    edi,esi
c0025080:	75 c7                	jne    c0025049 <SATA::write(unsigned long long, int, void*)+0x37>
c0025082:	01 2d e4 29 03 c0    	add    DWORD PTR ds:0xc00329e4,ebp
c0025088:	e8 c9 b9 fe ff       	call   c0010a56 <VgaText::updateDiskUsage()>
c002508d:	31 c0                	xor    eax,eax
c002508f:	83 c4 1c             	add    esp,0x1c
c0025092:	5b                   	pop    ebx
c0025093:	5e                   	pop    esi
c0025094:	5f                   	pop    edi
c0025095:	5d                   	pop    ebp
c0025096:	c3                   	ret    
c0025097:	90                   	nop

c0025098 <SATAPI::write(unsigned long long, int, void*)>:
c0025098:	b8 03 00 00 00       	mov    eax,0x3
c002509d:	c3                   	ret    

c002509e <SATAPI::close(int, int, void*)>:
c002509e:	83 ec 0c             	sub    esp,0xc
c00250a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250a5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00250ab:	85 c0                	test   eax,eax
c00250ad:	74 0c                	je     c00250bb <SATAPI::close(int, int, void*)+0x1d>
c00250af:	83 ec 0c             	sub    esp,0xc
c00250b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00250b4:	50                   	push   eax
c00250b5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00250b8:	83 c4 10             	add    esp,0x10
c00250bb:	31 c0                	xor    eax,eax
c00250bd:	83 c4 0c             	add    esp,0xc
c00250c0:	c3                   	ret    
c00250c1:	90                   	nop

c00250c2 <SATAPI::SATAPI()>:
c00250c2:	83 ec 0c             	sub    esp,0xc
c00250c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c9:	83 ec 04             	sub    esp,0x4
c00250cc:	68 00 08 00 00       	push   0x800
c00250d1:	68 88 d1 02 c0       	push   0xc002d188
c00250d6:	50                   	push   eax
c00250d7:	e8 30 f7 fe ff       	call   c001480c <PhysicalDisk::PhysicalDisk(char const*, int)>
c00250dc:	83 c4 10             	add    esp,0x10
c00250df:	ba 34 d2 02 c0       	mov    edx,0xc002d234
c00250e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250e8:	89 10                	mov    DWORD PTR [eax],edx
c00250ea:	90                   	nop
c00250eb:	83 c4 0c             	add    esp,0xc
c00250ee:	c3                   	ret    
c00250ef:	90                   	nop

c00250f0 <SATAPI::diskRemoved()>:
c00250f0:	83 ec 18             	sub    esp,0x18
c00250f3:	68 94 d1 02 c0       	push   0xc002d194
c00250f8:	e8 c4 de fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00250fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025101:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025108:	83 c4 1c             	add    esp,0x1c
c002510b:	c3                   	ret    

c002510c <SATAPI::diskInserted()>:
c002510c:	53                   	push   ebx
c002510d:	83 ec 14             	sub    esp,0x14
c0025110:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025114:	68 ab d1 02 c0       	push   0xc002d1ab
c0025119:	e8 a3 de fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c002511e:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025125:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025128:	e8 47 f7 fe ff       	call   c0014874 <PhysicalDisk::startCache()>
c002512d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025131:	83 c4 18             	add    esp,0x18
c0025134:	5b                   	pop    ebx
c0025135:	e9 c0 18 ff ff       	jmp    c00169fa <createPartitionsForDisk(PhysicalDisk*)>

c002513a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002513a:	55                   	push   ebp
c002513b:	57                   	push   edi
c002513c:	56                   	push   esi
c002513d:	53                   	push   ebx
c002513e:	83 ec 24             	sub    esp,0x24
c0025141:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025145:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025149:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002514f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025153:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025157:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002515d:	8d 5f 02             	lea    ebx,[edi+0x2]
c0025160:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025166:	c1 e3 07             	shl    ebx,0x7
c0025169:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002516d:	89 f8                	mov    eax,edi
c002516f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0025173:	c1 e0 07             	shl    eax,0x7
c0025176:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002517a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002517e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025188:	53                   	push   ebx
c0025189:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002518f:	e8 d6 eb ff ff       	call   c0023d6a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025194:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025198:	83 c4 10             	add    esp,0x10
c002519b:	b8 01 00 00 00       	mov    eax,0x1
c00251a0:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00251a5:	0f 84 8a 01 00 00    	je     c0025335 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00251ab:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00251b3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00251b9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00251bf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00251c3:	c1 e1 05             	shl    ecx,0x5
c00251c6:	01 c8                	add    eax,ecx
c00251c8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00251ca:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00251d0:	81 c9 25 00 01 00    	or     ecx,0x10025
c00251d6:	89 08                	mov    DWORD PTR [eax],ecx
c00251d8:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251de:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00251e4:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00251ea:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00251ed:	52                   	push   edx
c00251ee:	68 90 00 00 00       	push   0x90
c00251f3:	6a 00                	push   0x0
c00251f5:	53                   	push   ebx
c00251f6:	e8 7d b5 fd ff       	call   c0000778 <memset>
c00251fb:	83 c4 0c             	add    esp,0xc
c00251fe:	8d 43 40             	lea    eax,[ebx+0x40]
c0025201:	6a 0c                	push   0xc
c0025203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025207:	50                   	push   eax
c0025208:	e8 37 b5 fd ff       	call   c0000744 <memcpy>
c002520d:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025213:	89 ea                	mov    edx,ebp
c0025215:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002521b:	c1 ea 18             	shr    edx,0x18
c002521e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025222:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025225:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025228:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002522c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025232:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025238:	25 00 00 c0 ff       	and    eax,0xffc00000
c002523d:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025241:	09 c8                	or     eax,ecx
c0025243:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025247:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002524d:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025250:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025257:	66 25 00 7f          	and    ax,0x7f00
c002525b:	66 0d 27 80          	or     ax,0x8027
c002525f:	66 89 03             	mov    WORD PTR [ebx],ax
c0025262:	89 e8                	mov    eax,ebp
c0025264:	c1 e8 10             	shr    eax,0x10
c0025267:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002526a:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002526e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025271:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025275:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025278:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002527c:	83 c4 10             	add    esp,0x10
c002527f:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025283:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025287:	31 c0                	xor    eax,eax
c0025289:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002528f:	80 e1 88             	and    cl,0x88
c0025292:	74 0a                	je     c002529e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025294:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025299:	74 0a                	je     c00252a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002529b:	40                   	inc    eax
c002529c:	eb eb                	jmp    c0025289 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002529e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252a3:	75 0f                	jne    c00252b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00252a5:	83 ec 0c             	sub    esp,0xc
c00252a8:	68 31 d1 02 c0       	push   0xc002d131
c00252ad:	e8 c1 53 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c00252b2:	eb 3a                	jmp    c00252ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00252b4:	b8 01 00 00 00       	mov    eax,0x1
c00252b9:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00252bd:	c1 e7 07             	shl    edi,0x7
c00252c0:	d3 e0                	shl    eax,cl
c00252c2:	03 3c 24             	add    edi,DWORD PTR [esp]
c00252c5:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00252cb:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00252d1:	85 d0                	test   eax,edx
c00252d3:	74 23                	je     c00252f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00252d5:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00252db:	0f ba e2 1e          	bt     edx,0x1e
c00252df:	73 ea                	jae    c00252cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00252e1:	83 ec 0c             	sub    esp,0xc
c00252e4:	68 c3 d1 02 c0       	push   0xc002d1c3
c00252e9:	e8 d3 dc fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00252ee:	83 c4 10             	add    esp,0x10
c00252f1:	b8 01 00 00 00       	mov    eax,0x1
c00252f6:	eb 3d                	jmp    c0025335 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00252f8:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00252fe:	0f ba e0 1e          	bt     eax,0x1e
c0025302:	73 0a                	jae    c002530e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025304:	83 ec 0c             	sub    esp,0xc
c0025307:	68 d6 d1 02 c0       	push   0xc002d1d6
c002530c:	eb db                	jmp    c00252e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c002530e:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025313:	74 1e                	je     c0025333 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025315:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c002531a:	74 17                	je     c0025333 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002531c:	50                   	push   eax
c002531d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025321:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025327:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002532b:	e8 14 b4 fd ff       	call   c0000744 <memcpy>
c0025330:	83 c4 10             	add    esp,0x10
c0025333:	31 c0                	xor    eax,eax
c0025335:	83 c4 1c             	add    esp,0x1c
c0025338:	5b                   	pop    ebx
c0025339:	5e                   	pop    esi
c002533a:	5f                   	pop    edi
c002533b:	5d                   	pop    ebp
c002533c:	c3                   	ret    
c002533d:	90                   	nop

c002533e <SATAPI::eject()>:
c002533e:	57                   	push   edi
c002533f:	b9 03 00 00 00       	mov    ecx,0x3
c0025344:	53                   	push   ebx
c0025345:	83 ec 14             	sub    esp,0x14
c0025348:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002534c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025350:	fc                   	cld    
c0025351:	31 c0                	xor    eax,eax
c0025353:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025355:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002535a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002535f:	50                   	push   eax
c0025360:	6a 00                	push   0x0
c0025362:	6a 00                	push   0x0
c0025364:	6a 00                	push   0x0
c0025366:	6a 00                	push   0x0
c0025368:	6a 02                	push   0x2
c002536a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002536e:	50                   	push   eax
c002536f:	53                   	push   ebx
c0025370:	e8 c5 fd ff ff       	call   c002513a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025375:	83 c4 14             	add    esp,0x14
c0025378:	53                   	push   ebx
c0025379:	e8 72 fd ff ff       	call   c00250f0 <SATAPI::diskRemoved()>
c002537e:	83 c4 24             	add    esp,0x24
c0025381:	31 c0                	xor    eax,eax
c0025383:	5b                   	pop    ebx
c0025384:	5f                   	pop    edi
c0025385:	c3                   	ret    

c0025386 <SATAPI::detectMedia()>:
c0025386:	56                   	push   esi
c0025387:	53                   	push   ebx
c0025388:	83 ec 28             	sub    esp,0x28
c002538b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002538f:	6a 0c                	push   0xc
c0025391:	6a 00                	push   0x0
c0025393:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025397:	56                   	push   esi
c0025398:	e8 db b3 fd ff       	call   c0000778 <memset>
c002539d:	83 c4 0c             	add    esp,0xc
c00253a0:	6a 00                	push   0x0
c00253a2:	6a 00                	push   0x0
c00253a4:	6a 00                	push   0x0
c00253a6:	6a 00                	push   0x0
c00253a8:	6a 00                	push   0x0
c00253aa:	56                   	push   esi
c00253ab:	53                   	push   ebx
c00253ac:	e8 89 fd ff ff       	call   c002513a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253b1:	83 c4 1c             	add    esp,0x1c
c00253b4:	6a 0c                	push   0xc
c00253b6:	6a 00                	push   0x0
c00253b8:	56                   	push   esi
c00253b9:	e8 ba b3 fd ff       	call   c0000778 <memset>
c00253be:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00253c3:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00253c8:	83 c4 0c             	add    esp,0xc
c00253cb:	6a 01                	push   0x1
c00253cd:	8d 44 24 16          	lea    eax,[esp+0x16]
c00253d1:	50                   	push   eax
c00253d2:	6a 00                	push   0x0
c00253d4:	6a 00                	push   0x0
c00253d6:	6a 12                	push   0x12
c00253d8:	56                   	push   esi
c00253d9:	53                   	push   ebx
c00253da:	e8 5b fd ff ff       	call   c002513a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253df:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00253e3:	83 c4 20             	add    esp,0x20
c00253e6:	83 e0 7f             	and    eax,0x7f
c00253e9:	3c 70                	cmp    al,0x70
c00253eb:	74 15                	je     c0025402 <SATAPI::detectMedia()+0x7c>
c00253ed:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253f4:	75 0c                	jne    c0025402 <SATAPI::detectMedia()+0x7c>
c00253f6:	83 ec 0c             	sub    esp,0xc
c00253f9:	53                   	push   ebx
c00253fa:	e8 0d fd ff ff       	call   c002510c <SATAPI::diskInserted()>
c00253ff:	83 c4 10             	add    esp,0x10
c0025402:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025406:	83 e0 0f             	and    eax,0xf
c0025409:	3c 02                	cmp    al,0x2
c002540b:	75 1b                	jne    c0025428 <SATAPI::detectMedia()+0xa2>
c002540d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025412:	75 2d                	jne    c0025441 <SATAPI::detectMedia()+0xbb>
c0025414:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002541b:	74 24                	je     c0025441 <SATAPI::detectMedia()+0xbb>
c002541d:	83 ec 0c             	sub    esp,0xc
c0025420:	53                   	push   ebx
c0025421:	e8 ca fc ff ff       	call   c00250f0 <SATAPI::diskRemoved()>
c0025426:	eb 16                	jmp    c002543e <SATAPI::detectMedia()+0xb8>
c0025428:	84 c0                	test   al,al
c002542a:	75 15                	jne    c0025441 <SATAPI::detectMedia()+0xbb>
c002542c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025433:	75 0c                	jne    c0025441 <SATAPI::detectMedia()+0xbb>
c0025435:	83 ec 0c             	sub    esp,0xc
c0025438:	53                   	push   ebx
c0025439:	e8 ce fc ff ff       	call   c002510c <SATAPI::diskInserted()>
c002543e:	83 c4 10             	add    esp,0x10
c0025441:	83 c4 24             	add    esp,0x24
c0025444:	5b                   	pop    ebx
c0025445:	5e                   	pop    esi
c0025446:	c3                   	ret    
c0025447:	90                   	nop

c0025448 <SATAPI::open(int, int, void*)>:
c0025448:	56                   	push   esi
c0025449:	53                   	push   ebx
c002544a:	50                   	push   eax
c002544b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002544f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025453:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002545d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025463:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002546d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025471:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002547b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025481:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025488:	e8 f7 aa fe ff       	call   c000ff84 <Phys::allocatePage()>
c002548d:	89 c6                	mov    esi,eax
c002548f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025495:	81 c6 00 10 00 00    	add    esi,0x1000
c002549b:	e8 e4 aa fe ff       	call   c000ff84 <Phys::allocatePage()>
c00254a0:	39 c6                	cmp    esi,eax
c00254a2:	74 10                	je     c00254b4 <SATAPI::open(int, int, void*)+0x6c>
c00254a4:	83 ec 0c             	sub    esp,0xc
c00254a7:	68 eb d1 02 c0       	push   0xc002d1eb
c00254ac:	e8 c2 51 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c00254b1:	83 c4 10             	add    esp,0x10
c00254b4:	83 ec 0c             	sub    esp,0xc
c00254b7:	6a 02                	push   0x2
c00254b9:	e8 43 c7 fe ff       	call   c0011c01 <Virt::allocateKernelVirtualPages(int)>
c00254be:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00254c4:	e8 d3 c9 fe ff       	call   c0011e9c <Virt::getAKernelVAS()>
c00254c9:	6a 03                	push   0x3
c00254cb:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00254d1:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00254d7:	50                   	push   eax
c00254d8:	e8 fb ce fe ff       	call   c00123d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00254dd:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00254e4:	83 c4 14             	add    esp,0x14
c00254e7:	53                   	push   ebx
c00254e8:	e8 99 fe ff ff       	call   c0025386 <SATAPI::detectMedia()>
c00254ed:	83 c4 14             	add    esp,0x14
c00254f0:	31 c0                	xor    eax,eax
c00254f2:	5b                   	pop    ebx
c00254f3:	5e                   	pop    esi
c00254f4:	c3                   	ret    
c00254f5:	90                   	nop

c00254f6 <SATAPI::read(unsigned long long, int, void*)>:
c00254f6:	55                   	push   ebp
c00254f7:	57                   	push   edi
c00254f8:	56                   	push   esi
c00254f9:	53                   	push   ebx
c00254fa:	83 ec 1c             	sub    esp,0x1c
c00254fd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025501:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025505:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025509:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025510:	74 19                	je     c002552b <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025512:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025517:	7e 2e                	jle    c0025547 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025519:	83 ec 0c             	sub    esp,0xc
c002551c:	68 01 d2 02 c0       	push   0xc002d201
c0025521:	e8 4d 51 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0025526:	83 c4 10             	add    esp,0x10
c0025529:	eb 1c                	jmp    c0025547 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002552b:	83 ec 0c             	sub    esp,0xc
c002552e:	55                   	push   ebp
c002552f:	e8 52 fe ff ff       	call   c0025386 <SATAPI::detectMedia()>
c0025534:	83 c4 10             	add    esp,0x10
c0025537:	b8 02 00 00 00       	mov    eax,0x2
c002553c:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025543:	75 cd                	jne    c0025512 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025545:	eb 49                	jmp    c0025590 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025547:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002554b:	b9 03 00 00 00       	mov    ecx,0x3
c0025550:	fc                   	cld    
c0025551:	31 c0                	xor    eax,eax
c0025553:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025555:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002555a:	89 d8                	mov    eax,ebx
c002555c:	86 e0                	xchg   al,ah
c002555e:	c1 c0 10             	rol    eax,0x10
c0025561:	86 e0                	xchg   al,ah
c0025563:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025567:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002556b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002556f:	50                   	push   eax
c0025570:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025574:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025578:	56                   	push   esi
c0025579:	53                   	push   ebx
c002557a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002557e:	c1 e0 0b             	shl    eax,0xb
c0025581:	50                   	push   eax
c0025582:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025586:	50                   	push   eax
c0025587:	55                   	push   ebp
c0025588:	e8 ad fb ff ff       	call   c002513a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002558d:	83 c4 20             	add    esp,0x20
c0025590:	83 c4 1c             	add    esp,0x1c
c0025593:	5b                   	pop    ebx
c0025594:	5e                   	pop    esi
c0025595:	5f                   	pop    edi
c0025596:	5d                   	pop    ebp
c0025597:	c3                   	ret    

c0025598 <AVX::open(int, int, void*)>:
c0025598:	83 ec 0c             	sub    esp,0xc
c002559b:	e8 48 11 00 00       	call   c00266e8 <avxInit>
c00255a0:	b8 00 00 00 00       	mov    eax,0x0
c00255a5:	83 c4 0c             	add    esp,0xc
c00255a8:	c3                   	ret    
c00255a9:	90                   	nop

c00255aa <AVX::close(int, int, void*)>:
c00255aa:	83 ec 0c             	sub    esp,0xc
c00255ad:	e8 37 11 00 00       	call   c00266e9 <avxClose>
c00255b2:	b8 00 00 00 00       	mov    eax,0x0
c00255b7:	83 c4 0c             	add    esp,0xc
c00255ba:	c3                   	ret    
c00255bb:	90                   	nop

c00255bc <AVX::available()>:
c00255bc:	83 ec 0c             	sub    esp,0xc
c00255bf:	e8 1c 11 00 00       	call   c00266e0 <avxDetect>
c00255c4:	85 c0                	test   eax,eax
c00255c6:	0f 95 c0             	setne  al
c00255c9:	83 c4 0c             	add    esp,0xc
c00255cc:	c3                   	ret    
c00255cd:	90                   	nop

c00255ce <AVX::save(void*)>:
c00255ce:	83 ec 0c             	sub    esp,0xc
c00255d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255d5:	83 ec 0c             	sub    esp,0xc
c00255d8:	50                   	push   eax
c00255d9:	e8 08 11 00 00       	call   c00266e6 <avxSave>
c00255de:	83 c4 10             	add    esp,0x10
c00255e1:	90                   	nop
c00255e2:	83 c4 0c             	add    esp,0xc
c00255e5:	c3                   	ret    

c00255e6 <AVX::load(void*)>:
c00255e6:	83 ec 0c             	sub    esp,0xc
c00255e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255ed:	83 ec 0c             	sub    esp,0xc
c00255f0:	50                   	push   eax
c00255f1:	e8 f1 10 00 00       	call   c00266e7 <avxLoad>
c00255f6:	83 c4 10             	add    esp,0x10
c00255f9:	90                   	nop
c00255fa:	83 c4 0c             	add    esp,0xc
c00255fd:	c3                   	ret    

c00255fe <AVX::AVX()>:
c00255fe:	83 ec 0c             	sub    esp,0xc
c0025601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025605:	83 ec 08             	sub    esp,0x8
c0025608:	68 64 d2 02 c0       	push   0xc002d264
c002560d:	50                   	push   eax
c002560e:	e8 d7 f2 fe ff       	call   c00148ea <FPU::FPU(char const*)>
c0025613:	83 c4 10             	add    esp,0x10
c0025616:	ba 74 d2 02 c0       	mov    edx,0xc002d274
c002561b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002561f:	89 10                	mov    DWORD PTR [eax],edx
c0025621:	90                   	nop
c0025622:	83 c4 0c             	add    esp,0xc
c0025625:	c3                   	ret    

c0025626 <MMX::available()>:
c0025626:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c002562b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025631:	83 e0 20             	and    eax,0x20
c0025634:	84 c0                	test   al,al
c0025636:	0f 95 c0             	setne  al
c0025639:	c3                   	ret    

c002563a <MMX::open(int, int, void*)>:
c002563a:	83 ec 0c             	sub    esp,0xc
c002563d:	e8 2a 11 00 00       	call   c002676c <x87Init>
c0025642:	b8 00 00 00 00       	mov    eax,0x0
c0025647:	83 c4 0c             	add    esp,0xc
c002564a:	c3                   	ret    
c002564b:	90                   	nop

c002564c <MMX::close(int, int, void*)>:
c002564c:	83 ec 0c             	sub    esp,0xc
c002564f:	e8 32 11 00 00       	call   c0026786 <x87Close>
c0025654:	b8 00 00 00 00       	mov    eax,0x0
c0025659:	83 c4 0c             	add    esp,0xc
c002565c:	c3                   	ret    
c002565d:	90                   	nop

c002565e <MMX::save(void*)>:
c002565e:	83 ec 0c             	sub    esp,0xc
c0025661:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025665:	83 ec 0c             	sub    esp,0xc
c0025668:	50                   	push   eax
c0025669:	e8 f3 10 00 00       	call   c0026761 <x87Save>
c002566e:	83 c4 10             	add    esp,0x10
c0025671:	90                   	nop
c0025672:	83 c4 0c             	add    esp,0xc
c0025675:	c3                   	ret    

c0025676 <MMX::load(void*)>:
c0025676:	83 ec 0c             	sub    esp,0xc
c0025679:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002567d:	83 ec 0c             	sub    esp,0xc
c0025680:	50                   	push   eax
c0025681:	e8 e1 10 00 00       	call   c0026767 <x87Load>
c0025686:	83 c4 10             	add    esp,0x10
c0025689:	90                   	nop
c002568a:	83 c4 0c             	add    esp,0xc
c002568d:	c3                   	ret    

c002568e <MMX::MMX()>:
c002568e:	83 ec 0c             	sub    esp,0xc
c0025691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025695:	83 ec 08             	sub    esp,0x8
c0025698:	68 a4 d2 02 c0       	push   0xc002d2a4
c002569d:	50                   	push   eax
c002569e:	e8 47 f2 fe ff       	call   c00148ea <FPU::FPU(char const*)>
c00256a3:	83 c4 10             	add    esp,0x10
c00256a6:	ba b4 d2 02 c0       	mov    edx,0xc002d2b4
c00256ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256af:	89 10                	mov    DWORD PTR [eax],edx
c00256b1:	90                   	nop
c00256b2:	83 c4 0c             	add    esp,0xc
c00256b5:	c3                   	ret    

c00256b6 <SSE::open(int, int, void*)>:
c00256b6:	83 ec 0c             	sub    esp,0xc
c00256b9:	e8 66 10 00 00       	call   c0026724 <sseInit>
c00256be:	b8 00 00 00 00       	mov    eax,0x0
c00256c3:	83 c4 0c             	add    esp,0xc
c00256c6:	c3                   	ret    
c00256c7:	90                   	nop

c00256c8 <SSE::close(int, int, void*)>:
c00256c8:	83 ec 0c             	sub    esp,0xc
c00256cb:	e8 64 10 00 00       	call   c0026734 <sseClose>
c00256d0:	b8 00 00 00 00       	mov    eax,0x0
c00256d5:	83 c4 0c             	add    esp,0xc
c00256d8:	c3                   	ret    
c00256d9:	90                   	nop

c00256da <SSE::available()>:
c00256da:	83 ec 1c             	sub    esp,0x1c
c00256dd:	e8 1e 10 00 00       	call   c0026700 <absolutelyNoChanceInHell>
c00256e2:	85 c0                	test   eax,eax
c00256e4:	0f 95 c0             	setne  al
c00256e7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00256eb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00256ef:	83 c4 1c             	add    esp,0x1c
c00256f2:	c3                   	ret    
c00256f3:	90                   	nop

c00256f4 <SSE::save(void*)>:
c00256f4:	83 ec 0c             	sub    esp,0xc
c00256f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256fb:	83 ec 0c             	sub    esp,0xc
c00256fe:	50                   	push   eax
c00256ff:	e8 14 10 00 00       	call   c0026718 <sseSave>
c0025704:	83 c4 10             	add    esp,0x10
c0025707:	90                   	nop
c0025708:	83 c4 0c             	add    esp,0xc
c002570b:	c3                   	ret    

c002570c <SSE::load(void*)>:
c002570c:	83 ec 0c             	sub    esp,0xc
c002570f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025713:	83 ec 0c             	sub    esp,0xc
c0025716:	50                   	push   eax
c0025717:	e8 02 10 00 00       	call   c002671e <sseLoad>
c002571c:	83 c4 10             	add    esp,0x10
c002571f:	90                   	nop
c0025720:	83 c4 0c             	add    esp,0xc
c0025723:	c3                   	ret    

c0025724 <SSE::SSE()>:
c0025724:	83 ec 0c             	sub    esp,0xc
c0025727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002572b:	83 ec 08             	sub    esp,0x8
c002572e:	68 e4 d2 02 c0       	push   0xc002d2e4
c0025733:	50                   	push   eax
c0025734:	e8 b1 f1 fe ff       	call   c00148ea <FPU::FPU(char const*)>
c0025739:	83 c4 10             	add    esp,0x10
c002573c:	ba f4 d2 02 c0       	mov    edx,0xc002d2f4
c0025741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025745:	89 10                	mov    DWORD PTR [eax],edx
c0025747:	90                   	nop
c0025748:	83 c4 0c             	add    esp,0xc
c002574b:	c3                   	ret    

c002574c <x87::open(int, int, void*)>:
c002574c:	83 ec 0c             	sub    esp,0xc
c002574f:	e8 18 10 00 00       	call   c002676c <x87Init>
c0025754:	b8 00 00 00 00       	mov    eax,0x0
c0025759:	83 c4 0c             	add    esp,0xc
c002575c:	c3                   	ret    
c002575d:	90                   	nop

c002575e <x87::close(int, int, void*)>:
c002575e:	83 ec 0c             	sub    esp,0xc
c0025761:	e8 20 10 00 00       	call   c0026786 <x87Close>
c0025766:	b8 00 00 00 00       	mov    eax,0x0
c002576b:	83 c4 0c             	add    esp,0xc
c002576e:	c3                   	ret    
c002576f:	90                   	nop

c0025770 <x87::available()>:
c0025770:	83 ec 0c             	sub    esp,0xc
c0025773:	e8 ce 0f 00 00       	call   c0026746 <x87Detect>
c0025778:	85 c0                	test   eax,eax
c002577a:	0f 95 c0             	setne  al
c002577d:	83 c4 0c             	add    esp,0xc
c0025780:	c3                   	ret    
c0025781:	90                   	nop

c0025782 <x87::save(void*)>:
c0025782:	83 ec 0c             	sub    esp,0xc
c0025785:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025789:	83 ec 0c             	sub    esp,0xc
c002578c:	50                   	push   eax
c002578d:	e8 cf 0f 00 00       	call   c0026761 <x87Save>
c0025792:	83 c4 10             	add    esp,0x10
c0025795:	90                   	nop
c0025796:	83 c4 0c             	add    esp,0xc
c0025799:	c3                   	ret    

c002579a <x87::load(void*)>:
c002579a:	83 ec 0c             	sub    esp,0xc
c002579d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257a1:	83 ec 0c             	sub    esp,0xc
c00257a4:	50                   	push   eax
c00257a5:	e8 bd 0f 00 00       	call   c0026767 <x87Load>
c00257aa:	83 c4 10             	add    esp,0x10
c00257ad:	90                   	nop
c00257ae:	83 c4 0c             	add    esp,0xc
c00257b1:	c3                   	ret    

c00257b2 <x87::x87()>:
c00257b2:	83 ec 0c             	sub    esp,0xc
c00257b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257b9:	83 ec 08             	sub    esp,0x8
c00257bc:	68 24 d3 02 c0       	push   0xc002d324
c00257c1:	50                   	push   eax
c00257c2:	e8 23 f1 fe ff       	call   c00148ea <FPU::FPU(char const*)>
c00257c7:	83 c4 10             	add    esp,0x10
c00257ca:	ba 34 d3 02 c0       	mov    edx,0xc002d334
c00257cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257d3:	89 10                	mov    DWORD PTR [eax],edx
c00257d5:	90                   	nop
c00257d6:	83 c4 0c             	add    esp,0xc
c00257d9:	c3                   	ret    

c00257da <APIC::disable()>:
c00257da:	90                   	nop
c00257db:	c3                   	ret    

c00257dc <APIC::close(int, int, void*)>:
c00257dc:	55                   	push   ebp
c00257dd:	89 e5                	mov    ebp,esp
c00257df:	83 ec 08             	sub    esp,0x8
c00257e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00257e7:	83 c0 3c             	add    eax,0x3c
c00257ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00257ec:	83 ec 0c             	sub    esp,0xc
c00257ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257f2:	ff d0                	call   eax
c00257f4:	83 c4 10             	add    esp,0x10
c00257f7:	b8 00 00 00 00       	mov    eax,0x0
c00257fc:	c9                   	leave  
c00257fd:	c3                   	ret    

c00257fe <IOAPIC::close(int, int, void*)>:
c00257fe:	b8 00 00 00 00       	mov    eax,0x0
c0025803:	c3                   	ret    

c0025804 <APIC::io_wait()>:
c0025804:	eb 00                	jmp    c0025806 <APIC::io_wait()+0x2>
c0025806:	eb 00                	jmp    c0025808 <APIC::io_wait()+0x4>
c0025808:	90                   	nop
c0025809:	c3                   	ret    

c002580a <APIC::getBase()>:
c002580a:	55                   	push   ebp
c002580b:	89 e5                	mov    ebp,esp
c002580d:	83 ec 18             	sub    esp,0x18
c0025810:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0025815:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002581b:	83 e0 08             	and    eax,0x8
c002581e:	84 c0                	test   al,al
c0025820:	75 07                	jne    c0025829 <APIC::getBase()+0x1f>
c0025822:	b8 00 00 00 00       	mov    eax,0x0
c0025827:	eb 21                	jmp    c002584a <APIC::getBase()+0x40>
c0025829:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c002582e:	83 ec 08             	sub    esp,0x8
c0025831:	6a 1b                	push   0x1b
c0025833:	50                   	push   eax
c0025834:	e8 51 96 fe ff       	call   c000ee8a <Computer::rdmsr(unsigned int)>
c0025839:	83 c4 10             	add    esp,0x10
c002583c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002583f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025842:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025845:	25 00 f0 ff ff       	and    eax,0xfffff000
c002584a:	c9                   	leave  
c002584b:	c3                   	ret    

c002584c <APIC::eoi(unsigned char)>:
c002584c:	55                   	push   ebp
c002584d:	89 e5                	mov    ebp,esp
c002584f:	83 ec 28             	sub    esp,0x28
c0025852:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025855:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025858:	83 ec 0c             	sub    esp,0xc
c002585b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002585e:	e8 a7 ff ff ff       	call   c002580a <APIC::getBase()>
c0025863:	83 c4 10             	add    esp,0x10
c0025866:	05 b0 00 00 00       	add    eax,0xb0
c002586b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002586e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025871:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025877:	90                   	nop
c0025878:	c9                   	leave  
c0025879:	c3                   	ret    

c002587a <APIC::open(int, int, void*)>:
c002587a:	55                   	push   ebp
c002587b:	89 e5                	mov    ebp,esp
c002587d:	57                   	push   edi
c002587e:	56                   	push   esi
c002587f:	53                   	push   ebx
c0025880:	83 ec 2c             	sub    esp,0x2c
c0025883:	83 ec 0c             	sub    esp,0xc
c0025886:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025889:	e8 7c ff ff ff       	call   c002580a <APIC::getBase()>
c002588e:	83 c4 10             	add    esp,0x10
c0025891:	89 c2                	mov    edx,eax
c0025893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025896:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002589c:	0f b6 f8             	movzx  edi,al
c002589f:	89 d0                	mov    eax,edx
c00258a1:	ba 00 00 00 00       	mov    edx,0x0
c00258a6:	89 c1                	mov    ecx,eax
c00258a8:	80 e5 ff             	and    ch,0xff
c00258ab:	89 cb                	mov    ebx,ecx
c00258ad:	0f b6 f2             	movzx  esi,dl
c00258b0:	89 d8                	mov    eax,ebx
c00258b2:	89 f2                	mov    edx,esi
c00258b4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258b7:	8d 5f 08             	lea    ebx,[edi+0x8]
c00258ba:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00258be:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00258c2:	83 e0 00             	and    eax,0x0
c00258c5:	09 d0                	or     eax,edx
c00258c7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00258cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258ce:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258d4:	8d 50 01             	lea    edx,[eax+0x1]
c00258d7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258da:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00258e0:	0f b6 d0             	movzx  edx,al
c00258e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258e6:	83 c2 08             	add    edx,0x8
c00258e9:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00258ed:	0f b6 c9             	movzx  ecx,cl
c00258f0:	81 c9 00 00 01 00    	or     ecx,0x10000
c00258f6:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00258fa:	83 ec 0c             	sub    esp,0xc
c00258fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025900:	e8 05 ff ff ff       	call   c002580a <APIC::getBase()>
c0025905:	83 c4 10             	add    esp,0x10
c0025908:	05 f0 00 00 00       	add    eax,0xf0
c002590d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025910:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025913:	8b 00                	mov    eax,DWORD PTR [eax]
c0025915:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025918:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002591f:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025926:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025929:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002592c:	89 10                	mov    DWORD PTR [eax],edx
c002592e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025935:	a1 70 0f 03 c0       	mov    eax,ds:0xc0030f70
c002593a:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002593d:	7d 7c                	jge    c00259bb <APIC::open(int, int, void*)+0x141>
c002593f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025942:	8b 04 85 80 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf080]
c0025949:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002594c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002594f:	8b 04 85 80 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf080]
c0025956:	c1 e8 08             	shr    eax,0x8
c0025959:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002595d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025960:	8b 04 85 80 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf080]
c0025967:	c1 e8 18             	shr    eax,0x18
c002596a:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002596d:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025971:	75 40                	jne    c00259b3 <APIC::open(int, int, void*)+0x139>
c0025973:	83 ec 0c             	sub    esp,0xc
c0025976:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025979:	e8 8c fe ff ff       	call   c002580a <APIC::getBase()>
c002597e:	83 c4 10             	add    esp,0x10
c0025981:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025985:	75 07                	jne    c002598e <APIC::open(int, int, void*)+0x114>
c0025987:	ba 60 03 00 00       	mov    edx,0x360
c002598c:	eb 05                	jmp    c0025993 <APIC::open(int, int, void*)+0x119>
c002598e:	ba 50 03 00 00       	mov    edx,0x350
c0025993:	01 d0                	add    eax,edx
c0025995:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025998:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002599b:	8b 00                	mov    eax,DWORD PTR [eax]
c002599d:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00259a0:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00259a7:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00259ab:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259ae:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00259b1:	89 10                	mov    DWORD PTR [eax],edx
c00259b3:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00259b6:	e9 7a ff ff ff       	jmp    c0025935 <APIC::open(int, int, void*)+0xbb>
c00259bb:	b8 00 00 00 00       	mov    eax,0x0
c00259c0:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259c3:	5b                   	pop    ebx
c00259c4:	5e                   	pop    esi
c00259c5:	5f                   	pop    edi
c00259c6:	5d                   	pop    ebp
c00259c7:	c3                   	ret    

c00259c8 <IOAPIC::IOAPIC()>:
c00259c8:	83 ec 0c             	sub    esp,0xc
c00259cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259cf:	83 ec 08             	sub    esp,0x8
c00259d2:	68 64 d3 02 c0       	push   0xc002d364
c00259d7:	50                   	push   eax
c00259d8:	e8 fb eb fe ff       	call   c00145d8 <Device::Device(char const*)>
c00259dd:	83 c4 10             	add    esp,0x10
c00259e0:	ba 8c d4 02 c0       	mov    edx,0xc002d48c
c00259e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e9:	89 10                	mov    DWORD PTR [eax],edx
c00259eb:	90                   	nop
c00259ec:	83 c4 0c             	add    esp,0xc
c00259ef:	c3                   	ret    

c00259f0 <APIC::APIC()>:
c00259f0:	53                   	push   ebx
c00259f1:	83 ec 18             	sub    esp,0x18
c00259f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259f8:	83 ec 08             	sub    esp,0x8
c00259fb:	68 6c d3 02 c0       	push   0xc002d36c
c0025a00:	50                   	push   eax
c0025a01:	e8 3e f3 fe ff       	call   c0014d44 <InterruptController::InterruptController(char const*)>
c0025a06:	83 c4 10             	add    esp,0x10
c0025a09:	ba 44 d4 02 c0       	mov    edx,0xc002d444
c0025a0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a12:	89 10                	mov    DWORD PTR [eax],edx
c0025a14:	a0 40 2a 03 c0       	mov    al,ds:0xc0032a40
c0025a19:	83 f0 01             	xor    eax,0x1
c0025a1c:	84 c0                	test   al,al
c0025a1e:	0f 84 a1 00 00 00    	je     c0025ac5 <APIC::APIC()+0xd5>
c0025a24:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025a29:	a0 20 10 03 c0       	mov    al,ds:0xc0031020
c0025a2e:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025a32:	0f 83 86 00 00 00    	jae    c0025abe <APIC::APIC()+0xce>
c0025a38:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025a40:	83 ec 0c             	sub    esp,0xc
c0025a43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a47:	e8 96 9e fe ff       	call   c000f8e2 <malloc>
c0025a4c:	83 c4 10             	add    esp,0x10
c0025a4f:	89 c3                	mov    ebx,eax
c0025a51:	83 ec 0c             	sub    esp,0xc
c0025a54:	53                   	push   ebx
c0025a55:	e8 6e ff ff ff       	call   c00259c8 <IOAPIC::IOAPIC()>
c0025a5a:	83 c4 10             	add    esp,0x10
c0025a5d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025a61:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025a66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025a6a:	89 14 85 20 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd5e0],edx
c0025a71:	a1 00 2a 03 c0       	mov    eax,ds:0xc0032a00
c0025a76:	40                   	inc    eax
c0025a77:	a3 00 2a 03 c0       	mov    ds:0xc0032a00,eax
c0025a7c:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0025a81:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025a87:	83 ec 08             	sub    esp,0x8
c0025a8a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a8e:	50                   	push   eax
c0025a8f:	e8 54 e9 fe ff       	call   c00143e8 <Device::addChild(Device*)>
c0025a94:	83 c4 10             	add    esp,0x10
c0025a97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a9d:	83 c0 08             	add    eax,0x8
c0025aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aa2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025aa7:	6a 00                	push   0x0
c0025aa9:	6a 00                	push   0x0
c0025aab:	52                   	push   edx
c0025aac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025ab0:	ff d0                	call   eax
c0025ab2:	83 c4 10             	add    esp,0x10
c0025ab5:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025ab9:	e9 6b ff ff ff       	jmp    c0025a29 <APIC::APIC()+0x39>
c0025abe:	c6 05 40 2a 03 c0 01 	mov    BYTE PTR ds:0xc0032a40,0x1
c0025ac5:	90                   	nop
c0025ac6:	83 c4 18             	add    esp,0x18
c0025ac9:	5b                   	pop    ebx
c0025aca:	c3                   	ret    
c0025acb:	90                   	nop

c0025acc <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025acc:	55                   	push   ebp
c0025acd:	89 e5                	mov    ebp,esp
c0025acf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ad2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025ad8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025adb:	72 1d                	jb     c0025afa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025add:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025aef:	01 d0                	add    eax,edx
c0025af1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025af4:	73 04                	jae    c0025afa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025af6:	b0 01                	mov    al,0x1
c0025af8:	eb 02                	jmp    c0025afc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025afa:	b0 00                	mov    al,0x0
c0025afc:	5d                   	pop    ebp
c0025afd:	c3                   	ret    

c0025afe <IOAPIC::read(int)>:
c0025afe:	55                   	push   ebp
c0025aff:	89 e5                	mov    ebp,esp
c0025b01:	83 ec 10             	sub    esp,0x10
c0025b04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b07:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b0d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b13:	0f b6 d0             	movzx  edx,al
c0025b16:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b19:	89 10                	mov    DWORD PTR [eax],edx
c0025b1b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b1e:	83 c0 10             	add    eax,0x10
c0025b21:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b23:	c9                   	leave  
c0025b24:	c3                   	ret    
c0025b25:	90                   	nop

c0025b26 <IOAPIC::open(int, int, void*)>:
c0025b26:	55                   	push   ebp
c0025b27:	89 e5                	mov    ebp,esp
c0025b29:	57                   	push   edi
c0025b2a:	56                   	push   esi
c0025b2b:	53                   	push   ebx
c0025b2c:	83 ec 0c             	sub    esp,0xc
c0025b2f:	83 ec 0c             	sub    esp,0xc
c0025b32:	68 97 d3 02 c0       	push   0xc002d397
c0025b37:	e8 85 d4 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0025b3c:	83 c4 10             	add    esp,0x10
c0025b3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b42:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b45:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025b4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b4e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b54:	8b 14 85 60 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefa0]
c0025b5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b5e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b67:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b6d:	8b 14 85 e0 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcef20]
c0025b74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b77:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025b7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b80:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b89:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b8f:	0f b6 f8             	movzx  edi,al
c0025b92:	89 d0                	mov    eax,edx
c0025b94:	ba 00 00 00 00       	mov    edx,0x0
c0025b99:	89 c1                	mov    ecx,eax
c0025b9b:	80 e5 ff             	and    ch,0xff
c0025b9e:	89 cb                	mov    ebx,ecx
c0025ba0:	0f b6 f2             	movzx  esi,dl
c0025ba3:	89 d8                	mov    eax,ebx
c0025ba5:	89 f2                	mov    edx,esi
c0025ba7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025baa:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025bad:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025bb1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025bb5:	83 e0 00             	and    eax,0x0
c0025bb8:	09 d0                	or     eax,edx
c0025bba:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025bbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bc1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bc7:	8d 50 01             	lea    edx,[eax+0x1]
c0025bca:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bcd:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025bd3:	0f b6 d0             	movzx  edx,al
c0025bd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bd9:	83 c2 08             	add    edx,0x8
c0025bdc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025be0:	0f b6 c9             	movzx  ecx,cl
c0025be3:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025be9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025bed:	83 ec 08             	sub    esp,0x8
c0025bf0:	6a 01                	push   0x1
c0025bf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bf5:	e8 04 ff ff ff       	call   c0025afe <IOAPIC::read(int)>
c0025bfa:	83 c4 10             	add    esp,0x10
c0025bfd:	c1 f8 10             	sar    eax,0x10
c0025c00:	0f b6 c0             	movzx  eax,al
c0025c03:	8d 50 01             	lea    edx,[eax+0x1]
c0025c06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c09:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025c0f:	b8 00 00 00 00       	mov    eax,0x0
c0025c14:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c17:	5b                   	pop    ebx
c0025c18:	5e                   	pop    esi
c0025c19:	5f                   	pop    edi
c0025c1a:	5d                   	pop    ebp
c0025c1b:	c3                   	ret    

c0025c1c <IOAPIC::write(int, int)>:
c0025c1c:	55                   	push   ebp
c0025c1d:	89 e5                	mov    ebp,esp
c0025c1f:	83 ec 10             	sub    esp,0x10
c0025c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c25:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025c2b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025c2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c31:	0f b6 d0             	movzx  edx,al
c0025c34:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c37:	89 10                	mov    DWORD PTR [eax],edx
c0025c39:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c3c:	8d 50 10             	lea    edx,[eax+0x10]
c0025c3f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c42:	89 02                	mov    DWORD PTR [edx],eax
c0025c44:	90                   	nop
c0025c45:	c9                   	leave  
c0025c46:	c3                   	ret    
c0025c47:	90                   	nop

c0025c48 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025c48:	55                   	push   ebp
c0025c49:	89 e5                	mov    ebp,esp
c0025c4b:	53                   	push   ebx
c0025c4c:	83 ec 2c             	sub    esp,0x2c
c0025c4f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c52:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025c55:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025c58:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025c5b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025c5e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c61:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025c64:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c67:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c6a:	88 d8                	mov    al,bl
c0025c6c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025c6f:	88 c8                	mov    al,cl
c0025c71:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c74:	88 d0                	mov    al,dl
c0025c76:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025c79:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c7d:	83 c0 08             	add    eax,0x8
c0025c80:	01 c0                	add    eax,eax
c0025c82:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025c85:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c89:	83 c0 08             	add    eax,0x8
c0025c8c:	01 c0                	add    eax,eax
c0025c8e:	40                   	inc    eax
c0025c8f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025c92:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c95:	50                   	push   eax
c0025c96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c99:	e8 60 fe ff ff       	call   c0025afe <IOAPIC::read(int)>
c0025c9e:	83 c4 08             	add    esp,0x8
c0025ca1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025ca4:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025cab:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025cae:	c1 e0 18             	shl    eax,0x18
c0025cb1:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025cb4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025cb7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025cba:	52                   	push   edx
c0025cbb:	50                   	push   eax
c0025cbc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cbf:	e8 58 ff ff ff       	call   c0025c1c <IOAPIC::write(int, int)>
c0025cc4:	83 c4 0c             	add    esp,0xc
c0025cc7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cca:	50                   	push   eax
c0025ccb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cce:	e8 2b fe ff ff       	call   c0025afe <IOAPIC::read(int)>
c0025cd3:	83 c4 08             	add    esp,0x8
c0025cd6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025cd9:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025ce0:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025ce7:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025cee:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025cf2:	74 09                	je     c0025cfd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025cf4:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025cfb:	eb 07                	jmp    c0025d04 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025cfd:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025d04:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025d08:	74 09                	je     c0025d13 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025d0a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025d11:	eb 07                	jmp    c0025d1a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025d13:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025d1a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025d21:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025d25:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025d28:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025d2b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d2e:	52                   	push   edx
c0025d2f:	50                   	push   eax
c0025d30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d33:	e8 e4 fe ff ff       	call   c0025c1c <IOAPIC::write(int, int)>
c0025d38:	83 c4 0c             	add    esp,0xc
c0025d3b:	90                   	nop
c0025d3c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025d3f:	c9                   	leave  
c0025d40:	c3                   	ret    
c0025d41:	90                   	nop

c0025d42 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025d42:	55                   	push   ebp
c0025d43:	89 e5                	mov    ebp,esp
c0025d45:	57                   	push   edi
c0025d46:	56                   	push   esi
c0025d47:	53                   	push   ebx
c0025d48:	83 ec 2c             	sub    esp,0x2c
c0025d4b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d4e:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d51:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d55:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025d59:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d5d:	74 5a                	je     c0025db9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d5f:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025d63:	7f 44                	jg     c0025da9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025d65:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d68:	05 e0 d8 02 c0       	add    eax,0xc002d8e0
c0025d6d:	8a 00                	mov    al,BYTE PTR [eax]
c0025d6f:	0f b6 c0             	movzx  eax,al
c0025d72:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025d75:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d78:	66 8b 84 00 00 10 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf000]
c0025d80:	0f b7 c0             	movzx  eax,ax
c0025d83:	83 e0 02             	and    eax,0x2
c0025d86:	85 c0                	test   eax,eax
c0025d88:	74 04                	je     c0025d8e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025d8a:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025d8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d91:	66 8b 84 00 00 10 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf000]
c0025d99:	0f b7 c0             	movzx  eax,ax
c0025d9c:	83 e0 08             	and    eax,0x8
c0025d9f:	85 c0                	test   eax,eax
c0025da1:	74 16                	je     c0025db9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025da3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025da7:	eb 10                	jmp    c0025db9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025da9:	83 ec 0c             	sub    esp,0xc
c0025dac:	68 a8 d3 02 c0       	push   0xc002d3a8
c0025db1:	e8 bd 48 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0025db6:	83 c4 10             	add    esp,0x10
c0025db9:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025dbd:	a1 00 2a 03 c0       	mov    eax,ds:0xc0032a00
c0025dc2:	83 ec 08             	sub    esp,0x8
c0025dc5:	50                   	push   eax
c0025dc6:	68 e0 d3 02 c0       	push   0xc002d3e0
c0025dcb:	e8 f1 d1 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0025dd0:	83 c4 10             	add    esp,0x10
c0025dd3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025dda:	a1 00 2a 03 c0       	mov    eax,ds:0xc0032a00
c0025ddf:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025de2:	7d 67                	jge    c0025e4b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025de4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025de7:	8b 04 85 20 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5e0]
c0025dee:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025df1:	83 ec 08             	sub    esp,0x8
c0025df4:	52                   	push   edx
c0025df5:	50                   	push   eax
c0025df6:	e8 d1 fc ff ff       	call   c0025acc <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025dfb:	83 c4 10             	add    esp,0x10
c0025dfe:	84 c0                	test   al,al
c0025e00:	74 44                	je     c0025e46 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025e02:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e05:	8b 1c 85 20 2a 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd5e0]
c0025e0c:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025e10:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025e13:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025e17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e1a:	83 c0 20             	add    eax,0x20
c0025e1d:	0f b6 f0             	movzx  esi,al
c0025e20:	b8 00 00 00 00       	mov    eax,0x0
c0025e25:	99                   	cdq    
c0025e26:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025e29:	0f b6 c9             	movzx  ecx,cl
c0025e2c:	83 ec 04             	sub    esp,0x4
c0025e2f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025e32:	57                   	push   edi
c0025e33:	56                   	push   esi
c0025e34:	52                   	push   edx
c0025e35:	50                   	push   eax
c0025e36:	51                   	push   ecx
c0025e37:	53                   	push   ebx
c0025e38:	e8 0b fe ff ff       	call   c0025c48 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025e3d:	83 c4 20             	add    esp,0x20
c0025e40:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025e44:	eb 05                	jmp    c0025e4b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e46:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025e49:	eb 8f                	jmp    c0025dda <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025e4b:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025e4e:	83 f0 01             	xor    eax,0x1
c0025e51:	84 c0                	test   al,al
c0025e53:	74 10                	je     c0025e65 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025e55:	83 ec 0c             	sub    esp,0xc
c0025e58:	68 f7 d3 02 c0       	push   0xc002d3f7
c0025e5d:	e8 11 48 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0025e62:	83 c4 10             	add    esp,0x10
c0025e65:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025e69:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025e70:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025e74:	7f 65                	jg     c0025edb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025e76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e79:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e7c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e83:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e86:	01 ca                	add    edx,ecx
c0025e88:	83 c2 54             	add    edx,0x54
c0025e8b:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025e8f:	85 c0                	test   eax,eax
c0025e91:	75 43                	jne    c0025ed6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e96:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e99:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ea0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ea3:	01 ca                	add    edx,ecx
c0025ea5:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025ea8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025eab:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025eb2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025eb5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ebc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ebf:	01 ca                	add    edx,ecx
c0025ec1:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025ec7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025eca:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025ece:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ed1:	83 e8 20             	sub    eax,0x20
c0025ed4:	eb 1a                	jmp    c0025ef0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025ed6:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025ed9:	eb 95                	jmp    c0025e70 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025edb:	83 ec 0c             	sub    esp,0xc
c0025ede:	68 04 d4 02 c0       	push   0xc002d404
c0025ee3:	e8 8b 47 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0025ee8:	83 c4 10             	add    esp,0x10
c0025eeb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025ef0:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ef3:	5b                   	pop    ebx
c0025ef4:	5e                   	pop    esi
c0025ef5:	5f                   	pop    edi
c0025ef6:	5d                   	pop    ebp
c0025ef7:	c3                   	ret    

c0025ef8 <PIC::disable()>:
c0025ef8:	55                   	push   ebp
c0025ef9:	89 e5                	mov    ebp,esp
c0025efb:	83 ec 10             	sub    esp,0x10
c0025efe:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025f04:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025f08:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f0b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025f0f:	ee                   	out    dx,al
c0025f10:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025f16:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025f1a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f1d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025f21:	ee                   	out    dx,al
c0025f22:	90                   	nop
c0025f23:	c9                   	leave  
c0025f24:	c3                   	ret    
c0025f25:	90                   	nop

c0025f26 <PIC::close(int, int, void*)>:
c0025f26:	55                   	push   ebp
c0025f27:	89 e5                	mov    ebp,esp
c0025f29:	83 ec 08             	sub    esp,0x8
c0025f2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f31:	83 c0 3c             	add    eax,0x3c
c0025f34:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f36:	83 ec 0c             	sub    esp,0xc
c0025f39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f3c:	ff d0                	call   eax
c0025f3e:	83 c4 10             	add    esp,0x10
c0025f41:	b8 00 00 00 00       	mov    eax,0x0
c0025f46:	c9                   	leave  
c0025f47:	c3                   	ret    

c0025f48 <PIC::PIC()>:
c0025f48:	83 ec 0c             	sub    esp,0xc
c0025f4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f4f:	83 ec 08             	sub    esp,0x8
c0025f52:	68 b0 d4 02 c0       	push   0xc002d4b0
c0025f57:	50                   	push   eax
c0025f58:	e8 e7 ed fe ff       	call   c0014d44 <InterruptController::InterruptController(char const*)>
c0025f5d:	83 c4 10             	add    esp,0x10
c0025f60:	ba dc d4 02 c0       	mov    edx,0xc002d4dc
c0025f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f69:	89 10                	mov    DWORD PTR [eax],edx
c0025f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f6f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f75:	0f b6 d0             	movzx  edx,al
c0025f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f7c:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f87:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f8d:	0f b6 d0             	movzx  edx,al
c0025f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f94:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f9d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fa3:	8d 50 01             	lea    edx,[eax+0x1]
c0025fa6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025faa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025fb0:	0f b6 d0             	movzx  edx,al
c0025fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025fbb:	83 e1 3f             	and    ecx,0x3f
c0025fbe:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fcc:	0f b6 d0             	movzx  edx,al
c0025fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fd3:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fde:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fe4:	0f b6 d0             	movzx  edx,al
c0025fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025feb:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ffa:	8d 50 01             	lea    edx,[eax+0x1]
c0025ffd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026001:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026007:	0f b6 d0             	movzx  edx,al
c002600a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002600e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026012:	83 e1 3f             	and    ecx,0x3f
c0026015:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026019:	90                   	nop
c002601a:	83 c4 0c             	add    esp,0xc
c002601d:	c3                   	ret    

c002601e <PIC::ioWait()>:
c002601e:	eb 00                	jmp    c0026020 <PIC::ioWait()+0x2>
c0026020:	eb 00                	jmp    c0026022 <PIC::ioWait()+0x4>
c0026022:	90                   	nop
c0026023:	c3                   	ret    

c0026024 <PIC::getIRQReg(int)>:
c0026024:	55                   	push   ebp
c0026025:	89 e5                	mov    ebp,esp
c0026027:	83 ec 10             	sub    esp,0x10
c002602a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002602d:	0f b6 c0             	movzx  eax,al
c0026030:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026036:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026039:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002603c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026040:	ee                   	out    dx,al
c0026041:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026044:	0f b6 c0             	movzx  eax,al
c0026047:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002604d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026050:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026053:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026057:	ee                   	out    dx,al
c0026058:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002605e:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026062:	89 c2                	mov    edx,eax
c0026064:	ec                   	in     al,dx
c0026065:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026068:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002606b:	0f b6 c0             	movzx  eax,al
c002606e:	c1 e0 08             	shl    eax,0x8
c0026071:	89 c1                	mov    ecx,eax
c0026073:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026079:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002607d:	89 c2                	mov    edx,eax
c002607f:	ec                   	in     al,dx
c0026080:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026083:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026086:	0f b6 c0             	movzx  eax,al
c0026089:	09 c8                	or     eax,ecx
c002608b:	c9                   	leave  
c002608c:	c3                   	ret    
c002608d:	90                   	nop

c002608e <PIC::eoi(unsigned char)>:
c002608e:	55                   	push   ebp
c002608f:	89 e5                	mov    ebp,esp
c0026091:	83 ec 14             	sub    esp,0x14
c0026094:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026097:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c002609a:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002609e:	75 1e                	jne    c00260be <PIC::eoi(unsigned char)+0x30>
c00260a0:	6a 0b                	push   0xb
c00260a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260a5:	e8 7a ff ff ff       	call   c0026024 <PIC::getIRQReg(int)>
c00260aa:	83 c4 08             	add    esp,0x8
c00260ad:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00260b1:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00260b5:	25 80 00 00 00       	and    eax,0x80
c00260ba:	85 c0                	test   eax,eax
c00260bc:	74 5f                	je     c002611d <PIC::eoi(unsigned char)+0x8f>
c00260be:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00260c2:	75 2d                	jne    c00260f1 <PIC::eoi(unsigned char)+0x63>
c00260c4:	6a 0b                	push   0xb
c00260c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260c9:	e8 56 ff ff ff       	call   c0026024 <PIC::getIRQReg(int)>
c00260ce:	83 c4 08             	add    esp,0x8
c00260d1:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00260d5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00260d8:	66 85 c0             	test   ax,ax
c00260db:	78 14                	js     c00260f1 <PIC::eoi(unsigned char)+0x63>
c00260dd:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00260e3:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00260e7:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00260ea:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00260ee:	ee                   	out    dx,al
c00260ef:	eb 2d                	jmp    c002611e <PIC::eoi(unsigned char)+0x90>
c00260f1:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00260f5:	76 12                	jbe    c0026109 <PIC::eoi(unsigned char)+0x7b>
c00260f7:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00260fd:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026101:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026104:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026108:	ee                   	out    dx,al
c0026109:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002610f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026113:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026116:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002611a:	ee                   	out    dx,al
c002611b:	eb 01                	jmp    c002611e <PIC::eoi(unsigned char)+0x90>
c002611d:	90                   	nop
c002611e:	c9                   	leave  
c002611f:	c3                   	ret    

c0026120 <PIC::remap()>:
c0026120:	55                   	push   ebp
c0026121:	89 e5                	mov    ebp,esp
c0026123:	83 ec 48             	sub    esp,0x48
c0026126:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002612d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026134:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002613a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002613d:	89 c2                	mov    edx,eax
c002613f:	ec                   	in     al,dx
c0026140:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026143:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026146:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026149:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002614f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026152:	89 c2                	mov    edx,eax
c0026154:	ec                   	in     al,dx
c0026155:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026158:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002615b:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002615e:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026164:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026168:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002616b:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002616e:	ee                   	out    dx,al
c002616f:	83 ec 0c             	sub    esp,0xc
c0026172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026175:	e8 a4 fe ff ff       	call   c002601e <PIC::ioWait()>
c002617a:	83 c4 10             	add    esp,0x10
c002617d:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026183:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026187:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c002618a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002618d:	ee                   	out    dx,al
c002618e:	83 ec 0c             	sub    esp,0xc
c0026191:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026194:	e8 85 fe ff ff       	call   c002601e <PIC::ioWait()>
c0026199:	83 c4 10             	add    esp,0x10
c002619c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002619f:	0f b6 c0             	movzx  eax,al
c00261a2:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00261a8:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00261ab:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00261ae:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00261b1:	ee                   	out    dx,al
c00261b2:	83 ec 0c             	sub    esp,0xc
c00261b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261b8:	e8 61 fe ff ff       	call   c002601e <PIC::ioWait()>
c00261bd:	83 c4 10             	add    esp,0x10
c00261c0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00261c3:	0f b6 c0             	movzx  eax,al
c00261c6:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00261cc:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00261cf:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00261d2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00261d5:	ee                   	out    dx,al
c00261d6:	83 ec 0c             	sub    esp,0xc
c00261d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261dc:	e8 3d fe ff ff       	call   c002601e <PIC::ioWait()>
c00261e1:	83 c4 10             	add    esp,0x10
c00261e4:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00261ea:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00261ee:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00261f1:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00261f4:	ee                   	out    dx,al
c00261f5:	83 ec 0c             	sub    esp,0xc
c00261f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261fb:	e8 1e fe ff ff       	call   c002601e <PIC::ioWait()>
c0026200:	83 c4 10             	add    esp,0x10
c0026203:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026209:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002620d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026210:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026213:	ee                   	out    dx,al
c0026214:	83 ec 0c             	sub    esp,0xc
c0026217:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002621a:	e8 ff fd ff ff       	call   c002601e <PIC::ioWait()>
c002621f:	83 c4 10             	add    esp,0x10
c0026222:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026228:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002622c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002622f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026232:	ee                   	out    dx,al
c0026233:	83 ec 0c             	sub    esp,0xc
c0026236:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026239:	e8 e0 fd ff ff       	call   c002601e <PIC::ioWait()>
c002623e:	83 c4 10             	add    esp,0x10
c0026241:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026247:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002624b:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002624e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026251:	ee                   	out    dx,al
c0026252:	83 ec 0c             	sub    esp,0xc
c0026255:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026258:	e8 c1 fd ff ff       	call   c002601e <PIC::ioWait()>
c002625d:	83 c4 10             	add    esp,0x10
c0026260:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026264:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002626a:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002626d:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026270:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026273:	ee                   	out    dx,al
c0026274:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026278:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002627e:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026281:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026284:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026287:	ee                   	out    dx,al
c0026288:	90                   	nop
c0026289:	c9                   	leave  
c002628a:	c3                   	ret    
c002628b:	90                   	nop

c002628c <PIC::open(int, int, void*)>:
c002628c:	55                   	push   ebp
c002628d:	89 e5                	mov    ebp,esp
c002628f:	83 ec 18             	sub    esp,0x18
c0026292:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026298:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002629c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002629f:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00262a3:	ee                   	out    dx,al
c00262a4:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00262aa:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00262ae:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00262b1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00262b5:	ee                   	out    dx,al
c00262b6:	83 ec 0c             	sub    esp,0xc
c00262b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262bc:	e8 5f fe ff ff       	call   c0026120 <PIC::remap()>
c00262c1:	83 c4 10             	add    esp,0x10
c00262c4:	b8 00 00 00 00       	mov    eax,0x0
c00262c9:	c9                   	leave  
c00262ca:	c3                   	ret    
c00262cb:	90                   	nop

c00262cc <APICTimer::close(int, int, void*)>:
c00262cc:	b8 00 00 00 00       	mov    eax,0x0
c00262d1:	c3                   	ret    

c00262d2 <apicTimerHandler(regs*, void*)>:
c00262d2:	83 ec 0c             	sub    esp,0xc
c00262d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00262d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00262db:	99                   	cdq    
c00262dc:	52                   	push   edx
c00262dd:	50                   	push   eax
c00262de:	6a 00                	push   0x0
c00262e0:	68 00 ca 9a 3b       	push   0x3b9aca00
c00262e5:	e8 92 07 00 00       	call   c0026a7c <__udivdi3>
c00262ea:	83 c4 10             	add    esp,0x10
c00262ed:	83 ec 08             	sub    esp,0x8
c00262f0:	52                   	push   edx
c00262f1:	50                   	push   eax
c00262f2:	e8 a8 0a ff ff       	call   c0016d9f <timerHandler(unsigned long long)>
c00262f7:	83 c4 10             	add    esp,0x10
c00262fa:	90                   	nop
c00262fb:	83 c4 0c             	add    esp,0xc
c00262fe:	c3                   	ret    
c00262ff:	90                   	nop

c0026300 <APICTimer::write(int)>:
c0026300:	53                   	push   ebx
c0026301:	83 ec 28             	sub    esp,0x28
c0026304:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026308:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002630c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026312:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0026317:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002631d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026323:	83 ec 0c             	sub    esp,0xc
c0026326:	50                   	push   eax
c0026327:	e8 de f4 ff ff       	call   c002580a <APIC::getBase()>
c002632c:	83 c4 10             	add    esp,0x10
c002632f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026333:	a1 10 ed 02 c0       	mov    eax,ds:0xc002ed10
c0026338:	8b 15 14 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed14
c002633e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026342:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026346:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002634a:	05 e0 03 00 00       	add    eax,0x3e0
c002634f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026355:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026359:	05 80 03 00 00       	add    eax,0x380
c002635e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026364:	fb                   	sti    
c0026365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026369:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002636d:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026372:	83 d2 00             	adc    edx,0x0
c0026375:	89 c1                	mov    ecx,eax
c0026377:	89 d3                	mov    ebx,edx
c0026379:	a1 10 ed 02 c0       	mov    eax,ds:0xc002ed10
c002637e:	8b 15 14 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed14
c0026384:	39 c8                	cmp    eax,ecx
c0026386:	89 d0                	mov    eax,edx
c0026388:	19 d8                	sbb    eax,ebx
c002638a:	73 02                	jae    c002638e <APICTimer::write(int)+0x8e>
c002638c:	eb d7                	jmp    c0026365 <APICTimer::write(int)+0x65>
c002638e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026392:	05 20 03 00 00       	add    eax,0x320
c0026397:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002639d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263a1:	05 90 03 00 00       	add    eax,0x390
c00263a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00263a8:	f7 d0                	not    eax
c00263aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263ae:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00263b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263b6:	ba 00 00 00 00       	mov    edx,0x0
c00263bb:	f7 f3                	div    ebx
c00263bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00263c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00263c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00263cb:	0d 00 00 02 00       	or     eax,0x20000
c00263d0:	89 c2                	mov    edx,eax
c00263d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263d6:	05 20 03 00 00       	add    eax,0x320
c00263db:	89 10                	mov    DWORD PTR [eax],edx
c00263dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263e1:	05 e0 03 00 00       	add    eax,0x3e0
c00263e6:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00263ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263f0:	05 80 03 00 00       	add    eax,0x380
c00263f5:	89 c2                	mov    edx,eax
c00263f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00263fb:	89 02                	mov    DWORD PTR [edx],eax
c00263fd:	90                   	nop
c00263fe:	83 c4 28             	add    esp,0x28
c0026401:	5b                   	pop    ebx
c0026402:	c3                   	ret    
c0026403:	90                   	nop

c0026404 <APICTimer::open(int, int, void*)>:
c0026404:	57                   	push   edi
c0026405:	56                   	push   esi
c0026406:	53                   	push   ebx
c0026407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002640b:	8b 00                	mov    eax,DWORD PTR [eax]
c002640d:	83 c0 24             	add    eax,0x24
c0026410:	8b 00                	mov    eax,DWORD PTR [eax]
c0026412:	83 ec 08             	sub    esp,0x8
c0026415:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026419:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002641d:	ff d0                	call   eax
c002641f:	83 c4 10             	add    esp,0x10
c0026422:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0026427:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002642d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026433:	83 ec 0c             	sub    esp,0xc
c0026436:	50                   	push   eax
c0026437:	e8 ce f3 ff ff       	call   c002580a <APIC::getBase()>
c002643c:	83 c4 10             	add    esp,0x10
c002643f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026449:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002644f:	0f b6 f8             	movzx  edi,al
c0026452:	89 d0                	mov    eax,edx
c0026454:	ba 00 00 00 00       	mov    edx,0x0
c0026459:	89 c1                	mov    ecx,eax
c002645b:	80 e5 ff             	and    ch,0xff
c002645e:	89 cb                	mov    ebx,ecx
c0026460:	0f b6 f2             	movzx  esi,dl
c0026463:	89 d8                	mov    eax,ebx
c0026465:	89 f2                	mov    edx,esi
c0026467:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002646b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002646e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026472:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026476:	83 e0 00             	and    eax,0x0
c0026479:	09 d0                	or     eax,edx
c002647b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002647f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026483:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026489:	8d 50 01             	lea    edx,[eax+0x1]
c002648c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026490:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026496:	0f b6 d0             	movzx  edx,al
c0026499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002649d:	83 c2 08             	add    edx,0x8
c00264a0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00264a4:	0f b6 c9             	movzx  ecx,cl
c00264a7:	81 c9 00 00 01 00    	or     ecx,0x10000
c00264ad:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00264b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264b9:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00264bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264c7:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00264cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264d1:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00264d7:	83 ec 0c             	sub    esp,0xc
c00264da:	51                   	push   ecx
c00264db:	6a 01                	push   0x1
c00264dd:	68 d2 62 02 c0       	push   0xc00262d2
c00264e2:	52                   	push   edx
c00264e3:	50                   	push   eax
c00264e4:	e8 83 de fe ff       	call   c001436c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00264e9:	83 c4 20             	add    esp,0x20
c00264ec:	89 c2                	mov    edx,eax
c00264ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264f2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00264f8:	b8 00 00 00 00       	mov    eax,0x0
c00264fd:	5b                   	pop    ebx
c00264fe:	5e                   	pop    esi
c00264ff:	5f                   	pop    edi
c0026500:	c3                   	ret    
c0026501:	90                   	nop

c0026502 <APICTimer::APICTimer()>:
c0026502:	83 ec 0c             	sub    esp,0xc
c0026505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026509:	83 ec 08             	sub    esp,0x8
c002650c:	68 1c d5 02 c0       	push   0xc002d51c
c0026511:	50                   	push   eax
c0026512:	e8 f9 07 ff ff       	call   c0016d10 <Timer::Timer(char const*)>
c0026517:	83 c4 10             	add    esp,0x10
c002651a:	ba 30 d5 02 c0       	mov    edx,0xc002d530
c002651f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026523:	89 10                	mov    DWORD PTR [eax],edx
c0026525:	90                   	nop
c0026526:	83 c4 0c             	add    esp,0xc
c0026529:	c3                   	ret    

c002652a <PIT::write(int)>:
c002652a:	83 ec 10             	sub    esp,0x10
c002652d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026531:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026535:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002653b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002653f:	a3 44 2a 03 c0       	mov    ds:0xc0032a44,eax
c0026544:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026549:	99                   	cdq    
c002654a:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002654e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026552:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026559:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002655e:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026562:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026567:	ee                   	out    dx,al
c0026568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002656c:	0f b6 c0             	movzx  eax,al
c002656f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026576:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002657a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002657e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026583:	ee                   	out    dx,al
c0026584:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026588:	c1 f8 08             	sar    eax,0x8
c002658b:	0f b6 c0             	movzx  eax,al
c002658e:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026595:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026599:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002659d:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00265a2:	ee                   	out    dx,al
c00265a3:	90                   	nop
c00265a4:	83 c4 10             	add    esp,0x10
c00265a7:	c3                   	ret    

c00265a8 <pitHandler(regs*, void*)>:
c00265a8:	83 ec 0c             	sub    esp,0xc
c00265ab:	a1 44 2a 03 c0       	mov    eax,ds:0xc0032a44
c00265b0:	99                   	cdq    
c00265b1:	52                   	push   edx
c00265b2:	50                   	push   eax
c00265b3:	6a 00                	push   0x0
c00265b5:	68 00 ca 9a 3b       	push   0x3b9aca00
c00265ba:	e8 bd 04 00 00       	call   c0026a7c <__udivdi3>
c00265bf:	83 c4 10             	add    esp,0x10
c00265c2:	83 ec 08             	sub    esp,0x8
c00265c5:	52                   	push   edx
c00265c6:	50                   	push   eax
c00265c7:	e8 d3 07 ff ff       	call   c0016d9f <timerHandler(unsigned long long)>
c00265cc:	83 c4 10             	add    esp,0x10
c00265cf:	90                   	nop
c00265d0:	83 c4 0c             	add    esp,0xc
c00265d3:	c3                   	ret    

c00265d4 <PIT::open(int, int, void*)>:
c00265d4:	83 ec 0c             	sub    esp,0xc
c00265d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265db:	8b 00                	mov    eax,DWORD PTR [eax]
c00265dd:	83 c0 24             	add    eax,0x24
c00265e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00265e2:	83 ec 08             	sub    esp,0x8
c00265e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265ed:	ff d0                	call   eax
c00265ef:	83 c4 10             	add    esp,0x10
c00265f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f6:	83 ec 0c             	sub    esp,0xc
c00265f9:	6a 00                	push   0x0
c00265fb:	6a 01                	push   0x1
c00265fd:	68 a8 65 02 c0       	push   0xc00265a8
c0026602:	6a 00                	push   0x0
c0026604:	50                   	push   eax
c0026605:	e8 62 dd fe ff       	call   c001436c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002660a:	83 c4 20             	add    esp,0x20
c002660d:	89 c2                	mov    edx,eax
c002660f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026613:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026619:	b8 00 00 00 00       	mov    eax,0x0
c002661e:	83 c4 0c             	add    esp,0xc
c0026621:	c3                   	ret    

c0026622 <PIT::close(int, int, void*)>:
c0026622:	83 ec 0c             	sub    esp,0xc
c0026625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026629:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026637:	6a 01                	push   0x1
c0026639:	68 a8 65 02 c0       	push   0xc00265a8
c002663e:	6a 00                	push   0x0
c0026640:	50                   	push   eax
c0026641:	e8 64 dd fe ff       	call   c00143aa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026646:	83 c4 10             	add    esp,0x10
c0026649:	b8 00 00 00 00       	mov    eax,0x0
c002664e:	83 c4 0c             	add    esp,0xc
c0026651:	c3                   	ret    

c0026652 <PIT::PIT()>:
c0026652:	83 ec 0c             	sub    esp,0xc
c0026655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026659:	83 ec 08             	sub    esp,0x8
c002665c:	68 58 d5 02 c0       	push   0xc002d558
c0026661:	50                   	push   eax
c0026662:	e8 a9 06 ff ff       	call   c0016d10 <Timer::Timer(char const*)>
c0026667:	83 c4 10             	add    esp,0x10
c002666a:	ba 80 d5 02 c0       	mov    edx,0xc002d580
c002666f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026673:	89 10                	mov    DWORD PTR [eax],edx
c0026675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026679:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002667f:	0f b6 d0             	movzx  edx,al
c0026682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026686:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002668d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026691:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026697:	0f b6 d0             	movzx  edx,al
c002669a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00266a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266ad:	8d 50 01             	lea    edx,[eax+0x1]
c00266b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266b4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00266ba:	0f b6 d0             	movzx  edx,al
c00266bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00266c5:	83 e1 3f             	and    ecx,0x3f
c00266c8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00266cc:	90                   	nop
c00266cd:	83 c4 0c             	add    esp,0xc
c00266d0:	c3                   	ret    
c00266d1:	66 90                	xchg   ax,ax
c00266d3:	66 90                	xchg   ax,ax
c00266d5:	66 90                	xchg   ax,ax
c00266d7:	66 90                	xchg   ax,ax
c00266d9:	66 90                	xchg   ax,ax
c00266db:	66 90                	xchg   ax,ax
c00266dd:	66 90                	xchg   ax,ax
c00266df:	90                   	nop

c00266e0 <avxDetect>:
c00266e0:	b8 00 00 00 00       	mov    eax,0x0
c00266e5:	c3                   	ret    

c00266e6 <avxSave>:
c00266e6:	c3                   	ret    

c00266e7 <avxLoad>:
c00266e7:	c3                   	ret    

c00266e8 <avxInit>:
c00266e8:	c3                   	ret    

c00266e9 <avxClose>:
c00266e9:	c3                   	ret    

c00266ea <wouldSheSayYes>:
c00266ea:	c3                   	ret    
c00266eb:	49                   	dec    ecx
c00266ec:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00266f0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00266f4:	75 20                	jne    c0026716 <sseDetect.noSSE+0x1>
c00266f6:	4e                   	dec    esi
c00266f7:	79 61                	jns    c002675a <x87Detect+0x14>
c00266f9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00266fe:	66 90                	xchg   ax,ax

c0026700 <absolutelyNoChanceInHell>:
c0026700:	b8 01 00 00 00       	mov    eax,0x1
c0026705:	0f a2                	cpuid  
c0026707:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002670d:	74 06                	je     c0026715 <sseDetect.noSSE>
c002670f:	b8 01 00 00 00       	mov    eax,0x1
c0026714:	c3                   	ret    

c0026715 <sseDetect.noSSE>:
c0026715:	31 c0                	xor    eax,eax
c0026717:	c3                   	ret    

c0026718 <sseSave>:
c0026718:	0f ae 44 24 08       	fxsave [esp+0x8]
c002671d:	c3                   	ret    

c002671e <sseLoad>:
c002671e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026723:	c3                   	ret    

c0026724 <sseInit>:
c0026724:	e8 43 00 00 00       	call   c002676c <x87Init>
c0026729:	0f 20 e0             	mov    eax,cr4
c002672c:	66 0d 00 06          	or     ax,0x600
c0026730:	0f 22 e0             	mov    cr4,eax
c0026733:	c3                   	ret    

c0026734 <sseClose>:
c0026734:	c3                   	ret    
c0026735:	66 90                	xchg   ax,ax
c0026737:	66 90                	xchg   ax,ax
c0026739:	66 90                	xchg   ax,ax
c002673b:	66 90                	xchg   ax,ax
c002673d:	66 90                	xchg   ax,ax
c002673f:	90                   	nop

c0026740 <value_37F>:
c0026740:	7f 03                	jg     c0026745 <value_37A+0x1>

c0026742 <value_37E>:
c0026742:	7e 03                	jle    c0026747 <x87Detect+0x1>

c0026744 <value_37A>:
c0026744:	7a 03                	jp     c0026749 <x87Detect+0x3>

c0026746 <x87Detect>:
c0026746:	b8 01 00 00 00       	mov    eax,0x1
c002674b:	0f a2                	cpuid  
c002674d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026753:	74 06                	je     c002675b <x87Detect.nox87>
c0026755:	b8 01 00 00 00       	mov    eax,0x1
c002675a:	c3                   	ret    

c002675b <x87Detect.nox87>:
c002675b:	b8 00 00 00 00       	mov    eax,0x0
c0026760:	c3                   	ret    

c0026761 <x87Save>:
c0026761:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026766:	c3                   	ret    

c0026767 <x87Load>:
c0026767:	dd 64 24 08          	frstor [esp+0x8]
c002676b:	c3                   	ret    

c002676c <x87Init>:
c002676c:	9b db e3             	finit  
c002676f:	0f 20 c0             	mov    eax,cr0
c0026772:	66 25 fb ff          	and    ax,0xfffb
c0026776:	66 0d 22 00          	or     ax,0x22
c002677a:	0f 22 c0             	mov    cr0,eax
c002677d:	0f 06                	clts   
c002677f:	d9 2d 44 67 02 c0    	fldcw  WORD PTR ds:0xc0026744
c0026785:	c3                   	ret    

c0026786 <x87Close>:
c0026786:	c3                   	ret    
c0026787:	90                   	nop

c0026788 <__do_global_ctors_aux>:
c0026788:	a1 cc 92 02 c0       	mov    eax,ds:0xc00292cc
c002678d:	83 f8 ff             	cmp    eax,0xffffffff
c0026790:	74 1a                	je     c00267ac <__do_global_ctors_aux+0x24>
c0026792:	55                   	push   ebp
c0026793:	89 e5                	mov    ebp,esp
c0026795:	53                   	push   ebx
c0026796:	52                   	push   edx
c0026797:	bb cc 92 02 c0       	mov    ebx,0xc00292cc
c002679c:	ff d0                	call   eax
c002679e:	83 eb 04             	sub    ebx,0x4
c00267a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00267a3:	83 f8 ff             	cmp    eax,0xffffffff
c00267a6:	75 f4                	jne    c002679c <__do_global_ctors_aux+0x14>
c00267a8:	58                   	pop    eax
c00267a9:	5b                   	pop    ebx
c00267aa:	5d                   	pop    ebp
c00267ab:	c3                   	ret    
c00267ac:	c3                   	ret    
c00267ad:	66 90                	xchg   ax,ax
c00267af:	90                   	nop

c00267b0 <__divdi3>:
c00267b0:	55                   	push   ebp
c00267b1:	57                   	push   edi
c00267b2:	56                   	push   esi
c00267b3:	53                   	push   ebx
c00267b4:	83 ec 1c             	sub    esp,0x1c
c00267b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00267bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00267bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00267ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00267ce:	85 db                	test   ebx,ebx
c00267d0:	0f 88 8e 00 00 00    	js     c0026864 <__divdi3+0xb4>
c00267d6:	89 dd                	mov    ebp,ebx
c00267d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00267e0:	89 d3                	mov    ebx,edx
c00267e2:	85 d2                	test   edx,edx
c00267e4:	79 0d                	jns    c00267f3 <__divdi3+0x43>
c00267e6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00267ea:	f7 d8                	neg    eax
c00267ec:	83 d2 00             	adc    edx,0x0
c00267ef:	f7 da                	neg    edx
c00267f1:	89 d3                	mov    ebx,edx
c00267f3:	89 c7                	mov    edi,eax
c00267f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267f8:	85 db                	test   ebx,ebx
c00267fa:	75 48                	jne    c0026844 <__divdi3+0x94>
c00267fc:	39 ef                	cmp    edi,ebp
c00267fe:	76 24                	jbe    c0026824 <__divdi3+0x74>
c0026800:	89 ea                	mov    edx,ebp
c0026802:	f7 f7                	div    edi
c0026804:	89 c1                	mov    ecx,eax
c0026806:	31 f6                	xor    esi,esi
c0026808:	89 c8                	mov    eax,ecx
c002680a:	89 f2                	mov    edx,esi
c002680c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026810:	85 c9                	test   ecx,ecx
c0026812:	74 07                	je     c002681b <__divdi3+0x6b>
c0026814:	f7 d8                	neg    eax
c0026816:	83 d2 00             	adc    edx,0x0
c0026819:	f7 da                	neg    edx
c002681b:	83 c4 1c             	add    esp,0x1c
c002681e:	5b                   	pop    ebx
c002681f:	5e                   	pop    esi
c0026820:	5f                   	pop    edi
c0026821:	5d                   	pop    ebp
c0026822:	c3                   	ret    
c0026823:	90                   	nop
c0026824:	85 ff                	test   edi,edi
c0026826:	75 0b                	jne    c0026833 <__divdi3+0x83>
c0026828:	b8 01 00 00 00       	mov    eax,0x1
c002682d:	31 d2                	xor    edx,edx
c002682f:	f7 f3                	div    ebx
c0026831:	89 c7                	mov    edi,eax
c0026833:	31 d2                	xor    edx,edx
c0026835:	89 e8                	mov    eax,ebp
c0026837:	f7 f7                	div    edi
c0026839:	89 c6                	mov    esi,eax
c002683b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002683e:	f7 f7                	div    edi
c0026840:	89 c1                	mov    ecx,eax
c0026842:	eb c4                	jmp    c0026808 <__divdi3+0x58>
c0026844:	39 eb                	cmp    ebx,ebp
c0026846:	77 3c                	ja     c0026884 <__divdi3+0xd4>
c0026848:	0f bd f3             	bsr    esi,ebx
c002684b:	83 f6 1f             	xor    esi,0x1f
c002684e:	75 40                	jne    c0026890 <__divdi3+0xe0>
c0026850:	39 eb                	cmp    ebx,ebp
c0026852:	72 09                	jb     c002685d <__divdi3+0xad>
c0026854:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026857:	0f 87 97 00 00 00    	ja     c00268f4 <__divdi3+0x144>
c002685d:	b9 01 00 00 00       	mov    ecx,0x1
c0026862:	eb a4                	jmp    c0026808 <__divdi3+0x58>
c0026864:	f7 d9                	neg    ecx
c0026866:	83 d3 00             	adc    ebx,0x0
c0026869:	f7 db                	neg    ebx
c002686b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002686e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026872:	89 dd                	mov    ebp,ebx
c0026874:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002687c:	e9 5f ff ff ff       	jmp    c00267e0 <__divdi3+0x30>
c0026881:	8d 76 00             	lea    esi,[esi+0x0]
c0026884:	31 f6                	xor    esi,esi
c0026886:	31 c9                	xor    ecx,ecx
c0026888:	e9 7b ff ff ff       	jmp    c0026808 <__divdi3+0x58>
c002688d:	8d 76 00             	lea    esi,[esi+0x0]
c0026890:	b8 20 00 00 00       	mov    eax,0x20
c0026895:	29 f0                	sub    eax,esi
c0026897:	89 f1                	mov    ecx,esi
c0026899:	d3 e3                	shl    ebx,cl
c002689b:	89 fa                	mov    edx,edi
c002689d:	88 c1                	mov    cl,al
c002689f:	d3 ea                	shr    edx,cl
c00268a1:	09 da                	or     edx,ebx
c00268a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00268a7:	89 f1                	mov    ecx,esi
c00268a9:	d3 e7                	shl    edi,cl
c00268ab:	89 eb                	mov    ebx,ebp
c00268ad:	88 c1                	mov    cl,al
c00268af:	d3 eb                	shr    ebx,cl
c00268b1:	89 f1                	mov    ecx,esi
c00268b3:	d3 e5                	shl    ebp,cl
c00268b5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00268b8:	88 c1                	mov    cl,al
c00268ba:	d3 ea                	shr    edx,cl
c00268bc:	09 d5                	or     ebp,edx
c00268be:	89 e8                	mov    eax,ebp
c00268c0:	89 da                	mov    edx,ebx
c00268c2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00268c6:	89 d3                	mov    ebx,edx
c00268c8:	89 c5                	mov    ebp,eax
c00268ca:	f7 e7                	mul    edi
c00268cc:	39 d3                	cmp    ebx,edx
c00268ce:	72 18                	jb     c00268e8 <__divdi3+0x138>
c00268d0:	74 0a                	je     c00268dc <__divdi3+0x12c>
c00268d2:	89 e9                	mov    ecx,ebp
c00268d4:	31 f6                	xor    esi,esi
c00268d6:	e9 2d ff ff ff       	jmp    c0026808 <__divdi3+0x58>
c00268db:	90                   	nop
c00268dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00268df:	89 f1                	mov    ecx,esi
c00268e1:	d3 e7                	shl    edi,cl
c00268e3:	39 c7                	cmp    edi,eax
c00268e5:	73 eb                	jae    c00268d2 <__divdi3+0x122>
c00268e7:	90                   	nop
c00268e8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00268eb:	31 f6                	xor    esi,esi
c00268ed:	e9 16 ff ff ff       	jmp    c0026808 <__divdi3+0x58>
c00268f2:	66 90                	xchg   ax,ax
c00268f4:	31 c9                	xor    ecx,ecx
c00268f6:	e9 0d ff ff ff       	jmp    c0026808 <__divdi3+0x58>
c00268fb:	90                   	nop

c00268fc <__moddi3>:
c00268fc:	55                   	push   ebp
c00268fd:	57                   	push   edi
c00268fe:	56                   	push   esi
c00268ff:	53                   	push   ebx
c0026900:	83 ec 2c             	sub    esp,0x2c
c0026903:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026907:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002690b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002690f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026913:	85 db                	test   ebx,ebx
c0026915:	0f 88 85 00 00 00    	js     c00269a0 <__moddi3+0xa4>
c002691b:	89 de                	mov    esi,ebx
c002691d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026925:	89 d7                	mov    edi,edx
c0026927:	85 d2                	test   edx,edx
c0026929:	79 09                	jns    c0026934 <__moddi3+0x38>
c002692b:	f7 d8                	neg    eax
c002692d:	83 d2 00             	adc    edx,0x0
c0026930:	f7 da                	neg    edx
c0026932:	89 d7                	mov    edi,edx
c0026934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026938:	89 cd                	mov    ebp,ecx
c002693a:	85 ff                	test   edi,edi
c002693c:	75 52                	jne    c0026990 <__moddi3+0x94>
c002693e:	89 c3                	mov    ebx,eax
c0026940:	39 f0                	cmp    eax,esi
c0026942:	76 24                	jbe    c0026968 <__moddi3+0x6c>
c0026944:	89 c8                	mov    eax,ecx
c0026946:	89 f2                	mov    edx,esi
c0026948:	f7 f3                	div    ebx
c002694a:	89 d6                	mov    esi,edx
c002694c:	89 f0                	mov    eax,esi
c002694e:	31 d2                	xor    edx,edx
c0026950:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026954:	85 c9                	test   ecx,ecx
c0026956:	74 07                	je     c002695f <__moddi3+0x63>
c0026958:	f7 d8                	neg    eax
c002695a:	83 d2 00             	adc    edx,0x0
c002695d:	f7 da                	neg    edx
c002695f:	83 c4 2c             	add    esp,0x2c
c0026962:	5b                   	pop    ebx
c0026963:	5e                   	pop    esi
c0026964:	5f                   	pop    edi
c0026965:	5d                   	pop    ebp
c0026966:	c3                   	ret    
c0026967:	90                   	nop
c0026968:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002696c:	85 db                	test   ebx,ebx
c002696e:	75 0d                	jne    c002697d <__moddi3+0x81>
c0026970:	b8 01 00 00 00       	mov    eax,0x1
c0026975:	31 d2                	xor    edx,edx
c0026977:	f7 f7                	div    edi
c0026979:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002697d:	89 f0                	mov    eax,esi
c002697f:	31 d2                	xor    edx,edx
c0026981:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026985:	f7 f7                	div    edi
c0026987:	89 e8                	mov    eax,ebp
c0026989:	f7 f7                	div    edi
c002698b:	89 d6                	mov    esi,edx
c002698d:	eb bd                	jmp    c002694c <__moddi3+0x50>
c002698f:	90                   	nop
c0026990:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026994:	39 f7                	cmp    edi,esi
c0026996:	76 20                	jbe    c00269b8 <__moddi3+0xbc>
c0026998:	89 c8                	mov    eax,ecx
c002699a:	89 f2                	mov    edx,esi
c002699c:	eb b2                	jmp    c0026950 <__moddi3+0x54>
c002699e:	66 90                	xchg   ax,ax
c00269a0:	f7 d9                	neg    ecx
c00269a2:	83 d3 00             	adc    ebx,0x0
c00269a5:	f7 db                	neg    ebx
c00269a7:	89 de                	mov    esi,ebx
c00269a9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00269b1:	e9 6f ff ff ff       	jmp    c0026925 <__moddi3+0x29>
c00269b6:	66 90                	xchg   ax,ax
c00269b8:	0f bd c7             	bsr    eax,edi
c00269bb:	83 f0 1f             	xor    eax,0x1f
c00269be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00269c2:	75 24                	jne    c00269e8 <__moddi3+0xec>
c00269c4:	39 f7                	cmp    edi,esi
c00269c6:	72 06                	jb     c00269ce <__moddi3+0xd2>
c00269c8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00269cc:	77 0c                	ja     c00269da <__moddi3+0xde>
c00269ce:	89 e9                	mov    ecx,ebp
c00269d0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00269d4:	19 fe                	sbb    esi,edi
c00269d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00269da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00269de:	89 f2                	mov    edx,esi
c00269e0:	e9 6b ff ff ff       	jmp    c0026950 <__moddi3+0x54>
c00269e5:	8d 76 00             	lea    esi,[esi+0x0]
c00269e8:	b8 20 00 00 00       	mov    eax,0x20
c00269ed:	89 c2                	mov    edx,eax
c00269ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00269f3:	29 da                	sub    edx,ebx
c00269f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00269f9:	88 d9                	mov    cl,bl
c00269fb:	d3 e7                	shl    edi,cl
c00269fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026a01:	88 d1                	mov    cl,dl
c0026a03:	d3 e8                	shr    eax,cl
c0026a05:	09 c7                	or     edi,eax
c0026a07:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026a0b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026a0f:	89 d8                	mov    eax,ebx
c0026a11:	88 d9                	mov    cl,bl
c0026a13:	d3 e7                	shl    edi,cl
c0026a15:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a19:	89 f3                	mov    ebx,esi
c0026a1b:	88 d1                	mov    cl,dl
c0026a1d:	d3 eb                	shr    ebx,cl
c0026a1f:	89 c7                	mov    edi,eax
c0026a21:	88 c1                	mov    cl,al
c0026a23:	d3 e6                	shl    esi,cl
c0026a25:	89 e8                	mov    eax,ebp
c0026a27:	88 d1                	mov    cl,dl
c0026a29:	d3 e8                	shr    eax,cl
c0026a2b:	09 f0                	or     eax,esi
c0026a2d:	89 f9                	mov    ecx,edi
c0026a2f:	d3 e5                	shl    ebp,cl
c0026a31:	89 da                	mov    edx,ebx
c0026a33:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026a37:	89 d3                	mov    ebx,edx
c0026a39:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a3d:	89 c6                	mov    esi,eax
c0026a3f:	89 d1                	mov    ecx,edx
c0026a41:	39 d3                	cmp    ebx,edx
c0026a43:	72 27                	jb     c0026a6c <__moddi3+0x170>
c0026a45:	74 21                	je     c0026a68 <__moddi3+0x16c>
c0026a47:	29 f5                	sub    ebp,esi
c0026a49:	19 cb                	sbb    ebx,ecx
c0026a4b:	89 de                	mov    esi,ebx
c0026a4d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026a51:	d3 e6                	shl    esi,cl
c0026a53:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026a57:	89 f9                	mov    ecx,edi
c0026a59:	d3 ed                	shr    ebp,cl
c0026a5b:	09 ee                	or     esi,ebp
c0026a5d:	89 f0                	mov    eax,esi
c0026a5f:	d3 eb                	shr    ebx,cl
c0026a61:	89 da                	mov    edx,ebx
c0026a63:	e9 e8 fe ff ff       	jmp    c0026950 <__moddi3+0x54>
c0026a68:	39 c5                	cmp    ebp,eax
c0026a6a:	73 db                	jae    c0026a47 <__moddi3+0x14b>
c0026a6c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a70:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026a74:	89 d1                	mov    ecx,edx
c0026a76:	89 c6                	mov    esi,eax
c0026a78:	eb cd                	jmp    c0026a47 <__moddi3+0x14b>
c0026a7a:	66 90                	xchg   ax,ax

c0026a7c <__udivdi3>:
c0026a7c:	55                   	push   ebp
c0026a7d:	57                   	push   edi
c0026a7e:	56                   	push   esi
c0026a7f:	53                   	push   ebx
c0026a80:	83 ec 1c             	sub    esp,0x1c
c0026a83:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026a87:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026a8b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026a93:	85 d2                	test   edx,edx
c0026a95:	75 41                	jne    c0026ad8 <__udivdi3+0x5c>
c0026a97:	39 f7                	cmp    edi,esi
c0026a99:	76 15                	jbe    c0026ab0 <__udivdi3+0x34>
c0026a9b:	89 e8                	mov    eax,ebp
c0026a9d:	89 f2                	mov    edx,esi
c0026a9f:	f7 f7                	div    edi
c0026aa1:	31 db                	xor    ebx,ebx
c0026aa3:	89 da                	mov    edx,ebx
c0026aa5:	83 c4 1c             	add    esp,0x1c
c0026aa8:	5b                   	pop    ebx
c0026aa9:	5e                   	pop    esi
c0026aaa:	5f                   	pop    edi
c0026aab:	5d                   	pop    ebp
c0026aac:	c3                   	ret    
c0026aad:	8d 76 00             	lea    esi,[esi+0x0]
c0026ab0:	89 f9                	mov    ecx,edi
c0026ab2:	85 ff                	test   edi,edi
c0026ab4:	75 0b                	jne    c0026ac1 <__udivdi3+0x45>
c0026ab6:	b8 01 00 00 00       	mov    eax,0x1
c0026abb:	31 d2                	xor    edx,edx
c0026abd:	f7 f7                	div    edi
c0026abf:	89 c1                	mov    ecx,eax
c0026ac1:	31 d2                	xor    edx,edx
c0026ac3:	89 f0                	mov    eax,esi
c0026ac5:	f7 f1                	div    ecx
c0026ac7:	89 c3                	mov    ebx,eax
c0026ac9:	89 e8                	mov    eax,ebp
c0026acb:	f7 f1                	div    ecx
c0026acd:	89 da                	mov    edx,ebx
c0026acf:	83 c4 1c             	add    esp,0x1c
c0026ad2:	5b                   	pop    ebx
c0026ad3:	5e                   	pop    esi
c0026ad4:	5f                   	pop    edi
c0026ad5:	5d                   	pop    ebp
c0026ad6:	c3                   	ret    
c0026ad7:	90                   	nop
c0026ad8:	39 f2                	cmp    edx,esi
c0026ada:	77 1c                	ja     c0026af8 <__udivdi3+0x7c>
c0026adc:	0f bd da             	bsr    ebx,edx
c0026adf:	83 f3 1f             	xor    ebx,0x1f
c0026ae2:	75 24                	jne    c0026b08 <__udivdi3+0x8c>
c0026ae4:	39 f2                	cmp    edx,esi
c0026ae6:	72 08                	jb     c0026af0 <__udivdi3+0x74>
c0026ae8:	39 ef                	cmp    edi,ebp
c0026aea:	0f 87 84 00 00 00    	ja     c0026b74 <__udivdi3+0xf8>
c0026af0:	b8 01 00 00 00       	mov    eax,0x1
c0026af5:	eb ac                	jmp    c0026aa3 <__udivdi3+0x27>
c0026af7:	90                   	nop
c0026af8:	31 db                	xor    ebx,ebx
c0026afa:	31 c0                	xor    eax,eax
c0026afc:	89 da                	mov    edx,ebx
c0026afe:	83 c4 1c             	add    esp,0x1c
c0026b01:	5b                   	pop    ebx
c0026b02:	5e                   	pop    esi
c0026b03:	5f                   	pop    edi
c0026b04:	5d                   	pop    ebp
c0026b05:	c3                   	ret    
c0026b06:	66 90                	xchg   ax,ax
c0026b08:	b8 20 00 00 00       	mov    eax,0x20
c0026b0d:	29 d8                	sub    eax,ebx
c0026b0f:	88 d9                	mov    cl,bl
c0026b11:	d3 e2                	shl    edx,cl
c0026b13:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026b17:	89 fa                	mov    edx,edi
c0026b19:	88 c1                	mov    cl,al
c0026b1b:	d3 ea                	shr    edx,cl
c0026b1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b21:	09 d1                	or     ecx,edx
c0026b23:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b27:	88 d9                	mov    cl,bl
c0026b29:	d3 e7                	shl    edi,cl
c0026b2b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b2f:	89 f7                	mov    edi,esi
c0026b31:	88 c1                	mov    cl,al
c0026b33:	d3 ef                	shr    edi,cl
c0026b35:	88 d9                	mov    cl,bl
c0026b37:	d3 e6                	shl    esi,cl
c0026b39:	89 ea                	mov    edx,ebp
c0026b3b:	88 c1                	mov    cl,al
c0026b3d:	d3 ea                	shr    edx,cl
c0026b3f:	09 d6                	or     esi,edx
c0026b41:	89 f0                	mov    eax,esi
c0026b43:	89 fa                	mov    edx,edi
c0026b45:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b49:	89 d7                	mov    edi,edx
c0026b4b:	89 c6                	mov    esi,eax
c0026b4d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b51:	39 d7                	cmp    edi,edx
c0026b53:	72 13                	jb     c0026b68 <__udivdi3+0xec>
c0026b55:	74 09                	je     c0026b60 <__udivdi3+0xe4>
c0026b57:	89 f0                	mov    eax,esi
c0026b59:	31 db                	xor    ebx,ebx
c0026b5b:	e9 43 ff ff ff       	jmp    c0026aa3 <__udivdi3+0x27>
c0026b60:	88 d9                	mov    cl,bl
c0026b62:	d3 e5                	shl    ebp,cl
c0026b64:	39 c5                	cmp    ebp,eax
c0026b66:	73 ef                	jae    c0026b57 <__udivdi3+0xdb>
c0026b68:	8d 46 ff             	lea    eax,[esi-0x1]
c0026b6b:	31 db                	xor    ebx,ebx
c0026b6d:	e9 31 ff ff ff       	jmp    c0026aa3 <__udivdi3+0x27>
c0026b72:	66 90                	xchg   ax,ax
c0026b74:	31 c0                	xor    eax,eax
c0026b76:	e9 28 ff ff ff       	jmp    c0026aa3 <__udivdi3+0x27>
c0026b7b:	90                   	nop

c0026b7c <__umoddi3>:
c0026b7c:	55                   	push   ebp
c0026b7d:	57                   	push   edi
c0026b7e:	56                   	push   esi
c0026b7f:	53                   	push   ebx
c0026b80:	83 ec 1c             	sub    esp,0x1c
c0026b83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026b87:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b8b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026b8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026b93:	89 da                	mov    edx,ebx
c0026b95:	85 c0                	test   eax,eax
c0026b97:	75 37                	jne    c0026bd0 <__umoddi3+0x54>
c0026b99:	39 df                	cmp    edi,ebx
c0026b9b:	76 13                	jbe    c0026bb0 <__umoddi3+0x34>
c0026b9d:	89 f0                	mov    eax,esi
c0026b9f:	f7 f7                	div    edi
c0026ba1:	89 d0                	mov    eax,edx
c0026ba3:	31 d2                	xor    edx,edx
c0026ba5:	83 c4 1c             	add    esp,0x1c
c0026ba8:	5b                   	pop    ebx
c0026ba9:	5e                   	pop    esi
c0026baa:	5f                   	pop    edi
c0026bab:	5d                   	pop    ebp
c0026bac:	c3                   	ret    
c0026bad:	8d 76 00             	lea    esi,[esi+0x0]
c0026bb0:	89 fd                	mov    ebp,edi
c0026bb2:	85 ff                	test   edi,edi
c0026bb4:	75 0b                	jne    c0026bc1 <__umoddi3+0x45>
c0026bb6:	b8 01 00 00 00       	mov    eax,0x1
c0026bbb:	31 d2                	xor    edx,edx
c0026bbd:	f7 f7                	div    edi
c0026bbf:	89 c5                	mov    ebp,eax
c0026bc1:	89 d8                	mov    eax,ebx
c0026bc3:	31 d2                	xor    edx,edx
c0026bc5:	f7 f5                	div    ebp
c0026bc7:	89 f0                	mov    eax,esi
c0026bc9:	f7 f5                	div    ebp
c0026bcb:	89 d0                	mov    eax,edx
c0026bcd:	eb d4                	jmp    c0026ba3 <__umoddi3+0x27>
c0026bcf:	90                   	nop
c0026bd0:	89 f1                	mov    ecx,esi
c0026bd2:	39 d8                	cmp    eax,ebx
c0026bd4:	76 0a                	jbe    c0026be0 <__umoddi3+0x64>
c0026bd6:	89 f0                	mov    eax,esi
c0026bd8:	83 c4 1c             	add    esp,0x1c
c0026bdb:	5b                   	pop    ebx
c0026bdc:	5e                   	pop    esi
c0026bdd:	5f                   	pop    edi
c0026bde:	5d                   	pop    ebp
c0026bdf:	c3                   	ret    
c0026be0:	0f bd e8             	bsr    ebp,eax
c0026be3:	83 f5 1f             	xor    ebp,0x1f
c0026be6:	75 1c                	jne    c0026c04 <__umoddi3+0x88>
c0026be8:	39 d8                	cmp    eax,ebx
c0026bea:	72 04                	jb     c0026bf0 <__umoddi3+0x74>
c0026bec:	39 f7                	cmp    edi,esi
c0026bee:	77 08                	ja     c0026bf8 <__umoddi3+0x7c>
c0026bf0:	89 da                	mov    edx,ebx
c0026bf2:	29 fe                	sub    esi,edi
c0026bf4:	19 c2                	sbb    edx,eax
c0026bf6:	89 f1                	mov    ecx,esi
c0026bf8:	89 c8                	mov    eax,ecx
c0026bfa:	83 c4 1c             	add    esp,0x1c
c0026bfd:	5b                   	pop    ebx
c0026bfe:	5e                   	pop    esi
c0026bff:	5f                   	pop    edi
c0026c00:	5d                   	pop    ebp
c0026c01:	c3                   	ret    
c0026c02:	66 90                	xchg   ax,ax
c0026c04:	ba 20 00 00 00       	mov    edx,0x20
c0026c09:	29 ea                	sub    edx,ebp
c0026c0b:	89 e9                	mov    ecx,ebp
c0026c0d:	d3 e0                	shl    eax,cl
c0026c0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c13:	89 f8                	mov    eax,edi
c0026c15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026c19:	88 d1                	mov    cl,dl
c0026c1b:	d3 e8                	shr    eax,cl
c0026c1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026c21:	09 c1                	or     ecx,eax
c0026c23:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026c27:	89 e9                	mov    ecx,ebp
c0026c29:	d3 e7                	shl    edi,cl
c0026c2b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026c2f:	89 d8                	mov    eax,ebx
c0026c31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026c35:	88 d1                	mov    cl,dl
c0026c37:	d3 e8                	shr    eax,cl
c0026c39:	89 c7                	mov    edi,eax
c0026c3b:	89 e9                	mov    ecx,ebp
c0026c3d:	d3 e3                	shl    ebx,cl
c0026c3f:	89 f0                	mov    eax,esi
c0026c41:	88 d1                	mov    cl,dl
c0026c43:	d3 e8                	shr    eax,cl
c0026c45:	09 d8                	or     eax,ebx
c0026c47:	89 e9                	mov    ecx,ebp
c0026c49:	d3 e6                	shl    esi,cl
c0026c4b:	89 f3                	mov    ebx,esi
c0026c4d:	89 fa                	mov    edx,edi
c0026c4f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c53:	89 d1                	mov    ecx,edx
c0026c55:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c59:	89 c6                	mov    esi,eax
c0026c5b:	89 d7                	mov    edi,edx
c0026c5d:	39 d1                	cmp    ecx,edx
c0026c5f:	72 27                	jb     c0026c88 <__umoddi3+0x10c>
c0026c61:	74 21                	je     c0026c84 <__umoddi3+0x108>
c0026c63:	89 ca                	mov    edx,ecx
c0026c65:	29 f3                	sub    ebx,esi
c0026c67:	19 fa                	sbb    edx,edi
c0026c69:	89 d0                	mov    eax,edx
c0026c6b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026c6f:	d3 e0                	shl    eax,cl
c0026c71:	89 e9                	mov    ecx,ebp
c0026c73:	d3 eb                	shr    ebx,cl
c0026c75:	09 d8                	or     eax,ebx
c0026c77:	d3 ea                	shr    edx,cl
c0026c79:	83 c4 1c             	add    esp,0x1c
c0026c7c:	5b                   	pop    ebx
c0026c7d:	5e                   	pop    esi
c0026c7e:	5f                   	pop    edi
c0026c7f:	5d                   	pop    ebp
c0026c80:	c3                   	ret    
c0026c81:	8d 76 00             	lea    esi,[esi+0x0]
c0026c84:	39 c3                	cmp    ebx,eax
c0026c86:	73 db                	jae    c0026c63 <__umoddi3+0xe7>
c0026c88:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026c8c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026c90:	89 d7                	mov    edi,edx
c0026c92:	89 c6                	mov    esi,eax
c0026c94:	eb cd                	jmp    c0026c63 <__umoddi3+0xe7>

c0026c96 <__addsf3>:
c0026c96:	55                   	push   ebp
c0026c97:	89 e5                	mov    ebp,esp
c0026c99:	57                   	push   edi
c0026c9a:	56                   	push   esi
c0026c9b:	53                   	push   ebx
c0026c9c:	83 ec 08             	sub    esp,0x8
c0026c9f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026ca2:	89 fa                	mov    edx,edi
c0026ca4:	89 f8                	mov    eax,edi
c0026ca6:	c1 f8 17             	sar    eax,0x17
c0026ca9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026cac:	c1 e2 08             	shl    edx,0x8
c0026caf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026cb5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026cb8:	89 de                	mov    esi,ebx
c0026cba:	c1 fe 17             	sar    esi,0x17
c0026cbd:	c1 e3 08             	shl    ebx,0x8
c0026cc0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026cc6:	31 f0                	xor    eax,esi
c0026cc8:	0f 88 3b 01 00 00    	js     c0026e09 <__addsf3+0x173>
c0026cce:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026cd1:	29 f1                	sub    ecx,esi
c0026cd3:	85 c9                	test   ecx,ecx
c0026cd5:	7e 54                	jle    c0026d2b <__addsf3+0x95>
c0026cd7:	89 f0                	mov    eax,esi
c0026cd9:	84 c0                	test   al,al
c0026cdb:	75 10                	jne    c0026ced <__addsf3+0x57>
c0026cdd:	85 db                	test   ebx,ebx
c0026cdf:	0f 84 aa 02 00 00    	je     c0026f8f <__addsf3+0x2f9>
c0026ce5:	49                   	dec    ecx
c0026ce6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026ce9:	74 38                	je     c0026d23 <__addsf3+0x8d>
c0026ceb:	eb 13                	jmp    c0026d00 <__addsf3+0x6a>
c0026ced:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cf0:	f7 d0                	not    eax
c0026cf2:	84 c0                	test   al,al
c0026cf4:	0f 84 95 02 00 00    	je     c0026f8f <__addsf3+0x2f9>
c0026cfa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d00:	83 f9 1f             	cmp    ecx,0x1f
c0026d03:	0f 8f 86 02 00 00    	jg     c0026f8f <__addsf3+0x2f9>
c0026d09:	89 de                	mov    esi,ebx
c0026d0b:	d3 ee                	shr    esi,cl
c0026d0d:	b8 20 00 00 00       	mov    eax,0x20
c0026d12:	29 c8                	sub    eax,ecx
c0026d14:	89 c1                	mov    ecx,eax
c0026d16:	d3 e3                	shl    ebx,cl
c0026d18:	31 c0                	xor    eax,eax
c0026d1a:	85 db                	test   ebx,ebx
c0026d1c:	0f 95 c0             	setne  al
c0026d1f:	09 f0                	or     eax,esi
c0026d21:	01 d0                	add    eax,edx
c0026d23:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d26:	e9 b6 00 00 00       	jmp    c0026de1 <__addsf3+0x14b>
c0026d2b:	74 5c                	je     c0026d89 <__addsf3+0xf3>
c0026d2d:	89 f1                	mov    ecx,esi
c0026d2f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026d32:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d35:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d39:	75 14                	jne    c0026d4f <__addsf3+0xb9>
c0026d3b:	85 d2                	test   edx,edx
c0026d3d:	0f 84 4c 02 00 00    	je     c0026f8f <__addsf3+0x2f9>
c0026d43:	49                   	dec    ecx
c0026d44:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d47:	0f 84 94 00 00 00    	je     c0026de1 <__addsf3+0x14b>
c0026d4d:	eb 12                	jmp    c0026d61 <__addsf3+0xcb>
c0026d4f:	89 f0                	mov    eax,esi
c0026d51:	f7 d0                	not    eax
c0026d53:	84 c0                	test   al,al
c0026d55:	0f 84 34 02 00 00    	je     c0026f8f <__addsf3+0x2f9>
c0026d5b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d61:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d64:	83 f9 1f             	cmp    ecx,0x1f
c0026d67:	0f 8f 22 02 00 00    	jg     c0026f8f <__addsf3+0x2f9>
c0026d6d:	89 d7                	mov    edi,edx
c0026d6f:	d3 ef                	shr    edi,cl
c0026d71:	b8 20 00 00 00       	mov    eax,0x20
c0026d76:	29 c8                	sub    eax,ecx
c0026d78:	89 c1                	mov    ecx,eax
c0026d7a:	d3 e2                	shl    edx,cl
c0026d7c:	31 c0                	xor    eax,eax
c0026d7e:	85 d2                	test   edx,edx
c0026d80:	0f 95 c0             	setne  al
c0026d83:	09 f8                	or     eax,edi
c0026d85:	01 d8                	add    eax,ebx
c0026d87:	eb 58                	jmp    c0026de1 <__addsf3+0x14b>
c0026d89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d8c:	8d 70 01             	lea    esi,[eax+0x1]
c0026d8f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026d95:	75 32                	jne    c0026dc9 <__addsf3+0x133>
c0026d97:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d9b:	75 1f                	jne    c0026dbc <__addsf3+0x126>
c0026d9d:	85 d2                	test   edx,edx
c0026d9f:	0f 84 e0 01 00 00    	je     c0026f85 <__addsf3+0x2ef>
c0026da5:	85 db                	test   ebx,ebx
c0026da7:	0f 84 e2 01 00 00    	je     c0026f8f <__addsf3+0x2f9>
c0026dad:	89 d0                	mov    eax,edx
c0026daf:	01 d8                	add    eax,ebx
c0026db1:	0f 89 a9 01 00 00    	jns    c0026f60 <__addsf3+0x2ca>
c0026db7:	e9 9d 01 00 00       	jmp    c0026f59 <__addsf3+0x2c3>
c0026dbc:	85 d2                	test   edx,edx
c0026dbe:	0f 85 cb 01 00 00    	jne    c0026f8f <__addsf3+0x2f9>
c0026dc4:	e9 bc 01 00 00       	jmp    c0026f85 <__addsf3+0x2ef>
c0026dc9:	31 c0                	xor    eax,eax
c0026dcb:	89 f1                	mov    ecx,esi
c0026dcd:	f7 d1                	not    ecx
c0026dcf:	84 c9                	test   cl,cl
c0026dd1:	0f 84 90 01 00 00    	je     c0026f67 <__addsf3+0x2d1>
c0026dd7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026dda:	d1 e8                	shr    eax,1
c0026ddc:	e9 86 01 00 00       	jmp    c0026f67 <__addsf3+0x2d1>
c0026de1:	85 c0                	test   eax,eax
c0026de3:	0f 89 7e 01 00 00    	jns    c0026f67 <__addsf3+0x2d1>
c0026de9:	46                   	inc    esi
c0026dea:	89 f2                	mov    edx,esi
c0026dec:	f7 d2                	not    edx
c0026dee:	84 d2                	test   dl,dl
c0026df0:	0f 84 6f 01 00 00    	je     c0026f65 <__addsf3+0x2cf>
c0026df6:	89 c2                	mov    edx,eax
c0026df8:	83 e2 01             	and    edx,0x1
c0026dfb:	d1 e8                	shr    eax,1
c0026dfd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026e02:	09 d0                	or     eax,edx
c0026e04:	e9 5e 01 00 00       	jmp    c0026f67 <__addsf3+0x2d1>
c0026e09:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026e0d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026e10:	89 f0                	mov    eax,esi
c0026e12:	0f b6 c0             	movzx  eax,al
c0026e15:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026e18:	29 c1                	sub    ecx,eax
c0026e1a:	85 c9                	test   ecx,ecx
c0026e1c:	7e 55                	jle    c0026e73 <__addsf3+0x1dd>
c0026e1e:	85 c0                	test   eax,eax
c0026e20:	75 11                	jne    c0026e33 <__addsf3+0x19d>
c0026e22:	85 db                	test   ebx,ebx
c0026e24:	0f 84 65 01 00 00    	je     c0026f8f <__addsf3+0x2f9>
c0026e2a:	49                   	dec    ecx
c0026e2b:	75 19                	jne    c0026e46 <__addsf3+0x1b0>
c0026e2d:	89 d0                	mov    eax,edx
c0026e2f:	29 d8                	sub    eax,ebx
c0026e31:	eb 38                	jmp    c0026e6b <__addsf3+0x1d5>
c0026e33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e36:	f7 d0                	not    eax
c0026e38:	84 c0                	test   al,al
c0026e3a:	0f 84 4f 01 00 00    	je     c0026f8f <__addsf3+0x2f9>
c0026e40:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e46:	83 f9 1f             	cmp    ecx,0x1f
c0026e49:	0f 8f 40 01 00 00    	jg     c0026f8f <__addsf3+0x2f9>
c0026e4f:	89 de                	mov    esi,ebx
c0026e51:	d3 ee                	shr    esi,cl
c0026e53:	b8 20 00 00 00       	mov    eax,0x20
c0026e58:	29 c8                	sub    eax,ecx
c0026e5a:	89 c1                	mov    ecx,eax
c0026e5c:	d3 e3                	shl    ebx,cl
c0026e5e:	31 c0                	xor    eax,eax
c0026e60:	85 db                	test   ebx,ebx
c0026e62:	0f 95 c0             	setne  al
c0026e65:	09 f0                	or     eax,esi
c0026e67:	29 c2                	sub    edx,eax
c0026e69:	89 d0                	mov    eax,edx
c0026e6b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e6e:	e9 af 00 00 00       	jmp    c0026f22 <__addsf3+0x28c>
c0026e73:	74 5c                	je     c0026ed1 <__addsf3+0x23b>
c0026e75:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026e78:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e7b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e7f:	75 14                	jne    c0026e95 <__addsf3+0x1ff>
c0026e81:	85 d2                	test   edx,edx
c0026e83:	0f 84 06 01 00 00    	je     c0026f8f <__addsf3+0x2f9>
c0026e89:	48                   	dec    eax
c0026e8a:	75 1b                	jne    c0026ea7 <__addsf3+0x211>
c0026e8c:	89 d8                	mov    eax,ebx
c0026e8e:	29 d0                	sub    eax,edx
c0026e90:	e9 8d 00 00 00       	jmp    c0026f22 <__addsf3+0x28c>
c0026e95:	89 f1                	mov    ecx,esi
c0026e97:	f7 d1                	not    ecx
c0026e99:	84 c9                	test   cl,cl
c0026e9b:	0f 84 ee 00 00 00    	je     c0026f8f <__addsf3+0x2f9>
c0026ea1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ea7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026eaa:	83 f8 1f             	cmp    eax,0x1f
c0026ead:	0f 8f dc 00 00 00    	jg     c0026f8f <__addsf3+0x2f9>
c0026eb3:	89 d7                	mov    edi,edx
c0026eb5:	88 c1                	mov    cl,al
c0026eb7:	d3 ef                	shr    edi,cl
c0026eb9:	b9 20 00 00 00       	mov    ecx,0x20
c0026ebe:	29 c1                	sub    ecx,eax
c0026ec0:	d3 e2                	shl    edx,cl
c0026ec2:	31 c0                	xor    eax,eax
c0026ec4:	85 d2                	test   edx,edx
c0026ec6:	0f 95 c0             	setne  al
c0026ec9:	09 f8                	or     eax,edi
c0026ecb:	29 c3                	sub    ebx,eax
c0026ecd:	89 d8                	mov    eax,ebx
c0026ecf:	eb 51                	jmp    c0026f22 <__addsf3+0x28c>
c0026ed1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ed4:	40                   	inc    eax
c0026ed5:	a8 fe                	test   al,0xfe
c0026ed7:	75 3d                	jne    c0026f16 <__addsf3+0x280>
c0026ed9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026edd:	0f 85 a7 00 00 00    	jne    c0026f8a <__addsf3+0x2f4>
c0026ee3:	85 d2                	test   edx,edx
c0026ee5:	75 12                	jne    c0026ef9 <__addsf3+0x263>
c0026ee7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026eea:	85 db                	test   ebx,ebx
c0026eec:	0f 85 9d 00 00 00    	jne    c0026f8f <__addsf3+0x2f9>
c0026ef2:	31 ff                	xor    edi,edi
c0026ef4:	e9 96 00 00 00       	jmp    c0026f8f <__addsf3+0x2f9>
c0026ef9:	85 db                	test   ebx,ebx
c0026efb:	0f 84 8e 00 00 00    	je     c0026f8f <__addsf3+0x2f9>
c0026f01:	89 d0                	mov    eax,edx
c0026f03:	29 d8                	sub    eax,ebx
c0026f05:	79 06                	jns    c0026f0d <__addsf3+0x277>
c0026f07:	89 d8                	mov    eax,ebx
c0026f09:	29 d0                	sub    eax,edx
c0026f0b:	eb 5a                	jmp    c0026f67 <__addsf3+0x2d1>
c0026f0d:	bf 00 00 00 00       	mov    edi,0x0
c0026f12:	74 7b                	je     c0026f8f <__addsf3+0x2f9>
c0026f14:	eb 4a                	jmp    c0026f60 <__addsf3+0x2ca>
c0026f16:	89 d0                	mov    eax,edx
c0026f18:	29 d8                	sub    eax,ebx
c0026f1a:	79 12                	jns    c0026f2e <__addsf3+0x298>
c0026f1c:	89 d8                	mov    eax,ebx
c0026f1e:	29 d0                	sub    eax,edx
c0026f20:	eb 09                	jmp    c0026f2b <__addsf3+0x295>
c0026f22:	85 c0                	test   eax,eax
c0026f24:	79 41                	jns    c0026f67 <__addsf3+0x2d1>
c0026f26:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f2b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026f2e:	31 f6                	xor    esi,esi
c0026f30:	85 c0                	test   eax,eax
c0026f32:	74 33                	je     c0026f67 <__addsf3+0x2d1>
c0026f34:	0f bd c8             	bsr    ecx,eax
c0026f37:	83 f1 1f             	xor    ecx,0x1f
c0026f3a:	d3 e0                	shl    eax,cl
c0026f3c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026f40:	39 ca                	cmp    edx,ecx
c0026f42:	7f 10                	jg     c0026f54 <__addsf3+0x2be>
c0026f44:	29 d1                	sub    ecx,edx
c0026f46:	41                   	inc    ecx
c0026f47:	d3 e8                	shr    eax,cl
c0026f49:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f4c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026f52:	eb 13                	jmp    c0026f67 <__addsf3+0x2d1>
c0026f54:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f57:	29 ce                	sub    esi,ecx
c0026f59:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f5e:	eb 07                	jmp    c0026f67 <__addsf3+0x2d1>
c0026f60:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f63:	eb 02                	jmp    c0026f67 <__addsf3+0x2d1>
c0026f65:	31 c0                	xor    eax,eax
c0026f67:	89 c2                	mov    edx,eax
c0026f69:	c1 ea 08             	shr    edx,0x8
c0026f6c:	a8 7f                	test   al,0x7f
c0026f6e:	0f 95 c1             	setne  cl
c0026f71:	09 d1                	or     ecx,edx
c0026f73:	83 e1 01             	and    ecx,0x1
c0026f76:	c1 e8 07             	shr    eax,0x7
c0026f79:	21 c8                	and    eax,ecx
c0026f7b:	c1 e6 17             	shl    esi,0x17
c0026f7e:	09 d6                	or     esi,edx
c0026f80:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026f83:	eb 0a                	jmp    c0026f8f <__addsf3+0x2f9>
c0026f85:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f88:	eb 05                	jmp    c0026f8f <__addsf3+0x2f9>
c0026f8a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026f8f:	89 f8                	mov    eax,edi
c0026f91:	5a                   	pop    edx
c0026f92:	59                   	pop    ecx
c0026f93:	5b                   	pop    ebx
c0026f94:	5e                   	pop    esi
c0026f95:	5f                   	pop    edi
c0026f96:	5d                   	pop    ebp
c0026f97:	c3                   	ret    

c0026f98 <__subsf3>:
c0026f98:	55                   	push   ebp
c0026f99:	89 e5                	mov    ebp,esp
c0026f9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f9e:	05 00 00 00 80       	add    eax,0x80000000
c0026fa3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026fa6:	5d                   	pop    ebp
c0026fa7:	e9 ea fc ff ff       	jmp    c0026c96 <__addsf3>

c0026fac <__negsf2>:
c0026fac:	55                   	push   ebp
c0026fad:	89 e5                	mov    ebp,esp
c0026faf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026fb2:	05 00 00 00 80       	add    eax,0x80000000
c0026fb7:	5d                   	pop    ebp
c0026fb8:	c3                   	ret    

c0026fb9 <__mulsf3>:
c0026fb9:	55                   	push   ebp
c0026fba:	89 e5                	mov    ebp,esp
c0026fbc:	57                   	push   edi
c0026fbd:	56                   	push   esi
c0026fbe:	53                   	push   ebx
c0026fbf:	83 ec 1c             	sub    esp,0x1c
c0026fc2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026fc5:	89 f0                	mov    eax,esi
c0026fc7:	89 f1                	mov    ecx,esi
c0026fc9:	c1 f9 17             	sar    ecx,0x17
c0026fcc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026fcf:	c1 e0 08             	shl    eax,0x8
c0026fd2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026fd7:	89 c1                	mov    ecx,eax
c0026fd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fdc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026fdf:	89 c7                	mov    edi,eax
c0026fe1:	c1 ff 17             	sar    edi,0x17
c0026fe4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026fe8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026feb:	89 f8                	mov    eax,edi
c0026fed:	0f b6 c0             	movzx  eax,al
c0026ff0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026ff3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026ff7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026ffa:	42                   	inc    edx
c0026ffb:	80 e2 fe             	and    dl,0xfe
c0026ffe:	75 7b                	jne    c002707b <__mulsf3+0xc2>
c0027000:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027004:	74 54                	je     c002705a <__mulsf3+0xa1>
c0027006:	85 c9                	test   ecx,ecx
c0027008:	0f 85 64 01 00 00    	jne    c0027172 <__mulsf3+0x1b9>
c002700e:	8d 57 01             	lea    edx,[edi+0x1]
c0027011:	80 e2 fe             	and    dl,0xfe
c0027014:	75 1f                	jne    c0027035 <__mulsf3+0x7c>
c0027016:	85 c0                	test   eax,eax
c0027018:	b8 00 00 00 00       	mov    eax,0x0
c002701d:	74 29                	je     c0027048 <__mulsf3+0x8f>
c002701f:	53                   	push   ebx
c0027020:	53                   	push   ebx
c0027021:	50                   	push   eax
c0027022:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027025:	e8 96 05 00 00       	call   c00275c0 <__nesf2>
c002702a:	83 c4 10             	add    esp,0x10
c002702d:	85 c0                	test   eax,eax
c002702f:	0f 85 3a 01 00 00    	jne    c002716f <__mulsf3+0x1b6>
c0027035:	85 ff                	test   edi,edi
c0027037:	0f 89 35 01 00 00    	jns    c0027172 <__mulsf3+0x1b9>
c002703d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027043:	e9 2a 01 00 00       	jmp    c0027172 <__mulsf3+0x1b9>
c0027048:	51                   	push   ecx
c0027049:	51                   	push   ecx
c002704a:	50                   	push   eax
c002704b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002704e:	e8 6d 05 00 00       	call   c00275c0 <__nesf2>
c0027053:	83 c4 10             	add    esp,0x10
c0027056:	85 c0                	test   eax,eax
c0027058:	eb 15                	jmp    c002706f <__mulsf3+0xb6>
c002705a:	85 c9                	test   ecx,ecx
c002705c:	74 0b                	je     c0027069 <__mulsf3+0xb0>
c002705e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027061:	01 c9                	add    ecx,ecx
c0027063:	78 16                	js     c002707b <__mulsf3+0xc2>
c0027065:	89 d3                	mov    ebx,edx
c0027067:	eb f5                	jmp    c002705e <__mulsf3+0xa5>
c0027069:	89 f8                	mov    eax,edi
c002706b:	f7 d0                	not    eax
c002706d:	84 c0                	test   al,al
c002706f:	75 c4                	jne    c0027035 <__mulsf3+0x7c>
c0027071:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027076:	e9 f7 00 00 00       	jmp    c0027172 <__mulsf3+0x1b9>
c002707b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002707e:	c1 e6 08             	shl    esi,0x8
c0027081:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027087:	8d 57 01             	lea    edx,[edi+0x1]
c002708a:	80 e2 fe             	and    dl,0xfe
c002708d:	75 63                	jne    c00270f2 <__mulsf3+0x139>
c002708f:	85 c0                	test   eax,eax
c0027091:	74 2f                	je     c00270c2 <__mulsf3+0x109>
c0027093:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027097:	0f 89 d2 00 00 00    	jns    c002716f <__mulsf3+0x1b6>
c002709d:	52                   	push   edx
c002709e:	52                   	push   edx
c002709f:	6a 00                	push   0x0
c00270a1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270a4:	e8 dc 04 00 00       	call   c0027585 <__eqsf2>
c00270a9:	83 c4 10             	add    esp,0x10
c00270ac:	85 c0                	test   eax,eax
c00270ae:	0f 85 bb 00 00 00    	jne    c002716f <__mulsf3+0x1b6>
c00270b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270b7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00270bd:	e9 b0 00 00 00       	jmp    c0027172 <__mulsf3+0x1b9>
c00270c2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00270c5:	50                   	push   eax
c00270c6:	50                   	push   eax
c00270c7:	6a 00                	push   0x0
c00270c9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270cc:	e8 b4 04 00 00       	call   c0027585 <__eqsf2>
c00270d1:	83 c4 10             	add    esp,0x10
c00270d4:	85 c0                	test   eax,eax
c00270d6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270d9:	75 0c                	jne    c00270e7 <__mulsf3+0x12e>
c00270db:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00270df:	0f 89 8a 00 00 00    	jns    c002716f <__mulsf3+0x1b6>
c00270e5:	eb cd                	jmp    c00270b4 <__mulsf3+0xfb>
c00270e7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00270ea:	01 f6                	add    esi,esi
c00270ec:	78 04                	js     c00270f2 <__mulsf3+0x139>
c00270ee:	89 c3                	mov    ebx,eax
c00270f0:	eb f5                	jmp    c00270e7 <__mulsf3+0x12e>
c00270f2:	89 c8                	mov    eax,ecx
c00270f4:	0d 00 00 00 80       	or     eax,0x80000000
c00270f9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00270ff:	f7 e6                	mul    esi
c0027101:	85 c0                	test   eax,eax
c0027103:	0f 95 c0             	setne  al
c0027106:	0f b6 c0             	movzx  eax,al
c0027109:	09 c2                	or     edx,eax
c002710b:	78 03                	js     c0027110 <__mulsf3+0x157>
c002710d:	01 d2                	add    edx,edx
c002710f:	4b                   	dec    ebx
c0027110:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027116:	7f 22                	jg     c002713a <__mulsf3+0x181>
c0027118:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002711e:	85 db                	test   ebx,ebx
c0027120:	7f 23                	jg     c0027145 <__mulsf3+0x18c>
c0027122:	83 fb e9             	cmp    ebx,0xffffffe9
c0027125:	7c 1a                	jl     c0027141 <__mulsf3+0x188>
c0027127:	81 ca 00 00 00 80    	or     edx,0x80000000
c002712d:	b9 01 00 00 00       	mov    ecx,0x1
c0027132:	29 d9                	sub    ecx,ebx
c0027134:	d3 ea                	shr    edx,cl
c0027136:	31 db                	xor    ebx,ebx
c0027138:	eb 0b                	jmp    c0027145 <__mulsf3+0x18c>
c002713a:	bb ff 00 00 00       	mov    ebx,0xff
c002713f:	eb 02                	jmp    c0027143 <__mulsf3+0x18a>
c0027141:	31 db                	xor    ebx,ebx
c0027143:	31 d2                	xor    edx,edx
c0027145:	89 d0                	mov    eax,edx
c0027147:	c1 e8 08             	shr    eax,0x8
c002714a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002714d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027153:	09 fb                	or     ebx,edi
c0027155:	c1 e3 17             	shl    ebx,0x17
c0027158:	09 c3                	or     ebx,eax
c002715a:	f6 c2 7f             	test   dl,0x7f
c002715d:	0f 95 c1             	setne  cl
c0027160:	09 c8                	or     eax,ecx
c0027162:	83 e0 01             	and    eax,0x1
c0027165:	c1 ea 07             	shr    edx,0x7
c0027168:	21 c2                	and    edx,eax
c002716a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002716d:	eb 03                	jmp    c0027172 <__mulsf3+0x1b9>
c002716f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027172:	89 f0                	mov    eax,esi
c0027174:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027177:	5b                   	pop    ebx
c0027178:	5e                   	pop    esi
c0027179:	5f                   	pop    edi
c002717a:	5d                   	pop    ebp
c002717b:	c3                   	ret    

c002717c <__divsf3>:
c002717c:	55                   	push   ebp
c002717d:	89 e5                	mov    ebp,esp
c002717f:	57                   	push   edi
c0027180:	56                   	push   esi
c0027181:	53                   	push   ebx
c0027182:	83 ec 1c             	sub    esp,0x1c
c0027185:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027188:	89 d8                	mov    eax,ebx
c002718a:	89 d9                	mov    ecx,ebx
c002718c:	c1 f9 17             	sar    ecx,0x17
c002718f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027192:	c1 e0 08             	shl    eax,0x8
c0027195:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002719a:	89 c1                	mov    ecx,eax
c002719c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002719f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00271a2:	89 c7                	mov    edi,eax
c00271a4:	c1 ff 17             	sar    edi,0x17
c00271a7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00271ab:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00271ae:	89 f8                	mov    eax,edi
c00271b0:	0f b6 c0             	movzx  eax,al
c00271b3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00271b6:	29 c6                	sub    esi,eax
c00271b8:	83 c6 7f             	add    esi,0x7f
c00271bb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00271be:	42                   	inc    edx
c00271bf:	80 e2 fe             	and    dl,0xfe
c00271c2:	0f 85 9c 00 00 00    	jne    c0027264 <__divsf3+0xe8>
c00271c8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00271cc:	74 33                	je     c0027201 <__divsf3+0x85>
c00271ce:	85 c9                	test   ecx,ecx
c00271d0:	0f 85 c7 01 00 00    	jne    c002739d <__divsf3+0x221>
c00271d6:	8d 57 01             	lea    edx,[edi+0x1]
c00271d9:	80 e2 fe             	and    dl,0xfe
c00271dc:	75 2f                	jne    c002720d <__divsf3+0x91>
c00271de:	85 c0                	test   eax,eax
c00271e0:	74 2b                	je     c002720d <__divsf3+0x91>
c00271e2:	51                   	push   ecx
c00271e3:	51                   	push   ecx
c00271e4:	6a 00                	push   0x0
c00271e6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271e9:	e8 d2 03 00 00       	call   c00275c0 <__nesf2>
c00271ee:	83 c4 10             	add    esp,0x10
c00271f1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00271f4:	85 c0                	test   eax,eax
c00271f6:	0f 85 a1 01 00 00    	jne    c002739d <__divsf3+0x221>
c00271fc:	e9 92 01 00 00       	jmp    c0027393 <__divsf3+0x217>
c0027201:	85 c9                	test   ecx,ecx
c0027203:	75 1b                	jne    c0027220 <__divsf3+0xa4>
c0027205:	8d 57 01             	lea    edx,[edi+0x1]
c0027208:	80 e2 fe             	and    dl,0xfe
c002720b:	74 1e                	je     c002722b <__divsf3+0xaf>
c002720d:	85 ff                	test   edi,edi
c002720f:	0f 89 88 01 00 00    	jns    c002739d <__divsf3+0x221>
c0027215:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002721b:	e9 7d 01 00 00       	jmp    c002739d <__divsf3+0x221>
c0027220:	8d 56 ff             	lea    edx,[esi-0x1]
c0027223:	01 c9                	add    ecx,ecx
c0027225:	78 3d                	js     c0027264 <__divsf3+0xe8>
c0027227:	89 d6                	mov    esi,edx
c0027229:	eb f5                	jmp    c0027220 <__divsf3+0xa4>
c002722b:	85 c0                	test   eax,eax
c002722d:	b8 00 00 00 00       	mov    eax,0x0
c0027232:	74 18                	je     c002724c <__divsf3+0xd0>
c0027234:	52                   	push   edx
c0027235:	52                   	push   edx
c0027236:	50                   	push   eax
c0027237:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002723a:	e8 81 03 00 00       	call   c00275c0 <__nesf2>
c002723f:	83 c4 10             	add    esp,0x10
c0027242:	85 c0                	test   eax,eax
c0027244:	0f 85 50 01 00 00    	jne    c002739a <__divsf3+0x21e>
c002724a:	eb c1                	jmp    c002720d <__divsf3+0x91>
c002724c:	56                   	push   esi
c002724d:	56                   	push   esi
c002724e:	50                   	push   eax
c002724f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027252:	e8 69 03 00 00       	call   c00275c0 <__nesf2>
c0027257:	83 c4 10             	add    esp,0x10
c002725a:	85 c0                	test   eax,eax
c002725c:	0f 84 31 01 00 00    	je     c0027393 <__divsf3+0x217>
c0027262:	eb a9                	jmp    c002720d <__divsf3+0x91>
c0027264:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027267:	c1 e3 08             	shl    ebx,0x8
c002726a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027270:	8d 57 01             	lea    edx,[edi+0x1]
c0027273:	80 e2 fe             	and    dl,0xfe
c0027276:	75 71                	jne    c00272e9 <__divsf3+0x16d>
c0027278:	85 c0                	test   eax,eax
c002727a:	ba 00 00 00 00       	mov    edx,0x0
c002727f:	74 2f                	je     c00272b0 <__divsf3+0x134>
c0027281:	51                   	push   ecx
c0027282:	51                   	push   ecx
c0027283:	52                   	push   edx
c0027284:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027287:	e8 f9 02 00 00       	call   c0027585 <__eqsf2>
c002728c:	83 c4 10             	add    esp,0x10
c002728f:	85 c0                	test   eax,eax
c0027291:	0f 85 03 01 00 00    	jne    c002739a <__divsf3+0x21e>
c0027297:	31 d2                	xor    edx,edx
c0027299:	89 d3                	mov    ebx,edx
c002729b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002729e:	31 f8                	xor    eax,edi
c00272a0:	0f 89 f7 00 00 00    	jns    c002739d <__divsf3+0x221>
c00272a6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00272ab:	e9 ed 00 00 00       	jmp    c002739d <__divsf3+0x221>
c00272b0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00272b3:	50                   	push   eax
c00272b4:	50                   	push   eax
c00272b5:	52                   	push   edx
c00272b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272b9:	e8 c7 02 00 00       	call   c0027585 <__eqsf2>
c00272be:	83 c4 10             	add    esp,0x10
c00272c1:	85 c0                	test   eax,eax
c00272c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00272c6:	75 16                	jne    c00272de <__divsf3+0x162>
c00272c8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00272cb:	31 fb                	xor    ebx,edi
c00272cd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00272d3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00272d9:	e9 bf 00 00 00       	jmp    c002739d <__divsf3+0x221>
c00272de:	8d 46 01             	lea    eax,[esi+0x1]
c00272e1:	01 db                	add    ebx,ebx
c00272e3:	78 04                	js     c00272e9 <__divsf3+0x16d>
c00272e5:	89 c6                	mov    esi,eax
c00272e7:	eb f5                	jmp    c00272de <__divsf3+0x162>
c00272e9:	89 c8                	mov    eax,ecx
c00272eb:	0d 00 00 00 80       	or     eax,0x80000000
c00272f0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00272f6:	31 d2                	xor    edx,edx
c00272f8:	39 d8                	cmp    eax,ebx
c00272fa:	72 07                	jb     c0027303 <__divsf3+0x187>
c00272fc:	29 d8                	sub    eax,ebx
c00272fe:	ba 01 00 00 00       	mov    edx,0x1
c0027303:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002730a:	01 d2                	add    edx,edx
c002730c:	89 c1                	mov    ecx,eax
c002730e:	01 c0                	add    eax,eax
c0027310:	85 c9                	test   ecx,ecx
c0027312:	78 04                	js     c0027318 <__divsf3+0x19c>
c0027314:	39 c3                	cmp    ebx,eax
c0027316:	77 05                	ja     c002731d <__divsf3+0x1a1>
c0027318:	29 d8                	sub    eax,ebx
c002731a:	83 ca 01             	or     edx,0x1
c002731d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027320:	75 e8                	jne    c002730a <__divsf3+0x18e>
c0027322:	85 c0                	test   eax,eax
c0027324:	0f 95 c0             	setne  al
c0027327:	0f b6 c0             	movzx  eax,al
c002732a:	c1 e2 06             	shl    edx,0x6
c002732d:	09 c2                	or     edx,eax
c002732f:	78 03                	js     c0027334 <__divsf3+0x1b8>
c0027331:	01 d2                	add    edx,edx
c0027333:	4e                   	dec    esi
c0027334:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002733a:	7f 22                	jg     c002735e <__divsf3+0x1e2>
c002733c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027342:	85 f6                	test   esi,esi
c0027344:	7f 23                	jg     c0027369 <__divsf3+0x1ed>
c0027346:	83 fe e9             	cmp    esi,0xffffffe9
c0027349:	7c 1a                	jl     c0027365 <__divsf3+0x1e9>
c002734b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027351:	b9 01 00 00 00       	mov    ecx,0x1
c0027356:	29 f1                	sub    ecx,esi
c0027358:	d3 ea                	shr    edx,cl
c002735a:	31 f6                	xor    esi,esi
c002735c:	eb 0b                	jmp    c0027369 <__divsf3+0x1ed>
c002735e:	be ff 00 00 00       	mov    esi,0xff
c0027363:	eb 02                	jmp    c0027367 <__divsf3+0x1eb>
c0027365:	31 f6                	xor    esi,esi
c0027367:	31 d2                	xor    edx,edx
c0027369:	89 d0                	mov    eax,edx
c002736b:	c1 e8 08             	shr    eax,0x8
c002736e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027371:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027377:	09 fe                	or     esi,edi
c0027379:	c1 e6 17             	shl    esi,0x17
c002737c:	09 c6                	or     esi,eax
c002737e:	f6 c2 7f             	test   dl,0x7f
c0027381:	0f 95 c1             	setne  cl
c0027384:	09 c8                	or     eax,ecx
c0027386:	83 e0 01             	and    eax,0x1
c0027389:	c1 ea 07             	shr    edx,0x7
c002738c:	21 c2                	and    edx,eax
c002738e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027391:	eb 0a                	jmp    c002739d <__divsf3+0x221>
c0027393:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027398:	eb 03                	jmp    c002739d <__divsf3+0x221>
c002739a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002739d:	89 d8                	mov    eax,ebx
c002739f:	8d 65 f4             	lea    esp,[ebp-0xc]
c00273a2:	5b                   	pop    ebx
c00273a3:	5e                   	pop    esi
c00273a4:	5f                   	pop    edi
c00273a5:	5d                   	pop    ebp
c00273a6:	c3                   	ret    

c00273a7 <__floatsisf>:
c00273a7:	55                   	push   ebp
c00273a8:	89 e5                	mov    ebp,esp
c00273aa:	53                   	push   ebx
c00273ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273ae:	85 d2                	test   edx,edx
c00273b0:	7e 2b                	jle    c00273dd <__floatsisf+0x36>
c00273b2:	0f bd ca             	bsr    ecx,edx
c00273b5:	83 f1 1f             	xor    ecx,0x1f
c00273b8:	d3 e2                	shl    edx,cl
c00273ba:	89 d0                	mov    eax,edx
c00273bc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273c1:	89 c3                	mov    ebx,eax
c00273c3:	c1 eb 08             	shr    ebx,0x8
c00273c6:	80 e2 7f             	and    dl,0x7f
c00273c9:	0f 95 c2             	setne  dl
c00273cc:	09 da                	or     edx,ebx
c00273ce:	83 e2 01             	and    edx,0x1
c00273d1:	c1 e8 07             	shr    eax,0x7
c00273d4:	21 c2                	and    edx,eax
c00273d6:	b8 9e 00 00 00       	mov    eax,0x9e
c00273db:	eb 32                	jmp    c002740f <__floatsisf+0x68>
c00273dd:	b8 00 00 00 00       	mov    eax,0x0
c00273e2:	74 34                	je     c0027418 <__floatsisf+0x71>
c00273e4:	f7 da                	neg    edx
c00273e6:	0f bd ca             	bsr    ecx,edx
c00273e9:	83 f1 1f             	xor    ecx,0x1f
c00273ec:	d3 e2                	shl    edx,cl
c00273ee:	89 d0                	mov    eax,edx
c00273f0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273f5:	89 c3                	mov    ebx,eax
c00273f7:	c1 eb 08             	shr    ebx,0x8
c00273fa:	80 e2 7f             	and    dl,0x7f
c00273fd:	0f 95 c2             	setne  dl
c0027400:	09 da                	or     edx,ebx
c0027402:	83 e2 01             	and    edx,0x1
c0027405:	c1 e8 07             	shr    eax,0x7
c0027408:	21 c2                	and    edx,eax
c002740a:	b8 9e 01 00 00       	mov    eax,0x19e
c002740f:	29 c8                	sub    eax,ecx
c0027411:	c1 e0 17             	shl    eax,0x17
c0027414:	09 d8                	or     eax,ebx
c0027416:	01 d0                	add    eax,edx
c0027418:	5b                   	pop    ebx
c0027419:	5d                   	pop    ebp
c002741a:	c3                   	ret    

c002741b <__floatunsisf>:
c002741b:	55                   	push   ebp
c002741c:	89 e5                	mov    ebp,esp
c002741e:	53                   	push   ebx
c002741f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027422:	31 c0                	xor    eax,eax
c0027424:	85 d2                	test   edx,edx
c0027426:	74 32                	je     c002745a <__floatunsisf+0x3f>
c0027428:	0f bd ca             	bsr    ecx,edx
c002742b:	83 f1 1f             	xor    ecx,0x1f
c002742e:	d3 e2                	shl    edx,cl
c0027430:	89 d0                	mov    eax,edx
c0027432:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027437:	89 c3                	mov    ebx,eax
c0027439:	c1 eb 08             	shr    ebx,0x8
c002743c:	80 e2 7f             	and    dl,0x7f
c002743f:	0f 95 c2             	setne  dl
c0027442:	09 da                	or     edx,ebx
c0027444:	83 e2 01             	and    edx,0x1
c0027447:	c1 e8 07             	shr    eax,0x7
c002744a:	21 c2                	and    edx,eax
c002744c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027451:	29 c8                	sub    eax,ecx
c0027453:	c1 e0 17             	shl    eax,0x17
c0027456:	09 d8                	or     eax,ebx
c0027458:	01 d0                	add    eax,edx
c002745a:	5b                   	pop    ebx
c002745b:	5d                   	pop    ebp
c002745c:	c3                   	ret    

c002745d <__fixsfsi>:
c002745d:	55                   	push   ebp
c002745e:	89 e5                	mov    ebp,esp
c0027460:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027463:	89 d1                	mov    ecx,edx
c0027465:	c1 e1 08             	shl    ecx,0x8
c0027468:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002746e:	c1 fa 17             	sar    edx,0x17
c0027471:	78 1c                	js     c002748f <__fixsfsi+0x32>
c0027473:	83 ea 7f             	sub    edx,0x7f
c0027476:	31 c0                	xor    eax,eax
c0027478:	83 fa 1e             	cmp    edx,0x1e
c002747b:	77 40                	ja     c00274bd <__fixsfsi+0x60>
c002747d:	89 c8                	mov    eax,ecx
c002747f:	0d 00 00 00 80       	or     eax,0x80000000
c0027484:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027489:	29 d1                	sub    ecx,edx
c002748b:	d3 e8                	shr    eax,cl
c002748d:	eb 2e                	jmp    c00274bd <__fixsfsi+0x60>
c002748f:	31 c0                	xor    eax,eax
c0027491:	81 c2 81 00 00 00    	add    edx,0x81
c0027497:	78 24                	js     c00274bd <__fixsfsi+0x60>
c0027499:	83 fa 1e             	cmp    edx,0x1e
c002749c:	7e 09                	jle    c00274a7 <__fixsfsi+0x4a>
c002749e:	83 fa 1f             	cmp    edx,0x1f
c00274a1:	75 18                	jne    c00274bb <__fixsfsi+0x5e>
c00274a3:	85 c9                	test   ecx,ecx
c00274a5:	75 14                	jne    c00274bb <__fixsfsi+0x5e>
c00274a7:	89 c8                	mov    eax,ecx
c00274a9:	0d 00 00 00 80       	or     eax,0x80000000
c00274ae:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274b3:	29 d1                	sub    ecx,edx
c00274b5:	d3 e8                	shr    eax,cl
c00274b7:	f7 d8                	neg    eax
c00274b9:	eb 02                	jmp    c00274bd <__fixsfsi+0x60>
c00274bb:	31 c0                	xor    eax,eax
c00274bd:	5d                   	pop    ebp
c00274be:	c3                   	ret    

c00274bf <__fixunssfsi>:
c00274bf:	55                   	push   ebp
c00274c0:	89 e5                	mov    ebp,esp
c00274c2:	53                   	push   ebx
c00274c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274c6:	89 d3                	mov    ebx,edx
c00274c8:	c1 fb 17             	sar    ebx,0x17
c00274cb:	83 eb 7f             	sub    ebx,0x7f
c00274ce:	31 c0                	xor    eax,eax
c00274d0:	83 fb 1f             	cmp    ebx,0x1f
c00274d3:	77 18                	ja     c00274ed <__fixunssfsi+0x2e>
c00274d5:	89 d0                	mov    eax,edx
c00274d7:	c1 e0 08             	shl    eax,0x8
c00274da:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274df:	0d 00 00 00 80       	or     eax,0x80000000
c00274e4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274e9:	29 d9                	sub    ecx,ebx
c00274eb:	d3 e8                	shr    eax,cl
c00274ed:	5b                   	pop    ebx
c00274ee:	5d                   	pop    ebp
c00274ef:	c3                   	ret    

c00274f0 <__cmpsf2>:
c00274f0:	55                   	push   ebp
c00274f1:	89 e5                	mov    ebp,esp
c00274f3:	57                   	push   edi
c00274f4:	56                   	push   esi
c00274f5:	53                   	push   ebx
c00274f6:	83 ec 24             	sub    esp,0x24
c00274f9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274ff:	e8 4f 10 00 00       	call   c0028553 <__truncdfsf2>
c0027504:	5a                   	pop    edx
c0027505:	59                   	pop    ecx
c0027506:	89 c3                	mov    ebx,eax
c0027508:	c1 e8 17             	shr    eax,0x17
c002750b:	0f b6 f0             	movzx  esi,al
c002750e:	89 d8                	mov    eax,ebx
c0027510:	c1 e8 1f             	shr    eax,0x1f
c0027513:	31 c6                	xor    esi,eax
c0027515:	c1 e3 08             	shl    ebx,0x8
c0027518:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002751b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002751e:	e8 30 10 00 00       	call   c0028553 <__truncdfsf2>
c0027523:	83 c4 10             	add    esp,0x10
c0027526:	89 c1                	mov    ecx,eax
c0027528:	c1 e9 17             	shr    ecx,0x17
c002752b:	0f b6 c9             	movzx  ecx,cl
c002752e:	89 c7                	mov    edi,eax
c0027530:	c1 ef 1f             	shr    edi,0x1f
c0027533:	89 ca                	mov    edx,ecx
c0027535:	31 fa                	xor    edx,edi
c0027537:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002753a:	c1 e0 08             	shl    eax,0x8
c002753d:	89 c2                	mov    edx,eax
c002753f:	89 d8                	mov    eax,ebx
c0027541:	09 d0                	or     eax,edx
c0027543:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027548:	09 f0                	or     eax,esi
c002754a:	75 08                	jne    c0027554 <__cmpsf2+0x64>
c002754c:	31 c0                	xor    eax,eax
c002754e:	39 f9                	cmp    ecx,edi
c0027550:	75 0c                	jne    c002755e <__cmpsf2+0x6e>
c0027552:	eb 29                	jmp    c002757d <__cmpsf2+0x8d>
c0027554:	b8 01 00 00 00       	mov    eax,0x1
c0027559:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002755c:	7f 1f                	jg     c002757d <__cmpsf2+0x8d>
c002755e:	83 c8 ff             	or     eax,0xffffffff
c0027561:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027564:	7c 17                	jl     c002757d <__cmpsf2+0x8d>
c0027566:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002756c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027572:	b8 01 00 00 00       	mov    eax,0x1
c0027577:	39 d3                	cmp    ebx,edx
c0027579:	77 02                	ja     c002757d <__cmpsf2+0x8d>
c002757b:	19 c0                	sbb    eax,eax
c002757d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027580:	5b                   	pop    ebx
c0027581:	5e                   	pop    esi
c0027582:	5f                   	pop    edi
c0027583:	5d                   	pop    ebp
c0027584:	c3                   	ret    

c0027585 <__eqsf2>:
c0027585:	55                   	push   ebp
c0027586:	89 e5                	mov    ebp,esp
c0027588:	83 ec 24             	sub    esp,0x24
c002758b:	6a 01                	push   0x1
c002758d:	83 ec 0c             	sub    esp,0xc
c0027590:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027593:	e8 df 10 00 00       	call   c0028677 <__extendsfdf2>
c0027598:	83 c4 10             	add    esp,0x10
c002759b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002759e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275a1:	52                   	push   edx
c00275a2:	50                   	push   eax
c00275a3:	50                   	push   eax
c00275a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00275a7:	e8 cb 10 00 00       	call   c0028677 <__extendsfdf2>
c00275ac:	59                   	pop    ecx
c00275ad:	59                   	pop    ecx
c00275ae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275b1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275b4:	52                   	push   edx
c00275b5:	50                   	push   eax
c00275b6:	e8 35 ff ff ff       	call   c00274f0 <__cmpsf2>
c00275bb:	83 c4 20             	add    esp,0x20
c00275be:	c9                   	leave  
c00275bf:	c3                   	ret    

c00275c0 <__nesf2>:
c00275c0:	eb c3                	jmp    c0027585 <__eqsf2>

c00275c2 <__gtsf2>:
c00275c2:	55                   	push   ebp
c00275c3:	89 e5                	mov    ebp,esp
c00275c5:	83 ec 24             	sub    esp,0x24
c00275c8:	6a ff                	push   0xffffffff
c00275ca:	83 ec 0c             	sub    esp,0xc
c00275cd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275d0:	e8 a2 10 00 00       	call   c0028677 <__extendsfdf2>
c00275d5:	83 c4 10             	add    esp,0x10
c00275d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275de:	52                   	push   edx
c00275df:	50                   	push   eax
c00275e0:	50                   	push   eax
c00275e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00275e4:	e8 8e 10 00 00       	call   c0028677 <__extendsfdf2>
c00275e9:	59                   	pop    ecx
c00275ea:	59                   	pop    ecx
c00275eb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275ee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275f1:	52                   	push   edx
c00275f2:	50                   	push   eax
c00275f3:	e8 f8 fe ff ff       	call   c00274f0 <__cmpsf2>
c00275f8:	83 c4 20             	add    esp,0x20
c00275fb:	c9                   	leave  
c00275fc:	c3                   	ret    

c00275fd <__gesf2>:
c00275fd:	eb c3                	jmp    c00275c2 <__gtsf2>

c00275ff <__ltsf2>:
c00275ff:	eb 84                	jmp    c0027585 <__eqsf2>

c0027601 <__lesf2>:
c0027601:	eb 82                	jmp    c0027585 <__eqsf2>

c0027603 <__adddf3>:
c0027603:	55                   	push   ebp
c0027604:	89 e5                	mov    ebp,esp
c0027606:	57                   	push   edi
c0027607:	56                   	push   esi
c0027608:	53                   	push   ebx
c0027609:	83 ec 24             	sub    esp,0x24
c002760c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002760f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027612:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027615:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027618:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002761b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002761e:	89 c8                	mov    eax,ecx
c0027620:	89 ce                	mov    esi,ecx
c0027622:	c1 fe 14             	sar    esi,0x14
c0027625:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027628:	89 fb                	mov    ebx,edi
c002762a:	89 fa                	mov    edx,edi
c002762c:	c1 e2 0b             	shl    edx,0xb
c002762f:	c1 e0 0b             	shl    eax,0xb
c0027632:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027637:	c1 eb 15             	shr    ebx,0x15
c002763a:	09 d8                	or     eax,ebx
c002763c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002763f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027642:	c1 fe 14             	sar    esi,0x14
c0027645:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027648:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002764b:	89 f3                	mov    ebx,esi
c002764d:	c1 e3 0b             	shl    ebx,0xb
c0027650:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027653:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027656:	c1 e3 0b             	shl    ebx,0xb
c0027659:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002765f:	c1 ee 15             	shr    esi,0x15
c0027662:	09 f3                	or     ebx,esi
c0027664:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027667:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002766a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002766d:	0f 88 5f 02 00 00    	js     c00278d2 <__adddf3+0x2cf>
c0027673:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027676:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027679:	85 db                	test   ebx,ebx
c002767b:	0f 8e c7 00 00 00    	jle    c0027748 <__adddf3+0x145>
c0027681:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027688:	75 1a                	jne    c00276a4 <__adddf3+0xa1>
c002768a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002768d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027690:	0f 84 b2 05 00 00    	je     c0027c48 <__adddf3+0x645>
c0027696:	4b                   	dec    ebx
c0027697:	75 23                	jne    c00276bc <__adddf3+0xb9>
c0027699:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002769c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002769f:	e9 99 00 00 00       	jmp    c002773d <__adddf3+0x13a>
c00276a4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276a7:	f7 d6                	not    esi
c00276a9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276af:	0f 84 93 05 00 00    	je     c0027c48 <__adddf3+0x645>
c00276b5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00276bc:	83 fb 1f             	cmp    ebx,0x1f
c00276bf:	7e 42                	jle    c0027703 <__adddf3+0x100>
c00276c1:	83 fb 3f             	cmp    ebx,0x3f
c00276c4:	0f 8f 7e 05 00 00    	jg     c0027c48 <__adddf3+0x645>
c00276ca:	83 e3 1f             	and    ebx,0x1f
c00276cd:	89 d9                	mov    ecx,ebx
c00276cf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276d2:	d3 ef                	shr    edi,cl
c00276d4:	31 db                	xor    ebx,ebx
c00276d6:	85 c9                	test   ecx,ecx
c00276d8:	74 15                	je     c00276ef <__adddf3+0xec>
c00276da:	be 20 00 00 00       	mov    esi,0x20
c00276df:	29 ce                	sub    esi,ecx
c00276e1:	89 f1                	mov    ecx,esi
c00276e3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276e6:	d3 e6                	shl    esi,cl
c00276e8:	31 db                	xor    ebx,ebx
c00276ea:	85 f6                	test   esi,esi
c00276ec:	0f 95 c3             	setne  bl
c00276ef:	31 c9                	xor    ecx,ecx
c00276f1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00276f5:	0f 95 c1             	setne  cl
c00276f8:	09 cf                	or     edi,ecx
c00276fa:	09 fb                	or     ebx,edi
c00276fc:	01 da                	add    edx,ebx
c00276fe:	83 d0 00             	adc    eax,0x0
c0027701:	eb 3a                	jmp    c002773d <__adddf3+0x13a>
c0027703:	bf 20 00 00 00       	mov    edi,0x20
c0027708:	29 df                	sub    edi,ebx
c002770a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002770d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027710:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027713:	d3 e6                	shl    esi,cl
c0027715:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027718:	88 d9                	mov    cl,bl
c002771a:	d3 ef                	shr    edi,cl
c002771c:	09 fe                	or     esi,edi
c002771e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027721:	88 d9                	mov    cl,bl
c0027723:	d3 ef                	shr    edi,cl
c0027725:	89 fb                	mov    ebx,edi
c0027727:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002772a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002772d:	d3 e7                	shl    edi,cl
c002772f:	85 ff                	test   edi,edi
c0027731:	0f 95 c1             	setne  cl
c0027734:	0f b6 c9             	movzx  ecx,cl
c0027737:	09 ce                	or     esi,ecx
c0027739:	01 f2                	add    edx,esi
c002773b:	11 d8                	adc    eax,ebx
c002773d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027740:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027743:	e9 52 01 00 00       	jmp    c002789a <__adddf3+0x297>
c0027748:	0f 84 d5 00 00 00    	je     c0027823 <__adddf3+0x220>
c002774e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027751:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027754:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027757:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002775a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027761:	75 20                	jne    c0027783 <__adddf3+0x180>
c0027763:	89 d6                	mov    esi,edx
c0027765:	09 c6                	or     esi,eax
c0027767:	0f 84 db 04 00 00    	je     c0027c48 <__adddf3+0x645>
c002776d:	4b                   	dec    ebx
c002776e:	75 29                	jne    c0027799 <__adddf3+0x196>
c0027770:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027773:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027776:	01 d1                	add    ecx,edx
c0027778:	11 c6                	adc    esi,eax
c002777a:	89 f0                	mov    eax,esi
c002777c:	89 ca                	mov    edx,ecx
c002777e:	e9 17 01 00 00       	jmp    c002789a <__adddf3+0x297>
c0027783:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027786:	f7 d6                	not    esi
c0027788:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002778e:	0f 84 b4 04 00 00    	je     c0027c48 <__adddf3+0x645>
c0027794:	0d 00 00 00 80       	or     eax,0x80000000
c0027799:	83 fb 1f             	cmp    ebx,0x1f
c002779c:	7e 48                	jle    c00277e6 <__adddf3+0x1e3>
c002779e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277a1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277a4:	83 fb 3f             	cmp    ebx,0x3f
c00277a7:	0f 8f 9b 04 00 00    	jg     c0027c48 <__adddf3+0x645>
c00277ad:	83 e3 1f             	and    ebx,0x1f
c00277b0:	89 d9                	mov    ecx,ebx
c00277b2:	89 c7                	mov    edi,eax
c00277b4:	d3 ef                	shr    edi,cl
c00277b6:	31 db                	xor    ebx,ebx
c00277b8:	85 c9                	test   ecx,ecx
c00277ba:	74 12                	je     c00277ce <__adddf3+0x1cb>
c00277bc:	be 20 00 00 00       	mov    esi,0x20
c00277c1:	29 ce                	sub    esi,ecx
c00277c3:	89 f1                	mov    ecx,esi
c00277c5:	d3 e0                	shl    eax,cl
c00277c7:	31 db                	xor    ebx,ebx
c00277c9:	85 c0                	test   eax,eax
c00277cb:	0f 95 c3             	setne  bl
c00277ce:	31 c0                	xor    eax,eax
c00277d0:	85 d2                	test   edx,edx
c00277d2:	0f 95 c0             	setne  al
c00277d5:	09 c7                	or     edi,eax
c00277d7:	09 fb                	or     ebx,edi
c00277d9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277dc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277df:	01 da                	add    edx,ebx
c00277e1:	83 d6 00             	adc    esi,0x0
c00277e4:	eb 39                	jmp    c002781f <__adddf3+0x21c>
c00277e6:	be 20 00 00 00       	mov    esi,0x20
c00277eb:	29 de                	sub    esi,ebx
c00277ed:	89 c7                	mov    edi,eax
c00277ef:	89 f1                	mov    ecx,esi
c00277f1:	d3 e7                	shl    edi,cl
c00277f3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277f6:	89 d7                	mov    edi,edx
c00277f8:	88 d9                	mov    cl,bl
c00277fa:	d3 ef                	shr    edi,cl
c00277fc:	89 f9                	mov    ecx,edi
c00277fe:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027801:	09 cf                	or     edi,ecx
c0027803:	88 d9                	mov    cl,bl
c0027805:	d3 e8                	shr    eax,cl
c0027807:	89 f1                	mov    ecx,esi
c0027809:	d3 e2                	shl    edx,cl
c002780b:	85 d2                	test   edx,edx
c002780d:	0f 95 c2             	setne  dl
c0027810:	0f b6 d2             	movzx  edx,dl
c0027813:	09 d7                	or     edi,edx
c0027815:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027818:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002781b:	01 fa                	add    edx,edi
c002781d:	11 c6                	adc    esi,eax
c002781f:	89 f0                	mov    eax,esi
c0027821:	eb 77                	jmp    c002789a <__adddf3+0x297>
c0027823:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027826:	46                   	inc    esi
c0027827:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002782a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027830:	75 41                	jne    c0027873 <__adddf3+0x270>
c0027832:	89 d3                	mov    ebx,edx
c0027834:	09 c3                	or     ebx,eax
c0027836:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002783d:	75 27                	jne    c0027866 <__adddf3+0x263>
c002783f:	85 db                	test   ebx,ebx
c0027841:	0f 84 fb 03 00 00    	je     c0027c42 <__adddf3+0x63f>
c0027847:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002784a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002784d:	0f 84 f5 03 00 00    	je     c0027c48 <__adddf3+0x645>
c0027853:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027856:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027859:	85 c0                	test   eax,eax
c002785b:	0f 89 91 03 00 00    	jns    c0027bf2 <__adddf3+0x5ef>
c0027861:	e9 85 03 00 00       	jmp    c0027beb <__adddf3+0x5e8>
c0027866:	85 db                	test   ebx,ebx
c0027868:	0f 85 da 03 00 00    	jne    c0027c48 <__adddf3+0x645>
c002786e:	e9 cf 03 00 00       	jmp    c0027c42 <__adddf3+0x63f>
c0027873:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027876:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027879:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002787c:	f7 d1                	not    ecx
c002787e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027884:	0f 84 70 03 00 00    	je     c0027bfa <__adddf3+0x5f7>
c002788a:	d1 ea                	shr    edx,1
c002788c:	89 c1                	mov    ecx,eax
c002788e:	c1 e1 1f             	shl    ecx,0x1f
c0027891:	09 ca                	or     edx,ecx
c0027893:	d1 e8                	shr    eax,1
c0027895:	e9 6f 03 00 00       	jmp    c0027c09 <__adddf3+0x606>
c002789a:	85 c0                	test   eax,eax
c002789c:	0f 89 67 03 00 00    	jns    c0027c09 <__adddf3+0x606>
c00278a2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00278a5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278a8:	f7 d1                	not    ecx
c00278aa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278b0:	0f 84 44 03 00 00    	je     c0027bfa <__adddf3+0x5f7>
c00278b6:	89 d1                	mov    ecx,edx
c00278b8:	d1 e9                	shr    ecx,1
c00278ba:	83 e2 01             	and    edx,0x1
c00278bd:	09 ca                	or     edx,ecx
c00278bf:	89 c1                	mov    ecx,eax
c00278c1:	c1 e1 1f             	shl    ecx,0x1f
c00278c4:	09 ca                	or     edx,ecx
c00278c6:	d1 e8                	shr    eax,1
c00278c8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00278cd:	e9 37 03 00 00       	jmp    c0027c09 <__adddf3+0x606>
c00278d2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00278d5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278db:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00278de:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00278e1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00278e7:	29 de                	sub    esi,ebx
c00278e9:	85 f6                	test   esi,esi
c00278eb:	0f 8e bd 00 00 00    	jle    c00279ae <__adddf3+0x3ab>
c00278f1:	85 db                	test   ebx,ebx
c00278f3:	75 17                	jne    c002790c <__adddf3+0x309>
c00278f5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00278f8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00278fb:	0f 84 47 03 00 00    	je     c0027c48 <__adddf3+0x645>
c0027901:	4e                   	dec    esi
c0027902:	75 20                	jne    c0027924 <__adddf3+0x321>
c0027904:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027907:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002790a:	eb 5b                	jmp    c0027967 <__adddf3+0x364>
c002790c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002790f:	f7 d3                	not    ebx
c0027911:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027917:	0f 84 2b 03 00 00    	je     c0027c48 <__adddf3+0x645>
c002791d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027924:	83 fe 1f             	cmp    esi,0x1f
c0027927:	7e 49                	jle    c0027972 <__adddf3+0x36f>
c0027929:	83 fe 3f             	cmp    esi,0x3f
c002792c:	0f 8f 16 03 00 00    	jg     c0027c48 <__adddf3+0x645>
c0027932:	83 e6 1f             	and    esi,0x1f
c0027935:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027938:	89 f1                	mov    ecx,esi
c002793a:	d3 ef                	shr    edi,cl
c002793c:	31 db                	xor    ebx,ebx
c002793e:	85 f6                	test   esi,esi
c0027940:	74 13                	je     c0027955 <__adddf3+0x352>
c0027942:	b9 20 00 00 00       	mov    ecx,0x20
c0027947:	29 f1                	sub    ecx,esi
c0027949:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002794c:	d3 e6                	shl    esi,cl
c002794e:	31 db                	xor    ebx,ebx
c0027950:	85 f6                	test   esi,esi
c0027952:	0f 95 c3             	setne  bl
c0027955:	31 c9                	xor    ecx,ecx
c0027957:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002795b:	0f 95 c1             	setne  cl
c002795e:	09 cf                	or     edi,ecx
c0027960:	09 fb                	or     ebx,edi
c0027962:	29 da                	sub    edx,ebx
c0027964:	83 d8 00             	sbb    eax,0x0
c0027967:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002796a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002796d:	e9 aa 01 00 00       	jmp    c0027b1c <__adddf3+0x519>
c0027972:	bf 20 00 00 00       	mov    edi,0x20
c0027977:	29 f7                	sub    edi,esi
c0027979:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002797c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002797f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027982:	d3 e3                	shl    ebx,cl
c0027984:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027987:	89 f1                	mov    ecx,esi
c0027989:	d3 ef                	shr    edi,cl
c002798b:	09 fb                	or     ebx,edi
c002798d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027990:	89 f1                	mov    ecx,esi
c0027992:	d3 ef                	shr    edi,cl
c0027994:	89 fe                	mov    esi,edi
c0027996:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027999:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002799c:	d3 e7                	shl    edi,cl
c002799e:	85 ff                	test   edi,edi
c00279a0:	0f 95 c1             	setne  cl
c00279a3:	0f b6 c9             	movzx  ecx,cl
c00279a6:	09 cb                	or     ebx,ecx
c00279a8:	29 da                	sub    edx,ebx
c00279aa:	19 f0                	sbb    eax,esi
c00279ac:	eb b9                	jmp    c0027967 <__adddf3+0x364>
c00279ae:	0f 84 cd 00 00 00    	je     c0027a81 <__adddf3+0x47e>
c00279b4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00279b7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279ba:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279bd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279c1:	75 1b                	jne    c00279de <__adddf3+0x3db>
c00279c3:	89 d6                	mov    esi,edx
c00279c5:	09 c6                	or     esi,eax
c00279c7:	0f 84 7b 02 00 00    	je     c0027c48 <__adddf3+0x645>
c00279cd:	4b                   	dec    ebx
c00279ce:	75 24                	jne    c00279f4 <__adddf3+0x3f1>
c00279d0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279d3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279d6:	29 d1                	sub    ecx,edx
c00279d8:	19 c6                	sbb    esi,eax
c00279da:	89 ca                	mov    edx,ecx
c00279dc:	eb 61                	jmp    c0027a3f <__adddf3+0x43c>
c00279de:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00279e1:	f7 d6                	not    esi
c00279e3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00279e9:	0f 84 59 02 00 00    	je     c0027c48 <__adddf3+0x645>
c00279ef:	0d 00 00 00 80       	or     eax,0x80000000
c00279f4:	83 fb 1f             	cmp    ebx,0x1f
c00279f7:	7e 4d                	jle    c0027a46 <__adddf3+0x443>
c00279f9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279fc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279ff:	83 fb 3f             	cmp    ebx,0x3f
c0027a02:	0f 8f 40 02 00 00    	jg     c0027c48 <__adddf3+0x645>
c0027a08:	83 e3 1f             	and    ebx,0x1f
c0027a0b:	89 d9                	mov    ecx,ebx
c0027a0d:	89 c7                	mov    edi,eax
c0027a0f:	d3 ef                	shr    edi,cl
c0027a11:	31 db                	xor    ebx,ebx
c0027a13:	85 c9                	test   ecx,ecx
c0027a15:	74 12                	je     c0027a29 <__adddf3+0x426>
c0027a17:	be 20 00 00 00       	mov    esi,0x20
c0027a1c:	29 ce                	sub    esi,ecx
c0027a1e:	89 f1                	mov    ecx,esi
c0027a20:	d3 e0                	shl    eax,cl
c0027a22:	31 db                	xor    ebx,ebx
c0027a24:	85 c0                	test   eax,eax
c0027a26:	0f 95 c3             	setne  bl
c0027a29:	31 c0                	xor    eax,eax
c0027a2b:	85 d2                	test   edx,edx
c0027a2d:	0f 95 c0             	setne  al
c0027a30:	09 c7                	or     edi,eax
c0027a32:	09 fb                	or     ebx,edi
c0027a34:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a37:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a3a:	29 da                	sub    edx,ebx
c0027a3c:	83 de 00             	sbb    esi,0x0
c0027a3f:	89 f0                	mov    eax,esi
c0027a41:	e9 d6 00 00 00       	jmp    c0027b1c <__adddf3+0x519>
c0027a46:	be 20 00 00 00       	mov    esi,0x20
c0027a4b:	29 de                	sub    esi,ebx
c0027a4d:	89 c7                	mov    edi,eax
c0027a4f:	89 f1                	mov    ecx,esi
c0027a51:	d3 e7                	shl    edi,cl
c0027a53:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a56:	89 d7                	mov    edi,edx
c0027a58:	88 d9                	mov    cl,bl
c0027a5a:	d3 ef                	shr    edi,cl
c0027a5c:	89 f9                	mov    ecx,edi
c0027a5e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a61:	09 cf                	or     edi,ecx
c0027a63:	88 d9                	mov    cl,bl
c0027a65:	d3 e8                	shr    eax,cl
c0027a67:	89 f1                	mov    ecx,esi
c0027a69:	d3 e2                	shl    edx,cl
c0027a6b:	85 d2                	test   edx,edx
c0027a6d:	0f 95 c2             	setne  dl
c0027a70:	0f b6 d2             	movzx  edx,dl
c0027a73:	09 d7                	or     edi,edx
c0027a75:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a78:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a7b:	29 fa                	sub    edx,edi
c0027a7d:	19 c6                	sbb    esi,eax
c0027a7f:	eb be                	jmp    c0027a3f <__adddf3+0x43c>
c0027a81:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a84:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027a87:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027a8d:	75 6a                	jne    c0027af9 <__adddf3+0x4f6>
c0027a8f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a93:	75 58                	jne    c0027aed <__adddf3+0x4ea>
c0027a95:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027a98:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027a9b:	89 d6                	mov    esi,edx
c0027a9d:	09 c6                	or     esi,eax
c0027a9f:	75 17                	jne    c0027ab8 <__adddf3+0x4b5>
c0027aa1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027aa4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027aa7:	85 db                	test   ebx,ebx
c0027aa9:	0f 85 99 01 00 00    	jne    c0027c48 <__adddf3+0x645>
c0027aaf:	31 ff                	xor    edi,edi
c0027ab1:	31 c9                	xor    ecx,ecx
c0027ab3:	e9 90 01 00 00       	jmp    c0027c48 <__adddf3+0x645>
c0027ab8:	85 db                	test   ebx,ebx
c0027aba:	0f 84 88 01 00 00    	je     c0027c48 <__adddf3+0x645>
c0027ac0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027ac3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027ac6:	85 c0                	test   eax,eax
c0027ac8:	79 10                	jns    c0027ada <__adddf3+0x4d7>
c0027aca:	31 c9                	xor    ecx,ecx
c0027acc:	f7 da                	neg    edx
c0027ace:	0f 95 c1             	setne  cl
c0027ad1:	01 c8                	add    eax,ecx
c0027ad3:	f7 d8                	neg    eax
c0027ad5:	e9 2f 01 00 00       	jmp    c0027c09 <__adddf3+0x606>
c0027ada:	31 ff                	xor    edi,edi
c0027adc:	31 c9                	xor    ecx,ecx
c0027ade:	89 c3                	mov    ebx,eax
c0027ae0:	09 d3                	or     ebx,edx
c0027ae2:	0f 84 60 01 00 00    	je     c0027c48 <__adddf3+0x645>
c0027ae8:	e9 05 01 00 00       	jmp    c0027bf2 <__adddf3+0x5ef>
c0027aed:	31 ff                	xor    edi,edi
c0027aef:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027af4:	e9 4f 01 00 00       	jmp    c0027c48 <__adddf3+0x645>
c0027af9:	89 c1                	mov    ecx,eax
c0027afb:	89 d0                	mov    eax,edx
c0027afd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027b00:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027b03:	89 ca                	mov    edx,ecx
c0027b05:	85 c9                	test   ecx,ecx
c0027b07:	79 2c                	jns    c0027b35 <__adddf3+0x532>
c0027b09:	31 c9                	xor    ecx,ecx
c0027b0b:	f7 d8                	neg    eax
c0027b0d:	0f 95 c1             	setne  cl
c0027b10:	01 ca                	add    edx,ecx
c0027b12:	f7 da                	neg    edx
c0027b14:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027b17:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b1a:	eb 19                	jmp    c0027b35 <__adddf3+0x532>
c0027b1c:	85 c0                	test   eax,eax
c0027b1e:	0f 89 e5 00 00 00    	jns    c0027c09 <__adddf3+0x606>
c0027b24:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b29:	89 c1                	mov    ecx,eax
c0027b2b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b2e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b31:	89 d0                	mov    eax,edx
c0027b33:	89 ca                	mov    edx,ecx
c0027b35:	85 d2                	test   edx,edx
c0027b37:	74 59                	je     c0027b92 <__adddf3+0x58f>
c0027b39:	0f bd da             	bsr    ebx,edx
c0027b3c:	83 f3 1f             	xor    ebx,0x1f
c0027b3f:	88 d9                	mov    cl,bl
c0027b41:	d3 e2                	shl    edx,cl
c0027b43:	bf 20 00 00 00       	mov    edi,0x20
c0027b48:	89 f9                	mov    ecx,edi
c0027b4a:	29 d9                	sub    ecx,ebx
c0027b4c:	89 c6                	mov    esi,eax
c0027b4e:	d3 ee                	shr    esi,cl
c0027b50:	09 d6                	or     esi,edx
c0027b52:	88 d9                	mov    cl,bl
c0027b54:	d3 e0                	shl    eax,cl
c0027b56:	89 c2                	mov    edx,eax
c0027b58:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b5b:	25 ff 07 00 00       	and    eax,0x7ff
c0027b60:	39 d8                	cmp    eax,ebx
c0027b62:	7f 22                	jg     c0027b86 <__adddf3+0x583>
c0027b64:	29 c3                	sub    ebx,eax
c0027b66:	43                   	inc    ebx
c0027b67:	88 d9                	mov    cl,bl
c0027b69:	d3 ea                	shr    edx,cl
c0027b6b:	29 df                	sub    edi,ebx
c0027b6d:	89 f9                	mov    ecx,edi
c0027b6f:	89 f0                	mov    eax,esi
c0027b71:	d3 e0                	shl    eax,cl
c0027b73:	09 c2                	or     edx,eax
c0027b75:	89 f0                	mov    eax,esi
c0027b77:	88 d9                	mov    cl,bl
c0027b79:	d3 e8                	shr    eax,cl
c0027b7b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b7e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027b84:	eb 6f                	jmp    c0027bf5 <__adddf3+0x5f2>
c0027b86:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b89:	29 d8                	sub    eax,ebx
c0027b8b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b8e:	89 f0                	mov    eax,esi
c0027b90:	eb 59                	jmp    c0027beb <__adddf3+0x5e8>
c0027b92:	85 c0                	test   eax,eax
c0027b94:	74 6a                	je     c0027c00 <__adddf3+0x5fd>
c0027b96:	0f bd c8             	bsr    ecx,eax
c0027b99:	83 f1 1f             	xor    ecx,0x1f
c0027b9c:	d3 e0                	shl    eax,cl
c0027b9e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ba1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ba7:	83 c1 20             	add    ecx,0x20
c0027baa:	39 cb                	cmp    ebx,ecx
c0027bac:	7f 35                	jg     c0027be3 <__adddf3+0x5e0>
c0027bae:	29 d9                	sub    ecx,ebx
c0027bb0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027bb3:	83 fe 1f             	cmp    esi,0x1f
c0027bb6:	7e 09                	jle    c0027bc1 <__adddf3+0x5be>
c0027bb8:	83 e9 1f             	sub    ecx,0x1f
c0027bbb:	d3 e8                	shr    eax,cl
c0027bbd:	89 c3                	mov    ebx,eax
c0027bbf:	eb 11                	jmp    c0027bd2 <__adddf3+0x5cf>
c0027bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0027bc6:	29 f1                	sub    ecx,esi
c0027bc8:	89 c3                	mov    ebx,eax
c0027bca:	d3 e3                	shl    ebx,cl
c0027bcc:	89 f1                	mov    ecx,esi
c0027bce:	d3 e8                	shr    eax,cl
c0027bd0:	89 c2                	mov    edx,eax
c0027bd2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bd5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027bda:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bdd:	89 d0                	mov    eax,edx
c0027bdf:	89 da                	mov    edx,ebx
c0027be1:	eb 26                	jmp    c0027c09 <__adddf3+0x606>
c0027be3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027be6:	29 cf                	sub    edi,ecx
c0027be8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027beb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027bf0:	eb 17                	jmp    c0027c09 <__adddf3+0x606>
c0027bf2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027bf5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027bf8:	eb 0f                	jmp    c0027c09 <__adddf3+0x606>
c0027bfa:	31 d2                	xor    edx,edx
c0027bfc:	31 c0                	xor    eax,eax
c0027bfe:	eb 09                	jmp    c0027c09 <__adddf3+0x606>
c0027c00:	89 c2                	mov    edx,eax
c0027c02:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027c09:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c0c:	c1 e1 14             	shl    ecx,0x14
c0027c0f:	89 c3                	mov    ebx,eax
c0027c11:	c1 eb 0b             	shr    ebx,0xb
c0027c14:	09 d9                	or     ecx,ebx
c0027c16:	89 d3                	mov    ebx,edx
c0027c18:	c1 eb 0b             	shr    ebx,0xb
c0027c1b:	c1 e0 15             	shl    eax,0x15
c0027c1e:	09 d8                	or     eax,ebx
c0027c20:	89 c7                	mov    edi,eax
c0027c22:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027c28:	0f 95 c0             	setne  al
c0027c2b:	89 c6                	mov    esi,eax
c0027c2d:	09 f3                	or     ebx,esi
c0027c2f:	83 e3 01             	and    ebx,0x1
c0027c32:	c1 ea 0a             	shr    edx,0xa
c0027c35:	21 da                	and    edx,ebx
c0027c37:	89 f8                	mov    eax,edi
c0027c39:	01 d0                	add    eax,edx
c0027c3b:	83 d1 00             	adc    ecx,0x0
c0027c3e:	89 c7                	mov    edi,eax
c0027c40:	eb 06                	jmp    c0027c48 <__adddf3+0x645>
c0027c42:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c45:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c48:	89 f8                	mov    eax,edi
c0027c4a:	89 ca                	mov    edx,ecx
c0027c4c:	83 c4 24             	add    esp,0x24
c0027c4f:	5b                   	pop    ebx
c0027c50:	5e                   	pop    esi
c0027c51:	5f                   	pop    edi
c0027c52:	5d                   	pop    ebp
c0027c53:	c3                   	ret    

c0027c54 <__subdf3>:
c0027c54:	55                   	push   ebp
c0027c55:	89 e5                	mov    ebp,esp
c0027c57:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c5a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c5d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c63:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027c66:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027c69:	5d                   	pop    ebp
c0027c6a:	e9 94 f9 ff ff       	jmp    c0027603 <__adddf3>

c0027c6f <__negdf2>:
c0027c6f:	55                   	push   ebp
c0027c70:	89 e5                	mov    ebp,esp
c0027c72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027c75:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c78:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c7e:	5d                   	pop    ebp
c0027c7f:	c3                   	ret    

c0027c80 <__muldf3>:
c0027c80:	55                   	push   ebp
c0027c81:	89 e5                	mov    ebp,esp
c0027c83:	57                   	push   edi
c0027c84:	56                   	push   esi
c0027c85:	53                   	push   ebx
c0027c86:	83 ec 24             	sub    esp,0x24
c0027c89:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c8f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c95:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027c98:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027c9b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c9e:	89 c8                	mov    eax,ecx
c0027ca0:	c1 f8 14             	sar    eax,0x14
c0027ca3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ca6:	89 f8                	mov    eax,edi
c0027ca8:	89 fb                	mov    ebx,edi
c0027caa:	c1 e3 0b             	shl    ebx,0xb
c0027cad:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027cb0:	c1 e1 0b             	shl    ecx,0xb
c0027cb3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027cb9:	c1 e8 15             	shr    eax,0x15
c0027cbc:	09 c1                	or     ecx,eax
c0027cbe:	89 d6                	mov    esi,edx
c0027cc0:	89 d0                	mov    eax,edx
c0027cc2:	c1 f8 14             	sar    eax,0x14
c0027cc5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027cc8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027ccb:	89 c3                	mov    ebx,eax
c0027ccd:	c1 e3 0b             	shl    ebx,0xb
c0027cd0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027cd3:	c1 e6 0b             	shl    esi,0xb
c0027cd6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027cdc:	c1 e8 15             	shr    eax,0x15
c0027cdf:	09 c6                	or     esi,eax
c0027ce1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ce4:	25 ff 07 00 00       	and    eax,0x7ff
c0027ce9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027cec:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cef:	25 ff 07 00 00       	and    eax,0x7ff
c0027cf4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027cf7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027cfa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027cfd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027d04:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d07:	40                   	inc    eax
c0027d08:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d0d:	0f 85 8d 00 00 00    	jne    c0027da0 <__muldf3+0x120>
c0027d13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d16:	09 c8                	or     eax,ecx
c0027d18:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027d1c:	74 44                	je     c0027d62 <__muldf3+0xe2>
c0027d1e:	85 c0                	test   eax,eax
c0027d20:	0f 85 31 02 00 00    	jne    c0027f57 <__muldf3+0x2d7>
c0027d26:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d29:	40                   	inc    eax
c0027d2a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d2f:	75 13                	jne    c0027d44 <__muldf3+0xc4>
c0027d31:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d34:	09 f1                	or     ecx,esi
c0027d36:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d3a:	74 22                	je     c0027d5e <__muldf3+0xde>
c0027d3c:	85 c9                	test   ecx,ecx
c0027d3e:	0f 85 0d 02 00 00    	jne    c0027f51 <__muldf3+0x2d1>
c0027d44:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027d48:	0f 89 09 02 00 00    	jns    c0027f57 <__muldf3+0x2d7>
c0027d4e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d51:	05 00 00 00 80       	add    eax,0x80000000
c0027d56:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d59:	e9 f9 01 00 00       	jmp    c0027f57 <__muldf3+0x2d7>
c0027d5e:	85 c9                	test   ecx,ecx
c0027d60:	eb 2e                	jmp    c0027d90 <__muldf3+0x110>
c0027d62:	85 c0                	test   eax,eax
c0027d64:	74 20                	je     c0027d86 <__muldf3+0x106>
c0027d66:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027d69:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d6c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d6f:	c1 ef 1f             	shr    edi,0x1f
c0027d72:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027d75:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027d78:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d7b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d7e:	09 f9                	or     ecx,edi
c0027d80:	78 1e                	js     c0027da0 <__muldf3+0x120>
c0027d82:	89 c3                	mov    ebx,eax
c0027d84:	eb e0                	jmp    c0027d66 <__muldf3+0xe6>
c0027d86:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d89:	f7 d0                	not    eax
c0027d8b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027d90:	75 b2                	jne    c0027d44 <__muldf3+0xc4>
c0027d92:	31 ff                	xor    edi,edi
c0027d94:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027d9b:	e9 b7 01 00 00       	jmp    c0027f57 <__muldf3+0x2d7>
c0027da0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027da3:	40                   	inc    eax
c0027da4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027da9:	75 57                	jne    c0027e02 <__muldf3+0x182>
c0027dab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027dae:	09 f0                	or     eax,esi
c0027db0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027db4:	74 23                	je     c0027dd9 <__muldf3+0x159>
c0027db6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027dba:	0f 89 91 01 00 00    	jns    c0027f51 <__muldf3+0x2d1>
c0027dc0:	85 c0                	test   eax,eax
c0027dc2:	0f 85 89 01 00 00    	jne    c0027f51 <__muldf3+0x2d1>
c0027dc8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027dcb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027dd1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027dd4:	e9 7e 01 00 00       	jmp    c0027f57 <__muldf3+0x2d7>
c0027dd9:	85 c0                	test   eax,eax
c0027ddb:	75 0c                	jne    c0027de9 <__muldf3+0x169>
c0027ddd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027de1:	0f 89 6a 01 00 00    	jns    c0027f51 <__muldf3+0x2d1>
c0027de7:	eb df                	jmp    c0027dc8 <__muldf3+0x148>
c0027de9:	01 f6                	add    esi,esi
c0027deb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027dee:	c1 ea 1f             	shr    edx,0x1f
c0027df1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027df4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027df7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027dfa:	09 d6                	or     esi,edx
c0027dfc:	78 04                	js     c0027e02 <__muldf3+0x182>
c0027dfe:	89 c3                	mov    ebx,eax
c0027e00:	eb e7                	jmp    c0027de9 <__muldf3+0x169>
c0027e02:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027e08:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e0e:	89 c8                	mov    eax,ecx
c0027e10:	f7 e6                	mul    esi
c0027e12:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027e15:	89 c7                	mov    edi,eax
c0027e17:	89 c8                	mov    eax,ecx
c0027e19:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e1c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027e1f:	89 c1                	mov    ecx,eax
c0027e21:	89 f0                	mov    eax,esi
c0027e23:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027e26:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027e29:	89 c6                	mov    esi,eax
c0027e2b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e2e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e31:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e34:	31 c0                	xor    eax,eax
c0027e36:	01 f1                	add    ecx,esi
c0027e38:	0f 92 c0             	setb   al
c0027e3b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027e3e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027e41:	83 d6 00             	adc    esi,0x0
c0027e44:	01 c7                	add    edi,eax
c0027e46:	83 d6 00             	adc    esi,0x0
c0027e49:	01 ca                	add    edx,ecx
c0027e4b:	0f 92 c1             	setb   cl
c0027e4e:	0f b6 c9             	movzx  ecx,cl
c0027e51:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027e54:	83 d6 00             	adc    esi,0x0
c0027e57:	01 cf                	add    edi,ecx
c0027e59:	83 d6 00             	adc    esi,0x0
c0027e5c:	31 c9                	xor    ecx,ecx
c0027e5e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027e61:	0f 95 c1             	setne  cl
c0027e64:	09 cf                	or     edi,ecx
c0027e66:	85 f6                	test   esi,esi
c0027e68:	78 0c                	js     c0027e76 <__muldf3+0x1f6>
c0027e6a:	01 f6                	add    esi,esi
c0027e6c:	89 f8                	mov    eax,edi
c0027e6e:	c1 e8 1f             	shr    eax,0x1f
c0027e71:	09 c6                	or     esi,eax
c0027e73:	01 ff                	add    edi,edi
c0027e75:	4b                   	dec    ebx
c0027e76:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027e7c:	0f 8f 85 00 00 00    	jg     c0027f07 <__muldf3+0x287>
c0027e82:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027e88:	85 db                	test   ebx,ebx
c0027e8a:	0f 8f 84 00 00 00    	jg     c0027f14 <__muldf3+0x294>
c0027e90:	83 fb cc             	cmp    ebx,0xffffffcc
c0027e93:	7c 79                	jl     c0027f0e <__muldf3+0x28e>
c0027e95:	ba 01 00 00 00       	mov    edx,0x1
c0027e9a:	29 da                	sub    edx,ebx
c0027e9c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ea2:	83 fa 1f             	cmp    edx,0x1f
c0027ea5:	7e 30                	jle    c0027ed7 <__muldf3+0x257>
c0027ea7:	83 fa 20             	cmp    edx,0x20
c0027eaa:	75 0b                	jne    c0027eb7 <__muldf3+0x237>
c0027eac:	31 c0                	xor    eax,eax
c0027eae:	85 ff                	test   edi,edi
c0027eb0:	0f 95 c0             	setne  al
c0027eb3:	89 c7                	mov    edi,eax
c0027eb5:	eb 1a                	jmp    c0027ed1 <__muldf3+0x251>
c0027eb7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027eba:	89 f0                	mov    eax,esi
c0027ebc:	d3 e0                	shl    eax,cl
c0027ebe:	09 f8                	or     eax,edi
c0027ec0:	0f 95 c0             	setne  al
c0027ec3:	0f b6 c0             	movzx  eax,al
c0027ec6:	89 c7                	mov    edi,eax
c0027ec8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ecd:	29 d9                	sub    ecx,ebx
c0027ecf:	d3 ee                	shr    esi,cl
c0027ed1:	09 f7                	or     edi,esi
c0027ed3:	31 db                	xor    ebx,ebx
c0027ed5:	eb 3b                	jmp    c0027f12 <__muldf3+0x292>
c0027ed7:	83 c3 1f             	add    ebx,0x1f
c0027eda:	89 f0                	mov    eax,esi
c0027edc:	88 d9                	mov    cl,bl
c0027ede:	d3 e0                	shl    eax,cl
c0027ee0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ee3:	89 f8                	mov    eax,edi
c0027ee5:	88 d1                	mov    cl,dl
c0027ee7:	d3 e8                	shr    eax,cl
c0027ee9:	89 c1                	mov    ecx,eax
c0027eeb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027eee:	09 c8                	or     eax,ecx
c0027ef0:	88 d9                	mov    cl,bl
c0027ef2:	d3 e7                	shl    edi,cl
c0027ef4:	31 db                	xor    ebx,ebx
c0027ef6:	85 ff                	test   edi,edi
c0027ef8:	0f 95 c3             	setne  bl
c0027efb:	89 df                	mov    edi,ebx
c0027efd:	09 c7                	or     edi,eax
c0027eff:	88 d1                	mov    cl,dl
c0027f01:	d3 ee                	shr    esi,cl
c0027f03:	31 db                	xor    ebx,ebx
c0027f05:	eb 0d                	jmp    c0027f14 <__muldf3+0x294>
c0027f07:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027f0c:	eb 02                	jmp    c0027f10 <__muldf3+0x290>
c0027f0e:	31 db                	xor    ebx,ebx
c0027f10:	31 ff                	xor    edi,edi
c0027f12:	31 f6                	xor    esi,esi
c0027f14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f17:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027f1a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027f1f:	09 c3                	or     ebx,eax
c0027f21:	c1 e3 14             	shl    ebx,0x14
c0027f24:	89 f0                	mov    eax,esi
c0027f26:	c1 e8 0b             	shr    eax,0xb
c0027f29:	09 c3                	or     ebx,eax
c0027f2b:	89 f8                	mov    eax,edi
c0027f2d:	c1 e8 0b             	shr    eax,0xb
c0027f30:	c1 e6 15             	shl    esi,0x15
c0027f33:	09 c6                	or     esi,eax
c0027f35:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027f3b:	0f 95 c1             	setne  cl
c0027f3e:	09 c8                	or     eax,ecx
c0027f40:	83 e0 01             	and    eax,0x1
c0027f43:	c1 ef 0a             	shr    edi,0xa
c0027f46:	21 c7                	and    edi,eax
c0027f48:	01 f7                	add    edi,esi
c0027f4a:	83 d3 00             	adc    ebx,0x0
c0027f4d:	89 da                	mov    edx,ebx
c0027f4f:	eb 03                	jmp    c0027f54 <__muldf3+0x2d4>
c0027f51:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027f54:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027f57:	89 f8                	mov    eax,edi
c0027f59:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027f5c:	83 c4 24             	add    esp,0x24
c0027f5f:	5b                   	pop    ebx
c0027f60:	5e                   	pop    esi
c0027f61:	5f                   	pop    edi
c0027f62:	5d                   	pop    ebp
c0027f63:	c3                   	ret    

c0027f64 <__divdf3>:
c0027f64:	55                   	push   ebp
c0027f65:	89 e5                	mov    ebp,esp
c0027f67:	57                   	push   edi
c0027f68:	56                   	push   esi
c0027f69:	53                   	push   ebx
c0027f6a:	83 ec 2c             	sub    esp,0x2c
c0027f6d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f70:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f73:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f76:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027f79:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027f7c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027f7f:	89 ce                	mov    esi,ecx
c0027f81:	89 c8                	mov    eax,ecx
c0027f83:	c1 f8 14             	sar    eax,0x14
c0027f86:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f89:	89 f8                	mov    eax,edi
c0027f8b:	89 fb                	mov    ebx,edi
c0027f8d:	c1 e3 0b             	shl    ebx,0xb
c0027f90:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027f93:	c1 e6 0b             	shl    esi,0xb
c0027f96:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f9c:	c1 e8 15             	shr    eax,0x15
c0027f9f:	09 c6                	or     esi,eax
c0027fa1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027fa4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027fa7:	89 c2                	mov    edx,eax
c0027fa9:	c1 fa 14             	sar    edx,0x14
c0027fac:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027faf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027fb2:	89 de                	mov    esi,ebx
c0027fb4:	c1 e6 0b             	shl    esi,0xb
c0027fb7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027fba:	c1 e0 0b             	shl    eax,0xb
c0027fbd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027fc2:	c1 eb 15             	shr    ebx,0x15
c0027fc5:	09 d8                	or     eax,ebx
c0027fc7:	89 c2                	mov    edx,eax
c0027fc9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fcc:	25 ff 07 00 00       	and    eax,0x7ff
c0027fd1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027fd4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027fd7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027fdd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027fe0:	29 d8                	sub    eax,ebx
c0027fe2:	05 ff 03 00 00       	add    eax,0x3ff
c0027fe7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027fea:	46                   	inc    esi
c0027feb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027ff1:	0f 85 a5 00 00 00    	jne    c002809c <__divdf3+0x138>
c0027ff7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027ffa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027ffd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028001:	74 2a                	je     c002802d <__divdf3+0xc9>
c0028003:	85 f6                	test   esi,esi
c0028005:	0f 85 cc 02 00 00    	jne    c00282d7 <__divdf3+0x373>
c002800b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002800e:	40                   	inc    eax
c002800f:	a9 fe 07 00 00       	test   eax,0x7fe
c0028014:	75 26                	jne    c002803c <__divdf3+0xd8>
c0028016:	85 db                	test   ebx,ebx
c0028018:	74 22                	je     c002803c <__divdf3+0xd8>
c002801a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002801d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028020:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028023:	09 d0                	or     eax,edx
c0028025:	0f 85 ac 02 00 00    	jne    c00282d7 <__divdf3+0x373>
c002802b:	eb 63                	jmp    c0028090 <__divdf3+0x12c>
c002802d:	85 f6                	test   esi,esi
c002802f:	75 22                	jne    c0028053 <__divdf3+0xef>
c0028031:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028034:	40                   	inc    eax
c0028035:	a9 fe 07 00 00       	test   eax,0x7fe
c002803a:	74 36                	je     c0028072 <__divdf3+0x10e>
c002803c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028040:	0f 89 91 02 00 00    	jns    c00282d7 <__divdf3+0x373>
c0028046:	89 f8                	mov    eax,edi
c0028048:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002804e:	e9 80 02 00 00       	jmp    c00282d3 <__divdf3+0x36f>
c0028053:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028056:	01 f6                	add    esi,esi
c0028058:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002805b:	c1 ef 1f             	shr    edi,0x1f
c002805e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028061:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028064:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028067:	09 f7                	or     edi,esi
c0028069:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002806c:	78 2e                	js     c002809c <__divdf3+0x138>
c002806e:	89 c8                	mov    eax,ecx
c0028070:	eb e1                	jmp    c0028053 <__divdf3+0xef>
c0028072:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028075:	09 d0                	or     eax,edx
c0028077:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002807b:	74 0f                	je     c002808c <__divdf3+0x128>
c002807d:	85 c0                	test   eax,eax
c002807f:	74 bb                	je     c002803c <__divdf3+0xd8>
c0028081:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028084:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028087:	e9 4b 02 00 00       	jmp    c00282d7 <__divdf3+0x373>
c002808c:	85 c0                	test   eax,eax
c002808e:	75 ac                	jne    c002803c <__divdf3+0xd8>
c0028090:	31 ff                	xor    edi,edi
c0028092:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028097:	e9 3b 02 00 00       	jmp    c00282d7 <__divdf3+0x373>
c002809c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002809f:	8d 4f 01             	lea    ecx,[edi+0x1]
c00280a2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00280a8:	75 6b                	jne    c0028115 <__divdf3+0x1b1>
c00280aa:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280ad:	09 d6                	or     esi,edx
c00280af:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00280b3:	74 28                	je     c00280dd <__divdf3+0x179>
c00280b5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280b8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280bb:	85 f6                	test   esi,esi
c00280bd:	0f 85 14 02 00 00    	jne    c00282d7 <__divdf3+0x373>
c00280c3:	31 ff                	xor    edi,edi
c00280c5:	31 c9                	xor    ecx,ecx
c00280c7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280ca:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00280cd:	0f 89 04 02 00 00    	jns    c00282d7 <__divdf3+0x373>
c00280d3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00280d8:	e9 fa 01 00 00       	jmp    c00282d7 <__divdf3+0x373>
c00280dd:	85 f6                	test   esi,esi
c00280df:	75 1b                	jne    c00280fc <__divdf3+0x198>
c00280e1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280e4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00280e7:	25 00 00 00 80       	and    eax,0x80000000
c00280ec:	31 c9                	xor    ecx,ecx
c00280ee:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00280f3:	89 cf                	mov    edi,ecx
c00280f5:	89 c1                	mov    ecx,eax
c00280f7:	e9 db 01 00 00       	jmp    c00282d7 <__divdf3+0x373>
c00280fc:	01 d2                	add    edx,edx
c00280fe:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028101:	c1 eb 1f             	shr    ebx,0x1f
c0028104:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028107:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002810a:	8d 48 01             	lea    ecx,[eax+0x1]
c002810d:	09 da                	or     edx,ebx
c002810f:	78 04                	js     c0028115 <__divdf3+0x1b1>
c0028111:	89 c8                	mov    eax,ecx
c0028113:	eb e7                	jmp    c00280fc <__divdf3+0x198>
c0028115:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028118:	81 ce 00 00 00 80    	or     esi,0x80000000
c002811e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028124:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028127:	39 d6                	cmp    esi,edx
c0028129:	77 0d                	ja     c0028138 <__divdf3+0x1d4>
c002812b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002812e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028131:	72 1b                	jb     c002814e <__divdf3+0x1ea>
c0028133:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028136:	75 16                	jne    c002814e <__divdf3+0x1ea>
c0028138:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002813b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002813e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028141:	83 de 00             	sbb    esi,0x0
c0028144:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028147:	ba 01 00 00 00       	mov    edx,0x1
c002814c:	eb 02                	jmp    c0028150 <__divdf3+0x1ec>
c002814e:	31 d2                	xor    edx,edx
c0028150:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028157:	31 ff                	xor    edi,edi
c0028159:	01 ff                	add    edi,edi
c002815b:	89 d1                	mov    ecx,edx
c002815d:	c1 e9 1f             	shr    ecx,0x1f
c0028160:	09 cf                	or     edi,ecx
c0028162:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028165:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028168:	89 da                	mov    edx,ebx
c002816a:	89 f3                	mov    ebx,esi
c002816c:	8d 34 36             	lea    esi,[esi+esi*1]
c002816f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028172:	c1 e9 1f             	shr    ecx,0x1f
c0028175:	09 ce                	or     esi,ecx
c0028177:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002817a:	01 c9                	add    ecx,ecx
c002817c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002817f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028182:	85 db                	test   ebx,ebx
c0028184:	78 29                	js     c00281af <__divdf3+0x24b>
c0028186:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028189:	72 07                	jb     c0028192 <__divdf3+0x22e>
c002818b:	75 3c                	jne    c00281c9 <__divdf3+0x265>
c002818d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028190:	77 37                	ja     c00281c9 <__divdf3+0x265>
c0028192:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028195:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028198:	31 d2                	xor    edx,edx
c002819a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002819d:	0f 97 c2             	seta   dl
c00281a0:	29 d6                	sub    esi,edx
c00281a2:	89 d9                	mov    ecx,ebx
c00281a4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00281a7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00281aa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00281ad:	eb 17                	jmp    c00281c6 <__divdf3+0x262>
c00281af:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281b2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281b5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281b8:	0f 97 c1             	seta   cl
c00281bb:	0f b6 c9             	movzx  ecx,cl
c00281be:	29 ce                	sub    esi,ecx
c00281c0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00281c3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00281c6:	83 ca 01             	or     edx,0x1
c00281c9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00281cc:	75 8b                	jne    c0028159 <__divdf3+0x1f5>
c00281ce:	c1 e7 09             	shl    edi,0x9
c00281d1:	89 d1                	mov    ecx,edx
c00281d3:	c1 e9 17             	shr    ecx,0x17
c00281d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00281d9:	09 f3                	or     ebx,esi
c00281db:	0f 95 c3             	setne  bl
c00281de:	0f b6 db             	movzx  ebx,bl
c00281e1:	c1 e2 09             	shl    edx,0x9
c00281e4:	09 d3                	or     ebx,edx
c00281e6:	89 ca                	mov    edx,ecx
c00281e8:	09 fa                	or     edx,edi
c00281ea:	78 0c                	js     c00281f8 <__divdf3+0x294>
c00281ec:	01 d2                	add    edx,edx
c00281ee:	89 d9                	mov    ecx,ebx
c00281f0:	c1 e9 1f             	shr    ecx,0x1f
c00281f3:	09 ca                	or     edx,ecx
c00281f5:	01 db                	add    ebx,ebx
c00281f7:	48                   	dec    eax
c00281f8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00281fd:	0f 8f 83 00 00 00    	jg     c0028286 <__divdf3+0x322>
c0028203:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028209:	85 c0                	test   eax,eax
c002820b:	0f 8f 82 00 00 00    	jg     c0028293 <__divdf3+0x32f>
c0028211:	83 f8 cc             	cmp    eax,0xffffffcc
c0028214:	7c 77                	jl     c002828d <__divdf3+0x329>
c0028216:	be 01 00 00 00       	mov    esi,0x1
c002821b:	29 c6                	sub    esi,eax
c002821d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028223:	83 fe 1f             	cmp    esi,0x1f
c0028226:	7e 2f                	jle    c0028257 <__divdf3+0x2f3>
c0028228:	83 fe 20             	cmp    esi,0x20
c002822b:	75 0a                	jne    c0028237 <__divdf3+0x2d3>
c002822d:	85 db                	test   ebx,ebx
c002822f:	0f 95 c3             	setne  bl
c0028232:	0f b6 db             	movzx  ebx,bl
c0028235:	eb 1a                	jmp    c0028251 <__divdf3+0x2ed>
c0028237:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002823a:	89 d7                	mov    edi,edx
c002823c:	d3 e7                	shl    edi,cl
c002823e:	89 f9                	mov    ecx,edi
c0028240:	09 d9                	or     ecx,ebx
c0028242:	0f 95 c3             	setne  bl
c0028245:	0f b6 db             	movzx  ebx,bl
c0028248:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002824d:	29 c1                	sub    ecx,eax
c002824f:	d3 ea                	shr    edx,cl
c0028251:	09 d3                	or     ebx,edx
c0028253:	31 c0                	xor    eax,eax
c0028255:	eb 3a                	jmp    c0028291 <__divdf3+0x32d>
c0028257:	83 c0 1f             	add    eax,0x1f
c002825a:	89 d7                	mov    edi,edx
c002825c:	88 c1                	mov    cl,al
c002825e:	d3 e7                	shl    edi,cl
c0028260:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028263:	89 df                	mov    edi,ebx
c0028265:	89 f1                	mov    ecx,esi
c0028267:	d3 ef                	shr    edi,cl
c0028269:	89 f9                	mov    ecx,edi
c002826b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002826e:	09 cf                	or     edi,ecx
c0028270:	88 c1                	mov    cl,al
c0028272:	d3 e3                	shl    ebx,cl
c0028274:	85 db                	test   ebx,ebx
c0028276:	0f 95 c3             	setne  bl
c0028279:	0f b6 db             	movzx  ebx,bl
c002827c:	09 fb                	or     ebx,edi
c002827e:	89 f1                	mov    ecx,esi
c0028280:	d3 ea                	shr    edx,cl
c0028282:	31 c0                	xor    eax,eax
c0028284:	eb 0d                	jmp    c0028293 <__divdf3+0x32f>
c0028286:	b8 ff 07 00 00       	mov    eax,0x7ff
c002828b:	eb 02                	jmp    c002828f <__divdf3+0x32b>
c002828d:	31 c0                	xor    eax,eax
c002828f:	31 db                	xor    ebx,ebx
c0028291:	31 d2                	xor    edx,edx
c0028293:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028296:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028299:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002829f:	09 c8                	or     eax,ecx
c00282a1:	c1 e0 14             	shl    eax,0x14
c00282a4:	89 d1                	mov    ecx,edx
c00282a6:	c1 e9 0b             	shr    ecx,0xb
c00282a9:	09 c8                	or     eax,ecx
c00282ab:	89 c6                	mov    esi,eax
c00282ad:	89 d9                	mov    ecx,ebx
c00282af:	c1 e9 0b             	shr    ecx,0xb
c00282b2:	c1 e2 15             	shl    edx,0x15
c00282b5:	09 ca                	or     edx,ecx
c00282b7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00282bd:	0f 95 c0             	setne  al
c00282c0:	09 c1                	or     ecx,eax
c00282c2:	83 e1 01             	and    ecx,0x1
c00282c5:	c1 eb 0a             	shr    ebx,0xa
c00282c8:	21 cb                	and    ebx,ecx
c00282ca:	01 d3                	add    ebx,edx
c00282cc:	89 d8                	mov    eax,ebx
c00282ce:	83 d6 00             	adc    esi,0x0
c00282d1:	89 f2                	mov    edx,esi
c00282d3:	89 c7                	mov    edi,eax
c00282d5:	89 d1                	mov    ecx,edx
c00282d7:	89 f8                	mov    eax,edi
c00282d9:	89 ca                	mov    edx,ecx
c00282db:	83 c4 2c             	add    esp,0x2c
c00282de:	5b                   	pop    ebx
c00282df:	5e                   	pop    esi
c00282e0:	5f                   	pop    edi
c00282e1:	5d                   	pop    ebp
c00282e2:	c3                   	ret    

c00282e3 <__floatsidf>:
c00282e3:	55                   	push   ebp
c00282e4:	89 e5                	mov    ebp,esp
c00282e6:	56                   	push   esi
c00282e7:	53                   	push   ebx
c00282e8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282eb:	85 db                	test   ebx,ebx
c00282ed:	7e 15                	jle    c0028304 <__floatsidf+0x21>
c00282ef:	0f bd cb             	bsr    ecx,ebx
c00282f2:	83 f1 1f             	xor    ecx,0x1f
c00282f5:	d3 e3                	shl    ebx,cl
c00282f7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282fd:	b8 1e 04 00 00       	mov    eax,0x41e
c0028302:	eb 21                	jmp    c0028325 <__floatsidf+0x42>
c0028304:	b8 00 00 00 00       	mov    eax,0x0
c0028309:	ba 00 00 00 00       	mov    edx,0x0
c002830e:	74 2a                	je     c002833a <__floatsidf+0x57>
c0028310:	f7 db                	neg    ebx
c0028312:	0f bd cb             	bsr    ecx,ebx
c0028315:	83 f1 1f             	xor    ecx,0x1f
c0028318:	d3 e3                	shl    ebx,cl
c002831a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028320:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028325:	29 c8                	sub    eax,ecx
c0028327:	c1 e0 14             	shl    eax,0x14
c002832a:	89 c1                	mov    ecx,eax
c002832c:	89 de                	mov    esi,ebx
c002832e:	c1 ee 0b             	shr    esi,0xb
c0028331:	09 f1                	or     ecx,esi
c0028333:	89 ca                	mov    edx,ecx
c0028335:	c1 e3 15             	shl    ebx,0x15
c0028338:	89 d8                	mov    eax,ebx
c002833a:	5b                   	pop    ebx
c002833b:	5e                   	pop    esi
c002833c:	5d                   	pop    ebp
c002833d:	c3                   	ret    

c002833e <__floatunsidf>:
c002833e:	55                   	push   ebp
c002833f:	89 e5                	mov    ebp,esp
c0028341:	56                   	push   esi
c0028342:	53                   	push   ebx
c0028343:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028346:	85 db                	test   ebx,ebx
c0028348:	74 2a                	je     c0028374 <__floatunsidf+0x36>
c002834a:	0f bd cb             	bsr    ecx,ebx
c002834d:	83 f1 1f             	xor    ecx,0x1f
c0028350:	d3 e3                	shl    ebx,cl
c0028352:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028358:	b8 1e 04 00 00       	mov    eax,0x41e
c002835d:	29 c8                	sub    eax,ecx
c002835f:	c1 e0 14             	shl    eax,0x14
c0028362:	89 c1                	mov    ecx,eax
c0028364:	89 de                	mov    esi,ebx
c0028366:	c1 ee 0b             	shr    esi,0xb
c0028369:	09 f1                	or     ecx,esi
c002836b:	89 ca                	mov    edx,ecx
c002836d:	c1 e3 15             	shl    ebx,0x15
c0028370:	89 d8                	mov    eax,ebx
c0028372:	eb 04                	jmp    c0028378 <__floatunsidf+0x3a>
c0028374:	31 c0                	xor    eax,eax
c0028376:	31 d2                	xor    edx,edx
c0028378:	5b                   	pop    ebx
c0028379:	5e                   	pop    esi
c002837a:	5d                   	pop    ebp
c002837b:	c3                   	ret    

c002837c <__fixdfsi>:
c002837c:	55                   	push   ebp
c002837d:	89 e5                	mov    ebp,esp
c002837f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028382:	89 d1                	mov    ecx,edx
c0028384:	c1 e1 0b             	shl    ecx,0xb
c0028387:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002838d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028390:	c1 e8 15             	shr    eax,0x15
c0028393:	09 c1                	or     ecx,eax
c0028395:	c1 fa 14             	sar    edx,0x14
c0028398:	78 1f                	js     c00283b9 <__fixdfsi+0x3d>
c002839a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00283a0:	31 c0                	xor    eax,eax
c00283a2:	83 fa 1e             	cmp    edx,0x1e
c00283a5:	77 40                	ja     c00283e7 <__fixdfsi+0x6b>
c00283a7:	89 c8                	mov    eax,ecx
c00283a9:	0d 00 00 00 80       	or     eax,0x80000000
c00283ae:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283b3:	29 d1                	sub    ecx,edx
c00283b5:	d3 e8                	shr    eax,cl
c00283b7:	eb 2e                	jmp    c00283e7 <__fixdfsi+0x6b>
c00283b9:	31 c0                	xor    eax,eax
c00283bb:	81 c2 01 04 00 00    	add    edx,0x401
c00283c1:	78 24                	js     c00283e7 <__fixdfsi+0x6b>
c00283c3:	83 fa 1e             	cmp    edx,0x1e
c00283c6:	7e 09                	jle    c00283d1 <__fixdfsi+0x55>
c00283c8:	83 fa 1f             	cmp    edx,0x1f
c00283cb:	75 18                	jne    c00283e5 <__fixdfsi+0x69>
c00283cd:	85 c9                	test   ecx,ecx
c00283cf:	75 14                	jne    c00283e5 <__fixdfsi+0x69>
c00283d1:	89 c8                	mov    eax,ecx
c00283d3:	0d 00 00 00 80       	or     eax,0x80000000
c00283d8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283dd:	29 d1                	sub    ecx,edx
c00283df:	d3 e8                	shr    eax,cl
c00283e1:	f7 d8                	neg    eax
c00283e3:	eb 02                	jmp    c00283e7 <__fixdfsi+0x6b>
c00283e5:	31 c0                	xor    eax,eax
c00283e7:	5d                   	pop    ebp
c00283e8:	c3                   	ret    

c00283e9 <__fixunsdfsi>:
c00283e9:	55                   	push   ebp
c00283ea:	89 e5                	mov    ebp,esp
c00283ec:	53                   	push   ebx
c00283ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00283f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283f3:	89 d3                	mov    ebx,edx
c00283f5:	c1 fb 14             	sar    ebx,0x14
c00283f8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00283fe:	31 c0                	xor    eax,eax
c0028400:	83 fb 1f             	cmp    ebx,0x1f
c0028403:	77 1d                	ja     c0028422 <__fixunsdfsi+0x39>
c0028405:	89 d0                	mov    eax,edx
c0028407:	c1 e0 0b             	shl    eax,0xb
c002840a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002840f:	c1 e9 15             	shr    ecx,0x15
c0028412:	09 c8                	or     eax,ecx
c0028414:	0d 00 00 00 80       	or     eax,0x80000000
c0028419:	b9 1f 00 00 00       	mov    ecx,0x1f
c002841e:	29 d9                	sub    ecx,ebx
c0028420:	d3 e8                	shr    eax,cl
c0028422:	5b                   	pop    ebx
c0028423:	5d                   	pop    ebp
c0028424:	c3                   	ret    

c0028425 <__cmpdf2>:
c0028425:	55                   	push   ebp
c0028426:	89 e5                	mov    ebp,esp
c0028428:	57                   	push   edi
c0028429:	56                   	push   esi
c002842a:	53                   	push   ebx
c002842b:	83 ec 0c             	sub    esp,0xc
c002842e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028431:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028434:	89 ca                	mov    edx,ecx
c0028436:	c1 ea 14             	shr    edx,0x14
c0028439:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002843f:	89 cb                	mov    ebx,ecx
c0028441:	c1 fb 1f             	sar    ebx,0x1f
c0028444:	31 da                	xor    edx,ebx
c0028446:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028449:	89 df                	mov    edi,ebx
c002844b:	c1 e7 0b             	shl    edi,0xb
c002844e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028451:	c1 e1 0b             	shl    ecx,0xb
c0028454:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002845a:	c1 eb 15             	shr    ebx,0x15
c002845d:	09 d9                	or     ecx,ebx
c002845f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028462:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028465:	89 ce                	mov    esi,ecx
c0028467:	c1 ee 14             	shr    esi,0x14
c002846a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028470:	89 cb                	mov    ebx,ecx
c0028472:	c1 fb 1f             	sar    ebx,0x1f
c0028475:	31 de                	xor    esi,ebx
c0028477:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002847a:	89 df                	mov    edi,ebx
c002847c:	c1 e7 0b             	shl    edi,0xb
c002847f:	c1 e1 0b             	shl    ecx,0xb
c0028482:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028488:	c1 eb 15             	shr    ebx,0x15
c002848b:	09 d9                	or     ecx,ebx
c002848d:	89 d3                	mov    ebx,edx
c002848f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028495:	43                   	inc    ebx
c0028496:	83 fb 01             	cmp    ebx,0x1
c0028499:	77 08                	ja     c00284a3 <__cmpdf2+0x7e>
c002849b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002849e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00284a1:	75 68                	jne    c002850b <__cmpdf2+0xe6>
c00284a3:	89 f3                	mov    ebx,esi
c00284a5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00284ab:	43                   	inc    ebx
c00284ac:	83 fb 01             	cmp    ebx,0x1
c00284af:	77 06                	ja     c00284b7 <__cmpdf2+0x92>
c00284b1:	89 fb                	mov    ebx,edi
c00284b3:	09 cb                	or     ebx,ecx
c00284b5:	75 54                	jne    c002850b <__cmpdf2+0xe6>
c00284b7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284ba:	09 f8                	or     eax,edi
c00284bc:	09 c8                	or     eax,ecx
c00284be:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00284c1:	75 12                	jne    c00284d5 <__cmpdf2+0xb0>
c00284c3:	8d 42 01             	lea    eax,[edx+0x1]
c00284c6:	83 f8 01             	cmp    eax,0x1
c00284c9:	77 0a                	ja     c00284d5 <__cmpdf2+0xb0>
c00284cb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00284ce:	31 c0                	xor    eax,eax
c00284d0:	83 fb 01             	cmp    ebx,0x1
c00284d3:	76 36                	jbe    c002850b <__cmpdf2+0xe6>
c00284d5:	b8 01 00 00 00       	mov    eax,0x1
c00284da:	39 f2                	cmp    edx,esi
c00284dc:	7f 2d                	jg     c002850b <__cmpdf2+0xe6>
c00284de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00284e3:	7c 26                	jl     c002850b <__cmpdf2+0xe6>
c00284e5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00284e8:	77 07                	ja     c00284f1 <__cmpdf2+0xcc>
c00284ea:	72 16                	jb     c0028502 <__cmpdf2+0xdd>
c00284ec:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00284ef:	76 0a                	jbe    c00284fb <__cmpdf2+0xd6>
c00284f1:	89 d0                	mov    eax,edx
c00284f3:	c1 f8 1f             	sar    eax,0x1f
c00284f6:	83 c8 01             	or     eax,0x1
c00284f9:	eb 10                	jmp    c002850b <__cmpdf2+0xe6>
c00284fb:	b8 00 00 00 00       	mov    eax,0x0
c0028500:	73 09                	jae    c002850b <__cmpdf2+0xe6>
c0028502:	89 d0                	mov    eax,edx
c0028504:	c1 f8 1f             	sar    eax,0x1f
c0028507:	83 e0 02             	and    eax,0x2
c002850a:	48                   	dec    eax
c002850b:	83 c4 0c             	add    esp,0xc
c002850e:	5b                   	pop    ebx
c002850f:	5e                   	pop    esi
c0028510:	5f                   	pop    edi
c0028511:	5d                   	pop    ebp
c0028512:	c3                   	ret    

c0028513 <__eqdf2>:
c0028513:	55                   	push   ebp
c0028514:	89 e5                	mov    ebp,esp
c0028516:	50                   	push   eax
c0028517:	6a 01                	push   0x1
c0028519:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002851c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002851f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028522:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028525:	e8 fb fe ff ff       	call   c0028425 <__cmpdf2>
c002852a:	83 c4 18             	add    esp,0x18
c002852d:	c9                   	leave  
c002852e:	c3                   	ret    

c002852f <__nedf2>:
c002852f:	eb e2                	jmp    c0028513 <__eqdf2>

c0028531 <__gtdf2>:
c0028531:	55                   	push   ebp
c0028532:	89 e5                	mov    ebp,esp
c0028534:	50                   	push   eax
c0028535:	6a ff                	push   0xffffffff
c0028537:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002853a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002853d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028540:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028543:	e8 dd fe ff ff       	call   c0028425 <__cmpdf2>
c0028548:	83 c4 18             	add    esp,0x18
c002854b:	c9                   	leave  
c002854c:	c3                   	ret    

c002854d <__gedf2>:
c002854d:	eb e2                	jmp    c0028531 <__gtdf2>

c002854f <__ltdf2>:
c002854f:	eb c2                	jmp    c0028513 <__eqdf2>

c0028551 <__ledf2>:
c0028551:	eb c0                	jmp    c0028513 <__eqdf2>

c0028553 <__truncdfsf2>:
c0028553:	55                   	push   ebp
c0028554:	89 e5                	mov    ebp,esp
c0028556:	57                   	push   edi
c0028557:	56                   	push   esi
c0028558:	53                   	push   ebx
c0028559:	83 ec 0c             	sub    esp,0xc
c002855c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002855f:	89 d1                	mov    ecx,edx
c0028561:	c1 f9 14             	sar    ecx,0x14
c0028564:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028567:	89 df                	mov    edi,ebx
c0028569:	c1 e7 0b             	shl    edi,0xb
c002856c:	89 d0                	mov    eax,edx
c002856e:	c1 e0 0b             	shl    eax,0xb
c0028571:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028576:	c1 eb 15             	shr    ebx,0x15
c0028579:	09 d8                	or     eax,ebx
c002857b:	89 cb                	mov    ebx,ecx
c002857d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028583:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028589:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002858f:	0f 86 9e 00 00 00    	jbe    c0028633 <__truncdfsf2+0xe0>
c0028595:	85 db                	test   ebx,ebx
c0028597:	75 0a                	jne    c00285a3 <__truncdfsf2+0x50>
c0028599:	c1 fa 17             	sar    edx,0x17
c002859c:	30 d2                	xor    dl,dl
c002859e:	e9 84 00 00 00       	jmp    c0028627 <__truncdfsf2+0xd4>
c00285a3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00285a9:	83 fe 83             	cmp    esi,0xffffff83
c00285ac:	7d 4b                	jge    c00285f9 <__truncdfsf2+0xa6>
c00285ae:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00285b3:	29 f1                	sub    ecx,esi
c00285b5:	83 f9 1f             	cmp    ecx,0x1f
c00285b8:	7f 6b                	jg     c0028625 <__truncdfsf2+0xd2>
c00285ba:	0d 00 00 00 80       	or     eax,0x80000000
c00285bf:	89 c3                	mov    ebx,eax
c00285c1:	d3 eb                	shr    ebx,cl
c00285c3:	be 01 00 00 00       	mov    esi,0x1
c00285c8:	d3 e6                	shl    esi,cl
c00285ca:	4e                   	dec    esi
c00285cb:	21 f0                	and    eax,esi
c00285cd:	09 f8                	or     eax,edi
c00285cf:	0f 95 c0             	setne  al
c00285d2:	0f b6 c0             	movzx  eax,al
c00285d5:	09 c3                	or     ebx,eax
c00285d7:	89 d9                	mov    ecx,ebx
c00285d9:	c1 e9 08             	shr    ecx,0x8
c00285dc:	f6 c3 7f             	test   bl,0x7f
c00285df:	0f 95 c0             	setne  al
c00285e2:	09 c8                	or     eax,ecx
c00285e4:	83 e0 01             	and    eax,0x1
c00285e7:	c1 eb 07             	shr    ebx,0x7
c00285ea:	21 c3                	and    ebx,eax
c00285ec:	81 e2 00 00 00 80    	and    edx,0x80000000
c00285f2:	09 d1                	or     ecx,edx
c00285f4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00285f7:	eb 76                	jmp    c002866f <__truncdfsf2+0x11c>
c00285f9:	83 c6 80             	add    esi,0xffffff80
c00285fc:	7e 1d                	jle    c002861b <__truncdfsf2+0xc8>
c00285fe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028604:	75 0b                	jne    c0028611 <__truncdfsf2+0xbe>
c0028606:	09 f8                	or     eax,edi
c0028608:	74 09                	je     c0028613 <__truncdfsf2+0xc0>
c002860a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002860f:	eb 02                	jmp    c0028613 <__truncdfsf2+0xc0>
c0028611:	31 c0                	xor    eax,eax
c0028613:	c1 fa 17             	sar    edx,0x17
c0028616:	80 ca ff             	or     dl,0xff
c0028619:	eb 0e                	jmp    c0028629 <__truncdfsf2+0xd6>
c002861b:	c1 fa 1f             	sar    edx,0x1f
c002861e:	c1 e2 08             	shl    edx,0x8
c0028621:	09 ca                	or     edx,ecx
c0028623:	eb 04                	jmp    c0028629 <__truncdfsf2+0xd6>
c0028625:	31 d2                	xor    edx,edx
c0028627:	31 c0                	xor    eax,eax
c0028629:	c1 e2 17             	shl    edx,0x17
c002862c:	c1 e8 08             	shr    eax,0x8
c002862f:	09 d0                	or     eax,edx
c0028631:	eb 3c                	jmp    c002866f <__truncdfsf2+0x11c>
c0028633:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028639:	89 ca                	mov    edx,ecx
c002863b:	c1 fa 0b             	sar    edx,0xb
c002863e:	c1 e2 08             	shl    edx,0x8
c0028641:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028644:	31 db                	xor    ebx,ebx
c0028646:	85 ff                	test   edi,edi
c0028648:	0f 95 c3             	setne  bl
c002864b:	09 d8                	or     eax,ebx
c002864d:	89 c3                	mov    ebx,eax
c002864f:	c1 eb 08             	shr    ebx,0x8
c0028652:	a8 7f                	test   al,0x7f
c0028654:	0f 95 c2             	setne  dl
c0028657:	89 d6                	mov    esi,edx
c0028659:	09 de                	or     esi,ebx
c002865b:	83 e6 01             	and    esi,0x1
c002865e:	c1 e8 07             	shr    eax,0x7
c0028661:	21 f0                	and    eax,esi
c0028663:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028666:	09 ca                	or     edx,ecx
c0028668:	c1 e2 17             	shl    edx,0x17
c002866b:	09 da                	or     edx,ebx
c002866d:	01 d0                	add    eax,edx
c002866f:	83 c4 0c             	add    esp,0xc
c0028672:	5b                   	pop    ebx
c0028673:	5e                   	pop    esi
c0028674:	5f                   	pop    edi
c0028675:	5d                   	pop    ebp
c0028676:	c3                   	ret    

c0028677 <__extendsfdf2>:
c0028677:	55                   	push   ebp
c0028678:	89 e5                	mov    ebp,esp
c002867a:	57                   	push   edi
c002867b:	56                   	push   esi
c002867c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002867f:	89 d1                	mov    ecx,edx
c0028681:	c1 f9 17             	sar    ecx,0x17
c0028684:	c1 e2 08             	shl    edx,0x8
c0028687:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002868d:	89 c8                	mov    eax,ecx
c002868f:	80 e4 f8             	and    ah,0xf8
c0028692:	8d 71 01             	lea    esi,[ecx+0x1]
c0028695:	81 e6 fe 00 00 00    	and    esi,0xfe
c002869b:	75 27                	jne    c00286c4 <__extendsfdf2+0x4d>
c002869d:	81 e1 ff 00 00 00    	and    ecx,0xff
c00286a3:	75 18                	jne    c00286bd <__extendsfdf2+0x46>
c00286a5:	85 d2                	test   edx,edx
c00286a7:	74 20                	je     c00286c9 <__extendsfdf2+0x52>
c00286a9:	41                   	inc    ecx
c00286aa:	01 d2                	add    edx,edx
c00286ac:	79 fb                	jns    c00286a9 <__extendsfdf2+0x32>
c00286ae:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00286b4:	29 c8                	sub    eax,ecx
c00286b6:	05 81 03 00 00       	add    eax,0x381
c00286bb:	eb 0c                	jmp    c00286c9 <__extendsfdf2+0x52>
c00286bd:	05 00 07 00 00       	add    eax,0x700
c00286c2:	eb 05                	jmp    c00286c9 <__extendsfdf2+0x52>
c00286c4:	05 80 03 00 00       	add    eax,0x380
c00286c9:	c1 e0 14             	shl    eax,0x14
c00286cc:	89 c1                	mov    ecx,eax
c00286ce:	89 d0                	mov    eax,edx
c00286d0:	c1 e8 0b             	shr    eax,0xb
c00286d3:	09 c1                	or     ecx,eax
c00286d5:	c1 e2 15             	shl    edx,0x15
c00286d8:	89 d0                	mov    eax,edx
c00286da:	89 ca                	mov    edx,ecx
c00286dc:	5e                   	pop    esi
c00286dd:	5f                   	pop    edi
c00286de:	5d                   	pop    ebp
c00286df:	c3                   	ret    

c00286e0 <fabs>:
c00286e0:	83 ec 0c             	sub    esp,0xc
c00286e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00286ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00286ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00286f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00286f7:	dd 04 24             	fld    QWORD PTR [esp]
c00286fa:	83 c4 0c             	add    esp,0xc
c00286fd:	c3                   	ret    
c00286fe:	66 90                	xchg   ax,ax

c0028700 <lrint>:
c0028700:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028704:	83 ec 04             	sub    esp,0x4
c0028707:	db 1c 24             	fistp  DWORD PTR [esp]
c002870a:	58                   	pop    eax
c002870b:	c3                   	ret    

c002870c <lrintf>:
c002870c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028710:	83 ec 04             	sub    esp,0x4
c0028713:	db 1c 24             	fistp  DWORD PTR [esp]
c0028716:	58                   	pop    eax
c0028717:	c3                   	ret    

Disassembly of section .init:

c0028718 <_init>:
c0028718:	55                   	push   ebp
c0028719:	89 e5                	mov    ebp,esp
c002871b:	e8 f8 79 fd ff       	call   c0000118 <frame_dummy>
c0028720:	e8 63 e0 ff ff       	call   c0026788 <__do_global_ctors_aux>
c0028725:	5d                   	pop    ebp
c0028726:	c3                   	ret    

Disassembly of section .fini:

c0028727 <_fini>:
c0028727:	55                   	push   ebp
c0028728:	89 e5                	mov    ebp,esp
c002872a:	e8 79 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002872f:	5d                   	pop    ebp
c0028730:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028732 <Computer::~Computer()>:
c0028732:	83 ec 0c             	sub    esp,0xc
c0028735:	ba 7c a2 02 c0       	mov    edx,0xc002a27c
c002873a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873e:	89 10                	mov    DWORD PTR [eax],edx
c0028740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028744:	83 ec 0c             	sub    esp,0xc
c0028747:	50                   	push   eax
c0028748:	e8 6d bb fe ff       	call   c00142ba <Device::~Device()>
c002874d:	83 c4 10             	add    esp,0x10
c0028750:	90                   	nop
c0028751:	83 c4 0c             	add    esp,0xc
c0028754:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028756 <Computer::~Computer()>:
c0028756:	83 ec 0c             	sub    esp,0xc
c0028759:	83 ec 0c             	sub    esp,0xc
c002875c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028760:	e8 cd ff ff ff       	call   c0028732 <Computer::~Computer()>
c0028765:	83 c4 10             	add    esp,0x10
c0028768:	83 ec 08             	sub    esp,0x8
c002876b:	68 ec 01 00 00       	push   0x1ec
c0028770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028774:	e8 68 a7 fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0028779:	83 c4 10             	add    esp,0x10
c002877c:	83 c4 0c             	add    esp,0xc
c002877f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028780 <idleCommon()>:
c0028780:	83 ec 0c             	sub    esp,0xc
c0028783:	e8 10 57 ff ff       	call   c001de98 <lockScheduler()>
c0028788:	e8 47 5a ff ff       	call   c001e1d4 <schedule()>
c002878d:	83 c4 0c             	add    esp,0xc
c0028790:	e9 05 57 ff ff       	jmp    c001de9a <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028796 <LinkedList<UnixFile>::~LinkedList()>:
c0028796:	90                   	nop
c0028797:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028798 <LinkedList<UnixFile>::LinkedList()>:
c0028798:	83 ec 0c             	sub    esp,0xc
c002879b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287db:	83 ec 0c             	sub    esp,0xc
c00287de:	68 3a a5 02 c0       	push   0xc002a53a
c00287e3:	e8 d9 a7 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c00287e8:	83 c4 10             	add    esp,0x10
c00287eb:	90                   	nop
c00287ec:	83 c4 0c             	add    esp,0xc
c00287ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00287f0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00287f0:	83 ec 0c             	sub    esp,0xc
c00287f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287f8:	75 10                	jne    c002880a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00287fa:	83 ec 0c             	sub    esp,0xc
c00287fd:	68 54 a5 02 c0       	push   0xc002a554
c0028802:	e8 6c 1e ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0028807:	83 c4 10             	add    esp,0x10
c002880a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028810:	85 c0                	test   eax,eax
c0028812:	74 34                	je     c0028848 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028818:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002881b:	85 c0                	test   eax,eax
c002881d:	74 29                	je     c0028848 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002881f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028823:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028826:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002882a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002882d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028831:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028835:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002883f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028846:	eb 65                	jmp    c00288ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884c:	8b 00                	mov    eax,DWORD PTR [eax]
c002884e:	85 c0                	test   eax,eax
c0028850:	75 4b                	jne    c002889d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028856:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028859:	85 c0                	test   eax,eax
c002885b:	75 40                	jne    c002889d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002885d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028861:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028865:	89 10                	mov    DWORD PTR [eax],edx
c0028867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002886f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028879:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028884:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028887:	85 c0                	test   eax,eax
c0028889:	74 22                	je     c00288ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002888b:	83 ec 0c             	sub    esp,0xc
c002888e:	68 76 a5 02 c0       	push   0xc002a576
c0028893:	e8 db 1d ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0028898:	83 c4 10             	add    esp,0x10
c002889b:	eb 10                	jmp    c00288ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002889d:	83 ec 0c             	sub    esp,0xc
c00288a0:	68 80 a5 02 c0       	push   0xc002a580
c00288a5:	e8 c9 1d ff ff       	call   c001a673 <Krnl::panic(char const*)>
c00288aa:	83 c4 10             	add    esp,0x10
c00288ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288b4:	8d 50 01             	lea    edx,[eax+0x1]
c00288b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288be:	90                   	nop
c00288bf:	83 c4 0c             	add    esp,0xc
c00288c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00288c4 <LinkedList<UnixFile>::getFirstElement()>:
c00288c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00288cc <LinkedList<UnixFile>::removeFirst()>:
c00288cc:	83 ec 0c             	sub    esp,0xc
c00288cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00288d5:	85 c0                	test   eax,eax
c00288d7:	75 12                	jne    c00288eb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00288d9:	83 ec 0c             	sub    esp,0xc
c00288dc:	68 8c a5 02 c0       	push   0xc002a58c
c00288e1:	e8 8d 1d ff ff       	call   c001a673 <Krnl::panic(char const*)>
c00288e6:	83 c4 10             	add    esp,0x10
c00288e9:	eb 7e                	jmp    c0028969 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00288eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288f5:	85 c0                	test   eax,eax
c00288f7:	74 10                	je     c0028909 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00288f9:	83 ec 0c             	sub    esp,0xc
c00288fc:	68 d7 a5 02 c0       	push   0xc002a5d7
c0028901:	e8 6d 1d ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0028906:	83 c4 10             	add    esp,0x10
c0028909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890d:	8b 00                	mov    eax,DWORD PTR [eax]
c002890f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028912:	85 c0                	test   eax,eax
c0028914:	75 33                	jne    c0028949 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028924:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002892b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028932:	83 f8 01             	cmp    eax,0x1
c0028935:	74 21                	je     c0028958 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028937:	83 ec 0c             	sub    esp,0xc
c002893a:	68 b0 a5 02 c0       	push   0xc002a5b0
c002893f:	e8 2f 1d ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0028944:	83 c4 10             	add    esp,0x10
c0028947:	eb 0f                	jmp    c0028958 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894d:	8b 00                	mov    eax,DWORD PTR [eax]
c002894f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028956:	89 10                	mov    DWORD PTR [eax],edx
c0028958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002895f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028966:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028969:	83 c4 0c             	add    esp,0xc
c002896c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002896e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002896e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028972:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028975:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028976 <DriverlessDevice::~DriverlessDevice()>:
c0028976:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c002897b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002897f:	89 10                	mov    DWORD PTR [eax],edx
c0028981:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028985:	50                   	push   eax
c0028986:	e8 2f b9 fe ff       	call   c00142ba <Device::~Device()>
c002898b:	83 c4 04             	add    esp,0x4
c002898e:	90                   	nop
c002898f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028990 <DriverlessDevice::~DriverlessDevice()>:
c0028990:	83 ec 0c             	sub    esp,0xc
c0028993:	83 ec 0c             	sub    esp,0xc
c0028996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002899a:	e8 d7 ff ff ff       	call   c0028976 <DriverlessDevice::~DriverlessDevice()>
c002899f:	83 c4 10             	add    esp,0x10
c00289a2:	83 ec 08             	sub    esp,0x8
c00289a5:	68 58 01 00 00       	push   0x158
c00289aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289ae:	e8 2e a5 fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c00289b3:	83 c4 10             	add    esp,0x10
c00289b6:	83 c4 0c             	add    esp,0xc
c00289b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00289ba <LinkedList<Device>::addElement(Device*)>:
c00289ba:	83 ec 0c             	sub    esp,0xc
c00289bd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00289c2:	75 10                	jne    c00289d4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00289c4:	83 ec 0c             	sub    esp,0xc
c00289c7:	68 54 a5 02 c0       	push   0xc002a554
c00289cc:	e8 a2 1c ff ff       	call   c001a673 <Krnl::panic(char const*)>
c00289d1:	83 c4 10             	add    esp,0x10
c00289d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00289da:	85 c0                	test   eax,eax
c00289dc:	74 3a                	je     c0028a18 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289e5:	85 c0                	test   eax,eax
c00289e7:	74 2f                	je     c0028a18 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289f4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00289fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a02:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a09:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a0c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a16:	eb 68                	jmp    c0028a80 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a1e:	85 c0                	test   eax,eax
c0028a20:	75 4e                	jne    c0028a70 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a29:	85 c0                	test   eax,eax
c0028a2b:	75 43                	jne    c0028a70 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a35:	89 10                	mov    DWORD PTR [eax],edx
c0028a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a49:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a5a:	85 c0                	test   eax,eax
c0028a5c:	74 22                	je     c0028a80 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a5e:	83 ec 0c             	sub    esp,0xc
c0028a61:	68 76 a5 02 c0       	push   0xc002a576
c0028a66:	e8 08 1c ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0028a6b:	83 c4 10             	add    esp,0x10
c0028a6e:	eb 10                	jmp    c0028a80 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a70:	83 ec 0c             	sub    esp,0xc
c0028a73:	68 80 a5 02 c0       	push   0xc002a580
c0028a78:	e8 f6 1b ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0028a7d:	83 c4 10             	add    esp,0x10
c0028a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a87:	8d 50 01             	lea    edx,[eax+0x1]
c0028a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a91:	90                   	nop
c0028a92:	83 c4 0c             	add    esp,0xc
c0028a95:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028a96 <LinkedList<Device>::LinkedList()>:
c0028a96:	83 ec 0c             	sub    esp,0xc
c0028a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ad9:	83 ec 0c             	sub    esp,0xc
c0028adc:	68 3a a5 02 c0       	push   0xc002a53a
c0028ae1:	e8 db a4 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0028ae6:	83 c4 10             	add    esp,0x10
c0028ae9:	90                   	nop
c0028aea:	83 c4 0c             	add    esp,0xc
c0028aed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028aee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028af2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028af4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028af6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028af6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028afa:	8b 00                	mov    eax,DWORD PTR [eax]
c0028afc:	85 c0                	test   eax,eax
c0028afe:	75 0e                	jne    c0028b0e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b07:	85 c0                	test   eax,eax
c0028b09:	75 03                	jne    c0028b0e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b0b:	b0 01                	mov    al,0x1
c0028b0d:	c3                   	ret    
c0028b0e:	b0 00                	mov    al,0x0
c0028b10:	90                   	nop
c0028b11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028b12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028b12:	83 ec 0c             	sub    esp,0xc
c0028b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b19:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b1b:	85 c0                	test   eax,eax
c0028b1d:	75 15                	jne    c0028b34 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028b1f:	83 ec 0c             	sub    esp,0xc
c0028b22:	68 8c a5 02 c0       	push   0xc002a58c
c0028b27:	e8 47 1b ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0028b2c:	83 c4 10             	add    esp,0x10
c0028b2f:	e9 88 00 00 00       	jmp    c0028bbc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b3b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b3e:	85 c0                	test   eax,eax
c0028b40:	0f 95 c0             	setne  al
c0028b43:	84 c0                	test   al,al
c0028b45:	74 10                	je     c0028b57 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028b47:	83 ec 0c             	sub    esp,0xc
c0028b4a:	68 d7 a5 02 c0       	push   0xc002a5d7
c0028b4f:	e8 1f 1b ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0028b54:	83 c4 10             	add    esp,0x10
c0028b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b5d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b60:	85 c0                	test   eax,eax
c0028b62:	0f 94 c0             	sete   al
c0028b65:	84 c0                	test   al,al
c0028b67:	74 33                	je     c0028b9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b82:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b85:	83 f8 01             	cmp    eax,0x1
c0028b88:	74 21                	je     c0028bab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b8a:	83 ec 0c             	sub    esp,0xc
c0028b8d:	68 b0 a5 02 c0       	push   0xc002a5b0
c0028b92:	e8 dc 1a ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0028b97:	83 c4 10             	add    esp,0x10
c0028b9a:	eb 0f                	jmp    c0028bab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ba2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028ba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba9:	89 10                	mov    DWORD PTR [eax],edx
c0028bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028baf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bb2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bbc:	83 c4 0c             	add    esp,0xc
c0028bbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028bc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028bc0:	83 ec 0c             	sub    esp,0xc
c0028bc3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028bc8:	75 10                	jne    c0028bda <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028bca:	83 ec 0c             	sub    esp,0xc
c0028bcd:	68 54 a5 02 c0       	push   0xc002a554
c0028bd2:	e8 9c 1a ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0028bd7:	83 c4 10             	add    esp,0x10
c0028bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bde:	8b 00                	mov    eax,DWORD PTR [eax]
c0028be0:	85 c0                	test   eax,eax
c0028be2:	74 34                	je     c0028c18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028beb:	85 c0                	test   eax,eax
c0028bed:	74 29                	je     c0028c18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bf6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bfa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c0f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c16:	eb 65                	jmp    c0028c7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c1e:	85 c0                	test   eax,eax
c0028c20:	75 4b                	jne    c0028c6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c29:	85 c0                	test   eax,eax
c0028c2b:	75 40                	jne    c0028c6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c35:	89 10                	mov    DWORD PTR [eax],edx
c0028c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c49:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c57:	85 c0                	test   eax,eax
c0028c59:	74 22                	je     c0028c7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c5b:	83 ec 0c             	sub    esp,0xc
c0028c5e:	68 76 a5 02 c0       	push   0xc002a576
c0028c63:	e8 0b 1a ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0028c68:	83 c4 10             	add    esp,0x10
c0028c6b:	eb 10                	jmp    c0028c7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c6d:	83 ec 0c             	sub    esp,0xc
c0028c70:	68 80 a5 02 c0       	push   0xc002a580
c0028c75:	e8 f9 19 ff ff       	call   c001a673 <Krnl::panic(char const*)>
c0028c7a:	83 c4 10             	add    esp,0x10
c0028c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c84:	8d 50 01             	lea    edx,[eax+0x1]
c0028c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c8e:	90                   	nop
c0028c8f:	83 c4 0c             	add    esp,0xc
c0028c92:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028c94 <ACPI::~ACPI()>:
c0028c94:	83 ec 0c             	sub    esp,0xc
c0028c97:	ba f8 b7 02 c0       	mov    edx,0xc002b7f8
c0028c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca0:	89 10                	mov    DWORD PTR [eax],edx
c0028ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca6:	83 ec 0c             	sub    esp,0xc
c0028ca9:	50                   	push   eax
c0028caa:	e8 0b b6 fe ff       	call   c00142ba <Device::~Device()>
c0028caf:	83 c4 10             	add    esp,0x10
c0028cb2:	90                   	nop
c0028cb3:	83 c4 0c             	add    esp,0xc
c0028cb6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028cb8 <ACPI::~ACPI()>:
c0028cb8:	83 ec 0c             	sub    esp,0xc
c0028cbb:	83 ec 0c             	sub    esp,0xc
c0028cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc2:	e8 cd ff ff ff       	call   c0028c94 <ACPI::~ACPI()>
c0028cc7:	83 c4 10             	add    esp,0x10
c0028cca:	83 ec 08             	sub    esp,0x8
c0028ccd:	68 68 12 00 00       	push   0x1268
c0028cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cd6:	e8 06 a2 fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0028cdb:	83 c4 10             	add    esp,0x10
c0028cde:	83 c4 0c             	add    esp,0xc
c0028ce1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028ce2 <CPU::~CPU()>:
c0028ce2:	83 ec 0c             	sub    esp,0xc
c0028ce5:	ba e8 bb 02 c0       	mov    edx,0xc002bbe8
c0028cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cee:	89 10                	mov    DWORD PTR [eax],edx
c0028cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf4:	83 ec 0c             	sub    esp,0xc
c0028cf7:	50                   	push   eax
c0028cf8:	e8 bd b5 fe ff       	call   c00142ba <Device::~Device()>
c0028cfd:	83 c4 10             	add    esp,0x10
c0028d00:	90                   	nop
c0028d01:	83 c4 0c             	add    esp,0xc
c0028d04:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028d06 <CPU::~CPU()>:
c0028d06:	83 ec 0c             	sub    esp,0xc
c0028d09:	83 ec 0c             	sub    esp,0xc
c0028d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d10:	e8 cd ff ff ff       	call   c0028ce2 <CPU::~CPU()>
c0028d15:	83 c4 10             	add    esp,0x10
c0028d18:	83 ec 08             	sub    esp,0x8
c0028d1b:	68 98 11 00 00       	push   0x1198
c0028d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d24:	e8 b8 a1 fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0028d29:	83 c4 10             	add    esp,0x10
c0028d2c:	83 c4 0c             	add    esp,0xc
c0028d2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028d30 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028d30:	90                   	nop
c0028d31:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028d32 <ThreadControlBlock::ThreadControlBlock()>:
c0028d32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d36:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028d3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d41:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028d48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d4c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028d53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d57:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028d5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d62:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028d66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d6a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028d6e:	90                   	nop
c0028d6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028d70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028d70:	83 ec 0c             	sub    esp,0xc
c0028d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d8c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028db3:	83 ec 0c             	sub    esp,0xc
c0028db6:	68 3a a5 02 c0       	push   0xc002a53a
c0028dbb:	e8 01 a2 fe ff       	call   c0012fc1 <Dbg::kprintf(char const*, ...)>
c0028dc0:	83 c4 10             	add    esp,0x10
c0028dc3:	90                   	nop
c0028dc4:	83 c4 0c             	add    esp,0xc
c0028dc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028dc8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028dc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028dcc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028dcf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028dd0 <Vm::_FPUState::_FPUState()>:
c0028dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dd4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028ddb:	90                   	nop
c0028ddc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028dde <PCI::~PCI()>:
c0028dde:	83 ec 0c             	sub    esp,0xc
c0028de1:	ba dc cc 02 c0       	mov    edx,0xc002ccdc
c0028de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dea:	89 10                	mov    DWORD PTR [eax],edx
c0028dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df0:	83 ec 0c             	sub    esp,0xc
c0028df3:	50                   	push   eax
c0028df4:	e8 99 ae fe ff       	call   c0013c92 <Bus::~Bus()>
c0028df9:	83 c4 10             	add    esp,0x10
c0028dfc:	90                   	nop
c0028dfd:	83 c4 0c             	add    esp,0xc
c0028e00:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028e02 <PCI::~PCI()>:
c0028e02:	83 ec 0c             	sub    esp,0xc
c0028e05:	83 ec 0c             	sub    esp,0xc
c0028e08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e0c:	e8 cd ff ff ff       	call   c0028dde <PCI::~PCI()>
c0028e11:	83 c4 10             	add    esp,0x10
c0028e14:	83 ec 08             	sub    esp,0x8
c0028e17:	68 58 01 00 00       	push   0x158
c0028e1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e20:	e8 bc a0 fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0028e25:	83 c4 10             	add    esp,0x10
c0028e28:	83 c4 0c             	add    esp,0xc
c0028e2b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028e2c <IDE::~IDE()>:
c0028e2c:	83 ec 0c             	sub    esp,0xc
c0028e2f:	ba 40 cf 02 c0       	mov    edx,0xc002cf40
c0028e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e38:	89 10                	mov    DWORD PTR [eax],edx
c0028e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e3e:	83 ec 0c             	sub    esp,0xc
c0028e41:	50                   	push   eax
c0028e42:	e8 63 b9 fe ff       	call   c00147aa <HardDiskController::~HardDiskController()>
c0028e47:	83 c4 10             	add    esp,0x10
c0028e4a:	90                   	nop
c0028e4b:	83 c4 0c             	add    esp,0xc
c0028e4e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028e50 <IDE::~IDE()>:
c0028e50:	83 ec 0c             	sub    esp,0xc
c0028e53:	83 ec 0c             	sub    esp,0xc
c0028e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e5a:	e8 cd ff ff ff       	call   c0028e2c <IDE::~IDE()>
c0028e5f:	83 c4 10             	add    esp,0x10
c0028e62:	83 ec 08             	sub    esp,0x8
c0028e65:	68 70 02 00 00       	push   0x270
c0028e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e6e:	e8 6e a0 fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0028e73:	83 c4 10             	add    esp,0x10
c0028e76:	83 c4 0c             	add    esp,0xc
c0028e79:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028e7a <SATABus::~SATABus()>:
c0028e7a:	83 ec 0c             	sub    esp,0xc
c0028e7d:	ba 20 d0 02 c0       	mov    edx,0xc002d020
c0028e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e86:	89 10                	mov    DWORD PTR [eax],edx
c0028e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e8c:	83 ec 0c             	sub    esp,0xc
c0028e8f:	50                   	push   eax
c0028e90:	e8 15 b9 fe ff       	call   c00147aa <HardDiskController::~HardDiskController()>
c0028e95:	83 c4 10             	add    esp,0x10
c0028e98:	90                   	nop
c0028e99:	83 c4 0c             	add    esp,0xc
c0028e9c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028e9e <SATABus::~SATABus()>:
c0028e9e:	83 ec 0c             	sub    esp,0xc
c0028ea1:	83 ec 0c             	sub    esp,0xc
c0028ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea8:	e8 cd ff ff ff       	call   c0028e7a <SATABus::~SATABus()>
c0028ead:	83 c4 10             	add    esp,0x10
c0028eb0:	83 ec 08             	sub    esp,0x8
c0028eb3:	68 64 01 00 00       	push   0x164
c0028eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ebc:	e8 20 a0 fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0028ec1:	83 c4 10             	add    esp,0x10
c0028ec4:	83 c4 0c             	add    esp,0xc
c0028ec7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028ec8 <ATA::~ATA()>:
c0028ec8:	83 ec 0c             	sub    esp,0xc
c0028ecb:	ba 6c d0 02 c0       	mov    edx,0xc002d06c
c0028ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed4:	89 10                	mov    DWORD PTR [eax],edx
c0028ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eda:	83 ec 0c             	sub    esp,0xc
c0028edd:	50                   	push   eax
c0028ede:	e8 b9 b9 fe ff       	call   c001489c <PhysicalDisk::~PhysicalDisk()>
c0028ee3:	83 c4 10             	add    esp,0x10
c0028ee6:	90                   	nop
c0028ee7:	83 c4 0c             	add    esp,0xc
c0028eea:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028eec <ATA::~ATA()>:
c0028eec:	83 ec 0c             	sub    esp,0xc
c0028eef:	83 ec 0c             	sub    esp,0xc
c0028ef2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef6:	e8 cd ff ff ff       	call   c0028ec8 <ATA::~ATA()>
c0028efb:	83 c4 10             	add    esp,0x10
c0028efe:	83 ec 08             	sub    esp,0x8
c0028f01:	68 7c 01 00 00       	push   0x17c
c0028f06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f0a:	e8 d2 9f fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0028f0f:	83 c4 10             	add    esp,0x10
c0028f12:	83 c4 0c             	add    esp,0xc
c0028f15:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028f16 <ATAPI::~ATAPI()>:
c0028f16:	83 ec 0c             	sub    esp,0xc
c0028f19:	ba a4 d0 02 c0       	mov    edx,0xc002d0a4
c0028f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f22:	89 10                	mov    DWORD PTR [eax],edx
c0028f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f28:	83 ec 0c             	sub    esp,0xc
c0028f2b:	50                   	push   eax
c0028f2c:	e8 6b b9 fe ff       	call   c001489c <PhysicalDisk::~PhysicalDisk()>
c0028f31:	83 c4 10             	add    esp,0x10
c0028f34:	90                   	nop
c0028f35:	83 c4 0c             	add    esp,0xc
c0028f38:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028f3a <ATAPI::~ATAPI()>:
c0028f3a:	83 ec 0c             	sub    esp,0xc
c0028f3d:	83 ec 0c             	sub    esp,0xc
c0028f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f44:	e8 cd ff ff ff       	call   c0028f16 <ATAPI::~ATAPI()>
c0028f49:	83 c4 10             	add    esp,0x10
c0028f4c:	83 ec 08             	sub    esp,0x8
c0028f4f:	68 80 01 00 00       	push   0x180
c0028f54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f58:	e8 84 9f fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0028f5d:	83 c4 10             	add    esp,0x10
c0028f60:	83 c4 0c             	add    esp,0xc
c0028f63:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028f64 <SATA::~SATA()>:
c0028f64:	83 ec 0c             	sub    esp,0xc
c0028f67:	ba 58 d1 02 c0       	mov    edx,0xc002d158
c0028f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f70:	89 10                	mov    DWORD PTR [eax],edx
c0028f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f76:	83 ec 0c             	sub    esp,0xc
c0028f79:	50                   	push   eax
c0028f7a:	e8 1d b9 fe ff       	call   c001489c <PhysicalDisk::~PhysicalDisk()>
c0028f7f:	83 c4 10             	add    esp,0x10
c0028f82:	90                   	nop
c0028f83:	83 c4 0c             	add    esp,0xc
c0028f86:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028f88 <SATA::~SATA()>:
c0028f88:	83 ec 0c             	sub    esp,0xc
c0028f8b:	83 ec 0c             	sub    esp,0xc
c0028f8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f92:	e8 cd ff ff ff       	call   c0028f64 <SATA::~SATA()>
c0028f97:	83 c4 10             	add    esp,0x10
c0028f9a:	83 ec 08             	sub    esp,0x8
c0028f9d:	68 7c 01 00 00       	push   0x17c
c0028fa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fa6:	e8 36 9f fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0028fab:	83 c4 10             	add    esp,0x10
c0028fae:	83 c4 0c             	add    esp,0xc
c0028fb1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028fb2 <SATAPI::~SATAPI()>:
c0028fb2:	83 ec 0c             	sub    esp,0xc
c0028fb5:	ba 34 d2 02 c0       	mov    edx,0xc002d234
c0028fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fbe:	89 10                	mov    DWORD PTR [eax],edx
c0028fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc4:	83 ec 0c             	sub    esp,0xc
c0028fc7:	50                   	push   eax
c0028fc8:	e8 cf b8 fe ff       	call   c001489c <PhysicalDisk::~PhysicalDisk()>
c0028fcd:	83 c4 10             	add    esp,0x10
c0028fd0:	90                   	nop
c0028fd1:	83 c4 0c             	add    esp,0xc
c0028fd4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028fd6 <SATAPI::~SATAPI()>:
c0028fd6:	83 ec 0c             	sub    esp,0xc
c0028fd9:	83 ec 0c             	sub    esp,0xc
c0028fdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe0:	e8 cd ff ff ff       	call   c0028fb2 <SATAPI::~SATAPI()>
c0028fe5:	83 c4 10             	add    esp,0x10
c0028fe8:	83 ec 08             	sub    esp,0x8
c0028feb:	68 80 01 00 00       	push   0x180
c0028ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff4:	e8 e8 9e fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0028ff9:	83 c4 10             	add    esp,0x10
c0028ffc:	83 c4 0c             	add    esp,0xc
c0028fff:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029000 <AVX::~AVX()>:
c0029000:	83 ec 0c             	sub    esp,0xc
c0029003:	ba 74 d2 02 c0       	mov    edx,0xc002d274
c0029008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900c:	89 10                	mov    DWORD PTR [eax],edx
c002900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029012:	83 ec 0c             	sub    esp,0xc
c0029015:	50                   	push   eax
c0029016:	e8 05 b9 fe ff       	call   c0014920 <FPU::~FPU()>
c002901b:	83 c4 10             	add    esp,0x10
c002901e:	90                   	nop
c002901f:	83 c4 0c             	add    esp,0xc
c0029022:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029024 <AVX::~AVX()>:
c0029024:	83 ec 0c             	sub    esp,0xc
c0029027:	83 ec 0c             	sub    esp,0xc
c002902a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002902e:	e8 cd ff ff ff       	call   c0029000 <AVX::~AVX()>
c0029033:	83 c4 10             	add    esp,0x10
c0029036:	83 ec 08             	sub    esp,0x8
c0029039:	68 58 01 00 00       	push   0x158
c002903e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029042:	e8 9a 9e fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0029047:	83 c4 10             	add    esp,0x10
c002904a:	83 c4 0c             	add    esp,0xc
c002904d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002904e <MMX::~MMX()>:
c002904e:	83 ec 0c             	sub    esp,0xc
c0029051:	ba b4 d2 02 c0       	mov    edx,0xc002d2b4
c0029056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905a:	89 10                	mov    DWORD PTR [eax],edx
c002905c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029060:	83 ec 0c             	sub    esp,0xc
c0029063:	50                   	push   eax
c0029064:	e8 b7 b8 fe ff       	call   c0014920 <FPU::~FPU()>
c0029069:	83 c4 10             	add    esp,0x10
c002906c:	90                   	nop
c002906d:	83 c4 0c             	add    esp,0xc
c0029070:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029072 <MMX::~MMX()>:
c0029072:	83 ec 0c             	sub    esp,0xc
c0029075:	83 ec 0c             	sub    esp,0xc
c0029078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002907c:	e8 cd ff ff ff       	call   c002904e <MMX::~MMX()>
c0029081:	83 c4 10             	add    esp,0x10
c0029084:	83 ec 08             	sub    esp,0x8
c0029087:	68 58 01 00 00       	push   0x158
c002908c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029090:	e8 4c 9e fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0029095:	83 c4 10             	add    esp,0x10
c0029098:	83 c4 0c             	add    esp,0xc
c002909b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002909c <SSE::~SSE()>:
c002909c:	83 ec 0c             	sub    esp,0xc
c002909f:	ba f4 d2 02 c0       	mov    edx,0xc002d2f4
c00290a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a8:	89 10                	mov    DWORD PTR [eax],edx
c00290aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ae:	83 ec 0c             	sub    esp,0xc
c00290b1:	50                   	push   eax
c00290b2:	e8 69 b8 fe ff       	call   c0014920 <FPU::~FPU()>
c00290b7:	83 c4 10             	add    esp,0x10
c00290ba:	90                   	nop
c00290bb:	83 c4 0c             	add    esp,0xc
c00290be:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00290c0 <SSE::~SSE()>:
c00290c0:	83 ec 0c             	sub    esp,0xc
c00290c3:	83 ec 0c             	sub    esp,0xc
c00290c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ca:	e8 cd ff ff ff       	call   c002909c <SSE::~SSE()>
c00290cf:	83 c4 10             	add    esp,0x10
c00290d2:	83 ec 08             	sub    esp,0x8
c00290d5:	68 58 01 00 00       	push   0x158
c00290da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290de:	e8 fe 9d fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c00290e3:	83 c4 10             	add    esp,0x10
c00290e6:	83 c4 0c             	add    esp,0xc
c00290e9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00290ea <x87::~x87()>:
c00290ea:	83 ec 0c             	sub    esp,0xc
c00290ed:	ba 34 d3 02 c0       	mov    edx,0xc002d334
c00290f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f6:	89 10                	mov    DWORD PTR [eax],edx
c00290f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290fc:	83 ec 0c             	sub    esp,0xc
c00290ff:	50                   	push   eax
c0029100:	e8 1b b8 fe ff       	call   c0014920 <FPU::~FPU()>
c0029105:	83 c4 10             	add    esp,0x10
c0029108:	90                   	nop
c0029109:	83 c4 0c             	add    esp,0xc
c002910c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002910e <x87::~x87()>:
c002910e:	83 ec 0c             	sub    esp,0xc
c0029111:	83 ec 0c             	sub    esp,0xc
c0029114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029118:	e8 cd ff ff ff       	call   c00290ea <x87::~x87()>
c002911d:	83 c4 10             	add    esp,0x10
c0029120:	83 ec 08             	sub    esp,0x8
c0029123:	68 58 01 00 00       	push   0x158
c0029128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002912c:	e8 b0 9d fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0029131:	83 c4 10             	add    esp,0x10
c0029134:	83 c4 0c             	add    esp,0xc
c0029137:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029138 <IOAPIC::~IOAPIC()>:
c0029138:	83 ec 0c             	sub    esp,0xc
c002913b:	ba 8c d4 02 c0       	mov    edx,0xc002d48c
c0029140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029144:	89 10                	mov    DWORD PTR [eax],edx
c0029146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002914a:	83 ec 0c             	sub    esp,0xc
c002914d:	50                   	push   eax
c002914e:	e8 67 b1 fe ff       	call   c00142ba <Device::~Device()>
c0029153:	83 c4 10             	add    esp,0x10
c0029156:	90                   	nop
c0029157:	83 c4 0c             	add    esp,0xc
c002915a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002915c <IOAPIC::~IOAPIC()>:
c002915c:	83 ec 0c             	sub    esp,0xc
c002915f:	83 ec 0c             	sub    esp,0xc
c0029162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029166:	e8 cd ff ff ff       	call   c0029138 <IOAPIC::~IOAPIC()>
c002916b:	83 c4 10             	add    esp,0x10
c002916e:	83 ec 08             	sub    esp,0x8
c0029171:	68 68 01 00 00       	push   0x168
c0029176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002917a:	e8 62 9d fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c002917f:	83 c4 10             	add    esp,0x10
c0029182:	83 c4 0c             	add    esp,0xc
c0029185:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029186 <APIC::~APIC()>:
c0029186:	83 ec 0c             	sub    esp,0xc
c0029189:	ba 44 d4 02 c0       	mov    edx,0xc002d444
c002918e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029192:	89 10                	mov    DWORD PTR [eax],edx
c0029194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029198:	83 ec 0c             	sub    esp,0xc
c002919b:	50                   	push   eax
c002919c:	e8 49 bc fe ff       	call   c0014dea <InterruptController::~InterruptController()>
c00291a1:	83 c4 10             	add    esp,0x10
c00291a4:	90                   	nop
c00291a5:	83 c4 0c             	add    esp,0xc
c00291a8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00291aa <APIC::~APIC()>:
c00291aa:	83 ec 0c             	sub    esp,0xc
c00291ad:	83 ec 0c             	sub    esp,0xc
c00291b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291b4:	e8 cd ff ff ff       	call   c0029186 <APIC::~APIC()>
c00291b9:	83 c4 10             	add    esp,0x10
c00291bc:	83 ec 08             	sub    esp,0x8
c00291bf:	68 58 21 00 00       	push   0x2158
c00291c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c8:	e8 14 9d fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c00291cd:	83 c4 10             	add    esp,0x10
c00291d0:	83 c4 0c             	add    esp,0xc
c00291d3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00291d4 <PIC::~PIC()>:
c00291d4:	83 ec 0c             	sub    esp,0xc
c00291d7:	ba dc d4 02 c0       	mov    edx,0xc002d4dc
c00291dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e0:	89 10                	mov    DWORD PTR [eax],edx
c00291e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e6:	83 ec 0c             	sub    esp,0xc
c00291e9:	50                   	push   eax
c00291ea:	e8 fb bb fe ff       	call   c0014dea <InterruptController::~InterruptController()>
c00291ef:	83 c4 10             	add    esp,0x10
c00291f2:	90                   	nop
c00291f3:	83 c4 0c             	add    esp,0xc
c00291f6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00291f8 <PIC::~PIC()>:
c00291f8:	83 ec 0c             	sub    esp,0xc
c00291fb:	83 ec 0c             	sub    esp,0xc
c00291fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029202:	e8 cd ff ff ff       	call   c00291d4 <PIC::~PIC()>
c0029207:	83 c4 10             	add    esp,0x10
c002920a:	83 ec 08             	sub    esp,0x8
c002920d:	68 58 21 00 00       	push   0x2158
c0029212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029216:	e8 c6 9c fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c002921b:	83 c4 10             	add    esp,0x10
c002921e:	83 c4 0c             	add    esp,0xc
c0029221:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029222 <APICTimer::~APICTimer()>:
c0029222:	83 ec 0c             	sub    esp,0xc
c0029225:	ba 30 d5 02 c0       	mov    edx,0xc002d530
c002922a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002922e:	89 10                	mov    DWORD PTR [eax],edx
c0029230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029234:	83 ec 0c             	sub    esp,0xc
c0029237:	50                   	push   eax
c0029238:	e8 09 db fe ff       	call   c0016d46 <Timer::~Timer()>
c002923d:	83 c4 10             	add    esp,0x10
c0029240:	90                   	nop
c0029241:	83 c4 0c             	add    esp,0xc
c0029244:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029246 <APICTimer::~APICTimer()>:
c0029246:	83 ec 0c             	sub    esp,0xc
c0029249:	83 ec 0c             	sub    esp,0xc
c002924c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029250:	e8 cd ff ff ff       	call   c0029222 <APICTimer::~APICTimer()>
c0029255:	83 c4 10             	add    esp,0x10
c0029258:	83 ec 08             	sub    esp,0x8
c002925b:	68 60 01 00 00       	push   0x160
c0029260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029264:	e8 78 9c fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c0029269:	83 c4 10             	add    esp,0x10
c002926c:	83 c4 0c             	add    esp,0xc
c002926f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029270 <PIT::~PIT()>:
c0029270:	83 ec 0c             	sub    esp,0xc
c0029273:	ba 80 d5 02 c0       	mov    edx,0xc002d580
c0029278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002927c:	89 10                	mov    DWORD PTR [eax],edx
c002927e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029282:	83 ec 0c             	sub    esp,0xc
c0029285:	50                   	push   eax
c0029286:	e8 bb da fe ff       	call   c0016d46 <Timer::~Timer()>
c002928b:	83 c4 10             	add    esp,0x10
c002928e:	90                   	nop
c002928f:	83 c4 0c             	add    esp,0xc
c0029292:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029294 <PIT::~PIT()>:
c0029294:	83 ec 0c             	sub    esp,0xc
c0029297:	83 ec 0c             	sub    esp,0xc
c002929a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002929e:	e8 cd ff ff ff       	call   c0029270 <PIT::~PIT()>
c00292a3:	83 c4 10             	add    esp,0x10
c00292a6:	83 ec 08             	sub    esp,0x8
c00292a9:	68 5c 01 00 00       	push   0x15c
c00292ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292b2:	e8 2a 9c fe ff       	call   c0012ee1 <operator delete(void*, unsigned long)>
c00292b7:	83 c4 10             	add    esp,0x10
c00292ba:	83 c4 0c             	add    esp,0xc
c00292bd:	c3                   	ret    
