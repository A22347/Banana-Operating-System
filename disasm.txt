
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c6 f8 00 00       	call   c000f8e6 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 73 8e 02 00       	call   c0028e98 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 2e 9b 02 c0       	mov    ebx,0xc0029b2e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 3c 9b 02 c0    	cmp    ebx,0xc0029b3c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 e8 02 c0       	mov    eax,0xc002e858
c0000049:	3d 58 e8 02 c0       	cmp    eax,0xc002e858
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 e8 02 c0       	push   0xc002e858
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 e8 02 c0       	mov    eax,0xc002e858
c0000075:	2d 58 e8 02 c0       	sub    eax,0xc002e858
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 e8 02 c0       	push   0xc002e858
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee88,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 44 9b 02 c0       	mov    ebx,0xc0029b44
c00000bb:	81 eb 40 9b 02 c0    	sub    ebx,0xc0029b40
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 40 9b 02 c0       	mov    esi,0xc0029b40
c00000ca:	a1 8c ee 02 c0       	mov    eax,ds:0xc002ee8c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c ee 02 c0       	mov    ds:0xc002ee8c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c ee 02 c0       	mov    eax,ds:0xc002ee8c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 e8 02 c0       	push   0xc002e858
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee88,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 ee 02 c0       	push   0xc002ee90
c000012c:	68 58 e8 02 c0       	push   0xc002e858
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 bb d5 01 00       	call   c001d95e <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 ec 22 01 00       	call   c00126a7 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 99 d5 01 00       	call   c001d95e <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 41 da 01 00       	call   c001de25 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 9f e0 01 00       	call   c001e48c <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 d0 f2 02 c0 	lgdtd  ds:0xc002f2d0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 fd 3f 01 00       	call   c00145df <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 a8 ee 02 c0       	mov    ds:0xc002eea8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 a8 ee 02 c0    	mov    DWORD PTR ds:0xc002eea8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d a8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eea8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 60 9b 02 c0 02 	test   BYTE PTR [edx-0x3ffd64a0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 60 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd64a0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 60 9b 02 c0 08 	test   BYTE PTR [edx-0x3ffd64a0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 60 9b 02 c0 04 	test   BYTE PTR [ebx-0x3ffd64a0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 60 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd64a0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d c0 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002eec0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d c0 ee 02 c0    	mov    DWORD PTR ds:0xc002eec0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 c4 ee 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd113c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 c4 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd113c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d c0 ee 02 c0    	mov    DWORD PTR ds:0xc002eec0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 ec ee 02 c0    	cmp    DWORD PTR ds:0xc002eeec,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d fc ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002eefc
c0000e38:	c7 42 0c f4 ee 02 c0 	mov    DWORD PTR [edx+0xc],0xc002eef4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 fc ee 02 c0    	mov    DWORD PTR ds:0xc002eefc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 ec ee 02 c0    	mov    DWORD PTR ds:0xc002eeec,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 c0 ee 02 c0 02 	test   BYTE PTR ds:0xc002eec0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 cf e7 00 00       	call   c000f6e8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 11 e7 00 00       	call   c000f6e8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 fb e6 00 00       	call   c000f6e8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 d7 e6 00 00       	call   c000f6e8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d c0 ee 02 c0    	mov    edi,DWORD PTR ds:0xc002eec0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 c4 ee 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd113c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 c4 ee 02 c0 	mov    DWORD PTR [edx*4-0x3ffd113c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 f4 ee 02 c0 	lea    edx,[eax*8-0x3ffd110c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 00 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef00
c00011ba:	81 fb f4 ee 02 c0    	cmp    ebx,0xc002eef4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d f4 ee 02 c0       	cmp    eax,0xc002eef4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d f0 ee 02 c0    	cmp    DWORD PTR ds:0xc002eef0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 fc ee 02 c0       	mov    ds:0xc002eefc,eax
c00011f6:	a3 00 ef 02 c0       	mov    ds:0xc002ef00,eax
c00011fb:	a3 f0 ee 02 c0       	mov    ds:0xc002eef0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 f4 ee 02 c0 	mov    DWORD PTR [eax+0x8],0xc002eef4
c0001209:	c7 40 0c f4 ee 02 c0 	mov    DWORD PTR [eax+0xc],0xc002eef4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 00 ef 02 c0       	mov    ds:0xc002ef00,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 f4 ee 02 c0 	mov    DWORD PTR [eax+0x8],0xc002eef4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 b8 ee 02 c0 	lea    ebp,[edx*4-0x3ffd1148]
c000125a:	8b 14 95 c0 ee 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1140]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 c0 ee 02 c0 	lea    ecx,[edx*4-0x3ffd1140]
c0001275:	8b 14 95 c0 ee 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1140]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd f4 f1 02 c0 	or     DWORD PTR [edi*4-0x3ffd0e0c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 f4 ee 02 c0 	lea    eax,[eax*8-0x3ffd110c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d fc ee 02 c0    	mov    DWORD PTR ds:0xc002eefc,ecx
c000132f:	89 0d 00 ef 02 c0    	mov    DWORD PTR ds:0xc002ef00,ecx
c0001335:	c7 41 08 f4 ee 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002eef4
c000133c:	c7 41 0c f4 ee 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002eef4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd ec ee 02 c0 	lea    edx,[ecx*8-0x3ffd1114]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d f4 f1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0e0c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d f4 f1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0e0c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 ec ee 02 c0 	lea    edx,[eax*4-0x3ffd1114]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d f4 f1 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0e0c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d fc ee 02 c0    	mov    DWORD PTR ds:0xc002eefc,edi
c0001402:	89 3d 00 ef 02 c0    	mov    DWORD PTR ds:0xc002ef00,edi
c0001408:	c7 47 08 f4 ee 02 c0 	mov    DWORD PTR [edi+0x8],0xc002eef4
c000140f:	c7 47 0c f4 ee 02 c0 	mov    DWORD PTR [edi+0xc],0xc002eef4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d f0 ee 02 c0    	mov    DWORD PTR ds:0xc002eef0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 ec ee 02 c0       	mov    eax,ds:0xc002eeec
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d ec ee 02 c0    	mov    DWORD PTR ds:0xc002eeec,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba c0 ee 02 c0       	mov    edx,0xc002eec0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d c0 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002eec0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 14 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f214
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 14 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f214,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 14 f2 02 c0    	mov    DWORD PTR ds:0xc002f214,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 ec ee 02 c0    	cmp    DWORD PTR ds:0xc002eeec,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d ec ee 02 c0    	mov    DWORD PTR ds:0xc002eeec,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d c0 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002eec0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 1c f2 02 c0    	push   DWORD PTR ds:0xc002f21c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d c0 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002eec0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 1c f2 02 c0       	mov    eax,ds:0xc002f21c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d ec ee 02 c0 00 	cmp    DWORD PTR ds:0xc002eeec,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 ec ee 02 c0       	mov    eax,ds:0xc002eeec
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 c4 ee 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd113c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 f4 ee 02 c0       	mov    eax,0xc002eef4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d ec f1 02 c0       	cmp    eax,0xc002f1ec
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 28 f2 02 c0       	mov    eax,ds:0xc002f228
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 10 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f210
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 24 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f224
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 34 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f234
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 64 9c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd639c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 c0 ee 02 c0       	mov    eax,ds:0xc002eec0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 c0 ee 02 c0       	mov    ds:0xc002eec0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 04 f2 02 c0    	mov    DWORD PTR ds:0xc002f204,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 08 f2 02 c0    	mov    DWORD PTR ds:0xc002f208,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 0c f2 02 c0    	mov    DWORD PTR ds:0xc002f20c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 14 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f214,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 80 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd680]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 ea f3 01 00       	jmp    c0020fdc <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 80 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd680]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 1b f4 01 00       	jmp    c0021023 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 80 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd680]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 43 f4 01 00       	jmp    c002106a <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 ea 52 02 00       	call   c00271f4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 80 9d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6280]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 80 9d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6280]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 80 9c 02 c0       	mov    edx,0xc0029c80
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba a0 9d 02 c0       	mov    edx,0xc0029da0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba ec d0 02 c0       	mov    edx,0xc002d0ec
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ac 9d 02 c0       	mov    edx,0xc0029dac
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 90 9d 02 c0       	mov    edx,0xc0029d90
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 60 f2 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd0da0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 40 f2 02 c0    	mov    ax,ds:0xc002f240
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 40 f2 02 c0    	mov    ds:0xc002f240,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 e7 40 02 00       	call   c00271f4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 b2 9d 02 c0       	mov    eax,0xc0029db2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 00 9d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6300]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 bb 9d 02 c0       	mov    eax,0xc0029dbb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 80 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6280]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 b2 2a 02 00       	call   c00271f4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 90 9d 02 c0       	mov    edx,0xc0029d90
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 80 9c 02 c0       	mov    edx,0xc0029c80
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 90 9c 02 c0       	mov    edx,0xc0029c90
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 60 f2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0da0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 60 f2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0da0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 79 14 02 00       	call   c00271f4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 5f 14 02 00       	call   c00271f4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 d7 9c 02 c0       	mov    eax,0xc0029cd7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 d0 9c 02 c0       	mov    eax,0xc0029cd0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 60 f2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0da0]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be c0 9c 02 c0       	mov    esi,0xc0029cc0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 a2 fb 01 00       	call   c00271f4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba a0 9d 02 c0       	mov    edx,0xc0029da0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba a0 9c 02 c0       	mov    edx,0xc0029ca0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba b0 9c 02 c0       	mov    edx,0xc0029cb0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba c2 9d 02 c0       	mov    edx,0xc0029dc2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ce 9d 02 c0       	mov    edx,0xc0029dce
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba e2 9d 02 c0       	mov    edx,0xc0029de2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 23 74 00 00       	call   c000f88c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 1d 74 00 00       	call   c000f89c <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 00 a1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a100
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 00 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a100
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 00 9f 02 c0       	mov    eax,0xc0029f00
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 40 9e 02 c0       	mov    eax,0xc0029e40
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 00 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6200]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 62 71 00 00       	call   c000f89c <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 4c 71 00 00       	call   c000f89c <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 f6 04 02 00       	call   c0028cc7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 b9 04 02 00       	call   c0028ca9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 8d 04 02 00       	call   c0028cc7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 40 fb 01 00       	call   c00283cc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 c2 05 02 00       	call   c0028e60 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 07 04 02 00       	call   c0028cc7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 49 03 02 00       	call   c0028cc7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 16 03 02 00       	call   c0028ca9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 03 02 02 00       	call   c0028cc7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 cb 01 02 00       	call   c0028ca9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 2b 6d 00 00       	call   c000f8bc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 c6 6c 00 00       	call   c000f89c <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 00 a2 02 c0       	mov    eax,0xc002a200
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 d7 ff 01 00       	call   c0028cc7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 9c ff 01 00       	call   c0028ca9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 60 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd59a0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 ac fc 01 00       	call   c0028a5b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 2a f6 01 00       	call   c00283f8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 e6 fe 01 00       	call   c0028ccb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 d4 ff 01 00       	call   c0028def <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 be f5 01 00       	call   c00283f8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 69 fe 01 00       	call   c0028cc5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 4a fe 01 00       	call   c0028cc9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 e0 ff 01 00       	call   c0028e80 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 8a fb 01 00       	call   c0028a5b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 08 f5 01 00       	call   c00283f8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 c4 fd 01 00       	call   c0028ccb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 b2 fe 01 00       	call   c0028def <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 9c f4 01 00       	call   c00283f8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 47 fd 01 00       	call   c0028cc5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 27 fd 01 00       	call   c0028cc9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 bc fe 01 00       	call   c0028e80 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 62 fc 01 00       	call   c0028cc7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 20 fc 01 00       	call   c0028ca9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 08 fc 01 00       	call   c0028cc7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 7a f9 01 00       	call   c0028a5b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 7c ec 01 00       	call   c0027d7b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 df f2 01 00       	call   c00283f8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 31 f9 01 00       	call   c0028a5b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 37 ec 01 00       	call   c0027d7b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 06 f9 01 00       	call   c0028a5b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 56 fb 01 00       	call   c0028cc5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 33 f2 01 00       	call   c00283cc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 b5 fc 01 00       	call   c0028e60 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 dc fa 01 00       	call   c0028ca9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 d7 f1 01 00       	call   c00283cc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 55 f8 01 00       	call   c0028a5b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 d8 f1 01 00       	call   c00283f8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 2a f8 01 00       	call   c0028a5b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 91 f4 01 00       	call   c00286dc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 10 eb 01 00       	call   c0027d7b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 70 e4 01 00       	call   c0027710 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 47 fb 01 00       	call   c0028def <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 30 f1 01 00       	call   c00283f8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 17 fb 01 00       	call   c0028def <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 89 ea 01 00       	call   c0027d7b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 c2 f9 01 00       	call   c0028ccb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 aa f3 01 00       	call   c00286dc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 30 ea 01 00       	call   c0027d7b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 1e fb 01 00       	call   c0028e80 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 f0 f6 01 00       	call   c0028a5b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 47 f0 01 00       	call   c00283cc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 26 f9 01 00       	call   c0028cc7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 bf e9 01 00       	call   c0027d7b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 eb ef 01 00       	call   c00283cc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 8d fa 01 00       	call   c0028e80 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 3e f6 01 00       	call   c0028a5b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 bb ef 01 00       	call   c00283f8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 0e f6 01 00       	call   c0028a5b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 14 e9 01 00       	call   c0027d7b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 e4 f5 01 00       	call   c0028a5b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 36 f8 01 00       	call   c0028cc7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 0d ef 01 00       	call   c00283cc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 8f f9 01 00       	call   c0028e60 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 b6 f7 01 00       	call   c0028ca9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 b0 ee 01 00       	call   c00283cc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 2e f5 01 00       	call   c0028a5b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 b1 ee 01 00       	call   c00283f8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 03 f5 01 00       	call   c0028a5b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 6a f1 01 00       	call   c00286dc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 e9 e7 01 00       	call   c0027d7b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 39 e1 01 00       	call   c0027710 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 10 f8 01 00       	call   c0028def <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 f9 ed 01 00       	call   c00283f8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 e0 f7 01 00       	call   c0028def <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 52 e7 01 00       	call   c0027d7b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 8b f6 01 00       	call   c0028ccb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 72 f0 01 00       	call   c00286dc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 f1 e6 01 00       	call   c0027d7b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 df f7 01 00       	call   c0028e80 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 b1 f3 01 00       	call   c0028a5b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 08 ed 01 00       	call   c00283cc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 e7 f5 01 00       	call   c0028cc7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 80 e6 01 00       	call   c0027d7b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 ac ec 01 00       	call   c00283cc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 21 f3 01 00       	call   c0028a5b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 27 e6 01 00       	call   c0027d7b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 c0 a6 02 c0       	mov    eax,0xc002a6c0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 d4 a6 02 c0       	mov    eax,0xc002a6d4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 5f 60 00 00       	call   c000f89c <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 61 60 00 00       	call   c000f8bc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 9c f1 01 00       	call   c0028a5b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 1a eb 01 00       	call   c00283f8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 ac dd 01 00       	call   c0027710 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 83 f4 01 00       	call   c0028def <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 6c ea 01 00       	call   c00283f8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 4f f4 01 00       	call   c0028def <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 c1 e3 01 00       	call   c0027d7b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 21 f4 01 00       	call   c0028def <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 10 ea 01 00       	call   c00283f8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 79 e3 01 00       	call   c0027d7b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 9a dc 01 00       	call   c0027710 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 71 f3 01 00       	call   c0028def <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 5a e9 01 00       	call   c00283f8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 3d f3 01 00       	call   c0028def <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 af e2 01 00       	call   c0027d7b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 0f f3 01 00       	call   c0028def <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 fe e8 01 00       	call   c00283f8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 67 e2 01 00       	call   c0027d7b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 45 e2 01 00       	call   c0027d7b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 21 db 01 00       	call   c0027710 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 f8 f1 01 00       	call   c0028def <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 e1 e7 01 00       	call   c00283f8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 c4 f1 01 00       	call   c0028def <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 36 e1 01 00       	call   c0027d7b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 96 f1 01 00       	call   c0028def <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 7f e7 01 00       	call   c00283f8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 e8 e0 01 00       	call   c0027d7b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 48 f1 01 00       	call   c0028def <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 31 e7 01 00       	call   c00283f8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 9a e0 01 00       	call   c0027d7b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 af d9 01 00       	call   c0027710 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 86 f0 01 00       	call   c0028def <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 6f e6 01 00       	call   c00283f8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 56 f0 01 00       	call   c0028def <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 c8 df 01 00       	call   c0027d7b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 28 f0 01 00       	call   c0028def <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 11 e6 01 00       	call   c00283f8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 7a df 01 00       	call   c0027d7b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 da ef 01 00       	call   c0028def <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 c3 e5 01 00       	call   c00283f8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 2c df 01 00       	call   c0027d7b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 00 df 01 00       	call   c0027d7b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 5d e5 01 00       	call   c00283f8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 19 ee 01 00       	call   c0028ccb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 a8 de 01 00       	call   c0027d7b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 05 e5 01 00       	call   c00283f8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 c1 ed 01 00       	call   c0028ccb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 3b d7 01 00       	call   c0027710 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 12 ee 01 00       	call   c0028def <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 fb e3 01 00       	call   c00283f8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 de ed 01 00       	call   c0028def <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 50 dd 01 00       	call   c0027d7b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 b0 ed 01 00       	call   c0028def <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 99 e3 01 00       	call   c00283f8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 02 dd 01 00       	call   c0027d7b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 62 ed 01 00       	call   c0028def <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 4b e3 01 00       	call   c00283f8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 b4 dc 01 00       	call   c0027d7b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 14 ed 01 00       	call   c0028def <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 fd e2 01 00       	call   c00283f8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 66 dc 01 00       	call   c0027d7b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 c6 ec 01 00       	call   c0028def <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 af e2 01 00       	call   c00283f8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 18 dc 01 00       	call   c0027d7b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 1a d5 01 00       	call   c0027710 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 f1 eb 01 00       	call   c0028def <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 da e1 01 00       	call   c00283f8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 c1 eb 01 00       	call   c0028def <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 33 db 01 00       	call   c0027d7b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 93 eb 01 00       	call   c0028def <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 7c e1 01 00       	call   c00283f8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 e5 da 01 00       	call   c0027d7b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 45 eb 01 00       	call   c0028def <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 2e e1 01 00       	call   c00283f8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 97 da 01 00       	call   c0027d7b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 f7 ea 01 00       	call   c0028def <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 e0 e0 01 00       	call   c00283f8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 49 da 01 00       	call   c0027d7b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 a9 ea 01 00       	call   c0028def <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 92 e0 01 00       	call   c00283f8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 fb d9 01 00       	call   c0027d7b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 cf d9 01 00       	call   c0027d7b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 2c e0 01 00       	call   c00283f8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 e8 e8 01 00       	call   c0028ccb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 77 d9 01 00       	call   c0027d7b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 d4 df 01 00       	call   c00283f8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 90 e8 01 00       	call   c0028ccb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 1e d9 01 00       	call   c0027d7b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 7b df 01 00       	call   c00283f8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 37 e8 01 00       	call   c0028ccb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 c5 d8 01 00       	call   c0027d7b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 22 df 01 00       	call   c00283f8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 de e7 01 00       	call   c0028ccb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 3c d1 01 00       	call   c0027710 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 13 e8 01 00       	call   c0028def <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 fc dd 01 00       	call   c00283f8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 df e7 01 00       	call   c0028def <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 51 d7 01 00       	call   c0027d7b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 b1 e7 01 00       	call   c0028def <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 9a dd 01 00       	call   c00283f8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 03 d7 01 00       	call   c0027d7b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 63 e7 01 00       	call   c0028def <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 4c dd 01 00       	call   c00283f8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 b5 d6 01 00       	call   c0027d7b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 15 e7 01 00       	call   c0028def <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 fe dc 01 00       	call   c00283f8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 67 d6 01 00       	call   c0027d7b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 c7 e6 01 00       	call   c0028def <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 b0 dc 01 00       	call   c00283f8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 19 d6 01 00       	call   c0027d7b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 79 e6 01 00       	call   c0028def <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 62 dc 01 00       	call   c00283f8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 c8 d5 01 00       	call   c0027d7b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 28 e6 01 00       	call   c0028def <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 11 dc 01 00       	call   c00283f8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 7a d5 01 00       	call   c0027d7b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 74 ce 01 00       	call   c0027710 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 4b e5 01 00       	call   c0028def <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 34 db 01 00       	call   c00283f8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 14 e5 01 00       	call   c0028def <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 86 d4 01 00       	call   c0027d7b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 e6 e4 01 00       	call   c0028def <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 cf da 01 00       	call   c00283f8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 38 d4 01 00       	call   c0027d7b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 98 e4 01 00       	call   c0028def <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 81 da 01 00       	call   c00283f8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 ea d3 01 00       	call   c0027d7b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 4a e4 01 00       	call   c0028def <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 33 da 01 00       	call   c00283f8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 9c d3 01 00       	call   c0027d7b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 fc e3 01 00       	call   c0028def <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 e5 d9 01 00       	call   c00283f8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 4e d3 01 00       	call   c0027d7b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 ae e3 01 00       	call   c0028def <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 97 d9 01 00       	call   c00283f8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 fd d2 01 00       	call   c0027d7b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 5d e3 01 00       	call   c0028def <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 46 d9 01 00       	call   c00283f8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 b5 d2 01 00       	call   c0027d7b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 8e d2 01 00       	call   c0027d7b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 ec d8 01 00       	call   c00283f8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 a8 e1 01 00       	call   c0028ccb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 37 d2 01 00       	call   c0027d7b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 95 d8 01 00       	call   c00283f8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 51 e1 01 00       	call   c0028ccb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 df d1 01 00       	call   c0027d7b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 3d d8 01 00       	call   c00283f8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 f9 e0 01 00       	call   c0028ccb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 87 d1 01 00       	call   c0027d7b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 e5 d7 01 00       	call   c00283f8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 a1 e0 01 00       	call   c0028ccb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 2f d1 01 00       	call   c0027d7b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 8d d7 01 00       	call   c00283f8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 49 e0 01 00       	call   c0028ccb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 dd d0 01 00       	call   c0027d7b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 3b d7 01 00       	call   c00283f8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 f7 df 01 00       	call   c0028ccb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 0b c9 01 00       	call   c0027710 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 e2 df 01 00       	call   c0028def <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 cb d5 01 00       	call   c00283f8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 b2 df 01 00       	call   c0028def <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 24 cf 01 00       	call   c0027d7b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 04 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58fc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 58 df 01 00       	call   c0028def <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 41 d5 01 00       	call   c00283f8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 ac ce 01 00       	call   c0027d7b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 f9 de 01 00       	call   c0028def <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 e2 d4 01 00       	call   c00283f8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 4d ce 01 00       	call   c0027d7b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 9a de 01 00       	call   c0028def <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 83 d4 01 00       	call   c00283f8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 ee cd 01 00       	call   c0027d7b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 3b de 01 00       	call   c0028def <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 24 d4 01 00       	call   c00283f8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 8f cd 01 00       	call   c0027d7b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 dc dd 01 00       	call   c0028def <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 c5 d3 01 00       	call   c00283f8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 30 cd 01 00       	call   c0027d7b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 7d dd 01 00       	call   c0028def <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 66 d3 01 00       	call   c00283f8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 d1 cc 01 00       	call   c0027d7b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 1e dd 01 00       	call   c0028def <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 07 d3 01 00       	call   c00283f8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 72 cc 01 00       	call   c0027d7b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 bf dc 01 00       	call   c0028def <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 a8 d2 01 00       	call   c00283f8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 13 cc 01 00       	call   c0027d7b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 1d c5 01 00       	call   c0027710 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 f4 db 01 00       	call   c0028def <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 dd d1 01 00       	call   c00283f8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 c4 db 01 00       	call   c0028def <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 36 cb 01 00       	call   c0027d7b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 20 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58e0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 69 db 01 00       	call   c0028def <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 52 d1 01 00       	call   c00283f8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 bd ca 01 00       	call   c0027d7b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 09 db 01 00       	call   c0028def <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 f2 d0 01 00       	call   c00283f8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 5d ca 01 00       	call   c0027d7b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 a9 da 01 00       	call   c0028def <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 92 d0 01 00       	call   c00283f8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 fd c9 01 00       	call   c0027d7b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 49 da 01 00       	call   c0028def <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 32 d0 01 00       	call   c00283f8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 9d c9 01 00       	call   c0027d7b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 e9 d9 01 00       	call   c0028def <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 d2 cf 01 00       	call   c00283f8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 3d c9 01 00       	call   c0027d7b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 89 d9 01 00       	call   c0028def <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 72 cf 01 00       	call   c00283f8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 dd c8 01 00       	call   c0027d7b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 29 d9 01 00       	call   c0028def <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 12 cf 01 00       	call   c00283f8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 7d c8 01 00       	call   c0027d7b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 c9 d8 01 00       	call   c0028def <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 b2 ce 01 00       	call   c00283f8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 1d c8 01 00       	call   c0027d7b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 3c a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58c4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 c2 c7 01 00       	call   c0027d7b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 1f ce 01 00       	call   c00283f8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 db d6 01 00       	call   c0028ccb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 65 c7 01 00       	call   c0027d7b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 c2 cd 01 00       	call   c00283f8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 7e d6 01 00       	call   c0028ccb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 08 c7 01 00       	call   c0027d7b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 65 cd 01 00       	call   c00283f8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 21 d6 01 00       	call   c0028ccb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 ab c6 01 00       	call   c0027d7b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 08 cd 01 00       	call   c00283f8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 c4 d5 01 00       	call   c0028ccb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 4e c6 01 00       	call   c0027d7b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 ab cc 01 00       	call   c00283f8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 67 d5 01 00       	call   c0028ccb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 f1 c5 01 00       	call   c0027d7b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 4e cc 01 00       	call   c00283f8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 0a d5 01 00       	call   c0028ccb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 94 c5 01 00       	call   c0027d7b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 f1 cb 01 00       	call   c00283f8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 ad d4 01 00       	call   c0028ccb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 37 c5 01 00       	call   c0027d7b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 94 cb 01 00       	call   c00283f8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 50 d4 01 00       	call   c0028ccb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 4c cb 01 00       	call   c00283f8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 c4 d5 01 00       	jmp    c0028e80 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 2e d2 01 00       	call   c0028cc7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 ec d1 01 00       	call   c0028ca9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 83 cf 01 00       	call   c0028a5b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 84 c2 01 00       	call   c0027d7b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 53 cf 01 00       	call   c0028a5b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 ba cb 01 00       	call   c00286dc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 59 d1 01 00       	call   c0028ca9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 5c d1 01 00       	call   c0028cc7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 2f d1 01 00       	call   c0028cc7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 28 cb 01 00       	call   c00286dc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 b2 d2 01 00       	call   c0028e80 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 8d d2 01 00       	call   c0028e80 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 5f ce 01 00       	call   c0028a5b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 b6 c7 01 00       	call   c00283cc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 95 d0 01 00       	call   c0028cc7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 2e c1 01 00       	call   c0027d7b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 52 c7 01 00       	call   c00283cc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 f4 d1 01 00       	call   c0028e80 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 2c ca 01 00       	call   c00286dc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 a9 c0 01 00       	call   c0027d7b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 d5 cc 01 00       	call   c0028a5b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 d5 bf 01 00       	call   c0027d7b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 b5 bf 01 00       	call   c0027d7b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 85 cc 01 00       	call   c0028a5b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 d5 ce 01 00       	call   c0028cc5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 b4 c5 01 00       	call   c00283cc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 36 d0 01 00       	call   c0028e60 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 5d ce 01 00       	call   c0028ca9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 5b c5 01 00       	call   c00283cc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 d9 cb 01 00       	call   c0028a5b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 5c c5 01 00       	call   c00283f8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 ae cb 01 00       	call   c0028a5b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 15 c8 01 00       	call   c00286dc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 94 be 01 00       	call   c0027d7b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 5e cb 01 00       	call   c0028a5b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 aa cd 01 00       	call   c0028cc7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 9f c4 01 00       	call   c00283f8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 71 c4 01 00       	call   c00283f8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 aa ca 01 00       	call   c0028a5b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 0e c7 01 00       	call   c00286dc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 d6 c6 01 00       	call   c00286dc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 55 bd 01 00       	call   c0027d7b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 42 ce 01 00       	call   c0028e80 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 14 ca 01 00       	call   c0028a5b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 6b c3 01 00       	call   c00283cc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 4a cc 01 00       	call   c0028cc7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 e2 bc 01 00       	call   c0027d7b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 06 c3 01 00       	call   c00283cc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 a8 cd 01 00       	call   c0028e80 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 69 cb 01 00       	call   c0028cc7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 27 cb 01 00       	call   c0028ca9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 be c8 01 00       	call   c0028a5b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 bf bb 01 00       	call   c0027d7b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 8e c8 01 00       	call   c0028a5b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 f5 c4 01 00       	call   c00286dc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 94 ca 01 00       	call   c0028ca9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 97 ca 01 00       	call   c0028cc7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 6a ca 01 00       	call   c0028cc7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 63 c4 01 00       	call   c00286dc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 ed cb 01 00       	call   c0028e80 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 c8 cb 01 00       	call   c0028e80 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 9a c7 01 00       	call   c0028a5b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 f1 c0 01 00       	call   c00283cc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 d0 c9 01 00       	call   c0028cc7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 69 ba 01 00       	call   c0027d7b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 8d c0 01 00       	call   c00283cc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 2f cb 01 00       	call   c0028e80 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 67 c3 01 00       	call   c00286dc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 e4 b9 01 00       	call   c0027d7b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 0f c6 01 00       	call   c0028a5b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 0f b9 01 00       	call   c0027d7b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 ef b8 01 00       	call   c0027d7b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 bf c5 01 00       	call   c0028a5b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 0f c8 01 00       	call   c0028cc5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 ed be 01 00       	call   c00283cc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 6f c9 01 00       	call   c0028e60 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 96 c7 01 00       	call   c0028ca9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 93 be 01 00       	call   c00283cc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 11 c5 01 00       	call   c0028a5b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 94 be 01 00       	call   c00283f8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 e6 c4 01 00       	call   c0028a5b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 4d c1 01 00       	call   c00286dc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 cc b7 01 00       	call   c0027d7b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 96 c4 01 00       	call   c0028a5b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 e2 c6 01 00       	call   c0028cc7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 d7 bd 01 00       	call   c00283f8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 a9 bd 01 00       	call   c00283f8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 e0 c3 01 00       	call   c0028a5b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 44 c0 01 00       	call   c00286dc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 11 c0 01 00       	call   c00286dc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 90 b6 01 00       	call   c0027d7b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 7d c7 01 00       	call   c0028e80 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 4f c3 01 00       	call   c0028a5b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 a6 bc 01 00       	call   c00283cc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 85 c5 01 00       	call   c0028cc7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 1d b6 01 00       	call   c0027d7b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 41 bc 01 00       	call   c00283cc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 e3 c6 01 00       	call   c0028e80 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 a4 c4 01 00       	call   c0028cc7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 62 c4 01 00       	call   c0028ca9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 f9 c1 01 00       	call   c0028a5b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 fa b4 01 00       	call   c0027d7b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 c9 c1 01 00       	call   c0028a5b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 30 be 01 00       	call   c00286dc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 cf c3 01 00       	call   c0028ca9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 d2 c3 01 00       	call   c0028cc7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 a5 c3 01 00       	call   c0028cc7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 9e bd 01 00       	call   c00286dc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 28 c5 01 00       	call   c0028e80 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 03 c5 01 00       	call   c0028e80 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 d5 c0 01 00       	call   c0028a5b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 2c ba 01 00       	call   c00283cc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 0b c3 01 00       	call   c0028cc7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 a4 b3 01 00       	call   c0027d7b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 c8 b9 01 00       	call   c00283cc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 6a c4 01 00       	call   c0028e80 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 a2 bc 01 00       	call   c00286dc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 1f b3 01 00       	call   c0027d7b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 4a bf 01 00       	call   c0028a5b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 4a b2 01 00       	call   c0027d7b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 2a b2 01 00       	call   c0027d7b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 fa be 01 00       	call   c0028a5b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 4a c1 01 00       	call   c0028cc5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 28 b8 01 00       	call   c00283cc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 aa c2 01 00       	call   c0028e60 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 d1 c0 01 00       	call   c0028ca9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 ce b7 01 00       	call   c00283cc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 4c be 01 00       	call   c0028a5b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 cf b7 01 00       	call   c00283f8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 21 be 01 00       	call   c0028a5b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 88 ba 01 00       	call   c00286dc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 07 b1 01 00       	call   c0027d7b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 d1 bd 01 00       	call   c0028a5b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 1d c0 01 00       	call   c0028cc7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 12 b7 01 00       	call   c00283f8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 e4 b6 01 00       	call   c00283f8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 1b bd 01 00       	call   c0028a5b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 7f b9 01 00       	call   c00286dc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 4c b9 01 00       	call   c00286dc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 cb af 01 00       	call   c0027d7b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 b8 c0 01 00       	call   c0028e80 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 8a bc 01 00       	call   c0028a5b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 e1 b5 01 00       	call   c00283cc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 c0 be 01 00       	call   c0028cc7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 58 af 01 00       	call   c0027d7b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 7c b5 01 00       	call   c00283cc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 1e c0 01 00       	call   c0028e80 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 df bd 01 00       	call   c0028cc7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 9d bd 01 00       	call   c0028ca9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 34 bb 01 00       	call   c0028a5b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 35 ae 01 00       	call   c0027d7b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 04 bb 01 00       	call   c0028a5b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 6b b7 01 00       	call   c00286dc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 0a bd 01 00       	call   c0028ca9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 0d bd 01 00       	call   c0028cc7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 e0 bc 01 00       	call   c0028cc7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 d9 b6 01 00       	call   c00286dc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 63 be 01 00       	call   c0028e80 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 3e be 01 00       	call   c0028e80 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 10 ba 01 00       	call   c0028a5b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 67 b3 01 00       	call   c00283cc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 46 bc 01 00       	call   c0028cc7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 df ac 01 00       	call   c0027d7b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 03 b3 01 00       	call   c00283cc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 a5 bd 01 00       	call   c0028e80 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 dd b5 01 00       	call   c00286dc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 5a ac 01 00       	call   c0027d7b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 85 b8 01 00       	call   c0028a5b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 85 ab 01 00       	call   c0027d7b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 65 ab 01 00       	call   c0027d7b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 35 b8 01 00       	call   c0028a5b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 85 ba 01 00       	call   c0028cc5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 63 b1 01 00       	call   c00283cc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 e5 bb 01 00       	call   c0028e60 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 0c ba 01 00       	call   c0028ca9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 09 b1 01 00       	call   c00283cc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 87 b7 01 00       	call   c0028a5b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 0a b1 01 00       	call   c00283f8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 5c b7 01 00       	call   c0028a5b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 c3 b3 01 00       	call   c00286dc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 42 aa 01 00       	call   c0027d7b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 0c b7 01 00       	call   c0028a5b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 58 b9 01 00       	call   c0028cc7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 4d b0 01 00       	call   c00283f8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 1f b0 01 00       	call   c00283f8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 56 b6 01 00       	call   c0028a5b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 ba b2 01 00       	call   c00286dc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 87 b2 01 00       	call   c00286dc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 06 a9 01 00       	call   c0027d7b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 f3 b9 01 00       	call   c0028e80 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 c5 b5 01 00       	call   c0028a5b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 1c af 01 00       	call   c00283cc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 fb b7 01 00       	call   c0028cc7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 93 a8 01 00       	call   c0027d7b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 b7 ae 01 00       	call   c00283cc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 59 b9 01 00       	call   c0028e80 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 17 b7 01 00       	call   c0028cc7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 d5 b6 01 00       	call   c0028ca9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 6c b4 01 00       	call   c0028a5b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 6d a7 01 00       	call   c0027d7b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 3c b4 01 00       	call   c0028a5b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 a3 b0 01 00       	call   c00286dc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 42 b6 01 00       	call   c0028ca9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 45 b6 01 00       	call   c0028cc7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 18 b6 01 00       	call   c0028cc7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 11 b0 01 00       	call   c00286dc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 9b b7 01 00       	call   c0028e80 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 72 b7 01 00       	call   c0028e80 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 44 b3 01 00       	call   c0028a5b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 9b ac 01 00       	call   c00283cc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 7a b5 01 00       	call   c0028cc7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 13 a6 01 00       	call   c0027d7b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 3b ac 01 00       	call   c00283cc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 dd b6 01 00       	call   c0028e80 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 16 af 01 00       	call   c00286dc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 93 a5 01 00       	call   c0027d7b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 bf b1 01 00       	call   c0028a5b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 bf a4 01 00       	call   c0027d7b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 9f a4 01 00       	call   c0027d7b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 6f b1 01 00       	call   c0028a5b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 a3 b3 01 00       	call   c0028ca9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 9a aa 01 00       	call   c00283cc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 1c b5 01 00       	call   c0028e60 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 43 b3 01 00       	call   c0028ca9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 3d aa 01 00       	call   c00283cc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 bb b0 01 00       	call   c0028a5b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 3e aa 01 00       	call   c00283f8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 90 b0 01 00       	call   c0028a5b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 f7 ac 01 00       	call   c00286dc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 76 a3 01 00       	call   c0027d7b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 40 b0 01 00       	call   c0028a5b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 8c b2 01 00       	call   c0028cc7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 81 a9 01 00       	call   c00283f8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 53 a9 01 00       	call   c00283f8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 97 af 01 00       	call   c0028a5b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 fe ab 01 00       	call   c00286dc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 e7 a8 01 00       	call   c00283f8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 a3 b1 01 00       	call   c0028ccb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 96 ab 01 00       	call   c00286dc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 15 a2 01 00       	call   c0027d7b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 02 b3 01 00       	call   c0028e80 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 d4 ae 01 00       	call   c0028a5b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 2b a8 01 00       	call   c00283cc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 0a b1 01 00       	call   c0028cc7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 a2 a1 01 00       	call   c0027d7b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 ca a7 01 00       	call   c00283cc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 6c b2 01 00       	call   c0028e80 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 64 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd589c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 58 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58a8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 25 1c 00 00       	call   c000f89c <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 1f af 01 00       	call   c0028cc7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 dd ae 01 00       	call   c0028ca9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 c9 ae 01 00       	call   c0028cc7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 3b ac 01 00       	call   c0028a5b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 b9 a5 01 00       	call   c00283f8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 0b ac 01 00       	call   c0028a5b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 11 9f 01 00       	call   c0027d7b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 e0 ab 01 00       	call   c0028a5b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 30 ae 01 00       	call   c0028cc5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 11 a5 01 00       	call   c00283cc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 93 af 01 00       	call   c0028e60 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 ba ad 01 00       	call   c0028ca9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 b9 a4 01 00       	call   c00283cc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 37 ab 01 00       	call   c0028a5b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 ba a4 01 00       	call   c00283f8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 0c ab 01 00       	call   c0028a5b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 73 a7 01 00       	call   c00286dc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 f2 9d 01 00       	call   c0027d7b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 1a a7 01 00       	call   c00286dc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 a0 9d 01 00       	call   c0027d7b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 8e ae 01 00       	call   c0028e80 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 60 aa 01 00       	call   c0028a5b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 b7 a3 01 00       	call   c00283cc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 96 ac 01 00       	call   c0028cc7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 2f 9d 01 00       	call   c0027d7b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 5b a3 01 00       	call   c00283cc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 fd ad 01 00       	call   c0028e80 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 aa a9 01 00       	call   c0028a5b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 27 a3 01 00       	call   c00283f8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 78 a9 01 00       	call   c0028a5b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 7e 9c 01 00       	call   c0027d7b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 4e a9 01 00       	call   c0028a5b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 a2 ab 01 00       	call   c0028cc9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 7b a2 01 00       	call   c00283cc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 fd ac 01 00       	call   c0028e60 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 24 ab 01 00       	call   c0028ca9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 22 a2 01 00       	call   c00283cc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 a0 a8 01 00       	call   c0028a5b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 23 a2 01 00       	call   c00283f8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 75 a8 01 00       	call   c0028a5b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 dc a4 01 00       	call   c00286dc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 5b 9b 01 00       	call   c0027d7b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 77 a4 01 00       	call   c00286dc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 f6 9a 01 00       	call   c0027d7b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 e4 ab 01 00       	call   c0028e80 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 b6 a7 01 00       	call   c0028a5b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 0d a1 01 00       	call   c00283cc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 ec a9 01 00       	call   c0028cc7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 85 9a 01 00       	call   c0027d7b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 b1 a0 01 00       	call   c00283cc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 22 a7 01 00       	call   c0028a5b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 28 9a 01 00       	call   c0027d7b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 7e a8 02 c0       	mov    eax,0xc002a87e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 8f a8 02 c0       	mov    eax,0xc002a88f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 67 14 00 00       	call   c000f89c <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 69 14 00 00       	call   c000f8bc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 e3 13 00 00       	jmp    c000f88c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 fe 13 00 00       	jmp    c000f8ac <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c000e4e3:	ff 05 e4 27 03 c0    	inc    DWORD PTR ds:0xc00327e4
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 e4 27 03 c0       	mov    eax,ds:0xc00327e4
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 e4 27 03 c0       	mov    ds:0xc00327e4,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d e0 27 03 c0 00 	cmp    DWORD PTR ds:0xc00327e0,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 e0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327e0,0x0
c000e50d:	e8 a0 fb 00 00       	call   c001e0b2 <schedule()>
c000e512:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c000e517:	48                   	dec    eax
c000e518:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 30 f4 02 c0       	mov    eax,ds:0xc002f430
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 c6 a8 02 c0       	push   0xc002a8c6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 c8 f2 02 c0       	mov    eax,0xc002f2c8
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 cf a8 02 c0       	push   0xc002a8cf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 f4 71 02 c0       	mov    eax,0xc00271f4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 d9 a8 02 c0       	push   0xc002a8d9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 28 6f 02 c0       	mov    eax,0xc0026f28
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 e2 a8 02 c0       	push   0xc002a8e2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 f4 72 02 c0       	mov    eax,0xc00272f4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ec a8 02 c0       	push   0xc002a8ec
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 74 70 02 c0       	mov    eax,0xc0027074
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 f5 a8 02 c0       	push   0xc002a8f5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 cc f2 02 c0       	mov    eax,0xc002f2cc
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 02 a9 02 c0       	push   0xc002a902
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 cd f2 02 c0       	mov    eax,0xc002f2cd
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 1f 58 00 00       	call   c0013e8c <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 3f 07 00 00       	push   0x73f
c000e69e:	e8 e9 11 00 00       	call   c000f88c <malloc>
c000e6a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6aa:	89 c3                	mov    ebx,eax
c000e6ac:	ff 35 10 28 03 c0    	push   DWORD PTR ds:0xc0032810
c000e6b2:	68 0f a9 02 c0       	push   0xc002a90f
c000e6b7:	6a 01                	push   0x1
c000e6b9:	50                   	push   eax
c000e6ba:	e8 b7 f5 00 00       	call   c001dc76 <Process::Process(bool, char const*, Process*, char**)>
c000e6bf:	83 c4 20             	add    esp,0x20
c000e6c2:	68 ff 00 00 00       	push   0xff
c000e6c7:	6a 00                	push   0x0
c000e6c9:	68 1f f2 00 c0       	push   0xc000f21f
c000e6ce:	53                   	push   ebx
c000e6cf:	e8 9a f7 00 00       	call   c001de6e <Process::createThread(void (*)(void*), void*, int)>
c000e6d4:	6a 7a                	push   0x7a
c000e6d6:	6a 00                	push   0x0
c000e6d8:	68 ec e8 01 c0       	push   0xc001e8ec
c000e6dd:	ff 35 10 28 03 c0    	push   DWORD PTR ds:0xc0032810
c000e6e3:	e8 86 f7 00 00       	call   c001de6e <Process::createThread(void (*)(void*), void*, int)>
c000e6e8:	83 c4 20             	add    esp,0x20
c000e6eb:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c000e6f0:	c6 05 cd f2 02 c0 01 	mov    BYTE PTR ds:0xc002f2cd,0x1
c000e6f7:	e8 27 06 01 00       	call   c001ed23 <Vm::initialise8086()>
c000e6fc:	e8 53 45 00 00       	call   c0012c54 <Fs::initVFS()>
c000e701:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000e706:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e70c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e70e:	6a 00                	push   0x0
c000e710:	6a 00                	push   0x0
c000e712:	6a 00                	push   0x0
c000e714:	50                   	push   eax
c000e715:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e718:	e8 e6 dd 00 00       	call   c001c503 <Sys::loadSyscalls()>
c000e71d:	e8 a4 ba 00 00       	call   c001a1c6 <Krnl::loadSystemEnv()>
c000e722:	83 c4 0c             	add    esp,0xc
c000e725:	6a 3a                	push   0x3a
c000e727:	68 1c a9 02 c0       	push   0xc002a91c
c000e72c:	68 25 a9 02 c0       	push   0xc002a925
c000e731:	e8 7f c9 00 00       	call   c001b0b5 <Reg::readIntWithDefault(char*, char*, int)>
c000e736:	89 04 24             	mov    DWORD PTR [esp],eax
c000e739:	e8 06 50 00 00       	call   c0013744 <User::loadClockSettings(int)>
c000e73e:	58                   	pop    eax
c000e73f:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000e744:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e74a:	e8 fd 56 00 00       	call   c0013e4c <Device::loadDriversForAll()>
c000e74f:	e8 be b5 00 00       	call   c0019d12 <Krnl::startCPUs()>
c000e754:	5a                   	pop    edx
c000e755:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c000e75b:	59                   	pop    ecx
c000e75c:	6a 01                	push   0x1
c000e75e:	68 2d a9 02 c0       	push   0xc002a92d
c000e763:	e8 6b ef 00 00       	call   c001d6d3 <Thr::loadDLL(char const*, bool)>
c000e768:	5a                   	pop    edx
c000e769:	59                   	pop    ecx
c000e76a:	53                   	push   ebx
c000e76b:	50                   	push   eax
c000e76c:	e8 8d f1 00 00       	call   c001d8fe <Thr::executeDLL(unsigned long, void*)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	6a 02                	push   0x2
c000e779:	e8 33 fb 00 00       	call   c001e2b1 <blockTask(TaskState)>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	eb f1                	jmp    c000e774 <Krnl::firstTask()+0xe0>
c000e783:	90                   	nop

c000e784 <Computer::Computer()>:
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	83 ec 08             	sub    esp,0x8
c000e78e:	68 49 a9 02 c0       	push   0xc002a949
c000e793:	50                   	push   eax
c000e794:	e8 6d 57 00 00       	call   c0013f06 <Device::Device(char const*)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	ba e8 aa 02 c0       	mov    edx,0xc002aae8
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	89 10                	mov    DWORD PTR [eax],edx
c000e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ab:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7cd:	83 ca 04             	or     edx,0x4
c000e7d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7e0:	0f b6 d0             	movzx  edx,al
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f8:	0f b6 d0             	movzx  edx,al
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80e:	8d 50 01             	lea    edx,[eax+0x1]
c000e811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e815:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e81b:	0f b6 d0             	movzx  edx,al
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e826:	83 e1 3f             	and    ecx,0x3f
c000e829:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e831:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84f:	0f b6 d0             	movzx  edx,al
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e865:	8d 50 01             	lea    edx,[eax+0x1]
c000e868:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e86c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e872:	0f b6 d0             	movzx  edx,al
c000e875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e879:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e87d:	83 e1 3f             	and    ecx,0x3f
c000e880:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e888:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a6:	0f b6 d0             	movzx  edx,al
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bc:	8d 50 01             	lea    edx,[eax+0x1]
c000e8bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8c3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c9:	0f b6 d0             	movzx  edx,al
c000e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8d4:	83 e1 3f             	and    ecx,0x3f
c000e8d7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8db:	90                   	nop
c000e8dc:	83 c4 0c             	add    esp,0xc
c000e8df:	c3                   	ret    

c000e8e0 <Computer::setBootMessage(char const*)>:
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop

c000e8e2 <Computer::detectFeatures()>:
c000e8e2:	55                   	push   ebp
c000e8e3:	57                   	push   edi
c000e8e4:	56                   	push   esi
c000e8e5:	53                   	push   ebx
c000e8e6:	83 ec 1c             	sub    esp,0x1c
c000e8e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ed:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8f7:	e8 e8 19 ff ff       	call   c00002e4 <detectCPUID>
c000e8fc:	85 c0                	test   eax,eax
c000e8fe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e904:	0f 95 c2             	setne  dl
c000e907:	83 e0 fd             	and    eax,0xfffffffd
c000e90a:	d1 e2                	shl    edx,1
c000e90c:	09 d0                	or     eax,edx
c000e90e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e914:	a8 02                	test   al,0x2
c000e916:	75 46                	jne    c000e95e <Computer::detectFeatures()+0x7c>
c000e918:	f6 05 e1 f2 02 c0 04 	test   BYTE PTR ds:0xc002f2e1,0x4
c000e91f:	74 07                	je     c000e928 <Computer::detectFeatures()+0x46>
c000e921:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e928:	e8 89 85 01 00       	call   c0026eb6 <x87Detect>
c000e92d:	83 e0 01             	and    eax,0x1
c000e930:	c1 e0 04             	shl    eax,0x4
c000e933:	88 c2                	mov    dl,al
c000e935:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e93b:	83 e0 ef             	and    eax,0xffffffef
c000e93e:	09 d0                	or     eax,edx
c000e940:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e946:	a8 10                	test   al,0x10
c000e948:	0f 85 2a 01 00 00    	jne    c000ea78 <Computer::detectFeatures()+0x196>
c000e94e:	84 c0                	test   al,al
c000e950:	0f 88 45 01 00 00    	js     c000ea9b <Computer::detectFeatures()+0x1b9>
c000e956:	83 c4 1c             	add    esp,0x1c
c000e959:	5b                   	pop    ebx
c000e95a:	5e                   	pop    esi
c000e95b:	5f                   	pop    edi
c000e95c:	5d                   	pop    ebp
c000e95d:	c3                   	ret    
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	6a 20                	push   0x20
c000e963:	e8 ba a0 00 00       	call   c0018a22 <CPU::cpuidCheckEDX(unsigned int)>
c000e968:	83 e0 01             	and    eax,0x1
c000e96b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e972:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e978:	83 e0 f7             	and    eax,0xfffffff7
c000e97b:	09 d0                	or     eax,edx
c000e97d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e983:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e98a:	e8 93 a0 00 00       	call   c0018a22 <CPU::cpuidCheckEDX(unsigned int)>
c000e98f:	83 e0 01             	and    eax,0x1
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e99a:	83 e0 fe             	and    eax,0xfffffffe
c000e99d:	09 d0                	or     eax,edx
c000e99f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9a5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9ac:	e8 71 a0 00 00       	call   c0018a22 <CPU::cpuidCheckEDX(unsigned int)>
c000e9b1:	c1 e0 07             	shl    eax,0x7
c000e9b4:	88 c2                	mov    dl,al
c000e9b6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9bc:	83 e0 7f             	and    eax,0x7f
c000e9bf:	09 d0                	or     eax,edx
c000e9c1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ce:	e8 4f a0 00 00       	call   c0018a22 <CPU::cpuidCheckEDX(unsigned int)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 e0 01             	and    eax,0x1
c000e9d9:	c1 e0 05             	shl    eax,0x5
c000e9dc:	88 c2                	mov    dl,al
c000e9de:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9e4:	83 e0 df             	and    eax,0xffffffdf
c000e9e7:	09 d0                	or     eax,edx
c000e9e9:	f7 05 e0 f2 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f2e0,0x401
c000e9f3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9f9:	0f 84 c2 00 00 00    	je     c000eac1 <Computer::detectFeatures()+0x1df>
c000e9ff:	83 e0 fe             	and    eax,0xfffffffe
c000ea02:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea08:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea0e:	88 c2                	mov    dl,al
c000ea10:	83 e2 09             	and    edx,0x9
c000ea13:	fe ca                	dec    dl
c000ea15:	75 09                	jne    c000ea20 <Computer::detectFeatures()+0x13e>
c000ea17:	83 e0 fe             	and    eax,0xfffffffe
c000ea1a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea20:	83 ec 0c             	sub    esp,0xc
c000ea23:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea27:	50                   	push   eax
c000ea28:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea2c:	55                   	push   ebp
c000ea2d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea31:	57                   	push   edi
c000ea32:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea36:	56                   	push   esi
c000ea37:	68 00 00 00 80       	push   0x80000000
c000ea3c:	e8 5d 9f 00 00       	call   c001899e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea41:	83 c4 20             	add    esp,0x20
c000ea44:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea4f:	0f 86 c3 fe ff ff    	jbe    c000e918 <Computer::detectFeatures()+0x36>
c000ea55:	83 ec 0c             	sub    esp,0xc
c000ea58:	50                   	push   eax
c000ea59:	55                   	push   ebp
c000ea5a:	57                   	push   edi
c000ea5b:	56                   	push   esi
c000ea5c:	68 01 00 00 80       	push   0x80000001
c000ea61:	e8 38 9f 00 00       	call   c001899e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea66:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea70:	83 c4 20             	add    esp,0x20
c000ea73:	e9 a0 fe ff ff       	jmp    c000e918 <Computer::detectFeatures()+0x36>
c000ea78:	e8 f3 83 01 00       	call   c0026e70 <absolutelyNoChanceInHell>
c000ea7d:	88 c2                	mov    dl,al
c000ea7f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea85:	c1 e2 07             	shl    edx,0x7
c000ea88:	83 e0 7f             	and    eax,0x7f
c000ea8b:	09 d0                	or     eax,edx
c000ea8d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea93:	84 c0                	test   al,al
c000ea95:	0f 89 bb fe ff ff    	jns    c000e956 <Computer::detectFeatures()+0x74>
c000ea9b:	e8 b0 83 01 00       	call   c0026e50 <avxDetect>
c000eaa0:	83 e0 01             	and    eax,0x1
c000eaa3:	c1 e0 05             	shl    eax,0x5
c000eaa6:	88 c2                	mov    dl,al
c000eaa8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaae:	83 e0 df             	and    eax,0xffffffdf
c000eab1:	09 d0                	or     eax,edx
c000eab3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eab9:	83 c4 1c             	add    esp,0x1c
c000eabc:	5b                   	pop    ebx
c000eabd:	5e                   	pop    esi
c000eabe:	5f                   	pop    edi
c000eabf:	5d                   	pop    ebp
c000eac0:	c3                   	ret    
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	68 00 02 00 00       	push   0x200
c000eac9:	e8 54 9f 00 00       	call   c0018a22 <CPU::cpuidCheckEDX(unsigned int)>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	83 e0 01             	and    eax,0x1
c000ead4:	88 c2                	mov    dl,al
c000ead6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eadc:	83 e0 fe             	and    eax,0xfffffffe
c000eadf:	09 d0                	or     eax,edx
c000eae1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae7:	e9 1c ff ff ff       	jmp    c000ea08 <Computer::detectFeatures()+0x126>

c000eaec <Computer::displayFeatures()>:
c000eaec:	53                   	push   ebx
c000eaed:	83 ec 14             	sub    esp,0x14
c000eaf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaf4:	68 59 a9 02 c0       	push   0xc002a959
c000eaf9:	e8 cb 3d 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb08:	0f 85 73 02 00 00    	jne    c000ed81 <Computer::displayFeatures()+0x295>
c000eb0e:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000eb13:	83 ec 08             	sub    esp,0x8
c000eb16:	50                   	push   eax
c000eb17:	68 6c a9 02 c0       	push   0xc002a96c
c000eb1c:	e8 a8 3d 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb2b:	0f 85 8c 02 00 00    	jne    c000edbd <Computer::displayFeatures()+0x2d1>
c000eb31:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	50                   	push   eax
c000eb3a:	68 7d a9 02 c0       	push   0xc002a97d
c000eb3f:	e8 85 3d 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb4e:	0f 85 5f 02 00 00    	jne    c000edb3 <Computer::displayFeatures()+0x2c7>
c000eb54:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000eb59:	83 ec 08             	sub    esp,0x8
c000eb5c:	50                   	push   eax
c000eb5d:	68 8e a9 02 c0       	push   0xc002a98e
c000eb62:	e8 62 3d 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb71:	0f 85 32 02 00 00    	jne    c000eda9 <Computer::displayFeatures()+0x2bd>
c000eb77:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000eb7c:	83 ec 08             	sub    esp,0x8
c000eb7f:	50                   	push   eax
c000eb80:	68 9f a9 02 c0       	push   0xc002a99f
c000eb85:	e8 3f 3d 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb94:	0f 85 05 02 00 00    	jne    c000ed9f <Computer::displayFeatures()+0x2b3>
c000eb9a:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	50                   	push   eax
c000eba3:	68 b0 a9 02 c0       	push   0xc002a9b0
c000eba8:	e8 1c 3d 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebb7:	0f 85 d8 01 00 00    	jne    c000ed95 <Computer::displayFeatures()+0x2a9>
c000ebbd:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ebc2:	83 ec 08             	sub    esp,0x8
c000ebc5:	50                   	push   eax
c000ebc6:	68 c1 a9 02 c0       	push   0xc002a9c1
c000ebcb:	e8 f9 3c 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000ebd0:	83 c4 10             	add    esp,0x10
c000ebd3:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebda:	0f 85 ab 01 00 00    	jne    c000ed8b <Computer::displayFeatures()+0x29f>
c000ebe0:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ebe5:	83 ec 08             	sub    esp,0x8
c000ebe8:	50                   	push   eax
c000ebe9:	68 d2 a9 02 c0       	push   0xc002a9d2
c000ebee:	e8 d6 3c 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebfd:	0f 88 1b 02 00 00    	js     c000ee1e <Computer::displayFeatures()+0x332>
c000ec03:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ec08:	83 ec 08             	sub    esp,0x8
c000ec0b:	50                   	push   eax
c000ec0c:	68 e3 a9 02 c0       	push   0xc002a9e3
c000ec11:	e8 b3 3c 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000ec16:	83 c4 10             	add    esp,0x10
c000ec19:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec20:	0f 85 a1 01 00 00    	jne    c000edc7 <Computer::displayFeatures()+0x2db>
c000ec26:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ec2b:	83 ec 08             	sub    esp,0x8
c000ec2e:	50                   	push   eax
c000ec2f:	68 f4 a9 02 c0       	push   0xc002a9f4
c000ec34:	e8 90 3c 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec43:	0f 85 cb 01 00 00    	jne    c000ee14 <Computer::displayFeatures()+0x328>
c000ec49:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ec4e:	83 ec 08             	sub    esp,0x8
c000ec51:	50                   	push   eax
c000ec52:	68 05 aa 02 c0       	push   0xc002aa05
c000ec57:	e8 6d 3c 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec66:	0f 85 9e 01 00 00    	jne    c000ee0a <Computer::displayFeatures()+0x31e>
c000ec6c:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ec71:	83 ec 08             	sub    esp,0x8
c000ec74:	50                   	push   eax
c000ec75:	68 16 aa 02 c0       	push   0xc002aa16
c000ec7a:	e8 4a 3c 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec89:	0f 85 71 01 00 00    	jne    c000ee00 <Computer::displayFeatures()+0x314>
c000ec8f:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ec94:	83 ec 08             	sub    esp,0x8
c000ec97:	50                   	push   eax
c000ec98:	68 27 aa 02 c0       	push   0xc002aa27
c000ec9d:	e8 27 3c 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecac:	0f 85 44 01 00 00    	jne    c000edf6 <Computer::displayFeatures()+0x30a>
c000ecb2:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ecb7:	83 ec 08             	sub    esp,0x8
c000ecba:	50                   	push   eax
c000ecbb:	68 38 aa 02 c0       	push   0xc002aa38
c000ecc0:	e8 04 3c 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eccf:	0f 85 17 01 00 00    	jne    c000edec <Computer::displayFeatures()+0x300>
c000ecd5:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ecda:	83 ec 08             	sub    esp,0x8
c000ecdd:	50                   	push   eax
c000ecde:	68 49 aa 02 c0       	push   0xc002aa49
c000ece3:	e8 e1 3b 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000ece8:	83 c4 10             	add    esp,0x10
c000eceb:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecf2:	0f 85 ea 00 00 00    	jne    c000ede2 <Computer::displayFeatures()+0x2f6>
c000ecf8:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	50                   	push   eax
c000ed01:	68 5a aa 02 c0       	push   0xc002aa5a
c000ed06:	e8 be 3b 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed15:	0f 88 0d 01 00 00    	js     c000ee28 <Computer::displayFeatures()+0x33c>
c000ed1b:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 6b aa 02 c0       	push   0xc002aa6b
c000ed29:	e8 9b 3b 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed38:	0f 85 9a 00 00 00    	jne    c000edd8 <Computer::displayFeatures()+0x2ec>
c000ed3e:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	50                   	push   eax
c000ed47:	68 7c aa 02 c0       	push   0xc002aa7c
c000ed4c:	e8 78 3b 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000ed51:	83 c4 10             	add    esp,0x10
c000ed54:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed5b:	75 74                	jne    c000edd1 <Computer::displayFeatures()+0x2e5>
c000ed5d:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ed62:	83 ec 08             	sub    esp,0x8
c000ed65:	50                   	push   eax
c000ed66:	68 8d aa 02 c0       	push   0xc002aa8d
c000ed6b:	e8 59 3b 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000ed70:	c7 44 24 20 70 c4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c470
c000ed78:	83 c4 18             	add    esp,0x18
c000ed7b:	5b                   	pop    ebx
c000ed7c:	e9 48 3b 00 00       	jmp    c00128c9 <Dbg::kprintf(char const*, ...)>
c000ed81:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ed86:	e9 88 fd ff ff       	jmp    c000eb13 <Computer::displayFeatures()+0x27>
c000ed8b:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ed90:	e9 50 fe ff ff       	jmp    c000ebe5 <Computer::displayFeatures()+0xf9>
c000ed95:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ed9a:	e9 23 fe ff ff       	jmp    c000ebc2 <Computer::displayFeatures()+0xd6>
c000ed9f:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000eda4:	e9 f6 fd ff ff       	jmp    c000eb9f <Computer::displayFeatures()+0xb3>
c000eda9:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edae:	e9 c9 fd ff ff       	jmp    c000eb7c <Computer::displayFeatures()+0x90>
c000edb3:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edb8:	e9 9c fd ff ff       	jmp    c000eb59 <Computer::displayFeatures()+0x6d>
c000edbd:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edc2:	e9 6f fd ff ff       	jmp    c000eb36 <Computer::displayFeatures()+0x4a>
c000edc7:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edcc:	e9 5a fe ff ff       	jmp    c000ec2b <Computer::displayFeatures()+0x13f>
c000edd1:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edd6:	eb 8a                	jmp    c000ed62 <Computer::displayFeatures()+0x276>
c000edd8:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000eddd:	e9 61 ff ff ff       	jmp    c000ed43 <Computer::displayFeatures()+0x257>
c000ede2:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ede7:	e9 11 ff ff ff       	jmp    c000ecfd <Computer::displayFeatures()+0x211>
c000edec:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edf1:	e9 e4 fe ff ff       	jmp    c000ecda <Computer::displayFeatures()+0x1ee>
c000edf6:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edfb:	e9 b7 fe ff ff       	jmp    c000ecb7 <Computer::displayFeatures()+0x1cb>
c000ee00:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ee05:	e9 8a fe ff ff       	jmp    c000ec94 <Computer::displayFeatures()+0x1a8>
c000ee0a:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ee0f:	e9 5d fe ff ff       	jmp    c000ec71 <Computer::displayFeatures()+0x185>
c000ee14:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ee19:	e9 30 fe ff ff       	jmp    c000ec4e <Computer::displayFeatures()+0x162>
c000ee1e:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ee23:	e9 e0 fd ff ff       	jmp    c000ec08 <Computer::displayFeatures()+0x11c>
c000ee28:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ee2d:	e9 ee fe ff ff       	jmp    c000ed20 <Computer::displayFeatures()+0x234>

c000ee32 <Computer::rdmsr(unsigned int)>:
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee39:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee40:	74 0a                	je     c000ee4c <Computer::rdmsr(unsigned int)+0x1a>
c000ee42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee46:	0f 32                	rdmsr  
c000ee48:	83 c4 0c             	add    esp,0xc
c000ee4b:	c3                   	ret    
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 9e aa 02 c0       	push   0xc002aa9e
c000ee54:	e8 a6 b4 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	eb e4                	jmp    c000ee42 <Computer::rdmsr(unsigned int)+0x10>

c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee5e:	57                   	push   edi
c000ee5f:	56                   	push   esi
c000ee60:	52                   	push   edx
c000ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee74:	74 0e                	je     c000ee84 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee7a:	89 f0                	mov    eax,esi
c000ee7c:	89 fa                	mov    edx,edi
c000ee7e:	0f 30                	wrmsr  
c000ee80:	58                   	pop    eax
c000ee81:	5e                   	pop    esi
c000ee82:	5f                   	pop    edi
c000ee83:	c3                   	ret    
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	68 a4 aa 02 c0       	push   0xc002aaa4
c000ee8c:	e8 6e b4 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c000ee91:	83 c4 10             	add    esp,0x10
c000ee94:	eb e0                	jmp    c000ee76 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee96 <Computer::nmiEnabled()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eea0:	c3                   	ret    
c000eea1:	90                   	nop

c000eea2 <Computer::readCMOS(unsigned char)>:
c000eea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eea6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eead:	19 c0                	sbb    eax,eax
c000eeaf:	83 e0 80             	and    eax,0xffffff80
c000eeb2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eeb6:	e6 70                	out    0x70,al
c000eeb8:	e4 71                	in     al,0x71
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <Computer::enableNMI(bool)>:
c000eebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec4:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eeca:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eed2:	eb ce                	jmp    c000eea2 <Computer::readCMOS(unsigned char)>

c000eed4 <Computer::open(int, int, void*)>:
c000eed4:	56                   	push   esi
c000eed5:	53                   	push   ebx
c000eed6:	83 ec 10             	sub    esp,0x10
c000eed9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eedd:	f6 05 e0 f2 02 c0 04 	test   BYTE PTR ds:0xc002f2e0,0x4
c000eee4:	68 64 12 00 00       	push   0x1264
c000eee9:	0f 94 05 00 e2 02 c0 	sete   BYTE PTR ds:0xc002e200
c000eef0:	e8 97 09 00 00       	call   c000f88c <malloc>
c000eef5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef8:	89 c6                	mov    esi,eax
c000eefa:	e8 5f 8e 00 00       	call   c0017d5e <ACPI::ACPI()>
c000eeff:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef05:	58                   	pop    eax
c000ef06:	5a                   	pop    edx
c000ef07:	56                   	push   esi
c000ef08:	53                   	push   ebx
c000ef09:	e8 f4 4d 00 00       	call   c0013d02 <Device::addChild(Device*)>
c000ef0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef11:	e8 cc f9 ff ff       	call   c000e8e2 <Computer::detectFeatures()>
c000ef16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef19:	e8 ce fb ff ff       	call   c000eaec <Computer::displayFeatures()>
c000ef1e:	59                   	pop    ecx
c000ef1f:	5e                   	pop    esi
c000ef20:	6a 01                	push   0x1
c000ef22:	53                   	push   ebx
c000ef23:	e8 94 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000ef28:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef2f:	e8 58 09 00 00       	call   c000f88c <malloc>
c000ef34:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef37:	89 c6                	mov    esi,eax
c000ef39:	e8 9c 9b 00 00       	call   c0018ada <CPU::CPU()>
c000ef3e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef44:	58                   	pop    eax
c000ef45:	5a                   	pop    edx
c000ef46:	56                   	push   esi
c000ef47:	53                   	push   ebx
c000ef48:	e8 b5 4d 00 00       	call   c0013d02 <Device::addChild(Device*)>
c000ef4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef53:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef59:	6a 00                	push   0x0
c000ef5b:	6a 00                	push   0x0
c000ef5d:	50                   	push   eax
c000ef5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef61:	83 c4 20             	add    esp,0x20
c000ef64:	e8 41 53 00 00       	call   c00142aa <setupFPU()>
c000ef69:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef6f:	85 c0                	test   eax,eax
c000ef71:	74 1f                	je     c000ef92 <Computer::open(int, int, void*)+0xbe>
c000ef73:	83 ec 08             	sub    esp,0x8
c000ef76:	50                   	push   eax
c000ef77:	53                   	push   ebx
c000ef78:	e8 85 4d 00 00       	call   c0013d02 <Device::addChild(Device*)>
c000ef7d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef83:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef85:	6a 00                	push   0x0
c000ef87:	6a 00                	push   0x0
c000ef89:	6a 00                	push   0x0
c000ef8b:	50                   	push   eax
c000ef8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef8f:	83 c4 20             	add    esp,0x20
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	68 94 e6 00 c0       	push   0xc000e694
c000ef9a:	e8 f1 ef 00 00       	call   c001df90 <setupMultitasking(void (*)())>
c000ef9f:	83 c4 14             	add    esp,0x14
c000efa2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efa7:	5b                   	pop    ebx
c000efa8:	5e                   	pop    esi
c000efa9:	c3                   	ret    

c000efaa <Computer::disableNMI()>:
c000efaa:	6a 00                	push   0x0
c000efac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efb0:	e8 07 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000efb5:	58                   	pop    eax
c000efb6:	5a                   	pop    edx
c000efb7:	c3                   	ret    

c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efbc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efc3:	19 c0                	sbb    eax,eax
c000efc5:	83 e0 80             	and    eax,0xffffff80
c000efc8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efcc:	e6 70                	out    0x70,al
c000efce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd2:	e6 71                	out    0x71,al
c000efd4:	c3                   	ret    
c000efd5:	90                   	nop

c000efd6 <Computer::handleNMI()>:
c000efd6:	56                   	push   esi
c000efd7:	53                   	push   ebx
c000efd8:	83 ec 10             	sub    esp,0x10
c000efdb:	e4 92                	in     al,0x92
c000efdd:	89 c6                	mov    esi,eax
c000efdf:	e4 61                	in     al,0x61
c000efe1:	68 aa aa 02 c0       	push   0xc002aaaa
c000efe6:	88 c3                	mov    bl,al
c000efe8:	e8 dc 38 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	83 e6 10             	and    esi,0x10
c000eff3:	75 0d                	jne    c000f002 <Computer::handleNMI()+0x2c>
c000eff5:	f6 c3 40             	test   bl,0x40
c000eff8:	75 1d                	jne    c000f017 <Computer::handleNMI()+0x41>
c000effa:	84 db                	test   bl,bl
c000effc:	78 2d                	js     c000f02b <Computer::handleNMI()+0x55>
c000effe:	58                   	pop    eax
c000efff:	5b                   	pop    ebx
c000f000:	5e                   	pop    esi
c000f001:	c3                   	ret    
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	68 bb aa 02 c0       	push   0xc002aabb
c000f00a:	e8 f0 b2 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	f6 c3 40             	test   bl,0x40
c000f015:	74 e3                	je     c000effa <Computer::handleNMI()+0x24>
c000f017:	83 ec 0c             	sub    esp,0xc
c000f01a:	68 c8 aa 02 c0       	push   0xc002aac8
c000f01f:	e8 db b2 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c000f024:	83 c4 10             	add    esp,0x10
c000f027:	84 db                	test   bl,bl
c000f029:	79 d3                	jns    c000effe <Computer::handleNMI()+0x28>
c000f02b:	c7 44 24 10 d2 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aad2
c000f033:	5a                   	pop    edx
c000f034:	5b                   	pop    ebx
c000f035:	5e                   	pop    esi
c000f036:	e9 c4 b2 00 00       	jmp    c001a2ff <Krnl::panic(char const*)>
c000f03b:	90                   	nop

c000f03c <Computer::setDiskActivityLight(int, bool)>:
c000f03c:	56                   	push   esi
c000f03d:	53                   	push   ebx
c000f03e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f042:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f047:	77 1b                	ja     c000f064 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f049:	e4 92                	in     al,0x92
c000f04b:	bb 40 00 00 00       	mov    ebx,0x40
c000f050:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f054:	89 da                	mov    edx,ebx
c000f056:	d3 e2                	shl    edx,cl
c000f058:	89 f1                	mov    ecx,esi
c000f05a:	f7 d2                	not    edx
c000f05c:	d3 e3                	shl    ebx,cl
c000f05e:	21 d0                	and    eax,edx
c000f060:	09 d8                	or     eax,ebx
c000f062:	e6 92                	out    0x92,al
c000f064:	5b                   	pop    ebx
c000f065:	5e                   	pop    esi
c000f066:	c3                   	ret    
c000f067:	90                   	nop

c000f068 <GDTEntry::setBase(unsigned int)>:
c000f068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f06c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f070:	89 c1                	mov    ecx,eax
c000f072:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f076:	c1 e9 10             	shr    ecx,0x10
c000f079:	c1 e8 18             	shr    eax,0x18
c000f07c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f07f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setLimit(unsigned int)>:
c000f084:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f08c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f08f:	66 89 01             	mov    WORD PTR [ecx],ax
c000f092:	83 e2 f0             	and    edx,0xfffffff0
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	83 e0 0f             	and    eax,0xf
c000f09b:	09 d0                	or     eax,edx
c000f09d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0a0:	c3                   	ret    
c000f0a1:	90                   	nop

c000f0a2 <GDT::GDT()>:
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0b6:	90                   	nop
c000f0b7:	c3                   	ret    

c000f0b8 <GDT::addEntry(GDTEntry)>:
c000f0b8:	53                   	push   ebx
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0c9:	52                   	push   edx
c000f0ca:	50                   	push   eax
c000f0cb:	68 0c ab 02 c0       	push   0xc002ab0c
c000f0d0:	e8 f4 37 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000f0d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0df:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0e3:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ea:	c1 e0 03             	shl    eax,0x3
c000f0ed:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ef:	83 c4 18             	add    esp,0x18
c000f0f2:	5b                   	pop    ebx
c000f0f3:	c3                   	ret    

c000f0f4 <GDT::getNumberOfEntries()>:
c000f0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <GDT::flush()>:
c000f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f100:	8b 10                	mov    edx,DWORD PTR [eax]
c000f102:	83 c0 04             	add    eax,0x4
c000f105:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f10c:	a3 d2 f2 02 c0       	mov    ds:0xc002f2d2,eax
c000f111:	66 89 15 d0 f2 02 c0 	mov    WORD PTR ds:0xc002f2d0,dx
c000f118:	e9 33 13 ff ff       	jmp    c0000450 <loadGDT>
c000f11d:	90                   	nop

c000f11e <GDT::setup()>:
c000f11e:	55                   	push   ebp
c000f11f:	57                   	push   edi
c000f120:	56                   	push   esi
c000f121:	53                   	push   ebx
c000f122:	83 ec 3c             	sub    esp,0x3c
c000f125:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f129:	6a 00                	push   0x0
c000f12b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f12f:	53                   	push   ebx
c000f130:	e8 33 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f135:	6a 00                	push   0x0
c000f137:	53                   	push   ebx
c000f138:	e8 47 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f13d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f14b:	53                   	push   ebx
c000f14c:	e8 17 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f151:	68 ff ff ff 00       	push   0xffffff
c000f156:	53                   	push   ebx
c000f157:	e8 28 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f15c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f160:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f165:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f16e:	83 c4 20             	add    esp,0x20
c000f171:	6a 00                	push   0x0
c000f173:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f177:	53                   	push   ebx
c000f178:	e8 eb fe ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f17d:	68 ff ff ff 00       	push   0xffffff
c000f182:	53                   	push   ebx
c000f183:	e8 fc fe ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f188:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f18c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f190:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f194:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f198:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f19c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1a1:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1aa:	89 d8                	mov    eax,ebx
c000f1ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1b0:	80 cc 60             	or     ah,0x60
c000f1b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1b7:	83 c4 0c             	add    esp,0xc
c000f1ba:	89 f8                	mov    eax,edi
c000f1bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c0:	80 cc 60             	or     ah,0x60
c000f1c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c7:	89 c7                	mov    edi,eax
c000f1c9:	55                   	push   ebp
c000f1ca:	e8 e9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1cf:	83 c4 0c             	add    esp,0xc
c000f1d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1da:	55                   	push   ebp
c000f1db:	e8 d8 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1eb:	55                   	push   ebp
c000f1ec:	e8 c7 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1f1:	83 c4 0c             	add    esp,0xc
c000f1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1fc:	53                   	push   ebx
c000f1fd:	51                   	push   ecx
c000f1fe:	55                   	push   ebp
c000f1ff:	e8 b4 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f204:	83 c4 0c             	add    esp,0xc
c000f207:	57                   	push   edi
c000f208:	56                   	push   esi
c000f209:	55                   	push   ebp
c000f20a:	e8 a9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f20f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f212:	e8 e5 fe ff ff       	call   c000f0fc <GDT::flush()>
c000f217:	83 c4 4c             	add    esp,0x4c
c000f21a:	5b                   	pop    ebx
c000f21b:	5e                   	pop    esi
c000f21c:	5f                   	pop    edi
c000f21d:	5d                   	pop    ebp
c000f21e:	c3                   	ret    

c000f21f <idleFunction(void*)>:
c000f21f:	53                   	push   ebx
c000f220:	83 ec 08             	sub    esp,0x8
c000f223:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c000f228:	48                   	dec    eax
c000f229:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c000f22e:	75 01                	jne    c000f231 <idleFunction(void*)+0x12>
c000f230:	fb                   	sti    
c000f231:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000f236:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f23c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f243:	74 3c                	je     c000f281 <idleFunction(void*)+0x62>
c000f245:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f24c:	74 33                	je     c000f281 <idleFunction(void*)+0x62>
c000f24e:	31 db                	xor    ebx,ebx
c000f250:	52                   	push   edx
c000f251:	52                   	push   edx
c000f252:	68 e1 00 00 00       	push   0xe1
c000f257:	50                   	push   eax
c000f258:	e8 d5 fb ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c000f25d:	53                   	push   ebx
c000f25e:	83 e0 02             	and    eax,0x2
c000f261:	50                   	push   eax
c000f262:	68 e1 00 00 00       	push   0xe1
c000f267:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c000f26d:	e8 ec fb ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f272:	83 c4 20             	add    esp,0x20
c000f275:	e8 05 10 ff ff       	call   c000027f <doTPAUSE>
c000f27a:	e8 81 9c 01 00       	call   c0028f00 <idleCommon()>
c000f27f:	eb f4                	jmp    c000f275 <idleFunction(void*)+0x56>
c000f281:	fb                   	sti    
c000f282:	f4                   	hlt    
c000f283:	e8 78 9c 01 00       	call   c0028f00 <idleCommon()>
c000f288:	eb f7                	jmp    c000f281 <idleFunction(void*)+0x62>

c000f28a <IDTEntry::IDTEntry(bool)>:
c000f28a:	83 ec 04             	sub    esp,0x4
c000f28d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f291:	88 04 24             	mov    BYTE PTR [esp],al
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2aa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ad:	83 e2 f0             	and    edx,0xfffffff0
c000f2b0:	83 ca 0e             	or     edx,0xe
c000f2b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2bd:	83 e2 ef             	and    edx,0xffffffef
c000f2c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2c7:	74 04                	je     c000f2cd <IDTEntry::IDTEntry(bool)+0x43>
c000f2c9:	b2 03                	mov    dl,0x3
c000f2cb:	eb 02                	jmp    c000f2cf <IDTEntry::IDTEntry(bool)+0x45>
c000f2cd:	b2 00                	mov    dl,0x0
c000f2cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d3:	83 e2 03             	and    edx,0x3
c000f2d6:	88 d1                	mov    cl,dl
c000f2d8:	c1 e1 05             	shl    ecx,0x5
c000f2db:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2de:	83 e2 9f             	and    edx,0xffffff9f
c000f2e1:	09 ca                	or     edx,ecx
c000f2e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ed:	83 ca 80             	or     edx,0xffffff80
c000f2f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f3:	90                   	nop
c000f2f4:	83 c4 04             	add    esp,0x4
c000f2f7:	c3                   	ret    

c000f2f8 <IDTEntry::setOffset(unsigned int)>:
c000f2f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f300:	66 89 02             	mov    WORD PTR [edx],ax
c000f303:	c1 e8 10             	shr    eax,0x10
c000f306:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f30a:	c3                   	ret    
c000f30b:	90                   	nop

c000f30c <IDT::IDT()>:
c000f30c:	90                   	nop
c000f30d:	c3                   	ret    

c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f312:	83 c0 30             	add    eax,0x30
c000f315:	c3                   	ret    

c000f316 <IDT::addEntry(IDTEntry, int)>:
c000f316:	53                   	push   ebx
c000f317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f31f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f327:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f32a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f32e:	5b                   	pop    ebx
c000f32f:	c3                   	ret    

c000f330 <IDT::addEntry(int, void (*)(), bool)>:
c000f330:	53                   	push   ebx
c000f331:	83 ec 10             	sub    esp,0x10
c000f334:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f339:	50                   	push   eax
c000f33a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f33e:	53                   	push   ebx
c000f33f:	e8 46 ff ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f344:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f348:	53                   	push   ebx
c000f349:	e8 aa ff ff ff       	call   c000f2f8 <IDTEntry::setOffset(unsigned int)>
c000f34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f356:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f35e:	e8 b3 ff ff ff       	call   c000f316 <IDT::addEntry(IDTEntry, int)>
c000f363:	83 c4 30             	add    esp,0x30
c000f366:	5b                   	pop    ebx
c000f367:	c3                   	ret    

c000f368 <IDT::flush()>:
c000f368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f36c:	66 c7 05 d8 f2 02 c0 ff 07 	mov    WORD PTR ds:0xc002f2d8,0x7ff
c000f375:	a3 da f2 02 c0       	mov    ds:0xc002f2da,eax
c000f37a:	0f 01 1d d8 f2 02 c0 	lidtd  ds:0xc002f2d8
c000f381:	c3                   	ret    

c000f382 <IDT::setup()>:
c000f382:	57                   	push   edi
c000f383:	56                   	push   esi
c000f384:	53                   	push   ebx
c000f385:	83 ec 10             	sub    esp,0x10
c000f388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f38c:	6a 00                	push   0x0
c000f38e:	68 70 04 00 c0       	push   0xc0000470
c000f393:	6a 00                	push   0x0
c000f395:	53                   	push   ebx
c000f396:	e8 95 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f39b:	6a 00                	push   0x0
c000f39d:	68 80 04 00 c0       	push   0xc0000480
c000f3a2:	6a 01                	push   0x1
c000f3a4:	53                   	push   ebx
c000f3a5:	e8 86 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3aa:	83 c4 20             	add    esp,0x20
c000f3ad:	6a 00                	push   0x0
c000f3af:	68 8a 04 00 c0       	push   0xc000048a
c000f3b4:	6a 02                	push   0x2
c000f3b6:	53                   	push   ebx
c000f3b7:	e8 74 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3bc:	6a 00                	push   0x0
c000f3be:	68 94 04 00 c0       	push   0xc0000494
c000f3c3:	6a 03                	push   0x3
c000f3c5:	53                   	push   ebx
c000f3c6:	e8 65 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3cb:	83 c4 20             	add    esp,0x20
c000f3ce:	6a 00                	push   0x0
c000f3d0:	68 9e 04 00 c0       	push   0xc000049e
c000f3d5:	6a 04                	push   0x4
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 53 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3dd:	6a 00                	push   0x0
c000f3df:	68 a8 04 00 c0       	push   0xc00004a8
c000f3e4:	6a 05                	push   0x5
c000f3e6:	53                   	push   ebx
c000f3e7:	e8 44 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3ec:	83 c4 20             	add    esp,0x20
c000f3ef:	6a 00                	push   0x0
c000f3f1:	68 b2 04 00 c0       	push   0xc00004b2
c000f3f6:	6a 06                	push   0x6
c000f3f8:	53                   	push   ebx
c000f3f9:	e8 32 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3fe:	6a 00                	push   0x0
c000f400:	68 bc 04 00 c0       	push   0xc00004bc
c000f405:	6a 07                	push   0x7
c000f407:	53                   	push   ebx
c000f408:	e8 23 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f40d:	83 c4 20             	add    esp,0x20
c000f410:	6a 00                	push   0x0
c000f412:	68 c6 04 00 c0       	push   0xc00004c6
c000f417:	6a 08                	push   0x8
c000f419:	53                   	push   ebx
c000f41a:	e8 11 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f41f:	6a 00                	push   0x0
c000f421:	68 ce 04 00 c0       	push   0xc00004ce
c000f426:	6a 09                	push   0x9
c000f428:	53                   	push   ebx
c000f429:	e8 02 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f42e:	83 c4 20             	add    esp,0x20
c000f431:	6a 00                	push   0x0
c000f433:	68 d8 04 00 c0       	push   0xc00004d8
c000f438:	6a 0a                	push   0xa
c000f43a:	53                   	push   ebx
c000f43b:	e8 f0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f440:	6a 00                	push   0x0
c000f442:	68 e0 04 00 c0       	push   0xc00004e0
c000f447:	6a 0b                	push   0xb
c000f449:	53                   	push   ebx
c000f44a:	e8 e1 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f44f:	83 c4 20             	add    esp,0x20
c000f452:	6a 00                	push   0x0
c000f454:	68 e8 04 00 c0       	push   0xc00004e8
c000f459:	6a 0c                	push   0xc
c000f45b:	53                   	push   ebx
c000f45c:	e8 cf fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f461:	6a 00                	push   0x0
c000f463:	68 f0 04 00 c0       	push   0xc00004f0
c000f468:	6a 0d                	push   0xd
c000f46a:	53                   	push   ebx
c000f46b:	e8 c0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f470:	83 c4 20             	add    esp,0x20
c000f473:	6a 00                	push   0x0
c000f475:	68 f8 04 00 c0       	push   0xc00004f8
c000f47a:	6a 0e                	push   0xe
c000f47c:	53                   	push   ebx
c000f47d:	e8 ae fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f482:	6a 00                	push   0x0
c000f484:	68 00 05 00 c0       	push   0xc0000500
c000f489:	6a 0f                	push   0xf
c000f48b:	53                   	push   ebx
c000f48c:	e8 9f fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f491:	83 c4 20             	add    esp,0x20
c000f494:	6a 00                	push   0x0
c000f496:	68 0a 05 00 c0       	push   0xc000050a
c000f49b:	6a 10                	push   0x10
c000f49d:	53                   	push   ebx
c000f49e:	e8 8d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4a3:	6a 00                	push   0x0
c000f4a5:	68 14 05 00 c0       	push   0xc0000514
c000f4aa:	6a 11                	push   0x11
c000f4ac:	53                   	push   ebx
c000f4ad:	e8 7e fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4b2:	83 c4 20             	add    esp,0x20
c000f4b5:	6a 00                	push   0x0
c000f4b7:	68 1e 05 00 c0       	push   0xc000051e
c000f4bc:	6a 12                	push   0x12
c000f4be:	53                   	push   ebx
c000f4bf:	e8 6c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4c4:	6a 01                	push   0x1
c000f4c6:	68 b8 05 00 c0       	push   0xc00005b8
c000f4cb:	6a 60                	push   0x60
c000f4cd:	53                   	push   ebx
c000f4ce:	e8 5d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4d3:	83 c4 20             	add    esp,0x20
c000f4d6:	6a 00                	push   0x0
c000f4d8:	68 bf 05 00 c0       	push   0xc00005bf
c000f4dd:	6a 20                	push   0x20
c000f4df:	53                   	push   ebx
c000f4e0:	e8 4b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4e5:	6a 00                	push   0x0
c000f4e7:	68 aa 05 00 c0       	push   0xc00005aa
c000f4ec:	6a 21                	push   0x21
c000f4ee:	53                   	push   ebx
c000f4ef:	e8 3c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4f4:	83 c4 20             	add    esp,0x20
c000f4f7:	6a 00                	push   0x0
c000f4f9:	68 b1 05 00 c0       	push   0xc00005b1
c000f4fe:	6a 22                	push   0x22
c000f500:	53                   	push   ebx
c000f501:	e8 2a fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f506:	6a 00                	push   0x0
c000f508:	68 28 05 00 c0       	push   0xc0000528
c000f50d:	6a 23                	push   0x23
c000f50f:	53                   	push   ebx
c000f510:	e8 1b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f515:	83 c4 20             	add    esp,0x20
c000f518:	6a 00                	push   0x0
c000f51a:	68 32 05 00 c0       	push   0xc0000532
c000f51f:	6a 24                	push   0x24
c000f521:	53                   	push   ebx
c000f522:	e8 09 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f527:	6a 00                	push   0x0
c000f529:	68 3c 05 00 c0       	push   0xc000053c
c000f52e:	6a 25                	push   0x25
c000f530:	53                   	push   ebx
c000f531:	e8 fa fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f536:	83 c4 20             	add    esp,0x20
c000f539:	6a 00                	push   0x0
c000f53b:	68 46 05 00 c0       	push   0xc0000546
c000f540:	6a 26                	push   0x26
c000f542:	53                   	push   ebx
c000f543:	e8 e8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f548:	6a 00                	push   0x0
c000f54a:	68 50 05 00 c0       	push   0xc0000550
c000f54f:	6a 27                	push   0x27
c000f551:	53                   	push   ebx
c000f552:	e8 d9 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f557:	83 c4 20             	add    esp,0x20
c000f55a:	6a 00                	push   0x0
c000f55c:	68 5a 05 00 c0       	push   0xc000055a
c000f561:	6a 28                	push   0x28
c000f563:	53                   	push   ebx
c000f564:	e8 c7 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f569:	6a 00                	push   0x0
c000f56b:	68 64 05 00 c0       	push   0xc0000564
c000f570:	6a 29                	push   0x29
c000f572:	53                   	push   ebx
c000f573:	e8 b8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f578:	83 c4 20             	add    esp,0x20
c000f57b:	6a 00                	push   0x0
c000f57d:	68 6e 05 00 c0       	push   0xc000056e
c000f582:	6a 2a                	push   0x2a
c000f584:	53                   	push   ebx
c000f585:	e8 a6 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f58a:	6a 00                	push   0x0
c000f58c:	68 78 05 00 c0       	push   0xc0000578
c000f591:	6a 2b                	push   0x2b
c000f593:	53                   	push   ebx
c000f594:	e8 97 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f599:	83 c4 20             	add    esp,0x20
c000f59c:	6a 00                	push   0x0
c000f59e:	68 82 05 00 c0       	push   0xc0000582
c000f5a3:	6a 2c                	push   0x2c
c000f5a5:	53                   	push   ebx
c000f5a6:	e8 85 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ab:	6a 00                	push   0x0
c000f5ad:	68 8c 05 00 c0       	push   0xc000058c
c000f5b2:	6a 2d                	push   0x2d
c000f5b4:	53                   	push   ebx
c000f5b5:	e8 76 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ba:	83 c4 20             	add    esp,0x20
c000f5bd:	6a 00                	push   0x0
c000f5bf:	68 96 05 00 c0       	push   0xc0000596
c000f5c4:	6a 2e                	push   0x2e
c000f5c6:	53                   	push   ebx
c000f5c7:	e8 64 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5cc:	6a 00                	push   0x0
c000f5ce:	68 a0 05 00 c0       	push   0xc00005a0
c000f5d3:	6a 2f                	push   0x2f
c000f5d5:	53                   	push   ebx
c000f5d6:	e8 55 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5db:	83 c4 20             	add    esp,0x20
c000f5de:	6a 00                	push   0x0
c000f5e0:	68 f6 05 00 c0       	push   0xc00005f6
c000f5e5:	6a 30                	push   0x30
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 43 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ed:	6a 00                	push   0x0
c000f5ef:	68 00 06 00 c0       	push   0xc0000600
c000f5f4:	6a 31                	push   0x31
c000f5f6:	53                   	push   ebx
c000f5f7:	e8 34 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5fc:	83 c4 20             	add    esp,0x20
c000f5ff:	6a 00                	push   0x0
c000f601:	68 0a 06 00 c0       	push   0xc000060a
c000f606:	6a 32                	push   0x32
c000f608:	53                   	push   ebx
c000f609:	e8 22 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f60e:	6a 00                	push   0x0
c000f610:	68 14 06 00 c0       	push   0xc0000614
c000f615:	6a 33                	push   0x33
c000f617:	53                   	push   ebx
c000f618:	e8 13 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f61d:	83 c4 20             	add    esp,0x20
c000f620:	6a 00                	push   0x0
c000f622:	68 1e 06 00 c0       	push   0xc000061e
c000f627:	6a 34                	push   0x34
c000f629:	53                   	push   ebx
c000f62a:	e8 01 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f62f:	6a 00                	push   0x0
c000f631:	68 28 06 00 c0       	push   0xc0000628
c000f636:	6a 35                	push   0x35
c000f638:	53                   	push   ebx
c000f639:	e8 f2 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f63e:	83 c4 20             	add    esp,0x20
c000f641:	6a 00                	push   0x0
c000f643:	68 32 06 00 c0       	push   0xc0000632
c000f648:	6a 36                	push   0x36
c000f64a:	53                   	push   ebx
c000f64b:	e8 e0 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f650:	6a 00                	push   0x0
c000f652:	68 3c 06 00 c0       	push   0xc000063c
c000f657:	6a 37                	push   0x37
c000f659:	53                   	push   ebx
c000f65a:	e8 d1 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f65f:	83 c4 1c             	add    esp,0x1c
c000f662:	6a 03                	push   0x3
c000f664:	6a 02                	push   0x2
c000f666:	ff 35 30 f4 02 c0    	push   DWORD PTR ds:0xc002f430
c000f66c:	e8 8b 27 00 00       	call   c0011dfc <VAS::allocatePages(int, int)>
c000f671:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f678:	89 c6                	mov    esi,eax
c000f67a:	e8 0d 02 00 00       	call   c000f88c <malloc>
c000f67f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f685:	89 04 24             	mov    DWORD PTR [esp],eax
c000f688:	89 c7                	mov    edi,eax
c000f68a:	e8 65 17 00 00       	call   c0010df4 <TSS::TSS()>
c000f68f:	83 c4 0c             	add    esp,0xc
c000f692:	68 c6 04 00 c0       	push   0xc00004c6
c000f697:	56                   	push   esi
c000f698:	57                   	push   edi
c000f699:	e8 96 17 00 00       	call   c0010e34 <TSS::setup(unsigned long, unsigned long)>
c000f69e:	89 c6                	mov    esi,eax
c000f6a0:	58                   	pop    eax
c000f6a1:	5a                   	pop    edx
c000f6a2:	6a 00                	push   0x0
c000f6a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6a8:	50                   	push   eax
c000f6a9:	e8 dc fb ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6b7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6be:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c8:	80 ce 05             	or     dh,0x5
c000f6cb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6d6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6dc:	e8 87 fc ff ff       	call   c000f368 <IDT::flush()>
c000f6e1:	83 c4 20             	add    esp,0x20
c000f6e4:	5b                   	pop    ebx
c000f6e5:	5e                   	pop    esi
c000f6e6:	5f                   	pop    edi
c000f6e7:	c3                   	ret    

c000f6e8 <sbrk>:
c000f6e8:	55                   	push   ebp
c000f6e9:	57                   	push   edi
c000f6ea:	56                   	push   esi
c000f6eb:	53                   	push   ebx
c000f6ec:	83 ec 1c             	sub    esp,0x1c
c000f6ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	74 3e                	je     c000f735 <sbrk+0x4d>
c000f6f7:	78 43                	js     c000f73c <sbrk+0x54>
c000f6f9:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c000f6ff:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f705:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f70b:	83 e2 01             	and    edx,0x1
c000f70e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f712:	8b 0d c0 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddc0
c000f718:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f71c:	05 ff 0f 00 00       	add    eax,0xfff
c000f721:	89 c2                	mov    edx,eax
c000f723:	78 2f                	js     c000f754 <sbrk+0x6c>
c000f725:	c1 fa 0c             	sar    edx,0xc
c000f728:	89 d7                	mov    edi,edx
c000f72a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f72e:	be 00 00 00 00       	mov    esi,0x0
c000f733:	eb 36                	jmp    c000f76b <sbrk+0x83>
c000f735:	a1 c0 dd 02 c0       	mov    eax,ds:0xc002ddc0
c000f73a:	eb 73                	jmp    c000f7af <sbrk+0xc7>
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	50                   	push   eax
c000f740:	68 28 ab 02 c0       	push   0xc002ab28
c000f745:	e8 7f 31 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f752:	eb 5b                	jmp    c000f7af <sbrk+0xc7>
c000f754:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f75a:	eb c9                	jmp    c000f725 <sbrk+0x3d>
c000f75c:	81 05 c0 dd 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002ddc0,0x1000
c000f766:	46                   	inc    esi
c000f767:	39 f7                	cmp    edi,esi
c000f769:	74 33                	je     c000f79e <sbrk+0xb6>
c000f76b:	8b 1d 30 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f430
c000f771:	8b 2d c0 dd 02 c0    	mov    ebp,DWORD PTR ds:0xc002ddc0
c000f777:	e8 0e 04 00 00       	call   c000fb8a <Phys::allocatePage()>
c000f77c:	68 01 0c 00 00       	push   0xc01
c000f781:	55                   	push   ebp
c000f782:	50                   	push   eax
c000f783:	53                   	push   ebx
c000f784:	e8 71 25 00 00       	call   c0011cfa <VAS::mapPage(unsigned long, unsigned long, int)>
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f791:	74 c9                	je     c000f75c <sbrk+0x74>
c000f793:	8b 1d c0 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddc0
c000f799:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f79c:	eb be                	jmp    c000f75c <sbrk+0x74>
c000f79e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7a3:	75 12                	jne    c000f7b7 <sbrk+0xcf>
c000f7a5:	0f 20 d8             	mov    eax,cr3
c000f7a8:	0f 22 d8             	mov    cr3,eax
c000f7ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7af:	83 c4 1c             	add    esp,0x1c
c000f7b2:	5b                   	pop    ebx
c000f7b3:	5e                   	pop    esi
c000f7b4:	5f                   	pop    edi
c000f7b5:	5d                   	pop    ebp
c000f7b6:	c3                   	ret    
c000f7b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7bb:	89 cb                	mov    ebx,ecx
c000f7bd:	c1 eb 0a             	shr    ebx,0xa
c000f7c0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7c6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d0:	c1 e0 0c             	shl    eax,0xc
c000f7d3:	01 c8                	add    eax,ecx
c000f7d5:	c1 e8 0a             	shr    eax,0xa
c000f7d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7dd:	2d 00 00 40 00       	sub    eax,0x400000
c000f7e2:	39 c3                	cmp    ebx,eax
c000f7e4:	77 c5                	ja     c000f7ab <sbrk+0xc3>
c000f7e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7ef:	39 d8                	cmp    eax,ebx
c000f7f1:	73 f3                	jae    c000f7e6 <sbrk+0xfe>
c000f7f3:	eb b6                	jmp    c000f7ab <sbrk+0xc3>

c000f7f5 <mmap>:
c000f7f5:	83 ec 18             	sub    esp,0x18
c000f7f8:	68 58 ab 02 c0       	push   0xc002ab58
c000f7fd:	e8 fd aa 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c000f802:	b8 00 00 00 00       	mov    eax,0x0
c000f807:	83 c4 1c             	add    esp,0x1c
c000f80a:	c3                   	ret    

c000f80b <munmap>:
c000f80b:	83 ec 18             	sub    esp,0x18
c000f80e:	68 5d ab 02 c0       	push   0xc002ab5d
c000f813:	e8 e7 aa 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c000f818:	b8 00 00 00 00       	mov    eax,0x0
c000f81d:	83 c4 1c             	add    esp,0x1c
c000f820:	c3                   	ret    

c000f821 <liballoc_lock()>:
c000f821:	fa                   	cli    
c000f822:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c000f828:	b8 00 00 00 00       	mov    eax,0x0
c000f82d:	c3                   	ret    

c000f82e <liballoc_unlock()>:
c000f82e:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c000f833:	48                   	dec    eax
c000f834:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c000f839:	75 01                	jne    c000f83c <liballoc_unlock()+0xe>
c000f83b:	fb                   	sti    
c000f83c:	b8 00 00 00 00       	mov    eax,0x0
c000f841:	c3                   	ret    

c000f842 <liballoc_alloc(int)>:
c000f842:	83 ec 10             	sub    esp,0x10
c000f845:	68 01 08 00 00       	push   0x801
c000f84a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f84e:	ff 35 30 f4 02 c0    	push   DWORD PTR ds:0xc002f430
c000f854:	e8 a3 25 00 00       	call   c0011dfc <VAS::allocatePages(int, int)>
c000f859:	83 c4 1c             	add    esp,0x1c
c000f85c:	c3                   	ret    

c000f85d <liballoc_free(void*, int)>:
c000f85d:	83 ec 14             	sub    esp,0x14
c000f860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f864:	ff 35 30 f4 02 c0    	push   DWORD PTR ds:0xc002f430
c000f86a:	e8 37 22 00 00       	call   c0011aa6 <VAS::freeAllocatedPages(unsigned long)>
c000f86f:	b8 00 00 00 00       	mov    eax,0x0
c000f874:	83 c4 1c             	add    esp,0x1c
c000f877:	c3                   	ret    

c000f878 <realloc>:
c000f878:	83 ec 14             	sub    esp,0x14
c000f87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f883:	e8 a4 1d ff ff       	call   c000162c <dlrealloc>
c000f888:	83 c4 1c             	add    esp,0x1c
c000f88b:	c3                   	ret    

c000f88c <malloc>:
c000f88c:	83 ec 18             	sub    esp,0x18
c000f88f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f893:	e8 57 18 ff ff       	call   c00010ef <dlmalloc>
c000f898:	83 c4 1c             	add    esp,0x1c
c000f89b:	c3                   	ret    

c000f89c <free>:
c000f89c:	83 ec 18             	sub    esp,0x18
c000f89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a3:	e8 ec 14 ff ff       	call   c0000d94 <dlfree>
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <rfree>:
c000f8ac:	83 ec 18             	sub    esp,0x18
c000f8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b3:	e8 dc 14 ff ff       	call   c0000d94 <dlfree>
c000f8b8:	83 c4 1c             	add    esp,0x1c
c000f8bb:	c3                   	ret    

c000f8bc <calloc>:
c000f8bc:	56                   	push   esi
c000f8bd:	53                   	push   ebx
c000f8be:	83 ec 10             	sub    esp,0x10
c000f8c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8c5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8ca:	53                   	push   ebx
c000f8cb:	e8 bc ff ff ff       	call   c000f88c <malloc>
c000f8d0:	89 c6                	mov    esi,eax
c000f8d2:	83 c4 0c             	add    esp,0xc
c000f8d5:	53                   	push   ebx
c000f8d6:	6a 00                	push   0x0
c000f8d8:	50                   	push   eax
c000f8d9:	e8 72 0e ff ff       	call   c0000750 <memset>
c000f8de:	89 f0                	mov    eax,esi
c000f8e0:	83 c4 14             	add    esp,0x14
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	c3                   	ret    

c000f8e6 <kernel_main>:
c000f8e6:	57                   	push   edi
c000f8e7:	bf f9 03 00 00       	mov    edi,0x3f9
c000f8ec:	56                   	push   esi
c000f8ed:	89 fa                	mov    edx,edi
c000f8ef:	53                   	push   ebx
c000f8f0:	31 f6                	xor    esi,esi
c000f8f2:	83 ec 2c             	sub    esp,0x2c
c000f8f5:	89 f0                	mov    eax,esi
c000f8f7:	ee                   	out    dx,al
c000f8f8:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f8fd:	b0 80                	mov    al,0x80
c000f8ff:	89 da                	mov    edx,ebx
c000f901:	ee                   	out    dx,al
c000f902:	b1 03                	mov    cl,0x3
c000f904:	ba f8 03 00 00       	mov    edx,0x3f8
c000f909:	88 c8                	mov    al,cl
c000f90b:	ee                   	out    dx,al
c000f90c:	89 f0                	mov    eax,esi
c000f90e:	89 fa                	mov    edx,edi
c000f910:	ee                   	out    dx,al
c000f911:	88 c8                	mov    al,cl
c000f913:	89 da                	mov    edx,ebx
c000f915:	ee                   	out    dx,al
c000f916:	b0 c7                	mov    al,0xc7
c000f918:	ba fa 03 00 00       	mov    edx,0x3fa
c000f91d:	ee                   	out    dx,al
c000f91e:	b0 0b                	mov    al,0xb
c000f920:	ba fc 03 00 00       	mov    edx,0x3fc
c000f925:	ee                   	out    dx,al
c000f926:	68 64 ab 02 c0       	push   0xc002ab64
c000f92b:	e8 99 2f 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000f930:	e8 d7 08 00 00       	call   c001020c <installVgaTextImplementation()>
c000f935:	0f b6 05 e0 dd 02 c0 	movzx  eax,BYTE PTR ds:0xc002dde0
c000f93c:	83 c4 10             	add    esp,0x10
c000f93f:	84 c0                	test   al,al
c000f941:	74 3e                	je     c000f981 <kernel_main+0x9b>
c000f943:	31 c9                	xor    ecx,ecx
c000f945:	be 06 00 00 00       	mov    esi,0x6
c000f94a:	31 db                	xor    ebx,ebx
c000f94c:	eb 20                	jmp    c000f96e <kernel_main+0x88>
c000f94e:	80 cc 0e             	or     ah,0xe
c000f951:	41                   	inc    ecx
c000f952:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f955:	c1 e2 04             	shl    edx,0x4
c000f958:	01 da                	add    edx,ebx
c000f95a:	43                   	inc    ebx
c000f95b:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f963:	0f b6 81 e0 dd 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd2220]
c000f96a:	84 c0                	test   al,al
c000f96c:	74 13                	je     c000f981 <kernel_main+0x9b>
c000f96e:	3c 0a                	cmp    al,0xa
c000f970:	75 dc                	jne    c000f94e <kernel_main+0x68>
c000f972:	41                   	inc    ecx
c000f973:	46                   	inc    esi
c000f974:	31 db                	xor    ebx,ebx
c000f976:	0f b6 81 e0 dd 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd2220]
c000f97d:	84 c0                	test   al,al
c000f97f:	75 ed                	jne    c000f96e <kernel_main+0x88>
c000f981:	83 ec 0c             	sub    esp,0xc
c000f984:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f989:	a3 e0 f2 02 c0       	mov    ds:0xc002f2e0,eax
c000f98e:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f993:	05 ff 0f 00 00       	add    eax,0xfff
c000f998:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f99d:	50                   	push   eax
c000f99e:	e8 30 03 00 00       	call   c000fcd3 <Phys::physicalMemorySetup(unsigned int)>
c000f9a3:	e8 da 1c 00 00       	call   c0011682 <Virt::virtualMemorySetup()>
c000f9a8:	58                   	pop    eax
c000f9a9:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f9ad:	53                   	push   ebx
c000f9ae:	e8 1b 1f 00 00       	call   c00118ce <VAS::VAS()>
c000f9b3:	89 1d 30 f4 02 c0    	mov    DWORD PTR ds:0xc002f430,ebx
c000f9b9:	e8 62 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000f9be:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f9c5:	e8 c2 fe ff ff       	call   c000f88c <malloc>
c000f9ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9cd:	89 c6                	mov    esi,eax
c000f9cf:	e8 b0 ed ff ff       	call   c000e784 <Computer::Computer()>
c000f9d4:	6a 00                	push   0x0
c000f9d6:	89 35 c8 f2 02 c0    	mov    DWORD PTR ds:0xc002f2c8,esi
c000f9dc:	6a 00                	push   0x0
c000f9de:	6a 00                	push   0x0
c000f9e0:	56                   	push   esi
c000f9e1:	e8 ee f4 ff ff       	call   c000eed4 <Computer::open(int, int, void*)>
c000f9e6:	83 c4 14             	add    esp,0x14
c000f9e9:	53                   	push   ebx
c000f9ea:	e8 8f 21 00 00       	call   c0011b7e <VAS::~VAS()>
c000f9ef:	83 c4 30             	add    esp,0x30
c000f9f2:	5b                   	pop    ebx
c000f9f3:	5e                   	pop    esi
c000f9f4:	5f                   	pop    edi
c000f9f5:	c3                   	ret    

c000f9f6 <Phys::allocateDMA(unsigned long)>:
c000f9f6:	55                   	push   ebp
c000f9f7:	31 d2                	xor    edx,edx
c000f9f9:	57                   	push   edi
c000f9fa:	31 ed                	xor    ebp,ebp
c000f9fc:	56                   	push   esi
c000f9fd:	31 c9                	xor    ecx,ecx
c000f9ff:	53                   	push   ebx
c000fa00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa04:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fa0a:	31 c0                	xor    eax,eax
c000fa0c:	c1 ee 0c             	shr    esi,0xc
c000fa0f:	eb 17                	jmp    c000fa28 <Phys::allocateDMA(unsigned long)+0x32>
c000fa11:	85 c9                	test   ecx,ecx
c000fa13:	75 04                	jne    c000fa19 <Phys::allocateDMA(unsigned long)+0x23>
c000fa15:	89 d5                	mov    ebp,edx
c000fa17:	89 d0                	mov    eax,edx
c000fa19:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fa1c:	39 de                	cmp    esi,ebx
c000fa1e:	74 20                	je     c000fa40 <Phys::allocateDMA(unsigned long)+0x4a>
c000fa20:	42                   	inc    edx
c000fa21:	89 d9                	mov    ecx,ebx
c000fa23:	83 fa 2f             	cmp    edx,0x2f
c000fa26:	7f 11                	jg     c000fa39 <Phys::allocateDMA(unsigned long)+0x43>
c000fa28:	80 ba 20 f3 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0ce0],0x0
c000fa2f:	74 e0                	je     c000fa11 <Phys::allocateDMA(unsigned long)+0x1b>
c000fa31:	31 c9                	xor    ecx,ecx
c000fa33:	42                   	inc    edx
c000fa34:	83 fa 2f             	cmp    edx,0x2f
c000fa37:	7e ef                	jle    c000fa28 <Phys::allocateDMA(unsigned long)+0x32>
c000fa39:	5b                   	pop    ebx
c000fa3a:	31 c0                	xor    eax,eax
c000fa3c:	5e                   	pop    esi
c000fa3d:	5f                   	pop    edi
c000fa3e:	5d                   	pop    ebp
c000fa3f:	c3                   	ret    
c000fa40:	8d 14 30             	lea    edx,[eax+esi*1]
c000fa43:	89 d7                	mov    edi,edx
c000fa45:	4f                   	dec    edi
c000fa46:	79 03                	jns    c000fa4b <Phys::allocateDMA(unsigned long)+0x55>
c000fa48:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fa4b:	c1 ff 04             	sar    edi,0x4
c000fa4e:	89 c2                	mov    edx,eax
c000fa50:	c1 fa 04             	sar    edx,0x4
c000fa53:	39 fa                	cmp    edx,edi
c000fa55:	75 2f                	jne    c000fa86 <Phys::allocateDMA(unsigned long)+0x90>
c000fa57:	85 db                	test   ebx,ebx
c000fa59:	74 1a                	je     c000fa75 <Phys::allocateDMA(unsigned long)+0x7f>
c000fa5b:	be 20 f3 02 c0       	mov    esi,0xc002f320
c000fa60:	8d 90 20 f3 02 c0    	lea    edx,[eax-0x3ffd0ce0]
c000fa66:	f7 d6                	not    esi
c000fa68:	29 c6                	sub    esi,eax
c000fa6a:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fa6d:	42                   	inc    edx
c000fa6e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fa71:	39 d9                	cmp    ecx,ebx
c000fa73:	7f f5                	jg     c000fa6a <Phys::allocateDMA(unsigned long)+0x74>
c000fa75:	85 ff                	test   edi,edi
c000fa77:	74 13                	je     c000fa8c <Phys::allocateDMA(unsigned long)+0x96>
c000fa79:	5b                   	pop    ebx
c000fa7a:	05 50 20 0c 00       	add    eax,0xc2050
c000fa7f:	5e                   	pop    esi
c000fa80:	c1 e0 0c             	shl    eax,0xc
c000fa83:	5f                   	pop    edi
c000fa84:	5d                   	pop    ebp
c000fa85:	c3                   	ret    
c000fa86:	89 ea                	mov    edx,ebp
c000fa88:	31 c9                	xor    ecx,ecx
c000fa8a:	eb a7                	jmp    c000fa33 <Phys::allocateDMA(unsigned long)+0x3d>
c000fa8c:	5b                   	pop    ebx
c000fa8d:	c1 e0 0c             	shl    eax,0xc
c000fa90:	5e                   	pop    esi
c000fa91:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fa96:	5f                   	pop    edi
c000fa97:	5d                   	pop    ebp
c000fa98:	c3                   	ret    

c000fa99 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fa99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000faa1:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000faa7:	c1 e9 0c             	shr    ecx,0xc
c000faaa:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000faaf:	76 25                	jbe    c000fad6 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fab1:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fab6:	c1 e8 0c             	shr    eax,0xc
c000fab9:	8d 50 10             	lea    edx,[eax+0x10]
c000fabc:	85 c9                	test   ecx,ecx
c000fabe:	74 15                	je     c000fad5 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fac0:	8d 82 20 f3 02 c0    	lea    eax,[edx-0x3ffd0ce0]
c000fac6:	8d 94 11 20 f3 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0ce0]
c000facd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fad0:	40                   	inc    eax
c000fad1:	39 d0                	cmp    eax,edx
c000fad3:	75 f8                	jne    c000facd <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fad5:	c3                   	ret    
c000fad6:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fadc:	c1 ea 0c             	shr    edx,0xc
c000fadf:	eb db                	jmp    c000fabc <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fae1 <Phys::setPageState(unsigned long, bool)>:
c000fae1:	56                   	push   esi
c000fae2:	ba 01 00 00 00       	mov    edx,0x1
c000fae7:	53                   	push   ebx
c000fae8:	8b 35 e4 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e1e4
c000faee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faf2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000faf6:	89 c8                	mov    eax,ecx
c000faf8:	83 e1 07             	and    ecx,0x7
c000fafb:	c1 e8 03             	shr    eax,0x3
c000fafe:	d3 e3                	shl    ebx,cl
c000fb00:	01 c6                	add    esi,eax
c000fb02:	d3 e2                	shl    edx,cl
c000fb04:	f7 d2                	not    edx
c000fb06:	20 16                	and    BYTE PTR [esi],dl
c000fb08:	03 05 e4 e1 02 c0    	add    eax,DWORD PTR ds:0xc002e1e4
c000fb0e:	08 18                	or     BYTE PTR [eax],bl
c000fb10:	5b                   	pop    ebx
c000fb11:	5e                   	pop    esi
c000fb12:	c3                   	ret    

c000fb13 <Phys::getPageState(unsigned long)>:
c000fb13:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fb17:	8b 15 e4 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e1e4
c000fb1d:	89 c8                	mov    eax,ecx
c000fb1f:	83 e1 07             	and    ecx,0x7
c000fb22:	c1 e8 03             	shr    eax,0x3
c000fb25:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fb29:	d3 f8                	sar    eax,cl
c000fb2b:	83 e0 01             	and    eax,0x1
c000fb2e:	c3                   	ret    

c000fb2f <Phys::freePage(unsigned long)>:
c000fb2f:	53                   	push   ebx
c000fb30:	83 ec 08             	sub    esp,0x8
c000fb33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb37:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000fb3c:	76 3a                	jbe    c000fb78 <Phys::freePage(unsigned long)+0x49>
c000fb3e:	c1 e8 0c             	shr    eax,0xc
c000fb41:	50                   	push   eax
c000fb42:	89 c3                	mov    ebx,eax
c000fb44:	e8 ca ff ff ff       	call   c000fb13 <Phys::getPageState(unsigned long)>
c000fb49:	5a                   	pop    edx
c000fb4a:	84 c0                	test   al,al
c000fb4c:	74 19                	je     c000fb67 <Phys::freePage(unsigned long)+0x38>
c000fb4e:	83 ec 08             	sub    esp,0x8
c000fb51:	ff 0d 10 f3 02 c0    	dec    DWORD PTR ds:0xc002f310
c000fb57:	6a 00                	push   0x0
c000fb59:	53                   	push   ebx
c000fb5a:	e8 82 ff ff ff       	call   c000fae1 <Phys::setPageState(unsigned long, bool)>
c000fb5f:	83 c4 10             	add    esp,0x10
c000fb62:	83 c4 08             	add    esp,0x8
c000fb65:	5b                   	pop    ebx
c000fb66:	c3                   	ret    
c000fb67:	c7 44 24 10 7b ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab7b
c000fb6f:	83 c4 08             	add    esp,0x8
c000fb72:	5b                   	pop    ebx
c000fb73:	e9 87 a7 00 00       	jmp    c001a2ff <Krnl::panic(char const*)>
c000fb78:	68 00 10 00 00       	push   0x1000
c000fb7d:	50                   	push   eax
c000fb7e:	e8 16 ff ff ff       	call   c000fa99 <Phys::freeDMA(unsigned long, unsigned long)>
c000fb83:	59                   	pop    ecx
c000fb84:	5b                   	pop    ebx
c000fb85:	83 c4 08             	add    esp,0x8
c000fb88:	5b                   	pop    ebx
c000fb89:	c3                   	ret    

c000fb8a <Phys::allocatePage()>:
c000fb8a:	56                   	push   esi
c000fb8b:	53                   	push   ebx
c000fb8c:	51                   	push   ecx
c000fb8d:	8b 35 04 f3 02 c0    	mov    esi,DWORD PTR ds:0xc002f304
c000fb93:	89 f3                	mov    ebx,esi
c000fb95:	eb 0a                	jmp    c000fba1 <Phys::allocatePage()+0x17>
c000fb97:	89 1d 04 f3 02 c0    	mov    DWORD PTR ds:0xc002f304,ebx
c000fb9d:	39 de                	cmp    esi,ebx
c000fb9f:	74 24                	je     c000fbc5 <Phys::allocatePage()+0x3b>
c000fba1:	53                   	push   ebx
c000fba2:	e8 6c ff ff ff       	call   c000fb13 <Phys::getPageState(unsigned long)>
c000fba7:	5a                   	pop    edx
c000fba8:	84 c0                	test   al,al
c000fbaa:	74 77                	je     c000fc23 <Phys::allocatePage()+0x99>
c000fbac:	43                   	inc    ebx
c000fbad:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fbb3:	75 e2                	jne    c000fb97 <Phys::allocatePage()+0xd>
c000fbb5:	31 db                	xor    ebx,ebx
c000fbb7:	c7 05 04 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f304,0x0
c000fbc1:	39 de                	cmp    esi,ebx
c000fbc3:	75 dc                	jne    c000fba1 <Phys::allocatePage()+0x17>
c000fbc5:	83 ec 0c             	sub    esp,0xc
c000fbc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fbcd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fbd0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fbd6:	e8 1b 2a 00 00       	call   c00125f6 <VAS::scanForEviction()>
c000fbdb:	83 c4 10             	add    esp,0x10
c000fbde:	85 c0                	test   eax,eax
c000fbe0:	75 59                	jne    c000fc3b <Phys::allocatePage()+0xb1>
c000fbe2:	83 ec 0c             	sub    esp,0xc
c000fbe5:	68 91 ab 02 c0       	push   0xc002ab91
c000fbea:	e8 da 2c 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000fbef:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fbf6:	e8 fb fd ff ff       	call   c000f9f6 <Phys::allocateDMA(unsigned long)>
c000fbfb:	83 c4 10             	add    esp,0x10
c000fbfe:	85 c0                	test   eax,eax
c000fc00:	75 39                	jne    c000fc3b <Phys::allocatePage()+0xb1>
c000fc02:	83 ec 0c             	sub    esp,0xc
c000fc05:	68 a2 ab 02 c0       	push   0xc002aba2
c000fc0a:	e8 f0 a6 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c000fc0f:	83 c4 10             	add    esp,0x10
c000fc12:	8b 1d 04 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f304
c000fc18:	53                   	push   ebx
c000fc19:	e8 f5 fe ff ff       	call   c000fb13 <Phys::getPageState(unsigned long)>
c000fc1e:	5a                   	pop    edx
c000fc1f:	84 c0                	test   al,al
c000fc21:	75 89                	jne    c000fbac <Phys::allocatePage()+0x22>
c000fc23:	6a 01                	push   0x1
c000fc25:	53                   	push   ebx
c000fc26:	e8 b6 fe ff ff       	call   c000fae1 <Phys::setPageState(unsigned long, bool)>
c000fc2b:	a1 04 f3 02 c0       	mov    eax,ds:0xc002f304
c000fc30:	59                   	pop    ecx
c000fc31:	ff 05 10 f3 02 c0    	inc    DWORD PTR ds:0xc002f310
c000fc37:	c1 e0 0c             	shl    eax,0xc
c000fc3a:	5b                   	pop    ebx
c000fc3b:	5a                   	pop    edx
c000fc3c:	5b                   	pop    ebx
c000fc3d:	5e                   	pop    esi
c000fc3e:	c3                   	ret    

c000fc3f <Phys::allocateContiguousPages(int)>:
c000fc3f:	57                   	push   edi
c000fc40:	56                   	push   esi
c000fc41:	53                   	push   ebx
c000fc42:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc46:	fa                   	cli    
c000fc47:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c000fc4d:	31 db                	xor    ebx,ebx
c000fc4f:	85 db                	test   ebx,ebx
c000fc51:	75 11                	jne    c000fc64 <Phys::allocateContiguousPages(int)+0x25>
c000fc53:	e8 32 ff ff ff       	call   c000fb8a <Phys::allocatePage()>
c000fc58:	83 fe 01             	cmp    esi,0x1
c000fc5b:	89 c7                	mov    edi,eax
c000fc5d:	74 21                	je     c000fc80 <Phys::allocateContiguousPages(int)+0x41>
c000fc5f:	bb 01 00 00 00       	mov    ebx,0x1
c000fc64:	e8 21 ff ff ff       	call   c000fb8a <Phys::allocatePage()>
c000fc69:	89 da                	mov    edx,ebx
c000fc6b:	c1 e2 0c             	shl    edx,0xc
c000fc6e:	01 fa                	add    edx,edi
c000fc70:	39 c2                	cmp    edx,eax
c000fc72:	74 20                	je     c000fc94 <Phys::allocateContiguousPages(int)+0x55>
c000fc74:	bb 01 00 00 00       	mov    ebx,0x1
c000fc79:	89 c7                	mov    edi,eax
c000fc7b:	83 fe 01             	cmp    esi,0x1
c000fc7e:	75 e4                	jne    c000fc64 <Phys::allocateContiguousPages(int)+0x25>
c000fc80:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c000fc85:	48                   	dec    eax
c000fc86:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c000fc8b:	75 01                	jne    c000fc8e <Phys::allocateContiguousPages(int)+0x4f>
c000fc8d:	fb                   	sti    
c000fc8e:	89 f8                	mov    eax,edi
c000fc90:	5b                   	pop    ebx
c000fc91:	5e                   	pop    esi
c000fc92:	5f                   	pop    edi
c000fc93:	c3                   	ret    
c000fc94:	43                   	inc    ebx
c000fc95:	39 f3                	cmp    ebx,esi
c000fc97:	75 b6                	jne    c000fc4f <Phys::allocateContiguousPages(int)+0x10>
c000fc99:	eb e5                	jmp    c000fc80 <Phys::allocateContiguousPages(int)+0x41>

c000fc9b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fc9b:	56                   	push   esi
c000fc9c:	53                   	push   ebx
c000fc9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fca1:	39 1d 08 f3 02 c0    	cmp    DWORD PTR ds:0xc002f308,ebx
c000fca7:	73 06                	jae    c000fcaf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fca9:	89 1d 08 f3 02 c0    	mov    DWORD PTR ds:0xc002f308,ebx
c000fcaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcb3:	c1 eb 0c             	shr    ebx,0xc
c000fcb6:	c1 e8 0c             	shr    eax,0xc
c000fcb9:	39 d8                	cmp    eax,ebx
c000fcbb:	73 13                	jae    c000fcd0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fcbd:	6a 00                	push   0x0
c000fcbf:	8d 70 01             	lea    esi,[eax+0x1]
c000fcc2:	50                   	push   eax
c000fcc3:	e8 19 fe ff ff       	call   c000fae1 <Phys::setPageState(unsigned long, bool)>
c000fcc8:	5a                   	pop    edx
c000fcc9:	89 f0                	mov    eax,esi
c000fccb:	59                   	pop    ecx
c000fccc:	39 f3                	cmp    ebx,esi
c000fcce:	75 ed                	jne    c000fcbd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fcd0:	5b                   	pop    ebx
c000fcd1:	5e                   	pop    esi
c000fcd2:	c3                   	ret    

c000fcd3 <Phys::physicalMemorySetup(unsigned int)>:
c000fcd3:	55                   	push   ebp
c000fcd4:	57                   	push   edi
c000fcd5:	56                   	push   esi
c000fcd6:	53                   	push   ebx
c000fcd7:	31 db                	xor    ebx,ebx
c000fcd9:	83 ec 40             	sub    esp,0x40
c000fcdc:	6a 30                	push   0x30
c000fcde:	6a 00                	push   0x0
c000fce0:	68 20 f3 02 c0       	push   0xc002f320
c000fce5:	e8 66 0a ff ff       	call   c0000750 <memset>
c000fcea:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fcee:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fcf3:	05 00 10 00 00       	add    eax,0x1000
c000fcf8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fcfc:	83 c4 10             	add    esp,0x10
c000fcff:	83 ec 08             	sub    esp,0x8
c000fd02:	6a 01                	push   0x1
c000fd04:	53                   	push   ebx
c000fd05:	43                   	inc    ebx
c000fd06:	e8 d6 fd ff ff       	call   c000fae1 <Phys::setPageState(unsigned long, bool)>
c000fd0b:	83 c4 10             	add    esp,0x10
c000fd0e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fd14:	75 e9                	jne    c000fcff <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fd16:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fd1d:	66 85 c0             	test   ax,ax
c000fd20:	0f 84 8e 01 00 00    	je     c000feb4 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fd2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fd32:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd36:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fd3b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd3f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fd47:	eb 15                	jmp    c000fd5e <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fd49:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fd4d:	83 c3 18             	add    ebx,0x18
c000fd50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd54:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fd58:	0f 84 66 01 00 00    	je     c000fec4 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd5e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fd61:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fd64:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fd67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd6f:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fd71:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fd74:	01 f0                	add    eax,esi
c000fd76:	55                   	push   ebp
c000fd77:	11 fa                	adc    edx,edi
c000fd79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd7d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fd81:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd85:	56                   	push   esi
c000fd86:	68 dc ab 02 c0       	push   0xc002abdc
c000fd8b:	e8 39 2b 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000fd90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fd94:	83 c4 10             	add    esp,0x10
c000fd97:	09 f8                	or     eax,edi
c000fd99:	0f 85 25 01 00 00    	jne    c000fec4 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd9f:	4d                   	dec    ebp
c000fda0:	75 a7                	jne    c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fda2:	ba 00 00 08 00       	mov    edx,0x80000
c000fda7:	89 c1                	mov    ecx,eax
c000fda9:	39 f2                	cmp    edx,esi
c000fdab:	19 f9                	sbb    ecx,edi
c000fdad:	0f 82 a7 00 00 00    	jb     c000fe5a <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fdb3:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fdb7:	89 c1                	mov    ecx,eax
c000fdb9:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fdbd:	0f 83 97 00 00 00    	jae    c000fe5a <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fdc3:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fdc8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fdcc:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fdd0:	39 fa                	cmp    edx,edi
c000fdd2:	19 e8                	sbb    eax,ebp
c000fdd4:	0f 82 14 01 00 00    	jb     c000feee <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fdda:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fdde:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fde2:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fde8:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fded:	83 d5 ff             	adc    ebp,0xffffffff
c000fdf0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fdf4:	31 c0                	xor    eax,eax
c000fdf6:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fdfa:	39 fa                	cmp    edx,edi
c000fdfc:	89 c1                	mov    ecx,eax
c000fdfe:	19 e9                	sbb    ecx,ebp
c000fe00:	0f 83 43 ff ff ff    	jae    c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe06:	be 00 00 08 00       	mov    esi,0x80000
c000fe0b:	50                   	push   eax
c000fe0c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fe10:	57                   	push   edi
c000fe11:	56                   	push   esi
c000fe12:	68 00 ac 02 c0       	push   0xc002ac00
c000fe17:	e8 ad 2a 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000fe1c:	5a                   	pop    edx
c000fe1d:	59                   	pop    ecx
c000fe1e:	57                   	push   edi
c000fe1f:	56                   	push   esi
c000fe20:	e8 76 fe ff ff       	call   c000fc9b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fe25:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fe29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fe2d:	83 c4 0c             	add    esp,0xc
c000fe30:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fe34:	03 05 14 f3 02 c0    	add    eax,DWORD PTR ds:0xc002f314
c000fe3a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fe41:	a3 14 f3 02 c0       	mov    ds:0xc002f314,eax
c000fe46:	52                   	push   edx
c000fe47:	50                   	push   eax
c000fe48:	68 be ab 02 c0       	push   0xc002abbe
c000fe4d:	e8 77 2a 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c000fe52:	83 c4 10             	add    esp,0x10
c000fe55:	e9 ef fe ff ff       	jmp    c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe5a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fe5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe66:	39 ea                	cmp    edx,ebp
c000fe68:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fe6c:	0f 82 d7 fe ff ff    	jb     c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe72:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fe77:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fe7b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fe7f:	0f 83 c4 fe ff ff    	jae    c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe85:	39 ee                	cmp    esi,ebp
c000fe87:	89 f8                	mov    eax,edi
c000fe89:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fe8d:	0f 83 78 ff ff ff    	jae    c000fe0b <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fe93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fe9b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fe9f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fea3:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fea7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000feab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000feaf:	e9 57 ff ff ff       	jmp    c000fe0b <Phys::physicalMemorySetup(unsigned int)+0x138>
c000feb4:	83 ec 0c             	sub    esp,0xc
c000feb7:	68 b0 ab 02 c0       	push   0xc002abb0
c000febc:	e8 3e a4 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c000fec1:	83 c4 10             	add    esp,0x10
c000fec4:	bb 40 01 00 00       	mov    ebx,0x140
c000fec9:	83 ec 08             	sub    esp,0x8
c000fecc:	6a 00                	push   0x0
c000fece:	53                   	push   ebx
c000fecf:	43                   	inc    ebx
c000fed0:	e8 0c fc ff ff       	call   c000fae1 <Phys::setPageState(unsigned long, bool)>
c000fed5:	ff 05 14 f3 02 c0    	inc    DWORD PTR ds:0xc002f314
c000fedb:	83 c4 10             	add    esp,0x10
c000fede:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fee4:	75 e3                	jne    c000fec9 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fee6:	83 c4 3c             	add    esp,0x3c
c000fee9:	5b                   	pop    ebx
c000feea:	5e                   	pop    esi
c000feeb:	5f                   	pop    edi
c000feec:	5d                   	pop    ebp
c000feed:	c3                   	ret    
c000feee:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fef6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fefe:	e9 d7 fe ff ff       	jmp    c000fdda <Phys::physicalMemorySetup(unsigned int)+0x107>
c000ff03:	90                   	nop

c000ff04 <Pipe::isAtty()>:
c000ff04:	31 c0                	xor    eax,eax
c000ff06:	c3                   	ret    
c000ff07:	90                   	nop

c000ff08 <Pipe::~Pipe()>:
c000ff08:	83 ec 0c             	sub    esp,0xc
c000ff0b:	ba 6c ac 02 c0       	mov    edx,0xc002ac6c
c000ff10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff14:	89 10                	mov    DWORD PTR [eax],edx
c000ff16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff1a:	83 ec 0c             	sub    esp,0xc
c000ff1d:	50                   	push   eax
c000ff1e:	e8 3f 13 00 00       	call   c0011262 <UnixFile::~UnixFile()>
c000ff23:	83 c4 10             	add    esp,0x10
c000ff26:	90                   	nop
c000ff27:	83 c4 0c             	add    esp,0xc
c000ff2a:	c3                   	ret    
c000ff2b:	90                   	nop

c000ff2c <Pipe::~Pipe()>:
c000ff2c:	83 ec 0c             	sub    esp,0xc
c000ff2f:	83 ec 0c             	sub    esp,0xc
c000ff32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff36:	e8 cd ff ff ff       	call   c000ff08 <Pipe::~Pipe()>
c000ff3b:	83 c4 10             	add    esp,0x10
c000ff3e:	83 ec 08             	sub    esp,0x8
c000ff41:	6a 20                	push   0x20
c000ff43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff47:	e8 9d 28 00 00       	call   c00127e9 <operator delete(void*, unsigned long)>
c000ff4c:	83 c4 10             	add    esp,0x10
c000ff4f:	83 c4 0c             	add    esp,0xc
c000ff52:	c3                   	ret    
c000ff53:	90                   	nop

c000ff54 <Pipe::read(unsigned long long, void*, int*)>:
c000ff54:	55                   	push   ebp
c000ff55:	57                   	push   edi
c000ff56:	56                   	push   esi
c000ff57:	53                   	push   ebx
c000ff58:	83 ec 1c             	sub    esp,0x1c
c000ff5b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ff5f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ff63:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ff67:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000ff6a:	89 c8                	mov    eax,ecx
c000ff6c:	99                   	cdq    
c000ff6d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000ff71:	74 24                	je     c000ff97 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000ff73:	39 f9                	cmp    ecx,edi
c000ff75:	89 d1                	mov    ecx,edx
c000ff77:	19 f1                	sbb    ecx,esi
c000ff79:	73 1c                	jae    c000ff97 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000ff7b:	fa                   	cli    
c000ff7c:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c000ff82:	e8 2b e1 00 00       	call   c001e0b2 <schedule()>
c000ff87:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c000ff8c:	48                   	dec    eax
c000ff8d:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c000ff92:	75 d3                	jne    c000ff67 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ff94:	fb                   	sti    
c000ff95:	eb d0                	jmp    c000ff67 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ff97:	39 f8                	cmp    eax,edi
c000ff99:	89 d1                	mov    ecx,edx
c000ff9b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ff9e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ffa2:	19 f1                	sbb    ecx,esi
c000ffa4:	73 07                	jae    c000ffad <Pipe::read(unsigned long long, void*, int*)+0x59>
c000ffa6:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffa9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ffad:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000ffb0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000ffb3:	29 f7                	sub    edi,esi
c000ffb5:	89 f8                	mov    eax,edi
c000ffb7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ffbb:	99                   	cdq    
c000ffbc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000ffbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffc3:	19 d0                	sbb    eax,edx
c000ffc5:	73 07                	jae    c000ffce <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000ffc7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ffca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ffce:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000ffd1:	89 ea                	mov    edx,ebp
c000ffd3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000ffd7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ffdc:	74 0d                	je     c000ffeb <Pipe::read(unsigned long long, void*, int*)+0x97>
c000ffde:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ffe1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ffe5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffe9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffeb:	85 d2                	test   edx,edx
c000ffed:	74 11                	je     c0010000 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000ffef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fff3:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fff6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fffa:	89 d1                	mov    ecx,edx
c000fffc:	89 c7                	mov    edi,eax
c000fffe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010000:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010003:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010006:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010009:	99                   	cdq    
c001000a:	89 f7                	mov    edi,esi
c001000c:	03 04 24             	add    eax,DWORD PTR [esp]
c001000f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010013:	c1 ff 1f             	sar    edi,0x1f
c0010016:	57                   	push   edi
c0010017:	56                   	push   esi
c0010018:	52                   	push   edx
c0010019:	50                   	push   eax
c001001a:	e8 d5 72 01 00       	call   c00272f4 <__umoddi3>
c001001f:	83 c4 10             	add    esp,0x10
c0010022:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010025:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001002a:	75 10                	jne    c001003c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c001002c:	83 ec 0c             	sub    esp,0xc
c001002f:	68 29 ac 02 c0       	push   0xc002ac29
c0010034:	e8 c6 a2 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0010039:	83 c4 10             	add    esp,0x10
c001003c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010040:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010043:	89 10                	mov    DWORD PTR [eax],edx
c0010045:	83 c4 1c             	add    esp,0x1c
c0010048:	31 c0                	xor    eax,eax
c001004a:	5b                   	pop    ebx
c001004b:	5e                   	pop    esi
c001004c:	5f                   	pop    edi
c001004d:	5d                   	pop    ebp
c001004e:	c3                   	ret    
c001004f:	90                   	nop

c0010050 <Pipe::write(unsigned long long, void*, int*)>:
c0010050:	55                   	push   ebp
c0010051:	57                   	push   edi
c0010052:	56                   	push   esi
c0010053:	53                   	push   ebx
c0010054:	83 ec 1c             	sub    esp,0x1c
c0010057:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001005b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001005f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010062:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010066:	89 04 24             	mov    DWORD PTR [esp],eax
c0010069:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001006d:	89 d8                	mov    eax,ebx
c001006f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010072:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010076:	89 d6                	mov    esi,edx
c0010078:	89 d7                	mov    edi,edx
c001007a:	c1 ff 1f             	sar    edi,0x1f
c001007d:	03 34 24             	add    esi,DWORD PTR [esp]
c0010080:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010084:	c1 f8 1f             	sar    eax,0x1f
c0010087:	39 f3                	cmp    ebx,esi
c0010089:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001008d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010091:	19 f8                	sbb    eax,edi
c0010093:	b8 01 00 00 00       	mov    eax,0x1
c0010098:	72 6e                	jb     c0010108 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c001009a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001009d:	01 d0                	add    eax,edx
c001009f:	99                   	cdq    
c00100a0:	f7 fb                	idiv   ebx
c00100a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100a6:	29 d3                	sub    ebx,edx
c00100a8:	89 d7                	mov    edi,edx
c00100aa:	89 de                	mov    esi,ebx
c00100ac:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00100af:	c1 fb 1f             	sar    ebx,0x1f
c00100b2:	39 f2                	cmp    edx,esi
c00100b4:	19 d8                	sbb    eax,ebx
c00100b6:	b8 00 00 00 00       	mov    eax,0x0
c00100bb:	72 04                	jb     c00100c1 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00100bd:	89 d0                	mov    eax,edx
c00100bf:	29 f0                	sub    eax,esi
c00100c1:	89 d3                	mov    ebx,edx
c00100c3:	29 c3                	sub    ebx,eax
c00100c5:	74 0b                	je     c00100d2 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00100c7:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00100ca:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00100ce:	89 d9                	mov    ecx,ebx
c00100d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100d2:	85 c0                	test   eax,eax
c00100d4:	74 0d                	je     c00100e3 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00100d6:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00100da:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00100dd:	89 de                	mov    esi,ebx
c00100df:	89 c1                	mov    ecx,eax
c00100e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100e3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00100e6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00100eb:	75 10                	jne    c00100fd <Pipe::write(unsigned long long, void*, int*)+0xad>
c00100ed:	83 ec 0c             	sub    esp,0xc
c00100f0:	68 45 ac 02 c0       	push   0xc002ac45
c00100f5:	e8 05 a2 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c00100fa:	83 c4 10             	add    esp,0x10
c00100fd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010101:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010104:	89 08                	mov    DWORD PTR [eax],ecx
c0010106:	31 c0                	xor    eax,eax
c0010108:	83 c4 1c             	add    esp,0x1c
c001010b:	5b                   	pop    ebx
c001010c:	5e                   	pop    esi
c001010d:	5f                   	pop    edi
c001010e:	5d                   	pop    ebp
c001010f:	c3                   	ret    

c0010110 <Pipe::Pipe(int)>:
c0010110:	83 ec 0c             	sub    esp,0xc
c0010113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010117:	83 ec 08             	sub    esp,0x8
c001011a:	6a 00                	push   0x0
c001011c:	50                   	push   eax
c001011d:	e8 5e 0f 00 00       	call   c0011080 <UnixFile::UnixFile(int)>
c0010122:	83 c4 10             	add    esp,0x10
c0010125:	ba 6c ac 02 c0       	mov    edx,0xc002ac6c
c001012a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001012e:	89 10                	mov    DWORD PTR [eax],edx
c0010130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010134:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010138:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001013b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001013f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001014a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010151:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010155:	83 ec 0c             	sub    esp,0xc
c0010158:	50                   	push   eax
c0010159:	e8 2e f7 ff ff       	call   c000f88c <malloc>
c001015e:	83 c4 10             	add    esp,0x10
c0010161:	89 c2                	mov    edx,eax
c0010163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010167:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001016a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001016e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010172:	90                   	nop
c0010173:	83 c4 0c             	add    esp,0xc
c0010176:	c3                   	ret    
c0010177:	90                   	nop

c0010178 <VgaText::isAtty()>:
c0010178:	b0 01                	mov    al,0x1
c001017a:	c3                   	ret    
c001017b:	90                   	nop

c001017c <VgaText::~VgaText()>:
c001017c:	83 ec 0c             	sub    esp,0xc
c001017f:	ba 28 ad 02 c0       	mov    edx,0xc002ad28
c0010184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010188:	89 10                	mov    DWORD PTR [eax],edx
c001018a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001018e:	83 ec 0c             	sub    esp,0xc
c0010191:	50                   	push   eax
c0010192:	e8 cb 10 00 00       	call   c0011262 <UnixFile::~UnixFile()>
c0010197:	83 c4 10             	add    esp,0x10
c001019a:	90                   	nop
c001019b:	83 c4 0c             	add    esp,0xc
c001019e:	c3                   	ret    
c001019f:	90                   	nop

c00101a0 <VgaText::~VgaText()>:
c00101a0:	83 ec 0c             	sub    esp,0xc
c00101a3:	83 ec 0c             	sub    esp,0xc
c00101a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101aa:	e8 cd ff ff ff       	call   c001017c <VgaText::~VgaText()>
c00101af:	83 c4 10             	add    esp,0x10
c00101b2:	83 ec 08             	sub    esp,0x8
c00101b5:	68 c4 02 00 00       	push   0x2c4
c00101ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101be:	e8 26 26 00 00       	call   c00127e9 <operator delete(void*, unsigned long)>
c00101c3:	83 c4 10             	add    esp,0x10
c00101c6:	83 c4 0c             	add    esp,0xc
c00101c9:	c3                   	ret    

c00101ca <VgaText::read(unsigned long long, void*, int*)>:
c00101ca:	83 ec 10             	sub    esp,0x10
c00101cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00101d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101d9:	e8 a0 5b 00 00       	call   c0015d7e <readKeyboard(VgaText*, char*, unsigned long)>
c00101de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00101e2:	89 02                	mov    DWORD PTR [edx],eax
c00101e4:	31 c0                	xor    eax,eax
c00101e6:	83 c4 1c             	add    esp,0x1c
c00101e9:	c3                   	ret    

c00101ea <setTerminalScrollLock(bool)>:
c00101ea:	c3                   	ret    

c00101eb <addToTerminalCycle(VgaText*)>:
c00101eb:	8b 15 80 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f380
c00101f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101f5:	85 d2                	test   edx,edx
c00101f7:	75 09                	jne    c0010202 <addToTerminalCycle(VgaText*)+0x17>
c00101f9:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c00101fc:	a3 80 f3 02 c0       	mov    ds:0xc002f380,eax
c0010201:	c3                   	ret    
c0010202:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010205:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010208:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c001020b:	c3                   	ret    

c001020c <installVgaTextImplementation()>:
c001020c:	83 ec 10             	sub    esp,0x10
c001020f:	6a 20                	push   0x20
c0010211:	6a 00                	push   0x0
c0010213:	68 60 f3 02 c0       	push   0xc002f360
c0010218:	e8 33 05 ff ff       	call   c0000750 <memset>
c001021d:	83 c4 1c             	add    esp,0x1c
c0010220:	c3                   	ret    

c0010221 <scrollTerminalScrollLock(int)>:
c0010221:	c3                   	ret    

c0010222 <VgaText::updateTitle()>:
c0010222:	53                   	push   ebx
c0010223:	31 c0                	xor    eax,eax
c0010225:	83 ec 58             	sub    esp,0x58
c0010228:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001022c:	89 e1                	mov    ecx,esp
c001022e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010232:	40                   	inc    eax
c0010233:	83 f8 50             	cmp    eax,0x50
c0010236:	75 f6                	jne    c001022e <VgaText::updateTitle()+0xc>
c0010238:	31 c0                	xor    eax,eax
c001023a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010241:	84 db                	test   bl,bl
c0010243:	74 06                	je     c001024b <VgaText::updateTitle()+0x29>
c0010245:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010248:	40                   	inc    eax
c0010249:	eb ef                	jmp    c001023a <VgaText::updateTitle()+0x18>
c001024b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c001024e:	85 c0                	test   eax,eax
c0010250:	74 09                	je     c001025b <VgaText::updateTitle()+0x39>
c0010252:	53                   	push   ebx
c0010253:	53                   	push   ebx
c0010254:	51                   	push   ecx
c0010255:	52                   	push   edx
c0010256:	ff d0                	call   eax
c0010258:	83 c4 10             	add    esp,0x10
c001025b:	83 c4 58             	add    esp,0x58
c001025e:	5b                   	pop    ebx
c001025f:	c3                   	ret    

c0010260 <VgaText::load()>:
c0010260:	53                   	push   ebx
c0010261:	31 c0                	xor    eax,eax
c0010263:	83 ec 58             	sub    esp,0x58
c0010266:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001026a:	89 e2                	mov    edx,esp
c001026c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010270:	40                   	inc    eax
c0010271:	83 f8 50             	cmp    eax,0x50
c0010274:	75 f6                	jne    c001026c <VgaText::load()+0xc>
c0010276:	31 c0                	xor    eax,eax
c0010278:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001027f:	84 c9                	test   cl,cl
c0010281:	74 06                	je     c0010289 <VgaText::load()+0x29>
c0010283:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010286:	40                   	inc    eax
c0010287:	eb ef                	jmp    c0010278 <VgaText::load()+0x18>
c0010289:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c001028c:	85 c0                	test   eax,eax
c001028e:	74 09                	je     c0010299 <VgaText::load()+0x39>
c0010290:	51                   	push   ecx
c0010291:	51                   	push   ecx
c0010292:	52                   	push   edx
c0010293:	53                   	push   ebx
c0010294:	ff d0                	call   eax
c0010296:	83 c4 10             	add    esp,0x10
c0010299:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c001029c:	85 c0                	test   eax,eax
c001029e:	74 09                	je     c00102a9 <VgaText::load()+0x49>
c00102a0:	83 ec 0c             	sub    esp,0xc
c00102a3:	53                   	push   ebx
c00102a4:	ff d0                	call   eax
c00102a6:	83 c4 10             	add    esp,0x10
c00102a9:	83 c4 58             	add    esp,0x58
c00102ac:	5b                   	pop    ebx
c00102ad:	c3                   	ret    

c00102ae <VgaText::updateCursor()>:
c00102ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102b2:	39 05 84 f3 02 c0    	cmp    DWORD PTR ds:0xc002f384,eax
c00102b8:	75 09                	jne    c00102c3 <VgaText::updateCursor()+0x15>
c00102ba:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00102bd:	85 c0                	test   eax,eax
c00102bf:	74 02                	je     c00102c3 <VgaText::updateCursor()+0x15>
c00102c1:	ff e0                	jmp    eax
c00102c3:	c3                   	ret    

c00102c4 <VgaText::showCursor(bool)>:
c00102c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102cc:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00102cf:	c3                   	ret    

c00102d0 <VgaText::disableBlink(bool)>:
c00102d0:	56                   	push   esi
c00102d1:	53                   	push   ebx
c00102d2:	51                   	push   ecx
c00102d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102d7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00102db:	39 1d 84 f3 02 c0    	cmp    DWORD PTR ds:0xc002f384,ebx
c00102e1:	75 15                	jne    c00102f8 <VgaText::disableBlink(bool)+0x28>
c00102e3:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c00102e6:	85 c0                	test   eax,eax
c00102e8:	74 0e                	je     c00102f8 <VgaText::disableBlink(bool)+0x28>
c00102ea:	89 f1                	mov    ecx,esi
c00102ec:	52                   	push   edx
c00102ed:	52                   	push   edx
c00102ee:	0f b6 d1             	movzx  edx,cl
c00102f1:	52                   	push   edx
c00102f2:	53                   	push   ebx
c00102f3:	ff d0                	call   eax
c00102f5:	83 c4 10             	add    esp,0x10
c00102f8:	89 f0                	mov    eax,esi
c00102fa:	83 f0 01             	xor    eax,0x1
c00102fd:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c0010300:	58                   	pop    eax
c0010301:	5b                   	pop    ebx
c0010302:	5e                   	pop    esi
c0010303:	c3                   	ret    

c0010304 <VgaText::doANSI_SGR(int)>:
c0010304:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001030c:	85 d2                	test   edx,edx
c001030e:	75 0b                	jne    c001031b <VgaText::doANSI_SGR(int)+0x17>
c0010310:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010313:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010316:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010319:	eb 59                	jmp    c0010374 <VgaText::doANSI_SGR(int)+0x70>
c001031b:	83 fa 07             	cmp    edx,0x7
c001031e:	75 0b                	jne    c001032b <VgaText::doANSI_SGR(int)+0x27>
c0010320:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010323:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010326:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010329:	eb 49                	jmp    c0010374 <VgaText::doANSI_SGR(int)+0x70>
c001032b:	83 fa 1b             	cmp    edx,0x1b
c001032e:	74 e0                	je     c0010310 <VgaText::doANSI_SGR(int)+0xc>
c0010330:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010333:	83 f9 07             	cmp    ecx,0x7
c0010336:	77 09                	ja     c0010341 <VgaText::doANSI_SGR(int)+0x3d>
c0010338:	8b 14 8d 20 e2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1de0]
c001033f:	eb 20                	jmp    c0010361 <VgaText::doANSI_SGR(int)+0x5d>
c0010341:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010344:	83 f9 07             	cmp    ecx,0x7
c0010347:	77 09                	ja     c0010352 <VgaText::doANSI_SGR(int)+0x4e>
c0010349:	8b 14 8d 20 e2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1de0]
c0010350:	eb 22                	jmp    c0010374 <VgaText::doANSI_SGR(int)+0x70>
c0010352:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010355:	83 f9 07             	cmp    ecx,0x7
c0010358:	77 0b                	ja     c0010365 <VgaText::doANSI_SGR(int)+0x61>
c001035a:	8b 14 95 d8 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f28]
c0010361:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010364:	c3                   	ret    
c0010365:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010368:	83 f9 07             	cmp    ecx,0x7
c001036b:	77 0a                	ja     c0010377 <VgaText::doANSI_SGR(int)+0x73>
c001036d:	8b 14 95 b0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f50]
c0010374:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010377:	c3                   	ret    

c0010378 <VgaText::setDefaultBgColour(VgaColour)>:
c0010378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001037c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010380:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010383:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010386:	c3                   	ret    
c0010387:	90                   	nop

c0010388 <VgaText::setDefaultFgColour(VgaColour)>:
c0010388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001038c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010390:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010393:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010396:	c3                   	ret    
c0010397:	90                   	nop

c0010398 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010398:	53                   	push   ebx
c0010399:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001039d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00103a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00103a5:	51                   	push   ecx
c00103a6:	e8 cd ff ff ff       	call   c0010378 <VgaText::setDefaultBgColour(VgaColour)>
c00103ab:	58                   	pop    eax
c00103ac:	5a                   	pop    edx
c00103ad:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00103b1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00103b5:	5b                   	pop    ebx
c00103b6:	eb d0                	jmp    c0010388 <VgaText::setDefaultFgColour(VgaColour)>

c00103b8 <VgaText::setTitleTextColour(VgaColour)>:
c00103b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103c0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00103c3:	e9 5a fe ff ff       	jmp    c0010222 <VgaText::updateTitle()>

c00103c8 <VgaText::setTitleColour(VgaColour)>:
c00103c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103d0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00103d3:	e9 4a fe ff ff       	jmp    c0010222 <VgaText::updateTitle()>

c00103d8 <VgaText::setTitle(char*)>:
c00103d8:	53                   	push   ebx
c00103d9:	83 ec 10             	sub    esp,0x10
c00103dc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00103e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103e4:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c00103ea:	50                   	push   eax
c00103eb:	e8 1c 04 ff ff       	call   c000080c <strcpy>
c00103f0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00103f4:	83 c4 18             	add    esp,0x18
c00103f7:	5b                   	pop    ebx
c00103f8:	e9 25 fe ff ff       	jmp    c0010222 <VgaText::updateTitle()>
c00103fd:	90                   	nop

c00103fe <VgaText::combineColours(unsigned char, unsigned char)>:
c00103fe:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010402:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010407:	83 e0 0f             	and    eax,0xf
c001040a:	c1 e2 04             	shl    edx,0x4
c001040d:	09 d0                	or     eax,edx
c001040f:	c3                   	ret    

c0010410 <VgaText::scrollScreen()>:
c0010410:	55                   	push   ebp
c0010411:	b9 01 00 00 00       	mov    ecx,0x1
c0010416:	57                   	push   edi
c0010417:	56                   	push   esi
c0010418:	53                   	push   ebx
c0010419:	83 ec 0c             	sub    esp,0xc
c001041c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010420:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010426:	31 ff                	xor    edi,edi
c0010428:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001042b:	83 f9 17             	cmp    ecx,0x17
c001042e:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010431:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010438:	75 27                	jne    c0010461 <VgaText::scrollScreen()+0x51>
c001043a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001043d:	01 f5                	add    ebp,esi
c001043f:	f7 c7 01 00 00 00    	test   edi,0x1
c0010445:	74 16                	je     c001045d <VgaText::scrollScreen()+0x4d>
c0010447:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001044b:	50                   	push   eax
c001044c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010450:	50                   	push   eax
c0010451:	e8 a8 ff ff ff       	call   c00103fe <VgaText::combineColours(unsigned char, unsigned char)>
c0010456:	5a                   	pop    edx
c0010457:	5a                   	pop    edx
c0010458:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c001045b:	eb 04                	jmp    c0010461 <VgaText::scrollScreen()+0x51>
c001045d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010461:	47                   	inc    edi
c0010462:	46                   	inc    esi
c0010463:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010469:	75 bd                	jne    c0010428 <VgaText::scrollScreen()+0x18>
c001046b:	41                   	inc    ecx
c001046c:	83 f9 18             	cmp    ecx,0x18
c001046f:	75 af                	jne    c0010420 <VgaText::scrollScreen()+0x10>
c0010471:	39 1d 84 f3 02 c0    	cmp    DWORD PTR ds:0xc002f384,ebx
c0010477:	75 1b                	jne    c0010494 <VgaText::scrollScreen()+0x84>
c0010479:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001047d:	74 05                	je     c0010484 <VgaText::scrollScreen()+0x74>
c001047f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010482:	eb 10                	jmp    c0010494 <VgaText::scrollScreen()+0x84>
c0010484:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010487:	85 c0                	test   eax,eax
c0010489:	74 09                	je     c0010494 <VgaText::scrollScreen()+0x84>
c001048b:	83 ec 0c             	sub    esp,0xc
c001048e:	53                   	push   ebx
c001048f:	ff d0                	call   eax
c0010491:	83 c4 10             	add    esp,0x10
c0010494:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010498:	83 c4 0c             	add    esp,0xc
c001049b:	5b                   	pop    ebx
c001049c:	5e                   	pop    esi
c001049d:	5f                   	pop    edi
c001049e:	5d                   	pop    ebp
c001049f:	e9 0a fe ff ff       	jmp    c00102ae <VgaText::updateCursor()>

c00104a4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00104a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00104a9:	c1 e0 08             	shl    eax,0x8
c00104ac:	89 c2                	mov    edx,eax
c00104ae:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00104b3:	09 d0                	or     eax,edx
c00104b5:	c3                   	ret    

c00104b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00104b6:	56                   	push   esi
c00104b7:	53                   	push   ebx
c00104b8:	51                   	push   ecx
c00104b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00104bd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00104c2:	50                   	push   eax
c00104c3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00104c8:	50                   	push   eax
c00104c9:	e8 30 ff ff ff       	call   c00103fe <VgaText::combineColours(unsigned char, unsigned char)>
c00104ce:	5b                   	pop    ebx
c00104cf:	0f b6 c0             	movzx  eax,al
c00104d2:	5e                   	pop    esi
c00104d3:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00104d8:	50                   	push   eax
c00104d9:	53                   	push   ebx
c00104da:	e8 c5 ff ff ff       	call   c00104a4 <VgaText::combineCharAndColour(char, unsigned char)>
c00104df:	5a                   	pop    edx
c00104e0:	5e                   	pop    esi
c00104e1:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00104e4:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00104ea:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00104ee:	0f b7 d2             	movzx  edx,dx
c00104f1:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00104f5:	39 0d 84 f3 02 c0    	cmp    DWORD PTR ds:0xc002f384,ecx
c00104fb:	75 10                	jne    c001050d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00104fd:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010500:	85 c0                	test   eax,eax
c0010502:	74 09                	je     c001050d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010504:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010508:	5a                   	pop    edx
c0010509:	5b                   	pop    ebx
c001050a:	5e                   	pop    esi
c001050b:	ff e0                	jmp    eax
c001050d:	58                   	pop    eax
c001050e:	5b                   	pop    ebx
c001050f:	5e                   	pop    esi
c0010510:	c3                   	ret    
c0010511:	90                   	nop

c0010512 <VgaText::getCursorX()>:
c0010512:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010516:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010519:	c3                   	ret    

c001051a <VgaText::getCursorY()>:
c001051a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001051e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010521:	c3                   	ret    

c0010522 <VgaText::setCursor(int, int)>:
c0010522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010526:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001052a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001052d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010531:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010534:	e9 75 fd ff ff       	jmp    c00102ae <VgaText::updateCursor()>
c0010539:	90                   	nop

c001053a <VgaText::setCursorX(int)>:
c001053a:	83 ec 10             	sub    esp,0x10
c001053d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010541:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010548:	50                   	push   eax
c0010549:	e8 d4 ff ff ff       	call   c0010522 <VgaText::setCursor(int, int)>
c001054e:	83 c4 1c             	add    esp,0x1c
c0010551:	c3                   	ret    

c0010552 <VgaText::setCursorY(int)>:
c0010552:	83 ec 10             	sub    esp,0x10
c0010555:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010559:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001055d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010560:	50                   	push   eax
c0010561:	e8 bc ff ff ff       	call   c0010522 <VgaText::setCursor(int, int)>
c0010566:	83 c4 1c             	add    esp,0x1c
c0010569:	c3                   	ret    

c001056a <VgaText::incrementCursor(bool)>:
c001056a:	56                   	push   esi
c001056b:	53                   	push   ebx
c001056c:	51                   	push   ecx
c001056d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010571:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010575:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010578:	40                   	inc    eax
c0010579:	83 f8 50             	cmp    eax,0x50
c001057c:	74 05                	je     c0010583 <VgaText::incrementCursor(bool)+0x19>
c001057e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010581:	eb 24                	jmp    c00105a7 <VgaText::incrementCursor(bool)+0x3d>
c0010583:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010586:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001058d:	8d 50 01             	lea    edx,[eax+0x1]
c0010590:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010593:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010596:	75 0f                	jne    c00105a7 <VgaText::incrementCursor(bool)+0x3d>
c0010598:	83 ec 0c             	sub    esp,0xc
c001059b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001059e:	53                   	push   ebx
c001059f:	e8 6c fe ff ff       	call   c0010410 <VgaText::scrollScreen()>
c00105a4:	83 c4 10             	add    esp,0x10
c00105a7:	89 f0                	mov    eax,esi
c00105a9:	84 c0                	test   al,al
c00105ab:	74 0c                	je     c00105b9 <VgaText::incrementCursor(bool)+0x4f>
c00105ad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00105b1:	5a                   	pop    edx
c00105b2:	5b                   	pop    ebx
c00105b3:	5e                   	pop    esi
c00105b4:	e9 f5 fc ff ff       	jmp    c00102ae <VgaText::updateCursor()>
c00105b9:	58                   	pop    eax
c00105ba:	5b                   	pop    ebx
c00105bb:	5e                   	pop    esi
c00105bc:	c3                   	ret    
c00105bd:	90                   	nop

c00105be <VgaText::decrementCursor(bool)>:
c00105be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00105c2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00105c6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00105c9:	85 c0                	test   eax,eax
c00105cb:	74 04                	je     c00105d1 <VgaText::decrementCursor(bool)+0x13>
c00105cd:	48                   	dec    eax
c00105ce:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00105d1:	84 c9                	test   cl,cl
c00105d3:	74 09                	je     c00105de <VgaText::decrementCursor(bool)+0x20>
c00105d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00105d9:	e9 d0 fc ff ff       	jmp    c00102ae <VgaText::updateCursor()>
c00105de:	c3                   	ret    
c00105df:	90                   	nop

c00105e0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00105e0:	53                   	push   ebx
c00105e1:	83 ec 08             	sub    esp,0x8
c00105e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00105e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00105f0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00105f4:	3c 07                	cmp    al,0x7
c00105f6:	75 2a                	jne    c0010622 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00105f8:	a1 38 f4 02 c0       	mov    eax,ds:0xc002f438
c00105fd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010605:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001060d:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010619:	83 c4 08             	add    esp,0x8
c001061c:	5b                   	pop    ebx
c001061d:	e9 b4 30 00 00       	jmp    c00136d6 <Buzzer::beep(int, int, bool)>
c0010622:	3c 0d                	cmp    al,0xd
c0010624:	75 09                	jne    c001062f <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010626:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001062d:	eb 2c                	jmp    c001065b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c001062f:	3c 0a                	cmp    al,0xa
c0010631:	75 31                	jne    c0010664 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010633:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010636:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001063d:	8d 50 01             	lea    edx,[eax+0x1]
c0010640:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010643:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010646:	75 0f                	jne    c0010657 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010648:	83 ec 0c             	sub    esp,0xc
c001064b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001064e:	53                   	push   ebx
c001064f:	e8 bc fd ff ff       	call   c0010410 <VgaText::scrollScreen()>
c0010654:	83 c4 10             	add    esp,0x10
c0010657:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001065b:	83 c4 08             	add    esp,0x8
c001065e:	5b                   	pop    ebx
c001065f:	e9 4a fc ff ff       	jmp    c00102ae <VgaText::updateCursor()>
c0010664:	3c 08                	cmp    al,0x8
c0010666:	75 25                	jne    c001068d <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010668:	50                   	push   eax
c0010669:	50                   	push   eax
c001066a:	6a 01                	push   0x1
c001066c:	53                   	push   ebx
c001066d:	e8 4c ff ff ff       	call   c00105be <VgaText::decrementCursor(bool)>
c0010672:	5a                   	pop    edx
c0010673:	59                   	pop    ecx
c0010674:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010677:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001067a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001067d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010680:	6a 20                	push   0x20
c0010682:	53                   	push   ebx
c0010683:	e8 2e fe ff ff       	call   c00104b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010688:	83 c4 28             	add    esp,0x28
c001068b:	5b                   	pop    ebx
c001068c:	c3                   	ret    
c001068d:	83 ec 08             	sub    esp,0x8
c0010690:	0f be c0             	movsx  eax,al
c0010693:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010696:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010699:	51                   	push   ecx
c001069a:	52                   	push   edx
c001069b:	50                   	push   eax
c001069c:	53                   	push   ebx
c001069d:	e8 14 fe ff ff       	call   c00104b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00106a2:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00106a6:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00106ae:	83 c4 28             	add    esp,0x28
c00106b1:	5b                   	pop    ebx
c00106b2:	e9 b3 fe ff ff       	jmp    c001056a <VgaText::incrementCursor(bool)>
c00106b7:	90                   	nop

c00106b8 <VgaText::isShowingCursor()>:
c00106b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106bc:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00106bf:	c3                   	ret    

c00106c0 <VgaText::isBlinkDisabled()>:
c00106c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106c4:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c00106c7:	83 f0 01             	xor    eax,0x1
c00106ca:	c3                   	ret    
c00106cb:	90                   	nop

c00106cc <VgaText::setCursorHeight(int)>:
c00106cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106d4:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00106d7:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c00106db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00106df:	e9 e0 fb ff ff       	jmp    c00102c4 <VgaText::showCursor(bool)>

c00106e4 <VgaText::getCursorHeight()>:
c00106e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106e8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00106eb:	c3                   	ret    

c00106ec <setActiveTerminal(VgaText*)>:
c00106ec:	53                   	push   ebx
c00106ed:	83 ec 08             	sub    esp,0x8
c00106f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106f4:	85 db                	test   ebx,ebx
c00106f6:	75 11                	jne    c0010709 <setActiveTerminal(VgaText*)+0x1d>
c00106f8:	c7 44 24 10 80 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac80
c0010700:	83 c4 08             	add    esp,0x8
c0010703:	5b                   	pop    ebx
c0010704:	e9 f6 9b 00 00       	jmp    c001a2ff <Krnl::panic(char const*)>
c0010709:	50                   	push   eax
c001070a:	50                   	push   eax
c001070b:	53                   	push   ebx
c001070c:	68 8e ac 02 c0       	push   0xc002ac8e
c0010711:	e8 b3 21 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0010716:	a1 84 f3 02 c0       	mov    eax,ds:0xc002f384
c001071b:	83 c4 10             	add    esp,0x10
c001071e:	85 c0                	test   eax,eax
c0010720:	74 0c                	je     c001072e <setActiveTerminal(VgaText*)+0x42>
c0010722:	83 ec 0c             	sub    esp,0xc
c0010725:	50                   	push   eax
c0010726:	e8 83 fb ff ff       	call   c00102ae <VgaText::updateCursor()>
c001072b:	83 c4 10             	add    esp,0x10
c001072e:	89 1d 84 f3 02 c0    	mov    DWORD PTR ds:0xc002f384,ebx
c0010734:	51                   	push   ecx
c0010735:	51                   	push   ecx
c0010736:	53                   	push   ebx
c0010737:	68 a6 ac 02 c0       	push   0xc002aca6
c001073c:	e8 88 21 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0010741:	83 c4 0c             	add    esp,0xc
c0010744:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010747:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001074a:	53                   	push   ebx
c001074b:	e8 d2 fd ff ff       	call   c0010522 <VgaText::setCursor(int, int)>
c0010750:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010753:	e8 68 ff ff ff       	call   c00106c0 <VgaText::isBlinkDisabled()>
c0010758:	5a                   	pop    edx
c0010759:	0f b6 c0             	movzx  eax,al
c001075c:	59                   	pop    ecx
c001075d:	50                   	push   eax
c001075e:	53                   	push   ebx
c001075f:	e8 6c fb ff ff       	call   c00102d0 <VgaText::disableBlink(bool)>
c0010764:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010767:	e8 78 ff ff ff       	call   c00106e4 <VgaText::getCursorHeight()>
c001076c:	5a                   	pop    edx
c001076d:	59                   	pop    ecx
c001076e:	50                   	push   eax
c001076f:	53                   	push   ebx
c0010770:	e8 57 ff ff ff       	call   c00106cc <VgaText::setCursorHeight(int)>
c0010775:	83 c4 10             	add    esp,0x10
c0010778:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001077c:	75 07                	jne    c0010785 <setActiveTerminal(VgaText*)+0x99>
c001077e:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010785:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010789:	83 c4 08             	add    esp,0x8
c001078c:	5b                   	pop    ebx
c001078d:	e9 ce fa ff ff       	jmp    c0010260 <VgaText::load()>

c0010792 <doTerminalCycle()>:
c0010792:	83 ec 18             	sub    esp,0x18
c0010795:	a1 80 f3 02 c0       	mov    eax,ds:0xc002f380
c001079a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001079d:	50                   	push   eax
c001079e:	a3 80 f3 02 c0       	mov    ds:0xc002f380,eax
c00107a3:	e8 44 ff ff ff       	call   c00106ec <setActiveTerminal(VgaText*)>
c00107a8:	83 c4 1c             	add    esp,0x1c
c00107ab:	c3                   	ret    

c00107ac <VgaText::doUpdate()>:
c00107ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107b0:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00107b3:	85 c0                	test   eax,eax
c00107b5:	74 02                	je     c00107b9 <VgaText::doUpdate()+0xd>
c00107b7:	ff e0                	jmp    eax
c00107b9:	c3                   	ret    

c00107ba <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00107ba:	55                   	push   ebp
c00107bb:	31 ed                	xor    ebp,ebp
c00107bd:	57                   	push   edi
c00107be:	56                   	push   esi
c00107bf:	53                   	push   ebx
c00107c0:	83 ec 1c             	sub    esp,0x1c
c00107c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00107c7:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00107cc:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00107d3:	50                   	push   eax
c00107d4:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00107d9:	50                   	push   eax
c00107da:	e8 1f fc ff ff       	call   c00103fe <VgaText::combineColours(unsigned char, unsigned char)>
c00107df:	59                   	pop    ecx
c00107e0:	0f b6 c0             	movzx  eax,al
c00107e3:	5e                   	pop    esi
c00107e4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00107e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00107ed:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00107f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107f4:	0f b7 f6             	movzx  esi,si
c00107f7:	01 f6                	add    esi,esi
c00107f9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00107fc:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00107ff:	84 c0                	test   al,al
c0010801:	0f 84 fd 00 00 00    	je     c0010904 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010807:	3c 0d                	cmp    al,0xd
c0010809:	75 0c                	jne    c0010817 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c001080b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010812:	e9 e7 00 00 00       	jmp    c00108fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010817:	3c 0a                	cmp    al,0xa
c0010819:	75 47                	jne    c0010862 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c001081b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001081e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010825:	8d 48 01             	lea    ecx,[eax+0x1]
c0010828:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c001082b:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c001082e:	75 0f                	jne    c001083f <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010830:	83 ec 0c             	sub    esp,0xc
c0010833:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010836:	53                   	push   ebx
c0010837:	e8 d4 fb ff ff       	call   c0010410 <VgaText::scrollScreen()>
c001083c:	83 c4 10             	add    esp,0x10
c001083f:	83 ec 0c             	sub    esp,0xc
c0010842:	31 ed                	xor    ebp,ebp
c0010844:	53                   	push   ebx
c0010845:	e8 64 fa ff ff       	call   c00102ae <VgaText::updateCursor()>
c001084a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001084f:	83 c4 10             	add    esp,0x10
c0010852:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010855:	0f b7 f6             	movzx  esi,si
c0010858:	01 f6                	add    esi,esi
c001085a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001085d:	e9 9c 00 00 00       	jmp    c00108fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010862:	3c 08                	cmp    al,0x8
c0010864:	75 35                	jne    c001089b <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010866:	56                   	push   esi
c0010867:	56                   	push   esi
c0010868:	6a 01                	push   0x1
c001086a:	53                   	push   ebx
c001086b:	e8 4e fd ff ff       	call   c00105be <VgaText::decrementCursor(bool)>
c0010870:	58                   	pop    eax
c0010871:	5a                   	pop    edx
c0010872:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010875:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010878:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001087b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001087e:	6a 20                	push   0x20
c0010880:	53                   	push   ebx
c0010881:	e8 30 fc ff ff       	call   c00104b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010886:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001088b:	83 c4 20             	add    esp,0x20
c001088e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010891:	0f b7 f6             	movzx  esi,si
c0010894:	01 f6                	add    esi,esi
c0010896:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010899:	eb 63                	jmp    c00108fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001089b:	51                   	push   ecx
c001089c:	51                   	push   ecx
c001089d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00108a1:	50                   	push   eax
c00108a2:	e8 fd fb ff ff       	call   c00104a4 <VgaText::combineCharAndColour(char, unsigned char)>
c00108a7:	83 c4 10             	add    esp,0x10
c00108aa:	66 89 06             	mov    WORD PTR [esi],ax
c00108ad:	39 1d 84 f3 02 c0    	cmp    DWORD PTR ds:0xc002f384,ebx
c00108b3:	75 21                	jne    c00108d6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00108b5:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c00108b8:	85 c0                	test   eax,eax
c00108ba:	74 1a                	je     c00108d6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00108bc:	52                   	push   edx
c00108bd:	52                   	push   edx
c00108be:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108c1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108cc:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c00108cf:	51                   	push   ecx
c00108d0:	53                   	push   ebx
c00108d1:	ff d0                	call   eax
c00108d3:	83 c4 20             	add    esp,0x20
c00108d6:	83 c6 02             	add    esi,0x2
c00108d9:	50                   	push   eax
c00108da:	50                   	push   eax
c00108db:	6a 00                	push   0x0
c00108dd:	53                   	push   ebx
c00108de:	e8 87 fc ff ff       	call   c001056a <VgaText::incrementCursor(bool)>
c00108e3:	83 c4 10             	add    esp,0x10
c00108e6:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00108ea:	75 0d                	jne    c00108f9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c00108ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00108f1:	0f b7 f6             	movzx  esi,si
c00108f4:	01 f6                	add    esi,esi
c00108f6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00108f9:	bd 01 00 00 00       	mov    ebp,0x1
c00108fe:	47                   	inc    edi
c00108ff:	e9 f8 fe ff ff       	jmp    c00107fc <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010904:	83 ec 0c             	sub    esp,0xc
c0010907:	53                   	push   ebx
c0010908:	e8 a1 f9 ff ff       	call   c00102ae <VgaText::updateCursor()>
c001090d:	83 c4 10             	add    esp,0x10
c0010910:	89 e8                	mov    eax,ebp
c0010912:	84 c0                	test   al,al
c0010914:	74 0c                	je     c0010922 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010916:	83 ec 0c             	sub    esp,0xc
c0010919:	53                   	push   ebx
c001091a:	e8 8d fe ff ff       	call   c00107ac <VgaText::doUpdate()>
c001091f:	83 c4 10             	add    esp,0x10
c0010922:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010929:	83 c4 1c             	add    esp,0x1c
c001092c:	5b                   	pop    ebx
c001092d:	5e                   	pop    esi
c001092e:	5f                   	pop    edi
c001092f:	5d                   	pop    ebp
c0010930:	c3                   	ret    
c0010931:	90                   	nop

c0010932 <VgaText::clearScreen()>:
c0010932:	57                   	push   edi
c0010933:	56                   	push   esi
c0010934:	31 f6                	xor    esi,esi
c0010936:	53                   	push   ebx
c0010937:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001093b:	52                   	push   edx
c001093c:	6a 00                	push   0x0
c001093e:	6a 00                	push   0x0
c0010940:	53                   	push   ebx
c0010941:	e8 dc fb ff ff       	call   c0010522 <VgaText::setCursor(int, int)>
c0010946:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001094d:	83 c4 10             	add    esp,0x10
c0010950:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010953:	7e 20                	jle    c0010975 <VgaText::clearScreen()+0x43>
c0010955:	31 ff                	xor    edi,edi
c0010957:	50                   	push   eax
c0010958:	50                   	push   eax
c0010959:	56                   	push   esi
c001095a:	57                   	push   edi
c001095b:	47                   	inc    edi
c001095c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001095f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010962:	6a 20                	push   0x20
c0010964:	53                   	push   ebx
c0010965:	e8 4c fb ff ff       	call   c00104b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001096a:	83 c4 20             	add    esp,0x20
c001096d:	83 ff 50             	cmp    edi,0x50
c0010970:	75 e5                	jne    c0010957 <VgaText::clearScreen()+0x25>
c0010972:	46                   	inc    esi
c0010973:	eb db                	jmp    c0010950 <VgaText::clearScreen()+0x1e>
c0010975:	83 ec 0c             	sub    esp,0xc
c0010978:	53                   	push   ebx
c0010979:	e8 2e fe ff ff       	call   c00107ac <VgaText::doUpdate()>
c001097e:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010985:	83 c4 10             	add    esp,0x10
c0010988:	5b                   	pop    ebx
c0010989:	5e                   	pop    esi
c001098a:	5f                   	pop    edi
c001098b:	c3                   	ret    

c001098c <VgaText::putchar(char)>:
c001098c:	56                   	push   esi
c001098d:	53                   	push   ebx
c001098e:	83 ec 14             	sub    esp,0x14
c0010991:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010995:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010999:	3c 5b                	cmp    al,0x5b
c001099b:	75 18                	jne    c00109b5 <VgaText::putchar(char)+0x29>
c001099d:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00109a1:	74 1f                	je     c00109c2 <VgaText::putchar(char)+0x36>
c00109a3:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00109a9:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00109b0:	e9 bd 00 00 00       	jmp    c0010a72 <VgaText::putchar(char)+0xe6>
c00109b5:	3c 1b                	cmp    al,0x1b
c00109b7:	75 09                	jne    c00109c2 <VgaText::putchar(char)+0x36>
c00109b9:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00109bd:	e9 b0 00 00 00       	jmp    c0010a72 <VgaText::putchar(char)+0xe6>
c00109c2:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00109c5:	84 c9                	test   cl,cl
c00109c7:	0f 84 92 00 00 00    	je     c0010a5f <VgaText::putchar(char)+0xd3>
c00109cd:	8d 50 c0             	lea    edx,[eax-0x40]
c00109d0:	80 fa 3e             	cmp    dl,0x3e
c00109d3:	77 76                	ja     c0010a4b <VgaText::putchar(char)+0xbf>
c00109d5:	3c 6d                	cmp    al,0x6d
c00109d7:	75 47                	jne    c0010a20 <VgaText::putchar(char)+0x94>
c00109d9:	31 f6                	xor    esi,esi
c00109db:	31 d2                	xor    edx,edx
c00109dd:	31 c0                	xor    eax,eax
c00109df:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00109e2:	7e 2d                	jle    c0010a11 <VgaText::putchar(char)+0x85>
c00109e4:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00109e9:	80 fa 3b             	cmp    dl,0x3b
c00109ec:	75 17                	jne    c0010a05 <VgaText::putchar(char)+0x79>
c00109ee:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00109f2:	50                   	push   eax
c00109f3:	53                   	push   ebx
c00109f4:	e8 0b f9 ff ff       	call   c0010304 <VgaText::doANSI_SGR(int)>
c00109f9:	59                   	pop    ecx
c00109fa:	31 d2                	xor    edx,edx
c00109fc:	58                   	pop    eax
c00109fd:	31 c0                	xor    eax,eax
c00109ff:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a03:	eb 09                	jmp    c0010a0e <VgaText::putchar(char)+0x82>
c0010a05:	6b c0 0a             	imul   eax,eax,0xa
c0010a08:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010a0c:	88 ca                	mov    dl,cl
c0010a0e:	46                   	inc    esi
c0010a0f:	eb ce                	jmp    c00109df <VgaText::putchar(char)+0x53>
c0010a11:	84 d2                	test   dl,dl
c0010a13:	74 2e                	je     c0010a43 <VgaText::putchar(char)+0xb7>
c0010a15:	50                   	push   eax
c0010a16:	53                   	push   ebx
c0010a17:	e8 e8 f8 ff ff       	call   c0010304 <VgaText::doANSI_SGR(int)>
c0010a1c:	58                   	pop    eax
c0010a1d:	5a                   	pop    edx
c0010a1e:	eb 23                	jmp    c0010a43 <VgaText::putchar(char)+0xb7>
c0010a20:	3c 4a                	cmp    al,0x4a
c0010a22:	75 1f                	jne    c0010a43 <VgaText::putchar(char)+0xb7>
c0010a24:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010a28:	75 19                	jne    c0010a43 <VgaText::putchar(char)+0xb7>
c0010a2a:	83 ec 0c             	sub    esp,0xc
c0010a2d:	53                   	push   ebx
c0010a2e:	e8 ff fe ff ff       	call   c0010932 <VgaText::clearScreen()>
c0010a33:	83 c4 0c             	add    esp,0xc
c0010a36:	6a 00                	push   0x0
c0010a38:	6a 00                	push   0x0
c0010a3a:	53                   	push   ebx
c0010a3b:	e8 e2 fa ff ff       	call   c0010522 <VgaText::setCursor(int, int)>
c0010a40:	83 c4 10             	add    esp,0x10
c0010a43:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010a49:	eb 27                	jmp    c0010a72 <VgaText::putchar(char)+0xe6>
c0010a4b:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010a4e:	83 fa 0e             	cmp    edx,0xe
c0010a51:	7f 1f                	jg     c0010a72 <VgaText::putchar(char)+0xe6>
c0010a53:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010a56:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010a59:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010a5d:	eb 13                	jmp    c0010a72 <VgaText::putchar(char)+0xe6>
c0010a5f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010a62:	0f be c0             	movsx  eax,al
c0010a65:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010a68:	50                   	push   eax
c0010a69:	53                   	push   ebx
c0010a6a:	e8 71 fb ff ff       	call   c00105e0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010a6f:	83 c4 10             	add    esp,0x10
c0010a72:	83 c4 14             	add    esp,0x14
c0010a75:	5b                   	pop    ebx
c0010a76:	5e                   	pop    esi
c0010a77:	c3                   	ret    

c0010a78 <VgaText::putx(unsigned int)>:
c0010a78:	57                   	push   edi
c0010a79:	b9 11 00 00 00       	mov    ecx,0x11
c0010a7e:	56                   	push   esi
c0010a7f:	be c2 ac 02 c0       	mov    esi,0xc002acc2
c0010a84:	53                   	push   ebx
c0010a85:	83 ec 20             	sub    esp,0x20
c0010a88:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a8c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010a90:	fc                   	cld    
c0010a91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010a93:	be 08 00 00 00       	mov    esi,0x8
c0010a98:	50                   	push   eax
c0010a99:	50                   	push   eax
c0010a9a:	89 d8                	mov    eax,ebx
c0010a9c:	c1 e3 04             	shl    ebx,0x4
c0010a9f:	c1 e8 1c             	shr    eax,0x1c
c0010aa2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010aa7:	50                   	push   eax
c0010aa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010aac:	e8 db fe ff ff       	call   c001098c <VgaText::putchar(char)>
c0010ab1:	83 c4 10             	add    esp,0x10
c0010ab4:	4e                   	dec    esi
c0010ab5:	75 e1                	jne    c0010a98 <VgaText::putx(unsigned int)+0x20>
c0010ab7:	83 c4 20             	add    esp,0x20
c0010aba:	5b                   	pop    ebx
c0010abb:	5e                   	pop    esi
c0010abc:	5f                   	pop    edi
c0010abd:	c3                   	ret    

c0010abe <VgaText::puts(char const*)>:
c0010abe:	53                   	push   ebx
c0010abf:	83 ec 08             	sub    esp,0x8
c0010ac2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ac6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010ac9:	84 c0                	test   al,al
c0010acb:	74 12                	je     c0010adf <VgaText::puts(char const*)+0x21>
c0010acd:	43                   	inc    ebx
c0010ace:	51                   	push   ecx
c0010acf:	51                   	push   ecx
c0010ad0:	50                   	push   eax
c0010ad1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ad5:	e8 b2 fe ff ff       	call   c001098c <VgaText::putchar(char)>
c0010ada:	83 c4 10             	add    esp,0x10
c0010add:	eb e7                	jmp    c0010ac6 <VgaText::puts(char const*)+0x8>
c0010adf:	83 c4 08             	add    esp,0x8
c0010ae2:	5b                   	pop    ebx
c0010ae3:	c3                   	ret    

c0010ae4 <VgaText::VgaText(char const*)>:
c0010ae4:	57                   	push   edi
c0010ae5:	56                   	push   esi
c0010ae6:	53                   	push   ebx
c0010ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aeb:	83 ec 08             	sub    esp,0x8
c0010aee:	6a 00                	push   0x0
c0010af0:	50                   	push   eax
c0010af1:	e8 8a 05 00 00       	call   c0011080 <UnixFile::UnixFile(int)>
c0010af6:	83 c4 10             	add    esp,0x10
c0010af9:	ba 28 ad 02 c0       	mov    edx,0xc002ad28
c0010afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b02:	89 10                	mov    DWORD PTR [eax],edx
c0010b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b08:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b13:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b1e:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b26:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b2e:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b39:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b44:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010b4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4f:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b5a:	8d 50 60             	lea    edx,[eax+0x60]
c0010b5d:	bb 60 f3 02 c0       	mov    ebx,0xc002f360
c0010b62:	b8 08 00 00 00       	mov    eax,0x8
c0010b67:	fc                   	cld    
c0010b68:	89 d7                	mov    edi,edx
c0010b6a:	89 de                	mov    esi,ebx
c0010b6c:	89 c1                	mov    ecx,eax
c0010b6e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b74:	05 82 00 00 00       	add    eax,0x82
c0010b79:	83 ec 08             	sub    esp,0x8
c0010b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b80:	50                   	push   eax
c0010b81:	e8 86 fc fe ff       	call   c000080c <strcpy>
c0010b86:	83 c4 10             	add    esp,0x10
c0010b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b8d:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010b94:	83 ec 0c             	sub    esp,0xc
c0010b97:	6a 01                	push   0x1
c0010b99:	e8 25 09 00 00       	call   c00114c3 <Virt::allocateKernelVirtualPages(int)>
c0010b9e:	83 c4 10             	add    esp,0x10
c0010ba1:	89 c2                	mov    edx,eax
c0010ba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ba7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010baa:	8b 1d 30 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f430
c0010bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bb4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bb7:	89 c6                	mov    esi,eax
c0010bb9:	e8 cc ef ff ff       	call   c000fb8a <Phys::allocatePage()>
c0010bbe:	6a 05                	push   0x5
c0010bc0:	56                   	push   esi
c0010bc1:	50                   	push   eax
c0010bc2:	53                   	push   ebx
c0010bc3:	e8 32 11 00 00       	call   c0011cfa <VAS::mapPage(unsigned long, unsigned long, int)>
c0010bc8:	83 c4 10             	add    esp,0x10
c0010bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bcf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bd2:	83 ec 04             	sub    esp,0x4
c0010bd5:	68 00 0f 00 00       	push   0xf00
c0010bda:	6a 00                	push   0x0
c0010bdc:	50                   	push   eax
c0010bdd:	e8 6e fb fe ff       	call   c0000750 <memset>
c0010be2:	83 c4 10             	add    esp,0x10
c0010be5:	83 ec 04             	sub    esp,0x4
c0010be8:	6a 00                	push   0x0
c0010bea:	6a 07                	push   0x7
c0010bec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bf0:	e8 a3 f7 ff ff       	call   c0010398 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010bf5:	83 c4 10             	add    esp,0x10
c0010bf8:	83 ec 08             	sub    esp,0x8
c0010bfb:	6a 02                	push   0x2
c0010bfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c01:	e8 c6 fa ff ff       	call   c00106cc <VgaText::setCursorHeight(int)>
c0010c06:	83 c4 10             	add    esp,0x10
c0010c09:	83 ec 04             	sub    esp,0x4
c0010c0c:	6a 00                	push   0x0
c0010c0e:	6a 00                	push   0x0
c0010c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c14:	e8 09 f9 ff ff       	call   c0010522 <VgaText::setCursor(int, int)>
c0010c19:	83 c4 10             	add    esp,0x10
c0010c1c:	83 ec 08             	sub    esp,0x8
c0010c1f:	6a 01                	push   0x1
c0010c21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c25:	e8 9a f6 ff ff       	call   c00102c4 <VgaText::showCursor(bool)>
c0010c2a:	83 c4 10             	add    esp,0x10
c0010c2d:	83 ec 08             	sub    esp,0x8
c0010c30:	6a 01                	push   0x1
c0010c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c36:	e8 95 f6 ff ff       	call   c00102d0 <VgaText::disableBlink(bool)>
c0010c3b:	83 c4 10             	add    esp,0x10
c0010c3e:	83 ec 0c             	sub    esp,0xc
c0010c41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c45:	e8 e8 fc ff ff       	call   c0010932 <VgaText::clearScreen()>
c0010c4a:	83 c4 10             	add    esp,0x10
c0010c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c51:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c59:	05 02 01 00 00       	add    eax,0x102
c0010c5e:	83 ec 04             	sub    esp,0x4
c0010c61:	68 96 00 00 00       	push   0x96
c0010c66:	6a 00                	push   0x0
c0010c68:	50                   	push   eax
c0010c69:	e8 e2 fa fe ff       	call   c0000750 <memset>
c0010c6e:	83 c4 10             	add    esp,0x10
c0010c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c75:	05 98 01 00 00       	add    eax,0x198
c0010c7a:	83 ec 04             	sub    esp,0x4
c0010c7d:	68 2c 01 00 00       	push   0x12c
c0010c82:	6a 00                	push   0x0
c0010c84:	50                   	push   eax
c0010c85:	e8 c6 fa fe ff       	call   c0000750 <memset>
c0010c8a:	83 c4 10             	add    esp,0x10
c0010c8d:	90                   	nop
c0010c8e:	5b                   	pop    ebx
c0010c8f:	5e                   	pop    esi
c0010c90:	5f                   	pop    edi
c0010c91:	c3                   	ret    

c0010c92 <VgaText::receiveKey(unsigned char)>:
c0010c92:	55                   	push   ebp
c0010c93:	57                   	push   edi
c0010c94:	56                   	push   esi
c0010c95:	53                   	push   ebx
c0010c96:	83 ec 1c             	sub    esp,0x1c
c0010c99:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c9d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ca1:	84 db                	test   bl,bl
c0010ca3:	0f 84 c9 00 00 00    	je     c0010d72 <VgaText::receiveKey(unsigned char)+0xe0>
c0010ca9:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010caf:	80 fb 08             	cmp    bl,0x8
c0010cb2:	75 2c                	jne    c0010ce0 <VgaText::receiveKey(unsigned char)+0x4e>
c0010cb4:	83 ec 0c             	sub    esp,0xc
c0010cb7:	57                   	push   edi
c0010cb8:	e8 af fa fe ff       	call   c000076c <strlen>
c0010cbd:	83 c4 10             	add    esp,0x10
c0010cc0:	85 c0                	test   eax,eax
c0010cc2:	74 41                	je     c0010d05 <VgaText::receiveKey(unsigned char)+0x73>
c0010cc4:	50                   	push   eax
c0010cc5:	50                   	push   eax
c0010cc6:	6a 08                	push   0x8
c0010cc8:	56                   	push   esi
c0010cc9:	e8 be fc ff ff       	call   c001098c <VgaText::putchar(char)>
c0010cce:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010cd1:	e8 96 fa fe ff       	call   c000076c <strlen>
c0010cd6:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010cde:	eb 22                	jmp    c0010d02 <VgaText::receiveKey(unsigned char)+0x70>
c0010ce0:	0f be c3             	movsx  eax,bl
c0010ce3:	52                   	push   edx
c0010ce4:	52                   	push   edx
c0010ce5:	50                   	push   eax
c0010ce6:	56                   	push   esi
c0010ce7:	e8 a0 fc ff ff       	call   c001098c <VgaText::putchar(char)>
c0010cec:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010cf0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010cf5:	59                   	pop    ecx
c0010cf6:	5d                   	pop    ebp
c0010cf7:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010cfb:	50                   	push   eax
c0010cfc:	57                   	push   edi
c0010cfd:	e8 4a fc fe ff       	call   c000094c <strcat>
c0010d02:	83 c4 10             	add    esp,0x10
c0010d05:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010d0c:	75 05                	jne    c0010d13 <VgaText::receiveKey(unsigned char)+0x81>
c0010d0e:	80 fb 0a             	cmp    bl,0xa
c0010d11:	75 53                	jne    c0010d66 <VgaText::receiveKey(unsigned char)+0xd4>
c0010d13:	83 ec 0c             	sub    esp,0xc
c0010d16:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010d1c:	53                   	push   ebx
c0010d1d:	e8 4a fa fe ff       	call   c000076c <strlen>
c0010d22:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d25:	89 c5                	mov    ebp,eax
c0010d27:	e8 40 fa fe ff       	call   c000076c <strlen>
c0010d2c:	83 c4 10             	add    esp,0x10
c0010d2f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010d33:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010d38:	76 10                	jbe    c0010d4a <VgaText::receiveKey(unsigned char)+0xb8>
c0010d3a:	83 ec 0c             	sub    esp,0xc
c0010d3d:	68 d3 ac 02 c0       	push   0xc002acd3
c0010d42:	e8 b8 95 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0010d47:	83 c4 10             	add    esp,0x10
c0010d4a:	50                   	push   eax
c0010d4b:	50                   	push   eax
c0010d4c:	57                   	push   edi
c0010d4d:	53                   	push   ebx
c0010d4e:	e8 f9 fb fe ff       	call   c000094c <strcat>
c0010d53:	83 c4 0c             	add    esp,0xc
c0010d56:	68 96 00 00 00       	push   0x96
c0010d5b:	6a 00                	push   0x0
c0010d5d:	57                   	push   edi
c0010d5e:	e8 ed f9 fe ff       	call   c0000750 <memset>
c0010d63:	83 c4 10             	add    esp,0x10
c0010d66:	83 ec 0c             	sub    esp,0xc
c0010d69:	56                   	push   esi
c0010d6a:	e8 3d fa ff ff       	call   c00107ac <VgaText::doUpdate()>
c0010d6f:	83 c4 10             	add    esp,0x10
c0010d72:	83 c4 1c             	add    esp,0x1c
c0010d75:	5b                   	pop    ebx
c0010d76:	5e                   	pop    esi
c0010d77:	5f                   	pop    edi
c0010d78:	5d                   	pop    ebp
c0010d79:	c3                   	ret    

c0010d7a <VgaText::write(unsigned long long, void*, int*)>:
c0010d7a:	55                   	push   ebp
c0010d7b:	57                   	push   edi
c0010d7c:	56                   	push   esi
c0010d7d:	53                   	push   ebx
c0010d7e:	83 ec 0c             	sub    esp,0xc
c0010d81:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010d85:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010d89:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d8d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010d94:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010d97:	39 eb                	cmp    ebx,ebp
c0010d99:	74 13                	je     c0010dae <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010d9b:	43                   	inc    ebx
c0010d9c:	50                   	push   eax
c0010d9d:	50                   	push   eax
c0010d9e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010da2:	50                   	push   eax
c0010da3:	56                   	push   esi
c0010da4:	e8 e3 fb ff ff       	call   c001098c <VgaText::putchar(char)>
c0010da9:	83 c4 10             	add    esp,0x10
c0010dac:	eb e9                	jmp    c0010d97 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010dae:	83 ec 0c             	sub    esp,0xc
c0010db1:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010db8:	56                   	push   esi
c0010db9:	e8 ee f9 ff ff       	call   c00107ac <VgaText::doUpdate()>
c0010dbe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010dc2:	89 38                	mov    DWORD PTR [eax],edi
c0010dc4:	83 c4 1c             	add    esp,0x1c
c0010dc7:	31 c0                	xor    eax,eax
c0010dc9:	5b                   	pop    ebx
c0010dca:	5e                   	pop    esi
c0010dcb:	5f                   	pop    edi
c0010dcc:	5d                   	pop    ebp
c0010dcd:	c3                   	ret    

c0010dce <newTerminal(char*)>:
c0010dce:	83 ec 28             	sub    esp,0x28
c0010dd1:	68 c4 02 00 00       	push   0x2c4
c0010dd6:	e8 b1 ea ff ff       	call   c000f88c <malloc>
c0010ddb:	5a                   	pop    edx
c0010ddc:	59                   	pop    ecx
c0010ddd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010de1:	50                   	push   eax
c0010de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010de6:	e8 f9 fc ff ff       	call   c0010ae4 <VgaText::VgaText(char const*)>
c0010deb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010def:	83 c4 2c             	add    esp,0x2c
c0010df2:	c3                   	ret    
c0010df3:	90                   	nop

c0010df4 <TSS::TSS()>:
c0010df4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010df8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010dff:	90                   	nop
c0010e00:	c3                   	ret    
c0010e01:	90                   	nop

c0010e02 <TSS::setESP(unsigned long)>:
c0010e02:	55                   	push   ebp
c0010e03:	89 e5                	mov    ebp,esp
c0010e05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e0b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e0e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e11:	90                   	nop
c0010e12:	5d                   	pop    ebp
c0010e13:	c3                   	ret    

c0010e14 <TSS::flush()>:
c0010e14:	55                   	push   ebp
c0010e15:	89 e5                	mov    ebp,esp
c0010e17:	83 ec 10             	sub    esp,0x10
c0010e1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e1f:	83 c8 03             	or     eax,0x3
c0010e22:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010e26:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010e2a:	66 89 d0             	mov    ax,dx
c0010e2d:	0f 00 d8             	ltr    ax
c0010e30:	90                   	nop
c0010e31:	c9                   	leave  
c0010e32:	c3                   	ret    
c0010e33:	90                   	nop

c0010e34 <TSS::setup(unsigned long, unsigned long)>:
c0010e34:	55                   	push   ebp
c0010e35:	89 e5                	mov    ebp,esp
c0010e37:	83 ec 18             	sub    esp,0x18
c0010e3a:	83 ec 0c             	sub    esp,0xc
c0010e3d:	6a 68                	push   0x68
c0010e3f:	e8 48 ea ff ff       	call   c000f88c <malloc>
c0010e44:	83 c4 10             	add    esp,0x10
c0010e47:	89 c2                	mov    edx,eax
c0010e49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e4c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e55:	83 ec 04             	sub    esp,0x4
c0010e58:	6a 68                	push   0x68
c0010e5a:	6a 00                	push   0x0
c0010e5c:	50                   	push   eax
c0010e5d:	e8 ee f8 fe ff       	call   c0000750 <memset>
c0010e62:	83 c4 10             	add    esp,0x10
c0010e65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e6b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e77:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010e7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e83:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e86:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e8f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010e95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e9b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010ea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ea4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010ead:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eb3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010eb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ebc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ebf:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010ec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ec8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ecb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010ed1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ed4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ed7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010eda:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010edd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ee0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ee3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010ee6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010ee9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eef:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010ef6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ef9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010efc:	0f 20 da             	mov    edx,cr3
c0010eff:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010f02:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010f05:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010f08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f0e:	83 ec 08             	sub    esp,0x8
c0010f11:	50                   	push   eax
c0010f12:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f15:	50                   	push   eax
c0010f16:	e8 4d e1 ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c0010f1b:	83 c4 10             	add    esp,0x10
c0010f1e:	83 ec 08             	sub    esp,0x8
c0010f21:	6a 68                	push   0x68
c0010f23:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f26:	50                   	push   eax
c0010f27:	e8 58 e1 ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c0010f2c:	83 c4 10             	add    esp,0x10
c0010f2f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010f33:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f36:	83 e0 0f             	and    eax,0xf
c0010f39:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f3c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f3f:	83 c8 40             	or     eax,0x40
c0010f42:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f45:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0010f4a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f50:	05 78 01 00 00       	add    eax,0x178
c0010f55:	83 ec 04             	sub    esp,0x4
c0010f58:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010f5b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010f5e:	50                   	push   eax
c0010f5f:	e8 54 e1 ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c0010f64:	83 c4 10             	add    esp,0x10
c0010f67:	89 c2                	mov    edx,eax
c0010f69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f6c:	89 10                	mov    DWORD PTR [eax],edx
c0010f6e:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0010f73:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f79:	05 78 01 00 00       	add    eax,0x178
c0010f7e:	83 ec 0c             	sub    esp,0xc
c0010f81:	50                   	push   eax
c0010f82:	e8 75 e1 ff ff       	call   c000f0fc <GDT::flush()>
c0010f87:	83 c4 10             	add    esp,0x10
c0010f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f8f:	83 ec 08             	sub    esp,0x8
c0010f92:	50                   	push   eax
c0010f93:	68 3c ad 02 c0       	push   0xc002ad3c
c0010f98:	e8 2c 19 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0010f9d:	83 c4 10             	add    esp,0x10
c0010fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fa3:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fa5:	c9                   	leave  
c0010fa6:	c3                   	ret    
c0010fa7:	90                   	nop

c0010fa8 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010fa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fb3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010fb8:	75 08                	jne    c0010fc2 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010fba:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010fc0:	eb 38                	jmp    c0010ffa <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010fc2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010fc7:	75 17                	jne    c0010fe0 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010fc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010fd1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010fd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fd9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010fdd:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010fe0:	89 c1                	mov    ecx,eax
c0010fe2:	83 e1 fd             	and    ecx,0xfffffffd
c0010fe5:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010feb:	74 cd                	je     c0010fba <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010fed:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010ff2:	83 e0 ef             	and    eax,0xffffffef
c0010ff5:	83 f8 08             	cmp    eax,0x8
c0010ff8:	76 c0                	jbe    c0010fba <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010ffa:	31 c0                	xor    eax,eax
c0010ffc:	c3                   	ret    
c0010ffd:	90                   	nop

c0010ffe <ReservedFilename::isAtty()>:
c0010ffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011002:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011005:	31 c0                	xor    eax,eax
c0011007:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001100d:	74 09                	je     c0011018 <ReservedFilename::isAtty()+0x1a>
c001100f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011015:	0f 94 c0             	sete   al
c0011018:	c3                   	ret    
c0011019:	90                   	nop

c001101a <ReservedFilename::write(unsigned long long, void*, int*)>:
c001101a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001101e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011022:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011029:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001102e:	75 08                	jne    c0011038 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011030:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011036:	eb 3d                	jmp    c0011075 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011038:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001103d:	75 17                	jne    c0011056 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001103f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011044:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011047:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001104d:	8b 10                	mov    edx,DWORD PTR [eax]
c001104f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011053:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011056:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001105b:	75 04                	jne    c0011061 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001105d:	89 0a                	mov    DWORD PTR [edx],ecx
c001105f:	eb 14                	jmp    c0011075 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011061:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011066:	74 c8                	je     c0011030 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011068:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001106d:	83 e0 ef             	and    eax,0xffffffef
c0011070:	83 f8 08             	cmp    eax,0x8
c0011073:	76 bb                	jbe    c0011030 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011075:	31 c0                	xor    eax,eax
c0011077:	c3                   	ret    

c0011078 <UnixFile::getFileDescriptor()>:
c0011078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001107c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001107f:	c3                   	ret    

c0011080 <UnixFile::UnixFile(int)>:
c0011080:	53                   	push   ebx
c0011081:	83 ec 28             	sub    esp,0x28
c0011084:	ba 28 ae 02 c0       	mov    edx,0xc002ae28
c0011089:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001108d:	89 10                	mov    DWORD PTR [eax],edx
c001108f:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011097:	0f 8f 8c 01 00 00    	jg     c0011229 <UnixFile::UnixFile(int)+0x1a9>
c001109d:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c00110a2:	8d 50 01             	lea    edx,[eax+0x1]
c00110a5:	89 15 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,edx
c00110ab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00110af:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00110b2:	83 ec 08             	sub    esp,0x8
c00110b5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00110b9:	68 18 f4 02 c0       	push   0xc002f418
c00110be:	e8 b9 7e 01 00       	call   c0028f7c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00110c3:	83 c4 10             	add    esp,0x10
c00110c6:	a0 14 f4 02 c0       	mov    al,ds:0xc002f414
c00110cb:	83 f0 01             	xor    eax,0x1
c00110ce:	84 c0                	test   al,al
c00110d0:	0f 84 54 01 00 00    	je     c001122a <UnixFile::UnixFile(int)+0x1aa>
c00110d6:	c6 05 14 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f414,0x1
c00110dd:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00110e5:	83 ec 0c             	sub    esp,0xc
c00110e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110ec:	e8 9b e7 ff ff       	call   c000f88c <malloc>
c00110f1:	83 c4 10             	add    esp,0x10
c00110f4:	89 c3                	mov    ebx,eax
c00110f6:	83 ec 08             	sub    esp,0x8
c00110f9:	68 03 ff ff 0f       	push   0xfffff03
c00110fe:	53                   	push   ebx
c00110ff:	e8 2c 01 00 00       	call   c0011230 <ReservedFilename::ReservedFilename(int)>
c0011104:	83 c4 10             	add    esp,0x10
c0011107:	89 1d 0c f4 02 c0    	mov    DWORD PTR ds:0xc002f40c,ebx
c001110d:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011115:	83 ec 0c             	sub    esp,0xc
c0011118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001111c:	e8 6b e7 ff ff       	call   c000f88c <malloc>
c0011121:	83 c4 10             	add    esp,0x10
c0011124:	89 c3                	mov    ebx,eax
c0011126:	83 ec 08             	sub    esp,0x8
c0011129:	68 01 ff ff 0f       	push   0xfffff01
c001112e:	53                   	push   ebx
c001112f:	e8 fc 00 00 00       	call   c0011230 <ReservedFilename::ReservedFilename(int)>
c0011134:	83 c4 10             	add    esp,0x10
c0011137:	89 1d 10 f4 02 c0    	mov    DWORD PTR ds:0xc002f410,ebx
c001113d:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011145:	83 ec 0c             	sub    esp,0xc
c0011148:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001114c:	e8 3b e7 ff ff       	call   c000f88c <malloc>
c0011151:	83 c4 10             	add    esp,0x10
c0011154:	89 c3                	mov    ebx,eax
c0011156:	83 ec 08             	sub    esp,0x8
c0011159:	68 00 ff ff 0f       	push   0xfffff00
c001115e:	53                   	push   ebx
c001115f:	e8 cc 00 00 00       	call   c0011230 <ReservedFilename::ReservedFilename(int)>
c0011164:	83 c4 10             	add    esp,0x10
c0011167:	89 1d 04 f4 02 c0    	mov    DWORD PTR ds:0xc002f404,ebx
c001116d:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011175:	83 ec 0c             	sub    esp,0xc
c0011178:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001117c:	e8 0b e7 ff ff       	call   c000f88c <malloc>
c0011181:	83 c4 10             	add    esp,0x10
c0011184:	89 c3                	mov    ebx,eax
c0011186:	83 ec 08             	sub    esp,0x8
c0011189:	68 02 ff ff 0f       	push   0xfffff02
c001118e:	53                   	push   ebx
c001118f:	e8 9c 00 00 00       	call   c0011230 <ReservedFilename::ReservedFilename(int)>
c0011194:	83 c4 10             	add    esp,0x10
c0011197:	89 1d 08 f4 02 c0    	mov    DWORD PTR ds:0xc002f408,ebx
c001119d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00111a5:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00111aa:	7f 7e                	jg     c001122a <UnixFile::UnixFile(int)+0x1aa>
c00111ac:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00111b4:	83 ec 0c             	sub    esp,0xc
c00111b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00111bb:	e8 cc e6 ff ff       	call   c000f88c <malloc>
c00111c0:	83 c4 10             	add    esp,0x10
c00111c3:	89 c3                	mov    ebx,eax
c00111c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111c9:	05 10 ff ff 0f       	add    eax,0xfffff10
c00111ce:	83 ec 08             	sub    esp,0x8
c00111d1:	50                   	push   eax
c00111d2:	53                   	push   ebx
c00111d3:	e8 58 00 00 00       	call   c0011230 <ReservedFilename::ReservedFilename(int)>
c00111d8:	83 c4 10             	add    esp,0x10
c00111db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111df:	89 1c 85 e0 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c20],ebx
c00111e6:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00111ee:	83 ec 0c             	sub    esp,0xc
c00111f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00111f5:	e8 92 e6 ff ff       	call   c000f88c <malloc>
c00111fa:	83 c4 10             	add    esp,0x10
c00111fd:	89 c3                	mov    ebx,eax
c00111ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011203:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011208:	83 ec 08             	sub    esp,0x8
c001120b:	50                   	push   eax
c001120c:	53                   	push   ebx
c001120d:	e8 1e 00 00 00       	call   c0011230 <ReservedFilename::ReservedFilename(int)>
c0011212:	83 c4 10             	add    esp,0x10
c0011215:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011219:	89 1c 85 a0 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c60],ebx
c0011220:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011224:	e9 7c ff ff ff       	jmp    c00111a5 <UnixFile::UnixFile(int)+0x125>
c0011229:	90                   	nop
c001122a:	83 c4 28             	add    esp,0x28
c001122d:	5b                   	pop    ebx
c001122e:	c3                   	ret    
c001122f:	90                   	nop

c0011230 <ReservedFilename::ReservedFilename(int)>:
c0011230:	83 ec 0c             	sub    esp,0xc
c0011233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011237:	83 ec 08             	sub    esp,0x8
c001123a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001123e:	50                   	push   eax
c001123f:	e8 3c fe ff ff       	call   c0011080 <UnixFile::UnixFile(int)>
c0011244:	83 c4 10             	add    esp,0x10
c0011247:	ba 44 ae 02 c0       	mov    edx,0xc002ae44
c001124c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011250:	89 10                	mov    DWORD PTR [eax],edx
c0011252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011256:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001125a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001125d:	90                   	nop
c001125e:	83 c4 0c             	add    esp,0xc
c0011261:	c3                   	ret    

c0011262 <UnixFile::~UnixFile()>:
c0011262:	83 ec 1c             	sub    esp,0x1c
c0011265:	ba 28 ae 02 c0       	mov    edx,0xc002ae28
c001126a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001126e:	89 10                	mov    DWORD PTR [eax],edx
c0011270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011274:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011277:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001127c:	7f 73                	jg     c00112f1 <UnixFile::~UnixFile()+0x8f>
c001127e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011286:	83 ec 0c             	sub    esp,0xc
c0011289:	68 18 f4 02 c0       	push   0xc002f418
c001128e:	e8 bd 7d 01 00       	call   c0029050 <LinkedList<UnixFile>::getFirstElement()>
c0011293:	83 c4 10             	add    esp,0x10
c0011296:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001129a:	83 ec 0c             	sub    esp,0xc
c001129d:	68 18 f4 02 c0       	push   0xc002f418
c00112a2:	e8 b1 7d 01 00       	call   c0029058 <LinkedList<UnixFile>::removeFirst()>
c00112a7:	83 c4 10             	add    esp,0x10
c00112aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00112ae:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00112b2:	74 40                	je     c00112f4 <UnixFile::~UnixFile()+0x92>
c00112b4:	83 ec 08             	sub    esp,0x8
c00112b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00112bb:	68 18 f4 02 c0       	push   0xc002f418
c00112c0:	e8 b7 7c 01 00       	call   c0028f7c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00112c5:	83 c4 10             	add    esp,0x10
c00112c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112cc:	8d 50 01             	lea    edx,[eax+0x1]
c00112cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00112d3:	3d 88 13 00 00       	cmp    eax,0x1388
c00112d8:	0f 94 c0             	sete   al
c00112db:	84 c0                	test   al,al
c00112dd:	74 a7                	je     c0011286 <UnixFile::~UnixFile()+0x24>
c00112df:	83 ec 0c             	sub    esp,0xc
c00112e2:	68 00 ae 02 c0       	push   0xc002ae00
c00112e7:	e8 13 90 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c00112ec:	83 c4 10             	add    esp,0x10
c00112ef:	eb 95                	jmp    c0011286 <UnixFile::~UnixFile()+0x24>
c00112f1:	90                   	nop
c00112f2:	eb 01                	jmp    c00112f5 <UnixFile::~UnixFile()+0x93>
c00112f4:	90                   	nop
c00112f5:	90                   	nop
c00112f6:	83 c4 1c             	add    esp,0x1c
c00112f9:	c3                   	ret    

c00112fa <UnixFile::~UnixFile()>:
c00112fa:	83 ec 0c             	sub    esp,0xc
c00112fd:	83 ec 0c             	sub    esp,0xc
c0011300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011304:	e8 59 ff ff ff       	call   c0011262 <UnixFile::~UnixFile()>
c0011309:	83 c4 10             	add    esp,0x10
c001130c:	83 ec 08             	sub    esp,0x8
c001130f:	6a 0c                	push   0xc
c0011311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011315:	e8 cf 14 00 00       	call   c00127e9 <operator delete(void*, unsigned long)>
c001131a:	83 c4 10             	add    esp,0x10
c001131d:	83 c4 0c             	add    esp,0xc
c0011320:	c3                   	ret    
c0011321:	90                   	nop

c0011322 <ReservedFilename::~ReservedFilename()>:
c0011322:	83 ec 0c             	sub    esp,0xc
c0011325:	ba 44 ae 02 c0       	mov    edx,0xc002ae44
c001132a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132e:	89 10                	mov    DWORD PTR [eax],edx
c0011330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011334:	83 ec 0c             	sub    esp,0xc
c0011337:	50                   	push   eax
c0011338:	e8 25 ff ff ff       	call   c0011262 <UnixFile::~UnixFile()>
c001133d:	83 c4 10             	add    esp,0x10
c0011340:	90                   	nop
c0011341:	83 c4 0c             	add    esp,0xc
c0011344:	c3                   	ret    
c0011345:	90                   	nop

c0011346 <ReservedFilename::~ReservedFilename()>:
c0011346:	83 ec 0c             	sub    esp,0xc
c0011349:	83 ec 0c             	sub    esp,0xc
c001134c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011350:	e8 cd ff ff ff       	call   c0011322 <ReservedFilename::~ReservedFilename()>
c0011355:	83 c4 10             	add    esp,0x10
c0011358:	83 ec 08             	sub    esp,0x8
c001135b:	6a 0c                	push   0xc
c001135d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011361:	e8 83 14 00 00       	call   c00127e9 <operator delete(void*, unsigned long)>
c0011366:	83 c4 10             	add    esp,0x10
c0011369:	83 c4 0c             	add    esp,0xc
c001136c:	c3                   	ret    

c001136d <getFromFileDescriptor(int)>:
c001136d:	53                   	push   ebx
c001136e:	83 ec 08             	sub    esp,0x8
c0011371:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011375:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001137b:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011381:	7f 2c                	jg     c00113af <getFromFileDescriptor(int)+0x42>
c0011383:	83 ec 0c             	sub    esp,0xc
c0011386:	68 18 f4 02 c0       	push   0xc002f418
c001138b:	e8 c0 7c 01 00       	call   c0029050 <LinkedList<UnixFile>::getFirstElement()>
c0011390:	83 c4 10             	add    esp,0x10
c0011393:	85 c0                	test   eax,eax
c0011395:	75 04                	jne    c001139b <getFromFileDescriptor(int)+0x2e>
c0011397:	31 c0                	xor    eax,eax
c0011399:	eb 6e                	jmp    c0011409 <getFromFileDescriptor(int)+0x9c>
c001139b:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001139e:	74 69                	je     c0011409 <getFromFileDescriptor(int)+0x9c>
c00113a0:	52                   	push   edx
c00113a1:	52                   	push   edx
c00113a2:	50                   	push   eax
c00113a3:	68 18 f4 02 c0       	push   0xc002f418
c00113a8:	e8 4d 7d 01 00       	call   c00290fa <LinkedList<UnixFile>::getNext(UnixFile*)>
c00113ad:	eb e1                	jmp    c0011390 <getFromFileDescriptor(int)+0x23>
c00113af:	a1 0c f4 02 c0       	mov    eax,ds:0xc002f40c
c00113b4:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00113ba:	74 4d                	je     c0011409 <getFromFileDescriptor(int)+0x9c>
c00113bc:	a1 10 f4 02 c0       	mov    eax,ds:0xc002f410
c00113c1:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00113c7:	74 40                	je     c0011409 <getFromFileDescriptor(int)+0x9c>
c00113c9:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c00113ce:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00113d4:	74 33                	je     c0011409 <getFromFileDescriptor(int)+0x9c>
c00113d6:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c00113db:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00113e1:	74 26                	je     c0011409 <getFromFileDescriptor(int)+0x9c>
c00113e3:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00113e9:	83 f8 08             	cmp    eax,0x8
c00113ec:	77 09                	ja     c00113f7 <getFromFileDescriptor(int)+0x8a>
c00113ee:	8b 04 85 e0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c20]
c00113f5:	eb 12                	jmp    c0011409 <getFromFileDescriptor(int)+0x9c>
c00113f7:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00113fd:	83 fb 08             	cmp    ebx,0x8
c0011400:	77 95                	ja     c0011397 <getFromFileDescriptor(int)+0x2a>
c0011402:	8b 04 9d a0 f3 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0c60]
c0011409:	83 c4 08             	add    esp,0x8
c001140c:	5b                   	pop    ebx
c001140d:	c3                   	ret    

c001140e <__static_initialization_and_destruction_0(int, int)>:
c001140e:	83 ec 0c             	sub    esp,0xc
c0011411:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011416:	75 34                	jne    c001144c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011418:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011420:	75 2a                	jne    c001144c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011422:	83 ec 0c             	sub    esp,0xc
c0011425:	68 18 f4 02 c0       	push   0xc002f418
c001142a:	e8 f5 7a 01 00       	call   c0028f24 <LinkedList<UnixFile>::LinkedList()>
c001142f:	83 c4 10             	add    esp,0x10
c0011432:	83 ec 04             	sub    esp,0x4
c0011435:	68 bc dd 02 c0       	push   0xc002ddbc
c001143a:	68 18 f4 02 c0       	push   0xc002f418
c001143f:	68 22 8f 02 c0       	push   0xc0028f22
c0011444:	e8 1a 13 00 00       	call   c0012763 <__cxa_atexit>
c0011449:	83 c4 10             	add    esp,0x10
c001144c:	90                   	nop
c001144d:	83 c4 0c             	add    esp,0xc
c0011450:	c3                   	ret    

c0011451 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011451:	83 ec 0c             	sub    esp,0xc
c0011454:	83 ec 08             	sub    esp,0x8
c0011457:	68 ff ff 00 00       	push   0xffff
c001145c:	6a 01                	push   0x1
c001145e:	e8 ab ff ff ff       	call   c001140e <__static_initialization_and_destruction_0(int, int)>
c0011463:	83 c4 10             	add    esp,0x10
c0011466:	83 c4 0c             	add    esp,0xc
c0011469:	c3                   	ret    

c001146a <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001146a:	53                   	push   ebx
c001146b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001146f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011473:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011479:	89 c8                	mov    eax,ecx
c001147b:	d1 e8                	shr    eax,1
c001147d:	03 05 68 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e268
c0011483:	83 e1 01             	and    ecx,0x1
c0011486:	8a 10                	mov    dl,BYTE PTR [eax]
c0011488:	75 09                	jne    c0011493 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001148a:	83 e2 f0             	and    edx,0xfffffff0
c001148d:	09 da                	or     edx,ebx
c001148f:	88 10                	mov    BYTE PTR [eax],dl
c0011491:	5b                   	pop    ebx
c0011492:	c3                   	ret    
c0011493:	c1 e3 04             	shl    ebx,0x4
c0011496:	83 e2 0f             	and    edx,0xf
c0011499:	09 da                	or     edx,ebx
c001149b:	88 10                	mov    BYTE PTR [eax],dl
c001149d:	5b                   	pop    ebx
c001149e:	c3                   	ret    

c001149f <Virt::getPageState(unsigned long)>:
c001149f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114a3:	8b 0d 68 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e268
c00114a9:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00114af:	89 d0                	mov    eax,edx
c00114b1:	d1 e8                	shr    eax,1
c00114b3:	83 e2 01             	and    edx,0x1
c00114b6:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00114b9:	75 04                	jne    c00114bf <Virt::getPageState(unsigned long)+0x20>
c00114bb:	83 e0 0f             	and    eax,0xf
c00114be:	c3                   	ret    
c00114bf:	c0 e8 04             	shr    al,0x4
c00114c2:	c3                   	ret    

c00114c3 <Virt::allocateKernelVirtualPages(int)>:
c00114c3:	55                   	push   ebp
c00114c4:	31 ed                	xor    ebp,ebp
c00114c6:	57                   	push   edi
c00114c7:	56                   	push   esi
c00114c8:	53                   	push   ebx
c00114c9:	31 db                	xor    ebx,ebx
c00114cb:	83 ec 1c             	sub    esp,0x1c
c00114ce:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00114d2:	8b 3d 64 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e264
c00114d8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00114dd:	57                   	push   edi
c00114de:	e8 bc ff ff ff       	call   c001149f <Virt::getPageState(unsigned long)>
c00114e3:	5a                   	pop    edx
c00114e4:	84 c0                	test   al,al
c00114e6:	75 3a                	jne    c0011522 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00114e8:	85 db                	test   ebx,ebx
c00114ea:	75 02                	jne    c00114ee <Virt::allocateKernelVirtualPages(int)+0x2b>
c00114ec:	89 fd                	mov    ebp,edi
c00114ee:	43                   	inc    ebx
c00114ef:	39 f3                	cmp    ebx,esi
c00114f1:	74 5a                	je     c001154d <Virt::allocateKernelVirtualPages(int)+0x8a>
c00114f3:	47                   	inc    edi
c00114f4:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00114fa:	76 31                	jbe    c001152d <Virt::allocateKernelVirtualPages(int)+0x6a>
c00114fc:	c7 05 64 e2 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002e264,0xc8000
c0011506:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001150b:	75 28                	jne    c0011535 <Virt::allocateKernelVirtualPages(int)+0x72>
c001150d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011512:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011517:	57                   	push   edi
c0011518:	e8 82 ff ff ff       	call   c001149f <Virt::getPageState(unsigned long)>
c001151d:	5a                   	pop    edx
c001151e:	84 c0                	test   al,al
c0011520:	74 c6                	je     c00114e8 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011522:	31 db                	xor    ebx,ebx
c0011524:	47                   	inc    edi
c0011525:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001152b:	77 cf                	ja     c00114fc <Virt::allocateKernelVirtualPages(int)+0x39>
c001152d:	89 3d 64 e2 02 c0    	mov    DWORD PTR ds:0xc002e264,edi
c0011533:	eb a8                	jmp    c00114dd <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011535:	83 ec 0c             	sub    esp,0xc
c0011538:	68 58 ae 02 c0       	push   0xc002ae58
c001153d:	e8 bd 8d 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0011542:	8b 3d 64 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e264
c0011548:	83 c4 10             	add    esp,0x10
c001154b:	eb 90                	jmp    c00114dd <Virt::allocateKernelVirtualPages(int)+0x1a>
c001154d:	89 2d 64 e2 02 c0    	mov    DWORD PTR ds:0xc002e264,ebp
c0011553:	4b                   	dec    ebx
c0011554:	74 5f                	je     c00115b5 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011556:	85 f6                	test   esi,esi
c0011558:	74 3d                	je     c0011597 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001155a:	89 e8                	mov    eax,ebp
c001155c:	31 db                	xor    ebx,ebx
c001155e:	8d 7e ff             	lea    edi,[esi-0x1]
c0011561:	eb 14                	jmp    c0011577 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011563:	6a 01                	push   0x1
c0011565:	43                   	inc    ebx
c0011566:	50                   	push   eax
c0011567:	e8 fe fe ff ff       	call   c001146a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001156c:	58                   	pop    eax
c001156d:	39 f3                	cmp    ebx,esi
c001156f:	5a                   	pop    edx
c0011570:	74 25                	je     c0011597 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011572:	a1 64 e2 02 c0       	mov    eax,ds:0xc002e264
c0011577:	8d 50 01             	lea    edx,[eax+0x1]
c001157a:	85 db                	test   ebx,ebx
c001157c:	89 15 64 e2 02 c0    	mov    DWORD PTR ds:0xc002e264,edx
c0011582:	74 20                	je     c00115a4 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011584:	39 df                	cmp    edi,ebx
c0011586:	75 db                	jne    c0011563 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011588:	6a 03                	push   0x3
c001158a:	43                   	inc    ebx
c001158b:	50                   	push   eax
c001158c:	e8 d9 fe ff ff       	call   c001146a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011591:	59                   	pop    ecx
c0011592:	39 f3                	cmp    ebx,esi
c0011594:	58                   	pop    eax
c0011595:	75 db                	jne    c0011572 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011597:	83 c4 1c             	add    esp,0x1c
c001159a:	89 e8                	mov    eax,ebp
c001159c:	5b                   	pop    ebx
c001159d:	c1 e0 0c             	shl    eax,0xc
c00115a0:	5e                   	pop    esi
c00115a1:	5f                   	pop    edi
c00115a2:	5d                   	pop    ebp
c00115a3:	c3                   	ret    
c00115a4:	6a 02                	push   0x2
c00115a6:	bb 01 00 00 00       	mov    ebx,0x1
c00115ab:	50                   	push   eax
c00115ac:	e8 b9 fe ff ff       	call   c001146a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115b1:	58                   	pop    eax
c00115b2:	5a                   	pop    edx
c00115b3:	eb bd                	jmp    c0011572 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00115b5:	6a 04                	push   0x4
c00115b7:	8d 45 01             	lea    eax,[ebp+0x1]
c00115ba:	55                   	push   ebp
c00115bb:	a3 64 e2 02 c0       	mov    ds:0xc002e264,eax
c00115c0:	e8 a5 fe ff ff       	call   c001146a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115c5:	59                   	pop    ecx
c00115c6:	89 e8                	mov    eax,ebp
c00115c8:	5b                   	pop    ebx
c00115c9:	c1 e0 0c             	shl    eax,0xc
c00115cc:	83 c4 1c             	add    esp,0x1c
c00115cf:	5b                   	pop    ebx
c00115d0:	5e                   	pop    esi
c00115d1:	5f                   	pop    edi
c00115d2:	5d                   	pop    ebp
c00115d3:	c3                   	ret    

c00115d4 <Virt::freeSwapfilePage(unsigned long)>:
c00115d4:	53                   	push   ebx
c00115d5:	8b 15 2c f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f42c
c00115db:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115df:	b8 01 00 00 00       	mov    eax,0x1
c00115e4:	89 cb                	mov    ebx,ecx
c00115e6:	d3 e0                	shl    eax,cl
c00115e8:	c1 eb 05             	shr    ebx,0x5
c00115eb:	f7 d0                	not    eax
c00115ed:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00115f0:	5b                   	pop    ebx
c00115f1:	c3                   	ret    

c00115f2 <Virt::swapIDToSector(unsigned long)>:
c00115f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115f6:	0f af 05 6c e2 02 c0 	imul   eax,DWORD PTR ds:0xc002e26c
c00115fd:	03 05 74 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e274
c0011603:	c3                   	ret    

c0011604 <Virt::allocateSwapfilePage()>:
c0011604:	55                   	push   ebp
c0011605:	31 d2                	xor    edx,edx
c0011607:	57                   	push   edi
c0011608:	56                   	push   esi
c0011609:	53                   	push   ebx
c001160a:	83 ec 0c             	sub    esp,0xc
c001160d:	8b 0d 6c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e26c
c0011613:	a1 70 e2 02 c0       	mov    eax,ds:0xc002e270
c0011618:	f7 f1                	div    ecx
c001161a:	39 0d 70 e2 02 c0    	cmp    DWORD PTR ds:0xc002e270,ecx
c0011620:	72 2d                	jb     c001164f <Virt::allocateSwapfilePage()+0x4b>
c0011622:	8b 35 2c f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f42c
c0011628:	8b 16                	mov    edx,DWORD PTR [esi]
c001162a:	f6 c2 01             	test   dl,0x1
c001162d:	74 3c                	je     c001166b <Virt::allocateSwapfilePage()+0x67>
c001162f:	31 c9                	xor    ecx,ecx
c0011631:	bf 01 00 00 00       	mov    edi,0x1
c0011636:	eb 12                	jmp    c001164a <Virt::allocateSwapfilePage()+0x46>
c0011638:	89 fd                	mov    ebp,edi
c001163a:	89 ca                	mov    edx,ecx
c001163c:	d3 e5                	shl    ebp,cl
c001163e:	c1 ea 05             	shr    edx,0x5
c0011641:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011644:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011646:	85 ea                	test   edx,ebp
c0011648:	74 2a                	je     c0011674 <Virt::allocateSwapfilePage()+0x70>
c001164a:	41                   	inc    ecx
c001164b:	39 c8                	cmp    eax,ecx
c001164d:	77 e9                	ja     c0011638 <Virt::allocateSwapfilePage()+0x34>
c001164f:	83 ec 0c             	sub    esp,0xc
c0011652:	68 df af 02 c0       	push   0xc002afdf
c0011657:	e8 a3 8c 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c001165c:	83 c4 10             	add    esp,0x10
c001165f:	31 c9                	xor    ecx,ecx
c0011661:	83 c4 0c             	add    esp,0xc
c0011664:	89 c8                	mov    eax,ecx
c0011666:	5b                   	pop    ebx
c0011667:	5e                   	pop    esi
c0011668:	5f                   	pop    edi
c0011669:	5d                   	pop    ebp
c001166a:	c3                   	ret    
c001166b:	89 f3                	mov    ebx,esi
c001166d:	bd 01 00 00 00       	mov    ebp,0x1
c0011672:	31 c9                	xor    ecx,ecx
c0011674:	09 ea                	or     edx,ebp
c0011676:	89 c8                	mov    eax,ecx
c0011678:	89 13                	mov    DWORD PTR [ebx],edx
c001167a:	83 c4 0c             	add    esp,0xc
c001167d:	5b                   	pop    ebx
c001167e:	5e                   	pop    esi
c001167f:	5f                   	pop    edi
c0011680:	5d                   	pop    ebp
c0011681:	c3                   	ret    

c0011682 <Virt::virtualMemorySetup()>:
c0011682:	53                   	push   ebx
c0011683:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011688:	83 ec 08             	sub    esp,0x8
c001168b:	6a 0f                	push   0xf
c001168d:	53                   	push   ebx
c001168e:	43                   	inc    ebx
c001168f:	e8 d6 fd ff ff       	call   c001146a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011694:	59                   	pop    ecx
c0011695:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001169b:	58                   	pop    eax
c001169c:	75 ed                	jne    c001168b <Virt::virtualMemorySetup()+0x9>
c001169e:	83 ec 08             	sub    esp,0x8
c00116a1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00116a6:	68 00 00 00 c8       	push   0xc8000000
c00116ab:	68 f6 af 02 c0       	push   0xc002aff6
c00116b0:	e8 14 12 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00116b5:	58                   	pop    eax
c00116b6:	5a                   	pop    edx
c00116b7:	68 00 f0 ff ef       	push   0xeffff000
c00116bc:	68 0a b0 02 c0       	push   0xc002b00a
c00116c1:	e8 03 12 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00116c6:	83 c4 10             	add    esp,0x10
c00116c9:	83 ec 08             	sub    esp,0x8
c00116cc:	6a 00                	push   0x0
c00116ce:	53                   	push   ebx
c00116cf:	43                   	inc    ebx
c00116d0:	e8 95 fd ff ff       	call   c001146a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116d5:	83 c4 10             	add    esp,0x10
c00116d8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00116de:	75 e9                	jne    c00116c9 <Virt::virtualMemorySetup()+0x47>
c00116e0:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00116e5:	83 ec 08             	sub    esp,0x8
c00116e8:	6a 0f                	push   0xf
c00116ea:	53                   	push   ebx
c00116eb:	43                   	inc    ebx
c00116ec:	e8 79 fd ff ff       	call   c001146a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116f1:	83 c4 10             	add    esp,0x10
c00116f4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00116fa:	75 e9                	jne    c00116e5 <Virt::virtualMemorySetup()+0x63>
c00116fc:	83 c4 08             	add    esp,0x8
c00116ff:	5b                   	pop    ebx
c0011700:	c3                   	ret    

c0011701 <Virt::setupPageSwapping(int)>:
c0011701:	57                   	push   edi
c0011702:	56                   	push   esi
c0011703:	53                   	push   ebx
c0011704:	83 ec 1c             	sub    esp,0x1c
c0011707:	68 1e b0 02 c0       	push   0xc002b01e
c001170c:	e8 b8 11 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0011711:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011718:	e8 6f e1 ff ff       	call   c000f88c <malloc>
c001171d:	83 c4 0c             	add    esp,0xc
c0011720:	89 c6                	mov    esi,eax
c0011722:	ff 35 10 28 03 c0    	push   DWORD PTR ds:0xc0032810
c0011728:	68 32 b0 02 c0       	push   0xc002b032
c001172d:	50                   	push   eax
c001172e:	e8 f5 16 00 00       	call   c0012e28 <File::File(char const*, Process*)>
c0011733:	89 34 24             	mov    DWORD PTR [esp],esi
c0011736:	e8 c9 18 00 00       	call   c0013004 <File::unlink()>
c001173b:	59                   	pop    ecx
c001173c:	5b                   	pop    ebx
c001173d:	6a 12                	push   0x12
c001173f:	56                   	push   esi
c0011740:	e8 47 17 00 00       	call   c0012e8c <File::open(FileOpenMode)>
c0011745:	83 c4 10             	add    esp,0x10
c0011748:	85 c0                	test   eax,eax
c001174a:	0f 85 5b 01 00 00    	jne    c00118ab <Virt::setupPageSwapping(int)+0x1aa>
c0011750:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011754:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001175c:	c1 e3 08             	shl    ebx,0x8
c001175f:	83 ec 0c             	sub    esp,0xc
c0011762:	68 00 00 01 00       	push   0x10000
c0011767:	e8 20 e1 ff ff       	call   c000f88c <malloc>
c001176c:	83 c4 0c             	add    esp,0xc
c001176f:	89 c7                	mov    edi,eax
c0011771:	68 00 00 01 00       	push   0x10000
c0011776:	68 ee 00 00 00       	push   0xee
c001177b:	50                   	push   eax
c001177c:	e8 cf ef fe ff       	call   c0000750 <memset>
c0011781:	83 c4 10             	add    esp,0x10
c0011784:	85 db                	test   ebx,ebx
c0011786:	79 03                	jns    c001178b <Virt::setupPageSwapping(int)+0x8a>
c0011788:	83 c3 0f             	add    ebx,0xf
c001178b:	c1 fb 04             	sar    ebx,0x4
c001178e:	4b                   	dec    ebx
c001178f:	83 fb ff             	cmp    ebx,0xffffffff
c0011792:	74 4f                	je     c00117e3 <Virt::setupPageSwapping(int)+0xe2>
c0011794:	83 ec 0c             	sub    esp,0xc
c0011797:	8b 06                	mov    eax,DWORD PTR [esi]
c0011799:	8d 54 24 18          	lea    edx,[esp+0x18]
c001179d:	52                   	push   edx
c001179e:	57                   	push   edi
c001179f:	6a 00                	push   0x0
c00117a1:	68 00 00 01 00       	push   0x10000
c00117a6:	56                   	push   esi
c00117a7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00117aa:	83 c4 20             	add    esp,0x20
c00117ad:	85 c0                	test   eax,eax
c00117af:	0f 85 e0 00 00 00    	jne    c0011895 <Virt::setupPageSwapping(int)+0x194>
c00117b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117b9:	3d 00 00 01 00       	cmp    eax,0x10000
c00117be:	74 ce                	je     c001178e <Virt::setupPageSwapping(int)+0x8d>
c00117c0:	83 ec 08             	sub    esp,0x8
c00117c3:	4b                   	dec    ebx
c00117c4:	50                   	push   eax
c00117c5:	68 85 b0 02 c0       	push   0xc002b085
c00117ca:	e8 fa 10 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00117cf:	c7 04 24 8e b0 02 c0 	mov    DWORD PTR [esp],0xc002b08e
c00117d6:	e8 24 8b 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c00117db:	83 c4 10             	add    esp,0x10
c00117de:	83 fb ff             	cmp    ebx,0xffffffff
c00117e1:	75 b1                	jne    c0011794 <Virt::setupPageSwapping(int)+0x93>
c00117e3:	83 ec 0c             	sub    esp,0xc
c00117e6:	56                   	push   esi
c00117e7:	e8 fe 16 00 00       	call   c0012eea <File::close()>
c00117ec:	89 3c 24             	mov    DWORD PTR [esp],edi
c00117ef:	e8 b8 e0 ff ff       	call   c000f8ac <rfree>
c00117f4:	83 c4 10             	add    esp,0x10
c00117f7:	85 f6                	test   esi,esi
c00117f9:	74 0c                	je     c0011807 <Virt::setupPageSwapping(int)+0x106>
c00117fb:	83 ec 0c             	sub    esp,0xc
c00117fe:	8b 06                	mov    eax,DWORD PTR [esi]
c0011800:	56                   	push   esi
c0011801:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011804:	83 c4 10             	add    esp,0x10
c0011807:	83 ec 08             	sub    esp,0x8
c001180a:	a1 c8 f8 02 c0       	mov    eax,ds:0xc002f8c8
c001180f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011815:	8b 10                	mov    edx,DWORD PTR [eax]
c0011817:	68 32 b0 02 c0       	push   0xc002b032
c001181c:	50                   	push   eax
c001181d:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011820:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011824:	c6 05 78 e2 02 c0 43 	mov    BYTE PTR ds:0xc002e278,0x43
c001182b:	c1 e2 0b             	shl    edx,0xb
c001182e:	a3 74 e2 02 c0       	mov    ds:0xc002e274,eax
c0011833:	89 15 70 e2 02 c0    	mov    DWORD PTR ds:0xc002e270,edx
c0011839:	c7 05 6c e2 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002e26c,0x8
c0011843:	c1 ea 08             	shr    edx,0x8
c0011846:	89 14 24             	mov    DWORD PTR [esp],edx
c0011849:	e8 3e e0 ff ff       	call   c000f88c <malloc>
c001184e:	83 c4 0c             	add    esp,0xc
c0011851:	89 c1                	mov    ecx,eax
c0011853:	a3 2c f4 02 c0       	mov    ds:0xc002f42c,eax
c0011858:	31 d2                	xor    edx,edx
c001185a:	a1 70 e2 02 c0       	mov    eax,ds:0xc002e270
c001185f:	f7 35 6c e2 02 c0    	div    DWORD PTR ds:0xc002e26c
c0011865:	c1 e8 05             	shr    eax,0x5
c0011868:	50                   	push   eax
c0011869:	6a 00                	push   0x0
c001186b:	51                   	push   ecx
c001186c:	e8 df ee fe ff       	call   c0000750 <memset>
c0011871:	58                   	pop    eax
c0011872:	a1 70 e2 02 c0       	mov    eax,ds:0xc002e270
c0011877:	5a                   	pop    edx
c0011878:	31 d2                	xor    edx,edx
c001187a:	f7 35 6c e2 02 c0    	div    DWORD PTR ds:0xc002e26c
c0011880:	c1 e8 05             	shr    eax,0x5
c0011883:	50                   	push   eax
c0011884:	68 94 b0 02 c0       	push   0xc002b094
c0011889:	e8 3b 10 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001188e:	83 c4 20             	add    esp,0x20
c0011891:	5b                   	pop    ebx
c0011892:	5e                   	pop    esi
c0011893:	5f                   	pop    edi
c0011894:	c3                   	ret    
c0011895:	83 ec 08             	sub    esp,0x8
c0011898:	50                   	push   eax
c0011899:	68 6d b0 02 c0       	push   0xc002b06d
c001189e:	e8 26 10 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00118a3:	83 c4 10             	add    esp,0x10
c00118a6:	e9 0a ff ff ff       	jmp    c00117b5 <Virt::setupPageSwapping(int)+0xb4>
c00118ab:	83 ec 08             	sub    esp,0x8
c00118ae:	50                   	push   eax
c00118af:	68 49 b0 02 c0       	push   0xc002b049
c00118b4:	e8 10 10 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00118b9:	c7 04 24 52 b0 02 c0 	mov    DWORD PTR [esp],0xc002b052
c00118c0:	e8 3a 8a 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c00118c5:	83 c4 10             	add    esp,0x10
c00118c8:	e9 83 fe ff ff       	jmp    c0011750 <Virt::setupPageSwapping(int)+0x4f>
c00118cd:	90                   	nop

c00118ce <VAS::VAS()>:
c00118ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118dd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00118e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118e8:	a3 30 f4 02 c0       	mov    ds:0xc002f430,eax
c00118ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118f1:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00118f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118f9:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00118fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011900:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011907:	90                   	nop
c0011908:	c3                   	ret    
c0011909:	90                   	nop

c001190a <VAS::VAS(VAS*)>:
c001190a:	83 ec 0c             	sub    esp,0xc
c001190d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011911:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001191c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011923:	83 ec 0c             	sub    esp,0xc
c0011926:	68 78 ae 02 c0       	push   0xc002ae78
c001192b:	e8 cf 89 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0011930:	83 c4 10             	add    esp,0x10
c0011933:	90                   	nop
c0011934:	83 c4 0c             	add    esp,0xc
c0011937:	c3                   	ret    

c0011938 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011938:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001193c:	89 c2                	mov    edx,eax
c001193e:	c1 e8 0a             	shr    eax,0xa
c0011941:	c1 ea 16             	shr    edx,0x16
c0011944:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011949:	19 c9                	sbb    ecx,ecx
c001194b:	c1 e2 0c             	shl    edx,0xc
c001194e:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011954:	25 fc 0f 00 00       	and    eax,0xffc
c0011959:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011960:	01 d0                	add    eax,edx
c0011962:	c3                   	ret    
c0011963:	90                   	nop

c0011964 <VAS::getPageTableEntry(unsigned long)>:
c0011964:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011968:	89 ca                	mov    edx,ecx
c001196a:	c1 e9 0a             	shr    ecx,0xa
c001196d:	c1 ea 16             	shr    edx,0x16
c0011970:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011976:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001197c:	c1 e0 0c             	shl    eax,0xc
c001197f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011982:	c3                   	ret    

c0011983 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011983:	57                   	push   edi
c0011984:	56                   	push   esi
c0011985:	be 01 00 00 00       	mov    esi,0x1
c001198a:	53                   	push   ebx
c001198b:	83 ec 10             	sub    esp,0x10
c001198e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011992:	c1 eb 0c             	shr    ebx,0xc
c0011995:	eb 3f                	jmp    c00119d6 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011997:	83 ec 08             	sub    esp,0x8
c001199a:	57                   	push   edi
c001199b:	ff 35 30 f4 02 c0    	push   DWORD PTR ds:0xc002f430
c00119a1:	e8 be ff ff ff       	call   c0011964 <VAS::getPageTableEntry(unsigned long)>
c00119a6:	83 c4 10             	add    esp,0x10
c00119a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00119ab:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119af:	f6 c4 04             	test   ah,0x4
c00119b2:	75 5f                	jne    c0011a13 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00119b4:	80 fa 04             	cmp    dl,0x4
c00119b7:	74 78                	je     c0011a31 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00119b9:	80 fa 02             	cmp    dl,0x2
c00119bc:	0f 84 88 00 00 00    	je     c0011a4a <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00119c2:	80 fa 03             	cmp    dl,0x3
c00119c5:	0f 84 ad 00 00 00    	je     c0011a78 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00119cb:	fe ca                	dec    dl
c00119cd:	0f 84 92 00 00 00    	je     c0011a65 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00119d3:	43                   	inc    ebx
c00119d4:	31 f6                	xor    esi,esi
c00119d6:	53                   	push   ebx
c00119d7:	89 df                	mov    edi,ebx
c00119d9:	e8 c1 fa ff ff       	call   c001149f <Virt::getPageState(unsigned long)>
c00119de:	c1 e7 0c             	shl    edi,0xc
c00119e1:	59                   	pop    ecx
c00119e2:	84 c0                	test   al,al
c00119e4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00119e8:	75 ad                	jne    c0011997 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00119ea:	83 ec 0c             	sub    esp,0xc
c00119ed:	68 af b0 02 c0       	push   0xc002b0af
c00119f2:	e8 08 89 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c00119f7:	58                   	pop    eax
c00119f8:	5a                   	pop    edx
c00119f9:	57                   	push   edi
c00119fa:	ff 35 30 f4 02 c0    	push   DWORD PTR ds:0xc002f430
c0011a00:	e8 5f ff ff ff       	call   c0011964 <VAS::getPageTableEntry(unsigned long)>
c0011a05:	83 c4 10             	add    esp,0x10
c0011a08:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a0a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a0e:	f6 c4 04             	test   ah,0x4
c0011a11:	74 c0                	je     c00119d3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a13:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011a17:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a1c:	83 ec 0c             	sub    esp,0xc
c0011a1f:	50                   	push   eax
c0011a20:	e8 0a e1 ff ff       	call   c000fb2f <Phys::freePage(unsigned long)>
c0011a25:	83 c4 10             	add    esp,0x10
c0011a28:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a2c:	80 fa 04             	cmp    dl,0x4
c0011a2f:	75 88                	jne    c00119b9 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011a31:	89 f0                	mov    eax,esi
c0011a33:	84 c0                	test   al,al
c0011a35:	75 47                	jne    c0011a7e <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011a37:	c7 44 24 20 9c ae 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ae9c
c0011a3f:	83 c4 10             	add    esp,0x10
c0011a42:	5b                   	pop    ebx
c0011a43:	5e                   	pop    esi
c0011a44:	5f                   	pop    edi
c0011a45:	e9 b5 88 00 00       	jmp    c001a2ff <Krnl::panic(char const*)>
c0011a4a:	89 f0                	mov    eax,esi
c0011a4c:	84 c0                	test   al,al
c0011a4e:	75 15                	jne    c0011a65 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a50:	83 ec 0c             	sub    esp,0xc
c0011a53:	68 cb b0 02 c0       	push   0xc002b0cb
c0011a58:	e8 a2 88 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0011a5d:	83 c4 10             	add    esp,0x10
c0011a60:	e9 6e ff ff ff       	jmp    c00119d3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a65:	83 ec 08             	sub    esp,0x8
c0011a68:	6a 00                	push   0x0
c0011a6a:	53                   	push   ebx
c0011a6b:	e8 fa f9 ff ff       	call   c001146a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a70:	83 c4 10             	add    esp,0x10
c0011a73:	e9 5b ff ff ff       	jmp    c00119d3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a78:	89 f0                	mov    eax,esi
c0011a7a:	84 c0                	test   al,al
c0011a7c:	75 15                	jne    c0011a93 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011a7e:	83 ec 08             	sub    esp,0x8
c0011a81:	6a 00                	push   0x0
c0011a83:	53                   	push   ebx
c0011a84:	e8 e1 f9 ff ff       	call   c001146a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a89:	83 c4 10             	add    esp,0x10
c0011a8c:	83 c4 10             	add    esp,0x10
c0011a8f:	5b                   	pop    ebx
c0011a90:	5e                   	pop    esi
c0011a91:	5f                   	pop    edi
c0011a92:	c3                   	ret    
c0011a93:	c7 44 24 20 e7 b0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b0e7
c0011a9b:	83 c4 10             	add    esp,0x10
c0011a9e:	5b                   	pop    ebx
c0011a9f:	5e                   	pop    esi
c0011aa0:	5f                   	pop    edi
c0011aa1:	e9 59 88 00 00       	jmp    c001a2ff <Krnl::panic(char const*)>

c0011aa6 <VAS::freeAllocatedPages(unsigned long)>:
c0011aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011aaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011aae:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011ab2:	74 09                	je     c0011abd <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011ab4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011ab8:	e9 c6 fe ff ff       	jmp    c0011983 <Virt::freeKernelVirtualPages(unsigned long)>
c0011abd:	c7 44 24 04 c0 ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aec0
c0011ac5:	e9 ff 0d 00 00       	jmp    c00128c9 <Dbg::kprintf(char const*, ...)>

c0011aca <VAS::virtualToPhysical(unsigned long)>:
c0011aca:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011ace:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011ad2:	e8 8d fe ff ff       	call   c0011964 <VAS::getPageTableEntry(unsigned long)>
c0011ad7:	5a                   	pop    edx
c0011ad8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ada:	59                   	pop    ecx
c0011adb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ae0:	c3                   	ret    
c0011ae1:	90                   	nop

c0011ae2 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011ae2:	55                   	push   ebp
c0011ae3:	57                   	push   edi
c0011ae4:	56                   	push   esi
c0011ae5:	53                   	push   ebx
c0011ae6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011aea:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011aee:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011af2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011af6:	85 db                	test   ebx,ebx
c0011af8:	7e 22                	jle    c0011b1c <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011afa:	c1 e3 0c             	shl    ebx,0xc
c0011afd:	01 f3                	add    ebx,esi
c0011aff:	56                   	push   esi
c0011b00:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b06:	55                   	push   ebp
c0011b07:	e8 58 fe ff ff       	call   c0011964 <VAS::getPageTableEntry(unsigned long)>
c0011b0c:	5a                   	pop    edx
c0011b0d:	59                   	pop    ecx
c0011b0e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011b10:	21 f9                	and    ecx,edi
c0011b12:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011b16:	39 f3                	cmp    ebx,esi
c0011b18:	89 08                	mov    DWORD PTR [eax],ecx
c0011b1a:	75 e3                	jne    c0011aff <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011b1c:	5b                   	pop    ebx
c0011b1d:	5e                   	pop    esi
c0011b1e:	5f                   	pop    edi
c0011b1f:	5d                   	pop    ebp
c0011b20:	c3                   	ret    
c0011b21:	90                   	nop

c0011b22 <VAS::setToWriteCombining(unsigned long, int)>:
c0011b22:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0011b27:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b2d:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011b34:	75 01                	jne    c0011b37 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011b36:	c3                   	ret    
c0011b37:	68 80 00 00 00       	push   0x80
c0011b3c:	6a ff                	push   0xffffffff
c0011b3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b4a:	e8 93 ff ff ff       	call   c0011ae2 <VAS::reflagRange(unsigned long, int, int, int)>
c0011b4f:	83 c4 14             	add    esp,0x14
c0011b52:	c3                   	ret    
c0011b53:	90                   	nop

c0011b54 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011b54:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b5d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b64:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011b67:	19 c0                	sbb    eax,eax
c0011b69:	83 ca 03             	or     edx,0x3
c0011b6c:	83 e0 fc             	and    eax,0xfffffffc
c0011b6f:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011b76:	0f 20 d8             	mov    eax,cr3
c0011b79:	0f 22 d8             	mov    cr3,eax
c0011b7c:	c3                   	ret    
c0011b7d:	90                   	nop

c0011b7e <VAS::~VAS()>:
c0011b7e:	83 ec 2c             	sub    esp,0x2c
c0011b81:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011b89:	fa                   	cli    
c0011b8a:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c0011b8f:	40                   	inc    eax
c0011b90:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c0011b95:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011b9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b9c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b9f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011ba5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011ba9:	6a 01                	push   0x1
c0011bab:	50                   	push   eax
c0011bac:	e8 a3 ff ff ff       	call   c0011b54 <VAS::mapOtherVASIn(bool, VAS*)>
c0011bb1:	83 c4 0c             	add    esp,0xc
c0011bb4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011bbc:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011bc4:	0f 8f d4 00 00 00    	jg     c0011c9e <VAS::~VAS()+0x120>
c0011bca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011bce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011bd1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011bd5:	c1 e2 02             	shl    edx,0x2
c0011bd8:	01 d0                	add    eax,edx
c0011bda:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bdc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011be4:	83 e0 01             	and    eax,0x1
c0011be7:	0f 84 a8 00 00 00    	je     c0011c95 <VAS::~VAS()+0x117>
c0011bed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011bf5:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011bfd:	7f 72                	jg     c0011c71 <VAS::~VAS()+0xf3>
c0011bff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c03:	c1 e0 0a             	shl    eax,0xa
c0011c06:	89 c2                	mov    edx,eax
c0011c08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c0c:	01 d0                	add    eax,edx
c0011c0e:	c1 e0 0c             	shl    eax,0xc
c0011c11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c15:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c1c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c1f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011c29:	6a 01                	push   0x1
c0011c2b:	50                   	push   eax
c0011c2c:	e8 07 fd ff ff       	call   c0011938 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011c31:	83 c4 0c             	add    esp,0xc
c0011c34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c3e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c46:	25 01 04 00 00       	and    eax,0x401
c0011c4b:	3d 01 04 00 00       	cmp    eax,0x401
c0011c50:	75 19                	jne    c0011c6b <VAS::~VAS()+0xed>
c0011c52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c56:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c5b:	83 ec 0c             	sub    esp,0xc
c0011c5e:	50                   	push   eax
c0011c5f:	e8 cb de ff ff       	call   c000fb2f <Phys::freePage(unsigned long)>
c0011c64:	83 c4 10             	add    esp,0x10
c0011c67:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c6b:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011c6f:	eb 84                	jmp    c0011bf5 <VAS::~VAS()+0x77>
c0011c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c75:	25 00 04 00 00       	and    eax,0x400
c0011c7a:	74 19                	je     c0011c95 <VAS::~VAS()+0x117>
c0011c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c80:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c85:	83 ec 0c             	sub    esp,0xc
c0011c88:	50                   	push   eax
c0011c89:	e8 a1 de ff ff       	call   c000fb2f <Phys::freePage(unsigned long)>
c0011c8e:	83 c4 10             	add    esp,0x10
c0011c91:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c95:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011c99:	e9 1e ff ff ff       	jmp    c0011bbc <VAS::~VAS()+0x3e>
c0011c9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ca2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ca5:	83 ec 0c             	sub    esp,0xc
c0011ca8:	50                   	push   eax
c0011ca9:	e8 d5 fc ff ff       	call   c0011983 <Virt::freeKernelVirtualPages(unsigned long)>
c0011cae:	83 c4 10             	add    esp,0x10
c0011cb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cb5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011cb8:	83 ec 0c             	sub    esp,0xc
c0011cbb:	50                   	push   eax
c0011cbc:	e8 6e de ff ff       	call   c000fb2f <Phys::freePage(unsigned long)>
c0011cc1:	83 c4 10             	add    esp,0x10
c0011cc4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ccc:	c1 e0 02             	shl    eax,0x2
c0011ccf:	83 ec 08             	sub    esp,0x8
c0011cd2:	50                   	push   eax
c0011cd3:	68 e4 ae 02 c0       	push   0xc002aee4
c0011cd8:	e8 ec 0b 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0011cdd:	83 c4 10             	add    esp,0x10
c0011ce0:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c0011ce5:	48                   	dec    eax
c0011ce6:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c0011ceb:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c0011cf0:	85 c0                	test   eax,eax
c0011cf2:	75 01                	jne    c0011cf5 <VAS::~VAS()+0x177>
c0011cf4:	fb                   	sti    
c0011cf5:	90                   	nop
c0011cf6:	83 c4 2c             	add    esp,0x2c
c0011cf9:	c3                   	ret    

c0011cfa <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011cfa:	55                   	push   ebp
c0011cfb:	57                   	push   edi
c0011cfc:	56                   	push   esi
c0011cfd:	53                   	push   ebx
c0011cfe:	83 ec 1c             	sub    esp,0x1c
c0011d01:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d05:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d09:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d0f:	77 08                	ja     c0011d19 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011d11:	0f 20 d8             	mov    eax,cr3
c0011d14:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011d17:	75 47                	jne    c0011d60 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011d19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d1d:	09 d8                	or     eax,ebx
c0011d1f:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d24:	75 57                	jne    c0011d7d <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d26:	89 de                	mov    esi,ebx
c0011d28:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d2b:	c1 ee 16             	shr    esi,0x16
c0011d2e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011d35:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011d39:	74 54                	je     c0011d8f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011d3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d3f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011d45:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011d49:	c1 e6 0c             	shl    esi,0xc
c0011d4c:	c1 eb 0a             	shr    ebx,0xa
c0011d4f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011d55:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011d58:	83 c4 1c             	add    esp,0x1c
c0011d5b:	5b                   	pop    ebx
c0011d5c:	5e                   	pop    esi
c0011d5d:	5f                   	pop    edi
c0011d5e:	5d                   	pop    ebp
c0011d5f:	c3                   	ret    
c0011d60:	83 ec 0c             	sub    esp,0xc
c0011d63:	68 04 af 02 c0       	push   0xc002af04
c0011d68:	e8 5c 0b 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0011d6d:	83 c4 10             	add    esp,0x10
c0011d70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d74:	09 d8                	or     eax,ebx
c0011d76:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d7b:	74 a9                	je     c0011d26 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d7d:	83 ec 0c             	sub    esp,0xc
c0011d80:	68 6c af 02 c0       	push   0xc002af6c
c0011d85:	e8 75 85 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0011d8a:	83 c4 10             	add    esp,0x10
c0011d8d:	eb 97                	jmp    c0011d26 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d8f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d93:	e8 f2 dd ff ff       	call   c000fb8a <Phys::allocatePage()>
c0011d98:	83 ec 0c             	sub    esp,0xc
c0011d9b:	89 c5                	mov    ebp,eax
c0011d9d:	8b 0d 30 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f430
c0011da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011da7:	6a 01                	push   0x1
c0011da9:	e8 15 f7 ff ff       	call   c00114c3 <Virt::allocateKernelVirtualPages(int)>
c0011dae:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011db5:	6a 01                	push   0x1
c0011db7:	50                   	push   eax
c0011db8:	55                   	push   ebp
c0011db9:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dbf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dc3:	51                   	push   ecx
c0011dc4:	e8 27 02 00 00       	call   c0011ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dc9:	83 c4 1c             	add    esp,0x1c
c0011dcc:	68 00 10 00 00       	push   0x1000
c0011dd1:	6a 00                	push   0x0
c0011dd3:	50                   	push   eax
c0011dd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dd8:	e8 73 e9 fe ff       	call   c0000750 <memset>
c0011ddd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011de1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011de4:	e8 9a fb ff ff       	call   c0011983 <Virt::freeKernelVirtualPages(unsigned long)>
c0011de9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ded:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011df0:	83 c4 10             	add    esp,0x10
c0011df3:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011df6:	e9 40 ff ff ff       	jmp    c0011d3b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011dfb:	90                   	nop

c0011dfc <VAS::allocatePages(int, int)>:
c0011dfc:	55                   	push   ebp
c0011dfd:	57                   	push   edi
c0011dfe:	56                   	push   esi
c0011dff:	53                   	push   ebx
c0011e00:	83 ec 1c             	sub    esp,0x1c
c0011e03:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e07:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0011e0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e12:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e18:	83 e0 01             	and    eax,0x1
c0011e1b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e1f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e23:	0f 85 cc 00 00 00    	jne    c0011ef5 <VAS::allocatePages(int, int)+0xf9>
c0011e29:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e30:	85 c0                	test   eax,eax
c0011e32:	0f 84 a1 00 00 00    	je     c0011ed9 <VAS::allocatePages(int, int)+0xdd>
c0011e38:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011e3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e40:	c1 e6 0c             	shl    esi,0xc
c0011e43:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011e47:	85 c0                	test   eax,eax
c0011e49:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011e4c:	7e 33                	jle    c0011e81 <VAS::allocatePages(int, int)+0x85>
c0011e4e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011e52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e56:	81 cd 00 04 00 00    	or     ebp,0x400
c0011e5c:	e8 29 dd ff ff       	call   c000fb8a <Phys::allocatePage()>
c0011e61:	55                   	push   ebp
c0011e62:	53                   	push   ebx
c0011e63:	50                   	push   eax
c0011e64:	57                   	push   edi
c0011e65:	e8 90 fe ff ff       	call   c0011cfa <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e6a:	83 c4 10             	add    esp,0x10
c0011e6d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e72:	74 03                	je     c0011e77 <VAS::allocatePages(int, int)+0x7b>
c0011e74:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e77:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e7d:	39 de                	cmp    esi,ebx
c0011e7f:	75 db                	jne    c0011e5c <VAS::allocatePages(int, int)+0x60>
c0011e81:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e86:	75 12                	jne    c0011e9a <VAS::allocatePages(int, int)+0x9e>
c0011e88:	0f 20 d8             	mov    eax,cr3
c0011e8b:	0f 22 d8             	mov    cr3,eax
c0011e8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e92:	83 c4 1c             	add    esp,0x1c
c0011e95:	5b                   	pop    ebx
c0011e96:	5e                   	pop    esi
c0011e97:	5f                   	pop    edi
c0011e98:	5d                   	pop    ebp
c0011e99:	c3                   	ret    
c0011e9a:	c1 ee 0a             	shr    esi,0xa
c0011e9d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ea1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ea7:	c1 eb 0a             	shr    ebx,0xa
c0011eaa:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011eb0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011eb6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ebc:	39 c3                	cmp    ebx,eax
c0011ebe:	77 ce                	ja     c0011e8e <VAS::allocatePages(int, int)+0x92>
c0011ec0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ec3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ec9:	39 d8                	cmp    eax,ebx
c0011ecb:	73 f3                	jae    c0011ec0 <VAS::allocatePages(int, int)+0xc4>
c0011ecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ed1:	83 c4 1c             	add    esp,0x1c
c0011ed4:	5b                   	pop    ebx
c0011ed5:	5e                   	pop    esi
c0011ed6:	5f                   	pop    edi
c0011ed7:	5d                   	pop    ebp
c0011ed8:	c3                   	ret    
c0011ed9:	83 ec 0c             	sub    esp,0xc
c0011edc:	68 90 af 02 c0       	push   0xc002af90
c0011ee1:	e8 19 84 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0011ee6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ee9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011eed:	83 c4 10             	add    esp,0x10
c0011ef0:	e9 43 ff ff ff       	jmp    c0011e38 <VAS::allocatePages(int, int)+0x3c>
c0011ef5:	83 ec 0c             	sub    esp,0xc
c0011ef8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011efc:	e8 c2 f5 ff ff       	call   c00114c3 <Virt::allocateKernelVirtualPages(int)>
c0011f01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f05:	83 c4 10             	add    esp,0x10
c0011f08:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f0d:	0f 87 9b 00 00 00    	ja     c0011fae <VAS::allocatePages(int, int)+0x1b2>
c0011f13:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f17:	85 d2                	test   edx,edx
c0011f19:	7e 3c                	jle    c0011f57 <VAS::allocatePages(int, int)+0x15b>
c0011f1b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f1f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f27:	c1 e5 0c             	shl    ebp,0xc
c0011f2a:	81 ce 00 04 00 00    	or     esi,0x400
c0011f30:	01 dd                	add    ebp,ebx
c0011f32:	e8 53 dc ff ff       	call   c000fb8a <Phys::allocatePage()>
c0011f37:	56                   	push   esi
c0011f38:	53                   	push   ebx
c0011f39:	50                   	push   eax
c0011f3a:	57                   	push   edi
c0011f3b:	e8 ba fd ff ff       	call   c0011cfa <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f40:	83 c4 10             	add    esp,0x10
c0011f43:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f48:	74 03                	je     c0011f4d <VAS::allocatePages(int, int)+0x151>
c0011f4a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f4d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f53:	39 dd                	cmp    ebp,ebx
c0011f55:	75 db                	jne    c0011f32 <VAS::allocatePages(int, int)+0x136>
c0011f57:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f5c:	0f 84 26 ff ff ff    	je     c0011e88 <VAS::allocatePages(int, int)+0x8c>
c0011f62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f6a:	89 d3                	mov    ebx,edx
c0011f6c:	c1 e0 0c             	shl    eax,0xc
c0011f6f:	c1 eb 0a             	shr    ebx,0xa
c0011f72:	01 d0                	add    eax,edx
c0011f74:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f7a:	c1 e8 0a             	shr    eax,0xa
c0011f7d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f83:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f88:	2d 00 00 40 00       	sub    eax,0x400000
c0011f8d:	39 c3                	cmp    ebx,eax
c0011f8f:	0f 87 f9 fe ff ff    	ja     c0011e8e <VAS::allocatePages(int, int)+0x92>
c0011f95:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f98:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f9e:	39 d8                	cmp    eax,ebx
c0011fa0:	73 f3                	jae    c0011f95 <VAS::allocatePages(int, int)+0x199>
c0011fa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fa6:	83 c4 1c             	add    esp,0x1c
c0011fa9:	5b                   	pop    ebx
c0011faa:	5e                   	pop    esi
c0011fab:	5f                   	pop    edi
c0011fac:	5d                   	pop    ebp
c0011fad:	c3                   	ret    
c0011fae:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0011fb3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fb9:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011fc0:	0f 84 4d ff ff ff    	je     c0011f13 <VAS::allocatePages(int, int)+0x117>
c0011fc6:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011fce:	e9 40 ff ff ff       	jmp    c0011f13 <VAS::allocatePages(int, int)+0x117>
c0011fd3:	90                   	nop

c0011fd4 <VAS::setCPUSpecific(unsigned long)>:
c0011fd4:	83 ec 0c             	sub    esp,0xc
c0011fd7:	6a 05                	push   0x5
c0011fd9:	68 00 00 40 c2       	push   0xc2400000
c0011fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fe6:	e8 0f fd ff ff       	call   c0011cfa <VAS::mapPage(unsigned long, unsigned long, int)>
c0011feb:	83 c4 1c             	add    esp,0x1c
c0011fee:	c3                   	ret    
c0011fef:	90                   	nop

c0011ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011ff0:	55                   	push   ebp
c0011ff1:	57                   	push   edi
c0011ff2:	56                   	push   esi
c0011ff3:	53                   	push   ebx
c0011ff4:	83 ec 1c             	sub    esp,0x1c
c0011ff7:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0011ffc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012000:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012006:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001200a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012010:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012014:	83 e0 01             	and    eax,0x1
c0012017:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001201b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001201f:	85 c0                	test   eax,eax
c0012021:	7e 39                	jle    c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012023:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012027:	89 f3                	mov    ebx,esi
c0012029:	c1 e0 0c             	shl    eax,0xc
c001202c:	01 f0                	add    eax,esi
c001202e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012032:	55                   	push   ebp
c0012033:	53                   	push   ebx
c0012034:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012038:	29 f0                	sub    eax,esi
c001203a:	01 d8                	add    eax,ebx
c001203c:	50                   	push   eax
c001203d:	57                   	push   edi
c001203e:	e8 b7 fc ff ff       	call   c0011cfa <VAS::mapPage(unsigned long, unsigned long, int)>
c0012043:	83 c4 10             	add    esp,0x10
c0012046:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001204b:	74 03                	je     c0012050 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001204d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012050:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012056:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001205a:	75 d6                	jne    c0012032 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001205c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012061:	75 10                	jne    c0012073 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012063:	0f 20 d8             	mov    eax,cr3
c0012066:	0f 22 d8             	mov    cr3,eax
c0012069:	83 c4 1c             	add    esp,0x1c
c001206c:	89 f0                	mov    eax,esi
c001206e:	5b                   	pop    ebx
c001206f:	5e                   	pop    esi
c0012070:	5f                   	pop    edi
c0012071:	5d                   	pop    ebp
c0012072:	c3                   	ret    
c0012073:	89 f3                	mov    ebx,esi
c0012075:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012079:	c1 eb 0a             	shr    ebx,0xa
c001207c:	c1 e0 0c             	shl    eax,0xc
c001207f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012085:	01 f0                	add    eax,esi
c0012087:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001208d:	c1 e8 0a             	shr    eax,0xa
c0012090:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012095:	2d 00 00 40 00       	sub    eax,0x400000
c001209a:	39 c3                	cmp    ebx,eax
c001209c:	77 cb                	ja     c0012069 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001209e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120a7:	39 d8                	cmp    eax,ebx
c00120a9:	73 f3                	jae    c001209e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00120ab:	83 c4 1c             	add    esp,0x1c
c00120ae:	89 f0                	mov    eax,esi
c00120b0:	5b                   	pop    ebx
c00120b1:	5e                   	pop    esi
c00120b2:	5f                   	pop    edi
c00120b3:	5d                   	pop    ebp
c00120b4:	c3                   	ret    
c00120b5:	90                   	nop

c00120b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00120b6:	55                   	push   ebp
c00120b7:	57                   	push   edi
c00120b8:	56                   	push   esi
c00120b9:	53                   	push   ebx
c00120ba:	83 ec 1c             	sub    esp,0x1c
c00120bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120c1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00120c5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00120c9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00120cd:	a9 ff 0f 00 00       	test   eax,0xfff
c00120d2:	75 4a                	jne    c001211e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00120d4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00120d8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00120db:	c1 eb 16             	shr    ebx,0x16
c00120de:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00120e5:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00120e9:	74 4d                	je     c0012138 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00120eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120ef:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00120f3:	c1 e8 0a             	shr    eax,0xa
c00120f6:	80 fa 01             	cmp    dl,0x1
c00120f9:	19 d2                	sbb    edx,edx
c00120fb:	c1 e3 0c             	shl    ebx,0xc
c00120fe:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012102:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012108:	25 fc 0f 00 00       	and    eax,0xffc
c001210d:	01 d8                	add    eax,ebx
c001210f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012116:	83 c4 1c             	add    esp,0x1c
c0012119:	5b                   	pop    ebx
c001211a:	5e                   	pop    esi
c001211b:	5f                   	pop    edi
c001211c:	5d                   	pop    ebp
c001211d:	c3                   	ret    
c001211e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012122:	83 ec 0c             	sub    esp,0xc
c0012125:	68 bc af 02 c0       	push   0xc002afbc
c001212a:	e8 d0 81 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c001212f:	83 c4 10             	add    esp,0x10
c0012132:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012136:	eb 9c                	jmp    c00120d4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012138:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001213c:	e8 49 da ff ff       	call   c000fb8a <Phys::allocatePage()>
c0012141:	83 ec 0c             	sub    esp,0xc
c0012144:	89 c5                	mov    ebp,eax
c0012146:	8b 0d 30 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f430
c001214c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012150:	6a 01                	push   0x1
c0012152:	e8 6c f3 ff ff       	call   c00114c3 <Virt::allocateKernelVirtualPages(int)>
c0012157:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001215e:	6a 01                	push   0x1
c0012160:	50                   	push   eax
c0012161:	55                   	push   ebp
c0012162:	81 cd 07 04 00 00    	or     ebp,0x407
c0012168:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001216c:	51                   	push   ecx
c001216d:	e8 7e fe ff ff       	call   c0011ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012172:	83 c4 1c             	add    esp,0x1c
c0012175:	68 00 10 00 00       	push   0x1000
c001217a:	6a 00                	push   0x0
c001217c:	50                   	push   eax
c001217d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012181:	e8 ca e5 fe ff       	call   c0000750 <memset>
c0012186:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001218a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001218d:	e8 f1 f7 ff ff       	call   c0011983 <Virt::freeKernelVirtualPages(unsigned long)>
c0012192:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012195:	83 c4 10             	add    esp,0x10
c0012198:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001219b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001219f:	e9 47 ff ff ff       	jmp    c00120eb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00121a4 <VAS::VAS(bool)>:
c00121a4:	53                   	push   ebx
c00121a5:	83 ec 28             	sub    esp,0x28
c00121a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00121b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00121c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121ca:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00121ce:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00121d1:	e8 b4 d9 ff ff       	call   c000fb8a <Phys::allocatePage()>
c00121d6:	89 c2                	mov    edx,eax
c00121d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121dc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00121df:	8b 1d 30 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f430
c00121e5:	83 ec 0c             	sub    esp,0xc
c00121e8:	6a 01                	push   0x1
c00121ea:	e8 d4 f2 ff ff       	call   c00114c3 <Virt::allocateKernelVirtualPages(int)>
c00121ef:	83 c4 10             	add    esp,0x10
c00121f2:	89 c2                	mov    edx,eax
c00121f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00121fb:	83 ec 0c             	sub    esp,0xc
c00121fe:	6a 03                	push   0x3
c0012200:	6a 01                	push   0x1
c0012202:	52                   	push   edx
c0012203:	50                   	push   eax
c0012204:	53                   	push   ebx
c0012205:	e8 e6 fd ff ff       	call   c0011ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001220a:	83 c4 20             	add    esp,0x20
c001220d:	89 c2                	mov    edx,eax
c001220f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012213:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012216:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001221e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012226:	7f 1c                	jg     c0012244 <VAS::VAS(bool)+0xa0>
c0012228:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001222c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001222f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012233:	c1 e2 02             	shl    edx,0x2
c0012236:	01 d0                	add    eax,edx
c0012238:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001223e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012242:	eb da                	jmp    c001221e <VAS::VAS(bool)+0x7a>
c0012244:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001224c:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012254:	7f 7a                	jg     c00122d0 <VAS::VAS(bool)+0x12c>
c0012256:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001225a:	2d 00 02 00 00       	sub    eax,0x200
c001225f:	c1 e0 0c             	shl    eax,0xc
c0012262:	83 c8 03             	or     eax,0x3
c0012265:	89 c2                	mov    edx,eax
c0012267:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001226c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012272:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012278:	83 e0 10             	and    eax,0x10
c001227b:	84 c0                	test   al,al
c001227d:	74 07                	je     c0012286 <VAS::VAS(bool)+0xe2>
c001227f:	b8 00 01 00 00       	mov    eax,0x100
c0012284:	eb 05                	jmp    c001228b <VAS::VAS(bool)+0xe7>
c0012286:	b8 00 00 00 00       	mov    eax,0x0
c001228b:	09 d0                	or     eax,edx
c001228d:	89 c1                	mov    ecx,eax
c001228f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012293:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012296:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001229a:	c1 e2 02             	shl    edx,0x2
c001229d:	01 d0                	add    eax,edx
c001229f:	89 ca                	mov    edx,ecx
c00122a1:	89 10                	mov    DWORD PTR [eax],edx
c00122a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122a7:	2d 40 03 00 00       	sub    eax,0x340
c00122ac:	83 f8 7f             	cmp    eax,0x7f
c00122af:	77 16                	ja     c00122c7 <VAS::VAS(bool)+0x123>
c00122b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122b5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122bc:	c1 e2 02             	shl    edx,0x2
c00122bf:	01 d0                	add    eax,edx
c00122c1:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122c7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122cb:	e9 7c ff ff ff       	jmp    c001224c <VAS::VAS(bool)+0xa8>
c00122d0:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00122d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122db:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122e1:	83 e0 10             	and    eax,0x10
c00122e4:	84 c0                	test   al,al
c00122e6:	74 07                	je     c00122ef <VAS::VAS(bool)+0x14b>
c00122e8:	b8 03 41 00 00       	mov    eax,0x4103
c00122ed:	eb 05                	jmp    c00122f4 <VAS::VAS(bool)+0x150>
c00122ef:	b8 03 40 00 00       	mov    eax,0x4003
c00122f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00122f8:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00122fb:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012301:	89 02                	mov    DWORD PTR [edx],eax
c0012303:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0012308:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001230e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012314:	83 ec 08             	sub    esp,0x8
c0012317:	50                   	push   eax
c0012318:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001231c:	e8 b3 fc ff ff       	call   c0011fd4 <VAS::setCPUSpecific(unsigned long)>
c0012321:	83 c4 10             	add    esp,0x10
c0012324:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012328:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001232b:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0012330:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012336:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001233c:	83 e0 10             	and    eax,0x10
c001233f:	84 c0                	test   al,al
c0012341:	74 07                	je     c001234a <VAS::VAS(bool)+0x1a6>
c0012343:	b8 00 01 00 00       	mov    eax,0x100
c0012348:	eb 05                	jmp    c001234f <VAS::VAS(bool)+0x1ab>
c001234a:	b8 00 00 00 00       	mov    eax,0x0
c001234f:	09 c2                	or     edx,eax
c0012351:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012355:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012358:	05 fc 0f 00 00       	add    eax,0xffc
c001235d:	83 ca 03             	or     edx,0x3
c0012360:	89 10                	mov    DWORD PTR [eax],edx
c0012362:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0012367:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001236d:	83 ec 0c             	sub    esp,0xc
c0012370:	50                   	push   eax
c0012371:	e8 8c 1c 00 00       	call   c0014002 <Device::getName()>
c0012376:	83 c4 10             	add    esp,0x10
c0012379:	83 ec 08             	sub    esp,0x8
c001237c:	68 01 b1 02 c0       	push   0xc002b101
c0012381:	50                   	push   eax
c0012382:	e8 11 e5 fe ff       	call   c0000898 <strcmp>
c0012387:	83 c4 10             	add    esp,0x10
c001238a:	85 c0                	test   eax,eax
c001238c:	0f 94 c0             	sete   al
c001238f:	84 c0                	test   al,al
c0012391:	0f 84 87 00 00 00    	je     c001241e <VAS::VAS(bool)+0x27a>
c0012397:	fa                   	cli    
c0012398:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001239d:	40                   	inc    eax
c001239e:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c00123a3:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00123a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123ae:	05 7c 09 00 00       	add    eax,0x97c
c00123b3:	83 ec 0c             	sub    esp,0xc
c00123b6:	50                   	push   eax
c00123b7:	e8 52 cf ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123bc:	83 c4 10             	add    esp,0x10
c00123bf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123c4:	89 c3                	mov    ebx,eax
c00123c6:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00123cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123d1:	05 7c 09 00 00       	add    eax,0x97c
c00123d6:	83 ec 0c             	sub    esp,0xc
c00123d9:	50                   	push   eax
c00123da:	e8 2f cf ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123df:	83 c4 10             	add    esp,0x10
c00123e2:	83 ec 08             	sub    esp,0x8
c00123e5:	50                   	push   eax
c00123e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123ea:	e8 75 f5 ff ff       	call   c0011964 <VAS::getPageTableEntry(unsigned long)>
c00123ef:	83 c4 10             	add    esp,0x10
c00123f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00123f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123f9:	6a 11                	push   0x11
c00123fb:	53                   	push   ebx
c00123fc:	50                   	push   eax
c00123fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012401:	e8 f4 f8 ff ff       	call   c0011cfa <VAS::mapPage(unsigned long, unsigned long, int)>
c0012406:	83 c4 10             	add    esp,0x10
c0012409:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001240e:	48                   	dec    eax
c001240f:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c0012414:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c0012419:	85 c0                	test   eax,eax
c001241b:	75 01                	jne    c001241e <VAS::VAS(bool)+0x27a>
c001241d:	fb                   	sti    
c001241e:	90                   	nop
c001241f:	83 c4 28             	add    esp,0x28
c0012422:	5b                   	pop    ebx
c0012423:	c3                   	ret    

c0012424 <VAS::evict(unsigned long)>:
c0012424:	55                   	push   ebp
c0012425:	57                   	push   edi
c0012426:	56                   	push   esi
c0012427:	53                   	push   ebx
c0012428:	83 ec 1c             	sub    esp,0x1c
c001242b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001242f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012433:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012437:	e8 c8 f1 ff ff       	call   c0011604 <Virt::allocateSwapfilePage()>
c001243c:	89 c7                	mov    edi,eax
c001243e:	a1 6c e2 02 c0       	mov    eax,ds:0xc002e26c
c0012443:	85 c0                	test   eax,eax
c0012445:	7e 3d                	jle    c0012484 <VAS::evict(unsigned long)+0x60>
c0012447:	89 ee                	mov    esi,ebp
c0012449:	31 db                	xor    ebx,ebx
c001244b:	83 ec 0c             	sub    esp,0xc
c001244e:	57                   	push   edi
c001244f:	e8 9e f1 ff ff       	call   c00115f2 <Virt::swapIDToSector(unsigned long)>
c0012454:	89 34 24             	mov    DWORD PTR [esp],esi
c0012457:	01 d8                	add    eax,ebx
c0012459:	6a 01                	push   0x1
c001245b:	31 d2                	xor    edx,edx
c001245d:	43                   	inc    ebx
c001245e:	52                   	push   edx
c001245f:	81 c6 00 02 00 00    	add    esi,0x200
c0012465:	50                   	push   eax
c0012466:	0f be 05 78 e2 02 c0 	movsx  eax,BYTE PTR ds:0xc002e278
c001246d:	ff 34 85 bc f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd0844]
c0012474:	e8 39 3e 00 00       	call   c00162b2 <LogicalDisk::write(unsigned long long, int, void*)>
c0012479:	83 c4 20             	add    esp,0x20
c001247c:	39 1d 6c e2 02 c0    	cmp    DWORD PTR ds:0xc002e26c,ebx
c0012482:	7f c7                	jg     c001244b <VAS::evict(unsigned long)+0x27>
c0012484:	83 ec 08             	sub    esp,0x8
c0012487:	c1 e7 0b             	shl    edi,0xb
c001248a:	55                   	push   ebp
c001248b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001248f:	e8 d0 f4 ff ff       	call   c0011964 <VAS::getPageTableEntry(unsigned long)>
c0012494:	83 c4 0c             	add    esp,0xc
c0012497:	8b 10                	mov    edx,DWORD PTR [eax]
c0012499:	81 e2 fe 07 00 00    	and    edx,0x7fe
c001249f:	09 d7                	or     edi,edx
c00124a1:	89 38                	mov    DWORD PTR [eax],edi
c00124a3:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c00124a8:	40                   	inc    eax
c00124a9:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c00124ae:	0f 20 da             	mov    edx,cr3
c00124b1:	0f 22 da             	mov    cr3,edx
c00124b4:	50                   	push   eax
c00124b5:	55                   	push   ebp
c00124b6:	68 0f b1 02 c0       	push   0xc002b10f
c00124bb:	e8 09 04 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00124c0:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c00124c5:	c7 44 24 40 24 b1 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b124
c00124cd:	8d 50 01             	lea    edx,[eax+0x1]
c00124d0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00124d4:	89 15 24 f4 02 c0    	mov    DWORD PTR ds:0xc002f424,edx
c00124da:	83 c4 2c             	add    esp,0x2c
c00124dd:	5b                   	pop    ebx
c00124de:	5e                   	pop    esi
c00124df:	5f                   	pop    edi
c00124e0:	5d                   	pop    ebp
c00124e1:	e9 e3 03 00 00       	jmp    c00128c9 <Dbg::kprintf(char const*, ...)>

c00124e6 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00124e6:	55                   	push   ebp
c00124e7:	57                   	push   edi
c00124e8:	56                   	push   esi
c00124e9:	53                   	push   ebx
c00124ea:	83 ec 0c             	sub    esp,0xc
c00124ed:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00124f1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00124f7:	0f 84 dc 00 00 00    	je     c00125d9 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c00124fd:	56                   	push   esi
c00124fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012502:	e8 5d f4 ff ff       	call   c0011964 <VAS::getPageTableEntry(unsigned long)>
c0012507:	5b                   	pop    ebx
c0012508:	85 c0                	test   eax,eax
c001250a:	5f                   	pop    edi
c001250b:	89 c3                	mov    ebx,eax
c001250d:	0f 84 c6 00 00 00    	je     c00125d9 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012513:	8b 38                	mov    edi,DWORD PTR [eax]
c0012515:	31 c0                	xor    eax,eax
c0012517:	89 fa                	mov    edx,edi
c0012519:	81 e2 01 04 00 00    	and    edx,0x401
c001251f:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012525:	0f 85 b0 00 00 00    	jne    c00125db <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c001252b:	e8 5a d6 ff ff       	call   c000fb8a <Phys::allocatePage()>
c0012530:	c1 ef 0b             	shr    edi,0xb
c0012533:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012535:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001253b:	09 c2                	or     edx,eax
c001253d:	81 ca 01 08 00 00    	or     edx,0x801
c0012543:	89 13                	mov    DWORD PTR [ebx],edx
c0012545:	8b 0d 6c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e26c
c001254b:	85 c9                	test   ecx,ecx
c001254d:	7e 3d                	jle    c001258c <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c001254f:	89 f5                	mov    ebp,esi
c0012551:	31 db                	xor    ebx,ebx
c0012553:	83 ec 0c             	sub    esp,0xc
c0012556:	57                   	push   edi
c0012557:	e8 96 f0 ff ff       	call   c00115f2 <Virt::swapIDToSector(unsigned long)>
c001255c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001255f:	01 d8                	add    eax,ebx
c0012561:	6a 01                	push   0x1
c0012563:	31 d2                	xor    edx,edx
c0012565:	43                   	inc    ebx
c0012566:	52                   	push   edx
c0012567:	81 c5 00 02 00 00    	add    ebp,0x200
c001256d:	50                   	push   eax
c001256e:	0f be 05 78 e2 02 c0 	movsx  eax,BYTE PTR ds:0xc002e278
c0012575:	ff 34 85 bc f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd0844]
c001257c:	e8 c5 3c 00 00       	call   c0016246 <LogicalDisk::read(unsigned long long, int, void*)>
c0012581:	83 c4 20             	add    esp,0x20
c0012584:	39 1d 6c e2 02 c0    	cmp    DWORD PTR ds:0xc002e26c,ebx
c001258a:	7f c7                	jg     c0012553 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c001258c:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c0012591:	48                   	dec    eax
c0012592:	52                   	push   edx
c0012593:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c0012598:	50                   	push   eax
c0012599:	56                   	push   esi
c001259a:	68 35 b1 02 c0       	push   0xc002b135
c001259f:	e8 25 03 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00125a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125a7:	e8 28 f0 ff ff       	call   c00115d4 <Virt::freeSwapfilePage(unsigned long)>
c00125ac:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c00125b1:	83 c4 10             	add    esp,0x10
c00125b4:	48                   	dec    eax
c00125b5:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c00125ba:	85 c0                	test   eax,eax
c00125bc:	75 01                	jne    c00125bf <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c00125be:	fb                   	sti    
c00125bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125c3:	25 ff 0f 00 00       	and    eax,0xfff
c00125c8:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00125cd:	77 14                	ja     c00125e3 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c00125cf:	0f 20 d8             	mov    eax,cr3
c00125d2:	0f 22 d8             	mov    cr3,eax
c00125d5:	b0 01                	mov    al,0x1
c00125d7:	eb 02                	jmp    c00125db <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c00125d9:	31 c0                	xor    eax,eax
c00125db:	83 c4 0c             	add    esp,0xc
c00125de:	5b                   	pop    ebx
c00125df:	5e                   	pop    esi
c00125e0:	5f                   	pop    edi
c00125e1:	5d                   	pop    ebp
c00125e2:	c3                   	ret    
c00125e3:	83 ec 0c             	sub    esp,0xc
c00125e6:	68 4a b1 02 c0       	push   0xc002b14a
c00125eb:	e8 d9 02 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00125f0:	83 c4 10             	add    esp,0x10
c00125f3:	eb da                	jmp    c00125cf <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c00125f5:	90                   	nop

c00125f6 <VAS::scanForEviction()>:
c00125f6:	57                   	push   edi
c00125f7:	56                   	push   esi
c00125f8:	53                   	push   ebx
c00125f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00125fd:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012600:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012606:	75 0e                	jne    c0012616 <VAS::scanForEviction()+0x20>
c0012608:	89 da                	mov    edx,ebx
c001260a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001260d:	c1 ea 16             	shr    edx,0x16
c0012610:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012614:	74 48                	je     c001265e <VAS::scanForEviction()+0x68>
c0012616:	53                   	push   ebx
c0012617:	56                   	push   esi
c0012618:	e8 47 f3 ff ff       	call   c0011964 <VAS::getPageTableEntry(unsigned long)>
c001261d:	5a                   	pop    edx
c001261e:	8b 38                	mov    edi,DWORD PTR [eax]
c0012620:	59                   	pop    ecx
c0012621:	89 fa                	mov    edx,edi
c0012623:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012629:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c001262f:	74 3d                	je     c001266e <VAS::scanForEviction()+0x78>
c0012631:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012637:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c001263d:	76 2a                	jbe    c0012669 <VAS::scanForEviction()+0x73>
c001263f:	31 db                	xor    ebx,ebx
c0012641:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012648:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001264e:	75 c6                	jne    c0012616 <VAS::scanForEviction()+0x20>
c0012650:	89 da                	mov    edx,ebx
c0012652:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012655:	c1 ea 16             	shr    edx,0x16
c0012658:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001265c:	75 b8                	jne    c0012616 <VAS::scanForEviction()+0x20>
c001265e:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012664:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012667:	eb 97                	jmp    c0012600 <VAS::scanForEviction()+0xa>
c0012669:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001266c:	eb 92                	jmp    c0012600 <VAS::scanForEviction()+0xa>
c001266e:	f7 c7 01 00 00 00    	test   edi,0x1
c0012674:	74 bb                	je     c0012631 <VAS::scanForEviction()+0x3b>
c0012676:	f7 c7 20 00 00 00    	test   edi,0x20
c001267c:	74 0a                	je     c0012688 <VAS::scanForEviction()+0x92>
c001267e:	83 e7 df             	and    edi,0xffffffdf
c0012681:	89 38                	mov    DWORD PTR [eax],edi
c0012683:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012686:	eb a9                	jmp    c0012631 <VAS::scanForEviction()+0x3b>
c0012688:	83 ec 08             	sub    esp,0x8
c001268b:	53                   	push   ebx
c001268c:	56                   	push   esi
c001268d:	e8 92 fd ff ff       	call   c0012424 <VAS::evict(unsigned long)>
c0012692:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012699:	83 c4 10             	add    esp,0x10
c001269c:	89 f8                	mov    eax,edi
c001269e:	5b                   	pop    ebx
c001269f:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126a4:	5e                   	pop    esi
c00126a5:	5f                   	pop    edi
c00126a6:	c3                   	ret    

c00126a7 <mapVASFirstTime>:
c00126a7:	55                   	push   ebp
c00126a8:	57                   	push   edi
c00126a9:	56                   	push   esi
c00126aa:	53                   	push   ebx
c00126ab:	83 ec 0c             	sub    esp,0xc
c00126ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126b3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00126b6:	4a                   	dec    edx
c00126b7:	0f 84 8e 00 00 00    	je     c001274b <mapVASFirstTime+0xa4>
c00126bd:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00126c0:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00126c3:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00126c8:	c1 e5 15             	shl    ebp,0x15
c00126cb:	be 00 90 e7 01       	mov    esi,0x1e79000
c00126d0:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00126d6:	29 eb                	sub    ebx,ebp
c00126d8:	29 ee                	sub    esi,ebp
c00126da:	e8 ab d4 ff ff       	call   c000fb8a <Phys::allocatePage()>
c00126df:	83 ec 0c             	sub    esp,0xc
c00126e2:	68 03 04 00 00       	push   0x403
c00126e7:	6a 01                	push   0x1
c00126e9:	53                   	push   ebx
c00126ea:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00126f0:	50                   	push   eax
c00126f1:	57                   	push   edi
c00126f2:	e8 f9 f8 ff ff       	call   c0011ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126f7:	83 c4 20             	add    esp,0x20
c00126fa:	39 f3                	cmp    ebx,esi
c00126fc:	75 dc                	jne    c00126da <mapVASFirstTime+0x33>
c00126fe:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012703:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012708:	29 ee                	sub    esi,ebp
c001270a:	29 e8                	sub    eax,ebp
c001270c:	89 c5                	mov    ebp,eax
c001270e:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012712:	19 db                	sbb    ebx,ebx
c0012714:	e8 71 d4 ff ff       	call   c000fb8a <Phys::allocatePage()>
c0012719:	83 e3 04             	and    ebx,0x4
c001271c:	83 ec 0c             	sub    esp,0xc
c001271f:	81 c3 03 04 00 00    	add    ebx,0x403
c0012725:	53                   	push   ebx
c0012726:	6a 01                	push   0x1
c0012728:	56                   	push   esi
c0012729:	81 ee 00 10 00 00    	sub    esi,0x1000
c001272f:	50                   	push   eax
c0012730:	57                   	push   edi
c0012731:	e8 ba f8 ff ff       	call   c0011ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012736:	83 c4 20             	add    esp,0x20
c0012739:	39 f5                	cmp    ebp,esi
c001273b:	75 d1                	jne    c001270e <mapVASFirstTime+0x67>
c001273d:	0f 20 d8             	mov    eax,cr3
c0012740:	0f 22 d8             	mov    cr3,eax
c0012743:	83 c4 0c             	add    esp,0xc
c0012746:	5b                   	pop    ebx
c0012747:	5e                   	pop    esi
c0012748:	5f                   	pop    edi
c0012749:	5d                   	pop    ebp
c001274a:	c3                   	ret    
c001274b:	83 ec 0c             	sub    esp,0xc
c001274e:	68 5a b1 02 c0       	push   0xc002b15a
c0012753:	e8 71 01 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0012758:	83 c4 10             	add    esp,0x10
c001275b:	83 c4 0c             	add    esp,0xc
c001275e:	5b                   	pop    ebx
c001275f:	5e                   	pop    esi
c0012760:	5f                   	pop    edi
c0012761:	5d                   	pop    ebp
c0012762:	c3                   	ret    

c0012763 <__cxa_atexit>:
c0012763:	31 c0                	xor    eax,eax
c0012765:	c3                   	ret    

c0012766 <__cxa_finalize>:
c0012766:	c3                   	ret    

c0012767 <__stack_chk_fail>:
c0012767:	55                   	push   ebp
c0012768:	89 e5                	mov    ebp,esp
c001276a:	83 ec 14             	sub    esp,0x14
c001276d:	68 73 b1 02 c0       	push   0xc002b173
c0012772:	e8 52 01 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0012777:	58                   	pop    eax
c0012778:	5a                   	pop    edx
c0012779:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001277c:	68 c3 b1 02 c0       	push   0xc002b1c3
c0012781:	e8 43 01 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0012786:	59                   	pop    ecx
c0012787:	58                   	pop    eax
c0012788:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001278b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001278e:	68 c3 b1 02 c0       	push   0xc002b1c3
c0012793:	e8 31 01 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0012798:	5a                   	pop    edx
c0012799:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001279c:	59                   	pop    ecx
c001279d:	8b 00                	mov    eax,DWORD PTR [eax]
c001279f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127a2:	68 c3 b1 02 c0       	push   0xc002b1c3
c00127a7:	e8 1d 01 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00127ac:	5a                   	pop    edx
c00127ad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127b0:	59                   	pop    ecx
c00127b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00127b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00127b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127b8:	68 c3 b1 02 c0       	push   0xc002b1c3
c00127bd:	e8 07 01 00 00       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00127c2:	c7 04 24 cb b1 02 c0 	mov    DWORD PTR [esp],0xc002b1cb
c00127c9:	e8 31 7b 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c00127ce:	83 c4 10             	add    esp,0x10
c00127d1:	c9                   	leave  
c00127d2:	c3                   	ret    

c00127d3 <__cxa_pure_virtual>:
c00127d3:	83 ec 18             	sub    esp,0x18
c00127d6:	68 e3 b1 02 c0       	push   0xc002b1e3
c00127db:	e8 1f 7b 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c00127e0:	83 c4 1c             	add    esp,0x1c
c00127e3:	c3                   	ret    

c00127e4 <operator new[](unsigned long)>:
c00127e4:	e9 a3 d0 ff ff       	jmp    c000f88c <malloc>

c00127e9 <operator delete(void*, unsigned long)>:
c00127e9:	e9 be d0 ff ff       	jmp    c000f8ac <rfree>

c00127ee <operator delete[](void*)>:
c00127ee:	e9 b9 d0 ff ff       	jmp    c000f8ac <rfree>

c00127f3 <operator delete[](void*, unsigned long)>:
c00127f3:	e9 b4 d0 ff ff       	jmp    c000f8ac <rfree>

c00127f8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00127f8:	57                   	push   edi
c00127f9:	b9 3f 00 00 00       	mov    ecx,0x3f
c00127fe:	56                   	push   esi
c00127ff:	be f8 b1 02 c0       	mov    esi,0xc002b1f8
c0012804:	53                   	push   ebx
c0012805:	83 ec 40             	sub    esp,0x40
c0012808:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001280c:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012810:	fc                   	cld    
c0012811:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012813:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012817:	83 f9 3e             	cmp    ecx,0x3e
c001281a:	7e 05                	jle    c0012821 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c001281c:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012821:	89 df                	mov    edi,ebx
c0012823:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012827:	eb 02                	jmp    c001282b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012829:	89 c7                	mov    edi,eax
c001282b:	31 d2                	xor    edx,edx
c001282d:	46                   	inc    esi
c001282e:	89 f8                	mov    eax,edi
c0012830:	f7 f1                	div    ecx
c0012832:	39 cf                	cmp    edi,ecx
c0012834:	73 f3                	jae    c0012829 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012836:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012839:	eb 02                	jmp    c001283d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c001283b:	89 c3                	mov    ebx,eax
c001283d:	31 d2                	xor    edx,edx
c001283f:	4e                   	dec    esi
c0012840:	89 d8                	mov    eax,ebx
c0012842:	f7 f1                	div    ecx
c0012844:	39 cb                	cmp    ebx,ecx
c0012846:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c001284a:	88 16                	mov    BYTE PTR [esi],dl
c001284c:	73 ed                	jae    c001283b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c001284e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012852:	83 c4 40             	add    esp,0x40
c0012855:	5b                   	pop    ebx
c0012856:	5e                   	pop    esi
c0012857:	5f                   	pop    edi
c0012858:	c3                   	ret    

c0012859 <Dbg::logc(char)>:
c0012859:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001285d:	ba fd 03 00 00       	mov    edx,0x3fd
c0012862:	ec                   	in     al,dx
c0012863:	a8 20                	test   al,0x20
c0012865:	74 fb                	je     c0012862 <Dbg::logc(char)+0x9>
c0012867:	ba f8 03 00 00       	mov    edx,0x3f8
c001286c:	88 c8                	mov    al,cl
c001286e:	ee                   	out    dx,al
c001286f:	c3                   	ret    

c0012870 <Dbg::logs(char*)>:
c0012870:	53                   	push   ebx
c0012871:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012875:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012878:	84 c0                	test   al,al
c001287a:	74 0f                	je     c001288b <Dbg::logs(char*)+0x1b>
c001287c:	50                   	push   eax
c001287d:	43                   	inc    ebx
c001287e:	e8 d6 ff ff ff       	call   c0012859 <Dbg::logc(char)>
c0012883:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012886:	5a                   	pop    edx
c0012887:	84 c0                	test   al,al
c0012889:	75 f1                	jne    c001287c <Dbg::logs(char*)+0xc>
c001288b:	5b                   	pop    ebx
c001288c:	c3                   	ret    

c001288d <Dbg::logWriteInt(unsigned int)>:
c001288d:	83 ec 10             	sub    esp,0x10
c0012890:	6a 0a                	push   0xa
c0012892:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012896:	50                   	push   eax
c0012897:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001289b:	e8 58 ff ff ff       	call   c00127f8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128a0:	50                   	push   eax
c00128a1:	e8 ca ff ff ff       	call   c0012870 <Dbg::logs(char*)>
c00128a6:	83 c4 20             	add    esp,0x20
c00128a9:	c3                   	ret    

c00128aa <Dbg::logWriteIntBase(unsigned int, int)>:
c00128aa:	83 ec 10             	sub    esp,0x10
c00128ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128b1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128b5:	50                   	push   eax
c00128b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128ba:	e8 39 ff ff ff       	call   c00127f8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128bf:	50                   	push   eax
c00128c0:	e8 ab ff ff ff       	call   c0012870 <Dbg::logs(char*)>
c00128c5:	83 c4 20             	add    esp,0x20
c00128c8:	c3                   	ret    

c00128c9 <Dbg::kprintf(char const*, ...)>:
c00128c9:	55                   	push   ebp
c00128ca:	57                   	push   edi
c00128cb:	56                   	push   esi
c00128cc:	53                   	push   ebx
c00128cd:	83 ec 0c             	sub    esp,0xc
c00128d0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128d4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00128d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128dc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00128df:	84 c0                	test   al,al
c00128e1:	74 4a                	je     c001292d <Dbg::kprintf(char const*, ...)+0x64>
c00128e3:	31 db                	xor    ebx,ebx
c00128e5:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00128e8:	3c 25                	cmp    al,0x25
c00128ea:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00128ed:	0f 85 e4 00 00 00    	jne    c00129d7 <Dbg::kprintf(char const*, ...)+0x10e>
c00128f3:	83 c3 02             	add    ebx,0x2
c00128f6:	8a 07                	mov    al,BYTE PTR [edi]
c00128f8:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00128fb:	83 e8 25             	sub    eax,0x25
c00128fe:	3c 53                	cmp    al,0x53
c0012900:	0f 87 ba 00 00 00    	ja     c00129c0 <Dbg::kprintf(char const*, ...)+0xf7>
c0012906:	0f b6 c0             	movzx  eax,al
c0012909:	ff 24 85 38 b2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4dc8]
c0012910:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012914:	89 c8                	mov    eax,ecx
c0012916:	83 c1 04             	add    ecx,0x4
c0012919:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001291d:	ff 30                	push   DWORD PTR [eax]
c001291f:	e8 4c ff ff ff       	call   c0012870 <Dbg::logs(char*)>
c0012924:	58                   	pop    eax
c0012925:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012929:	84 c0                	test   al,al
c001292b:	75 b8                	jne    c00128e5 <Dbg::kprintf(char const*, ...)+0x1c>
c001292d:	83 c4 0c             	add    esp,0xc
c0012930:	5b                   	pop    ebx
c0012931:	5e                   	pop    esi
c0012932:	5f                   	pop    edi
c0012933:	5d                   	pop    ebp
c0012934:	c3                   	ret    
c0012935:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012939:	89 d0                	mov    eax,edx
c001293b:	83 c2 04             	add    edx,0x4
c001293e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012942:	ff 30                	push   DWORD PTR [eax]
c0012944:	e8 44 ff ff ff       	call   c001288d <Dbg::logWriteInt(unsigned int)>
c0012949:	58                   	pop    eax
c001294a:	eb d9                	jmp    c0012925 <Dbg::kprintf(char const*, ...)+0x5c>
c001294c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012950:	89 d0                	mov    eax,edx
c0012952:	83 c2 04             	add    edx,0x4
c0012955:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012958:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001295c:	50                   	push   eax
c001295d:	e8 f7 fe ff ff       	call   c0012859 <Dbg::logc(char)>
c0012962:	58                   	pop    eax
c0012963:	eb c0                	jmp    c0012925 <Dbg::kprintf(char const*, ...)+0x5c>
c0012965:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012969:	89 c8                	mov    eax,ecx
c001296b:	83 c1 04             	add    ecx,0x4
c001296e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012972:	ff 30                	push   DWORD PTR [eax]
c0012974:	e8 14 ff ff ff       	call   c001288d <Dbg::logWriteInt(unsigned int)>
c0012979:	5f                   	pop    edi
c001297a:	eb a9                	jmp    c0012925 <Dbg::kprintf(char const*, ...)+0x5c>
c001297c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012980:	89 c8                	mov    eax,ecx
c0012982:	83 c1 04             	add    ecx,0x4
c0012985:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012989:	6a 10                	push   0x10
c001298b:	ff 30                	push   DWORD PTR [eax]
c001298d:	e8 18 ff ff ff       	call   c00128aa <Dbg::logWriteIntBase(unsigned int, int)>
c0012992:	59                   	pop    ecx
c0012993:	5f                   	pop    edi
c0012994:	eb 8f                	jmp    c0012925 <Dbg::kprintf(char const*, ...)+0x5c>
c0012996:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001299a:	89 d0                	mov    eax,edx
c001299c:	83 c2 08             	add    edx,0x8
c001299f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129a3:	6a 10                	push   0x10
c00129a5:	ff 30                	push   DWORD PTR [eax]
c00129a7:	e8 fe fe ff ff       	call   c00128aa <Dbg::logWriteIntBase(unsigned int, int)>
c00129ac:	58                   	pop    eax
c00129ad:	5a                   	pop    edx
c00129ae:	e9 72 ff ff ff       	jmp    c0012925 <Dbg::kprintf(char const*, ...)+0x5c>
c00129b3:	6a 25                	push   0x25
c00129b5:	e8 9f fe ff ff       	call   c0012859 <Dbg::logc(char)>
c00129ba:	58                   	pop    eax
c00129bb:	e9 65 ff ff ff       	jmp    c0012925 <Dbg::kprintf(char const*, ...)+0x5c>
c00129c0:	6a 25                	push   0x25
c00129c2:	e8 92 fe ff ff       	call   c0012859 <Dbg::logc(char)>
c00129c7:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00129ca:	50                   	push   eax
c00129cb:	e8 89 fe ff ff       	call   c0012859 <Dbg::logc(char)>
c00129d0:	5a                   	pop    edx
c00129d1:	59                   	pop    ecx
c00129d2:	e9 4e ff ff ff       	jmp    c0012925 <Dbg::kprintf(char const*, ...)+0x5c>
c00129d7:	50                   	push   eax
c00129d8:	89 eb                	mov    ebx,ebp
c00129da:	e8 7a fe ff ff       	call   c0012859 <Dbg::logc(char)>
c00129df:	89 fd                	mov    ebp,edi
c00129e1:	58                   	pop    eax
c00129e2:	e9 3e ff ff ff       	jmp    c0012925 <Dbg::kprintf(char const*, ...)+0x5c>
c00129e7:	90                   	nop

c00129e8 <File::read(unsigned long long, void*, int*)>:
c00129e8:	53                   	push   ebx
c00129e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129f1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00129f8:	3c 19                	cmp    al,0x19
c00129fa:	77 35                	ja     c0012a31 <File::read(unsigned long long, void*, int*)+0x49>
c00129fc:	8b 04 85 c0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0740]
c0012a03:	85 c0                	test   eax,eax
c0012a05:	74 2a                	je     c0012a31 <File::read(unsigned long long, void*, int*)+0x49>
c0012a07:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a0d:	85 c0                	test   eax,eax
c0012a0f:	74 20                	je     c0012a31 <File::read(unsigned long long, void*, int*)+0x49>
c0012a11:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a15:	74 21                	je     c0012a38 <File::read(unsigned long long, void*, int*)+0x50>
c0012a17:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a19:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a1d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a27:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a2b:	5b                   	pop    ebx
c0012a2c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a2f:	ff e0                	jmp    eax
c0012a31:	b8 0b 00 00 00       	mov    eax,0xb
c0012a36:	eb 05                	jmp    c0012a3d <File::read(unsigned long long, void*, int*)+0x55>
c0012a38:	b8 05 00 00 00       	mov    eax,0x5
c0012a3d:	5b                   	pop    ebx
c0012a3e:	c3                   	ret    
c0012a3f:	90                   	nop

c0012a40 <File::write(unsigned long long, void*, int*)>:
c0012a40:	53                   	push   ebx
c0012a41:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a45:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a49:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a50:	3c 19                	cmp    al,0x19
c0012a52:	77 35                	ja     c0012a89 <File::write(unsigned long long, void*, int*)+0x49>
c0012a54:	8b 04 85 c0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0740]
c0012a5b:	85 c0                	test   eax,eax
c0012a5d:	74 2a                	je     c0012a89 <File::write(unsigned long long, void*, int*)+0x49>
c0012a5f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a65:	85 c0                	test   eax,eax
c0012a67:	74 20                	je     c0012a89 <File::write(unsigned long long, void*, int*)+0x49>
c0012a69:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a6d:	74 21                	je     c0012a90 <File::write(unsigned long long, void*, int*)+0x50>
c0012a6f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a71:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a75:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a83:	5b                   	pop    ebx
c0012a84:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012a87:	ff e0                	jmp    eax
c0012a89:	b8 0b 00 00 00       	mov    eax,0xb
c0012a8e:	eb 05                	jmp    c0012a95 <File::write(unsigned long long, void*, int*)+0x55>
c0012a90:	b8 05 00 00 00       	mov    eax,0x5
c0012a95:	5b                   	pop    ebx
c0012a96:	c3                   	ret    
c0012a97:	90                   	nop

c0012a98 <Directory::read(unsigned long long, void*, int*)>:
c0012a98:	53                   	push   ebx
c0012a99:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a9d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012aa1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012aa8:	3c 19                	cmp    al,0x19
c0012aaa:	77 35                	ja     c0012ae1 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012aac:	8b 04 85 c0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0740]
c0012ab3:	85 c0                	test   eax,eax
c0012ab5:	74 2a                	je     c0012ae1 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ab7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012abd:	85 c0                	test   eax,eax
c0012abf:	74 20                	je     c0012ae1 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ac1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ac5:	74 21                	je     c0012ae8 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012ac7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ac9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012acd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012ad3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ad7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012adb:	5b                   	pop    ebx
c0012adc:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012adf:	ff e0                	jmp    eax
c0012ae1:	b8 0b 00 00 00       	mov    eax,0xb
c0012ae6:	eb 05                	jmp    c0012aed <Directory::read(unsigned long long, void*, int*)+0x55>
c0012ae8:	b8 05 00 00 00       	mov    eax,0x5
c0012aed:	5b                   	pop    ebx
c0012aee:	c3                   	ret    
c0012aef:	90                   	nop

c0012af0 <Directory::write(unsigned long long, void*, int*)>:
c0012af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012af4:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012afb:	b8 0b 00 00 00       	mov    eax,0xb
c0012b00:	80 fa 19             	cmp    dl,0x19
c0012b03:	77 18                	ja     c0012b1d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b05:	8b 14 95 c0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0740]
c0012b0c:	85 d2                	test   edx,edx
c0012b0e:	74 0d                	je     c0012b1d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b10:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012b17:	19 c0                	sbb    eax,eax
c0012b19:	83 e0 0a             	and    eax,0xa
c0012b1c:	40                   	inc    eax
c0012b1d:	c3                   	ret    

c0012b1e <File::isAtty()>:
c0012b1e:	31 c0                	xor    eax,eax
c0012b20:	c3                   	ret    
c0012b21:	90                   	nop

c0012b22 <Directory::isAtty()>:
c0012b22:	31 c0                	xor    eax,eax
c0012b24:	c3                   	ret    
c0012b25:	90                   	nop

c0012b26 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b26:	b8 0a 00 00 00       	mov    eax,0xa
c0012b2b:	c3                   	ret    

c0012b2c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b2c:	b8 0a 00 00 00       	mov    eax,0xa
c0012b31:	c3                   	ret    

c0012b32 <Filesystem::getFileFirstSector(char const*)>:
c0012b32:	31 c0                	xor    eax,eax
c0012b34:	31 d2                	xor    edx,edx
c0012b36:	c3                   	ret    
c0012b37:	90                   	nop

c0012b38 <File::~File()>:
c0012b38:	83 ec 0c             	sub    esp,0xc
c0012b3b:	ba f8 b3 02 c0       	mov    edx,0xc002b3f8
c0012b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b44:	89 10                	mov    DWORD PTR [eax],edx
c0012b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b4a:	83 ec 0c             	sub    esp,0xc
c0012b4d:	50                   	push   eax
c0012b4e:	e8 0f e7 ff ff       	call   c0011262 <UnixFile::~UnixFile()>
c0012b53:	83 c4 10             	add    esp,0x10
c0012b56:	90                   	nop
c0012b57:	83 c4 0c             	add    esp,0xc
c0012b5a:	c3                   	ret    
c0012b5b:	90                   	nop

c0012b5c <File::~File()>:
c0012b5c:	83 ec 0c             	sub    esp,0xc
c0012b5f:	83 ec 0c             	sub    esp,0xc
c0012b62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b66:	e8 cd ff ff ff       	call   c0012b38 <File::~File()>
c0012b6b:	83 c4 10             	add    esp,0x10
c0012b6e:	83 ec 08             	sub    esp,0x8
c0012b71:	68 14 01 00 00       	push   0x114
c0012b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b7a:	e8 6a fc ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0012b7f:	83 c4 10             	add    esp,0x10
c0012b82:	83 c4 0c             	add    esp,0xc
c0012b85:	c3                   	ret    

c0012b86 <Directory::~Directory()>:
c0012b86:	83 ec 0c             	sub    esp,0xc
c0012b89:	ba 14 b4 02 c0       	mov    edx,0xc002b414
c0012b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b92:	89 10                	mov    DWORD PTR [eax],edx
c0012b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b98:	83 ec 0c             	sub    esp,0xc
c0012b9b:	50                   	push   eax
c0012b9c:	e8 c1 e6 ff ff       	call   c0011262 <UnixFile::~UnixFile()>
c0012ba1:	83 c4 10             	add    esp,0x10
c0012ba4:	90                   	nop
c0012ba5:	83 c4 0c             	add    esp,0xc
c0012ba8:	c3                   	ret    
c0012ba9:	90                   	nop

c0012baa <Directory::~Directory()>:
c0012baa:	83 ec 0c             	sub    esp,0xc
c0012bad:	83 ec 0c             	sub    esp,0xc
c0012bb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bb4:	e8 cd ff ff ff       	call   c0012b86 <Directory::~Directory()>
c0012bb9:	83 c4 10             	add    esp,0x10
c0012bbc:	83 ec 08             	sub    esp,0x8
c0012bbf:	68 14 01 00 00       	push   0x114
c0012bc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bc8:	e8 1c fc ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0012bcd:	83 c4 10             	add    esp,0x10
c0012bd0:	83 c4 0c             	add    esp,0xc
c0012bd3:	c3                   	ret    

c0012bd4 <Filesystem::Filesystem()>:
c0012bd4:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c0012bd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bdd:	89 10                	mov    DWORD PTR [eax],edx
c0012bdf:	8b 15 34 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f434
c0012be5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012bec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bf0:	a3 34 f4 02 c0       	mov    ds:0xc002f434,eax
c0012bf5:	90                   	nop
c0012bf6:	c3                   	ret    
c0012bf7:	90                   	nop

c0012bf8 <Filesystem::~Filesystem()>:
c0012bf8:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c0012bfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c01:	89 10                	mov    DWORD PTR [eax],edx
c0012c03:	90                   	nop
c0012c04:	c3                   	ret    
c0012c05:	90                   	nop

c0012c06 <Filesystem::~Filesystem()>:
c0012c06:	83 ec 0c             	sub    esp,0xc
c0012c09:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c0d:	e8 e6 ff ff ff       	call   c0012bf8 <Filesystem::~Filesystem()>
c0012c12:	83 c4 04             	add    esp,0x4
c0012c15:	83 ec 08             	sub    esp,0x8
c0012c18:	6a 08                	push   0x8
c0012c1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c1e:	e8 c6 fb ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0012c23:	83 c4 10             	add    esp,0x10
c0012c26:	83 c4 0c             	add    esp,0xc
c0012c29:	c3                   	ret    

c0012c2a <Fs::getcwd(Process*, char*, int)>:
c0012c2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c2e:	31 c0                	xor    eax,eax
c0012c30:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c33:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c37:	7d 15                	jge    c0012c4e <Fs::getcwd(Process*, char*, int)+0x24>
c0012c39:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c3d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c44:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c47:	84 c9                	test   cl,cl
c0012c49:	74 06                	je     c0012c51 <Fs::getcwd(Process*, char*, int)+0x27>
c0012c4b:	40                   	inc    eax
c0012c4c:	eb e2                	jmp    c0012c30 <Fs::getcwd(Process*, char*, int)+0x6>
c0012c4e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c51:	31 c0                	xor    eax,eax
c0012c53:	c3                   	ret    

c0012c54 <Fs::initVFS()>:
c0012c54:	83 ec 18             	sub    esp,0x18
c0012c57:	6a 08                	push   0x8
c0012c59:	e8 2e cc ff ff       	call   c000f88c <malloc>
c0012c5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c61:	e8 08 e5 00 00       	call   c002116e <FAT::FAT()>
c0012c66:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c6d:	e8 1a cc ff ff       	call   c000f88c <malloc>
c0012c72:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c75:	e8 30 f7 00 00       	call   c00223aa <ISO9660::ISO9660()>
c0012c7a:	83 c4 1c             	add    esp,0x1c
c0012c7d:	c3                   	ret    

c0012c7e <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012c7e:	55                   	push   ebp
c0012c7f:	57                   	push   edi
c0012c80:	56                   	push   esi
c0012c81:	53                   	push   ebx
c0012c82:	81 ec 10 04 00 00    	sub    esp,0x410
c0012c88:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012c8f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012c96:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012c9d:	68 00 04 00 00       	push   0x400
c0012ca2:	6a 00                	push   0x0
c0012ca4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012ca8:	56                   	push   esi
c0012ca9:	e8 a2 da fe ff       	call   c0000750 <memset>
c0012cae:	83 c4 10             	add    esp,0x10
c0012cb1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012cb5:	75 0b                	jne    c0012cc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012cb7:	50                   	push   eax
c0012cb8:	50                   	push   eax
c0012cb9:	57                   	push   edi
c0012cba:	56                   	push   esi
c0012cbb:	e8 4c db fe ff       	call   c000080c <strcpy>
c0012cc0:	eb 41                	jmp    c0012d03 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012cc2:	8a 07                	mov    al,BYTE PTR [edi]
c0012cc4:	3c 5c                	cmp    al,0x5c
c0012cc6:	74 04                	je     c0012ccc <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012cc8:	3c 2f                	cmp    al,0x2f
c0012cca:	75 18                	jne    c0012ce4 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012ccc:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012ccf:	3c 60                	cmp    al,0x60
c0012cd1:	7e 03                	jle    c0012cd6 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012cd3:	83 e8 20             	sub    eax,0x20
c0012cd6:	88 04 24             	mov    BYTE PTR [esp],al
c0012cd9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ce0:	50                   	push   eax
c0012ce1:	50                   	push   eax
c0012ce2:	eb 18                	jmp    c0012cfc <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012ce4:	50                   	push   eax
c0012ce5:	50                   	push   eax
c0012ce6:	55                   	push   ebp
c0012ce7:	56                   	push   esi
c0012ce8:	e8 1f db fe ff       	call   c000080c <strcpy>
c0012ced:	5a                   	pop    edx
c0012cee:	59                   	pop    ecx
c0012cef:	68 6d cb 02 c0       	push   0xc002cb6d
c0012cf4:	56                   	push   esi
c0012cf5:	e8 52 dc fe ff       	call   c000094c <strcat>
c0012cfa:	5d                   	pop    ebp
c0012cfb:	58                   	pop    eax
c0012cfc:	57                   	push   edi
c0012cfd:	56                   	push   esi
c0012cfe:	e8 49 dc fe ff       	call   c000094c <strcat>
c0012d03:	83 c4 10             	add    esp,0x10
c0012d06:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012d09:	3c 60                	cmp    al,0x60
c0012d0b:	7e 03                	jle    c0012d10 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012d0d:	83 e8 20             	sub    eax,0x20
c0012d10:	88 04 24             	mov    BYTE PTR [esp],al
c0012d13:	88 03                	mov    BYTE PTR [ebx],al
c0012d15:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d1c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d22:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d26:	bf 03 00 00 00       	mov    edi,0x3
c0012d2b:	b8 03 00 00 00       	mov    eax,0x3
c0012d30:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d33:	84 d2                	test   dl,dl
c0012d35:	0f 84 91 00 00 00    	je     c0012dcc <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d3b:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d3e:	80 fa 5c             	cmp    dl,0x5c
c0012d41:	74 05                	je     c0012d48 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d43:	80 fa 2f             	cmp    dl,0x2f
c0012d46:	75 12                	jne    c0012d5a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d48:	89 c5                	mov    ebp,eax
c0012d4a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d4f:	74 09                	je     c0012d5a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d51:	40                   	inc    eax
c0012d52:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d56:	89 cf                	mov    edi,ecx
c0012d58:	eb d6                	jmp    c0012d30 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d5a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d5f:	75 5b                	jne    c0012dbc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d61:	80 fa 2e             	cmp    dl,0x2e
c0012d64:	75 56                	jne    c0012dbc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d66:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d6a:	74 19                	je     c0012d85 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d6c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d71:	74 53                	je     c0012dc6 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d73:	89 f9                	mov    ecx,edi
c0012d75:	41                   	inc    ecx
c0012d76:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d79:	80 fa 2f             	cmp    dl,0x2f
c0012d7c:	74 f7                	je     c0012d75 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d7e:	80 fa 5c             	cmp    dl,0x5c
c0012d81:	74 f2                	je     c0012d75 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d83:	eb d1                	jmp    c0012d56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d85:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d8a:	74 3a                	je     c0012dc6 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d8c:	83 f8 03             	cmp    eax,0x3
c0012d8f:	74 c5                	je     c0012d56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d91:	41                   	inc    ecx
c0012d92:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d95:	80 fa 2f             	cmp    dl,0x2f
c0012d98:	74 f7                	je     c0012d91 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012d9a:	80 fa 5c             	cmp    dl,0x5c
c0012d9d:	74 f2                	je     c0012d91 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012d9f:	48                   	dec    eax
c0012da0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012da4:	75 06                	jne    c0012dac <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012da6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012daa:	eb f3                	jmp    c0012d9f <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012dac:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012db0:	74 07                	je     c0012db9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012db2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012db6:	48                   	dec    eax
c0012db7:	eb f3                	jmp    c0012dac <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012db9:	40                   	inc    eax
c0012dba:	eb 9a                	jmp    c0012d56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dbc:	80 fa 2f             	cmp    dl,0x2f
c0012dbf:	74 95                	je     c0012d56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dc1:	80 fa 5c             	cmp    dl,0x5c
c0012dc4:	74 90                	je     c0012d56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dc6:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012dc9:	40                   	inc    eax
c0012dca:	eb 8a                	jmp    c0012d56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dcc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dd0:	83 ec 0c             	sub    esp,0xc
c0012dd3:	53                   	push   ebx
c0012dd4:	e8 93 d9 fe ff       	call   c000076c <strlen>
c0012dd9:	83 c4 10             	add    esp,0x10
c0012ddc:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012de1:	75 26                	jne    c0012e09 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012de3:	83 ec 0c             	sub    esp,0xc
c0012de6:	53                   	push   ebx
c0012de7:	e8 80 d9 fe ff       	call   c000076c <strlen>
c0012dec:	83 c4 10             	add    esp,0x10
c0012def:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012df4:	74 26                	je     c0012e1c <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012df6:	83 ec 0c             	sub    esp,0xc
c0012df9:	53                   	push   ebx
c0012dfa:	e8 6d d9 fe ff       	call   c000076c <strlen>
c0012dff:	83 c4 10             	add    esp,0x10
c0012e02:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e07:	eb c7                	jmp    c0012dd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012e09:	83 ec 0c             	sub    esp,0xc
c0012e0c:	53                   	push   ebx
c0012e0d:	e8 5a d9 fe ff       	call   c000076c <strlen>
c0012e12:	83 c4 10             	add    esp,0x10
c0012e15:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e1a:	74 c7                	je     c0012de3 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e1c:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e22:	5b                   	pop    ebx
c0012e23:	5e                   	pop    esi
c0012e24:	5f                   	pop    edi
c0012e25:	5d                   	pop    ebp
c0012e26:	c3                   	ret    
c0012e27:	90                   	nop

c0012e28 <File::File(char const*, Process*)>:
c0012e28:	83 ec 0c             	sub    esp,0xc
c0012e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e2f:	83 ec 08             	sub    esp,0x8
c0012e32:	6a 00                	push   0x0
c0012e34:	50                   	push   eax
c0012e35:	e8 46 e2 ff ff       	call   c0011080 <UnixFile::UnixFile(int)>
c0012e3a:	83 c4 10             	add    esp,0x10
c0012e3d:	ba f8 b3 02 c0       	mov    edx,0xc002b3f8
c0012e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e46:	89 10                	mov    DWORD PTR [eax],edx
c0012e48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e4c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e56:	83 c0 0d             	add    eax,0xd
c0012e59:	83 ec 04             	sub    esp,0x4
c0012e5c:	52                   	push   edx
c0012e5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e61:	50                   	push   eax
c0012e62:	e8 17 fe ff ff       	call   c0012c7e <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e67:	83 c4 10             	add    esp,0x10
c0012e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e6e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e71:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e78:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e82:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012e86:	90                   	nop
c0012e87:	83 c4 0c             	add    esp,0xc
c0012e8a:	c3                   	ret    
c0012e8b:	90                   	nop

c0012e8c <File::open(FileOpenMode)>:
c0012e8c:	53                   	push   ebx
c0012e8d:	b8 0b 00 00 00       	mov    eax,0xb
c0012e92:	83 ec 08             	sub    esp,0x8
c0012e95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e99:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ea0:	80 fa 19             	cmp    dl,0x19
c0012ea3:	77 40                	ja     c0012ee5 <File::open(FileOpenMode)+0x59>
c0012ea5:	8b 14 95 c0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0740]
c0012eac:	85 d2                	test   edx,edx
c0012eae:	74 35                	je     c0012ee5 <File::open(FileOpenMode)+0x59>
c0012eb0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012eb6:	85 d2                	test   edx,edx
c0012eb8:	74 2b                	je     c0012ee5 <File::open(FileOpenMode)+0x59>
c0012eba:	b8 06 00 00 00       	mov    eax,0x6
c0012ebf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ec3:	75 20                	jne    c0012ee5 <File::open(FileOpenMode)+0x59>
c0012ec5:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ec7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ed1:	51                   	push   ecx
c0012ed2:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012ed5:	51                   	push   ecx
c0012ed6:	52                   	push   edx
c0012ed7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012eda:	83 c4 10             	add    esp,0x10
c0012edd:	85 c0                	test   eax,eax
c0012edf:	75 04                	jne    c0012ee5 <File::open(FileOpenMode)+0x59>
c0012ee1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012ee5:	83 c4 08             	add    esp,0x8
c0012ee8:	5b                   	pop    ebx
c0012ee9:	c3                   	ret    

c0012eea <File::close()>:
c0012eea:	53                   	push   ebx
c0012eeb:	b8 0b 00 00 00       	mov    eax,0xb
c0012ef0:	83 ec 08             	sub    esp,0x8
c0012ef3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012ef7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012efe:	80 fa 19             	cmp    dl,0x19
c0012f01:	77 41                	ja     c0012f44 <File::close()+0x5a>
c0012f03:	8b 1c 95 c0 f8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0740]
c0012f0a:	85 db                	test   ebx,ebx
c0012f0c:	74 36                	je     c0012f44 <File::close()+0x5a>
c0012f0e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012f15:	74 2d                	je     c0012f44 <File::close()+0x5a>
c0012f17:	b8 05 00 00 00       	mov    eax,0x5
c0012f1c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f20:	74 22                	je     c0012f44 <File::close()+0x5a>
c0012f22:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f26:	8b 04 95 c0 f8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0740]
c0012f2d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f33:	53                   	push   ebx
c0012f34:	53                   	push   ebx
c0012f35:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f37:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f3d:	50                   	push   eax
c0012f3e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f41:	83 c4 10             	add    esp,0x10
c0012f44:	83 c4 08             	add    esp,0x8
c0012f47:	5b                   	pop    ebx
c0012f48:	c3                   	ret    
c0012f49:	90                   	nop

c0012f4a <File::seek(unsigned long long)>:
c0012f4a:	56                   	push   esi
c0012f4b:	53                   	push   ebx
c0012f4c:	b8 0b 00 00 00       	mov    eax,0xb
c0012f51:	51                   	push   ecx
c0012f52:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f5a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f65:	80 fa 19             	cmp    dl,0x19
c0012f68:	77 31                	ja     c0012f9b <File::seek(unsigned long long)+0x51>
c0012f6a:	8b 14 95 c0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0740]
c0012f71:	85 d2                	test   edx,edx
c0012f73:	74 26                	je     c0012f9b <File::seek(unsigned long long)+0x51>
c0012f75:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f7b:	85 d2                	test   edx,edx
c0012f7d:	74 1c                	je     c0012f9b <File::seek(unsigned long long)+0x51>
c0012f7f:	b8 05 00 00 00       	mov    eax,0x5
c0012f84:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012f88:	74 11                	je     c0012f9b <File::seek(unsigned long long)+0x51>
c0012f8a:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f8c:	53                   	push   ebx
c0012f8d:	51                   	push   ecx
c0012f8e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012f94:	52                   	push   edx
c0012f95:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012f98:	83 c4 10             	add    esp,0x10
c0012f9b:	5a                   	pop    edx
c0012f9c:	5b                   	pop    ebx
c0012f9d:	5e                   	pop    esi
c0012f9e:	c3                   	ret    
c0012f9f:	90                   	nop

c0012fa0 <File::tell(unsigned long long*)>:
c0012fa0:	83 ec 0c             	sub    esp,0xc
c0012fa3:	b8 0b 00 00 00       	mov    eax,0xb
c0012fa8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fac:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fb3:	80 fa 19             	cmp    dl,0x19
c0012fb6:	77 34                	ja     c0012fec <File::tell(unsigned long long*)+0x4c>
c0012fb8:	8b 14 95 c0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0740]
c0012fbf:	85 d2                	test   edx,edx
c0012fc1:	74 29                	je     c0012fec <File::tell(unsigned long long*)+0x4c>
c0012fc3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fc9:	85 d2                	test   edx,edx
c0012fcb:	74 1f                	je     c0012fec <File::tell(unsigned long long*)+0x4c>
c0012fcd:	b8 05 00 00 00       	mov    eax,0x5
c0012fd2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012fd6:	74 14                	je     c0012fec <File::tell(unsigned long long*)+0x4c>
c0012fd8:	50                   	push   eax
c0012fd9:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fdb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fdf:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012fe5:	52                   	push   edx
c0012fe6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012fe9:	83 c4 10             	add    esp,0x10
c0012fec:	83 c4 0c             	add    esp,0xc
c0012fef:	c3                   	ret    

c0012ff0 <File::rewind()>:
c0012ff0:	83 ec 10             	sub    esp,0x10
c0012ff3:	6a 00                	push   0x0
c0012ff5:	6a 00                	push   0x0
c0012ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ffb:	e8 4a ff ff ff       	call   c0012f4a <File::seek(unsigned long long)>
c0013000:	83 c4 1c             	add    esp,0x1c
c0013003:	c3                   	ret    

c0013004 <File::unlink()>:
c0013004:	83 ec 0c             	sub    esp,0xc
c0013007:	b8 0b 00 00 00       	mov    eax,0xb
c001300c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013010:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013017:	80 f9 19             	cmp    cl,0x19
c001301a:	77 2f                	ja     c001304b <File::unlink()+0x47>
c001301c:	8b 0c 8d c0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0740]
c0013023:	85 c9                	test   ecx,ecx
c0013025:	74 24                	je     c001304b <File::unlink()+0x47>
c0013027:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001302d:	85 c9                	test   ecx,ecx
c001302f:	74 1a                	je     c001304b <File::unlink()+0x47>
c0013031:	b8 06 00 00 00       	mov    eax,0x6
c0013036:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001303a:	75 0f                	jne    c001304b <File::unlink()+0x47>
c001303c:	83 c2 0d             	add    edx,0xd
c001303f:	50                   	push   eax
c0013040:	50                   	push   eax
c0013041:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013043:	52                   	push   edx
c0013044:	51                   	push   ecx
c0013045:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013048:	83 c4 10             	add    esp,0x10
c001304b:	83 c4 0c             	add    esp,0xc
c001304e:	c3                   	ret    
c001304f:	90                   	nop

c0013050 <File::rename(char const*)>:
c0013050:	83 ec 0c             	sub    esp,0xc
c0013053:	b8 0b 00 00 00       	mov    eax,0xb
c0013058:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001305c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013063:	80 f9 19             	cmp    cl,0x19
c0013066:	77 32                	ja     c001309a <File::rename(char const*)+0x4a>
c0013068:	8b 0c 8d c0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0740]
c001306f:	85 c9                	test   ecx,ecx
c0013071:	74 27                	je     c001309a <File::rename(char const*)+0x4a>
c0013073:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013079:	85 c9                	test   ecx,ecx
c001307b:	74 1d                	je     c001309a <File::rename(char const*)+0x4a>
c001307d:	b8 06 00 00 00       	mov    eax,0x6
c0013082:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013086:	75 12                	jne    c001309a <File::rename(char const*)+0x4a>
c0013088:	83 c2 0d             	add    edx,0xd
c001308b:	50                   	push   eax
c001308c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001308e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013092:	52                   	push   edx
c0013093:	51                   	push   ecx
c0013094:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013097:	83 c4 10             	add    esp,0x10
c001309a:	83 c4 0c             	add    esp,0xc
c001309d:	c3                   	ret    

c001309e <File::chfatattr(unsigned char, unsigned char)>:
c001309e:	57                   	push   edi
c001309f:	b8 0b 00 00 00       	mov    eax,0xb
c00130a4:	56                   	push   esi
c00130a5:	53                   	push   ebx
c00130a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00130ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130b5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130b9:	80 f9 19             	cmp    cl,0x19
c00130bc:	77 37                	ja     c00130f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130be:	8b 0c 8d c0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0740]
c00130c5:	85 c9                	test   ecx,ecx
c00130c7:	74 2c                	je     c00130f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130cf:	85 c9                	test   ecx,ecx
c00130d1:	74 22                	je     c00130f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130d3:	b8 06 00 00 00       	mov    eax,0x6
c00130d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130dc:	75 17                	jne    c00130f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130de:	8b 39                	mov    edi,DWORD PTR [ecx]
c00130e0:	89 f0                	mov    eax,esi
c00130e2:	83 c2 0d             	add    edx,0xd
c00130e5:	0f b6 f0             	movzx  esi,al
c00130e8:	0f b6 db             	movzx  ebx,bl
c00130eb:	56                   	push   esi
c00130ec:	53                   	push   ebx
c00130ed:	52                   	push   edx
c00130ee:	51                   	push   ecx
c00130ef:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00130f2:	83 c4 10             	add    esp,0x10
c00130f5:	5b                   	pop    ebx
c00130f6:	5e                   	pop    esi
c00130f7:	5f                   	pop    edi
c00130f8:	c3                   	ret    
c00130f9:	90                   	nop

c00130fa <File::exists()>:
c00130fa:	83 ec 0c             	sub    esp,0xc
c00130fd:	31 c0                	xor    eax,eax
c00130ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013103:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001310a:	80 f9 19             	cmp    cl,0x19
c001310d:	77 24                	ja     c0013133 <File::exists()+0x39>
c001310f:	8b 0c 8d c0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0740]
c0013116:	85 c9                	test   ecx,ecx
c0013118:	74 19                	je     c0013133 <File::exists()+0x39>
c001311a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013120:	85 c9                	test   ecx,ecx
c0013122:	74 0f                	je     c0013133 <File::exists()+0x39>
c0013124:	83 c2 0d             	add    edx,0xd
c0013127:	50                   	push   eax
c0013128:	50                   	push   eax
c0013129:	8b 01                	mov    eax,DWORD PTR [ecx]
c001312b:	52                   	push   edx
c001312c:	51                   	push   ecx
c001312d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013130:	83 c4 10             	add    esp,0x10
c0013133:	83 c4 0c             	add    esp,0xc
c0013136:	c3                   	ret    
c0013137:	90                   	nop

c0013138 <File::stat(unsigned long long*, bool*)>:
c0013138:	56                   	push   esi
c0013139:	53                   	push   ebx
c001313a:	50                   	push   eax
c001313b:	b8 0b 00 00 00       	mov    eax,0xb
c0013140:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013144:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013148:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001314f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013153:	80 f9 19             	cmp    cl,0x19
c0013156:	77 3d                	ja     c0013195 <File::stat(unsigned long long*, bool*)+0x5d>
c0013158:	8b 0c 8d c0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0740]
c001315f:	85 c9                	test   ecx,ecx
c0013161:	74 32                	je     c0013195 <File::stat(unsigned long long*, bool*)+0x5d>
c0013163:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013169:	85 c9                	test   ecx,ecx
c001316b:	74 28                	je     c0013195 <File::stat(unsigned long long*, bool*)+0x5d>
c001316d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001316f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013173:	74 13                	je     c0013188 <File::stat(unsigned long long*, bool*)+0x50>
c0013175:	83 ec 04             	sub    esp,0x4
c0013178:	56                   	push   esi
c0013179:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001317f:	51                   	push   ecx
c0013180:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013183:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013186:	eb 0a                	jmp    c0013192 <File::stat(unsigned long long*, bool*)+0x5a>
c0013188:	53                   	push   ebx
c0013189:	83 c2 0d             	add    edx,0xd
c001318c:	56                   	push   esi
c001318d:	52                   	push   edx
c001318e:	51                   	push   ecx
c001318f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013192:	83 c4 10             	add    esp,0x10
c0013195:	5a                   	pop    edx
c0013196:	5b                   	pop    ebx
c0013197:	5e                   	pop    esi
c0013198:	c3                   	ret    

c0013199 <Fs::setcwd(Process*, char*)>:
c0013199:	55                   	push   ebp
c001319a:	57                   	push   edi
c001319b:	56                   	push   esi
c001319c:	53                   	push   ebx
c001319d:	81 ec 20 02 00 00    	sub    esp,0x220
c00131a3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00131aa:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00131b0:	57                   	push   edi
c00131b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00131b8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00131bc:	56                   	push   esi
c00131bd:	e8 bc fa ff ff       	call   c0012c7e <Fs::standardiseFiles(char*, char const*, char const*)>
c00131c2:	89 34 24             	mov    DWORD PTR [esp],esi
c00131c5:	e8 a2 d5 fe ff       	call   c000076c <strlen>
c00131ca:	83 c4 10             	add    esp,0x10
c00131cd:	83 f8 02             	cmp    eax,0x2
c00131d0:	77 17                	ja     c00131e9 <Fs::setcwd(Process*, char*)+0x50>
c00131d2:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00131d7:	83 e8 41             	sub    eax,0x41
c00131da:	83 f8 19             	cmp    eax,0x19
c00131dd:	76 24                	jbe    c0013203 <Fs::setcwd(Process*, char*)+0x6a>
c00131df:	b8 03 00 00 00       	mov    eax,0x3
c00131e4:	e9 e0 00 00 00       	jmp    c00132c9 <Fs::setcwd(Process*, char*)+0x130>
c00131e9:	83 ec 0c             	sub    esp,0xc
c00131ec:	56                   	push   esi
c00131ed:	e8 7a d5 fe ff       	call   c000076c <strlen>
c00131f2:	83 c4 10             	add    esp,0x10
c00131f5:	83 f8 03             	cmp    eax,0x3
c00131f8:	75 34                	jne    c001322e <Fs::setcwd(Process*, char*)+0x95>
c00131fa:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00131ff:	75 2d                	jne    c001322e <Fs::setcwd(Process*, char*)+0x95>
c0013201:	eb cf                	jmp    c00131d2 <Fs::setcwd(Process*, char*)+0x39>
c0013203:	8b 14 85 c0 f8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0740]
c001320a:	b8 05 00 00 00       	mov    eax,0x5
c001320f:	85 d2                	test   edx,edx
c0013211:	0f 84 b2 00 00 00    	je     c00132c9 <Fs::setcwd(Process*, char*)+0x130>
c0013217:	b8 06 00 00 00       	mov    eax,0x6
c001321c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013223:	0f 85 92 00 00 00    	jne    c00132bb <Fs::setcwd(Process*, char*)+0x122>
c0013229:	e9 9b 00 00 00       	jmp    c00132c9 <Fs::setcwd(Process*, char*)+0x130>
c001322e:	83 ec 0c             	sub    esp,0xc
c0013231:	68 14 01 00 00       	push   0x114
c0013236:	e8 51 c6 ff ff       	call   c000f88c <malloc>
c001323b:	83 c4 0c             	add    esp,0xc
c001323e:	89 c3                	mov    ebx,eax
c0013240:	55                   	push   ebp
c0013241:	56                   	push   esi
c0013242:	50                   	push   eax
c0013243:	e8 e0 fb ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c0013248:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001324d:	83 c4 0c             	add    esp,0xc
c0013250:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013254:	50                   	push   eax
c0013255:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013259:	50                   	push   eax
c001325a:	53                   	push   ebx
c001325b:	e8 d8 fe ff ff       	call   c0013138 <File::stat(unsigned long long*, bool*)>
c0013260:	83 c4 10             	add    esp,0x10
c0013263:	83 f8 02             	cmp    eax,0x2
c0013266:	74 04                	je     c001326c <Fs::setcwd(Process*, char*)+0xd3>
c0013268:	85 c0                	test   eax,eax
c001326a:	74 1c                	je     c0013288 <Fs::setcwd(Process*, char*)+0xef>
c001326c:	b8 01 00 00 00       	mov    eax,0x1
c0013271:	85 db                	test   ebx,ebx
c0013273:	74 54                	je     c00132c9 <Fs::setcwd(Process*, char*)+0x130>
c0013275:	83 ec 0c             	sub    esp,0xc
c0013278:	8b 03                	mov    eax,DWORD PTR [ebx]
c001327a:	53                   	push   ebx
c001327b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001327e:	83 c4 10             	add    esp,0x10
c0013281:	b8 01 00 00 00       	mov    eax,0x1
c0013286:	eb 41                	jmp    c00132c9 <Fs::setcwd(Process*, char*)+0x130>
c0013288:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001328d:	75 1c                	jne    c00132ab <Fs::setcwd(Process*, char*)+0x112>
c001328f:	b8 02 00 00 00       	mov    eax,0x2
c0013294:	85 db                	test   ebx,ebx
c0013296:	74 31                	je     c00132c9 <Fs::setcwd(Process*, char*)+0x130>
c0013298:	83 ec 0c             	sub    esp,0xc
c001329b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001329d:	53                   	push   ebx
c001329e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132a1:	83 c4 10             	add    esp,0x10
c00132a4:	b8 02 00 00 00       	mov    eax,0x2
c00132a9:	eb 1e                	jmp    c00132c9 <Fs::setcwd(Process*, char*)+0x130>
c00132ab:	85 db                	test   ebx,ebx
c00132ad:	74 0c                	je     c00132bb <Fs::setcwd(Process*, char*)+0x122>
c00132af:	83 ec 0c             	sub    esp,0xc
c00132b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132b4:	53                   	push   ebx
c00132b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132b8:	83 c4 10             	add    esp,0x10
c00132bb:	50                   	push   eax
c00132bc:	50                   	push   eax
c00132bd:	56                   	push   esi
c00132be:	57                   	push   edi
c00132bf:	e8 48 d5 fe ff       	call   c000080c <strcpy>
c00132c4:	83 c4 10             	add    esp,0x10
c00132c7:	31 c0                	xor    eax,eax
c00132c9:	81 c4 1c 02 00 00    	add    esp,0x21c
c00132cf:	5b                   	pop    ebx
c00132d0:	5e                   	pop    esi
c00132d1:	5f                   	pop    edi
c00132d2:	5d                   	pop    ebp
c00132d3:	c3                   	ret    

c00132d4 <Directory::Directory(char const*, Process*)>:
c00132d4:	83 ec 0c             	sub    esp,0xc
c00132d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132db:	83 ec 08             	sub    esp,0x8
c00132de:	6a 00                	push   0x0
c00132e0:	50                   	push   eax
c00132e1:	e8 9a dd ff ff       	call   c0011080 <UnixFile::UnixFile(int)>
c00132e6:	83 c4 10             	add    esp,0x10
c00132e9:	ba 14 b4 02 c0       	mov    edx,0xc002b414
c00132ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f2:	89 10                	mov    DWORD PTR [eax],edx
c00132f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132f8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013302:	83 c0 0d             	add    eax,0xd
c0013305:	83 ec 04             	sub    esp,0x4
c0013308:	52                   	push   edx
c0013309:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001330d:	50                   	push   eax
c001330e:	e8 6b f9 ff ff       	call   c0012c7e <Fs::standardiseFiles(char*, char const*, char const*)>
c0013313:	83 c4 10             	add    esp,0x10
c0013316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001331a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001331d:	8d 50 bf             	lea    edx,[eax-0x41]
c0013320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013324:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001332a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001332e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013332:	90                   	nop
c0013333:	83 c4 0c             	add    esp,0xc
c0013336:	c3                   	ret    
c0013337:	90                   	nop

c0013338 <Directory::open()>:
c0013338:	53                   	push   ebx
c0013339:	b8 0b 00 00 00       	mov    eax,0xb
c001333e:	83 ec 08             	sub    esp,0x8
c0013341:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013345:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001334c:	80 fa 19             	cmp    dl,0x19
c001334f:	77 3d                	ja     c001338e <Directory::open()+0x56>
c0013351:	8b 14 95 c0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0740]
c0013358:	85 d2                	test   edx,edx
c001335a:	74 32                	je     c001338e <Directory::open()+0x56>
c001335c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013362:	85 d2                	test   edx,edx
c0013364:	74 28                	je     c001338e <Directory::open()+0x56>
c0013366:	b8 06 00 00 00       	mov    eax,0x6
c001336b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001336f:	75 1d                	jne    c001338e <Directory::open()+0x56>
c0013371:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013377:	50                   	push   eax
c0013378:	8b 02                	mov    eax,DWORD PTR [edx]
c001337a:	51                   	push   ecx
c001337b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001337e:	51                   	push   ecx
c001337f:	52                   	push   edx
c0013380:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013383:	83 c4 10             	add    esp,0x10
c0013386:	85 c0                	test   eax,eax
c0013388:	75 04                	jne    c001338e <Directory::open()+0x56>
c001338a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001338e:	83 c4 08             	add    esp,0x8
c0013391:	5b                   	pop    ebx
c0013392:	c3                   	ret    
c0013393:	90                   	nop

c0013394 <Directory::close()>:
c0013394:	53                   	push   ebx
c0013395:	b8 0b 00 00 00       	mov    eax,0xb
c001339a:	83 ec 08             	sub    esp,0x8
c001339d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133a1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133a8:	80 fa 19             	cmp    dl,0x19
c00133ab:	77 41                	ja     c00133ee <Directory::close()+0x5a>
c00133ad:	8b 1c 95 c0 f8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0740]
c00133b4:	85 db                	test   ebx,ebx
c00133b6:	74 36                	je     c00133ee <Directory::close()+0x5a>
c00133b8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133bf:	74 2d                	je     c00133ee <Directory::close()+0x5a>
c00133c1:	b8 05 00 00 00       	mov    eax,0x5
c00133c6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133ca:	74 22                	je     c00133ee <Directory::close()+0x5a>
c00133cc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133d0:	8b 04 95 c0 f8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0740]
c00133d7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00133dd:	53                   	push   ebx
c00133de:	53                   	push   ebx
c00133df:	8b 10                	mov    edx,DWORD PTR [eax]
c00133e1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00133e7:	50                   	push   eax
c00133e8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00133eb:	83 c4 10             	add    esp,0x10
c00133ee:	83 c4 08             	add    esp,0x8
c00133f1:	5b                   	pop    ebx
c00133f2:	c3                   	ret    
c00133f3:	90                   	nop

c00133f4 <Directory::unlink()>:
c00133f4:	83 ec 0c             	sub    esp,0xc
c00133f7:	b8 0b 00 00 00       	mov    eax,0xb
c00133fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013400:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013407:	80 f9 19             	cmp    cl,0x19
c001340a:	77 2f                	ja     c001343b <Directory::unlink()+0x47>
c001340c:	8b 0c 8d c0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0740]
c0013413:	85 c9                	test   ecx,ecx
c0013415:	74 24                	je     c001343b <Directory::unlink()+0x47>
c0013417:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001341d:	85 c9                	test   ecx,ecx
c001341f:	74 1a                	je     c001343b <Directory::unlink()+0x47>
c0013421:	b8 06 00 00 00       	mov    eax,0x6
c0013426:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001342a:	75 0f                	jne    c001343b <Directory::unlink()+0x47>
c001342c:	83 c2 0d             	add    edx,0xd
c001342f:	50                   	push   eax
c0013430:	50                   	push   eax
c0013431:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013433:	52                   	push   edx
c0013434:	51                   	push   ecx
c0013435:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013438:	83 c4 10             	add    esp,0x10
c001343b:	83 c4 0c             	add    esp,0xc
c001343e:	c3                   	ret    
c001343f:	90                   	nop

c0013440 <Directory::rename(char const*)>:
c0013440:	83 ec 0c             	sub    esp,0xc
c0013443:	b8 0b 00 00 00       	mov    eax,0xb
c0013448:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001344c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013453:	80 f9 19             	cmp    cl,0x19
c0013456:	77 32                	ja     c001348a <Directory::rename(char const*)+0x4a>
c0013458:	8b 0c 8d c0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0740]
c001345f:	85 c9                	test   ecx,ecx
c0013461:	74 27                	je     c001348a <Directory::rename(char const*)+0x4a>
c0013463:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013469:	85 c9                	test   ecx,ecx
c001346b:	74 1d                	je     c001348a <Directory::rename(char const*)+0x4a>
c001346d:	b8 06 00 00 00       	mov    eax,0x6
c0013472:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013476:	75 12                	jne    c001348a <Directory::rename(char const*)+0x4a>
c0013478:	83 c2 0d             	add    edx,0xd
c001347b:	50                   	push   eax
c001347c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001347e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013482:	52                   	push   edx
c0013483:	51                   	push   ecx
c0013484:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013487:	83 c4 10             	add    esp,0x10
c001348a:	83 c4 0c             	add    esp,0xc
c001348d:	c3                   	ret    

c001348e <Directory::exists()>:
c001348e:	83 ec 0c             	sub    esp,0xc
c0013491:	31 c0                	xor    eax,eax
c0013493:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013497:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001349e:	80 f9 19             	cmp    cl,0x19
c00134a1:	77 24                	ja     c00134c7 <Directory::exists()+0x39>
c00134a3:	8b 0c 8d c0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0740]
c00134aa:	85 c9                	test   ecx,ecx
c00134ac:	74 19                	je     c00134c7 <Directory::exists()+0x39>
c00134ae:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134b4:	85 c9                	test   ecx,ecx
c00134b6:	74 0f                	je     c00134c7 <Directory::exists()+0x39>
c00134b8:	83 c2 0d             	add    edx,0xd
c00134bb:	50                   	push   eax
c00134bc:	50                   	push   eax
c00134bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134bf:	52                   	push   edx
c00134c0:	51                   	push   ecx
c00134c1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00134c4:	83 c4 10             	add    esp,0x10
c00134c7:	83 c4 0c             	add    esp,0xc
c00134ca:	c3                   	ret    
c00134cb:	90                   	nop

c00134cc <Directory::read(dirent*)>:
c00134cc:	83 ec 1c             	sub    esp,0x1c
c00134cf:	b8 0b 00 00 00       	mov    eax,0xb
c00134d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00134d8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134df:	80 fa 19             	cmp    dl,0x19
c00134e2:	77 30                	ja     c0013514 <Directory::read(dirent*)+0x48>
c00134e4:	8b 14 95 c0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0740]
c00134eb:	85 d2                	test   edx,edx
c00134ed:	74 25                	je     c0013514 <Directory::read(dirent*)+0x48>
c00134ef:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00134f6:	74 1c                	je     c0013514 <Directory::read(dirent*)+0x48>
c00134f8:	83 ec 0c             	sub    esp,0xc
c00134fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013501:	52                   	push   edx
c0013502:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013506:	6a 00                	push   0x0
c0013508:	68 10 01 00 00       	push   0x110
c001350d:	51                   	push   ecx
c001350e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013511:	83 c4 20             	add    esp,0x20
c0013514:	83 c4 1c             	add    esp,0x1c
c0013517:	c3                   	ret    

c0013518 <Directory::create()>:
c0013518:	83 ec 0c             	sub    esp,0xc
c001351b:	b8 0b 00 00 00       	mov    eax,0xb
c0013520:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013524:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001352b:	80 f9 19             	cmp    cl,0x19
c001352e:	77 2f                	ja     c001355f <Directory::create()+0x47>
c0013530:	8b 0c 8d c0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0740]
c0013537:	85 c9                	test   ecx,ecx
c0013539:	74 24                	je     c001355f <Directory::create()+0x47>
c001353b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013541:	85 c9                	test   ecx,ecx
c0013543:	74 1a                	je     c001355f <Directory::create()+0x47>
c0013545:	b8 06 00 00 00       	mov    eax,0x6
c001354a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001354e:	75 0f                	jne    c001355f <Directory::create()+0x47>
c0013550:	83 c2 0d             	add    edx,0xd
c0013553:	50                   	push   eax
c0013554:	50                   	push   eax
c0013555:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013557:	52                   	push   edx
c0013558:	51                   	push   ecx
c0013559:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001355c:	83 c4 10             	add    esp,0x10
c001355f:	83 c4 0c             	add    esp,0xc
c0013562:	c3                   	ret    
c0013563:	90                   	nop

c0013564 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013564:	b8 0a 00 00 00       	mov    eax,0xa
c0013569:	c3                   	ret    

c001356a <Bus::Bus(char const*)>:
c001356a:	83 ec 0c             	sub    esp,0xc
c001356d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013571:	83 ec 08             	sub    esp,0x8
c0013574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013578:	50                   	push   eax
c0013579:	e8 88 09 00 00       	call   c0013f06 <Device::Device(char const*)>
c001357e:	83 c4 10             	add    esp,0x10
c0013581:	ba 30 b4 02 c0       	mov    edx,0xc002b430
c0013586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001358a:	89 10                	mov    DWORD PTR [eax],edx
c001358c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013590:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001359a:	90                   	nop
c001359b:	83 c4 0c             	add    esp,0xc
c001359e:	c3                   	ret    
c001359f:	90                   	nop

c00135a0 <Bus::~Bus()>:
c00135a0:	83 ec 0c             	sub    esp,0xc
c00135a3:	ba 30 b4 02 c0       	mov    edx,0xc002b430
c00135a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ac:	89 10                	mov    DWORD PTR [eax],edx
c00135ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b2:	83 ec 0c             	sub    esp,0xc
c00135b5:	50                   	push   eax
c00135b6:	e8 15 06 00 00       	call   c0013bd0 <Device::~Device()>
c00135bb:	83 c4 10             	add    esp,0x10
c00135be:	90                   	nop
c00135bf:	83 c4 0c             	add    esp,0xc
c00135c2:	c3                   	ret    
c00135c3:	90                   	nop

c00135c4 <Bus::~Bus()>:
c00135c4:	83 ec 0c             	sub    esp,0xc
c00135c7:	83 ec 0c             	sub    esp,0xc
c00135ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135ce:	e8 cd ff ff ff       	call   c00135a0 <Bus::~Bus()>
c00135d3:	83 c4 10             	add    esp,0x10
c00135d6:	83 ec 08             	sub    esp,0x8
c00135d9:	68 58 01 00 00       	push   0x158
c00135de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135e2:	e8 02 f2 ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c00135e7:	83 c4 10             	add    esp,0x10
c00135ea:	83 c4 0c             	add    esp,0xc
c00135ed:	c3                   	ret    

c00135ee <Buzzer::Buzzer(char const*)>:
c00135ee:	83 ec 0c             	sub    esp,0xc
c00135f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f5:	83 ec 08             	sub    esp,0x8
c00135f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135fc:	50                   	push   eax
c00135fd:	e8 04 09 00 00       	call   c0013f06 <Device::Device(char const*)>
c0013602:	83 c4 10             	add    esp,0x10
c0013605:	ba 5c b4 02 c0       	mov    edx,0xc002b45c
c001360a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001360e:	89 10                	mov    DWORD PTR [eax],edx
c0013610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013614:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001361e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013622:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001362c:	90                   	nop
c001362d:	83 c4 0c             	add    esp,0xc
c0013630:	c3                   	ret    
c0013631:	90                   	nop

c0013632 <Buzzer::~Buzzer()>:
c0013632:	83 ec 0c             	sub    esp,0xc
c0013635:	ba 5c b4 02 c0       	mov    edx,0xc002b45c
c001363a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001363e:	89 10                	mov    DWORD PTR [eax],edx
c0013640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013644:	83 ec 0c             	sub    esp,0xc
c0013647:	50                   	push   eax
c0013648:	e8 83 05 00 00       	call   c0013bd0 <Device::~Device()>
c001364d:	83 c4 10             	add    esp,0x10
c0013650:	90                   	nop
c0013651:	83 c4 0c             	add    esp,0xc
c0013654:	c3                   	ret    
c0013655:	90                   	nop

c0013656 <Buzzer::~Buzzer()>:
c0013656:	83 ec 0c             	sub    esp,0xc
c0013659:	83 ec 0c             	sub    esp,0xc
c001365c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013660:	e8 cd ff ff ff       	call   c0013632 <Buzzer::~Buzzer()>
c0013665:	83 c4 10             	add    esp,0x10
c0013668:	83 ec 08             	sub    esp,0x8
c001366b:	68 5c 01 00 00       	push   0x15c
c0013670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013674:	e8 70 f1 ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0013679:	83 c4 10             	add    esp,0x10
c001367c:	83 c4 0c             	add    esp,0xc
c001367f:	c3                   	ret    

c0013680 <Buzzer::stop()>:
c0013680:	83 ec 14             	sub    esp,0x14
c0013683:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013687:	8b 10                	mov    edx,DWORD PTR [eax]
c0013689:	6a 00                	push   0x0
c001368b:	50                   	push   eax
c001368c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001368f:	83 c4 1c             	add    esp,0x1c
c0013692:	c3                   	ret    

c0013693 <beepThread(void*)>:
c0013693:	53                   	push   ebx
c0013694:	83 ec 08             	sub    esp,0x8
c0013697:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001369c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136a0:	48                   	dec    eax
c00136a1:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c00136a6:	75 01                	jne    c00136a9 <beepThread(void*)+0x16>
c00136a8:	fb                   	sti    
c00136a9:	50                   	push   eax
c00136aa:	50                   	push   eax
c00136ab:	b8 40 42 0f 00       	mov    eax,0xf4240
c00136b0:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00136b6:	52                   	push   edx
c00136b7:	50                   	push   eax
c00136b8:	e8 f8 ac 00 00       	call   c001e3b5 <nanoSleep(unsigned long long)>
c00136bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136c0:	e8 bb ff ff ff       	call   c0013680 <Buzzer::stop()>
c00136c5:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00136cd:	83 c4 18             	add    esp,0x18
c00136d0:	5b                   	pop    ebx
c00136d1:	e9 db ab 00 00       	jmp    c001e2b1 <blockTask(TaskState)>

c00136d6 <Buzzer::beep(int, int, bool)>:
c00136d6:	57                   	push   edi
c00136d7:	56                   	push   esi
c00136d8:	53                   	push   ebx
c00136d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136dd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00136e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136e5:	52                   	push   edx
c00136e6:	52                   	push   edx
c00136e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00136e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136ed:	56                   	push   esi
c00136ee:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136f1:	83 c4 10             	add    esp,0x10
c00136f4:	89 f8                	mov    eax,edi
c00136f6:	84 c0                	test   al,al
c00136f8:	74 1f                	je     c0013719 <Buzzer::beep(int, int, bool)+0x43>
c00136fa:	50                   	push   eax
c00136fb:	50                   	push   eax
c00136fc:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013702:	99                   	cdq    
c0013703:	52                   	push   edx
c0013704:	50                   	push   eax
c0013705:	e8 ab ac 00 00       	call   c001e3b5 <nanoSleep(unsigned long long)>
c001370a:	83 c4 10             	add    esp,0x10
c001370d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013711:	5b                   	pop    ebx
c0013712:	5e                   	pop    esi
c0013713:	5f                   	pop    edi
c0013714:	e9 67 ff ff ff       	jmp    c0013680 <Buzzer::stop()>
c0013719:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001371f:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0013724:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001372c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013730:	c7 44 24 14 93 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013693
c0013738:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001373c:	5b                   	pop    ebx
c001373d:	5e                   	pop    esi
c001373e:	5f                   	pop    edi
c001373f:	e9 2a a7 00 00       	jmp    c001de6e <Process::createThread(void (*)(void*), void*, int)>

c0013744 <User::loadClockSettings(int)>:
c0013744:	53                   	push   ebx
c0013745:	83 ec 14             	sub    esp,0x14
c0013748:	68 14 01 00 00       	push   0x114
c001374d:	e8 3a c1 ff ff       	call   c000f88c <malloc>
c0013752:	83 c4 0c             	add    esp,0xc
c0013755:	89 c3                	mov    ebx,eax
c0013757:	ff 35 10 28 03 c0    	push   DWORD PTR ds:0xc0032810
c001375d:	68 84 b4 02 c0       	push   0xc002b484
c0013762:	50                   	push   eax
c0013763:	e8 c0 f6 ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c0013768:	58                   	pop    eax
c0013769:	5a                   	pop    edx
c001376a:	6a 01                	push   0x1
c001376c:	53                   	push   ebx
c001376d:	e8 1a f7 ff ff       	call   c0012e8c <File::open(FileOpenMode)>
c0013772:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013775:	e8 70 f7 ff ff       	call   c0012eea <File::close()>
c001377a:	83 c4 10             	add    esp,0x10
c001377d:	85 db                	test   ebx,ebx
c001377f:	74 0f                	je     c0013790 <User::loadClockSettings(int)+0x4c>
c0013781:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013783:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013787:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001378a:	83 c4 08             	add    esp,0x8
c001378d:	5b                   	pop    ebx
c001378e:	ff e0                	jmp    eax
c0013790:	83 c4 08             	add    esp,0x8
c0013793:	5b                   	pop    ebx
c0013794:	c3                   	ret    
c0013795:	90                   	nop

c0013796 <Clock::Clock(char const*)>:
c0013796:	83 ec 0c             	sub    esp,0xc
c0013799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001379d:	83 ec 08             	sub    esp,0x8
c00137a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137a4:	50                   	push   eax
c00137a5:	e8 5c 07 00 00       	call   c0013f06 <Device::Device(char const*)>
c00137aa:	83 c4 10             	add    esp,0x10
c00137ad:	ba ac b4 02 c0       	mov    edx,0xc002b4ac
c00137b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b6:	89 10                	mov    DWORD PTR [eax],edx
c00137b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137bc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00137c6:	90                   	nop
c00137c7:	83 c4 0c             	add    esp,0xc
c00137ca:	c3                   	ret    
c00137cb:	90                   	nop

c00137cc <Clock::~Clock()>:
c00137cc:	83 ec 0c             	sub    esp,0xc
c00137cf:	ba ac b4 02 c0       	mov    edx,0xc002b4ac
c00137d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d8:	89 10                	mov    DWORD PTR [eax],edx
c00137da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137de:	83 ec 0c             	sub    esp,0xc
c00137e1:	50                   	push   eax
c00137e2:	e8 e9 03 00 00       	call   c0013bd0 <Device::~Device()>
c00137e7:	83 c4 10             	add    esp,0x10
c00137ea:	90                   	nop
c00137eb:	83 c4 0c             	add    esp,0xc
c00137ee:	c3                   	ret    
c00137ef:	90                   	nop

c00137f0 <Clock::~Clock()>:
c00137f0:	83 ec 0c             	sub    esp,0xc
c00137f3:	83 ec 0c             	sub    esp,0xc
c00137f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137fa:	e8 cd ff ff ff       	call   c00137cc <Clock::~Clock()>
c00137ff:	83 c4 10             	add    esp,0x10
c0013802:	83 ec 08             	sub    esp,0x8
c0013805:	68 58 01 00 00       	push   0x158
c001380a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001380e:	e8 d6 ef ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0013813:	83 c4 10             	add    esp,0x10
c0013816:	83 c4 0c             	add    esp,0xc
c0013819:	c3                   	ret    

c001381a <Clock::timeInSecondsLocal()>:
c001381a:	53                   	push   ebx
c001381b:	83 ec 14             	sub    esp,0x14
c001381e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013822:	8b 10                	mov    edx,DWORD PTR [eax]
c0013824:	50                   	push   eax
c0013825:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013828:	0f b6 0d 3c f4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f43c
c001382f:	03 0d 40 f4 02 c0    	add    ecx,DWORD PTR ds:0xc002f440
c0013835:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001383b:	89 cb                	mov    ebx,ecx
c001383d:	c1 fb 1f             	sar    ebx,0x1f
c0013840:	01 c8                	add    eax,ecx
c0013842:	11 da                	adc    edx,ebx
c0013844:	83 c4 10             	add    esp,0x10
c0013847:	31 c9                	xor    ecx,ecx
c0013849:	80 3d 3d f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f43d,0x0
c0013850:	74 05                	je     c0013857 <Clock::timeInSecondsLocal()+0x3d>
c0013852:	b9 08 07 00 00       	mov    ecx,0x708
c0013857:	31 db                	xor    ebx,ebx
c0013859:	01 c8                	add    eax,ecx
c001385b:	11 da                	adc    edx,ebx
c001385d:	83 c4 08             	add    esp,0x8
c0013860:	5b                   	pop    ebx
c0013861:	c3                   	ret    

c0013862 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013862:	57                   	push   edi
c0013863:	56                   	push   esi
c0013864:	53                   	push   ebx
c0013865:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013869:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001386d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001386f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013873:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013876:	0f b6 05 3c f4 02 c0 	movzx  eax,BYTE PTR ds:0xc002f43c
c001387d:	03 05 40 f4 02 c0    	add    eax,DWORD PTR ds:0xc002f440
c0013883:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013889:	99                   	cdq    
c001388a:	29 c6                	sub    esi,eax
c001388c:	19 d7                	sbb    edi,edx
c001388e:	89 f0                	mov    eax,esi
c0013890:	89 fa                	mov    edx,edi
c0013892:	31 f6                	xor    esi,esi
c0013894:	80 3d 3d f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f43d,0x0
c001389b:	74 05                	je     c00138a2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001389d:	be 08 07 00 00       	mov    esi,0x708
c00138a2:	31 ff                	xor    edi,edi
c00138a4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00138a8:	29 f0                	sub    eax,esi
c00138aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138ae:	19 fa                	sbb    edx,edi
c00138b0:	89 d8                	mov    eax,ebx
c00138b2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138b6:	5b                   	pop    ebx
c00138b7:	5e                   	pop    esi
c00138b8:	5f                   	pop    edi
c00138b9:	ff e0                	jmp    eax

c00138bb <datetimeToSeconds(datetime_t)>:
c00138bb:	55                   	push   ebp
c00138bc:	57                   	push   edi
c00138bd:	56                   	push   esi
c00138be:	53                   	push   ebx
c00138bf:	83 ec 14             	sub    esp,0x14
c00138c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138c6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00138ca:	89 d3                	mov    ebx,edx
c00138cc:	0f b6 c6             	movzx  eax,dh
c00138cf:	c1 eb 10             	shr    ebx,0x10
c00138d2:	48                   	dec    eax
c00138d3:	66 81 eb 6c 07       	sub    bx,0x76c
c00138d8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00138dc:	0f b6 f5             	movzx  esi,ch
c00138df:	89 cf                	mov    edi,ecx
c00138e1:	6b f6 3c             	imul   esi,esi,0x3c
c00138e4:	c1 ef 10             	shr    edi,0x10
c00138e7:	0f b6 c9             	movzx  ecx,cl
c00138ea:	89 f8                	mov    eax,edi
c00138ec:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138f2:	0f b6 f8             	movzx  edi,al
c00138f5:	0f b6 d2             	movzx  edx,dl
c00138f8:	01 fe                	add    esi,edi
c00138fa:	01 f1                	add    ecx,esi
c00138fc:	0f b7 f3             	movzx  esi,bx
c00138ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013903:	c1 f9 1f             	sar    ecx,0x1f
c0013906:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001390b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001390f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013914:	8b 0c 8d e0 b4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4b20]
c001391b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001391f:	76 29                	jbe    c001394a <datetimeToSeconds(datetime_t)+0x8f>
c0013921:	f6 c3 03             	test   bl,0x3
c0013924:	75 24                	jne    c001394a <datetimeToSeconds(datetime_t)+0x8f>
c0013926:	31 d2                	xor    edx,edx
c0013928:	bf 64 00 00 00       	mov    edi,0x64
c001392d:	89 d8                	mov    eax,ebx
c001392f:	66 f7 f7             	div    di
c0013932:	66 85 d2             	test   dx,dx
c0013935:	75 12                	jne    c0013949 <datetimeToSeconds(datetime_t)+0x8e>
c0013937:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001393d:	bf 90 01 00 00       	mov    edi,0x190
c0013942:	99                   	cdq    
c0013943:	f7 ff                	idiv   edi
c0013945:	85 d2                	test   edx,edx
c0013947:	75 01                	jne    c001394a <datetimeToSeconds(datetime_t)+0x8f>
c0013949:	41                   	inc    ecx
c001394a:	66 83 fb 46          	cmp    bx,0x46
c001394e:	76 45                	jbe    c0013995 <datetimeToSeconds(datetime_t)+0xda>
c0013950:	bb 46 00 00 00       	mov    ebx,0x46
c0013955:	bf 64 00 00 00       	mov    edi,0x64
c001395a:	bd 90 01 00 00       	mov    ebp,0x190
c001395f:	b8 6d 01 00 00       	mov    eax,0x16d
c0013964:	f6 c3 03             	test   bl,0x3
c0013967:	75 23                	jne    c001398c <datetimeToSeconds(datetime_t)+0xd1>
c0013969:	89 d8                	mov    eax,ebx
c001396b:	99                   	cdq    
c001396c:	f7 ff                	idiv   edi
c001396e:	b8 6e 01 00 00       	mov    eax,0x16e
c0013973:	85 d2                	test   edx,edx
c0013975:	75 15                	jne    c001398c <datetimeToSeconds(datetime_t)+0xd1>
c0013977:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001397d:	99                   	cdq    
c001397e:	f7 fd                	idiv   ebp
c0013980:	83 fa 01             	cmp    edx,0x1
c0013983:	19 c0                	sbb    eax,eax
c0013985:	f7 d0                	not    eax
c0013987:	05 6e 01 00 00       	add    eax,0x16e
c001398c:	01 c1                	add    ecx,eax
c001398e:	43                   	inc    ebx
c001398f:	39 f3                	cmp    ebx,esi
c0013991:	7c cc                	jl     c001395f <datetimeToSeconds(datetime_t)+0xa4>
c0013993:	eb 35                	jmp    c00139ca <datetimeToSeconds(datetime_t)+0x10f>
c0013995:	74 33                	je     c00139ca <datetimeToSeconds(datetime_t)+0x10f>
c0013997:	b8 45 00 00 00       	mov    eax,0x45
c001399c:	89 c2                	mov    edx,eax
c001399e:	83 e2 03             	and    edx,0x3
c00139a1:	39 f0                	cmp    eax,esi
c00139a3:	7e 0f                	jle    c00139b4 <datetimeToSeconds(datetime_t)+0xf9>
c00139a5:	83 fa 01             	cmp    edx,0x1
c00139a8:	19 d2                	sbb    edx,edx
c00139aa:	48                   	dec    eax
c00139ab:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00139b2:	eb e8                	jmp    c001399c <datetimeToSeconds(datetime_t)+0xe1>
c00139b4:	b8 6d 01 00 00       	mov    eax,0x16d
c00139b9:	85 d2                	test   edx,edx
c00139bb:	75 0b                	jne    c00139c8 <datetimeToSeconds(datetime_t)+0x10d>
c00139bd:	66 83 fb 01          	cmp    bx,0x1
c00139c1:	19 c0                	sbb    eax,eax
c00139c3:	05 6e 01 00 00       	add    eax,0x16e
c00139c8:	29 c1                	sub    ecx,eax
c00139ca:	b8 80 51 01 00       	mov    eax,0x15180
c00139cf:	f7 e9                	imul   ecx
c00139d1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00139d5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00139d9:	83 c4 14             	add    esp,0x14
c00139dc:	5b                   	pop    ebx
c00139dd:	5e                   	pop    esi
c00139de:	5f                   	pop    edi
c00139df:	5d                   	pop    ebp
c00139e0:	c3                   	ret    
c00139e1:	90                   	nop

c00139e2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00139e2:	57                   	push   edi
c00139e3:	56                   	push   esi
c00139e4:	53                   	push   ebx
c00139e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139e9:	8b 06                	mov    eax,DWORD PTR [esi]
c00139eb:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00139ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139f6:	e8 c0 fe ff ff       	call   c00138bb <datetimeToSeconds(datetime_t)>
c00139fb:	59                   	pop    ecx
c00139fc:	0f b6 0d 3c f4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f43c
c0013a03:	5b                   	pop    ebx
c0013a04:	03 0d 40 f4 02 c0    	add    ecx,DWORD PTR ds:0xc002f440
c0013a0a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a10:	89 cb                	mov    ebx,ecx
c0013a12:	c1 fb 1f             	sar    ebx,0x1f
c0013a15:	29 c8                	sub    eax,ecx
c0013a17:	19 da                	sbb    edx,ebx
c0013a19:	31 c9                	xor    ecx,ecx
c0013a1b:	80 3d 3d f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f43d,0x0
c0013a22:	74 05                	je     c0013a29 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a24:	b9 08 07 00 00       	mov    ecx,0x708
c0013a29:	31 db                	xor    ebx,ebx
c0013a2b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a2f:	29 c8                	sub    eax,ecx
c0013a31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a35:	19 da                	sbb    edx,ebx
c0013a37:	89 f8                	mov    eax,edi
c0013a39:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a3d:	5b                   	pop    ebx
c0013a3e:	5e                   	pop    esi
c0013a3f:	5f                   	pop    edi
c0013a40:	ff e0                	jmp    eax

c0013a42 <secondsToDatetime(unsigned long long)>:
c0013a42:	55                   	push   ebp
c0013a43:	57                   	push   edi
c0013a44:	56                   	push   esi
c0013a45:	53                   	push   ebx
c0013a46:	83 ec 1c             	sub    esp,0x1c
c0013a49:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a4d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a51:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a55:	6a 00                	push   0x0
c0013a57:	68 80 51 01 00       	push   0x15180
c0013a5c:	55                   	push   ebp
c0013a5d:	57                   	push   edi
c0013a5e:	e8 91 37 01 00       	call   c00271f4 <__udivdi3>
c0013a63:	83 c4 10             	add    esp,0x10
c0013a66:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a70:	6a 00                	push   0x0
c0013a72:	68 80 51 01 00       	push   0x15180
c0013a77:	55                   	push   ebp
c0013a78:	57                   	push   edi
c0013a79:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a7e:	e8 71 38 01 00       	call   c00272f4 <__umoddi3>
c0013a83:	83 c4 10             	add    esp,0x10
c0013a86:	99                   	cdq    
c0013a87:	f7 ff                	idiv   edi
c0013a89:	bf 3c 00 00 00       	mov    edi,0x3c
c0013a8e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013a91:	89 d0                	mov    eax,edx
c0013a93:	99                   	cdq    
c0013a94:	f7 ff                	idiv   edi
c0013a96:	85 db                	test   ebx,ebx
c0013a98:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013a9b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013a9e:	79 11                	jns    c0013ab1 <secondsToDatetime(unsigned long long)+0x6f>
c0013aa0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013aa4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013aaa:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013aaf:	eb 07                	jmp    c0013ab8 <secondsToDatetime(unsigned long long)+0x76>
c0013ab1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ab6:	89 d8                	mov    eax,ebx
c0013ab8:	bf b4 05 00 00       	mov    edi,0x5b4
c0013abd:	99                   	cdq    
c0013abe:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013ac3:	f7 f9                	idiv   ecx
c0013ac5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013aca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ace:	31 d2                	xor    edx,edx
c0013ad0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013ad8:	01 c3                	add    ebx,eax
c0013ada:	89 d8                	mov    eax,ebx
c0013adc:	f7 f1                	div    ecx
c0013ade:	31 d2                	xor    edx,edx
c0013ae0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013ae3:	89 d8                	mov    eax,ebx
c0013ae5:	f7 f7                	div    edi
c0013ae7:	31 d2                	xor    edx,edx
c0013ae9:	29 c1                	sub    ecx,eax
c0013aeb:	89 d8                	mov    eax,ebx
c0013aed:	f7 f5                	div    ebp
c0013aef:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013af4:	29 c1                	sub    ecx,eax
c0013af6:	31 d2                	xor    edx,edx
c0013af8:	89 c8                	mov    eax,ecx
c0013afa:	f7 f5                	div    ebp
c0013afc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013b01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b05:	31 d2                	xor    edx,edx
c0013b07:	89 c8                	mov    eax,ecx
c0013b09:	f7 f5                	div    ebp
c0013b0b:	31 d2                	xor    edx,edx
c0013b0d:	01 c3                	add    ebx,eax
c0013b0f:	89 c8                	mov    eax,ecx
c0013b11:	f7 f7                	div    edi
c0013b13:	bf 99 00 00 00       	mov    edi,0x99
c0013b18:	29 c3                	sub    ebx,eax
c0013b1a:	31 d2                	xor    edx,edx
c0013b1c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b24:	29 c3                	sub    ebx,eax
c0013b26:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b29:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b2c:	bb 05 00 00 00       	mov    ebx,0x5
c0013b31:	83 c1 02             	add    ecx,0x2
c0013b34:	89 c8                	mov    eax,ecx
c0013b36:	f7 f7                	div    edi
c0013b38:	31 d2                	xor    edx,edx
c0013b3a:	89 c7                	mov    edi,eax
c0013b3c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b42:	83 c0 02             	add    eax,0x2
c0013b45:	f7 f3                	div    ebx
c0013b47:	89 eb                	mov    ebx,ebp
c0013b49:	29 c3                	sub    ebx,eax
c0013b4b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b51:	88 1e                	mov    BYTE PTR [esi],bl
c0013b53:	19 c0                	sbb    eax,eax
c0013b55:	31 d2                	xor    edx,edx
c0013b57:	83 e0 0c             	and    eax,0xc
c0013b5a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b5e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b66:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b6a:	83 f9 01             	cmp    ecx,0x1
c0013b6d:	0f 96 c2             	setbe  dl
c0013b70:	41                   	inc    ecx
c0013b71:	01 d0                	add    eax,edx
c0013b73:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b76:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b7a:	83 c4 1c             	add    esp,0x1c
c0013b7d:	89 f0                	mov    eax,esi
c0013b7f:	5b                   	pop    ebx
c0013b80:	5e                   	pop    esi
c0013b81:	5f                   	pop    edi
c0013b82:	5d                   	pop    ebp
c0013b83:	c2 04 00             	ret    0x4

c0013b86 <Clock::timeInDatetimeLocal()>:
c0013b86:	53                   	push   ebx
c0013b87:	83 ec 14             	sub    esp,0x14
c0013b8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b8e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b92:	e8 83 fc ff ff       	call   c001381a <Clock::timeInSecondsLocal()>
c0013b97:	83 c4 0c             	add    esp,0xc
c0013b9a:	52                   	push   edx
c0013b9b:	50                   	push   eax
c0013b9c:	53                   	push   ebx
c0013b9d:	e8 a0 fe ff ff       	call   c0013a42 <secondsToDatetime(unsigned long long)>
c0013ba2:	89 d8                	mov    eax,ebx
c0013ba4:	83 c4 14             	add    esp,0x14
c0013ba7:	5b                   	pop    ebx
c0013ba8:	c2 04 00             	ret    0x4
c0013bab:	90                   	nop

c0013bac <Device::hibernate()>:
c0013bac:	c3                   	ret    
c0013bad:	90                   	nop

c0013bae <Device::wake()>:
c0013bae:	c3                   	ret    
c0013baf:	90                   	nop

c0013bb0 <Device::detect()>:
c0013bb0:	c3                   	ret    
c0013bb1:	90                   	nop

c0013bb2 <Device::disableLegacy()>:
c0013bb2:	c3                   	ret    
c0013bb3:	90                   	nop

c0013bb4 <Device::powerSaving(PowerSavingLevel)>:
c0013bb4:	c3                   	ret    
c0013bb5:	90                   	nop

c0013bb6 <DriverlessDevice::close(int, int, void*)>:
c0013bb6:	31 c0                	xor    eax,eax
c0013bb8:	c3                   	ret    
c0013bb9:	90                   	nop

c0013bba <DriverlessDevice::detect()>:
c0013bba:	c3                   	ret    
c0013bbb:	90                   	nop

c0013bbc <DriverlessDevice::open(int, int, void*)>:
c0013bbc:	83 ec 18             	sub    esp,0x18
c0013bbf:	68 10 b5 02 c0       	push   0xc002b510
c0013bc4:	e8 36 67 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0013bc9:	83 c8 ff             	or     eax,0xffffffff
c0013bcc:	83 c4 1c             	add    esp,0x1c
c0013bcf:	c3                   	ret    

c0013bd0 <Device::~Device()>:
c0013bd0:	ba 70 b5 02 c0       	mov    edx,0xc002b570
c0013bd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bd9:	89 10                	mov    DWORD PTR [eax],edx
c0013bdb:	90                   	nop
c0013bdc:	c3                   	ret    
c0013bdd:	90                   	nop

c0013bde <Device::~Device()>:
c0013bde:	83 ec 0c             	sub    esp,0xc
c0013be1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013be5:	e8 e6 ff ff ff       	call   c0013bd0 <Device::~Device()>
c0013bea:	83 c4 04             	add    esp,0x4
c0013bed:	83 ec 08             	sub    esp,0x8
c0013bf0:	68 58 01 00 00       	push   0x158
c0013bf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bf9:	e8 eb eb ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0013bfe:	83 c4 10             	add    esp,0x10
c0013c01:	83 c4 0c             	add    esp,0xc
c0013c04:	c3                   	ret    
c0013c05:	90                   	nop

c0013c06 <Device::findAndLoadDriver()>:
c0013c06:	c7 44 24 04 2e b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b52e
c0013c0e:	e9 b6 ec ff ff       	jmp    c00128c9 <Dbg::kprintf(char const*, ...)>
c0013c13:	90                   	nop

c0013c14 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013c14:	57                   	push   edi
c0013c15:	b9 09 00 00 00       	mov    ecx,0x9
c0013c1a:	56                   	push   esi
c0013c1b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c1f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c23:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c2d:	81 c7 18 01 00 00    	add    edi,0x118
c0013c33:	fc                   	cld    
c0013c34:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c36:	5e                   	pop    esi
c0013c37:	5f                   	pop    edi
c0013c38:	c3                   	ret    
c0013c39:	90                   	nop

c0013c3a <Device::preOpenACPI(void*, char*, char*)>:
c0013c3a:	57                   	push   edi
c0013c3b:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013c40:	56                   	push   esi
c0013c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c49:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013c53:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013c59:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013c5f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c65:	b9 0e 00 00 00       	mov    ecx,0xe
c0013c6a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013c70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013c74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c76:	5e                   	pop    esi
c0013c77:	5f                   	pop    edi
c0013c78:	c3                   	ret    
c0013c79:	90                   	nop

c0013c7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c7e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c83:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c8a:	75 0b                	jne    c0013c97 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c8e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c92:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013c95:	eb 1e                	jmp    c0013cb5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013c97:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0013c9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ca2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ca8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013caa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cb2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013cb5:	ff e0                	jmp    eax
c0013cb7:	90                   	nop

c0013cb8 <Device::getParent()>:
c0013cb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cbc:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013cc2:	c3                   	ret    
c0013cc3:	90                   	nop

c0013cc4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cc8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ccd:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cd4:	75 0b                	jne    c0013ce1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013cd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cdc:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013cdf:	eb 1e                	jmp    c0013cff <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013ce1:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0013ce6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cec:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cf4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cf8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cfc:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013cff:	ff e0                	jmp    eax
c0013d01:	90                   	nop

c0013d02 <Device::addChild(Device*)>:
c0013d02:	53                   	push   ebx
c0013d03:	83 ec 08             	sub    esp,0x8
c0013d06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d0e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013d14:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d1a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d1c:	85 d2                	test   edx,edx
c0013d1e:	74 04                	je     c0013d24 <Device::addChild(Device*)+0x22>
c0013d20:	89 d3                	mov    ebx,edx
c0013d22:	eb f6                	jmp    c0013d1a <Device::addChild(Device*)+0x18>
c0013d24:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d27:	83 ec 0c             	sub    esp,0xc
c0013d2a:	6a 08                	push   0x8
c0013d2c:	e8 5b bb ff ff       	call   c000f88c <malloc>
c0013d31:	89 03                	mov    DWORD PTR [ebx],eax
c0013d33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d40:	83 c4 18             	add    esp,0x18
c0013d43:	5b                   	pop    ebx
c0013d44:	c3                   	ret    
c0013d45:	90                   	nop

c0013d46 <Device::removeAllChildren()>:
c0013d46:	56                   	push   esi
c0013d47:	53                   	push   ebx
c0013d48:	52                   	push   edx
c0013d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d4d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d56:	74 17                	je     c0013d6f <Device::removeAllChildren()+0x29>
c0013d58:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d5b:	85 c0                	test   eax,eax
c0013d5d:	74 0c                	je     c0013d6b <Device::removeAllChildren()+0x25>
c0013d5f:	83 ec 0c             	sub    esp,0xc
c0013d62:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d64:	50                   	push   eax
c0013d65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d68:	83 c4 10             	add    esp,0x10
c0013d6b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d6d:	eb e4                	jmp    c0013d53 <Device::removeAllChildren()+0xd>
c0013d6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d7b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d88:	58                   	pop    eax
c0013d89:	5b                   	pop    ebx
c0013d8a:	5e                   	pop    esi
c0013d8b:	c3                   	ret    

c0013d8c <Device::hibernateAll()>:
c0013d8c:	53                   	push   ebx
c0013d8d:	83 ec 14             	sub    esp,0x14
c0013d90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d96:	53                   	push   ebx
c0013d97:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013d9a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013da0:	83 c4 10             	add    esp,0x10
c0013da3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013da6:	74 0f                	je     c0013db7 <Device::hibernateAll()+0x2b>
c0013da8:	83 ec 0c             	sub    esp,0xc
c0013dab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dae:	e8 d9 ff ff ff       	call   c0013d8c <Device::hibernateAll()>
c0013db3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013db5:	eb e9                	jmp    c0013da0 <Device::hibernateAll()+0x14>
c0013db7:	83 c4 08             	add    esp,0x8
c0013dba:	5b                   	pop    ebx
c0013dbb:	c3                   	ret    

c0013dbc <Device::wakeAll()>:
c0013dbc:	53                   	push   ebx
c0013dbd:	83 ec 14             	sub    esp,0x14
c0013dc0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dc6:	53                   	push   ebx
c0013dc7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013dca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dd0:	83 c4 10             	add    esp,0x10
c0013dd3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dd6:	74 0f                	je     c0013de7 <Device::wakeAll()+0x2b>
c0013dd8:	83 ec 0c             	sub    esp,0xc
c0013ddb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dde:	e8 d9 ff ff ff       	call   c0013dbc <Device::wakeAll()>
c0013de3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013de5:	eb e9                	jmp    c0013dd0 <Device::wakeAll()+0x14>
c0013de7:	83 c4 08             	add    esp,0x8
c0013dea:	5b                   	pop    ebx
c0013deb:	c3                   	ret    

c0013dec <Device::detectAll()>:
c0013dec:	53                   	push   ebx
c0013ded:	83 ec 14             	sub    esp,0x14
c0013df0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013df4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013df6:	53                   	push   ebx
c0013df7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013dfa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e00:	83 c4 10             	add    esp,0x10
c0013e03:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e06:	74 0f                	je     c0013e17 <Device::detectAll()+0x2b>
c0013e08:	83 ec 0c             	sub    esp,0xc
c0013e0b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e0e:	e8 d9 ff ff ff       	call   c0013dec <Device::detectAll()>
c0013e13:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e15:	eb e9                	jmp    c0013e00 <Device::detectAll()+0x14>
c0013e17:	83 c4 08             	add    esp,0x8
c0013e1a:	5b                   	pop    ebx
c0013e1b:	c3                   	ret    

c0013e1c <Device::disableLegacyAll()>:
c0013e1c:	53                   	push   ebx
c0013e1d:	83 ec 14             	sub    esp,0x14
c0013e20:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e26:	53                   	push   ebx
c0013e27:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e2a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e30:	83 c4 10             	add    esp,0x10
c0013e33:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e36:	74 0f                	je     c0013e47 <Device::disableLegacyAll()+0x2b>
c0013e38:	83 ec 0c             	sub    esp,0xc
c0013e3b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e3e:	e8 d9 ff ff ff       	call   c0013e1c <Device::disableLegacyAll()>
c0013e43:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e45:	eb e9                	jmp    c0013e30 <Device::disableLegacyAll()+0x14>
c0013e47:	83 c4 08             	add    esp,0x8
c0013e4a:	5b                   	pop    ebx
c0013e4b:	c3                   	ret    

c0013e4c <Device::loadDriversForAll()>:
c0013e4c:	53                   	push   ebx
c0013e4d:	83 ec 08             	sub    esp,0x8
c0013e50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e54:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013e5b:	75 0c                	jne    c0013e69 <Device::loadDriversForAll()+0x1d>
c0013e5d:	83 ec 0c             	sub    esp,0xc
c0013e60:	53                   	push   ebx
c0013e61:	e8 a0 fd ff ff       	call   c0013c06 <Device::findAndLoadDriver()>
c0013e66:	83 c4 10             	add    esp,0x10
c0013e69:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e6f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e72:	74 12                	je     c0013e86 <Device::loadDriversForAll()+0x3a>
c0013e74:	83 ec 0c             	sub    esp,0xc
c0013e77:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e7a:	e8 cd ff ff ff       	call   c0013e4c <Device::loadDriversForAll()>
c0013e7f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e81:	83 c4 10             	add    esp,0x10
c0013e84:	eb e9                	jmp    c0013e6f <Device::loadDriversForAll()+0x23>
c0013e86:	83 c4 08             	add    esp,0x8
c0013e89:	5b                   	pop    ebx
c0013e8a:	c3                   	ret    
c0013e8b:	90                   	nop

c0013e8c <Device::closeAll()>:
c0013e8c:	53                   	push   ebx
c0013e8d:	83 ec 08             	sub    esp,0x8
c0013e90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e96:	6a 00                	push   0x0
c0013e98:	6a 00                	push   0x0
c0013e9a:	6a 00                	push   0x0
c0013e9c:	53                   	push   ebx
c0013e9d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ea0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ea6:	83 c4 10             	add    esp,0x10
c0013ea9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013eac:	74 0f                	je     c0013ebd <Device::closeAll()+0x31>
c0013eae:	83 ec 0c             	sub    esp,0xc
c0013eb1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eb4:	e8 d3 ff ff ff       	call   c0013e8c <Device::closeAll()>
c0013eb9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ebb:	eb e9                	jmp    c0013ea6 <Device::closeAll()+0x1a>
c0013ebd:	83 c4 08             	add    esp,0x8
c0013ec0:	5b                   	pop    ebx
c0013ec1:	c3                   	ret    

c0013ec2 <Device::powerSavingAll(PowerSavingLevel)>:
c0013ec2:	56                   	push   esi
c0013ec3:	53                   	push   ebx
c0013ec4:	83 ec 0c             	sub    esp,0xc
c0013ec7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ecb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ecf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ed1:	56                   	push   esi
c0013ed2:	53                   	push   ebx
c0013ed3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013ed6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013edc:	83 c4 10             	add    esp,0x10
c0013edf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ee2:	74 0f                	je     c0013ef3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013ee4:	52                   	push   edx
c0013ee5:	52                   	push   edx
c0013ee6:	56                   	push   esi
c0013ee7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eea:	e8 d3 ff ff ff       	call   c0013ec2 <Device::powerSavingAll(PowerSavingLevel)>
c0013eef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ef1:	eb e9                	jmp    c0013edc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013ef3:	58                   	pop    eax
c0013ef4:	5b                   	pop    ebx
c0013ef5:	5e                   	pop    esi
c0013ef6:	c3                   	ret    
c0013ef7:	90                   	nop

c0013ef8 <Device::setName(char const*)>:
c0013ef8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013f00:	e9 07 c9 fe ff       	jmp    c000080c <strcpy>
c0013f05:	90                   	nop

c0013f06 <Device::Device(char const*)>:
c0013f06:	83 ec 1c             	sub    esp,0x1c
c0013f09:	ba 70 b5 02 c0       	mov    edx,0xc002b570
c0013f0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f12:	89 10                	mov    DWORD PTR [eax],edx
c0013f14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f18:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f26:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f34:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f42:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f4c:	83 ec 08             	sub    esp,0x8
c0013f4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f57:	e8 9c ff ff ff       	call   c0013ef8 <Device::setName(char const*)>
c0013f5c:	83 c4 10             	add    esp,0x10
c0013f5f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f67:	83 ec 0c             	sub    esp,0xc
c0013f6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f6e:	e8 19 b9 ff ff       	call   c000f88c <malloc>
c0013f73:	83 c4 10             	add    esp,0x10
c0013f76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f83:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f87:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f91:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fa7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fbd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013fd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013fe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff2:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013ffc:	90                   	nop
c0013ffd:	83 c4 1c             	add    esp,0x1c
c0014000:	c3                   	ret    
c0014001:	90                   	nop

c0014002 <Device::getName()>:
c0014002:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014006:	05 d0 00 00 00       	add    eax,0xd0
c001400b:	c3                   	ret    

c001400c <DriverlessDevice::DriverlessDevice(char const*)>:
c001400c:	83 ec 0c             	sub    esp,0xc
c001400f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014013:	83 ec 08             	sub    esp,0x8
c0014016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001401a:	50                   	push   eax
c001401b:	e8 e6 fe ff ff       	call   c0013f06 <Device::Device(char const*)>
c0014020:	83 c4 10             	add    esp,0x10
c0014023:	ba 9c b5 02 c0       	mov    edx,0xc002b59c
c0014028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001402c:	89 10                	mov    DWORD PTR [eax],edx
c001402e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014032:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001403c:	90                   	nop
c001403d:	83 c4 0c             	add    esp,0xc
c0014040:	c3                   	ret    
c0014041:	90                   	nop

c0014042 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014042:	57                   	push   edi
c0014043:	56                   	push   esi
c0014044:	53                   	push   ebx
c0014045:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014049:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001404d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014051:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014057:	75 0c                	jne    c0014065 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014059:	52                   	push   edx
c001405a:	52                   	push   edx
c001405b:	53                   	push   ebx
c001405c:	56                   	push   esi
c001405d:	e8 e4 50 01 00       	call   c0029146 <LinkedList<Device>::addElement(Device*)>
c0014062:	83 c4 10             	add    esp,0x10
c0014065:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001406b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001406e:	74 12                	je     c0014082 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014070:	50                   	push   eax
c0014071:	57                   	push   edi
c0014072:	56                   	push   esi
c0014073:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014076:	e8 c7 ff ff ff       	call   c0014042 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001407b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001407d:	83 c4 10             	add    esp,0x10
c0014080:	eb e9                	jmp    c001406b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014082:	5b                   	pop    ebx
c0014083:	5e                   	pop    esi
c0014084:	5f                   	pop    edi
c0014085:	c3                   	ret    

c0014086 <getDevicesOfType(DeviceType)>:
c0014086:	53                   	push   ebx
c0014087:	83 ec 14             	sub    esp,0x14
c001408a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001408e:	53                   	push   ebx
c001408f:	e8 8e 51 01 00       	call   c0029222 <LinkedList<Device>::LinkedList()>
c0014094:	83 c4 0c             	add    esp,0xc
c0014097:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001409b:	53                   	push   ebx
c001409c:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c00140a2:	e8 9b ff ff ff       	call   c0014042 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00140a7:	89 d8                	mov    eax,ebx
c00140a9:	83 c4 18             	add    esp,0x18
c00140ac:	5b                   	pop    ebx
c00140ad:	c2 04 00             	ret    0x4

c00140b0 <HardDiskController::HardDiskController(char const*)>:
c00140b0:	83 ec 0c             	sub    esp,0xc
c00140b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140b7:	83 ec 08             	sub    esp,0x8
c00140ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140be:	50                   	push   eax
c00140bf:	e8 42 fe ff ff       	call   c0013f06 <Device::Device(char const*)>
c00140c4:	83 c4 10             	add    esp,0x10
c00140c7:	ba c8 b5 02 c0       	mov    edx,0xc002b5c8
c00140cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140d0:	89 10                	mov    DWORD PTR [eax],edx
c00140d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140d6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00140e0:	90                   	nop
c00140e1:	83 c4 0c             	add    esp,0xc
c00140e4:	c3                   	ret    
c00140e5:	90                   	nop

c00140e6 <HardDiskController::~HardDiskController()>:
c00140e6:	83 ec 0c             	sub    esp,0xc
c00140e9:	ba c8 b5 02 c0       	mov    edx,0xc002b5c8
c00140ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140f2:	89 10                	mov    DWORD PTR [eax],edx
c00140f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140f8:	83 ec 0c             	sub    esp,0xc
c00140fb:	50                   	push   eax
c00140fc:	e8 cf fa ff ff       	call   c0013bd0 <Device::~Device()>
c0014101:	83 c4 10             	add    esp,0x10
c0014104:	90                   	nop
c0014105:	83 c4 0c             	add    esp,0xc
c0014108:	c3                   	ret    
c0014109:	90                   	nop

c001410a <HardDiskController::~HardDiskController()>:
c001410a:	83 ec 0c             	sub    esp,0xc
c001410d:	83 ec 0c             	sub    esp,0xc
c0014110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014114:	e8 cd ff ff ff       	call   c00140e6 <HardDiskController::~HardDiskController()>
c0014119:	83 c4 10             	add    esp,0x10
c001411c:	83 ec 08             	sub    esp,0x8
c001411f:	68 58 01 00 00       	push   0x158
c0014124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014128:	e8 bc e6 ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c001412d:	83 c4 10             	add    esp,0x10
c0014130:	83 c4 0c             	add    esp,0xc
c0014133:	c3                   	ret    

c0014134 <PhysicalDisk::eject()>:
c0014134:	83 ec 18             	sub    esp,0x18
c0014137:	68 ec b5 02 c0       	push   0xc002b5ec
c001413c:	e8 88 e7 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0014141:	83 c8 ff             	or     eax,0xffffffff
c0014144:	83 c4 1c             	add    esp,0x1c
c0014147:	c3                   	ret    

c0014148 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014148:	83 ec 0c             	sub    esp,0xc
c001414b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001414f:	83 ec 08             	sub    esp,0x8
c0014152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014156:	50                   	push   eax
c0014157:	e8 aa fd ff ff       	call   c0013f06 <Device::Device(char const*)>
c001415c:	83 c4 10             	add    esp,0x10
c001415f:	ba 1c b6 02 c0       	mov    edx,0xc002b61c
c0014164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014168:	89 10                	mov    DWORD PTR [eax],edx
c001416a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001416e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014179:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014184:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001418e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014192:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014196:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001419c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141a0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141aa:	90                   	nop
c00141ab:	83 c4 0c             	add    esp,0xc
c00141ae:	c3                   	ret    
c00141af:	90                   	nop

c00141b0 <PhysicalDisk::startCache()>:
c00141b0:	56                   	push   esi
c00141b1:	53                   	push   ebx
c00141b2:	83 ec 10             	sub    esp,0x10
c00141b5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141b9:	6a 44                	push   0x44
c00141bb:	e8 cc b6 ff ff       	call   c000f88c <malloc>
c00141c0:	89 c6                	mov    esi,eax
c00141c2:	58                   	pop    eax
c00141c3:	5a                   	pop    edx
c00141c4:	53                   	push   ebx
c00141c5:	56                   	push   esi
c00141c6:	e8 a9 28 00 00       	call   c0016a74 <VCache::VCache(PhysicalDisk*)>
c00141cb:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00141d1:	83 c4 14             	add    esp,0x14
c00141d4:	5b                   	pop    ebx
c00141d5:	5e                   	pop    esi
c00141d6:	c3                   	ret    
c00141d7:	90                   	nop

c00141d8 <PhysicalDisk::~PhysicalDisk()>:
c00141d8:	83 ec 0c             	sub    esp,0xc
c00141db:	ba 1c b6 02 c0       	mov    edx,0xc002b61c
c00141e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141e4:	89 10                	mov    DWORD PTR [eax],edx
c00141e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ea:	83 ec 0c             	sub    esp,0xc
c00141ed:	50                   	push   eax
c00141ee:	e8 dd f9 ff ff       	call   c0013bd0 <Device::~Device()>
c00141f3:	83 c4 10             	add    esp,0x10
c00141f6:	90                   	nop
c00141f7:	83 c4 0c             	add    esp,0xc
c00141fa:	c3                   	ret    
c00141fb:	90                   	nop

c00141fc <PhysicalDisk::~PhysicalDisk()>:
c00141fc:	83 ec 0c             	sub    esp,0xc
c00141ff:	83 ec 0c             	sub    esp,0xc
c0014202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014206:	e8 cd ff ff ff       	call   c00141d8 <PhysicalDisk::~PhysicalDisk()>
c001420b:	83 c4 10             	add    esp,0x10
c001420e:	83 ec 08             	sub    esp,0x8
c0014211:	68 6c 01 00 00       	push   0x16c
c0014216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001421a:	e8 ca e5 ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c001421f:	83 c4 10             	add    esp,0x10
c0014222:	83 c4 0c             	add    esp,0xc
c0014225:	c3                   	ret    

c0014226 <FPU::FPU(char const*)>:
c0014226:	83 ec 0c             	sub    esp,0xc
c0014229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001422d:	83 ec 08             	sub    esp,0x8
c0014230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014234:	50                   	push   eax
c0014235:	e8 cc fc ff ff       	call   c0013f06 <Device::Device(char const*)>
c001423a:	83 c4 10             	add    esp,0x10
c001423d:	ba 60 b6 02 c0       	mov    edx,0xc002b660
c0014242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014246:	89 10                	mov    DWORD PTR [eax],edx
c0014248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001424c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014256:	90                   	nop
c0014257:	83 c4 0c             	add    esp,0xc
c001425a:	c3                   	ret    
c001425b:	90                   	nop

c001425c <FPU::~FPU()>:
c001425c:	83 ec 0c             	sub    esp,0xc
c001425f:	ba 60 b6 02 c0       	mov    edx,0xc002b660
c0014264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014268:	89 10                	mov    DWORD PTR [eax],edx
c001426a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001426e:	83 ec 0c             	sub    esp,0xc
c0014271:	50                   	push   eax
c0014272:	e8 59 f9 ff ff       	call   c0013bd0 <Device::~Device()>
c0014277:	83 c4 10             	add    esp,0x10
c001427a:	90                   	nop
c001427b:	83 c4 0c             	add    esp,0xc
c001427e:	c3                   	ret    
c001427f:	90                   	nop

c0014280 <FPU::~FPU()>:
c0014280:	83 ec 0c             	sub    esp,0xc
c0014283:	83 ec 0c             	sub    esp,0xc
c0014286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001428a:	e8 cd ff ff ff       	call   c001425c <FPU::~FPU()>
c001428f:	83 c4 10             	add    esp,0x10
c0014292:	83 ec 08             	sub    esp,0x8
c0014295:	68 58 01 00 00       	push   0x158
c001429a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001429e:	e8 46 e5 ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c00142a3:	83 c4 10             	add    esp,0x10
c00142a6:	83 c4 0c             	add    esp,0xc
c00142a9:	c3                   	ret    

c00142aa <setupFPU()>:
c00142aa:	53                   	push   ebx
c00142ab:	83 ec 08             	sub    esp,0x8
c00142ae:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c00142b4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00142bb:	74 19                	je     c00142d6 <setupFPU()+0x2c>
c00142bd:	83 ec 0c             	sub    esp,0xc
c00142c0:	68 58 01 00 00       	push   0x158
c00142c5:	e8 c2 b5 ff ff       	call   c000f88c <malloc>
c00142ca:	89 c3                	mov    ebx,eax
c00142cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00142cf:	e8 a2 1a 01 00       	call   c0025d76 <AVX::AVX()>
c00142d4:	eb 5b                	jmp    c0014331 <setupFPU()+0x87>
c00142d6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142dc:	84 c0                	test   al,al
c00142de:	79 19                	jns    c00142f9 <setupFPU()+0x4f>
c00142e0:	83 ec 0c             	sub    esp,0xc
c00142e3:	68 58 01 00 00       	push   0x158
c00142e8:	e8 9f b5 ff ff       	call   c000f88c <malloc>
c00142ed:	89 c3                	mov    ebx,eax
c00142ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00142f2:	e8 a5 1b 01 00       	call   c0025e9c <SSE::SSE()>
c00142f7:	eb 38                	jmp    c0014331 <setupFPU()+0x87>
c00142f9:	a8 20                	test   al,0x20
c00142fb:	74 19                	je     c0014316 <setupFPU()+0x6c>
c00142fd:	83 ec 0c             	sub    esp,0xc
c0014300:	68 58 01 00 00       	push   0x158
c0014305:	e8 82 b5 ff ff       	call   c000f88c <malloc>
c001430a:	89 c3                	mov    ebx,eax
c001430c:	89 04 24             	mov    DWORD PTR [esp],eax
c001430f:	e8 f2 1a 01 00       	call   c0025e06 <MMX::MMX()>
c0014314:	eb 1b                	jmp    c0014331 <setupFPU()+0x87>
c0014316:	a8 10                	test   al,0x10
c0014318:	74 1c                	je     c0014336 <setupFPU()+0x8c>
c001431a:	83 ec 0c             	sub    esp,0xc
c001431d:	68 58 01 00 00       	push   0x158
c0014322:	e8 65 b5 ff ff       	call   c000f88c <malloc>
c0014327:	89 c3                	mov    ebx,eax
c0014329:	89 04 24             	mov    DWORD PTR [esp],eax
c001432c:	e8 f9 1b 01 00       	call   c0025f2a <x87::x87()>
c0014331:	83 c4 10             	add    esp,0x10
c0014334:	eb 24                	jmp    c001435a <setupFPU()+0xb0>
c0014336:	83 e0 ef             	and    eax,0xffffffef
c0014339:	83 ec 0c             	sub    esp,0xc
c001433c:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014342:	68 4c b6 02 c0       	push   0xc002b64c
c0014347:	e8 7d e5 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001434c:	0f 20 c0             	mov    eax,cr0
c001434f:	83 c8 04             	or     eax,0x4
c0014352:	0f 22 c0             	mov    cr0,eax
c0014355:	31 db                	xor    ebx,ebx
c0014357:	83 c4 10             	add    esp,0x10
c001435a:	89 d8                	mov    eax,ebx
c001435c:	83 c4 08             	add    esp,0x8
c001435f:	5b                   	pop    ebx
c0014360:	c3                   	ret    
c0014361:	90                   	nop

c0014362 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014366:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001436a:	c1 e0 04             	shl    eax,0x4
c001436d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014371:	8d 50 10             	lea    edx,[eax+0x10]
c0014374:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001437a:	74 08                	je     c0014384 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001437c:	83 c0 04             	add    eax,0x4
c001437f:	39 d0                	cmp    eax,edx
c0014381:	75 f1                	jne    c0014374 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014383:	c3                   	ret    
c0014384:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001438e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014398:	eb e2                	jmp    c001437c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001439a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001439a:	57                   	push   edi
c001439b:	31 c0                	xor    eax,eax
c001439d:	56                   	push   esi
c001439e:	53                   	push   ebx
c001439f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00143a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143a7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00143ab:	89 da                	mov    edx,ebx
c00143ad:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00143b1:	c1 e2 04             	shl    edx,0x4
c00143b4:	01 ca                	add    edx,ecx
c00143b6:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00143be:	74 16                	je     c00143d6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00143c0:	40                   	inc    eax
c00143c1:	83 f8 04             	cmp    eax,0x4
c00143c4:	75 f0                	jne    c00143b6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00143c6:	c7 44 24 10 90 b6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b690
c00143ce:	5b                   	pop    ebx
c00143cf:	5e                   	pop    esi
c00143d0:	5f                   	pop    edi
c00143d1:	e9 29 5f 00 00       	jmp    c001a2ff <Krnl::panic(char const*)>
c00143d6:	8d 04 98             	lea    eax,[eax+ebx*4]
c00143d9:	8d 04 81             	lea    eax,[ecx+eax*4]
c00143dc:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00143e2:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00143e8:	5b                   	pop    ebx
c00143e9:	5e                   	pop    esi
c00143ea:	5f                   	pop    edi
c00143eb:	c3                   	ret    

c00143ec <doubleFault(regs*, void*)>:
c00143ec:	55                   	push   ebp
c00143ed:	89 e5                	mov    ebp,esp
c00143ef:	83 ec 08             	sub    esp,0x8
c00143f2:	83 ec 0c             	sub    esp,0xc
c00143f5:	68 cb b6 02 c0       	push   0xc002b6cb
c00143fa:	e8 00 5f 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c00143ff:	83 c4 10             	add    esp,0x10
c0014402:	90                   	nop
c0014403:	c9                   	leave  
c0014404:	c3                   	ret    
c0014405:	90                   	nop

c0014406 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014406:	56                   	push   esi
c0014407:	53                   	push   ebx
c0014408:	50                   	push   eax
c0014409:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001440d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014411:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014416:	75 35                	jne    c001444d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014418:	8d 43 20             	lea    eax,[ebx+0x20]
c001441b:	31 d2                	xor    edx,edx
c001441d:	89 c1                	mov    ecx,eax
c001441f:	c1 e1 04             	shl    ecx,0x4
c0014422:	01 f1                	add    ecx,esi
c0014424:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001442c:	74 3e                	je     c001446c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001442e:	42                   	inc    edx
c001442f:	83 fa 04             	cmp    edx,0x4
c0014432:	75 f0                	jne    c0014424 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014434:	83 ec 0c             	sub    esp,0xc
c0014437:	68 10 b7 02 c0       	push   0xc002b710
c001443c:	e8 be 5e 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0014441:	83 c4 10             	add    esp,0x10
c0014444:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014449:	5a                   	pop    edx
c001444a:	5b                   	pop    ebx
c001444b:	5e                   	pop    esi
c001444c:	c3                   	ret    
c001444d:	83 ec 0c             	sub    esp,0xc
c0014450:	56                   	push   esi
c0014451:	e8 ac fb ff ff       	call   c0014002 <Device::getName()>
c0014456:	83 c4 10             	add    esp,0x10
c0014459:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001445c:	75 ba                	jne    c0014418 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001445e:	83 fb 0f             	cmp    ebx,0xf
c0014461:	7f 29                	jg     c001448c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014463:	0f b6 9b 20 e5 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1ae0]
c001446a:	eb ac                	jmp    c0014418 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001446c:	8d 04 82             	lea    eax,[edx+eax*4]
c001446f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014473:	8d 04 86             	lea    eax,[esi+eax*4]
c0014476:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001447c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014480:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014486:	89 d8                	mov    eax,ebx
c0014488:	5a                   	pop    edx
c0014489:	5b                   	pop    ebx
c001448a:	5e                   	pop    esi
c001448b:	c3                   	ret    
c001448c:	83 ec 0c             	sub    esp,0xc
c001448f:	68 d8 b6 02 c0       	push   0xc002b6d8
c0014494:	e8 66 5e 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0014499:	83 c4 10             	add    esp,0x10
c001449c:	e9 77 ff ff ff       	jmp    c0014418 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00144a1:	90                   	nop

c00144a2 <InterruptController::clearAllHandlers(int, bool)>:
c00144a2:	56                   	push   esi
c00144a3:	53                   	push   ebx
c00144a4:	52                   	push   edx
c00144a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00144ad:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00144b2:	75 61                	jne    c0014515 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00144b4:	8d 46 20             	lea    eax,[esi+0x20]
c00144b7:	c1 e6 04             	shl    esi,0x4
c00144ba:	c1 e0 04             	shl    eax,0x4
c00144bd:	01 de                	add    esi,ebx
c00144bf:	01 d8                	add    eax,ebx
c00144c1:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00144cb:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00144d5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00144df:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00144e9:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00144f3:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00144fd:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014507:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014511:	58                   	pop    eax
c0014512:	5b                   	pop    ebx
c0014513:	5e                   	pop    esi
c0014514:	c3                   	ret    
c0014515:	83 ec 0c             	sub    esp,0xc
c0014518:	53                   	push   ebx
c0014519:	e8 e4 fa ff ff       	call   c0014002 <Device::getName()>
c001451e:	83 c4 10             	add    esp,0x10
c0014521:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014524:	75 8e                	jne    c00144b4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014526:	83 fe 0f             	cmp    esi,0xf
c0014529:	7f 09                	jg     c0014534 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001452b:	0f b6 b6 20 e5 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1ae0]
c0014532:	eb 80                	jmp    c00144b4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014534:	83 ec 0c             	sub    esp,0xc
c0014537:	68 4c b7 02 c0       	push   0xc002b74c
c001453c:	e8 be 5d 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0014541:	83 c4 10             	add    esp,0x10
c0014544:	e9 6b ff ff ff       	jmp    c00144b4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014549:	90                   	nop

c001454a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001454a:	56                   	push   esi
c001454b:	53                   	push   ebx
c001454c:	52                   	push   edx
c001454d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014551:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014555:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001455a:	75 3a                	jne    c0014596 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001455c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014560:	8d 50 20             	lea    edx,[eax+0x20]
c0014563:	c1 e2 04             	shl    edx,0x4
c0014566:	8d 04 16             	lea    eax,[esi+edx*1]
c0014569:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001456d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014573:	74 0b                	je     c0014580 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014575:	83 c0 04             	add    eax,0x4
c0014578:	39 d0                	cmp    eax,edx
c001457a:	75 f1                	jne    c001456d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001457c:	58                   	pop    eax
c001457d:	5b                   	pop    ebx
c001457e:	5e                   	pop    esi
c001457f:	c3                   	ret    
c0014580:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001458a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014594:	eb df                	jmp    c0014575 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014596:	83 ec 0c             	sub    esp,0xc
c0014599:	56                   	push   esi
c001459a:	e8 63 fa ff ff       	call   c0014002 <Device::getName()>
c001459f:	83 c4 10             	add    esp,0x10
c00145a2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00145a5:	75 b5                	jne    c001455c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145a7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00145ac:	7f 11                	jg     c00145bf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00145ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145b2:	0f b6 80 20 e5 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1ae0]
c00145b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145bd:	eb 9d                	jmp    c001455c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145bf:	83 ec 0c             	sub    esp,0xc
c00145c2:	68 4c b7 02 c0       	push   0xc002b74c
c00145c7:	e8 33 5d 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c00145cc:	83 c4 10             	add    esp,0x10
c00145cf:	eb 8b                	jmp    c001455c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00145d1 <nmiHandler(regs*, void*)>:
c00145d1:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00145d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145da:	e9 f7 a9 ff ff       	jmp    c000efd6 <Computer::handleNMI()>

c00145df <int_handler>:
c00145df:	55                   	push   ebp
c00145e0:	57                   	push   edi
c00145e1:	56                   	push   esi
c00145e2:	53                   	push   ebx
c00145e3:	83 ec 0c             	sub    esp,0xc
c00145e6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145ea:	80 3d 04 1e 03 c0 00 	cmp    BYTE PTR ds:0xc0031e04,0x0
c00145f1:	74 0b                	je     c00145fe <int_handler+0x1f>
c00145f3:	fa                   	cli    
c00145f4:	f4                   	hlt    
c00145f5:	80 3d 04 1e 03 c0 00 	cmp    BYTE PTR ds:0xc0031e04,0x0
c00145fc:	75 f5                	jne    c00145f3 <int_handler+0x14>
c00145fe:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0014603:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014606:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001460c:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014612:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014615:	83 f8 17             	cmp    eax,0x17
c0014618:	77 13                	ja     c001462d <int_handler+0x4e>
c001461a:	83 ec 08             	sub    esp,0x8
c001461d:	8b 17                	mov    edx,DWORD PTR [edi]
c001461f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014622:	0f b6 c0             	movzx  eax,al
c0014625:	50                   	push   eax
c0014626:	57                   	push   edi
c0014627:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001462a:	83 c4 10             	add    esp,0x10
c001462d:	83 c3 15             	add    ebx,0x15
c0014630:	c1 e3 04             	shl    ebx,0x4
c0014633:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014637:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001463e:	31 db                	xor    ebx,ebx
c0014640:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014644:	85 c0                	test   eax,eax
c0014646:	74 13                	je     c001465b <int_handler+0x7c>
c0014648:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001464b:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001464f:	74 1c                	je     c001466d <int_handler+0x8e>
c0014651:	83 ec 08             	sub    esp,0x8
c0014654:	52                   	push   edx
c0014655:	56                   	push   esi
c0014656:	ff d0                	call   eax
c0014658:	83 c4 10             	add    esp,0x10
c001465b:	43                   	inc    ebx
c001465c:	83 fb 04             	cmp    ebx,0x4
c001465f:	75 df                	jne    c0014640 <int_handler+0x61>
c0014661:	83 c4 0c             	add    esp,0xc
c0014664:	31 c0                	xor    eax,eax
c0014666:	5b                   	pop    ebx
c0014667:	31 d2                	xor    edx,edx
c0014669:	5e                   	pop    esi
c001466a:	5f                   	pop    edi
c001466b:	5d                   	pop    ebp
c001466c:	c3                   	ret    
c001466d:	83 ec 08             	sub    esp,0x8
c0014670:	52                   	push   edx
c0014671:	56                   	push   esi
c0014672:	ff d0                	call   eax
c0014674:	83 c4 10             	add    esp,0x10
c0014677:	83 c4 0c             	add    esp,0xc
c001467a:	5b                   	pop    ebx
c001467b:	5e                   	pop    esi
c001467c:	5f                   	pop    edi
c001467d:	5d                   	pop    ebp
c001467e:	c3                   	ret    
c001467f:	90                   	nop

c0014680 <InterruptController::InterruptController(char const*)>:
c0014680:	83 ec 1c             	sub    esp,0x1c
c0014683:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014687:	83 ec 08             	sub    esp,0x8
c001468a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001468e:	50                   	push   eax
c001468f:	e8 72 f8 ff ff       	call   c0013f06 <Device::Device(char const*)>
c0014694:	83 c4 10             	add    esp,0x10
c0014697:	ba 0c ba 02 c0       	mov    edx,0xc002ba0c
c001469c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146a0:	89 10                	mov    DWORD PTR [eax],edx
c00146a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146a6:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00146b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146b8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00146c0:	7f 5e                	jg     c0014720 <InterruptController::InterruptController(char const*)+0xa0>
c00146c2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146ca:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00146cf:	7f 49                	jg     c001471a <InterruptController::InterruptController(char const*)+0x9a>
c00146d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146d9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146e4:	01 ca                	add    edx,ecx
c00146e6:	83 c2 54             	add    edx,0x54
c00146e9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146f9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014700:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014704:	01 ca                	add    edx,ecx
c0014706:	81 c2 54 04 00 00    	add    edx,0x454
c001470c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014714:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014718:	eb b0                	jmp    c00146ca <InterruptController::InterruptController(char const*)+0x4a>
c001471a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001471e:	eb 98                	jmp    c00146b8 <InterruptController::InterruptController(char const*)+0x38>
c0014720:	90                   	nop
c0014721:	83 c4 1c             	add    esp,0x1c
c0014724:	c3                   	ret    
c0014725:	90                   	nop

c0014726 <InterruptController::~InterruptController()>:
c0014726:	83 ec 0c             	sub    esp,0xc
c0014729:	ba 0c ba 02 c0       	mov    edx,0xc002ba0c
c001472e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014732:	89 10                	mov    DWORD PTR [eax],edx
c0014734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014738:	83 ec 0c             	sub    esp,0xc
c001473b:	50                   	push   eax
c001473c:	e8 8f f4 ff ff       	call   c0013bd0 <Device::~Device()>
c0014741:	83 c4 10             	add    esp,0x10
c0014744:	90                   	nop
c0014745:	83 c4 0c             	add    esp,0xc
c0014748:	c3                   	ret    
c0014749:	90                   	nop

c001474a <InterruptController::~InterruptController()>:
c001474a:	83 ec 0c             	sub    esp,0xc
c001474d:	83 ec 0c             	sub    esp,0xc
c0014750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014754:	e8 cd ff ff ff       	call   c0014726 <InterruptController::~InterruptController()>
c0014759:	83 c4 10             	add    esp,0x10
c001475c:	83 ec 08             	sub    esp,0x8
c001475f:	68 58 21 00 00       	push   0x2158
c0014764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014768:	e8 7c e0 ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c001476d:	83 c4 10             	add    esp,0x10
c0014770:	83 c4 0c             	add    esp,0xc
c0014773:	c3                   	ret    

c0014774 <displayDebugInfo(regs*)>:
c0014774:	55                   	push   ebp
c0014775:	57                   	push   edi
c0014776:	56                   	push   esi
c0014777:	53                   	push   ebx
c0014778:	83 ec 24             	sub    esp,0x24
c001477b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001477f:	0f 20 c2             	mov    edx,cr0
c0014782:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014786:	0f 20 d7             	mov    edi,cr2
c0014789:	0f 20 de             	mov    esi,cr3
c001478c:	0f 20 e5             	mov    ebp,cr4
c001478f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014792:	68 86 b7 02 c0       	push   0xc002b786
c0014797:	e8 2d e1 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001479c:	59                   	pop    ecx
c001479d:	58                   	pop    eax
c001479e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00147a1:	68 91 b7 02 c0       	push   0xc002b791
c00147a6:	e8 1e e1 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00147ab:	58                   	pop    eax
c00147ac:	5a                   	pop    edx
c00147ad:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00147b0:	68 9c b7 02 c0       	push   0xc002b79c
c00147b5:	e8 0f e1 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00147ba:	59                   	pop    ecx
c00147bb:	58                   	pop    eax
c00147bc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00147bf:	68 a7 b7 02 c0       	push   0xc002b7a7
c00147c4:	e8 00 e1 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00147c9:	58                   	pop    eax
c00147ca:	5a                   	pop    edx
c00147cb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00147ce:	68 b2 b7 02 c0       	push   0xc002b7b2
c00147d3:	e8 f1 e0 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00147d8:	59                   	pop    ecx
c00147d9:	58                   	pop    eax
c00147da:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00147dd:	68 bd b7 02 c0       	push   0xc002b7bd
c00147e2:	e8 e2 e0 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00147e7:	58                   	pop    eax
c00147e8:	5a                   	pop    edx
c00147e9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147ec:	68 c8 b7 02 c0       	push   0xc002b7c8
c00147f1:	e8 d3 e0 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00147f6:	59                   	pop    ecx
c00147f7:	58                   	pop    eax
c00147f8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00147fb:	68 d3 b7 02 c0       	push   0xc002b7d3
c0014800:	e8 c4 e0 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0014805:	58                   	pop    eax
c0014806:	5a                   	pop    edx
c0014807:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001480a:	68 de b7 02 c0       	push   0xc002b7de
c001480f:	e8 b5 e0 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0014814:	59                   	pop    ecx
c0014815:	58                   	pop    eax
c0014816:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014819:	68 ed b7 02 c0       	push   0xc002b7ed
c001481e:	e8 a6 e0 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0014823:	58                   	pop    eax
c0014824:	5a                   	pop    edx
c0014825:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014828:	68 f8 b7 02 c0       	push   0xc002b7f8
c001482d:	e8 97 e0 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0014832:	59                   	pop    ecx
c0014833:	58                   	pop    eax
c0014834:	57                   	push   edi
c0014835:	68 03 b8 02 c0       	push   0xc002b803
c001483a:	e8 8a e0 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001483f:	58                   	pop    eax
c0014840:	5a                   	pop    edx
c0014841:	56                   	push   esi
c0014842:	68 0e b8 02 c0       	push   0xc002b80e
c0014847:	e8 7d e0 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001484c:	59                   	pop    ecx
c001484d:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014852:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014858:	e8 8f be ff ff       	call   c00106ec <setActiveTerminal(VgaText*)>
c001485d:	58                   	pop    eax
c001485e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014861:	5a                   	pop    edx
c0014862:	c1 e0 05             	shl    eax,0x5
c0014865:	05 80 e2 02 c0       	add    eax,0xc002e280
c001486a:	50                   	push   eax
c001486b:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014870:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014876:	e8 43 c2 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001487b:	59                   	pop    ecx
c001487c:	58                   	pop    eax
c001487d:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014882:	68 19 b8 02 c0       	push   0xc002b819
c0014887:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001488d:	e8 2c c2 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c0014892:	58                   	pop    eax
c0014893:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014898:	5a                   	pop    edx
c0014899:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001489c:	83 c0 0c             	add    eax,0xc
c001489f:	50                   	push   eax
c00148a0:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c00148a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ab:	e8 0e c2 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c00148b0:	59                   	pop    ecx
c00148b1:	58                   	pop    eax
c00148b2:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c00148b7:	68 22 b8 02 c0       	push   0xc002b822
c00148bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c2:	e8 f7 c1 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c00148c7:	58                   	pop    eax
c00148c8:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c00148cd:	5a                   	pop    edx
c00148ce:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d7:	e8 9c c1 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c00148dc:	59                   	pop    ecx
c00148dd:	58                   	pop    eax
c00148de:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c00148e3:	68 2a b8 02 c0       	push   0xc002b82a
c00148e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ee:	e8 cb c1 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c00148f3:	58                   	pop    eax
c00148f4:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c00148f9:	5a                   	pop    edx
c00148fa:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00148fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014903:	e8 70 c1 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c0014908:	59                   	pop    ecx
c0014909:	58                   	pop    eax
c001490a:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001490f:	68 32 b8 02 c0       	push   0xc002b832
c0014914:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491a:	e8 9f c1 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001491f:	58                   	pop    eax
c0014920:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014925:	5a                   	pop    edx
c0014926:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014929:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001492f:	e8 44 c1 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c0014934:	59                   	pop    ecx
c0014935:	58                   	pop    eax
c0014936:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001493b:	68 3a b8 02 c0       	push   0xc002b83a
c0014940:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014946:	e8 73 c1 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001494b:	58                   	pop    eax
c001494c:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014951:	5a                   	pop    edx
c0014952:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014955:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495b:	e8 18 c1 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c0014960:	59                   	pop    ecx
c0014961:	58                   	pop    eax
c0014962:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014967:	68 42 b8 02 c0       	push   0xc002b842
c001496c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014972:	e8 47 c1 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c0014977:	58                   	pop    eax
c0014978:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001497d:	5a                   	pop    edx
c001497e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014981:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014987:	e8 ec c0 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c001498c:	59                   	pop    ecx
c001498d:	58                   	pop    eax
c001498e:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014993:	68 4a b8 02 c0       	push   0xc002b84a
c0014998:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001499e:	e8 1b c1 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c00149a3:	58                   	pop    eax
c00149a4:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c00149a9:	5a                   	pop    edx
c00149aa:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00149ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b3:	e8 c0 c0 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c00149b8:	59                   	pop    ecx
c00149b9:	58                   	pop    eax
c00149ba:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c00149bf:	68 52 b8 02 c0       	push   0xc002b852
c00149c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ca:	e8 ef c0 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c00149cf:	58                   	pop    eax
c00149d0:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c00149d5:	5a                   	pop    edx
c00149d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149da:	52                   	push   edx
c00149db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e1:	e8 92 c0 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c00149e6:	59                   	pop    ecx
c00149e7:	58                   	pop    eax
c00149e8:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c00149ed:	68 5b b8 02 c0       	push   0xc002b85b
c00149f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f8:	e8 c1 c0 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c00149fd:	58                   	pop    eax
c00149fe:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014a03:	5a                   	pop    edx
c0014a04:	57                   	push   edi
c0014a05:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a0b:	e8 68 c0 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c0014a10:	59                   	pop    ecx
c0014a11:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014a16:	5f                   	pop    edi
c0014a17:	68 63 b8 02 c0       	push   0xc002b863
c0014a1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a22:	e8 97 c0 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c0014a27:	58                   	pop    eax
c0014a28:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014a2d:	5a                   	pop    edx
c0014a2e:	56                   	push   esi
c0014a2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a35:	e8 3e c0 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c0014a3a:	59                   	pop    ecx
c0014a3b:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014a40:	5e                   	pop    esi
c0014a41:	68 6b b8 02 c0       	push   0xc002b86b
c0014a46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a4c:	e8 6d c0 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c0014a51:	5f                   	pop    edi
c0014a52:	58                   	pop    eax
c0014a53:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014a58:	55                   	push   ebp
c0014a59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a5f:	e8 14 c0 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c0014a64:	58                   	pop    eax
c0014a65:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014a6a:	5a                   	pop    edx
c0014a6b:	68 73 b8 02 c0       	push   0xc002b873
c0014a70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a76:	e8 43 c0 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c0014a7b:	0f 21 c0             	mov    eax,db0
c0014a7e:	59                   	pop    ecx
c0014a7f:	5e                   	pop    esi
c0014a80:	50                   	push   eax
c0014a81:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014a86:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a8c:	e8 e7 bf ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c0014a91:	5f                   	pop    edi
c0014a92:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014a97:	5d                   	pop    ebp
c0014a98:	68 7c b8 02 c0       	push   0xc002b87c
c0014a9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa3:	e8 16 c0 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c0014aa8:	0f 21 c8             	mov    eax,db1
c0014aab:	5a                   	pop    edx
c0014aac:	59                   	pop    ecx
c0014aad:	50                   	push   eax
c0014aae:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014ab3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ab9:	e8 ba bf ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c0014abe:	5e                   	pop    esi
c0014abf:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014ac4:	5f                   	pop    edi
c0014ac5:	68 84 b8 02 c0       	push   0xc002b884
c0014aca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad0:	e8 e9 bf ff ff       	call   c0010abe <VgaText::puts(char const*)>
c0014ad5:	0f 21 d0             	mov    eax,db2
c0014ad8:	5d                   	pop    ebp
c0014ad9:	5a                   	pop    edx
c0014ada:	50                   	push   eax
c0014adb:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014ae0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ae6:	e8 8d bf ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c0014aeb:	59                   	pop    ecx
c0014aec:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014af1:	5e                   	pop    esi
c0014af2:	68 8c b8 02 c0       	push   0xc002b88c
c0014af7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014afd:	e8 bc bf ff ff       	call   c0010abe <VgaText::puts(char const*)>
c0014b02:	0f 21 d8             	mov    eax,db3
c0014b05:	5f                   	pop    edi
c0014b06:	5d                   	pop    ebp
c0014b07:	50                   	push   eax
c0014b08:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014b0d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b13:	e8 60 bf ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c0014b18:	58                   	pop    eax
c0014b19:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014b1e:	5a                   	pop    edx
c0014b1f:	68 94 b8 02 c0       	push   0xc002b894
c0014b24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2a:	e8 8f bf ff ff       	call   c0010abe <VgaText::puts(char const*)>
c0014b2f:	0f 21 f0             	mov    eax,db6
c0014b32:	59                   	pop    ecx
c0014b33:	5e                   	pop    esi
c0014b34:	50                   	push   eax
c0014b35:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014b3a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b40:	e8 33 bf ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c0014b45:	5f                   	pop    edi
c0014b46:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014b4b:	5d                   	pop    ebp
c0014b4c:	68 9c b8 02 c0       	push   0xc002b89c
c0014b51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b57:	e8 62 bf ff ff       	call   c0010abe <VgaText::puts(char const*)>
c0014b5c:	0f 21 f8             	mov    eax,db7
c0014b5f:	5a                   	pop    edx
c0014b60:	59                   	pop    ecx
c0014b61:	50                   	push   eax
c0014b62:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014b67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b6d:	e8 06 bf ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c0014b72:	5e                   	pop    esi
c0014b73:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b76:	e8 07 8b 00 00       	call   c001d682 <Thr::getDriverNameFromAddress(unsigned long)>
c0014b7b:	83 c4 10             	add    esp,0x10
c0014b7e:	85 c0                	test   eax,eax
c0014b80:	74 7d                	je     c0014bff <displayDebugInfo(regs*)+0x48b>
c0014b82:	89 c6                	mov    esi,eax
c0014b84:	50                   	push   eax
c0014b85:	50                   	push   eax
c0014b86:	56                   	push   esi
c0014b87:	68 a4 b8 02 c0       	push   0xc002b8a4
c0014b8c:	e8 38 dd ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0014b91:	5a                   	pop    edx
c0014b92:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014b97:	59                   	pop    ecx
c0014b98:	68 b2 b8 02 c0       	push   0xc002b8b2
c0014b9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ba3:	e8 16 bf ff ff       	call   c0010abe <VgaText::puts(char const*)>
c0014ba8:	5f                   	pop    edi
c0014ba9:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014bae:	5d                   	pop    ebp
c0014baf:	56                   	push   esi
c0014bb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bb6:	e8 03 bf ff ff       	call   c0010abe <VgaText::puts(char const*)>
c0014bbb:	58                   	pop    eax
c0014bbc:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014bc1:	5a                   	pop    edx
c0014bc2:	68 be b8 02 c0       	push   0xc002b8be
c0014bc7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bcd:	e8 ec be ff ff       	call   c0010abe <VgaText::puts(char const*)>
c0014bd2:	59                   	pop    ecx
c0014bd3:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0014bd8:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014bde:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014be1:	e8 d3 8a 00 00       	call   c001d6b9 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014be6:	5b                   	pop    ebx
c0014be7:	5d                   	pop    ebp
c0014be8:	50                   	push   eax
c0014be9:	57                   	push   edi
c0014bea:	e8 89 be ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c0014bef:	58                   	pop    eax
c0014bf0:	5a                   	pop    edx
c0014bf1:	56                   	push   esi
c0014bf2:	68 ca b8 02 c0       	push   0xc002b8ca
c0014bf7:	e8 cd dc ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0014bfc:	83 c4 10             	add    esp,0x10
c0014bff:	fa                   	cli    
c0014c00:	f4                   	hlt    
c0014c01:	eb fe                	jmp    c0014c01 <displayDebugInfo(regs*)+0x48d>

c0014c03 <x87EmulHandler(regs*, void*)>:
c0014c03:	83 ec 0c             	sub    esp,0xc
c0014c06:	0f 20 c2             	mov    edx,cr0
c0014c09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c0e:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014c12:	75 4b                	jne    c0014c5f <x87EmulHandler(regs*, void*)+0x5c>
c0014c14:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0014c19:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014c1f:	85 c0                	test   eax,eax
c0014c21:	74 05                	je     c0014c28 <x87EmulHandler(regs*, void*)+0x25>
c0014c23:	83 e2 08             	and    edx,0x8
c0014c26:	75 17                	jne    c0014c3f <x87EmulHandler(regs*, void*)+0x3c>
c0014c28:	83 ec 0c             	sub    esp,0xc
c0014c2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c2f:	e8 45 af 00 00       	call   c001fb79 <Vm::x87Handler(regs*)>
c0014c34:	83 c4 10             	add    esp,0x10
c0014c37:	84 c0                	test   al,al
c0014c39:	74 24                	je     c0014c5f <x87EmulHandler(regs*, void*)+0x5c>
c0014c3b:	83 c4 0c             	add    esp,0xc
c0014c3e:	c3                   	ret    
c0014c3f:	83 ec 0c             	sub    esp,0xc
c0014c42:	68 f0 b8 02 c0       	push   0xc002b8f0
c0014c47:	e8 7d dc ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0014c4c:	0f 06                	clts   
c0014c4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c53:	83 c4 10             	add    esp,0x10
c0014c56:	a3 48 f4 02 c0       	mov    ds:0xc002f448,eax
c0014c5b:	83 c4 0c             	add    esp,0xc
c0014c5e:	c3                   	ret    
c0014c5f:	83 ec 0c             	sub    esp,0xc
c0014c62:	68 da b8 02 c0       	push   0xc002b8da
c0014c67:	e8 5d dc ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0014c6c:	5a                   	pop    edx
c0014c6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c71:	e8 fe fa ff ff       	call   c0014774 <displayDebugInfo(regs*)>

c0014c76 <gpFault(regs*, void*)>:
c0014c76:	53                   	push   ebx
c0014c77:	83 ec 14             	sub    esp,0x14
c0014c7a:	c7 05 44 f4 02 c0 52 f0 01 c0 	mov    DWORD PTR ds:0xc002f444,0xc001f052
c0014c84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014c88:	53                   	push   ebx
c0014c89:	e8 c4 a3 00 00       	call   c001f052 <Vm::faultHandler(regs*)>
c0014c8e:	83 c4 10             	add    esp,0x10
c0014c91:	84 c0                	test   al,al
c0014c93:	74 05                	je     c0014c9a <gpFault(regs*, void*)+0x24>
c0014c95:	83 c4 08             	add    esp,0x8
c0014c98:	5b                   	pop    ebx
c0014c99:	c3                   	ret    
c0014c9a:	83 ec 0c             	sub    esp,0xc
c0014c9d:	68 fd b8 02 c0       	push   0xc002b8fd
c0014ca2:	e8 22 dc ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0014ca7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014caa:	e8 c5 fa ff ff       	call   c0014774 <displayDebugInfo(regs*)>

c0014caf <pgFault(regs*, void*)>:
c0014caf:	83 ec 18             	sub    esp,0x18
c0014cb2:	68 18 b9 02 c0       	push   0xc002b918
c0014cb7:	e8 0d dc ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0014cbc:	58                   	pop    eax
c0014cbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cc1:	e8 ae fa ff ff       	call   c0014774 <displayDebugInfo(regs*)>

c0014cc6 <otherISRHandler(regs*, void*)>:
c0014cc6:	53                   	push   ebx
c0014cc7:	83 ec 0c             	sub    esp,0xc
c0014cca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014cce:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014cd1:	50                   	push   eax
c0014cd2:	50                   	push   eax
c0014cd3:	68 25 b9 02 c0       	push   0xc002b925
c0014cd8:	e8 ec db ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0014cdd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ce0:	e8 8f fa ff ff       	call   c0014774 <displayDebugInfo(regs*)>

c0014ce5 <opcodeFault(regs*, void*)>:
c0014ce5:	55                   	push   ebp
c0014ce6:	89 e5                	mov    ebp,esp
c0014ce8:	56                   	push   esi
c0014ce9:	53                   	push   ebx
c0014cea:	83 ec 40             	sub    esp,0x40
c0014ced:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0014cf2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014cf8:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014cfe:	84 c0                	test   al,al
c0014d00:	74 24                	je     c0014d26 <opcodeFault(regs*, void*)+0x41>
c0014d02:	83 ec 0c             	sub    esp,0xc
c0014d05:	68 44 b9 02 c0       	push   0xc002b944
c0014d0a:	e8 ba db ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0014d0f:	83 c4 10             	add    esp,0x10
c0014d12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d15:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d18:	8d 50 19             	lea    edx,[eax+0x19]
c0014d1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d21:	e9 d5 05 00 00       	jmp    c00152fb <opcodeFault(regs*, void*)+0x616>
c0014d26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d29:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d2c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014d2f:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014d33:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014d37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d3a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d3d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014d40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d43:	8a 00                	mov    al,BYTE PTR [eax]
c0014d45:	3c f0                	cmp    al,0xf0
c0014d47:	75 17                	jne    c0014d60 <opcodeFault(regs*, void*)+0x7b>
c0014d49:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d52:	8d 50 01             	lea    edx,[eax+0x1]
c0014d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d58:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d5b:	e9 da 00 00 00       	jmp    c0014e3a <opcodeFault(regs*, void*)+0x155>
c0014d60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d63:	8a 00                	mov    al,BYTE PTR [eax]
c0014d65:	3c f2                	cmp    al,0xf2
c0014d67:	74 09                	je     c0014d72 <opcodeFault(regs*, void*)+0x8d>
c0014d69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d6c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d6e:	3c f3                	cmp    al,0xf3
c0014d70:	75 1b                	jne    c0014d8d <opcodeFault(regs*, void*)+0xa8>
c0014d72:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d76:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d7f:	8d 50 01             	lea    edx,[eax+0x1]
c0014d82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d85:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d88:	e9 ad 00 00 00       	jmp    c0014e3a <opcodeFault(regs*, void*)+0x155>
c0014d8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d90:	8a 00                	mov    al,BYTE PTR [eax]
c0014d92:	3c 66                	cmp    al,0x66
c0014d94:	75 1f                	jne    c0014db5 <opcodeFault(regs*, void*)+0xd0>
c0014d96:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d9a:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014d9e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014da1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014da7:	8d 50 01             	lea    edx,[eax+0x1]
c0014daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014db0:	e9 85 00 00 00       	jmp    c0014e3a <opcodeFault(regs*, void*)+0x155>
c0014db5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db8:	8a 00                	mov    al,BYTE PTR [eax]
c0014dba:	3c 67                	cmp    al,0x67
c0014dbc:	75 18                	jne    c0014dd6 <opcodeFault(regs*, void*)+0xf1>
c0014dbe:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dc2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dcb:	8d 50 01             	lea    edx,[eax+0x1]
c0014dce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dd4:	eb 64                	jmp    c0014e3a <opcodeFault(regs*, void*)+0x155>
c0014dd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dd9:	8a 00                	mov    al,BYTE PTR [eax]
c0014ddb:	3c 2e                	cmp    al,0x2e
c0014ddd:	74 09                	je     c0014de8 <opcodeFault(regs*, void*)+0x103>
c0014ddf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de2:	8a 00                	mov    al,BYTE PTR [eax]
c0014de4:	3c 3e                	cmp    al,0x3e
c0014de6:	75 18                	jne    c0014e00 <opcodeFault(regs*, void*)+0x11b>
c0014de8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dec:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014def:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014df5:	8d 50 01             	lea    edx,[eax+0x1]
c0014df8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dfb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dfe:	eb 3a                	jmp    c0014e3a <opcodeFault(regs*, void*)+0x155>
c0014e00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e03:	8a 00                	mov    al,BYTE PTR [eax]
c0014e05:	3c 36                	cmp    al,0x36
c0014e07:	74 1b                	je     c0014e24 <opcodeFault(regs*, void*)+0x13f>
c0014e09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e0c:	8a 00                	mov    al,BYTE PTR [eax]
c0014e0e:	3c 26                	cmp    al,0x26
c0014e10:	74 12                	je     c0014e24 <opcodeFault(regs*, void*)+0x13f>
c0014e12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e15:	8a 00                	mov    al,BYTE PTR [eax]
c0014e17:	3c 64                	cmp    al,0x64
c0014e19:	74 09                	je     c0014e24 <opcodeFault(regs*, void*)+0x13f>
c0014e1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e1e:	8a 00                	mov    al,BYTE PTR [eax]
c0014e20:	3c 65                	cmp    al,0x65
c0014e22:	75 16                	jne    c0014e3a <opcodeFault(regs*, void*)+0x155>
c0014e24:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e28:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e31:	8d 50 01             	lea    edx,[eax+0x1]
c0014e34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e37:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e3d:	8a 00                	mov    al,BYTE PTR [eax]
c0014e3f:	3c 0f                	cmp    al,0xf
c0014e41:	0f 85 ad 00 00 00    	jne    c0014ef4 <opcodeFault(regs*, void*)+0x20f>
c0014e47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e4a:	40                   	inc    eax
c0014e4b:	8a 00                	mov    al,BYTE PTR [eax]
c0014e4d:	3c c2                	cmp    al,0xc2
c0014e4f:	74 0e                	je     c0014e5f <opcodeFault(regs*, void*)+0x17a>
c0014e51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e54:	40                   	inc    eax
c0014e55:	8a 00                	mov    al,BYTE PTR [eax]
c0014e57:	3c c3                	cmp    al,0xc3
c0014e59:	0f 85 95 00 00 00    	jne    c0014ef4 <opcodeFault(regs*, void*)+0x20f>
c0014e5f:	83 ec 0c             	sub    esp,0xc
c0014e62:	68 67 b9 02 c0       	push   0xc002b967
c0014e67:	e8 5d da ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0014e6c:	83 c4 10             	add    esp,0x10
c0014e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e72:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e75:	8d 50 01             	lea    edx,[eax+0x1]
c0014e78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e7e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e84:	8a 00                	mov    al,BYTE PTR [eax]
c0014e86:	8d 50 fe             	lea    edx,[eax-0x2]
c0014e89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e8c:	88 10                	mov    BYTE PTR [eax],dl
c0014e8e:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014e91:	50                   	push   eax
c0014e92:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014e95:	50                   	push   eax
c0014e96:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014e99:	50                   	push   eax
c0014e9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e9d:	e8 2a 4b 00 00       	call   c00199cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ea2:	83 c4 10             	add    esp,0x10
c0014ea5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eab:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014eae:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014eb1:	01 d0                	add    eax,edx
c0014eb3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ebc:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ebf:	48                   	dec    eax
c0014ec0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014ec3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014ec9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ecc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ecf:	83 ec 04             	sub    esp,0x4
c0014ed2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014ed5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014ed8:	50                   	push   eax
c0014ed9:	e8 d6 b2 fe ff       	call   c00001b4 <voodooXADD>
c0014ede:	83 c4 10             	add    esp,0x10
c0014ee1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014ee4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014ee7:	01 c2                	add    edx,eax
c0014ee9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014eef:	e9 07 04 00 00       	jmp    c00152fb <opcodeFault(regs*, void*)+0x616>
c0014ef4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ef7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ef9:	3c 0f                	cmp    al,0xf
c0014efb:	0f 85 8b 01 00 00    	jne    c001508c <opcodeFault(regs*, void*)+0x3a7>
c0014f01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f04:	40                   	inc    eax
c0014f05:	8a 00                	mov    al,BYTE PTR [eax]
c0014f07:	3c c7                	cmp    al,0xc7
c0014f09:	0f 86 7d 01 00 00    	jbe    c001508c <opcodeFault(regs*, void*)+0x3a7>
c0014f0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f12:	40                   	inc    eax
c0014f13:	8a 00                	mov    al,BYTE PTR [eax]
c0014f15:	3c cf                	cmp    al,0xcf
c0014f17:	0f 87 6f 01 00 00    	ja     c001508c <opcodeFault(regs*, void*)+0x3a7>
c0014f1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f20:	40                   	inc    eax
c0014f21:	8a 00                	mov    al,BYTE PTR [eax]
c0014f23:	83 c0 38             	add    eax,0x38
c0014f26:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014f29:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014f2d:	75 0b                	jne    c0014f3a <opcodeFault(regs*, void*)+0x255>
c0014f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f32:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f35:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f38:	eb 75                	jmp    c0014faf <opcodeFault(regs*, void*)+0x2ca>
c0014f3a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f3e:	75 0b                	jne    c0014f4b <opcodeFault(regs*, void*)+0x266>
c0014f40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f43:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f46:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f49:	eb 64                	jmp    c0014faf <opcodeFault(regs*, void*)+0x2ca>
c0014f4b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f4f:	75 0b                	jne    c0014f5c <opcodeFault(regs*, void*)+0x277>
c0014f51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f54:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f57:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f5a:	eb 53                	jmp    c0014faf <opcodeFault(regs*, void*)+0x2ca>
c0014f5c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f60:	75 0b                	jne    c0014f6d <opcodeFault(regs*, void*)+0x288>
c0014f62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f65:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f68:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f6b:	eb 42                	jmp    c0014faf <opcodeFault(regs*, void*)+0x2ca>
c0014f6d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f71:	75 0b                	jne    c0014f7e <opcodeFault(regs*, void*)+0x299>
c0014f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f76:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f79:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f7c:	eb 31                	jmp    c0014faf <opcodeFault(regs*, void*)+0x2ca>
c0014f7e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f82:	75 0b                	jne    c0014f8f <opcodeFault(regs*, void*)+0x2aa>
c0014f84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f87:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f8a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f8d:	eb 20                	jmp    c0014faf <opcodeFault(regs*, void*)+0x2ca>
c0014f8f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f93:	75 0b                	jne    c0014fa0 <opcodeFault(regs*, void*)+0x2bb>
c0014f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f98:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014f9b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f9e:	eb 0f                	jmp    c0014faf <opcodeFault(regs*, void*)+0x2ca>
c0014fa0:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014fa4:	75 09                	jne    c0014faf <opcodeFault(regs*, void*)+0x2ca>
c0014fa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fac:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014faf:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014fb3:	74 10                	je     c0014fc5 <opcodeFault(regs*, void*)+0x2e0>
c0014fb5:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014fbc:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014fc3:	eb 2d                	jmp    c0014ff2 <opcodeFault(regs*, void*)+0x30d>
c0014fc5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fc8:	c1 e0 18             	shl    eax,0x18
c0014fcb:	89 c2                	mov    edx,eax
c0014fcd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fd0:	c1 e0 08             	shl    eax,0x8
c0014fd3:	25 00 00 ff 00       	and    eax,0xff0000
c0014fd8:	09 c2                	or     edx,eax
c0014fda:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fdd:	c1 e8 08             	shr    eax,0x8
c0014fe0:	25 00 ff 00 00       	and    eax,0xff00
c0014fe5:	09 c2                	or     edx,eax
c0014fe7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fea:	c1 e8 18             	shr    eax,0x18
c0014fed:	09 d0                	or     eax,edx
c0014fef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ff2:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014ff6:	75 0b                	jne    c0015003 <opcodeFault(regs*, void*)+0x31e>
c0014ff8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ffb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ffe:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015001:	eb 75                	jmp    c0015078 <opcodeFault(regs*, void*)+0x393>
c0015003:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015007:	75 0b                	jne    c0015014 <opcodeFault(regs*, void*)+0x32f>
c0015009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001500f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015012:	eb 64                	jmp    c0015078 <opcodeFault(regs*, void*)+0x393>
c0015014:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015018:	75 0b                	jne    c0015025 <opcodeFault(regs*, void*)+0x340>
c001501a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001501d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015020:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015023:	eb 53                	jmp    c0015078 <opcodeFault(regs*, void*)+0x393>
c0015025:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015029:	75 0b                	jne    c0015036 <opcodeFault(regs*, void*)+0x351>
c001502b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015031:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015034:	eb 42                	jmp    c0015078 <opcodeFault(regs*, void*)+0x393>
c0015036:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001503a:	75 0b                	jne    c0015047 <opcodeFault(regs*, void*)+0x362>
c001503c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015042:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015045:	eb 31                	jmp    c0015078 <opcodeFault(regs*, void*)+0x393>
c0015047:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001504b:	75 0b                	jne    c0015058 <opcodeFault(regs*, void*)+0x373>
c001504d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015050:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015053:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015056:	eb 20                	jmp    c0015078 <opcodeFault(regs*, void*)+0x393>
c0015058:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001505c:	75 0b                	jne    c0015069 <opcodeFault(regs*, void*)+0x384>
c001505e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015061:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015064:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015067:	eb 0f                	jmp    c0015078 <opcodeFault(regs*, void*)+0x393>
c0015069:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001506d:	75 09                	jne    c0015078 <opcodeFault(regs*, void*)+0x393>
c001506f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015072:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015075:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001507e:	8d 50 02             	lea    edx,[eax+0x2]
c0015081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015084:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015087:	e9 6f 02 00 00       	jmp    c00152fb <opcodeFault(regs*, void*)+0x616>
c001508c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001508f:	8a 00                	mov    al,BYTE PTR [eax]
c0015091:	3c 0f                	cmp    al,0xf
c0015093:	0f 85 8d 01 00 00    	jne    c0015226 <opcodeFault(regs*, void*)+0x541>
c0015099:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001509c:	40                   	inc    eax
c001509d:	8a 00                	mov    al,BYTE PTR [eax]
c001509f:	3c c7                	cmp    al,0xc7
c00150a1:	0f 85 7f 01 00 00    	jne    c0015226 <opcodeFault(regs*, void*)+0x541>
c00150a7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00150aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150b0:	8d 50 01             	lea    edx,[eax+0x1]
c00150b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150b9:	8d 45 ba             	lea    eax,[ebp-0x46]
c00150bc:	50                   	push   eax
c00150bd:	8d 45 bb             	lea    eax,[ebp-0x45]
c00150c0:	50                   	push   eax
c00150c1:	8d 45 bc             	lea    eax,[ebp-0x44]
c00150c4:	50                   	push   eax
c00150c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00150c8:	e8 ff 48 00 00       	call   c00199cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00150cd:	83 c4 10             	add    esp,0x10
c00150d0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00150d3:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00150d6:	83 f0 01             	xor    eax,0x1
c00150d9:	84 c0                	test   al,al
c00150db:	0f 84 45 01 00 00    	je     c0015226 <opcodeFault(regs*, void*)+0x541>
c00150e1:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00150e4:	3c 01                	cmp    al,0x1
c00150e6:	0f 85 3a 01 00 00    	jne    c0015226 <opcodeFault(regs*, void*)+0x541>
c00150ec:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00150ef:	83 f0 01             	xor    eax,0x1
c00150f2:	84 c0                	test   al,al
c00150f4:	0f 84 2c 01 00 00    	je     c0015226 <opcodeFault(regs*, void*)+0x541>
c00150fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150fd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015100:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015103:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001510a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001510d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015110:	89 c2                	mov    edx,eax
c0015112:	b8 00 00 00 00       	mov    eax,0x0
c0015117:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001511a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001511d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015120:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015123:	ba 00 00 00 00       	mov    edx,0x0
c0015128:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001512b:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001512e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015131:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015134:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015137:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001513e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015141:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015144:	89 c2                	mov    edx,eax
c0015146:	b8 00 00 00 00       	mov    eax,0x0
c001514b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001514e:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015154:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015157:	ba 00 00 00 00       	mov    edx,0x0
c001515c:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001515f:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015162:	fa                   	cli    
c0015163:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c0015168:	40                   	inc    eax
c0015169:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001516e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015171:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015174:	8b 00                	mov    eax,DWORD PTR [eax]
c0015176:	89 c1                	mov    ecx,eax
c0015178:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001517b:	89 cb                	mov    ebx,ecx
c001517d:	89 d0                	mov    eax,edx
c001517f:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015182:	89 c6                	mov    esi,eax
c0015184:	89 f0                	mov    eax,esi
c0015186:	09 d8                	or     eax,ebx
c0015188:	85 c0                	test   eax,eax
c001518a:	75 21                	jne    c00151ad <opcodeFault(regs*, void*)+0x4c8>
c001518c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001518f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015192:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015195:	89 01                	mov    DWORD PTR [ecx],eax
c0015197:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001519a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151a0:	83 c8 40             	or     eax,0x40
c00151a3:	89 c2                	mov    edx,eax
c00151a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00151ab:	eb 3e                	jmp    c00151eb <opcodeFault(regs*, void*)+0x506>
c00151ad:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00151b0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00151b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00151b8:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00151bb:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00151be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c1:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00151c4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00151c7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00151ca:	89 d0                	mov    eax,edx
c00151cc:	31 d2                	xor    edx,edx
c00151ce:	89 c3                	mov    ebx,eax
c00151d0:	89 d6                	mov    esi,edx
c00151d2:	89 da                	mov    edx,ebx
c00151d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00151da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151e0:	83 e0 bf             	and    eax,0xffffffbf
c00151e3:	89 c2                	mov    edx,eax
c00151e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00151eb:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c00151f0:	48                   	dec    eax
c00151f1:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c00151f6:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c00151fb:	85 c0                	test   eax,eax
c00151fd:	75 01                	jne    c0015200 <opcodeFault(regs*, void*)+0x51b>
c00151ff:	fb                   	sti    
c0015200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015203:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015206:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015209:	01 c2                	add    edx,eax
c001520b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015211:	83 ec 0c             	sub    esp,0xc
c0015214:	68 76 b9 02 c0       	push   0xc002b976
c0015219:	e8 ab d6 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001521e:	83 c4 10             	add    esp,0x10
c0015221:	e9 d5 00 00 00       	jmp    c00152fb <opcodeFault(regs*, void*)+0x616>
c0015226:	83 ec 0c             	sub    esp,0xc
c0015229:	68 89 b9 02 c0       	push   0xc002b989
c001522e:	e8 96 d6 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0015233:	83 c4 10             	add    esp,0x10
c0015236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015239:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001523c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015242:	c1 e0 04             	shl    eax,0x4
c0015245:	01 d0                	add    eax,edx
c0015247:	83 c0 03             	add    eax,0x3
c001524a:	8a 00                	mov    al,BYTE PTR [eax]
c001524c:	0f b6 d8             	movzx  ebx,al
c001524f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015252:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015258:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001525b:	c1 e0 04             	shl    eax,0x4
c001525e:	01 d0                	add    eax,edx
c0015260:	83 c0 02             	add    eax,0x2
c0015263:	8a 00                	mov    al,BYTE PTR [eax]
c0015265:	0f b6 c8             	movzx  ecx,al
c0015268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001526b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001526e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015271:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015274:	c1 e0 04             	shl    eax,0x4
c0015277:	01 d0                	add    eax,edx
c0015279:	40                   	inc    eax
c001527a:	8a 00                	mov    al,BYTE PTR [eax]
c001527c:	0f b6 d0             	movzx  edx,al
c001527f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015282:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015288:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001528b:	c1 e0 04             	shl    eax,0x4
c001528e:	01 f0                	add    eax,esi
c0015290:	8a 00                	mov    al,BYTE PTR [eax]
c0015292:	0f b6 c0             	movzx  eax,al
c0015295:	83 ec 0c             	sub    esp,0xc
c0015298:	53                   	push   ebx
c0015299:	51                   	push   ecx
c001529a:	52                   	push   edx
c001529b:	50                   	push   eax
c001529c:	68 9c b9 02 c0       	push   0xc002b99c
c00152a1:	e8 23 d6 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00152a6:	83 c4 20             	add    esp,0x20
c00152a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152af:	83 c0 03             	add    eax,0x3
c00152b2:	8a 00                	mov    al,BYTE PTR [eax]
c00152b4:	0f b6 d8             	movzx  ebx,al
c00152b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152bd:	83 c0 02             	add    eax,0x2
c00152c0:	8a 00                	mov    al,BYTE PTR [eax]
c00152c2:	0f b6 c8             	movzx  ecx,al
c00152c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152cb:	40                   	inc    eax
c00152cc:	8a 00                	mov    al,BYTE PTR [eax]
c00152ce:	0f b6 d0             	movzx  edx,al
c00152d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152d7:	8a 00                	mov    al,BYTE PTR [eax]
c00152d9:	0f b6 c0             	movzx  eax,al
c00152dc:	83 ec 0c             	sub    esp,0xc
c00152df:	53                   	push   ebx
c00152e0:	51                   	push   ecx
c00152e1:	52                   	push   edx
c00152e2:	50                   	push   eax
c00152e3:	68 c4 b9 02 c0       	push   0xc002b9c4
c00152e8:	e8 dc d5 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00152ed:	83 c4 20             	add    esp,0x20
c00152f0:	83 ec 0c             	sub    esp,0xc
c00152f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00152f6:	e8 79 f4 ff ff       	call   c0014774 <displayDebugInfo(regs*)>
c00152fb:	8d 65 f8             	lea    esp,[ebp-0x8]
c00152fe:	5b                   	pop    ebx
c00152ff:	5e                   	pop    esi
c0015300:	5d                   	pop    ebp
c0015301:	c3                   	ret    

c0015302 <displayProgramFault(char const*)>:
c0015302:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015307:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001530a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015310:	85 c0                	test   eax,eax
c0015312:	74 15                	je     c0015329 <displayProgramFault(char const*)+0x27>
c0015314:	83 ec 0c             	sub    esp,0xc
c0015317:	6a 04                	push   0x4
c0015319:	6a 0f                	push   0xf
c001531b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001531f:	50                   	push   eax
c0015320:	e8 95 b4 ff ff       	call   c00107ba <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015325:	83 c4 1c             	add    esp,0x1c
c0015328:	c3                   	ret    
c0015329:	c3                   	ret    

c001532a <setupInterruptController()>:
c001532a:	55                   	push   ebp
c001532b:	89 e5                	mov    ebp,esp
c001532d:	53                   	push   ebx
c001532e:	83 ec 24             	sub    esp,0x24
c0015331:	b8 00 00 00 00       	mov    eax,0x0
c0015336:	85 c0                	test   eax,eax
c0015338:	0f 95 c0             	setne  al
c001533b:	84 c0                	test   al,al
c001533d:	74 5b                	je     c001539a <setupInterruptController()+0x70>
c001533f:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015346:	83 ec 0c             	sub    esp,0xc
c0015349:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001534c:	e8 3b a5 ff ff       	call   c000f88c <malloc>
c0015351:	83 c4 10             	add    esp,0x10
c0015354:	89 c3                	mov    ebx,eax
c0015356:	83 ec 0c             	sub    esp,0xc
c0015359:	53                   	push   ebx
c001535a:	e8 09 0e 01 00       	call   c0026168 <APIC::APIC()>
c001535f:	83 c4 10             	add    esp,0x10
c0015362:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015365:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015368:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001536b:	8b 00                	mov    eax,DWORD PTR [eax]
c001536d:	83 c0 08             	add    eax,0x8
c0015370:	8b 00                	mov    eax,DWORD PTR [eax]
c0015372:	6a 00                	push   0x0
c0015374:	6a 00                	push   0x0
c0015376:	6a 00                	push   0x0
c0015378:	52                   	push   edx
c0015379:	ff d0                	call   eax
c001537b:	83 c4 10             	add    esp,0x10
c001537e:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0015383:	83 ec 08             	sub    esp,0x8
c0015386:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015389:	50                   	push   eax
c001538a:	e8 73 e9 ff ff       	call   c0013d02 <Device::addChild(Device*)>
c001538f:	83 c4 10             	add    esp,0x10
c0015392:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015395:	e9 89 03 00 00       	jmp    c0015723 <setupInterruptController()+0x3f9>
c001539a:	a0 40 1c 03 c0       	mov    al,ds:0xc0031c40
c001539f:	84 c0                	test   al,al
c00153a1:	75 24                	jne    c00153c7 <setupInterruptController()+0x9d>
c00153a3:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00153a8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00153ae:	83 e2 fe             	and    edx,0xfffffffe
c00153b1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00153b7:	83 ec 0c             	sub    esp,0xc
c00153ba:	68 e9 b9 02 c0       	push   0xc002b9e9
c00153bf:	e8 05 d5 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00153c4:	83 c4 10             	add    esp,0x10
c00153c7:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00153cc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00153d2:	83 e0 01             	and    eax,0x1
c00153d5:	84 c0                	test   al,al
c00153d7:	0f 95 c0             	setne  al
c00153da:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00153dd:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00153e4:	83 ec 0c             	sub    esp,0xc
c00153e7:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00153ea:	e8 9d a4 ff ff       	call   c000f88c <malloc>
c00153ef:	83 c4 10             	add    esp,0x10
c00153f2:	89 c3                	mov    ebx,eax
c00153f4:	83 ec 0c             	sub    esp,0xc
c00153f7:	53                   	push   ebx
c00153f8:	e8 c3 12 01 00       	call   c00266c0 <PIC::PIC()>
c00153fd:	83 c4 10             	add    esp,0x10
c0015400:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015403:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015406:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015409:	8b 00                	mov    eax,DWORD PTR [eax]
c001540b:	83 c0 08             	add    eax,0x8
c001540e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015410:	6a 00                	push   0x0
c0015412:	6a 00                	push   0x0
c0015414:	6a 00                	push   0x0
c0015416:	52                   	push   edx
c0015417:	ff d0                	call   eax
c0015419:	83 c4 10             	add    esp,0x10
c001541c:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015420:	74 73                	je     c0015495 <setupInterruptController()+0x16b>
c0015422:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015425:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015428:	8b 00                	mov    eax,DWORD PTR [eax]
c001542a:	83 c0 0c             	add    eax,0xc
c001542d:	8b 00                	mov    eax,DWORD PTR [eax]
c001542f:	6a 00                	push   0x0
c0015431:	6a 00                	push   0x0
c0015433:	6a 00                	push   0x0
c0015435:	52                   	push   edx
c0015436:	ff d0                	call   eax
c0015438:	83 c4 10             	add    esp,0x10
c001543b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001543f:	74 15                	je     c0015456 <setupInterruptController()+0x12c>
c0015441:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015444:	8b 00                	mov    eax,DWORD PTR [eax]
c0015446:	83 c0 04             	add    eax,0x4
c0015449:	8b 00                	mov    eax,DWORD PTR [eax]
c001544b:	83 ec 0c             	sub    esp,0xc
c001544e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015451:	ff d0                	call   eax
c0015453:	83 c4 10             	add    esp,0x10
c0015456:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001545d:	83 ec 0c             	sub    esp,0xc
c0015460:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015463:	e8 24 a4 ff ff       	call   c000f88c <malloc>
c0015468:	83 c4 10             	add    esp,0x10
c001546b:	89 c3                	mov    ebx,eax
c001546d:	83 ec 0c             	sub    esp,0xc
c0015470:	53                   	push   ebx
c0015471:	e8 f2 0c 01 00       	call   c0026168 <APIC::APIC()>
c0015476:	83 c4 10             	add    esp,0x10
c0015479:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001547c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001547f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015482:	8b 00                	mov    eax,DWORD PTR [eax]
c0015484:	83 c0 08             	add    eax,0x8
c0015487:	8b 00                	mov    eax,DWORD PTR [eax]
c0015489:	6a 00                	push   0x0
c001548b:	6a 00                	push   0x0
c001548d:	6a 00                	push   0x0
c001548f:	52                   	push   edx
c0015490:	ff d0                	call   eax
c0015492:	83 c4 10             	add    esp,0x10
c0015495:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001549a:	83 ec 08             	sub    esp,0x8
c001549d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a0:	50                   	push   eax
c00154a1:	e8 5c e8 ff ff       	call   c0013d02 <Device::addChild(Device*)>
c00154a6:	83 c4 10             	add    esp,0x10
c00154a9:	c7 05 48 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f448,0x0
c00154b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b8:	83 c0 24             	add    eax,0x24
c00154bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154bd:	6a 00                	push   0x0
c00154bf:	68 c6 4c 01 c0       	push   0xc0014cc6
c00154c4:	6a 00                	push   0x0
c00154c6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c9:	ff d0                	call   eax
c00154cb:	83 c4 10             	add    esp,0x10
c00154ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d3:	83 c0 24             	add    eax,0x24
c00154d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d8:	6a 00                	push   0x0
c00154da:	68 c6 4c 01 c0       	push   0xc0014cc6
c00154df:	6a 01                	push   0x1
c00154e1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154e4:	ff d0                	call   eax
c00154e6:	83 c4 10             	add    esp,0x10
c00154e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ee:	83 c0 24             	add    eax,0x24
c00154f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f3:	6a 00                	push   0x0
c00154f5:	68 d1 45 01 c0       	push   0xc00145d1
c00154fa:	6a 02                	push   0x2
c00154fc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ff:	ff d0                	call   eax
c0015501:	83 c4 10             	add    esp,0x10
c0015504:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015507:	8b 00                	mov    eax,DWORD PTR [eax]
c0015509:	83 c0 24             	add    eax,0x24
c001550c:	8b 00                	mov    eax,DWORD PTR [eax]
c001550e:	6a 00                	push   0x0
c0015510:	68 c6 4c 01 c0       	push   0xc0014cc6
c0015515:	6a 03                	push   0x3
c0015517:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001551a:	ff d0                	call   eax
c001551c:	83 c4 10             	add    esp,0x10
c001551f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015522:	8b 00                	mov    eax,DWORD PTR [eax]
c0015524:	83 c0 24             	add    eax,0x24
c0015527:	8b 00                	mov    eax,DWORD PTR [eax]
c0015529:	6a 00                	push   0x0
c001552b:	68 c6 4c 01 c0       	push   0xc0014cc6
c0015530:	6a 04                	push   0x4
c0015532:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015535:	ff d0                	call   eax
c0015537:	83 c4 10             	add    esp,0x10
c001553a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001553d:	8b 00                	mov    eax,DWORD PTR [eax]
c001553f:	83 c0 24             	add    eax,0x24
c0015542:	8b 00                	mov    eax,DWORD PTR [eax]
c0015544:	6a 00                	push   0x0
c0015546:	68 c6 4c 01 c0       	push   0xc0014cc6
c001554b:	6a 05                	push   0x5
c001554d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015550:	ff d0                	call   eax
c0015552:	83 c4 10             	add    esp,0x10
c0015555:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015558:	8b 00                	mov    eax,DWORD PTR [eax]
c001555a:	83 c0 24             	add    eax,0x24
c001555d:	8b 00                	mov    eax,DWORD PTR [eax]
c001555f:	6a 00                	push   0x0
c0015561:	68 e5 4c 01 c0       	push   0xc0014ce5
c0015566:	6a 06                	push   0x6
c0015568:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001556b:	ff d0                	call   eax
c001556d:	83 c4 10             	add    esp,0x10
c0015570:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015573:	8b 00                	mov    eax,DWORD PTR [eax]
c0015575:	83 c0 24             	add    eax,0x24
c0015578:	8b 00                	mov    eax,DWORD PTR [eax]
c001557a:	6a 00                	push   0x0
c001557c:	68 03 4c 01 c0       	push   0xc0014c03
c0015581:	6a 07                	push   0x7
c0015583:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015586:	ff d0                	call   eax
c0015588:	83 c4 10             	add    esp,0x10
c001558b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001558e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015590:	83 c0 24             	add    eax,0x24
c0015593:	8b 00                	mov    eax,DWORD PTR [eax]
c0015595:	6a 00                	push   0x0
c0015597:	68 ec 43 01 c0       	push   0xc00143ec
c001559c:	6a 08                	push   0x8
c001559e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155a1:	ff d0                	call   eax
c00155a3:	83 c4 10             	add    esp,0x10
c00155a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ab:	83 c0 24             	add    eax,0x24
c00155ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b0:	6a 00                	push   0x0
c00155b2:	68 c6 4c 01 c0       	push   0xc0014cc6
c00155b7:	6a 09                	push   0x9
c00155b9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155bc:	ff d0                	call   eax
c00155be:	83 c4 10             	add    esp,0x10
c00155c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c6:	83 c0 24             	add    eax,0x24
c00155c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155cb:	6a 00                	push   0x0
c00155cd:	68 c6 4c 01 c0       	push   0xc0014cc6
c00155d2:	6a 0a                	push   0xa
c00155d4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155d7:	ff d0                	call   eax
c00155d9:	83 c4 10             	add    esp,0x10
c00155dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155df:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e1:	83 c0 24             	add    eax,0x24
c00155e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e6:	6a 00                	push   0x0
c00155e8:	68 c6 4c 01 c0       	push   0xc0014cc6
c00155ed:	6a 0b                	push   0xb
c00155ef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155f2:	ff d0                	call   eax
c00155f4:	83 c4 10             	add    esp,0x10
c00155f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00155fc:	83 c0 24             	add    eax,0x24
c00155ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015601:	6a 00                	push   0x0
c0015603:	68 c6 4c 01 c0       	push   0xc0014cc6
c0015608:	6a 0c                	push   0xc
c001560a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001560d:	ff d0                	call   eax
c001560f:	83 c4 10             	add    esp,0x10
c0015612:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015615:	8b 00                	mov    eax,DWORD PTR [eax]
c0015617:	83 c0 24             	add    eax,0x24
c001561a:	8b 00                	mov    eax,DWORD PTR [eax]
c001561c:	6a 00                	push   0x0
c001561e:	68 76 4c 01 c0       	push   0xc0014c76
c0015623:	6a 0d                	push   0xd
c0015625:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015628:	ff d0                	call   eax
c001562a:	83 c4 10             	add    esp,0x10
c001562d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015630:	8b 00                	mov    eax,DWORD PTR [eax]
c0015632:	83 c0 24             	add    eax,0x24
c0015635:	8b 00                	mov    eax,DWORD PTR [eax]
c0015637:	6a 00                	push   0x0
c0015639:	68 af 4c 01 c0       	push   0xc0014caf
c001563e:	6a 0e                	push   0xe
c0015640:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015643:	ff d0                	call   eax
c0015645:	83 c4 10             	add    esp,0x10
c0015648:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001564b:	8b 00                	mov    eax,DWORD PTR [eax]
c001564d:	83 c0 24             	add    eax,0x24
c0015650:	8b 00                	mov    eax,DWORD PTR [eax]
c0015652:	6a 00                	push   0x0
c0015654:	68 c6 4c 01 c0       	push   0xc0014cc6
c0015659:	6a 0f                	push   0xf
c001565b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001565e:	ff d0                	call   eax
c0015660:	83 c4 10             	add    esp,0x10
c0015663:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015666:	8b 00                	mov    eax,DWORD PTR [eax]
c0015668:	83 c0 24             	add    eax,0x24
c001566b:	8b 00                	mov    eax,DWORD PTR [eax]
c001566d:	6a 00                	push   0x0
c001566f:	68 c6 4c 01 c0       	push   0xc0014cc6
c0015674:	6a 10                	push   0x10
c0015676:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015679:	ff d0                	call   eax
c001567b:	83 c4 10             	add    esp,0x10
c001567e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015681:	8b 00                	mov    eax,DWORD PTR [eax]
c0015683:	83 c0 24             	add    eax,0x24
c0015686:	8b 00                	mov    eax,DWORD PTR [eax]
c0015688:	6a 00                	push   0x0
c001568a:	68 c6 4c 01 c0       	push   0xc0014cc6
c001568f:	6a 11                	push   0x11
c0015691:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015694:	ff d0                	call   eax
c0015696:	83 c4 10             	add    esp,0x10
c0015699:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001569c:	8b 00                	mov    eax,DWORD PTR [eax]
c001569e:	83 c0 24             	add    eax,0x24
c00156a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a3:	6a 00                	push   0x0
c00156a5:	68 c6 4c 01 c0       	push   0xc0014cc6
c00156aa:	6a 12                	push   0x12
c00156ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156af:	ff d0                	call   eax
c00156b1:	83 c4 10             	add    esp,0x10
c00156b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156b9:	83 c0 24             	add    eax,0x24
c00156bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00156be:	6a 00                	push   0x0
c00156c0:	68 c6 4c 01 c0       	push   0xc0014cc6
c00156c5:	6a 13                	push   0x13
c00156c7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156ca:	ff d0                	call   eax
c00156cc:	83 c4 10             	add    esp,0x10
c00156cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d4:	83 c0 24             	add    eax,0x24
c00156d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d9:	6a 00                	push   0x0
c00156db:	68 c6 4c 01 c0       	push   0xc0014cc6
c00156e0:	6a 14                	push   0x14
c00156e2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156e5:	ff d0                	call   eax
c00156e7:	83 c4 10             	add    esp,0x10
c00156ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ef:	83 c0 24             	add    eax,0x24
c00156f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f4:	6a 00                	push   0x0
c00156f6:	68 c6 4c 01 c0       	push   0xc0014cc6
c00156fb:	6a 1e                	push   0x1e
c00156fd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015700:	ff d0                	call   eax
c0015702:	83 c4 10             	add    esp,0x10
c0015705:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015708:	8b 00                	mov    eax,DWORD PTR [eax]
c001570a:	83 c0 24             	add    eax,0x24
c001570d:	8b 00                	mov    eax,DWORD PTR [eax]
c001570f:	6a 00                	push   0x0
c0015711:	68 f8 c6 01 c0       	push   0xc001c6f8
c0015716:	6a 60                	push   0x60
c0015718:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001571b:	ff d0                	call   eax
c001571d:	83 c4 10             	add    esp,0x10
c0015720:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015723:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015726:	c9                   	leave  
c0015727:	c3                   	ret    

c0015728 <InterruptController::convertLegacyIRQNumber(int)>:
c0015728:	55                   	push   ebp
c0015729:	89 e5                	mov    ebp,esp
c001572b:	83 ec 08             	sub    esp,0x8
c001572e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015731:	83 ec 0c             	sub    esp,0xc
c0015734:	50                   	push   eax
c0015735:	e8 c8 e8 ff ff       	call   c0014002 <Device::getName()>
c001573a:	83 c4 10             	add    esp,0x10
c001573d:	8a 00                	mov    al,BYTE PTR [eax]
c001573f:	3c 41                	cmp    al,0x41
c0015741:	0f 94 c0             	sete   al
c0015744:	84 c0                	test   al,al
c0015746:	74 28                	je     c0015770 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015748:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001574c:	7f 12                	jg     c0015760 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001574e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015751:	05 20 e5 02 c0       	add    eax,0xc002e520
c0015756:	8a 00                	mov    al,BYTE PTR [eax]
c0015758:	0f b6 c0             	movzx  eax,al
c001575b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001575e:	eb 10                	jmp    c0015770 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015760:	83 ec 0c             	sub    esp,0xc
c0015763:	68 d8 b6 02 c0       	push   0xc002b6d8
c0015768:	e8 92 4b 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c001576d:	83 c4 10             	add    esp,0x10
c0015770:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015773:	c9                   	leave  
c0015774:	c3                   	ret    
c0015775:	90                   	nop

c0015776 <startGUI(void*)>:
c0015776:	55                   	push   ebp
c0015777:	89 e5                	mov    ebp,esp
c0015779:	53                   	push   ebx
c001577a:	83 ec 04             	sub    esp,0x4
c001577d:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c0015782:	48                   	dec    eax
c0015783:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c0015788:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001578d:	85 c0                	test   eax,eax
c001578f:	75 01                	jne    c0015792 <startGUI(void*)+0x1c>
c0015791:	fb                   	sti    
c0015792:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c0015798:	83 ec 08             	sub    esp,0x8
c001579b:	6a 01                	push   0x1
c001579d:	68 4c ba 02 c0       	push   0xc002ba4c
c00157a2:	e8 2c 7f 00 00       	call   c001d6d3 <Thr::loadDLL(char const*, bool)>
c00157a7:	83 c4 10             	add    esp,0x10
c00157aa:	83 ec 08             	sub    esp,0x8
c00157ad:	53                   	push   ebx
c00157ae:	50                   	push   eax
c00157af:	e8 4a 81 00 00       	call   c001d8fe <Thr::executeDLL(unsigned long, void*)>
c00157b4:	83 c4 10             	add    esp,0x10
c00157b7:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c00157bd:	83 ec 08             	sub    esp,0x8
c00157c0:	6a 01                	push   0x1
c00157c2:	68 66 ba 02 c0       	push   0xc002ba66
c00157c7:	e8 07 7f 00 00       	call   c001d6d3 <Thr::loadDLL(char const*, bool)>
c00157cc:	83 c4 10             	add    esp,0x10
c00157cf:	83 ec 08             	sub    esp,0x8
c00157d2:	53                   	push   ebx
c00157d3:	50                   	push   eax
c00157d4:	e8 25 81 00 00       	call   c001d8fe <Thr::executeDLL(unsigned long, void*)>
c00157d9:	83 c4 10             	add    esp,0x10
c00157dc:	90                   	nop
c00157dd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00157e0:	c9                   	leave  
c00157e1:	c3                   	ret    

c00157e2 <startGUIVESA(void*)>:
c00157e2:	55                   	push   ebp
c00157e3:	89 e5                	mov    ebp,esp
c00157e5:	53                   	push   ebx
c00157e6:	83 ec 04             	sub    esp,0x4
c00157e9:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c00157ee:	48                   	dec    eax
c00157ef:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c00157f4:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c00157f9:	85 c0                	test   eax,eax
c00157fb:	75 01                	jne    c00157fe <startGUIVESA(void*)+0x1c>
c00157fd:	fb                   	sti    
c00157fe:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c0015804:	83 ec 08             	sub    esp,0x8
c0015807:	6a 01                	push   0x1
c0015809:	68 80 ba 02 c0       	push   0xc002ba80
c001580e:	e8 c0 7e 00 00       	call   c001d6d3 <Thr::loadDLL(char const*, bool)>
c0015813:	83 c4 10             	add    esp,0x10
c0015816:	83 ec 08             	sub    esp,0x8
c0015819:	53                   	push   ebx
c001581a:	50                   	push   eax
c001581b:	e8 de 80 00 00       	call   c001d8fe <Thr::executeDLL(unsigned long, void*)>
c0015820:	83 c4 10             	add    esp,0x10
c0015823:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c0015829:	83 ec 08             	sub    esp,0x8
c001582c:	6a 01                	push   0x1
c001582e:	68 66 ba 02 c0       	push   0xc002ba66
c0015833:	e8 9b 7e 00 00       	call   c001d6d3 <Thr::loadDLL(char const*, bool)>
c0015838:	83 c4 10             	add    esp,0x10
c001583b:	83 ec 08             	sub    esp,0x8
c001583e:	53                   	push   ebx
c001583f:	50                   	push   eax
c0015840:	e8 b9 80 00 00       	call   c001d8fe <Thr::executeDLL(unsigned long, void*)>
c0015845:	83 c4 10             	add    esp,0x10
c0015848:	90                   	nop
c0015849:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001584c:	c9                   	leave  
c001584d:	c3                   	ret    

c001584e <sendKeyToTerminal(unsigned char)>:
c001584e:	55                   	push   ebp
c001584f:	89 e5                	mov    ebp,esp
c0015851:	83 ec 28             	sub    esp,0x28
c0015854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015857:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001585a:	a1 84 f3 02 c0       	mov    eax,ds:0xc002f384
c001585f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015863:	83 ec 08             	sub    esp,0x8
c0015866:	52                   	push   edx
c0015867:	50                   	push   eax
c0015868:	e8 25 b4 ff ff       	call   c0010c92 <VgaText::receiveKey(unsigned char)>
c001586d:	83 c4 10             	add    esp,0x10
c0015870:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015874:	0f 85 8f 00 00 00    	jne    c0015909 <sendKeyToTerminal(unsigned char)+0xbb>
c001587a:	fa                   	cli    
c001587b:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c0015880:	40                   	inc    eax
c0015881:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c0015886:	a1 e4 27 03 c0       	mov    eax,ds:0xc00327e4
c001588b:	40                   	inc    eax
c001588c:	a3 e4 27 03 c0       	mov    ds:0xc00327e4,eax
c0015891:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c0015896:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015899:	c7 05 60 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f460,0x0
c00158a3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00158a7:	74 1f                	je     c00158c8 <sendKeyToTerminal(unsigned char)+0x7a>
c00158a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158ac:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00158af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00158b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00158b8:	83 ec 0c             	sub    esp,0xc
c00158bb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00158be:	e8 b3 8c 00 00       	call   c001e576 <unblockTask(ThreadControlBlock*)>
c00158c3:	83 c4 10             	add    esp,0x10
c00158c6:	eb db                	jmp    c00158a3 <sendKeyToTerminal(unsigned char)+0x55>
c00158c8:	a1 e4 27 03 c0       	mov    eax,ds:0xc00327e4
c00158cd:	48                   	dec    eax
c00158ce:	a3 e4 27 03 c0       	mov    ds:0xc00327e4,eax
c00158d3:	a1 e4 27 03 c0       	mov    eax,ds:0xc00327e4
c00158d8:	85 c0                	test   eax,eax
c00158da:	75 18                	jne    c00158f4 <sendKeyToTerminal(unsigned char)+0xa6>
c00158dc:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c00158e1:	85 c0                	test   eax,eax
c00158e3:	74 0f                	je     c00158f4 <sendKeyToTerminal(unsigned char)+0xa6>
c00158e5:	c7 05 e0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327e0,0x0
c00158ef:	e8 be 87 00 00       	call   c001e0b2 <schedule()>
c00158f4:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c00158f9:	48                   	dec    eax
c00158fa:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c00158ff:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c0015904:	85 c0                	test   eax,eax
c0015906:	75 01                	jne    c0015909 <sendKeyToTerminal(unsigned char)+0xbb>
c0015908:	fb                   	sti    
c0015909:	90                   	nop
c001590a:	c9                   	leave  
c001590b:	c3                   	ret    

c001590c <sendKeyboardToken(KeyboardToken)>:
c001590c:	55                   	push   ebp
c001590d:	89 e5                	mov    ebp,esp
c001590f:	83 ec 18             	sub    esp,0x18
c0015912:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015915:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015918:	0f b7 c0             	movzx  eax,ax
c001591b:	83 f2 01             	xor    edx,0x1
c001591e:	88 90 80 f4 02 c0    	mov    BYTE PTR [eax-0x3ffd0b80],dl
c0015924:	a1 68 f4 02 c0       	mov    eax,ds:0xc002f468
c0015929:	85 c0                	test   eax,eax
c001592b:	74 24                	je     c0015951 <sendKeyboardToken(KeyboardToken)+0x45>
c001592d:	8b 0d 68 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f468
c0015933:	83 ec 04             	sub    esp,0x4
c0015936:	68 80 f4 02 c0       	push   0xc002f480
c001593b:	83 ec 08             	sub    esp,0x8
c001593e:	89 e2                	mov    edx,esp
c0015940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015943:	89 02                	mov    DWORD PTR [edx],eax
c0015945:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015948:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001594c:	ff d1                	call   ecx
c001594e:	83 c4 10             	add    esp,0x10
c0015951:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015954:	66 3d 03 02          	cmp    ax,0x203
c0015958:	75 07                	jne    c0015961 <sendKeyboardToken(KeyboardToken)+0x55>
c001595a:	a0 80 f5 02 c0       	mov    al,ds:0xc002f580
c001595f:	84 c0                	test   al,al
c0015961:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015965:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015968:	a0 88 f8 02 c0       	mov    al,ds:0xc002f888
c001596d:	38 c2                	cmp    dl,al
c001596f:	74 1c                	je     c001598d <sendKeyboardToken(KeyboardToken)+0x81>
c0015971:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015974:	a2 88 f8 02 c0       	mov    ds:0xc002f888,al
c0015979:	a0 88 f8 02 c0       	mov    al,ds:0xc002f888
c001597e:	0f b6 c0             	movzx  eax,al
c0015981:	83 ec 0c             	sub    esp,0xc
c0015984:	50                   	push   eax
c0015985:	e8 60 a8 ff ff       	call   c00101ea <setTerminalScrollLock(bool)>
c001598a:	83 c4 10             	add    esp,0x10
c001598d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015990:	84 c0                	test   al,al
c0015992:	0f 84 ae 00 00 00    	je     c0015a46 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599b:	66 3d 10 03          	cmp    ax,0x310
c001599f:	75 06                	jne    c00159a7 <sendKeyboardToken(KeyboardToken)+0x9b>
c00159a1:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00159a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159aa:	66 3d 11 03          	cmp    ax,0x311
c00159ae:	75 06                	jne    c00159b6 <sendKeyboardToken(KeyboardToken)+0xaa>
c00159b0:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00159b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b9:	66 3d 12 03          	cmp    ax,0x312
c00159bd:	75 06                	jne    c00159c5 <sendKeyboardToken(KeyboardToken)+0xb9>
c00159bf:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00159c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c8:	66 3d 13 03          	cmp    ax,0x313
c00159cc:	75 06                	jne    c00159d4 <sendKeyboardToken(KeyboardToken)+0xc8>
c00159ce:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00159d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d7:	66 3d 14 03          	cmp    ax,0x314
c00159db:	75 06                	jne    c00159e3 <sendKeyboardToken(KeyboardToken)+0xd7>
c00159dd:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00159e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e6:	66 3d 15 03          	cmp    ax,0x315
c00159ea:	75 06                	jne    c00159f2 <sendKeyboardToken(KeyboardToken)+0xe6>
c00159ec:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00159f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f5:	66 3d 16 03          	cmp    ax,0x316
c00159f9:	75 06                	jne    c0015a01 <sendKeyboardToken(KeyboardToken)+0xf5>
c00159fb:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015a01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a04:	66 3d 17 03          	cmp    ax,0x317
c0015a08:	75 06                	jne    c0015a10 <sendKeyboardToken(KeyboardToken)+0x104>
c0015a0a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015a10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a13:	66 3d 18 03          	cmp    ax,0x318
c0015a17:	75 06                	jne    c0015a1f <sendKeyboardToken(KeyboardToken)+0x113>
c0015a19:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015a1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a22:	66 3d 19 03          	cmp    ax,0x319
c0015a26:	75 06                	jne    c0015a2e <sendKeyboardToken(KeyboardToken)+0x122>
c0015a28:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015a2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a31:	66 3d 1a 03          	cmp    ax,0x31a
c0015a35:	0f 85 c9 00 00 00    	jne    c0015b04 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a3b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015a41:	e9 be 00 00 00       	jmp    c0015b04 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a49:	66 3d 10 03          	cmp    ax,0x310
c0015a4d:	75 0a                	jne    c0015a59 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015a4f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015a55:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a5c:	66 3d 11 03          	cmp    ax,0x311
c0015a60:	75 0a                	jne    c0015a6c <sendKeyboardToken(KeyboardToken)+0x160>
c0015a62:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015a68:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a6f:	66 3d 12 03          	cmp    ax,0x312
c0015a73:	75 0a                	jne    c0015a7f <sendKeyboardToken(KeyboardToken)+0x173>
c0015a75:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015a7b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a82:	66 3d 13 03          	cmp    ax,0x313
c0015a86:	75 0a                	jne    c0015a92 <sendKeyboardToken(KeyboardToken)+0x186>
c0015a88:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015a8e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a95:	66 3d 14 03          	cmp    ax,0x314
c0015a99:	75 0a                	jne    c0015aa5 <sendKeyboardToken(KeyboardToken)+0x199>
c0015a9b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015aa1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa8:	66 3d 15 03          	cmp    ax,0x315
c0015aac:	75 0a                	jne    c0015ab8 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015aae:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015ab4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015abb:	66 3d 16 03          	cmp    ax,0x316
c0015abf:	75 0a                	jne    c0015acb <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015ac1:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015ac7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015acb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ace:	66 3d 17 03          	cmp    ax,0x317
c0015ad2:	75 0a                	jne    c0015ade <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015ad4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015ada:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ade:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae1:	66 3d 18 03          	cmp    ax,0x318
c0015ae5:	75 0a                	jne    c0015af1 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015ae7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015aed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af4:	66 3d 19 03          	cmp    ax,0x319
c0015af8:	75 0a                	jne    c0015b04 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015afa:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015b00:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b07:	66 3d 00 02          	cmp    ax,0x200
c0015b0b:	75 2c                	jne    c0015b39 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015b0d:	a0 80 f8 02 c0       	mov    al,ds:0xc002f880
c0015b12:	83 f0 01             	xor    eax,0x1
c0015b15:	84 c0                	test   al,al
c0015b17:	74 20                	je     c0015b39 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015b19:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0015b1e:	6a 01                	push   0x1
c0015b20:	6a 00                	push   0x0
c0015b22:	68 76 57 01 c0       	push   0xc0015776
c0015b27:	50                   	push   eax
c0015b28:	e8 41 83 00 00       	call   c001de6e <Process::createThread(void (*)(void*), void*, int)>
c0015b2d:	83 c4 10             	add    esp,0x10
c0015b30:	c6 05 80 f8 02 c0 01 	mov    BYTE PTR ds:0xc002f880,0x1
c0015b37:	eb 33                	jmp    c0015b6c <sendKeyboardToken(KeyboardToken)+0x260>
c0015b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b3c:	66 3d 01 02          	cmp    ax,0x201
c0015b40:	75 2a                	jne    c0015b6c <sendKeyboardToken(KeyboardToken)+0x260>
c0015b42:	a0 80 f8 02 c0       	mov    al,ds:0xc002f880
c0015b47:	83 f0 01             	xor    eax,0x1
c0015b4a:	84 c0                	test   al,al
c0015b4c:	74 1e                	je     c0015b6c <sendKeyboardToken(KeyboardToken)+0x260>
c0015b4e:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0015b53:	6a 01                	push   0x1
c0015b55:	6a 00                	push   0x0
c0015b57:	68 e2 57 01 c0       	push   0xc00157e2
c0015b5c:	50                   	push   eax
c0015b5d:	e8 0c 83 00 00       	call   c001de6e <Process::createThread(void (*)(void*), void*, int)>
c0015b62:	83 c4 10             	add    esp,0x10
c0015b65:	c6 05 80 f8 02 c0 01 	mov    BYTE PTR ds:0xc002f880,0x1
c0015b6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6f:	66 3d 1d 03          	cmp    ax,0x31d
c0015b73:	75 06                	jne    c0015b7b <sendKeyboardToken(KeyboardToken)+0x26f>
c0015b75:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015b7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7e:	66 3d 1c 03          	cmp    ax,0x31c
c0015b82:	75 06                	jne    c0015b8a <sendKeyboardToken(KeyboardToken)+0x27e>
c0015b84:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b8d:	66 3d 1b 03          	cmp    ax,0x31b
c0015b91:	75 06                	jne    c0015b99 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015b93:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015b99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b9c:	66 3d 1e 03          	cmp    ax,0x31e
c0015ba0:	75 06                	jne    c0015ba8 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015ba2:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015ba8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bab:	66 3d 1f 03          	cmp    ax,0x31f
c0015baf:	75 06                	jne    c0015bb7 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015bb1:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bba:	66 3d 1a 03          	cmp    ax,0x31a
c0015bbe:	75 06                	jne    c0015bc6 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015bc0:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015bc6:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015bca:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bcd:	83 f0 01             	xor    eax,0x1
c0015bd0:	84 c0                	test   al,al
c0015bd2:	74 77                	je     c0015c4b <sendKeyboardToken(KeyboardToken)+0x33f>
c0015bd4:	a0 81 f5 02 c0       	mov    al,ds:0xc002f581
c0015bd9:	84 c0                	test   al,al
c0015bdb:	74 41                	je     c0015c1e <sendKeyboardToken(KeyboardToken)+0x312>
c0015bdd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015be1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015be5:	74 2b                	je     c0015c12 <sendKeyboardToken(KeyboardToken)+0x306>
c0015be7:	8b 15 84 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f884
c0015bed:	89 d0                	mov    eax,edx
c0015bef:	c1 e0 02             	shl    eax,0x2
c0015bf2:	01 d0                	add    eax,edx
c0015bf4:	01 c0                	add    eax,eax
c0015bf6:	a3 84 f8 02 c0       	mov    ds:0xc002f884,eax
c0015bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bfe:	0f b7 c0             	movzx  eax,ax
c0015c01:	8d 50 d0             	lea    edx,[eax-0x30]
c0015c04:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c0015c09:	01 d0                	add    eax,edx
c0015c0b:	a3 84 f8 02 c0       	mov    ds:0xc002f884,eax
c0015c10:	eb 6d                	jmp    c0015c7f <sendKeyboardToken(KeyboardToken)+0x373>
c0015c12:	c7 05 84 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f884,0x0
c0015c1c:	eb 61                	jmp    c0015c7f <sendKeyboardToken(KeyboardToken)+0x373>
c0015c1e:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c0015c23:	85 c0                	test   eax,eax
c0015c25:	74 18                	je     c0015c3f <sendKeyboardToken(KeyboardToken)+0x333>
c0015c27:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c0015c2c:	0f b6 c0             	movzx  eax,al
c0015c2f:	83 ec 0c             	sub    esp,0xc
c0015c32:	50                   	push   eax
c0015c33:	e8 16 fc ff ff       	call   c001584e <sendKeyToTerminal(unsigned char)>
c0015c38:	83 c4 10             	add    esp,0x10
c0015c3b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c3f:	c7 05 84 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f884,0x0
c0015c49:	eb 34                	jmp    c0015c7f <sendKeyboardToken(KeyboardToken)+0x373>
c0015c4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c4e:	66 3d 01 01          	cmp    ax,0x101
c0015c52:	75 2b                	jne    c0015c7f <sendKeyboardToken(KeyboardToken)+0x373>
c0015c54:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c0015c59:	85 c0                	test   eax,eax
c0015c5b:	74 18                	je     c0015c75 <sendKeyboardToken(KeyboardToken)+0x369>
c0015c5d:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c0015c62:	0f b6 c0             	movzx  eax,al
c0015c65:	83 ec 0c             	sub    esp,0xc
c0015c68:	50                   	push   eax
c0015c69:	e8 e0 fb ff ff       	call   c001584e <sendKeyToTerminal(unsigned char)>
c0015c6e:	83 c4 10             	add    esp,0x10
c0015c71:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c75:	c7 05 84 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f884,0x0
c0015c7f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015c82:	83 f0 01             	xor    eax,0x1
c0015c85:	84 c0                	test   al,al
c0015c87:	74 4c                	je     c0015cd5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c89:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c8c:	83 f0 01             	xor    eax,0x1
c0015c8f:	84 c0                	test   al,al
c0015c91:	74 42                	je     c0015cd5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c93:	a0 80 f5 02 c0       	mov    al,ds:0xc002f580
c0015c98:	83 f0 01             	xor    eax,0x1
c0015c9b:	84 c0                	test   al,al
c0015c9d:	74 36                	je     c0015cd5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca2:	66 83 f8 1f          	cmp    ax,0x1f
c0015ca6:	76 09                	jbe    c0015cb1 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015ca8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cab:	66 83 f8 7e          	cmp    ax,0x7e
c0015caf:	76 12                	jbe    c0015cc3 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cb4:	66 83 f8 0a          	cmp    ax,0xa
c0015cb8:	74 09                	je     c0015cc3 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015cba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cbd:	66 83 f8 08          	cmp    ax,0x8
c0015cc1:	75 12                	jne    c0015cd5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015cc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc6:	0f b6 c0             	movzx  eax,al
c0015cc9:	83 ec 0c             	sub    esp,0xc
c0015ccc:	50                   	push   eax
c0015ccd:	e8 7c fb ff ff       	call   c001584e <sendKeyToTerminal(unsigned char)>
c0015cd2:	83 c4 10             	add    esp,0x10
c0015cd5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015cd8:	83 f0 01             	xor    eax,0x1
c0015cdb:	84 c0                	test   al,al
c0015cdd:	74 4f                	je     c0015d2e <sendKeyboardToken(KeyboardToken)+0x422>
c0015cdf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ce2:	83 f0 01             	xor    eax,0x1
c0015ce5:	84 c0                	test   al,al
c0015ce7:	74 45                	je     c0015d2e <sendKeyboardToken(KeyboardToken)+0x422>
c0015ce9:	a0 80 f5 02 c0       	mov    al,ds:0xc002f580
c0015cee:	84 c0                	test   al,al
c0015cf0:	74 3c                	je     c0015d2e <sendKeyboardToken(KeyboardToken)+0x422>
c0015cf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cf5:	66 83 f8 3f          	cmp    ax,0x3f
c0015cf9:	76 33                	jbe    c0015d2e <sendKeyboardToken(KeyboardToken)+0x422>
c0015cfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cfe:	66 83 f8 7f          	cmp    ax,0x7f
c0015d02:	77 2a                	ja     c0015d2e <sendKeyboardToken(KeyboardToken)+0x422>
c0015d04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d07:	88 c2                	mov    dl,al
c0015d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d0c:	66 83 f8 5f          	cmp    ax,0x5f
c0015d10:	76 04                	jbe    c0015d16 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015d12:	b0 20                	mov    al,0x20
c0015d14:	eb 02                	jmp    c0015d18 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015d16:	b0 00                	mov    al,0x0
c0015d18:	29 c2                	sub    edx,eax
c0015d1a:	88 d0                	mov    al,dl
c0015d1c:	83 e8 40             	sub    eax,0x40
c0015d1f:	0f b6 c0             	movzx  eax,al
c0015d22:	83 ec 0c             	sub    esp,0xc
c0015d25:	50                   	push   eax
c0015d26:	e8 23 fb ff ff       	call   c001584e <sendKeyToTerminal(unsigned char)>
c0015d2b:	83 c4 10             	add    esp,0x10
c0015d2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d31:	66 3d 00 03          	cmp    ax,0x300
c0015d35:	75 0f                	jne    c0015d46 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d37:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d3a:	83 f0 01             	xor    eax,0x1
c0015d3d:	84 c0                	test   al,al
c0015d3f:	74 05                	je     c0015d46 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d41:	e8 4c aa ff ff       	call   c0010792 <doTerminalCycle()>
c0015d46:	90                   	nop
c0015d47:	c9                   	leave  
c0015d48:	c3                   	ret    

c0015d49 <clearInternalKeybuffer(VgaText*)>:
c0015d49:	55                   	push   ebp
c0015d4a:	89 e5                	mov    ebp,esp
c0015d4c:	83 ec 08             	sub    esp,0x8
c0015d4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d52:	05 98 01 00 00       	add    eax,0x198
c0015d57:	83 ec 0c             	sub    esp,0xc
c0015d5a:	50                   	push   eax
c0015d5b:	e8 0c aa fe ff       	call   c000076c <strlen>
c0015d60:	83 c4 10             	add    esp,0x10
c0015d63:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d66:	81 c2 98 01 00 00    	add    edx,0x198
c0015d6c:	83 ec 04             	sub    esp,0x4
c0015d6f:	50                   	push   eax
c0015d70:	6a 00                	push   0x0
c0015d72:	52                   	push   edx
c0015d73:	e8 d8 a9 fe ff       	call   c0000750 <memset>
c0015d78:	83 c4 10             	add    esp,0x10
c0015d7b:	90                   	nop
c0015d7c:	c9                   	leave  
c0015d7d:	c3                   	ret    

c0015d7e <readKeyboard(VgaText*, char*, unsigned long)>:
c0015d7e:	55                   	push   ebp
c0015d7f:	89 e5                	mov    ebp,esp
c0015d81:	83 ec 18             	sub    esp,0x18
c0015d84:	a1 68 f4 02 c0       	mov    eax,ds:0xc002f468
c0015d89:	85 c0                	test   eax,eax
c0015d8b:	74 2a                	je     c0015db7 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015d8d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015d93:	8b 0d 68 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f468
c0015d99:	83 ec 04             	sub    esp,0x4
c0015d9c:	68 80 f4 02 c0       	push   0xc002f480
c0015da1:	83 ec 08             	sub    esp,0x8
c0015da4:	89 e2                	mov    edx,esp
c0015da6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015da9:	89 02                	mov    DWORD PTR [edx],eax
c0015dab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015dae:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015db2:	ff d1                	call   ecx
c0015db4:	83 c4 10             	add    esp,0x10
c0015db7:	83 ec 0c             	sub    esp,0xc
c0015dba:	68 9b ba 02 c0       	push   0xc002ba9b
c0015dbf:	e8 05 cb ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0015dc4:	83 c4 10             	add    esp,0x10
c0015dc7:	fb                   	sti    
c0015dc8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015dcf:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015dd3:	0f 84 a1 00 00 00    	je     c0015e7a <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0015dd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ddc:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015de2:	84 c0                	test   al,al
c0015de4:	75 28                	jne    c0015e0e <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0015de6:	fa                   	cli    
c0015de7:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c0015dec:	40                   	inc    eax
c0015ded:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c0015df2:	e8 bb 82 00 00       	call   c001e0b2 <schedule()>
c0015df7:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c0015dfc:	48                   	dec    eax
c0015dfd:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c0015e02:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c0015e07:	85 c0                	test   eax,eax
c0015e09:	75 ce                	jne    c0015dd9 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015e0b:	fb                   	sti    
c0015e0c:	eb cb                	jmp    c0015dd9 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015e0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e11:	8d 50 01             	lea    edx,[eax+0x1]
c0015e14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015e17:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e1a:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015e20:	88 10                	mov    BYTE PTR [eax],dl
c0015e22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e25:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015e2b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e31:	05 98 01 00 00       	add    eax,0x198
c0015e36:	83 ec 0c             	sub    esp,0xc
c0015e39:	50                   	push   eax
c0015e3a:	e8 2d a9 fe ff       	call   c000076c <strlen>
c0015e3f:	83 c4 10             	add    esp,0x10
c0015e42:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e45:	81 c2 98 01 00 00    	add    edx,0x198
c0015e4b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015e4e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e51:	81 c2 98 01 00 00    	add    edx,0x198
c0015e57:	83 ec 04             	sub    esp,0x4
c0015e5a:	50                   	push   eax
c0015e5b:	51                   	push   ecx
c0015e5c:	52                   	push   edx
c0015e5d:	e8 26 a8 fe ff       	call   c0000688 <memmove>
c0015e62:	83 c4 10             	add    esp,0x10
c0015e65:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015e68:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015e6b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015e6f:	0f 85 5a ff ff ff    	jne    c0015dcf <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0015e75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e78:	eb 03                	jmp    c0015e7d <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0015e7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e7d:	c9                   	leave  
c0015e7e:	c3                   	ret    
c0015e7f:	90                   	nop

c0015e80 <Keyboard::Keyboard(char const*)>:
c0015e80:	83 ec 0c             	sub    esp,0xc
c0015e83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e87:	83 ec 08             	sub    esp,0x8
c0015e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e8e:	50                   	push   eax
c0015e8f:	e8 72 e0 ff ff       	call   c0013f06 <Device::Device(char const*)>
c0015e94:	83 c4 10             	add    esp,0x10
c0015e97:	ba bc ba 02 c0       	mov    edx,0xc002babc
c0015e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ea0:	89 10                	mov    DWORD PTR [eax],edx
c0015ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ea6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015eb0:	c6 05 64 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f464,0x1
c0015eb7:	90                   	nop
c0015eb8:	83 c4 0c             	add    esp,0xc
c0015ebb:	c3                   	ret    

c0015ebc <Keyboard::~Keyboard()>:
c0015ebc:	83 ec 0c             	sub    esp,0xc
c0015ebf:	ba bc ba 02 c0       	mov    edx,0xc002babc
c0015ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ec8:	89 10                	mov    DWORD PTR [eax],edx
c0015eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ece:	83 ec 0c             	sub    esp,0xc
c0015ed1:	50                   	push   eax
c0015ed2:	e8 f9 dc ff ff       	call   c0013bd0 <Device::~Device()>
c0015ed7:	83 c4 10             	add    esp,0x10
c0015eda:	90                   	nop
c0015edb:	83 c4 0c             	add    esp,0xc
c0015ede:	c3                   	ret    
c0015edf:	90                   	nop

c0015ee0 <Keyboard::~Keyboard()>:
c0015ee0:	83 ec 0c             	sub    esp,0xc
c0015ee3:	83 ec 0c             	sub    esp,0xc
c0015ee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015eea:	e8 cd ff ff ff       	call   c0015ebc <Keyboard::~Keyboard()>
c0015eef:	83 c4 10             	add    esp,0x10
c0015ef2:	83 ec 08             	sub    esp,0x8
c0015ef5:	68 5c 01 00 00       	push   0x15c
c0015efa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015efe:	e8 e6 c8 ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0015f03:	83 c4 10             	add    esp,0x10
c0015f06:	83 c4 0c             	add    esp,0xc
c0015f09:	c3                   	ret    

c0015f0a <LogicalDisk::close(int, int, void*)>:
c0015f0a:	83 c8 ff             	or     eax,0xffffffff
c0015f0d:	c3                   	ret    

c0015f0e <LogicalDisk::~LogicalDisk()>:
c0015f0e:	83 ec 0c             	sub    esp,0xc
c0015f11:	ba 6c bb 02 c0       	mov    edx,0xc002bb6c
c0015f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f1a:	89 10                	mov    DWORD PTR [eax],edx
c0015f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f20:	83 ec 0c             	sub    esp,0xc
c0015f23:	50                   	push   eax
c0015f24:	e8 a7 dc ff ff       	call   c0013bd0 <Device::~Device()>
c0015f29:	83 c4 10             	add    esp,0x10
c0015f2c:	90                   	nop
c0015f2d:	83 c4 0c             	add    esp,0xc
c0015f30:	c3                   	ret    
c0015f31:	90                   	nop

c0015f32 <LogicalDisk::~LogicalDisk()>:
c0015f32:	83 ec 0c             	sub    esp,0xc
c0015f35:	83 ec 0c             	sub    esp,0xc
c0015f38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f3c:	e8 cd ff ff ff       	call   c0015f0e <LogicalDisk::~LogicalDisk()>
c0015f41:	83 c4 10             	add    esp,0x10
c0015f44:	83 ec 08             	sub    esp,0x8
c0015f47:	68 74 01 00 00       	push   0x174
c0015f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f50:	e8 94 c8 ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0015f55:	83 c4 10             	add    esp,0x10
c0015f58:	83 c4 0c             	add    esp,0xc
c0015f5b:	c3                   	ret    

c0015f5c <LogicalDisk::open(int, int, void*)>:
c0015f5c:	83 ec 18             	sub    esp,0x18
c0015f5f:	68 e8 ba 02 c0       	push   0xc002bae8
c0015f64:	e8 96 43 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0015f69:	83 c8 ff             	or     eax,0xffffffff
c0015f6c:	83 c4 1c             	add    esp,0x1c
c0015f6f:	c3                   	ret    

c0015f70 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015f70:	53                   	push   ebx
c0015f71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015f75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f7d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015f83:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015f89:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015f8f:	77 10                	ja     c0015fa1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015f91:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015f97:	89 d3                	mov    ebx,edx
c0015f99:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015f9f:	72 05                	jb     c0015fa6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015fa1:	83 c8 ff             	or     eax,0xffffffff
c0015fa4:	89 c2                	mov    edx,eax
c0015fa6:	5b                   	pop    ebx
c0015fa7:	c3                   	ret    

c0015fa8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015fa8:	56                   	push   esi
c0015fa9:	83 c8 ff             	or     eax,0xffffffff
c0015fac:	53                   	push   ebx
c0015fad:	89 c2                	mov    edx,eax
c0015faf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015fb3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015fb7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015fbb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015fc1:	77 27                	ja     c0015fea <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015fc3:	89 d8                	mov    eax,ebx
c0015fc5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015fcb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015fd1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fd6:	89 c2                	mov    edx,eax
c0015fd8:	73 10                	jae    c0015fea <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015fda:	89 c8                	mov    eax,ecx
c0015fdc:	89 da                	mov    edx,ebx
c0015fde:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015fe4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015fea:	5b                   	pop    ebx
c0015feb:	5e                   	pop    esi
c0015fec:	c3                   	ret    
c0015fed:	90                   	nop

c0015fee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015fee:	83 ec 1c             	sub    esp,0x1c
c0015ff1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015ff5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015ff9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ffd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016001:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016005:	89 04 24             	mov    DWORD PTR [esp],eax
c0016008:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001600c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016014:	83 ec 08             	sub    esp,0x8
c0016017:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001601b:	50                   	push   eax
c001601c:	e8 e5 de ff ff       	call   c0013f06 <Device::Device(char const*)>
c0016021:	83 c4 10             	add    esp,0x10
c0016024:	ba 6c bb 02 c0       	mov    edx,0xc002bb6c
c0016029:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001602d:	89 10                	mov    DWORD PTR [eax],edx
c001602f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016033:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001603a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001603e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016049:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016053:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016057:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001605b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001605f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016065:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001606b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001606f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016072:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016076:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001607c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016086:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001608a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016094:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001609e:	90                   	nop
c001609f:	83 c4 1c             	add    esp,0x1c
c00160a2:	c3                   	ret    
c00160a3:	90                   	nop

c00160a4 <LogicalDisk::assignDriveLetter()>:
c00160a4:	55                   	push   ebp
c00160a5:	57                   	push   edi
c00160a6:	56                   	push   esi
c00160a7:	53                   	push   ebx
c00160a8:	83 ec 14             	sub    esp,0x14
c00160ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160af:	8b 3d a0 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f8a0
c00160b5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00160bb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00160bf:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00160c5:	8b 3d a4 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f8a4
c00160cb:	3c 01                	cmp    al,0x1
c00160cd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00160d1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00160d5:	19 c0                	sbb    eax,eax
c00160d7:	83 e0 02             	and    eax,0x2
c00160da:	83 c0 41             	add    eax,0x41
c00160dd:	0f be e8             	movsx  ebp,al
c00160e0:	3c 43                	cmp    al,0x43
c00160e2:	75 10                	jne    c00160f4 <LogicalDisk::assignDriveLetter()+0x50>
c00160e4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00160eb:	75 5d                	jne    c001614a <LogicalDisk::assignDriveLetter()+0xa6>
c00160ed:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00160f2:	75 56                	jne    c001614a <LogicalDisk::assignDriveLetter()+0xa6>
c00160f4:	8d 75 bf             	lea    esi,[ebp-0x41]
c00160f7:	ba 01 00 00 00       	mov    edx,0x1
c00160fc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016100:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016104:	d3 e2                	shl    edx,cl
c0016106:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001610a:	89 d7                	mov    edi,edx
c001610c:	89 d6                	mov    esi,edx
c001610e:	c1 ff 1f             	sar    edi,0x1f
c0016111:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016115:	21 f9                	and    ecx,edi
c0016117:	09 d1                	or     ecx,edx
c0016119:	75 2f                	jne    c001614a <LogicalDisk::assignDriveLetter()+0xa6>
c001611b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001611f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016123:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016129:	09 f2                	or     edx,esi
c001612b:	89 15 a0 f8 02 c0    	mov    DWORD PTR ds:0xc002f8a0,edx
c0016131:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016135:	09 fa                	or     edx,edi
c0016137:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001613b:	89 15 a4 f8 02 c0    	mov    DWORD PTR ds:0xc002f8a4,edx
c0016141:	89 1c bd c0 f8 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0740],ebx
c0016148:	eb 08                	jmp    c0016152 <LogicalDisk::assignDriveLetter()+0xae>
c001614a:	45                   	inc    ebp
c001614b:	40                   	inc    eax
c001614c:	3c 5b                	cmp    al,0x5b
c001614e:	75 90                	jne    c00160e0 <LogicalDisk::assignDriveLetter()+0x3c>
c0016150:	31 c0                	xor    eax,eax
c0016152:	83 c4 14             	add    esp,0x14
c0016155:	5b                   	pop    ebx
c0016156:	5e                   	pop    esi
c0016157:	5f                   	pop    edi
c0016158:	5d                   	pop    ebp
c0016159:	c3                   	ret    

c001615a <LogicalDisk::mount()>:
c001615a:	56                   	push   esi
c001615b:	53                   	push   ebx
c001615c:	50                   	push   eax
c001615d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016161:	8b 1d 34 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f434
c0016167:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016171:	85 db                	test   ebx,ebx
c0016173:	74 50                	je     c00161c5 <LogicalDisk::mount()+0x6b>
c0016175:	50                   	push   eax
c0016176:	50                   	push   eax
c0016177:	ff 35 e8 27 03 c0    	push   DWORD PTR ds:0xc00327e8
c001617d:	68 0c bb 02 c0       	push   0xc002bb0c
c0016182:	e8 42 c7 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0016187:	83 c4 0c             	add    esp,0xc
c001618a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016191:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016193:	83 e8 41             	sub    eax,0x41
c0016196:	50                   	push   eax
c0016197:	56                   	push   esi
c0016198:	53                   	push   ebx
c0016199:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001619c:	83 c4 10             	add    esp,0x10
c001619f:	84 c0                	test   al,al
c00161a1:	74 08                	je     c00161ab <LogicalDisk::mount()+0x51>
c00161a3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00161a9:	eb 1c                	jmp    c00161c7 <LogicalDisk::mount()+0x6d>
c00161ab:	51                   	push   ecx
c00161ac:	51                   	push   ecx
c00161ad:	ff 35 e8 27 03 c0    	push   DWORD PTR ds:0xc00327e8
c00161b3:	68 27 bb 02 c0       	push   0xc002bb27
c00161b8:	e8 0c c7 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00161bd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00161c0:	83 c4 10             	add    esp,0x10
c00161c3:	eb ac                	jmp    c0016171 <LogicalDisk::mount()+0x17>
c00161c5:	31 c0                	xor    eax,eax
c00161c7:	5a                   	pop    edx
c00161c8:	5b                   	pop    ebx
c00161c9:	5e                   	pop    esi
c00161ca:	c3                   	ret    
c00161cb:	90                   	nop

c00161cc <LogicalDisk::unmount()>:
c00161cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00161d0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00161da:	c3                   	ret    
c00161db:	90                   	nop

c00161dc <LogicalDisk::eject()>:
c00161dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00161e0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00161e6:	8b 10                	mov    edx,DWORD PTR [eax]
c00161e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00161ec:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00161ef:	90                   	nop

c00161f0 <LogicalDisk::unassignDriveLetter()>:
c00161f0:	57                   	push   edi
c00161f1:	56                   	push   esi
c00161f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161f6:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00161fd:	84 c9                	test   cl,cl
c00161ff:	75 0f                	jne    c0016210 <LogicalDisk::unassignDriveLetter()+0x20>
c0016201:	c7 44 24 0c 42 bb 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bb42
c0016209:	5e                   	pop    esi
c001620a:	5f                   	pop    edi
c001620b:	e9 ef 40 00 00       	jmp    c001a2ff <Krnl::panic(char const*)>
c0016210:	83 e9 41             	sub    ecx,0x41
c0016213:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001621a:	b8 01 00 00 00       	mov    eax,0x1
c001621f:	c7 04 8d c0 f8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0740],0x0
c001622a:	d3 e0                	shl    eax,cl
c001622c:	89 c7                	mov    edi,eax
c001622e:	f7 d0                	not    eax
c0016230:	c1 ff 1f             	sar    edi,0x1f
c0016233:	21 05 a0 f8 02 c0    	and    DWORD PTR ds:0xc002f8a0,eax
c0016239:	89 fe                	mov    esi,edi
c001623b:	f7 d6                	not    esi
c001623d:	21 35 a4 f8 02 c0    	and    DWORD PTR ds:0xc002f8a4,esi
c0016243:	5e                   	pop    esi
c0016244:	5f                   	pop    edi
c0016245:	c3                   	ret    

c0016246 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016246:	57                   	push   edi
c0016247:	56                   	push   esi
c0016248:	53                   	push   ebx
c0016249:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001624d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016251:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016255:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016259:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001625f:	77 41                	ja     c00162a2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016261:	99                   	cdq    
c0016262:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016268:	01 c8                	add    eax,ecx
c001626a:	11 da                	adc    edx,ebx
c001626c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016272:	19 d7                	sbb    edi,edx
c0016274:	72 33                	jb     c00162a9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016276:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001627c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016282:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016286:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001628a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016290:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016296:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001629a:	5b                   	pop    ebx
c001629b:	5e                   	pop    esi
c001629c:	5f                   	pop    edi
c001629d:	e9 ec 0a 00 00       	jmp    c0016d8e <VCache::read(unsigned long long, int, void*)>
c00162a2:	b8 05 00 00 00       	mov    eax,0x5
c00162a7:	eb 05                	jmp    c00162ae <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00162a9:	b8 07 00 00 00       	mov    eax,0x7
c00162ae:	5b                   	pop    ebx
c00162af:	5e                   	pop    esi
c00162b0:	5f                   	pop    edi
c00162b1:	c3                   	ret    

c00162b2 <LogicalDisk::write(unsigned long long, int, void*)>:
c00162b2:	57                   	push   edi
c00162b3:	56                   	push   esi
c00162b4:	53                   	push   ebx
c00162b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00162b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162bd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00162c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162c5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00162cb:	77 41                	ja     c001630e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00162cd:	99                   	cdq    
c00162ce:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00162d4:	01 c8                	add    eax,ecx
c00162d6:	11 da                	adc    edx,ebx
c00162d8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00162de:	19 d7                	sbb    edi,edx
c00162e0:	72 33                	jb     c0016315 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00162e2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00162e8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00162ee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00162f2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00162f6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00162fc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016302:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016306:	5b                   	pop    ebx
c0016307:	5e                   	pop    esi
c0016308:	5f                   	pop    edi
c0016309:	e9 96 09 00 00       	jmp    c0016ca4 <VCache::write(unsigned long long, int, void*)>
c001630e:	b8 05 00 00 00       	mov    eax,0x5
c0016313:	eb 05                	jmp    c001631a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016315:	b8 07 00 00 00       	mov    eax,0x7
c001631a:	5b                   	pop    ebx
c001631b:	5e                   	pop    esi
c001631c:	5f                   	pop    edi
c001631d:	c3                   	ret    

c001631e <Mouse::Mouse(char const*)>:
c001631e:	83 ec 0c             	sub    esp,0xc
c0016321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016325:	83 ec 08             	sub    esp,0x8
c0016328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001632c:	50                   	push   eax
c001632d:	e8 d4 db ff ff       	call   c0013f06 <Device::Device(char const*)>
c0016332:	83 c4 10             	add    esp,0x10
c0016335:	ba 98 bb 02 c0       	mov    edx,0xc002bb98
c001633a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001633e:	89 10                	mov    DWORD PTR [eax],edx
c0016340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016344:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001634e:	90                   	nop
c001634f:	83 c4 0c             	add    esp,0xc
c0016352:	c3                   	ret    
c0016353:	90                   	nop

c0016354 <Mouse::~Mouse()>:
c0016354:	83 ec 0c             	sub    esp,0xc
c0016357:	ba 98 bb 02 c0       	mov    edx,0xc002bb98
c001635c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016360:	89 10                	mov    DWORD PTR [eax],edx
c0016362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016366:	83 ec 0c             	sub    esp,0xc
c0016369:	50                   	push   eax
c001636a:	e8 61 d8 ff ff       	call   c0013bd0 <Device::~Device()>
c001636f:	83 c4 10             	add    esp,0x10
c0016372:	90                   	nop
c0016373:	83 c4 0c             	add    esp,0xc
c0016376:	c3                   	ret    
c0016377:	90                   	nop

c0016378 <Mouse::~Mouse()>:
c0016378:	83 ec 0c             	sub    esp,0xc
c001637b:	83 ec 0c             	sub    esp,0xc
c001637e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016382:	e8 cd ff ff ff       	call   c0016354 <Mouse::~Mouse()>
c0016387:	83 c4 10             	add    esp,0x10
c001638a:	83 ec 08             	sub    esp,0x8
c001638d:	68 58 01 00 00       	push   0x158
c0016392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016396:	e8 4e c4 ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c001639b:	83 c4 10             	add    esp,0x10
c001639e:	83 c4 0c             	add    esp,0xc
c00163a1:	c3                   	ret    

c00163a2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00163a2:	55                   	push   ebp
c00163a3:	57                   	push   edi
c00163a4:	56                   	push   esi
c00163a5:	53                   	push   ebx
c00163a6:	81 ec 20 01 00 00    	sub    esp,0x120
c00163ac:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00163b3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00163ba:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00163c1:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00163c8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00163cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00163d4:	56                   	push   esi
c00163d5:	68 bc bb 02 c0       	push   0xc002bbbc
c00163da:	e8 ea c4 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00163df:	58                   	pop    eax
c00163e0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00163e7:	e8 16 dc ff ff       	call   c0014002 <Device::getName()>
c00163ec:	5a                   	pop    edx
c00163ed:	59                   	pop    ecx
c00163ee:	50                   	push   eax
c00163ef:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00163f3:	53                   	push   ebx
c00163f4:	e8 13 a4 fe ff       	call   c000080c <strcpy>
c00163f9:	5d                   	pop    ebp
c00163fa:	58                   	pop    eax
c00163fb:	68 ed bb 02 c0       	push   0xc002bbed
c0016400:	53                   	push   ebx
c0016401:	e8 46 a5 fe ff       	call   c000094c <strcat>
c0016406:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001640d:	e8 7a 94 ff ff       	call   c000f88c <malloc>
c0016412:	83 c4 0c             	add    esp,0xc
c0016415:	89 c5                	mov    ebp,eax
c0016417:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001641b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001641f:	57                   	push   edi
c0016420:	56                   	push   esi
c0016421:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016428:	53                   	push   ebx
c0016429:	50                   	push   eax
c001642a:	e8 bf fb ff ff       	call   c0015fee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001642f:	83 c4 14             	add    esp,0x14
c0016432:	55                   	push   ebp
c0016433:	e8 6c fc ff ff       	call   c00160a4 <LogicalDisk::assignDriveLetter()>
c0016438:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001643b:	0f be d8             	movsx  ebx,al
c001643e:	e8 17 fd ff ff       	call   c001615a <LogicalDisk::mount()>
c0016443:	58                   	pop    eax
c0016444:	5a                   	pop    edx
c0016445:	55                   	push   ebp
c0016446:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001644d:	e8 b0 d8 ff ff       	call   c0013d02 <Device::addChild(Device*)>
c0016452:	59                   	pop    ecx
c0016453:	5e                   	pop    esi
c0016454:	53                   	push   ebx
c0016455:	68 f8 bb 02 c0       	push   0xc002bbf8
c001645a:	e8 6a c4 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001645f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016465:	5b                   	pop    ebx
c0016466:	5e                   	pop    esi
c0016467:	5f                   	pop    edi
c0016468:	5d                   	pop    ebp
c0016469:	c3                   	ret    

c001646a <createPartitionsForDisk(PhysicalDisk*)>:
c001646a:	55                   	push   ebp
c001646b:	57                   	push   edi
c001646c:	56                   	push   esi
c001646d:	53                   	push   ebx
c001646e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016474:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001647b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016481:	3d 00 02 00 00       	cmp    eax,0x200
c0016486:	74 27                	je     c00164af <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016488:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001648e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016494:	83 ec 10             	sub    esp,0x10
c0016497:	0f a4 f7 0a          	shld   edi,esi,0xa
c001649b:	99                   	cdq    
c001649c:	c1 e6 0a             	shl    esi,0xa
c001649f:	52                   	push   edx
c00164a0:	89 fd                	mov    ebp,edi
c00164a2:	50                   	push   eax
c00164a3:	55                   	push   ebp
c00164a4:	56                   	push   esi
c00164a5:	e8 4a 0d 01 00       	call   c00271f4 <__udivdi3>
c00164aa:	e9 b1 00 00 00       	jmp    c0016560 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00164af:	83 ec 0c             	sub    esp,0xc
c00164b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164b4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00164b8:	56                   	push   esi
c00164b9:	6a 01                	push   0x1
c00164bb:	6a 00                	push   0x0
c00164bd:	6a 00                	push   0x0
c00164bf:	53                   	push   ebx
c00164c0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00164c3:	83 c4 20             	add    esp,0x20
c00164c6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00164ce:	75 0a                	jne    c00164da <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00164d0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00164d8:	74 2c                	je     c0016506 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00164da:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00164e0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00164e6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00164ec:	83 ec 10             	sub    esp,0x10
c00164ef:	0f a4 c2 0a          	shld   edx,eax,0xa
c00164f3:	89 f7                	mov    edi,esi
c00164f5:	c1 e0 0a             	shl    eax,0xa
c00164f8:	c1 ff 1f             	sar    edi,0x1f
c00164fb:	57                   	push   edi
c00164fc:	56                   	push   esi
c00164fd:	52                   	push   edx
c00164fe:	50                   	push   eax
c00164ff:	e8 f0 0c 01 00       	call   c00271f4 <__udivdi3>
c0016504:	eb 5a                	jmp    c0016560 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016506:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001650d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016514:	83 e1 7f             	and    ecx,0x7f
c0016517:	83 e0 7f             	and    eax,0x7f
c001651a:	01 c1                	add    ecx,eax
c001651c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016523:	83 e0 7f             	and    eax,0x7f
c0016526:	01 c1                	add    ecx,eax
c0016528:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001652f:	83 e0 7f             	and    eax,0x7f
c0016532:	00 c1                	add    cl,al
c0016534:	74 41                	je     c0016577 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016536:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001653c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016542:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016548:	83 ec 10             	sub    esp,0x10
c001654b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001654f:	89 f7                	mov    edi,esi
c0016551:	c1 e0 0a             	shl    eax,0xa
c0016554:	c1 ff 1f             	sar    edi,0x1f
c0016557:	57                   	push   edi
c0016558:	56                   	push   esi
c0016559:	52                   	push   edx
c001655a:	50                   	push   eax
c001655b:	e8 94 0c 01 00       	call   c00271f4 <__udivdi3>
c0016560:	83 c4 14             	add    esp,0x14
c0016563:	52                   	push   edx
c0016564:	50                   	push   eax
c0016565:	6a 00                	push   0x0
c0016567:	6a 00                	push   0x0
c0016569:	53                   	push   ebx
c001656a:	e8 33 fe ff ff       	call   c00163a2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001656f:	83 c4 20             	add    esp,0x20
c0016572:	e9 79 01 00 00       	jmp    c00166f0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016577:	89 f0                	mov    eax,esi
c0016579:	31 f6                	xor    esi,esi
c001657b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016582:	75 02                	jne    c0016586 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016584:	89 f1                	mov    ecx,esi
c0016586:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001658d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016594:	c1 e2 08             	shl    edx,0x8
c0016597:	c1 e7 10             	shl    edi,0x10
c001659a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00165a2:	09 fa                	or     edx,edi
c00165a4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00165ac:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00165b3:	83 c0 10             	add    eax,0x10
c00165b6:	09 fa                	or     edx,edi
c00165b8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00165bf:	c1 e7 18             	shl    edi,0x18
c00165c2:	09 fa                	or     edx,edi
c00165c4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00165cb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00165cf:	c1 e7 10             	shl    edi,0x10
c00165d2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00165d9:	c1 e2 08             	shl    edx,0x8
c00165dc:	09 fa                	or     edx,edi
c00165de:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00165e5:	09 fa                	or     edx,edi
c00165e7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00165ee:	c1 e7 18             	shl    edi,0x18
c00165f1:	09 fa                	or     edx,edi
c00165f3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00165f7:	46                   	inc    esi
c00165f8:	83 fe 04             	cmp    esi,0x4
c00165fb:	0f 85 7a ff ff ff    	jne    c001657b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016605:	83 f0 01             	xor    eax,0x1
c0016608:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001660c:	75 57                	jne    c0016665 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001660e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016612:	83 f0 01             	xor    eax,0x1
c0016615:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016619:	75 4a                	jne    c0016665 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001661b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001661f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016627:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001662f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016635:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001663b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016641:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016645:	89 f7                	mov    edi,esi
c0016647:	c1 e0 0a             	shl    eax,0xa
c001664a:	c1 ff 1f             	sar    edi,0x1f
c001664d:	57                   	push   edi
c001664e:	56                   	push   esi
c001664f:	52                   	push   edx
c0016650:	50                   	push   eax
c0016651:	e8 9e 0b 01 00       	call   c00271f4 <__udivdi3>
c0016656:	83 c4 10             	add    esp,0x10
c0016659:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001665d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016661:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016665:	84 c9                	test   cl,cl
c0016667:	74 53                	je     c00166bc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016669:	0f b6 c9             	movzx  ecx,cl
c001666c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016670:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016674:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016678:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001667c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016680:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016684:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016688:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001668c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016690:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016694:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016698:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001669c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00166a0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00166a4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00166a8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00166ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00166b4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00166b8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00166bc:	31 ed                	xor    ebp,ebp
c00166be:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00166c2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00166c6:	89 f8                	mov    eax,edi
c00166c8:	09 f0                	or     eax,esi
c00166ca:	74 1e                	je     c00166ea <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00166cc:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00166d0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00166d4:	89 d1                	mov    ecx,edx
c00166d6:	09 c1                	or     ecx,eax
c00166d8:	74 10                	je     c00166ea <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00166da:	83 ec 0c             	sub    esp,0xc
c00166dd:	57                   	push   edi
c00166de:	56                   	push   esi
c00166df:	52                   	push   edx
c00166e0:	50                   	push   eax
c00166e1:	53                   	push   ebx
c00166e2:	e8 bb fc ff ff       	call   c00163a2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00166e7:	83 c4 20             	add    esp,0x20
c00166ea:	45                   	inc    ebp
c00166eb:	83 fd 04             	cmp    ebp,0x4
c00166ee:	75 ce                	jne    c00166be <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00166f0:	81 c4 5c 02 00 00    	add    esp,0x25c
c00166f6:	5b                   	pop    ebx
c00166f7:	5e                   	pop    esi
c00166f8:	5f                   	pop    edi
c00166f9:	5d                   	pop    ebp
c00166fa:	c3                   	ret    
c00166fb:	90                   	nop

c00166fc <Serial::Serial(char const*)>:
c00166fc:	83 ec 0c             	sub    esp,0xc
c00166ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016703:	83 ec 08             	sub    esp,0x8
c0016706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001670a:	50                   	push   eax
c001670b:	e8 f6 d7 ff ff       	call   c0013f06 <Device::Device(char const*)>
c0016710:	83 c4 10             	add    esp,0x10
c0016713:	ba 24 bc 02 c0       	mov    edx,0xc002bc24
c0016718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001671c:	89 10                	mov    DWORD PTR [eax],edx
c001671e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016722:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001672c:	90                   	nop
c001672d:	83 c4 0c             	add    esp,0xc
c0016730:	c3                   	ret    
c0016731:	90                   	nop

c0016732 <Serial::~Serial()>:
c0016732:	83 ec 0c             	sub    esp,0xc
c0016735:	ba 24 bc 02 c0       	mov    edx,0xc002bc24
c001673a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001673e:	89 10                	mov    DWORD PTR [eax],edx
c0016740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016744:	83 ec 0c             	sub    esp,0xc
c0016747:	50                   	push   eax
c0016748:	e8 83 d4 ff ff       	call   c0013bd0 <Device::~Device()>
c001674d:	83 c4 10             	add    esp,0x10
c0016750:	90                   	nop
c0016751:	83 c4 0c             	add    esp,0xc
c0016754:	c3                   	ret    
c0016755:	90                   	nop

c0016756 <Serial::~Serial()>:
c0016756:	83 ec 0c             	sub    esp,0xc
c0016759:	83 ec 0c             	sub    esp,0xc
c001675c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016760:	e8 cd ff ff ff       	call   c0016732 <Serial::~Serial()>
c0016765:	83 c4 10             	add    esp,0x10
c0016768:	83 ec 08             	sub    esp,0x8
c001676b:	68 58 01 00 00       	push   0x158
c0016770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016774:	e8 70 c0 ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0016779:	83 c4 10             	add    esp,0x10
c001677c:	83 c4 0c             	add    esp,0xc
c001677f:	c3                   	ret    

c0016780 <Timer::Timer(char const*)>:
c0016780:	83 ec 0c             	sub    esp,0xc
c0016783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016787:	83 ec 08             	sub    esp,0x8
c001678a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001678e:	50                   	push   eax
c001678f:	e8 72 d7 ff ff       	call   c0013f06 <Device::Device(char const*)>
c0016794:	83 c4 10             	add    esp,0x10
c0016797:	ba 68 bc 02 c0       	mov    edx,0xc002bc68
c001679c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a0:	89 10                	mov    DWORD PTR [eax],edx
c00167a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00167b0:	90                   	nop
c00167b1:	83 c4 0c             	add    esp,0xc
c00167b4:	c3                   	ret    
c00167b5:	90                   	nop

c00167b6 <Timer::~Timer()>:
c00167b6:	83 ec 0c             	sub    esp,0xc
c00167b9:	ba 68 bc 02 c0       	mov    edx,0xc002bc68
c00167be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c2:	89 10                	mov    DWORD PTR [eax],edx
c00167c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c8:	83 ec 0c             	sub    esp,0xc
c00167cb:	50                   	push   eax
c00167cc:	e8 ff d3 ff ff       	call   c0013bd0 <Device::~Device()>
c00167d1:	83 c4 10             	add    esp,0x10
c00167d4:	90                   	nop
c00167d5:	83 c4 0c             	add    esp,0xc
c00167d8:	c3                   	ret    
c00167d9:	90                   	nop

c00167da <Timer::~Timer()>:
c00167da:	83 ec 0c             	sub    esp,0xc
c00167dd:	83 ec 0c             	sub    esp,0xc
c00167e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167e4:	e8 cd ff ff ff       	call   c00167b6 <Timer::~Timer()>
c00167e9:	83 c4 10             	add    esp,0x10
c00167ec:	83 ec 08             	sub    esp,0x8
c00167ef:	68 5c 01 00 00       	push   0x15c
c00167f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167f8:	e8 ec bf ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c00167fd:	83 c4 10             	add    esp,0x10
c0016800:	83 c4 0c             	add    esp,0xc
c0016803:	c3                   	ret    

c0016804 <Timer::read()>:
c0016804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016808:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001680e:	c3                   	ret    

c001680f <timerHandler(unsigned long long)>:
c001680f:	55                   	push   ebp
c0016810:	57                   	push   edi
c0016811:	56                   	push   esi
c0016812:	53                   	push   ebx
c0016813:	83 ec 0c             	sub    esp,0xc
c0016816:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001681a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001681e:	01 35 30 f9 02 c0    	add    DWORD PTR ds:0xc002f930,esi
c0016824:	11 3d 34 f9 02 c0    	adc    DWORD PTR ds:0xc002f934,edi
c001682a:	80 3d cd f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f2cd,0x0
c0016831:	0f 84 42 01 00 00    	je     c0016979 <timerHandler(unsigned long long)+0x16a>
c0016837:	fa                   	cli    
c0016838:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001683e:	83 ec 0c             	sub    esp,0xc
c0016841:	ff 05 e4 27 03 c0    	inc    DWORD PTR ds:0xc00327e4
c0016847:	68 f8 27 03 c0       	push   0xc00327f8
c001684c:	e8 29 2a 01 00       	call   c002927a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016851:	83 c4 10             	add    esp,0x10
c0016854:	84 c0                	test   al,al
c0016856:	0f 85 a2 00 00 00    	jne    c00168fe <timerHandler(unsigned long long)+0xef>
c001685c:	83 ec 0c             	sub    esp,0xc
c001685f:	68 f8 27 03 c0       	push   0xc00327f8
c0016864:	e8 2d 2a 01 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016869:	83 c4 10             	add    esp,0x10
c001686c:	89 c3                	mov    ebx,eax
c001686e:	83 ec 0c             	sub    esp,0xc
c0016871:	68 f8 27 03 c0       	push   0xc00327f8
c0016876:	e8 1b 2a 01 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001687b:	c7 04 24 f8 27 03 c0 	mov    DWORD PTR [esp],0xc00327f8
c0016882:	89 c5                	mov    ebp,eax
c0016884:	e8 15 2a 01 00       	call   c002929e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016889:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001688c:	83 c4 10             	add    esp,0x10
c001688f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016892:	39 15 30 f9 02 c0    	cmp    DWORD PTR ds:0xc002f930,edx
c0016898:	a1 34 f9 02 c0       	mov    eax,ds:0xc002f934
c001689d:	19 c8                	sbb    eax,ecx
c001689f:	72 21                	jb     c00168c2 <timerHandler(unsigned long long)+0xb3>
c00168a1:	83 ec 0c             	sub    esp,0xc
c00168a4:	55                   	push   ebp
c00168a5:	e8 cc 7c 00 00       	call   c001e576 <unblockTask(ThreadControlBlock*)>
c00168aa:	83 c4 10             	add    esp,0x10
c00168ad:	39 eb                	cmp    ebx,ebp
c00168af:	75 21                	jne    c00168d2 <timerHandler(unsigned long long)+0xc3>
c00168b1:	83 ec 0c             	sub    esp,0xc
c00168b4:	68 f8 27 03 c0       	push   0xc00327f8
c00168b9:	e8 d8 29 01 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168be:	89 c3                	mov    ebx,eax
c00168c0:	eb 0d                	jmp    c00168cf <timerHandler(unsigned long long)+0xc0>
c00168c2:	50                   	push   eax
c00168c3:	50                   	push   eax
c00168c4:	55                   	push   ebp
c00168c5:	68 f8 27 03 c0       	push   0xc00327f8
c00168ca:	e8 7d 2a 01 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00168cf:	83 c4 10             	add    esp,0x10
c00168d2:	83 ec 0c             	sub    esp,0xc
c00168d5:	68 f8 27 03 c0       	push   0xc00327f8
c00168da:	e8 9b 29 01 00       	call   c002927a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168df:	83 c4 10             	add    esp,0x10
c00168e2:	84 c0                	test   al,al
c00168e4:	75 18                	jne    c00168fe <timerHandler(unsigned long long)+0xef>
c00168e6:	83 ec 0c             	sub    esp,0xc
c00168e9:	68 f8 27 03 c0       	push   0xc00327f8
c00168ee:	e8 a3 29 01 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168f3:	83 c4 10             	add    esp,0x10
c00168f6:	39 d8                	cmp    eax,ebx
c00168f8:	0f 85 70 ff ff ff    	jne    c001686e <timerHandler(unsigned long long)+0x5f>
c00168fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016903:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016907:	74 3d                	je     c0016946 <timerHandler(unsigned long long)+0x137>
c0016909:	80 3d cc f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f2cc,0x0
c0016910:	74 34                	je     c0016946 <timerHandler(unsigned long long)+0x137>
c0016912:	fa                   	cli    
c0016913:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c0016919:	31 d2                	xor    edx,edx
c001691b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016920:	89 f9                	mov    ecx,edi
c0016922:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016925:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001692a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001692d:	39 c6                	cmp    esi,eax
c001692f:	19 d1                	sbb    ecx,edx
c0016931:	72 05                	jb     c0016938 <timerHandler(unsigned long long)+0x129>
c0016933:	e8 7a 77 00 00       	call   c001e0b2 <schedule()>
c0016938:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001693d:	48                   	dec    eax
c001693e:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c0016943:	75 01                	jne    c0016946 <timerHandler(unsigned long long)+0x137>
c0016945:	fb                   	sti    
c0016946:	a1 e4 27 03 c0       	mov    eax,ds:0xc00327e4
c001694b:	48                   	dec    eax
c001694c:	a3 e4 27 03 c0       	mov    ds:0xc00327e4,eax
c0016951:	75 18                	jne    c001696b <timerHandler(unsigned long long)+0x15c>
c0016953:	83 3d e0 27 03 c0 00 	cmp    DWORD PTR ds:0xc00327e0,0x0
c001695a:	74 0f                	je     c001696b <timerHandler(unsigned long long)+0x15c>
c001695c:	c7 05 e0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327e0,0x0
c0016966:	e8 47 77 00 00       	call   c001e0b2 <schedule()>
c001696b:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c0016970:	48                   	dec    eax
c0016971:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c0016976:	75 01                	jne    c0016979 <timerHandler(unsigned long long)+0x16a>
c0016978:	fb                   	sti    
c0016979:	83 c4 0c             	add    esp,0xc
c001697c:	5b                   	pop    ebx
c001697d:	5e                   	pop    esi
c001697e:	5f                   	pop    edi
c001697f:	5d                   	pop    ebp
c0016980:	c3                   	ret    

c0016981 <setupTimer(int)>:
c0016981:	57                   	push   edi
c0016982:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0016987:	56                   	push   esi
c0016988:	53                   	push   ebx
c0016989:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001698d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016993:	83 ec 0c             	sub    esp,0xc
c0016996:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001699c:	e8 61 d6 ff ff       	call   c0014002 <Device::getName()>
c00169a1:	83 c4 10             	add    esp,0x10
c00169a4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00169a7:	0f 85 8d 00 00 00    	jne    c0016a3a <setupTimer(int)+0xb9>
c00169ad:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00169b2:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00169b9:	74 7f                	je     c0016a3a <setupTimer(int)+0xb9>
c00169bb:	83 ec 0c             	sub    esp,0xc
c00169be:	68 5c 01 00 00       	push   0x15c
c00169c3:	e8 c4 8e ff ff       	call   c000f88c <malloc>
c00169c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00169cb:	89 c3                	mov    ebx,eax
c00169cd:	e8 f8 03 01 00       	call   c0026dca <PIT::PIT()>
c00169d2:	59                   	pop    ecx
c00169d3:	5f                   	pop    edi
c00169d4:	53                   	push   ebx
c00169d5:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c00169db:	e8 22 d3 ff ff       	call   c0013d02 <Device::addChild(Device*)>
c00169e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169e2:	6a 00                	push   0x0
c00169e4:	6a 00                	push   0x0
c00169e6:	56                   	push   esi
c00169e7:	53                   	push   ebx
c00169e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169eb:	83 c4 14             	add    esp,0x14
c00169ee:	68 60 01 00 00       	push   0x160
c00169f3:	e8 94 8e ff ff       	call   c000f88c <malloc>
c00169f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00169fb:	89 c7                	mov    edi,eax
c00169fd:	e8 78 02 01 00       	call   c0026c7a <APICTimer::APICTimer()>
c0016a02:	6a 00                	push   0x0
c0016a04:	6a 00                	push   0x0
c0016a06:	56                   	push   esi
c0016a07:	57                   	push   edi
c0016a08:	e8 6f 01 01 00       	call   c0026b7c <APICTimer::open(int, int, void*)>
c0016a0d:	83 c4 20             	add    esp,0x20
c0016a10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a12:	6a 00                	push   0x0
c0016a14:	6a 00                	push   0x0
c0016a16:	6a 00                	push   0x0
c0016a18:	53                   	push   ebx
c0016a19:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a1c:	58                   	pop    eax
c0016a1d:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0016a22:	5a                   	pop    edx
c0016a23:	57                   	push   edi
c0016a24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a2a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a30:	e8 cd d2 ff ff       	call   c0013d02 <Device::addChild(Device*)>
c0016a35:	83 c4 10             	add    esp,0x10
c0016a38:	eb 33                	jmp    c0016a6d <setupTimer(int)+0xec>
c0016a3a:	83 ec 0c             	sub    esp,0xc
c0016a3d:	68 5c 01 00 00       	push   0x15c
c0016a42:	e8 45 8e ff ff       	call   c000f88c <malloc>
c0016a47:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a4a:	89 c3                	mov    ebx,eax
c0016a4c:	e8 79 03 01 00       	call   c0026dca <PIT::PIT()>
c0016a51:	58                   	pop    eax
c0016a52:	5a                   	pop    edx
c0016a53:	53                   	push   ebx
c0016a54:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c0016a5a:	e8 a3 d2 ff ff       	call   c0013d02 <Device::addChild(Device*)>
c0016a5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a61:	6a 00                	push   0x0
c0016a63:	6a 00                	push   0x0
c0016a65:	56                   	push   esi
c0016a66:	53                   	push   ebx
c0016a67:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a6a:	83 c4 20             	add    esp,0x20
c0016a6d:	89 d8                	mov    eax,ebx
c0016a6f:	5b                   	pop    ebx
c0016a70:	5e                   	pop    esi
c0016a71:	5f                   	pop    edi
c0016a72:	c3                   	ret    
c0016a73:	90                   	nop

c0016a74 <VCache::VCache(PhysicalDisk*)>:
c0016a74:	53                   	push   ebx
c0016a75:	83 ec 18             	sub    esp,0x18
c0016a78:	ba 98 bc 02 c0       	mov    edx,0xc002bc98
c0016a7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a81:	89 10                	mov    DWORD PTR [eax],edx
c0016a83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a87:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016a8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a92:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016a99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a9d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016aa4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016aab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aaf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016ab6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016abd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ac1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016ac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016acc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016ad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ad4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016adb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016ae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ae6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016aea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aee:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016af2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016af6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016afa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016afe:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016b05:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016b0d:	83 ec 0c             	sub    esp,0xc
c0016b10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b14:	e8 73 8d ff ff       	call   c000f88c <malloc>
c0016b19:	83 c4 10             	add    esp,0x10
c0016b1c:	89 c3                	mov    ebx,eax
c0016b1e:	83 ec 0c             	sub    esp,0xc
c0016b21:	53                   	push   ebx
c0016b22:	e8 35 73 00 00       	call   c001de5c <Mutex::Mutex()>
c0016b27:	83 c4 10             	add    esp,0x10
c0016b2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b2e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b35:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016b39:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016b3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b40:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016b47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b4b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016b51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b55:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016b58:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b5c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016b62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b68:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016b6c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016b6f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016b72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b76:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016b7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b7e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b84:	05 00 01 00 00       	add    eax,0x100
c0016b89:	c1 e0 04             	shl    eax,0x4
c0016b8c:	83 ec 0c             	sub    esp,0xc
c0016b8f:	50                   	push   eax
c0016b90:	e8 f7 8c ff ff       	call   c000f88c <malloc>
c0016b95:	83 c4 10             	add    esp,0x10
c0016b98:	89 c2                	mov    edx,eax
c0016b9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b9e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016ba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016bac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016bb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bb8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bbe:	c1 e0 07             	shl    eax,0x7
c0016bc1:	83 ec 0c             	sub    esp,0xc
c0016bc4:	50                   	push   eax
c0016bc5:	e8 c2 8c ff ff       	call   c000f88c <malloc>
c0016bca:	83 c4 10             	add    esp,0x10
c0016bcd:	89 c2                	mov    edx,eax
c0016bcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bd3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016bd6:	90                   	nop
c0016bd7:	83 c4 18             	add    esp,0x18
c0016bda:	5b                   	pop    ebx
c0016bdb:	c3                   	ret    

c0016bdc <VCache::invalidateReadBuffer()>:
c0016bdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016be0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016be6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016bea:	c3                   	ret    
c0016beb:	90                   	nop

c0016bec <VCache::writeWriteBuffer()>:
c0016bec:	53                   	push   ebx
c0016bed:	83 ec 14             	sub    esp,0x14
c0016bf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016bf4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bf7:	8b 10                	mov    edx,DWORD PTR [eax]
c0016bf9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016bfc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016bff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016c02:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016c05:	50                   	push   eax
c0016c06:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016c09:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016c10:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016c17:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016c1b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016c22:	83 c4 28             	add    esp,0x28
c0016c25:	5b                   	pop    ebx
c0016c26:	c3                   	ret    
c0016c27:	90                   	nop

c0016c28 <VCache::~VCache()>:
c0016c28:	83 ec 0c             	sub    esp,0xc
c0016c2b:	ba 98 bc 02 c0       	mov    edx,0xc002bc98
c0016c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c34:	89 10                	mov    DWORD PTR [eax],edx
c0016c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c3a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016c3d:	84 c0                	test   al,al
c0016c3f:	74 0f                	je     c0016c50 <VCache::~VCache()+0x28>
c0016c41:	83 ec 0c             	sub    esp,0xc
c0016c44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c48:	e8 9f ff ff ff       	call   c0016bec <VCache::writeWriteBuffer()>
c0016c4d:	83 c4 10             	add    esp,0x10
c0016c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c54:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016c57:	83 ec 0c             	sub    esp,0xc
c0016c5a:	50                   	push   eax
c0016c5b:	e8 3c 8c ff ff       	call   c000f89c <free>
c0016c60:	83 c4 10             	add    esp,0x10
c0016c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c67:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016c6a:	83 ec 0c             	sub    esp,0xc
c0016c6d:	50                   	push   eax
c0016c6e:	e8 29 8c ff ff       	call   c000f89c <free>
c0016c73:	83 c4 10             	add    esp,0x10
c0016c76:	90                   	nop
c0016c77:	83 c4 0c             	add    esp,0xc
c0016c7a:	c3                   	ret    
c0016c7b:	90                   	nop

c0016c7c <VCache::~VCache()>:
c0016c7c:	83 ec 0c             	sub    esp,0xc
c0016c7f:	83 ec 0c             	sub    esp,0xc
c0016c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c86:	e8 9d ff ff ff       	call   c0016c28 <VCache::~VCache()>
c0016c8b:	83 c4 10             	add    esp,0x10
c0016c8e:	83 ec 08             	sub    esp,0x8
c0016c91:	6a 44                	push   0x44
c0016c93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c97:	e8 4d bb ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0016c9c:	83 c4 10             	add    esp,0x10
c0016c9f:	83 c4 0c             	add    esp,0xc
c0016ca2:	c3                   	ret    
c0016ca3:	90                   	nop

c0016ca4 <VCache::write(unsigned long long, int, void*)>:
c0016ca4:	55                   	push   ebp
c0016ca5:	57                   	push   edi
c0016ca6:	56                   	push   esi
c0016ca7:	53                   	push   ebx
c0016ca8:	83 ec 18             	sub    esp,0x18
c0016cab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016caf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016cb3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016cb7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016cba:	e8 2b 77 00 00       	call   c001e3ea <Semaphore::acquire()>
c0016cbf:	83 c4 10             	add    esp,0x10
c0016cc2:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016cc6:	74 0c                	je     c0016cd4 <VCache::write(unsigned long long, int, void*)+0x30>
c0016cc8:	83 ec 0c             	sub    esp,0xc
c0016ccb:	53                   	push   ebx
c0016ccc:	e8 0b ff ff ff       	call   c0016bdc <VCache::invalidateReadBuffer()>
c0016cd1:	83 c4 10             	add    esp,0x10
c0016cd4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016cd8:	74 5c                	je     c0016d36 <VCache::write(unsigned long long, int, void*)+0x92>
c0016cda:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016cdd:	89 e8                	mov    eax,ebp
c0016cdf:	99                   	cdq    
c0016ce0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016ce3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016ce6:	89 c1                	mov    ecx,eax
c0016ce8:	89 d0                	mov    eax,edx
c0016cea:	31 f1                	xor    ecx,esi
c0016cec:	31 f8                	xor    eax,edi
c0016cee:	09 c1                	or     ecx,eax
c0016cf0:	75 38                	jne    c0016d2a <VCache::write(unsigned long long, int, void*)+0x86>
c0016cf2:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016cf7:	75 31                	jne    c0016d2a <VCache::write(unsigned long long, int, void*)+0x86>
c0016cf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cfc:	89 ef                	mov    edi,ebp
c0016cfe:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d04:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d08:	0f af f9             	imul   edi,ecx
c0016d0b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016d0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d10:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d13:	40                   	inc    eax
c0016d14:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016d17:	83 c0 80             	add    eax,0xffffff80
c0016d1a:	75 5c                	jne    c0016d78 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d1c:	83 ec 0c             	sub    esp,0xc
c0016d1f:	53                   	push   ebx
c0016d20:	e8 c7 fe ff ff       	call   c0016bec <VCache::writeWriteBuffer()>
c0016d25:	83 c4 10             	add    esp,0x10
c0016d28:	eb 4e                	jmp    c0016d78 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d2a:	83 ec 0c             	sub    esp,0xc
c0016d2d:	53                   	push   ebx
c0016d2e:	e8 b9 fe ff ff       	call   c0016bec <VCache::writeWriteBuffer()>
c0016d33:	83 c4 10             	add    esp,0x10
c0016d36:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d39:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016d3e:	7f 22                	jg     c0016d62 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016d40:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016d43:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016d46:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016d4a:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016d4e:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016d51:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016d54:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d5a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d60:	eb 16                	jmp    c0016d78 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d62:	83 ec 0c             	sub    esp,0xc
c0016d65:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d6f:	57                   	push   edi
c0016d70:	56                   	push   esi
c0016d71:	50                   	push   eax
c0016d72:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016d75:	83 c4 20             	add    esp,0x20
c0016d78:	83 ec 0c             	sub    esp,0xc
c0016d7b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d7e:	e8 a1 7d 00 00       	call   c001eb24 <Semaphore::release()>
c0016d83:	83 c4 1c             	add    esp,0x1c
c0016d86:	31 c0                	xor    eax,eax
c0016d88:	5b                   	pop    ebx
c0016d89:	5e                   	pop    esi
c0016d8a:	5f                   	pop    edi
c0016d8b:	5d                   	pop    ebp
c0016d8c:	c3                   	ret    
c0016d8d:	90                   	nop

c0016d8e <VCache::read(unsigned long long, int, void*)>:
c0016d8e:	55                   	push   ebp
c0016d8f:	57                   	push   edi
c0016d90:	56                   	push   esi
c0016d91:	53                   	push   ebx
c0016d92:	83 ec 28             	sub    esp,0x28
c0016d95:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d99:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d9d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016da1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016da5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016da8:	e8 3d 76 00 00       	call   c001e3ea <Semaphore::acquire()>
c0016dad:	83 c4 10             	add    esp,0x10
c0016db0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016db4:	74 0c                	je     c0016dc2 <VCache::read(unsigned long long, int, void*)+0x34>
c0016db6:	83 ec 0c             	sub    esp,0xc
c0016db9:	53                   	push   ebx
c0016dba:	e8 2d fe ff ff       	call   c0016bec <VCache::writeWriteBuffer()>
c0016dbf:	83 c4 10             	add    esp,0x10
c0016dc2:	83 fd 01             	cmp    ebp,0x1
c0016dc5:	0f 85 80 00 00 00    	jne    c0016e4b <VCache::read(unsigned long long, int, void*)+0xbd>
c0016dcb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016dd2:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016dd9:	75 70                	jne    c0016e4b <VCache::read(unsigned long long, int, void*)+0xbd>
c0016ddb:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016dde:	89 e9                	mov    ecx,ebp
c0016de0:	f7 d9                	neg    ecx
c0016de2:	89 c8                	mov    eax,ecx
c0016de4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016de8:	c1 f8 1f             	sar    eax,0x1f
c0016deb:	21 f1                	and    ecx,esi
c0016ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016df1:	89 c8                	mov    eax,ecx
c0016df3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016df7:	21 f9                	and    ecx,edi
c0016df9:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016dfd:	89 ca                	mov    edx,ecx
c0016dff:	74 0a                	je     c0016e0b <VCache::read(unsigned long long, int, void*)+0x7d>
c0016e01:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016e04:	75 05                	jne    c0016e0b <VCache::read(unsigned long long, int, void*)+0x7d>
c0016e06:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016e09:	74 23                	je     c0016e2e <VCache::read(unsigned long long, int, void*)+0xa0>
c0016e0b:	83 ec 0c             	sub    esp,0xc
c0016e0e:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016e12:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e16:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016e19:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016e1c:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016e1e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016e21:	55                   	push   ebp
c0016e22:	52                   	push   edx
c0016e23:	50                   	push   eax
c0016e24:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e28:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016e2b:	83 c4 20             	add    esp,0x20
c0016e2e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016e35:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e3b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016e3e:	48                   	dec    eax
c0016e3f:	21 c6                	and    esi,eax
c0016e41:	0f af f1             	imul   esi,ecx
c0016e44:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016e47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e49:	eb 1d                	jmp    c0016e68 <VCache::read(unsigned long long, int, void*)+0xda>
c0016e4b:	83 ec 0c             	sub    esp,0xc
c0016e4e:	53                   	push   ebx
c0016e4f:	e8 88 fd ff ff       	call   c0016bdc <VCache::invalidateReadBuffer()>
c0016e54:	5a                   	pop    edx
c0016e55:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e58:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e5a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016e5e:	55                   	push   ebp
c0016e5f:	57                   	push   edi
c0016e60:	56                   	push   esi
c0016e61:	50                   	push   eax
c0016e62:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016e65:	83 c4 20             	add    esp,0x20
c0016e68:	83 ec 0c             	sub    esp,0xc
c0016e6b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e6e:	e8 b1 7c 00 00       	call   c001eb24 <Semaphore::release()>
c0016e73:	83 c4 2c             	add    esp,0x2c
c0016e76:	31 c0                	xor    eax,eax
c0016e78:	5b                   	pop    ebx
c0016e79:	5e                   	pop    esi
c0016e7a:	5f                   	pop    edi
c0016e7b:	5d                   	pop    ebp
c0016e7c:	c3                   	ret    
c0016e7d:	90                   	nop

c0016e7e <Video::putrect(int, int, int, int, unsigned int)>:
c0016e7e:	55                   	push   ebp
c0016e7f:	57                   	push   edi
c0016e80:	56                   	push   esi
c0016e81:	53                   	push   ebx
c0016e82:	83 ec 1c             	sub    esp,0x1c
c0016e85:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016e89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e8d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016e91:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016e95:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e9d:	01 df                	add    edi,ebx
c0016e9f:	39 fb                	cmp    ebx,edi
c0016ea1:	7d 1f                	jge    c0016ec2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016ea3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016ea7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016eab:	7d 12                	jge    c0016ebf <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016ead:	8b 16                	mov    edx,DWORD PTR [esi]
c0016eaf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016eb3:	53                   	push   ebx
c0016eb4:	55                   	push   ebp
c0016eb5:	45                   	inc    ebp
c0016eb6:	56                   	push   esi
c0016eb7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016eba:	83 c4 10             	add    esp,0x10
c0016ebd:	eb e8                	jmp    c0016ea7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016ebf:	43                   	inc    ebx
c0016ec0:	eb dd                	jmp    c0016e9f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016ec2:	83 c4 1c             	add    esp,0x1c
c0016ec5:	5b                   	pop    ebx
c0016ec6:	5e                   	pop    esi
c0016ec7:	5f                   	pop    edi
c0016ec8:	5d                   	pop    ebp
c0016ec9:	c3                   	ret    

c0016eca <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016eca:	55                   	push   ebp
c0016ecb:	57                   	push   edi
c0016ecc:	31 ff                	xor    edi,edi
c0016ece:	56                   	push   esi
c0016ecf:	53                   	push   ebx
c0016ed0:	83 ec 1c             	sub    esp,0x1c
c0016ed3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016ed7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016edb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016ee2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016ee7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016eeb:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016eef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ef3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016ef6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016efa:	01 f9                	add    ecx,edi
c0016efc:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016f00:	7d 2f                	jge    c0016f31 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016f02:	31 f6                	xor    esi,esi
c0016f04:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016f08:	01 f2                	add    edx,esi
c0016f0a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016f0e:	7d 1a                	jge    c0016f2a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016f10:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f13:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016f16:	46                   	inc    esi
c0016f17:	51                   	push   ecx
c0016f18:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016f1c:	52                   	push   edx
c0016f1d:	55                   	push   ebp
c0016f1e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f21:	83 c4 10             	add    esp,0x10
c0016f24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f28:	eb da                	jmp    c0016f04 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016f2a:	47                   	inc    edi
c0016f2b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016f2f:	eb c5                	jmp    c0016ef6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016f31:	83 c4 1c             	add    esp,0x1c
c0016f34:	5b                   	pop    ebx
c0016f35:	5e                   	pop    esi
c0016f36:	5f                   	pop    edi
c0016f37:	5d                   	pop    ebp
c0016f38:	c3                   	ret    
c0016f39:	90                   	nop

c0016f3a <Video::blit(unsigned int*, int, int, int, int)>:
c0016f3a:	55                   	push   ebp
c0016f3b:	57                   	push   edi
c0016f3c:	56                   	push   esi
c0016f3d:	53                   	push   ebx
c0016f3e:	83 ec 1c             	sub    esp,0x1c
c0016f41:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f45:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f49:	85 c0                	test   eax,eax
c0016f4b:	79 02                	jns    c0016f4f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016f4d:	31 c0                	xor    eax,eax
c0016f4f:	c1 e0 02             	shl    eax,0x2
c0016f52:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016f56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f5e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016f62:	39 d8                	cmp    eax,ebx
c0016f64:	7e 49                	jle    c0016faf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f66:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016f6c:	7c 41                	jl     c0016faf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f6e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016f72:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f76:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f7a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016f7e:	39 f9                	cmp    ecx,edi
c0016f80:	7e 22                	jle    c0016fa4 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016f82:	83 c5 04             	add    ebp,0x4
c0016f85:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016f8b:	7c 14                	jl     c0016fa1 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016f8d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016f8f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016f92:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f96:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f9a:	56                   	push   esi
c0016f9b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016f9e:	83 c4 10             	add    esp,0x10
c0016fa1:	47                   	inc    edi
c0016fa2:	eb d2                	jmp    c0016f76 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016fa4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fa8:	43                   	inc    ebx
c0016fa9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016fad:	eb ab                	jmp    c0016f5a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016faf:	83 c4 1c             	add    esp,0x1c
c0016fb2:	5b                   	pop    ebx
c0016fb3:	5e                   	pop    esi
c0016fb4:	5f                   	pop    edi
c0016fb5:	5d                   	pop    ebp
c0016fb6:	c3                   	ret    
c0016fb7:	90                   	nop

c0016fb8 <Video::clearScreen(unsigned int)>:
c0016fb8:	57                   	push   edi
c0016fb9:	56                   	push   esi
c0016fba:	53                   	push   ebx
c0016fbb:	31 db                	xor    ebx,ebx
c0016fbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fc1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016fc7:	7e 1f                	jle    c0016fe8 <Video::clearScreen(unsigned int)+0x30>
c0016fc9:	31 ff                	xor    edi,edi
c0016fcb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016fd1:	7e 12                	jle    c0016fe5 <Video::clearScreen(unsigned int)+0x2d>
c0016fd3:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016fd9:	53                   	push   ebx
c0016fda:	57                   	push   edi
c0016fdb:	47                   	inc    edi
c0016fdc:	56                   	push   esi
c0016fdd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016fe0:	83 c4 10             	add    esp,0x10
c0016fe3:	eb e6                	jmp    c0016fcb <Video::clearScreen(unsigned int)+0x13>
c0016fe5:	43                   	inc    ebx
c0016fe6:	eb d9                	jmp    c0016fc1 <Video::clearScreen(unsigned int)+0x9>
c0016fe8:	5b                   	pop    ebx
c0016fe9:	5e                   	pop    esi
c0016fea:	5f                   	pop    edi
c0016feb:	c3                   	ret    

c0016fec <Video::putpixel(int, int, unsigned int)>:
c0016fec:	c7 44 24 04 a0 bc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bca0
c0016ff4:	e9 06 33 00 00       	jmp    c001a2ff <Krnl::panic(char const*)>
c0016ff9:	90                   	nop

c0016ffa <Video::Video(char const*)>:
c0016ffa:	83 ec 0c             	sub    esp,0xc
c0016ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017001:	83 ec 08             	sub    esp,0x8
c0017004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017008:	50                   	push   eax
c0017009:	e8 f8 ce ff ff       	call   c0013f06 <Device::Device(char const*)>
c001700e:	83 c4 10             	add    esp,0x10
c0017011:	ba 24 bd 02 c0       	mov    edx,0xc002bd24
c0017016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001701a:	89 10                	mov    DWORD PTR [eax],edx
c001701c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017020:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001702a:	90                   	nop
c001702b:	83 c4 0c             	add    esp,0xc
c001702e:	c3                   	ret    
c001702f:	90                   	nop

c0017030 <Video::~Video()>:
c0017030:	83 ec 0c             	sub    esp,0xc
c0017033:	ba 24 bd 02 c0       	mov    edx,0xc002bd24
c0017038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001703c:	89 10                	mov    DWORD PTR [eax],edx
c001703e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017042:	83 ec 0c             	sub    esp,0xc
c0017045:	50                   	push   eax
c0017046:	e8 85 cb ff ff       	call   c0013bd0 <Device::~Device()>
c001704b:	83 c4 10             	add    esp,0x10
c001704e:	90                   	nop
c001704f:	83 c4 0c             	add    esp,0xc
c0017052:	c3                   	ret    
c0017053:	90                   	nop

c0017054 <Video::~Video()>:
c0017054:	83 ec 0c             	sub    esp,0xc
c0017057:	83 ec 0c             	sub    esp,0xc
c001705a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001705e:	e8 cd ff ff ff       	call   c0017030 <Video::~Video()>
c0017063:	83 c4 10             	add    esp,0x10
c0017066:	83 ec 08             	sub    esp,0x8
c0017069:	68 64 01 00 00       	push   0x164
c001706e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017072:	e8 72 b7 ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0017077:	83 c4 10             	add    esp,0x10
c001707a:	83 c4 0c             	add    esp,0xc
c001707d:	c3                   	ret    

c001707e <Video::isMonochrome()>:
c001707e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017082:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017088:	c3                   	ret    
c0017089:	90                   	nop

c001708a <Video::getWidth()>:
c001708a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001708e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017094:	c3                   	ret    
c0017095:	90                   	nop

c0017096 <Video::getHeight()>:
c0017096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001709a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170a0:	c3                   	ret    
c00170a1:	90                   	nop

c00170a2 <Video::drawCursor(int, int, unsigned char*, int)>:
c00170a2:	55                   	push   ebp
c00170a3:	57                   	push   edi
c00170a4:	56                   	push   esi
c00170a5:	53                   	push   ebx
c00170a6:	83 ec 2c             	sub    esp,0x2c
c00170a9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170ad:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00170b1:	83 f8 01             	cmp    eax,0x1
c00170b4:	19 c9                	sbb    ecx,ecx
c00170b6:	31 db                	xor    ebx,ebx
c00170b8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00170bc:	89 cd                	mov    ebp,ecx
c00170be:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00170c6:	f7 d5                	not    ebp
c00170c8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00170ce:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00170d2:	01 d8                	add    eax,ebx
c00170d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170d8:	56                   	push   esi
c00170d9:	e8 b8 ff ff ff       	call   c0017096 <Video::getHeight()>
c00170de:	59                   	pop    ecx
c00170df:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00170e3:	7e 70                	jle    c0017155 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00170e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00170e9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00170ed:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00170f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170f4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00170f8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00170ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017103:	89 f8                	mov    eax,edi
c0017105:	83 c0 20             	add    eax,0x20
c0017108:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001710c:	56                   	push   esi
c001710d:	e8 78 ff ff ff       	call   c001708a <Video::getWidth()>
c0017112:	5a                   	pop    edx
c0017113:	39 c7                	cmp    edi,eax
c0017115:	7d 34                	jge    c001714b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017117:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001711c:	74 05                	je     c0017123 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001711e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017120:	55                   	push   ebp
c0017121:	eb 0d                	jmp    c0017130 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017123:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017128:	74 12                	je     c001713c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001712a:	8b 06                	mov    eax,DWORD PTR [esi]
c001712c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017130:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017134:	57                   	push   edi
c0017135:	56                   	push   esi
c0017136:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017139:	83 c4 10             	add    esp,0x10
c001713c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017140:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017144:	47                   	inc    edi
c0017145:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017149:	75 c1                	jne    c001710c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001714b:	43                   	inc    ebx
c001714c:	83 fb 20             	cmp    ebx,0x20
c001714f:	0f 85 79 ff ff ff    	jne    c00170ce <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017155:	83 c4 2c             	add    esp,0x2c
c0017158:	5b                   	pop    ebx
c0017159:	5e                   	pop    esi
c001715a:	5f                   	pop    edi
c001715b:	5d                   	pop    ebp
c001715c:	c3                   	ret    
c001715d:	90                   	nop

c001715e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001715e:	55                   	push   ebp
c001715f:	57                   	push   edi
c0017160:	56                   	push   esi
c0017161:	53                   	push   ebx
c0017162:	83 ec 28             	sub    esp,0x28
c0017165:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017169:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001716d:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017171:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017175:	c1 e7 08             	shl    edi,0x8
c0017178:	01 c7                	add    edi,eax
c001717a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001717e:	c1 e0 08             	shl    eax,0x8
c0017181:	01 d0                	add    eax,edx
c0017183:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017187:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001718b:	0f af c7             	imul   eax,edi
c001718e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017195:	50                   	push   eax
c0017196:	e8 f1 86 ff ff       	call   c000f88c <malloc>
c001719b:	83 c4 10             	add    esp,0x10
c001719e:	89 c5                	mov    ebp,eax
c00171a0:	85 c0                	test   eax,eax
c00171a2:	75 15                	jne    c00171b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00171a4:	83 ec 0c             	sub    esp,0xc
c00171a7:	68 c1 bc 02 c0       	push   0xc002bcc1
c00171ac:	e8 18 b7 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00171b1:	83 c4 10             	add    esp,0x10
c00171b4:	e9 1c 01 00 00       	jmp    c00172d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00171b9:	be 12 00 00 00       	mov    esi,0x12
c00171be:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00171c2:	74 11                	je     c00171d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00171c4:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00171c8:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00171cc:	c1 fe 03             	sar    esi,0x3
c00171cf:	0f af f0             	imul   esi,eax
c00171d2:	83 c6 12             	add    esi,0x12
c00171d5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00171d9:	74 04                	je     c00171df <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00171db:	85 ff                	test   edi,edi
c00171dd:	75 12                	jne    c00171f1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00171df:	83 ec 0c             	sub    esp,0xc
c00171e2:	68 d8 bc 02 c0       	push   0xc002bcd8
c00171e7:	e8 dd b6 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00171ec:	e9 ce 00 00 00       	jmp    c00172bf <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00171f1:	52                   	push   edx
c00171f2:	52                   	push   edx
c00171f3:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00171f7:	50                   	push   eax
c00171f8:	68 ed bc 02 c0       	push   0xc002bced
c00171fd:	e8 c7 b6 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0017202:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017206:	83 c4 10             	add    esp,0x10
c0017209:	80 fa 02             	cmp    dl,0x2
c001720c:	0f 85 98 00 00 00    	jne    c00172aa <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017212:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017217:	75 10                	jne    c0017229 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017219:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001721d:	75 0a                	jne    c0017229 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001721f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017222:	83 e8 18             	sub    eax,0x18
c0017225:	a8 f7                	test   al,0xf7
c0017227:	74 0a                	je     c0017233 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017229:	83 ec 0c             	sub    esp,0xc
c001722c:	68 fa bc 02 c0       	push   0xc002bcfa
c0017231:	eb 7f                	jmp    c00172b2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017233:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001723b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017243:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017247:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001724f:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017253:	75 0c                	jne    c0017261 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017255:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001725a:	c1 e0 18             	shl    eax,0x18
c001725d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017261:	41                   	inc    ecx
c0017262:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017267:	c1 e2 10             	shl    edx,0x10
c001726a:	89 d0                	mov    eax,edx
c001726c:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017271:	c1 e2 08             	shl    edx,0x8
c0017274:	09 c2                	or     edx,eax
c0017276:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001727a:	09 c2                	or     edx,eax
c001727c:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017280:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017284:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017288:	c1 f8 03             	sar    eax,0x3
c001728b:	01 c6                	add    esi,eax
c001728d:	89 c8                	mov    eax,ecx
c001728f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017293:	39 c7                	cmp    edi,eax
c0017295:	7f b0                	jg     c0017247 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017297:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001729b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001729f:	39 14 24             	cmp    DWORD PTR [esp],edx
c00172a2:	7e 22                	jle    c00172c6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00172a4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00172a8:	eb 99                	jmp    c0017243 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00172aa:	50                   	push   eax
c00172ab:	50                   	push   eax
c00172ac:	52                   	push   edx
c00172ad:	68 08 bd 02 c0       	push   0xc002bd08
c00172b2:	e8 12 b6 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00172b7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00172ba:	e8 dd 85 ff ff       	call   c000f89c <free>
c00172bf:	83 c4 10             	add    esp,0x10
c00172c2:	31 ed                	xor    ebp,ebp
c00172c4:	eb 0f                	jmp    c00172d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00172c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172ca:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00172cd:	89 38                	mov    DWORD PTR [eax],edi
c00172cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172d3:	89 08                	mov    DWORD PTR [eax],ecx
c00172d5:	83 c4 1c             	add    esp,0x1c
c00172d8:	89 e8                	mov    eax,ebp
c00172da:	5b                   	pop    ebx
c00172db:	5e                   	pop    esi
c00172dc:	5f                   	pop    edi
c00172dd:	5d                   	pop    ebp
c00172de:	c3                   	ret    
c00172df:	90                   	nop

c00172e0 <Video::putTGA(int, int, unsigned char*, int)>:
c00172e0:	55                   	push   ebp
c00172e1:	57                   	push   edi
c00172e2:	56                   	push   esi
c00172e3:	53                   	push   ebx
c00172e4:	83 ec 28             	sub    esp,0x28
c00172e7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00172eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172ef:	50                   	push   eax
c00172f0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172f4:	50                   	push   eax
c00172f5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00172f9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00172fd:	56                   	push   esi
c00172fe:	e8 5b fe ff ff       	call   c001715e <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017303:	83 c4 20             	add    esp,0x20
c0017306:	85 c0                	test   eax,eax
c0017308:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001730c:	74 35                	je     c0017343 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001730e:	89 c7                	mov    edi,eax
c0017310:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017314:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017318:	39 d8                	cmp    eax,ebx
c001731a:	7e 27                	jle    c0017343 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001731c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017320:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017324:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017328:	39 e8                	cmp    eax,ebp
c001732a:	7e 14                	jle    c0017340 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001732c:	8b 06                	mov    eax,DWORD PTR [esi]
c001732e:	83 c7 04             	add    edi,0x4
c0017331:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017334:	53                   	push   ebx
c0017335:	55                   	push   ebp
c0017336:	45                   	inc    ebp
c0017337:	56                   	push   esi
c0017338:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001733b:	83 c4 10             	add    esp,0x10
c001733e:	eb e0                	jmp    c0017320 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017340:	43                   	inc    ebx
c0017341:	eb cd                	jmp    c0017310 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017343:	83 c4 1c             	add    esp,0x1c
c0017346:	5b                   	pop    ebx
c0017347:	5e                   	pop    esi
c0017348:	5f                   	pop    edi
c0017349:	5d                   	pop    ebp
c001734a:	c3                   	ret    
c001734b:	90                   	nop

c001734c <ACPI::close(int, int, void*)>:
c001734c:	83 ec 1c             	sub    esp,0x1c
c001734f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017357:	74 0a                	je     c0017363 <ACPI::close(int, int, void*)+0x17>
c0017359:	b8 00 00 00 00       	mov    eax,0x0
c001735e:	e9 9a 00 00 00       	jmp    c00173fd <ACPI::close(int, int, void*)+0xb1>
c0017363:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017368:	75 37                	jne    c00173a1 <ACPI::close(int, int, void*)+0x55>
c001736a:	83 ec 0c             	sub    esp,0xc
c001736d:	68 64 bd 02 c0       	push   0xc002bd64
c0017372:	e8 52 b5 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0017377:	83 c4 10             	add    esp,0x10
c001737a:	a1 68 19 03 c0       	mov    eax,ds:0xc0031968
c001737f:	85 c0                	test   eax,eax
c0017381:	74 07                	je     c001738a <ACPI::close(int, int, void*)+0x3e>
c0017383:	a1 68 19 03 c0       	mov    eax,ds:0xc0031968
c0017388:	ff d0                	call   eax
c001738a:	83 ec 0c             	sub    esp,0xc
c001738d:	68 7c be 02 c0       	push   0xc002be7c
c0017392:	e8 68 2f 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0017397:	83 c4 10             	add    esp,0x10
c001739a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001739f:	eb 5c                	jmp    c00173fd <ACPI::close(int, int, void*)+0xb1>
c00173a1:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00173a6:	75 50                	jne    c00173f8 <ACPI::close(int, int, void*)+0xac>
c00173a8:	a1 64 19 03 c0       	mov    eax,ds:0xc0031964
c00173ad:	85 c0                	test   eax,eax
c00173af:	74 07                	je     c00173b8 <ACPI::close(int, int, void*)+0x6c>
c00173b1:	a1 64 19 03 c0       	mov    eax,ds:0xc0031964
c00173b6:	ff d0                	call   eax
c00173b8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00173bd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00173c2:	83 e0 02             	and    eax,0x2
c00173c5:	74 1c                	je     c00173e3 <ACPI::close(int, int, void*)+0x97>
c00173c7:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00173ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173d2:	89 c2                	mov    edx,eax
c00173d4:	ec                   	in     al,dx
c00173d5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00173d9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00173dd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00173e1:	eb da                	jmp    c00173bd <ACPI::close(int, int, void*)+0x71>
c00173e3:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00173ea:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00173ef:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00173f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00173f7:	ee                   	out    dx,al
c00173f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173fd:	83 c4 1c             	add    esp,0x1c
c0017400:	c3                   	ret    

c0017401 <findRSDP()>:
c0017401:	83 ec 1c             	sub    esp,0x1c
c0017404:	83 ec 0c             	sub    esp,0xc
c0017407:	68 71 bd 02 c0       	push   0xc002bd71
c001740c:	e8 b8 b4 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0017411:	83 c4 10             	add    esp,0x10
c0017414:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017419:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001741f:	83 e0 04             	and    eax,0x4
c0017422:	84 c0                	test   al,al
c0017424:	75 07                	jne    c001742d <findRSDP()+0x2c>
c0017426:	b8 00 00 00 00       	mov    eax,0x0
c001742b:	eb 6a                	jmp    c0017497 <findRSDP()+0x96>
c001742d:	a1 14 f3 02 c0       	mov    eax,ds:0xc002f314
c0017432:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017437:	7f 1b                	jg     c0017454 <findRSDP()+0x53>
c0017439:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001743e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017444:	83 e2 fb             	and    edx,0xfffffffb
c0017447:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001744d:	b8 00 00 00 00       	mov    eax,0x0
c0017452:	eb 43                	jmp    c0017497 <findRSDP()+0x96>
c0017454:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001745c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017464:	77 2c                	ja     c0017492 <findRSDP()+0x91>
c0017466:	83 ec 04             	sub    esp,0x4
c0017469:	6a 08                	push   0x8
c001746b:	68 7f bd 02 c0       	push   0xc002bd7f
c0017470:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017474:	e8 d3 91 fe ff       	call   c000064c <memcmp>
c0017479:	83 c4 10             	add    esp,0x10
c001747c:	85 c0                	test   eax,eax
c001747e:	0f 94 c0             	sete   al
c0017481:	84 c0                	test   al,al
c0017483:	74 06                	je     c001748b <findRSDP()+0x8a>
c0017485:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017489:	eb 0c                	jmp    c0017497 <findRSDP()+0x96>
c001748b:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017490:	eb ca                	jmp    c001745c <findRSDP()+0x5b>
c0017492:	b8 00 00 00 00       	mov    eax,0x0
c0017497:	83 c4 1c             	add    esp,0x1c
c001749a:	c3                   	ret    

c001749b <loadACPITables(unsigned char*)>:
c001749b:	57                   	push   edi
c001749c:	56                   	push   esi
c001749d:	53                   	push   ebx
c001749e:	83 ec 60             	sub    esp,0x60
c00174a1:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00174a6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174ac:	83 e0 04             	and    eax,0x4
c00174af:	84 c0                	test   al,al
c00174b1:	0f 84 33 02 00 00    	je     c00176ea <loadACPITables(unsigned char*)+0x24f>
c00174b7:	a0 80 1b 03 c0       	mov    al,ds:0xc0031b80
c00174bc:	84 c0                	test   al,al
c00174be:	74 75                	je     c0017535 <loadACPITables(unsigned char*)+0x9a>
c00174c0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174c4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00174c8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174cf:	83 e8 24             	sub    eax,0x24
c00174d2:	c1 e8 03             	shr    eax,0x3
c00174d5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00174d9:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00174e1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00174e5:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00174e9:	0f 8d b2 00 00 00    	jge    c00175a1 <loadACPITables(unsigned char*)+0x106>
c00174ef:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174f3:	83 c0 24             	add    eax,0x24
c00174f6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00174fa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00174fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017502:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017506:	c1 e0 03             	shl    eax,0x3
c0017509:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001750d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017511:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017514:	8b 00                	mov    eax,DWORD PTR [eax]
c0017516:	89 c1                	mov    ecx,eax
c0017518:	a1 6c 19 03 c0       	mov    eax,ds:0xc003196c
c001751d:	8d 50 01             	lea    edx,[eax+0x1]
c0017520:	89 15 6c 19 03 c0    	mov    DWORD PTR ds:0xc003196c,edx
c0017526:	89 ca                	mov    edx,ecx
c0017528:	89 14 c5 84 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce67c],edx
c001752f:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017533:	eb ac                	jmp    c00174e1 <loadACPITables(unsigned char*)+0x46>
c0017535:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017539:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001753d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017541:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017544:	83 e8 24             	sub    eax,0x24
c0017547:	c1 e8 02             	shr    eax,0x2
c001754a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001754e:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017556:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001755a:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001755e:	7d 41                	jge    c00175a1 <loadACPITables(unsigned char*)+0x106>
c0017560:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017564:	83 c0 24             	add    eax,0x24
c0017567:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001756b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001756f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017573:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017577:	c1 e0 02             	shl    eax,0x2
c001757a:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001757e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017582:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017584:	a1 6c 19 03 c0       	mov    eax,ds:0xc003196c
c0017589:	8d 50 01             	lea    edx,[eax+0x1]
c001758c:	89 15 6c 19 03 c0    	mov    DWORD PTR ds:0xc003196c,edx
c0017592:	89 ca                	mov    edx,ecx
c0017594:	89 14 c5 84 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce67c],edx
c001759b:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c001759f:	eb b5                	jmp    c0017556 <loadACPITables(unsigned char*)+0xbb>
c00175a1:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00175a9:	a1 6c 19 03 c0       	mov    eax,ds:0xc003196c
c00175ae:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00175b2:	0f 8d 33 01 00 00    	jge    c00176eb <loadACPITables(unsigned char*)+0x250>
c00175b8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00175bc:	8b 04 c5 84 19 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce67c]
c00175c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175cb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00175cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175d3:	25 ff 0f 00 00       	and    eax,0xfff
c00175d8:	89 c6                	mov    esi,eax
c00175da:	8b 1d 30 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f430
c00175e0:	83 ec 0c             	sub    esp,0xc
c00175e3:	6a 01                	push   0x1
c00175e5:	e8 d9 9e ff ff       	call   c00114c3 <Virt::allocateKernelVirtualPages(int)>
c00175ea:	83 c4 10             	add    esp,0x10
c00175ed:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00175f1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00175f7:	83 ec 0c             	sub    esp,0xc
c00175fa:	6a 01                	push   0x1
c00175fc:	6a 01                	push   0x1
c00175fe:	50                   	push   eax
c00175ff:	52                   	push   edx
c0017600:	53                   	push   ebx
c0017601:	e8 ea a9 ff ff       	call   c0011ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017606:	83 c4 20             	add    esp,0x20
c0017609:	09 f0                	or     eax,esi
c001760b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001760f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017613:	c1 e0 03             	shl    eax,0x3
c0017616:	05 80 19 03 c0       	add    eax,0xc0031980
c001761b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001761f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017623:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017627:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001762f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017633:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017637:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001763b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001763f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017643:	89 c6                	mov    esi,eax
c0017645:	89 d7                	mov    edi,edx
c0017647:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017649:	89 c8                	mov    eax,ecx
c001764b:	89 fa                	mov    edx,edi
c001764d:	89 f3                	mov    ebx,esi
c001764f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017653:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017657:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001765b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001765f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017662:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017666:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001766a:	05 00 10 00 00       	add    eax,0x1000
c001766f:	c1 e8 0c             	shr    eax,0xc
c0017672:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017676:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001767a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001767e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017682:	25 ff 0f 00 00       	and    eax,0xfff
c0017687:	89 c6                	mov    esi,eax
c0017689:	8b 1d 30 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f430
c001768f:	83 ec 0c             	sub    esp,0xc
c0017692:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017696:	e8 28 9e ff ff       	call   c00114c3 <Virt::allocateKernelVirtualPages(int)>
c001769b:	83 c4 10             	add    esp,0x10
c001769e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00176a2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176a8:	83 ec 0c             	sub    esp,0xc
c00176ab:	6a 01                	push   0x1
c00176ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00176b1:	50                   	push   eax
c00176b2:	52                   	push   edx
c00176b3:	53                   	push   ebx
c00176b4:	e8 37 a9 ff ff       	call   c0011ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176b9:	83 c4 20             	add    esp,0x20
c00176bc:	09 f0                	or     eax,esi
c00176be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176c6:	83 ec 0c             	sub    esp,0xc
c00176c9:	50                   	push   eax
c00176ca:	e8 b4 a2 ff ff       	call   c0011983 <Virt::freeKernelVirtualPages(unsigned long)>
c00176cf:	83 c4 10             	add    esp,0x10
c00176d2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00176d6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00176da:	89 14 c5 84 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce67c],edx
c00176e1:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00176e5:	e9 bf fe ff ff       	jmp    c00175a9 <loadACPITables(unsigned char*)+0x10e>
c00176ea:	90                   	nop
c00176eb:	83 c4 60             	add    esp,0x60
c00176ee:	5b                   	pop    ebx
c00176ef:	5e                   	pop    esi
c00176f0:	5f                   	pop    edi
c00176f1:	c3                   	ret    

c00176f2 <findRSDT(unsigned char*)>:
c00176f2:	57                   	push   edi
c00176f3:	56                   	push   esi
c00176f4:	53                   	push   ebx
c00176f5:	83 ec 50             	sub    esp,0x50
c00176f8:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00176fd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017703:	83 e0 04             	and    eax,0x4
c0017706:	84 c0                	test   al,al
c0017708:	75 0a                	jne    c0017714 <findRSDT(unsigned char*)+0x22>
c001770a:	b8 00 00 00 00       	mov    eax,0x0
c001770f:	e9 21 01 00 00       	jmp    c0017835 <findRSDT(unsigned char*)+0x143>
c0017714:	89 e0                	mov    eax,esp
c0017716:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001771a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001771e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017722:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001772a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001772e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017732:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017736:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001773a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001773e:	89 c6                	mov    esi,eax
c0017740:	89 d7                	mov    edi,edx
c0017742:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017744:	89 c8                	mov    eax,ecx
c0017746:	89 fa                	mov    edx,edi
c0017748:	89 f3                	mov    ebx,esi
c001774a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001774e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017752:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017756:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001775a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001775e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017766:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001776a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001776e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017776:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001777a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001777e:	25 ff 0f 00 00       	and    eax,0xfff
c0017783:	89 c6                	mov    esi,eax
c0017785:	8b 1d 30 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f430
c001778b:	83 ec 0c             	sub    esp,0xc
c001778e:	6a 02                	push   0x2
c0017790:	e8 2e 9d ff ff       	call   c00114c3 <Virt::allocateKernelVirtualPages(int)>
c0017795:	83 c4 10             	add    esp,0x10
c0017798:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001779c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177a2:	83 ec 0c             	sub    esp,0xc
c00177a5:	6a 01                	push   0x1
c00177a7:	6a 02                	push   0x2
c00177a9:	50                   	push   eax
c00177aa:	52                   	push   edx
c00177ab:	53                   	push   ebx
c00177ac:	e8 3f a8 ff ff       	call   c0011ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177b1:	83 c4 20             	add    esp,0x20
c00177b4:	09 f0                	or     eax,esi
c00177b6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00177ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177be:	25 ff 0f 00 00       	and    eax,0xfff
c00177c3:	89 c6                	mov    esi,eax
c00177c5:	8b 1d 30 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f430
c00177cb:	83 ec 0c             	sub    esp,0xc
c00177ce:	6a 02                	push   0x2
c00177d0:	e8 ee 9c ff ff       	call   c00114c3 <Virt::allocateKernelVirtualPages(int)>
c00177d5:	83 c4 10             	add    esp,0x10
c00177d8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00177dc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177e2:	83 ec 0c             	sub    esp,0xc
c00177e5:	6a 01                	push   0x1
c00177e7:	6a 02                	push   0x2
c00177e9:	50                   	push   eax
c00177ea:	52                   	push   edx
c00177eb:	53                   	push   ebx
c00177ec:	e8 ff a7 ff ff       	call   c0011ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177f1:	83 c4 20             	add    esp,0x20
c00177f4:	09 f0                	or     eax,esi
c00177f6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00177fa:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00177ff:	75 11                	jne    c0017812 <findRSDT(unsigned char*)+0x120>
c0017801:	c6 05 80 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b80,0x0
c0017808:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001780c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017810:	eb 1f                	jmp    c0017831 <findRSDT(unsigned char*)+0x13f>
c0017812:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017817:	75 11                	jne    c001782a <findRSDT(unsigned char*)+0x138>
c0017819:	c6 05 80 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b80,0x1
c0017820:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017824:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017828:	eb 07                	jmp    c0017831 <findRSDT(unsigned char*)+0x13f>
c001782a:	b8 00 00 00 00       	mov    eax,0x0
c001782f:	eb 04                	jmp    c0017835 <findRSDT(unsigned char*)+0x143>
c0017831:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017835:	83 c4 50             	add    esp,0x50
c0017838:	5b                   	pop    ebx
c0017839:	5e                   	pop    esi
c001783a:	5f                   	pop    edi
c001783b:	c3                   	ret    

c001783c <findDataTable(unsigned char*, char*)>:
c001783c:	83 ec 1c             	sub    esp,0x1c
c001783f:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017844:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001784a:	83 e0 04             	and    eax,0x4
c001784d:	84 c0                	test   al,al
c001784f:	75 07                	jne    c0017858 <findDataTable(unsigned char*, char*)+0x1c>
c0017851:	b8 00 00 00 00       	mov    eax,0x0
c0017856:	eb 7c                	jmp    c00178d4 <findDataTable(unsigned char*, char*)+0x98>
c0017858:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017860:	a1 6c 19 03 c0       	mov    eax,ds:0xc003196c
c0017865:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017869:	7d 3a                	jge    c00178a5 <findDataTable(unsigned char*, char*)+0x69>
c001786b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001786f:	c1 e0 03             	shl    eax,0x3
c0017872:	05 80 19 03 c0       	add    eax,0xc0031980
c0017877:	83 ec 04             	sub    esp,0x4
c001787a:	6a 04                	push   0x4
c001787c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017880:	50                   	push   eax
c0017881:	e8 c6 8d fe ff       	call   c000064c <memcmp>
c0017886:	83 c4 10             	add    esp,0x10
c0017889:	85 c0                	test   eax,eax
c001788b:	0f 94 c0             	sete   al
c001788e:	84 c0                	test   al,al
c0017890:	74 0d                	je     c001789f <findDataTable(unsigned char*, char*)+0x63>
c0017892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017896:	8b 04 c5 84 19 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce67c]
c001789d:	eb 35                	jmp    c00178d4 <findDataTable(unsigned char*, char*)+0x98>
c001789f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00178a3:	eb bb                	jmp    c0017860 <findDataTable(unsigned char*, char*)+0x24>
c00178a5:	a0 80 1b 03 c0       	mov    al,ds:0xc0031b80
c00178aa:	84 c0                	test   al,al
c00178ac:	74 07                	je     c00178b5 <findDataTable(unsigned char*, char*)+0x79>
c00178ae:	b8 58 00 00 00       	mov    eax,0x58
c00178b3:	eb 05                	jmp    c00178ba <findDataTable(unsigned char*, char*)+0x7e>
c00178b5:	b8 52 00 00 00       	mov    eax,0x52
c00178ba:	83 ec 04             	sub    esp,0x4
c00178bd:	50                   	push   eax
c00178be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178c2:	68 a0 be 02 c0       	push   0xc002bea0
c00178c7:	e8 fd af ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00178cc:	83 c4 10             	add    esp,0x10
c00178cf:	b8 00 00 00 00       	mov    eax,0x0
c00178d4:	83 c4 1c             	add    esp,0x1c
c00178d7:	c3                   	ret    

c00178d8 <scanMADT()>:
c00178d8:	53                   	push   ebx
c00178d9:	83 ec 38             	sub    esp,0x38
c00178dc:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00178e1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178e7:	83 e0 04             	and    eax,0x4
c00178ea:	84 c0                	test   al,al
c00178ec:	0f 84 63 04 00 00    	je     c0017d55 <scanMADT()+0x47d>
c00178f2:	e8 0a fb ff ff       	call   c0017401 <findRSDP()>
c00178f7:	a3 8c 1b 03 c0       	mov    ds:0xc0031b8c,eax
c00178fc:	a1 8c 1b 03 c0       	mov    eax,ds:0xc0031b8c
c0017901:	85 c0                	test   eax,eax
c0017903:	75 19                	jne    c001791e <scanMADT()+0x46>
c0017905:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001790a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017910:	83 e2 fb             	and    edx,0xfffffffb
c0017913:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017919:	e9 3b 04 00 00       	jmp    c0017d59 <scanMADT()+0x481>
c001791e:	a1 8c 1b 03 c0       	mov    eax,ds:0xc0031b8c
c0017923:	83 ec 0c             	sub    esp,0xc
c0017926:	50                   	push   eax
c0017927:	e8 c6 fd ff ff       	call   c00176f2 <findRSDT(unsigned char*)>
c001792c:	83 c4 10             	add    esp,0x10
c001792f:	a3 88 1b 03 c0       	mov    ds:0xc0031b88,eax
c0017934:	a1 88 1b 03 c0       	mov    eax,ds:0xc0031b88
c0017939:	85 c0                	test   eax,eax
c001793b:	75 19                	jne    c0017956 <scanMADT()+0x7e>
c001793d:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017942:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017948:	83 e2 fb             	and    edx,0xfffffffb
c001794b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017951:	e9 03 04 00 00       	jmp    c0017d59 <scanMADT()+0x481>
c0017956:	a1 88 1b 03 c0       	mov    eax,ds:0xc0031b88
c001795b:	83 ec 0c             	sub    esp,0xc
c001795e:	50                   	push   eax
c001795f:	e8 37 fb ff ff       	call   c001749b <loadACPITables(unsigned char*)>
c0017964:	83 c4 10             	add    esp,0x10
c0017967:	a1 88 1b 03 c0       	mov    eax,ds:0xc0031b88
c001796c:	83 ec 08             	sub    esp,0x8
c001796f:	68 88 bd 02 c0       	push   0xc002bd88
c0017974:	50                   	push   eax
c0017975:	e8 c2 fe ff ff       	call   c001783c <findDataTable(unsigned char*, char*)>
c001797a:	83 c4 10             	add    esp,0x10
c001797d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017981:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017986:	75 19                	jne    c00179a1 <scanMADT()+0xc9>
c0017988:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001798d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017993:	83 e2 fe             	and    edx,0xfffffffe
c0017996:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001799c:	e9 b8 03 00 00       	jmp    c0017d59 <scanMADT()+0x481>
c00179a1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00179a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179b0:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00179b4:	0f 87 9f 03 00 00    	ja     c0017d59 <scanMADT()+0x481>
c00179ba:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00179c2:	0f 87 91 03 00 00    	ja     c0017d59 <scanMADT()+0x481>
c00179c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179d4:	8d 50 01             	lea    edx,[eax+0x1]
c00179d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179df:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179e3:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00179e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179eb:	8d 50 01             	lea    edx,[eax+0x1]
c00179ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179f6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179fa:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00179fe:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017a03:	0f 86 4f 03 00 00    	jbe    c0017d58 <scanMADT()+0x480>
c0017a09:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017a0e:	75 57                	jne    c0017a67 <scanMADT()+0x18f>
c0017a10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a14:	8d 50 01             	lea    edx,[eax+0x1]
c0017a17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a1b:	8a 15 80 1d 03 c0    	mov    dl,BYTE PTR ds:0xc0031d80
c0017a21:	0f b6 d2             	movzx  edx,dl
c0017a24:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a28:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a2c:	88 82 c0 1d 03 c0    	mov    BYTE PTR [edx-0x3ffce240],al
c0017a32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a36:	8d 50 01             	lea    edx,[eax+0x1]
c0017a39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a3d:	8a 15 80 1d 03 c0    	mov    dl,BYTE PTR ds:0xc0031d80
c0017a43:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a46:	88 0d 80 1d 03 c0    	mov    BYTE PTR ds:0xc0031d80,cl
c0017a4c:	0f b6 d2             	movzx  edx,dl
c0017a4f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a53:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a57:	88 82 a0 1d 03 c0    	mov    BYTE PTR [edx-0x3ffce260],al
c0017a5d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a62:	e9 da 02 00 00       	jmp    c0017d41 <scanMADT()+0x469>
c0017a67:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017a6c:	0f 85 14 01 00 00    	jne    c0017b86 <scanMADT()+0x2ae>
c0017a72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a76:	8d 50 01             	lea    edx,[eax+0x1]
c0017a79:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a7d:	8a 15 40 1c 03 c0    	mov    dl,BYTE PTR ds:0xc0031c40
c0017a83:	0f b6 d2             	movzx  edx,dl
c0017a86:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a8a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a8e:	88 82 60 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce3a0],al
c0017a94:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017a98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aa0:	01 d0                	add    eax,edx
c0017aa2:	83 c0 2c             	add    eax,0x2c
c0017aa5:	8a 00                	mov    al,BYTE PTR [eax]
c0017aa7:	0f b6 d0             	movzx  edx,al
c0017aaa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aae:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ab1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ab5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ab9:	0f b6 c0             	movzx  eax,al
c0017abc:	c1 e0 08             	shl    eax,0x8
c0017abf:	89 d1                	mov    ecx,edx
c0017ac1:	09 c1                	or     ecx,eax
c0017ac3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ac7:	8d 50 02             	lea    edx,[eax+0x2]
c0017aca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ace:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ad2:	0f b6 c0             	movzx  eax,al
c0017ad5:	c1 e0 10             	shl    eax,0x10
c0017ad8:	09 c1                	or     ecx,eax
c0017ada:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ade:	8d 50 03             	lea    edx,[eax+0x3]
c0017ae1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ae5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ae9:	0f b6 c0             	movzx  eax,al
c0017aec:	c1 e0 18             	shl    eax,0x18
c0017aef:	09 c1                	or     ecx,eax
c0017af1:	89 ca                	mov    edx,ecx
c0017af3:	a0 40 1c 03 c0       	mov    al,ds:0xc0031c40
c0017af8:	0f b6 c0             	movzx  eax,al
c0017afb:	89 14 85 80 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce380],edx
c0017b02:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b07:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b0f:	01 d0                	add    eax,edx
c0017b11:	83 c0 2c             	add    eax,0x2c
c0017b14:	8a 00                	mov    al,BYTE PTR [eax]
c0017b16:	0f b6 d0             	movzx  edx,al
c0017b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b1d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b24:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b28:	0f b6 c0             	movzx  eax,al
c0017b2b:	c1 e0 08             	shl    eax,0x8
c0017b2e:	89 d1                	mov    ecx,edx
c0017b30:	09 c1                	or     ecx,eax
c0017b32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b36:	8d 50 02             	lea    edx,[eax+0x2]
c0017b39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b3d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b41:	0f b6 c0             	movzx  eax,al
c0017b44:	c1 e0 10             	shl    eax,0x10
c0017b47:	09 c1                	or     ecx,eax
c0017b49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b4d:	8d 50 03             	lea    edx,[eax+0x3]
c0017b50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b54:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b58:	0f b6 c0             	movzx  eax,al
c0017b5b:	c1 e0 18             	shl    eax,0x18
c0017b5e:	09 c1                	or     ecx,eax
c0017b60:	89 ca                	mov    edx,ecx
c0017b62:	a0 40 1c 03 c0       	mov    al,ds:0xc0031c40
c0017b67:	0f b6 c0             	movzx  eax,al
c0017b6a:	89 14 85 00 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce300],edx
c0017b71:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b76:	a0 40 1c 03 c0       	mov    al,ds:0xc0031c40
c0017b7b:	40                   	inc    eax
c0017b7c:	a2 40 1c 03 c0       	mov    ds:0xc0031c40,al
c0017b81:	e9 bb 01 00 00       	jmp    c0017d41 <scanMADT()+0x469>
c0017b86:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017b8b:	0f 85 e9 00 00 00    	jne    c0017c7a <scanMADT()+0x3a2>
c0017b91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b95:	8d 50 01             	lea    edx,[eax+0x1]
c0017b98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b9c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ba0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ba4:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017ba8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bac:	8d 50 01             	lea    edx,[eax+0x1]
c0017baf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bb3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bb7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bbb:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017bbf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bc7:	01 d0                	add    eax,edx
c0017bc9:	83 c0 2c             	add    eax,0x2c
c0017bcc:	8a 00                	mov    al,BYTE PTR [eax]
c0017bce:	0f b6 d0             	movzx  edx,al
c0017bd1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bd5:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bd8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bdc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017be0:	0f b6 c0             	movzx  eax,al
c0017be3:	c1 e0 08             	shl    eax,0x8
c0017be6:	89 d1                	mov    ecx,edx
c0017be8:	09 c1                	or     ecx,eax
c0017bea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bee:	8d 50 02             	lea    edx,[eax+0x2]
c0017bf1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bf5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bf9:	0f b6 c0             	movzx  eax,al
c0017bfc:	c1 e0 10             	shl    eax,0x10
c0017bff:	09 c1                	or     ecx,eax
c0017c01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c05:	8d 50 03             	lea    edx,[eax+0x3]
c0017c08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c0c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c10:	0f b6 c0             	movzx  eax,al
c0017c13:	c1 e0 18             	shl    eax,0x18
c0017c16:	09 c8                	or     eax,ecx
c0017c18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c1c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c29:	01 d0                	add    eax,edx
c0017c2b:	83 c0 2c             	add    eax,0x2c
c0017c2e:	8a 00                	mov    al,BYTE PTR [eax]
c0017c30:	0f b6 c0             	movzx  eax,al
c0017c33:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c37:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c3e:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017c42:	0f b6 d2             	movzx  edx,dl
c0017c45:	c1 e2 08             	shl    edx,0x8
c0017c48:	09 d0                	or     eax,edx
c0017c4a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017c4f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017c54:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017c59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c5d:	88 90 20 e5 02 c0    	mov    BYTE PTR [eax-0x3ffd1ae0],dl
c0017c63:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017c68:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017c6d:	66 89 84 12 20 1c 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce3e0],ax
c0017c75:	e9 c7 00 00 00       	jmp    c0017d41 <scanMADT()+0x469>
c0017c7a:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017c7f:	0f 85 b0 00 00 00    	jne    c0017d35 <scanMADT()+0x45d>
c0017c85:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c89:	8d 50 01             	lea    edx,[eax+0x1]
c0017c8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c90:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c94:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c98:	0f b6 c0             	movzx  eax,al
c0017c9b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c9f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ca3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ca7:	01 d0                	add    eax,edx
c0017ca9:	83 c0 2c             	add    eax,0x2c
c0017cac:	8a 00                	mov    al,BYTE PTR [eax]
c0017cae:	0f b6 d0             	movzx  edx,al
c0017cb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cb5:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cbc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017cc0:	0f b6 c0             	movzx  eax,al
c0017cc3:	c1 e0 08             	shl    eax,0x8
c0017cc6:	09 d0                	or     eax,edx
c0017cc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ccc:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017cd1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cd5:	8d 50 01             	lea    edx,[eax+0x1]
c0017cd8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cdc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ce0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ce4:	0f b6 c0             	movzx  eax,al
c0017ce7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cef:	c1 e0 08             	shl    eax,0x8
c0017cf2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017cf6:	89 c1                	mov    ecx,eax
c0017cf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cfc:	c1 e0 18             	shl    eax,0x18
c0017cff:	89 c3                	mov    ebx,eax
c0017d01:	a1 90 1b 03 c0       	mov    eax,ds:0xc0031b90
c0017d06:	8d 50 01             	lea    edx,[eax+0x1]
c0017d09:	89 15 90 1b 03 c0    	mov    DWORD PTR ds:0xc0031b90,edx
c0017d0f:	09 d9                	or     ecx,ebx
c0017d11:	89 ca                	mov    edx,ecx
c0017d13:	89 14 85 a0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce460],edx
c0017d1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d26:	68 d0 be 02 c0       	push   0xc002bed0
c0017d2b:	e8 99 ab ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0017d30:	83 c4 10             	add    esp,0x10
c0017d33:	eb 0c                	jmp    c0017d41 <scanMADT()+0x469>
c0017d35:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017d3a:	75 05                	jne    c0017d41 <scanMADT()+0x469>
c0017d3c:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017d41:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017d46:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d4a:	01 d0                	add    eax,edx
c0017d4c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d50:	e9 54 fc ff ff       	jmp    c00179a9 <scanMADT()+0xd1>
c0017d55:	90                   	nop
c0017d56:	eb 01                	jmp    c0017d59 <scanMADT()+0x481>
c0017d58:	90                   	nop
c0017d59:	83 c4 38             	add    esp,0x38
c0017d5c:	5b                   	pop    ebx
c0017d5d:	c3                   	ret    

c0017d5e <ACPI::ACPI()>:
c0017d5e:	83 ec 0c             	sub    esp,0xc
c0017d61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d65:	83 ec 08             	sub    esp,0x8
c0017d68:	68 8d bd 02 c0       	push   0xc002bd8d
c0017d6d:	50                   	push   eax
c0017d6e:	e8 93 c1 ff ff       	call   c0013f06 <Device::Device(char const*)>
c0017d73:	83 c4 10             	add    esp,0x10
c0017d76:	ba 6c bf 02 c0       	mov    edx,0xc002bf6c
c0017d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d7f:	89 10                	mov    DWORD PTR [eax],edx
c0017d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d85:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d90:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d9e:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017da8:	e8 2b fb ff ff       	call   c00178d8 <scanMADT()>
c0017dad:	90                   	nop
c0017dae:	83 c4 0c             	add    esp,0xc
c0017db1:	c3                   	ret    

c0017db2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017db2:	83 ec 2c             	sub    esp,0x2c
c0017db5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017db9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017dbd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017dc1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017dc5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017dca:	88 d0                	mov    al,dl
c0017dcc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017dd0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017dd5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017ddd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017de1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017de7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017deb:	0f 8d 97 00 00 00    	jge    c0017e88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017df1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017df5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017df9:	83 c2 2a             	add    edx,0x2a
c0017dfc:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017e00:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017e05:	75 78                	jne    c0017e7f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e07:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e0f:	83 c2 2a             	add    edx,0x2a
c0017e12:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017e16:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017e1a:	75 63                	jne    c0017e7f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e1c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017e21:	74 3a                	je     c0017e5d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017e23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e2b:	83 c2 2a             	add    edx,0x2a
c0017e2e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017e32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e39:	39 c2                	cmp    edx,eax
c0017e3b:	74 10                	je     c0017e4d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017e3d:	83 ec 0c             	sub    esp,0xc
c0017e40:	68 0c bf 02 c0       	push   0xc002bf0c
c0017e45:	e8 b5 24 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0017e4a:	83 c4 10             	add    esp,0x10
c0017e4d:	83 ec 0c             	sub    esp,0xc
c0017e50:	68 92 bd 02 c0       	push   0xc002bd92
c0017e55:	e8 a5 24 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0017e5a:	83 c4 10             	add    esp,0x10
c0017e5d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017e61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e65:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e69:	83 c2 2a             	add    edx,0x2a
c0017e6c:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017e70:	8b 02                	mov    eax,DWORD PTR [edx]
c0017e72:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017e75:	89 01                	mov    DWORD PTR [ecx],eax
c0017e77:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e7a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e7f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017e83:	e9 55 ff ff ff       	jmp    c0017ddd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017e88:	90                   	nop
c0017e89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e8d:	83 c4 2c             	add    esp,0x2c
c0017e90:	c2 04 00             	ret    0x4
c0017e93:	90                   	nop

c0017e94 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017e94:	83 ec 1c             	sub    esp,0x1c
c0017e97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e9b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017e9f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ea3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017ea8:	88 c8                	mov    al,cl
c0017eaa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017eae:	88 d0                	mov    al,dl
c0017eb0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ebe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ec5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017ec9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017ecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ed7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017edb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017ede:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ee2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eeb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ef1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017ef5:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017efc:	83 c2 2a             	add    edx,0x2a
c0017eff:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017f03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f07:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f11:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f14:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f18:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017f1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f20:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f26:	8d 50 01             	lea    edx,[eax+0x1]
c0017f29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f2d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f37:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f3d:	3d 00 02 00 00       	cmp    eax,0x200
c0017f42:	75 10                	jne    c0017f54 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017f44:	83 ec 0c             	sub    esp,0xc
c0017f47:	68 a1 bd 02 c0       	push   0xc002bda1
c0017f4c:	e8 ae 23 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0017f51:	83 c4 10             	add    esp,0x10
c0017f54:	90                   	nop
c0017f55:	83 c4 1c             	add    esp,0x1c
c0017f58:	c3                   	ret    
c0017f59:	90                   	nop

c0017f5a <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017f5a:	b8 00 00 00 00       	mov    eax,0x0
c0017f5f:	c3                   	ret    

c0017f60 <ACPI::detectPCI()>:
c0017f60:	53                   	push   ebx
c0017f61:	83 ec 28             	sub    esp,0x28
c0017f64:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017f69:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017f6e:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017f73:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017f79:	83 e0 04             	and    eax,0x4
c0017f7c:	84 c0                	test   al,al
c0017f7e:	74 2b                	je     c0017fab <ACPI::detectPCI()+0x4b>
c0017f80:	a1 88 1b 03 c0       	mov    eax,ds:0xc0031b88
c0017f85:	83 ec 08             	sub    esp,0x8
c0017f88:	68 be bd 02 c0       	push   0xc002bdbe
c0017f8d:	50                   	push   eax
c0017f8e:	e8 a9 f8 ff ff       	call   c001783c <findDataTable(unsigned char*, char*)>
c0017f93:	83 c4 10             	add    esp,0x10
c0017f96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f9a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017f9f:	74 0a                	je     c0017fab <ACPI::detectPCI()+0x4b>
c0017fa1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fa6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017fab:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017fb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fb7:	8a 00                	mov    al,BYTE PTR [eax]
c0017fb9:	3c 01                	cmp    al,0x1
c0017fbb:	75 0c                	jne    c0017fc9 <ACPI::detectPCI()+0x69>
c0017fbd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fc2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017fc7:	eb 26                	jmp    c0017fef <ACPI::detectPCI()+0x8f>
c0017fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fcd:	8a 00                	mov    al,BYTE PTR [eax]
c0017fcf:	3c 02                	cmp    al,0x2
c0017fd1:	75 1c                	jne    c0017fef <ACPI::detectPCI()+0x8f>
c0017fd3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fd8:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017fdd:	74 10                	je     c0017fef <ACPI::detectPCI()+0x8f>
c0017fdf:	83 ec 0c             	sub    esp,0xc
c0017fe2:	68 3c bf 02 c0       	push   0xc002bf3c
c0017fe7:	e8 13 23 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0017fec:	83 c4 10             	add    esp,0x10
c0017fef:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017ff3:	83 f0 01             	xor    eax,0x1
c0017ff6:	84 c0                	test   al,al
c0017ff8:	74 3f                	je     c0018039 <ACPI::detectPCI()+0xd9>
c0017ffa:	e8 51 81 fe ff       	call   c0000150 <manualPCIProbe>
c0017fff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018003:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018008:	75 0c                	jne    c0018016 <ACPI::detectPCI()+0xb6>
c001800a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001800f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0018014:	eb 23                	jmp    c0018039 <ACPI::detectPCI()+0xd9>
c0018016:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001801b:	75 1c                	jne    c0018039 <ACPI::detectPCI()+0xd9>
c001801d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018022:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018027:	74 10                	je     c0018039 <ACPI::detectPCI()+0xd9>
c0018029:	83 ec 0c             	sub    esp,0xc
c001802c:	68 3c bf 02 c0       	push   0xc002bf3c
c0018031:	e8 c9 22 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c0018036:	83 c4 10             	add    esp,0x10
c0018039:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001803e:	74 0d                	je     c001804d <ACPI::detectPCI()+0xed>
c0018040:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0018044:	83 f0 01             	xor    eax,0x1
c0018047:	0f b6 c0             	movzx  eax,al
c001804a:	40                   	inc    eax
c001804b:	eb 05                	jmp    c0018052 <ACPI::detectPCI()+0xf2>
c001804d:	b8 00 00 00 00       	mov    eax,0x0
c0018052:	83 ec 08             	sub    esp,0x8
c0018055:	50                   	push   eax
c0018056:	68 c3 bd 02 c0       	push   0xc002bdc3
c001805b:	e8 69 a8 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018060:	83 c4 10             	add    esp,0x10
c0018063:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018068:	74 69                	je     c00180d3 <ACPI::detectPCI()+0x173>
c001806a:	c7 44 24 08 5c 01 00 00 	mov    DWORD PTR [esp+0x8],0x15c
c0018072:	83 ec 0c             	sub    esp,0xc
c0018075:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018079:	e8 0e 78 ff ff       	call   c000f88c <malloc>
c001807e:	83 c4 10             	add    esp,0x10
c0018081:	89 c3                	mov    ebx,eax
c0018083:	83 ec 0c             	sub    esp,0xc
c0018086:	53                   	push   ebx
c0018087:	e8 0e ac 00 00       	call   c0022c9a <PCI::PCI()>
c001808c:	83 c4 10             	add    esp,0x10
c001808f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018093:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018097:	83 ec 08             	sub    esp,0x8
c001809a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001809e:	50                   	push   eax
c001809f:	e8 5e bc ff ff       	call   c0013d02 <Device::addChild(Device*)>
c00180a4:	83 c4 10             	add    esp,0x10
c00180a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00180ad:	83 c0 08             	add    eax,0x8
c00180b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00180b2:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00180b7:	74 07                	je     c00180c0 <ACPI::detectPCI()+0x160>
c00180b9:	ba 01 00 00 00       	mov    edx,0x1
c00180be:	eb 05                	jmp    c00180c5 <ACPI::detectPCI()+0x165>
c00180c0:	ba 02 00 00 00       	mov    edx,0x2
c00180c5:	6a 00                	push   0x0
c00180c7:	6a 00                	push   0x0
c00180c9:	52                   	push   edx
c00180ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00180ce:	ff d0                	call   eax
c00180d0:	83 c4 10             	add    esp,0x10
c00180d3:	90                   	nop
c00180d4:	83 c4 28             	add    esp,0x28
c00180d7:	5b                   	pop    ebx
c00180d8:	c3                   	ret    
c00180d9:	90                   	nop

c00180da <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00180da:	83 ec 1c             	sub    esp,0x1c
c00180dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00180e1:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00180e4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00180e8:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00180ed:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00180f2:	83 ec 08             	sub    esp,0x8
c00180f5:	52                   	push   edx
c00180f6:	50                   	push   eax
c00180f7:	e8 a6 6d ff ff       	call   c000eea2 <Computer::readCMOS(unsigned char)>
c00180fc:	83 c4 10             	add    esp,0x10
c00180ff:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018103:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0018108:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001810d:	83 ec 04             	sub    esp,0x4
c0018110:	6a 01                	push   0x1
c0018112:	52                   	push   edx
c0018113:	50                   	push   eax
c0018114:	e8 9f 6e ff ff       	call   c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018119:	83 c4 10             	add    esp,0x10
c001811c:	90                   	nop
c001811d:	83 c4 1c             	add    esp,0x1c
c0018120:	c3                   	ret    
c0018121:	90                   	nop

c0018122 <ACPI::sleep()>:
c0018122:	83 ec 0c             	sub    esp,0xc
c0018125:	a1 60 19 03 c0       	mov    eax,ds:0xc0031960
c001812a:	85 c0                	test   eax,eax
c001812c:	74 07                	je     c0018135 <ACPI::sleep()+0x13>
c001812e:	a1 60 19 03 c0       	mov    eax,ds:0xc0031960
c0018133:	ff d0                	call   eax
c0018135:	90                   	nop
c0018136:	83 c4 0c             	add    esp,0xc
c0018139:	c3                   	ret    

c001813a <ACPI::open(int, int, void*)>:
c001813a:	57                   	push   edi
c001813b:	56                   	push   esi
c001813c:	53                   	push   ebx
c001813d:	81 ec 60 01 00 00    	sub    esp,0x160
c0018143:	83 ec 0c             	sub    esp,0xc
c0018146:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001814d:	e8 0e fe ff ff       	call   c0017f60 <ACPI::detectPCI()>
c0018152:	83 c4 10             	add    esp,0x10
c0018155:	83 ec 0c             	sub    esp,0xc
c0018158:	68 cc bd 02 c0       	push   0xc002bdcc
c001815d:	e8 fa 4a 00 00       	call   c001cc5c <Thr::loadKernelSymbolTable(char const*)>
c0018162:	83 c4 10             	add    esp,0x10
c0018165:	83 ec 04             	sub    esp,0x4
c0018168:	6a 0c                	push   0xc
c001816a:	68 ea bd 02 c0       	push   0xc002bdea
c001816f:	68 fb bd 02 c0       	push   0xc002bdfb
c0018174:	e8 3c 2f 00 00       	call   c001b0b5 <Reg::readIntWithDefault(char*, char*, int)>
c0018179:	83 c4 10             	add    esp,0x10
c001817c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0018183:	83 ec 0c             	sub    esp,0xc
c0018186:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c001818d:	e8 6f 95 ff ff       	call   c0011701 <Virt::setupPageSwapping(int)>
c0018192:	83 c4 10             	add    esp,0x10
c0018195:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c001819b:	83 ec 08             	sub    esp,0x8
c001819e:	6a 01                	push   0x1
c00181a0:	68 02 be 02 c0       	push   0xc002be02
c00181a5:	e8 29 55 00 00       	call   c001d6d3 <Thr::loadDLL(char const*, bool)>
c00181aa:	83 c4 10             	add    esp,0x10
c00181ad:	83 ec 08             	sub    esp,0x8
c00181b0:	53                   	push   ebx
c00181b1:	50                   	push   eax
c00181b2:	e8 47 57 00 00       	call   c001d8fe <Thr::executeDLL(unsigned long, void*)>
c00181b7:	83 c4 10             	add    esp,0x10
c00181ba:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00181c1:	83 ec 08             	sub    esp,0x8
c00181c4:	6a 12                	push   0x12
c00181c6:	50                   	push   eax
c00181c7:	e8 ba be ff ff       	call   c0014086 <getDevicesOfType(DeviceType)>
c00181cc:	83 c4 0c             	add    esp,0xc
c00181cf:	83 ec 0c             	sub    esp,0xc
c00181d2:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00181d9:	50                   	push   eax
c00181da:	e8 91 12 01 00       	call   c0029470 <LinkedList<Device>::isEmpty()>
c00181df:	83 c4 10             	add    esp,0x10
c00181e2:	83 f0 01             	xor    eax,0x1
c00181e5:	84 c0                	test   al,al
c00181e7:	0f 84 43 01 00 00    	je     c0018330 <ACPI::open(int, int, void*)+0x1f6>
c00181ed:	83 ec 0c             	sub    esp,0xc
c00181f0:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00181f7:	50                   	push   eax
c00181f8:	e8 8f 12 01 00       	call   c002948c <LinkedList<Device>::getFirstElement()>
c00181fd:	83 c4 10             	add    esp,0x10
c0018200:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0018207:	83 ec 0c             	sub    esp,0xc
c001820a:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018211:	50                   	push   eax
c0018212:	e8 7d 12 01 00       	call   c0029494 <LinkedList<Device>::removeFirst()>
c0018217:	83 c4 10             	add    esp,0x10
c001821a:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018221:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018228:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c001822f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018233:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018239:	ba 09 00 00 00       	mov    edx,0x9
c001823e:	fc                   	cld    
c001823f:	89 c7                	mov    edi,eax
c0018241:	89 de                	mov    esi,ebx
c0018243:	89 d1                	mov    ecx,edx
c0018245:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018247:	83 ec 08             	sub    esp,0x8
c001824a:	8d 44 24 38          	lea    eax,[esp+0x38]
c001824e:	50                   	push   eax
c001824f:	83 ec 24             	sub    esp,0x24
c0018252:	89 e0                	mov    eax,esp
c0018254:	89 c3                	mov    ebx,eax
c0018256:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001825a:	ba 09 00 00 00       	mov    edx,0x9
c001825f:	89 df                	mov    edi,ebx
c0018261:	89 c6                	mov    esi,eax
c0018263:	89 d1                	mov    ecx,edx
c0018265:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018267:	e8 2e af 00 00       	call   c002319a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001826c:	83 c4 30             	add    esp,0x30
c001826f:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018276:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001827e:	0f 84 4b ff ff ff    	je     c00181cf <ACPI::open(int, int, void*)+0x95>
c0018284:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001828f:	83 ec 0c             	sub    esp,0xc
c0018292:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018299:	e8 ee 75 ff ff       	call   c000f88c <malloc>
c001829e:	83 c4 10             	add    esp,0x10
c00182a1:	89 c3                	mov    ebx,eax
c00182a3:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c00182a8:	83 ec 04             	sub    esp,0x4
c00182ab:	50                   	push   eax
c00182ac:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00182b3:	53                   	push   ebx
c00182b4:	e8 6f ab ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c00182b9:	83 c4 10             	add    esp,0x10
c00182bc:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00182c3:	83 ec 0c             	sub    esp,0xc
c00182c6:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00182cd:	e8 28 ae ff ff       	call   c00130fa <File::exists()>
c00182d2:	83 c4 10             	add    esp,0x10
c00182d5:	84 c0                	test   al,al
c00182d7:	74 27                	je     c0018300 <ACPI::open(int, int, void*)+0x1c6>
c00182d9:	83 ec 08             	sub    esp,0x8
c00182dc:	6a 01                	push   0x1
c00182de:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00182e5:	e8 e9 53 00 00       	call   c001d6d3 <Thr::loadDLL(char const*, bool)>
c00182ea:	83 c4 10             	add    esp,0x10
c00182ed:	83 ec 08             	sub    esp,0x8
c00182f0:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00182f7:	50                   	push   eax
c00182f8:	e8 01 56 00 00       	call   c001d8fe <Thr::executeDLL(unsigned long, void*)>
c00182fd:	83 c4 10             	add    esp,0x10
c0018300:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018308:	0f 84 c1 fe ff ff    	je     c00181cf <ACPI::open(int, int, void*)+0x95>
c001830e:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018315:	8b 00                	mov    eax,DWORD PTR [eax]
c0018317:	83 c0 08             	add    eax,0x8
c001831a:	8b 00                	mov    eax,DWORD PTR [eax]
c001831c:	83 ec 0c             	sub    esp,0xc
c001831f:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018326:	ff d0                	call   eax
c0018328:	83 c4 10             	add    esp,0x10
c001832b:	e9 9f fe ff ff       	jmp    c00181cf <ACPI::open(int, int, void*)+0x95>
c0018330:	83 ec 0c             	sub    esp,0xc
c0018333:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001833a:	50                   	push   eax
c001833b:	e8 2e 11 01 00       	call   c002946e <LinkedList<Device>::~LinkedList()>
c0018340:	83 c4 10             	add    esp,0x10
c0018343:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c0018349:	83 ec 08             	sub    esp,0x8
c001834c:	6a 01                	push   0x1
c001834e:	68 1d be 02 c0       	push   0xc002be1d
c0018353:	e8 7b 53 00 00       	call   c001d6d3 <Thr::loadDLL(char const*, bool)>
c0018358:	83 c4 10             	add    esp,0x10
c001835b:	83 ec 08             	sub    esp,0x8
c001835e:	53                   	push   ebx
c001835f:	50                   	push   eax
c0018360:	e8 99 55 00 00       	call   c001d8fe <Thr::executeDLL(unsigned long, void*)>
c0018365:	83 c4 10             	add    esp,0x10
c0018368:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c001836e:	83 ec 08             	sub    esp,0x8
c0018371:	6a 01                	push   0x1
c0018373:	68 3a be 02 c0       	push   0xc002be3a
c0018378:	e8 56 53 00 00       	call   c001d6d3 <Thr::loadDLL(char const*, bool)>
c001837d:	83 c4 10             	add    esp,0x10
c0018380:	83 ec 08             	sub    esp,0x8
c0018383:	53                   	push   ebx
c0018384:	50                   	push   eax
c0018385:	e8 74 55 00 00       	call   c001d8fe <Thr::executeDLL(unsigned long, void*)>
c001838a:	83 c4 10             	add    esp,0x10
c001838d:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0018392:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018398:	83 e0 04             	and    eax,0x4
c001839b:	84 c0                	test   al,al
c001839d:	0f 84 fd 00 00 00    	je     c00184a0 <ACPI::open(int, int, void*)+0x366>
c00183a3:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00183ae:	83 ec 0c             	sub    esp,0xc
c00183b1:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00183b8:	e8 cf 74 ff ff       	call   c000f88c <malloc>
c00183bd:	83 c4 10             	add    esp,0x10
c00183c0:	89 c3                	mov    ebx,eax
c00183c2:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c00183c7:	83 ec 04             	sub    esp,0x4
c00183ca:	50                   	push   eax
c00183cb:	68 57 be 02 c0       	push   0xc002be57
c00183d0:	53                   	push   ebx
c00183d1:	e8 52 aa ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c00183d6:	83 c4 10             	add    esp,0x10
c00183d9:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00183e0:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00183e8:	74 1a                	je     c0018404 <ACPI::open(int, int, void*)+0x2ca>
c00183ea:	83 ec 0c             	sub    esp,0xc
c00183ed:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00183f4:	e8 01 ad ff ff       	call   c00130fa <File::exists()>
c00183f9:	83 c4 10             	add    esp,0x10
c00183fc:	84 c0                	test   al,al
c00183fe:	74 04                	je     c0018404 <ACPI::open(int, int, void*)+0x2ca>
c0018400:	b0 01                	mov    al,0x1
c0018402:	eb 02                	jmp    c0018406 <ACPI::open(int, int, void*)+0x2cc>
c0018404:	b0 00                	mov    al,0x0
c0018406:	84 c0                	test   al,al
c0018408:	74 25                	je     c001842f <ACPI::open(int, int, void*)+0x2f5>
c001840a:	83 ec 08             	sub    esp,0x8
c001840d:	6a 01                	push   0x1
c001840f:	68 57 be 02 c0       	push   0xc002be57
c0018414:	e8 ba 52 00 00       	call   c001d6d3 <Thr::loadDLL(char const*, bool)>
c0018419:	83 c4 10             	add    esp,0x10
c001841c:	83 ec 08             	sub    esp,0x8
c001841f:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018426:	50                   	push   eax
c0018427:	e8 d2 54 00 00       	call   c001d8fe <Thr::executeDLL(unsigned long, void*)>
c001842c:	83 c4 10             	add    esp,0x10
c001842f:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018437:	74 27                	je     c0018460 <ACPI::open(int, int, void*)+0x326>
c0018439:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018441:	74 1d                	je     c0018460 <ACPI::open(int, int, void*)+0x326>
c0018443:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001844a:	8b 00                	mov    eax,DWORD PTR [eax]
c001844c:	83 c0 08             	add    eax,0x8
c001844f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018451:	83 ec 0c             	sub    esp,0xc
c0018454:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001845b:	ff d0                	call   eax
c001845d:	83 c4 10             	add    esp,0x10
c0018460:	a1 88 1b 03 c0       	mov    eax,ds:0xc0031b88
c0018465:	83 ec 08             	sub    esp,0x8
c0018468:	68 74 be 02 c0       	push   0xc002be74
c001846d:	50                   	push   eax
c001846e:	e8 c9 f3 ff ff       	call   c001783c <findDataTable(unsigned char*, char*)>
c0018473:	83 c4 10             	add    esp,0x10
c0018476:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c001847d:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018485:	74 19                	je     c00184a0 <ACPI::open(int, int, void*)+0x366>
c0018487:	83 ec 08             	sub    esp,0x8
c001848a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018491:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018498:	e8 3d fc ff ff       	call   c00180da <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001849d:	83 c4 10             	add    esp,0x10
c00184a0:	b8 00 00 00 00       	mov    eax,0x0
c00184a5:	81 c4 60 01 00 00    	add    esp,0x160
c00184ab:	5b                   	pop    ebx
c00184ac:	5e                   	pop    esi
c00184ad:	5f                   	pop    edi
c00184ae:	c3                   	ret    
c00184af:	90                   	nop

c00184b0 <CPU::close(int, int, void*)>:
c00184b0:	31 c0                	xor    eax,eax
c00184b2:	c3                   	ret    
c00184b3:	90                   	nop

c00184b4 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00184b4:	55                   	push   ebp
c00184b5:	57                   	push   edi
c00184b6:	56                   	push   esi
c00184b7:	53                   	push   ebx
c00184b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00184bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00184c0:	89 ce                	mov    esi,ecx
c00184c2:	89 d5                	mov    ebp,edx
c00184c4:	80 f9 04             	cmp    cl,0x4
c00184c7:	75 28                	jne    c00184f1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00184c9:	8d 42 f9             	lea    eax,[edx-0x7]
c00184cc:	3c 03                	cmp    al,0x3
c00184ce:	0f 86 63 01 00 00    	jbe    c0018637 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00184d4:	80 fa 03             	cmp    dl,0x3
c00184d7:	0f 84 5a 01 00 00    	je     c0018637 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00184dd:	8d 7a f2             	lea    edi,[edx-0xe]
c00184e0:	b8 f0 e6 02 c0       	mov    eax,0xc002e6f0
c00184e5:	89 fb                	mov    ebx,edi
c00184e7:	80 fb 01             	cmp    bl,0x1
c00184ea:	77 4e                	ja     c001853a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00184ec:	e9 52 01 00 00       	jmp    c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184f1:	80 f9 05             	cmp    cl,0x5
c00184f4:	75 4d                	jne    c0018543 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00184f6:	b8 00 e7 02 c0       	mov    eax,0xc002e700
c00184fb:	80 fa 03             	cmp    dl,0x3
c00184fe:	0f 86 3f 01 00 00    	jbe    c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018504:	8d 7a fa             	lea    edi,[edx-0x6]
c0018507:	b8 10 e7 02 c0       	mov    eax,0xc002e710
c001850c:	89 fb                	mov    ebx,edi
c001850e:	80 fb 01             	cmp    bl,0x1
c0018511:	0f 86 2c 01 00 00    	jbe    c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018517:	b8 20 e7 02 c0       	mov    eax,0xc002e720
c001851c:	80 fa 08             	cmp    dl,0x8
c001851f:	0f 84 1e 01 00 00    	je     c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018525:	89 d7                	mov    edi,edx
c0018527:	b8 30 e7 02 c0       	mov    eax,0xc002e730
c001852c:	83 e7 fb             	and    edi,0xfffffffb
c001852f:	89 fb                	mov    ebx,edi
c0018531:	80 fb 09             	cmp    bl,0x9
c0018534:	0f 84 09 01 00 00    	je     c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001853a:	31 c0                	xor    eax,eax
c001853c:	89 eb                	mov    ebx,ebp
c001853e:	0f b6 fb             	movzx  edi,bl
c0018541:	eb 30                	jmp    c0018573 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018543:	31 c0                	xor    eax,eax
c0018545:	80 f9 06             	cmp    cl,0x6
c0018548:	75 f2                	jne    c001853c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001854a:	80 fa 0a             	cmp    dl,0xa
c001854d:	77 ed                	ja     c001853c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001854f:	bf de 05 00 00       	mov    edi,0x5de
c0018554:	0f a3 d7             	bt     edi,edx
c0018557:	73 e3                	jae    c001853c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018559:	b8 40 e7 02 c0       	mov    eax,0xc002e740
c001855e:	e9 e0 00 00 00       	jmp    c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018563:	39 c7                	cmp    edi,eax
c0018565:	0f 84 d3 00 00 00    	je     c001863e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001856b:	40                   	inc    eax
c001856c:	3d d0 00 00 00       	cmp    eax,0xd0
c0018571:	74 09                	je     c001857c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018573:	89 f3                	mov    ebx,esi
c0018575:	80 fb 0f             	cmp    bl,0xf
c0018578:	75 f1                	jne    c001856b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001857a:	eb e7                	jmp    c0018563 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001857c:	80 f9 10             	cmp    cl,0x10
c001857f:	75 14                	jne    c0018595 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018581:	8d 42 fc             	lea    eax,[edx-0x4]
c0018584:	83 e0 fb             	and    eax,0xfffffffb
c0018587:	3c 02                	cmp    al,0x2
c0018589:	76 34                	jbe    c00185bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001858b:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c0018590:	80 fa 02             	cmp    dl,0x2
c0018593:	eb 24                	jmp    c00185b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018595:	80 f9 11             	cmp    cl,0x11
c0018598:	75 13                	jne    c00185ad <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001859a:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c001859f:	80 fa 03             	cmp    dl,0x3
c00185a2:	0f 85 9b 00 00 00    	jne    c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185a8:	e9 91 00 00 00       	jmp    c001863e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00185ad:	80 f9 12             	cmp    cl,0x12
c00185b0:	75 14                	jne    c00185c6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00185b2:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00185b7:	fe ca                	dec    dl
c00185b9:	0f 85 84 00 00 00    	jne    c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185bf:	b8 60 e7 02 c0       	mov    eax,0xc002e760
c00185c4:	eb 7d                	jmp    c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185c6:	80 f9 14             	cmp    cl,0x14
c00185c9:	75 12                	jne    c00185dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00185cb:	4a                   	dec    edx
c00185cc:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00185d1:	80 fa 01             	cmp    dl,0x1
c00185d4:	77 6d                	ja     c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185d6:	b8 70 e7 02 c0       	mov    eax,0xc002e770
c00185db:	eb 66                	jmp    c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185dd:	80 f9 15             	cmp    cl,0x15
c00185e0:	75 31                	jne    c0018613 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00185e2:	b8 80 e7 02 c0       	mov    eax,0xc002e780
c00185e7:	80 fa 01             	cmp    dl,0x1
c00185ea:	74 57                	je     c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185ec:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00185f1:	80 fa 13             	cmp    dl,0x13
c00185f4:	76 0c                	jbe    c0018602 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00185f6:	80 fa 30             	cmp    dl,0x30
c00185f9:	75 48                	jne    c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185fb:	b8 a0 e7 02 c0       	mov    eax,0xc002e7a0
c0018600:	eb 41                	jmp    c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018602:	b9 04 00 09 00       	mov    ecx,0x90004
c0018607:	0f a3 d1             	bt     ecx,edx
c001860a:	73 37                	jae    c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001860c:	b8 90 e7 02 c0       	mov    eax,0xc002e790
c0018611:	eb 30                	jmp    c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018613:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c0018618:	80 f9 16             	cmp    cl,0x16
c001861b:	75 26                	jne    c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001861d:	b8 b0 e7 02 c0       	mov    eax,0xc002e7b0
c0018622:	84 d2                	test   dl,dl
c0018624:	74 1d                	je     c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018626:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c001862b:	80 fa 30             	cmp    dl,0x30
c001862e:	75 13                	jne    c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018630:	b8 c0 e7 02 c0       	mov    eax,0xc002e7c0
c0018635:	eb 0c                	jmp    c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018637:	b8 e0 e6 02 c0       	mov    eax,0xc002e6e0
c001863c:	eb 05                	jmp    c0018643 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001863e:	b8 50 e7 02 c0       	mov    eax,0xc002e750
c0018643:	5b                   	pop    ebx
c0018644:	5e                   	pop    esi
c0018645:	5f                   	pop    edi
c0018646:	5d                   	pop    ebp
c0018647:	c3                   	ret    

c0018648 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018648:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001864c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018650:	80 f9 04             	cmp    cl,0x4
c0018653:	75 6b                	jne    c00186c0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018655:	b8 40 e5 02 c0       	mov    eax,0xc002e540
c001865a:	80 fa 01             	cmp    dl,0x1
c001865d:	0f 86 92 02 00 00    	jbe    c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018663:	b8 50 e5 02 c0       	mov    eax,0xc002e550
c0018668:	80 fa 02             	cmp    dl,0x2
c001866b:	0f 84 84 02 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018671:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c0018676:	80 fa 03             	cmp    dl,0x3
c0018679:	0f 84 76 02 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001867f:	b8 70 e5 02 c0       	mov    eax,0xc002e570
c0018684:	80 fa 04             	cmp    dl,0x4
c0018687:	0f 84 68 02 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001868d:	b8 80 e5 02 c0       	mov    eax,0xc002e580
c0018692:	80 fa 05             	cmp    dl,0x5
c0018695:	0f 84 5a 02 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001869b:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c00186a0:	80 fa 07             	cmp    dl,0x7
c00186a3:	0f 84 4c 02 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a9:	83 ea 08             	sub    edx,0x8
c00186ac:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00186b1:	80 fa 01             	cmp    dl,0x1
c00186b4:	0f 87 3b 02 00 00    	ja     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ba:	b8 90 e5 02 c0       	mov    eax,0xc002e590
c00186bf:	c3                   	ret    
c00186c0:	80 f9 05             	cmp    cl,0x5
c00186c3:	75 45                	jne    c001870a <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00186c5:	8d 4a ff             	lea    ecx,[edx-0x1]
c00186c8:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c00186cd:	80 f9 02             	cmp    cl,0x2
c00186d0:	0f 86 1f 02 00 00    	jbe    c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d6:	80 fa 04             	cmp    dl,0x4
c00186d9:	0f 84 f3 01 00 00    	je     c00188d2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00186df:	80 fa 07             	cmp    dl,0x7
c00186e2:	0f 84 0d 02 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186e8:	b8 b0 e5 02 c0       	mov    eax,0xc002e5b0
c00186ed:	80 fa 08             	cmp    dl,0x8
c00186f0:	0f 84 ff 01 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186f6:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00186fb:	80 fa 09             	cmp    dl,0x9
c00186fe:	0f 85 f1 01 00 00    	jne    c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018704:	b8 c0 e5 02 c0       	mov    eax,0xc002e5c0
c0018709:	c3                   	ret    
c001870a:	80 f9 06             	cmp    cl,0x6
c001870d:	0f 85 85 01 00 00    	jne    c0018898 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018713:	b8 d0 e5 02 c0       	mov    eax,0xc002e5d0
c0018718:	80 fa 01             	cmp    dl,0x1
c001871b:	0f 84 d4 01 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018721:	8d 42 fb             	lea    eax,[edx-0x5]
c0018724:	3c 01                	cmp    al,0x1
c0018726:	0f 86 ac 01 00 00    	jbe    c00188d8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001872c:	80 fa 03             	cmp    dl,0x3
c001872f:	0f 84 a3 01 00 00    	je     c00188d8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018735:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018738:	b8 f0 e5 02 c0       	mov    eax,0xc002e5f0
c001873d:	80 f9 01             	cmp    cl,0x1
c0018740:	0f 86 af 01 00 00    	jbe    c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018746:	80 fa 09             	cmp    dl,0x9
c0018749:	0f 84 8f 01 00 00    	je     c00188de <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001874f:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018752:	80 f9 01             	cmp    cl,0x1
c0018755:	0f 86 9a 01 00 00    	jbe    c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001875b:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c0018760:	80 fa 0d             	cmp    dl,0xd
c0018763:	0f 84 8c 01 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018769:	b8 10 e6 02 c0       	mov    eax,0xc002e610
c001876e:	80 fa 0e             	cmp    dl,0xe
c0018771:	0f 84 7e 01 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018777:	b8 20 e6 02 c0       	mov    eax,0xc002e620
c001877c:	80 fa 0f             	cmp    dl,0xf
c001877f:	0f 84 70 01 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018785:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c001878a:	80 fa 15             	cmp    dl,0x15
c001878d:	0f 84 62 01 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018793:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018796:	b8 20 e6 02 c0       	mov    eax,0xc002e620
c001879b:	80 f9 01             	cmp    cl,0x1
c001879e:	0f 86 51 01 00 00    	jbe    c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187a4:	80 fa 1a             	cmp    dl,0x1a
c00187a7:	0f 84 37 01 00 00    	je     c00188e4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00187ad:	80 fa 1c             	cmp    dl,0x1c
c00187b0:	0f 84 34 01 00 00    	je     c00188ea <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00187b6:	80 fa 1d             	cmp    dl,0x1d
c00187b9:	0f 84 36 01 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187bf:	b8 50 e6 02 c0       	mov    eax,0xc002e650
c00187c4:	80 fa 25             	cmp    dl,0x25
c00187c7:	0f 84 28 01 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187cd:	8d 4a da             	lea    ecx,[edx-0x26]
c00187d0:	b8 40 e6 02 c0       	mov    eax,0xc002e640
c00187d5:	80 f9 01             	cmp    cl,0x1
c00187d8:	0f 86 17 01 00 00    	jbe    c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187de:	b8 60 e6 02 c0       	mov    eax,0xc002e660
c00187e3:	80 fa 2a             	cmp    dl,0x2a
c00187e6:	0f 84 09 01 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ec:	b8 50 e6 02 c0       	mov    eax,0xc002e650
c00187f1:	80 fa 2c             	cmp    dl,0x2c
c00187f4:	0f 84 fb 00 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187fa:	b8 60 e6 02 c0       	mov    eax,0xc002e660
c00187ff:	80 fa 2d             	cmp    dl,0x2d
c0018802:	0f 84 ed 00 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018808:	b8 30 e6 02 c0       	mov    eax,0xc002e630
c001880d:	80 fa 2e             	cmp    dl,0x2e
c0018810:	0f 84 df 00 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018816:	b8 50 e6 02 c0       	mov    eax,0xc002e650
c001881b:	80 fa 2f             	cmp    dl,0x2f
c001881e:	0f 84 d1 00 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018824:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018827:	b8 40 e6 02 c0       	mov    eax,0xc002e640
c001882c:	80 f9 01             	cmp    cl,0x1
c001882f:	0f 86 c0 00 00 00    	jbe    c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018835:	b8 70 e6 02 c0       	mov    eax,0xc002e670
c001883a:	80 fa 37             	cmp    dl,0x37
c001883d:	0f 84 b2 00 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018843:	b8 80 e6 02 c0       	mov    eax,0xc002e680
c0018848:	80 fa 3a             	cmp    dl,0x3a
c001884b:	0f 84 a4 00 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018851:	b8 90 e6 02 c0       	mov    eax,0xc002e690
c0018856:	80 fa 3c             	cmp    dl,0x3c
c0018859:	0f 84 96 00 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001885f:	b8 a0 e6 02 c0       	mov    eax,0xc002e6a0
c0018864:	80 fa 3d             	cmp    dl,0x3d
c0018867:	0f 84 88 00 00 00    	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001886d:	b8 80 e6 02 c0       	mov    eax,0xc002e680
c0018872:	80 fa 3e             	cmp    dl,0x3e
c0018875:	74 7e                	je     c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018877:	8d 42 bb             	lea    eax,[edx-0x45]
c001887a:	3c 01                	cmp    al,0x1
c001887c:	76 72                	jbe    c00188f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001887e:	80 fa 3f             	cmp    dl,0x3f
c0018881:	74 6d                	je     c00188f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018883:	80 fa 4a             	cmp    dl,0x4a
c0018886:	74 0a                	je     c0018892 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018888:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c001888d:	80 fa 4d             	cmp    dl,0x4d
c0018890:	75 63                	jne    c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018892:	b8 70 e6 02 c0       	mov    eax,0xc002e670
c0018897:	c3                   	ret    
c0018898:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c001889d:	80 f9 0b             	cmp    cl,0xb
c00188a0:	75 0a                	jne    c00188ac <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00188a2:	fe ca                	dec    dl
c00188a4:	75 4f                	jne    c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188a6:	b8 b0 e6 02 c0       	mov    eax,0xc002e6b0
c00188ab:	c3                   	ret    
c00188ac:	80 f9 0f             	cmp    cl,0xf
c00188af:	75 44                	jne    c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b1:	b8 c0 e6 02 c0       	mov    eax,0xc002e6c0
c00188b6:	80 fa 02             	cmp    dl,0x2
c00188b9:	76 3a                	jbe    c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188bb:	8d 42 fd             	lea    eax,[edx-0x3]
c00188be:	3c 01                	cmp    al,0x1
c00188c0:	76 0a                	jbe    c00188cc <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00188c2:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00188c7:	80 fa 06             	cmp    dl,0x6
c00188ca:	75 29                	jne    c00188f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188cc:	b8 d0 e6 02 c0       	mov    eax,0xc002e6d0
c00188d1:	c3                   	ret    
c00188d2:	b8 b0 e5 02 c0       	mov    eax,0xc002e5b0
c00188d7:	c3                   	ret    
c00188d8:	b8 e0 e5 02 c0       	mov    eax,0xc002e5e0
c00188dd:	c3                   	ret    
c00188de:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c00188e3:	c3                   	ret    
c00188e4:	b8 30 e6 02 c0       	mov    eax,0xc002e630
c00188e9:	c3                   	ret    
c00188ea:	b8 40 e6 02 c0       	mov    eax,0xc002e640
c00188ef:	c3                   	ret    
c00188f0:	b8 90 e6 02 c0       	mov    eax,0xc002e690
c00188f5:	c3                   	ret    

c00188f6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00188f6:	60                   	pusha  
c00188f7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018903:	9c                   	pushf  
c0018904:	fa                   	cli    
c0018905:	0f 09                	wbinvd 
c0018907:	0f 30                	wrmsr  
c0018909:	9d                   	popf   
c001890a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001890e:	89 02                	mov    DWORD PTR [edx],eax
c0018910:	61                   	popa   
c0018911:	c3                   	ret    

c0018912 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018912:	60                   	pusha  
c0018913:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018917:	9c                   	pushf  
c0018918:	fa                   	cli    
c0018919:	0f 09                	wbinvd 
c001891b:	31 c0                	xor    eax,eax
c001891d:	31 d2                	xor    edx,edx
c001891f:	0f 32                	rdmsr  
c0018921:	9d                   	popf   
c0018922:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018926:	89 02                	mov    DWORD PTR [edx],eax
c0018928:	61                   	popa   
c0018929:	c3                   	ret    

c001892a <CPU::AMD_K6_writeback(int, int, int)>:
c001892a:	56                   	push   esi
c001892b:	53                   	push   ebx
c001892c:	83 ec 10             	sub    esp,0x10
c001892f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018933:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018938:	75 5d                	jne    c0018997 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001893a:	83 f8 08             	cmp    eax,0x8
c001893d:	75 09                	jne    c0018948 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001893f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018944:	7e 13                	jle    c0018959 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018946:	eb 30                	jmp    c0018978 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018948:	83 f8 06             	cmp    eax,0x6
c001894b:	7c 4a                	jl     c0018997 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001894d:	83 f8 07             	cmp    eax,0x7
c0018950:	7e 07                	jle    c0018959 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018952:	83 f8 09             	cmp    eax,0x9
c0018955:	74 21                	je     c0018978 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018957:	eb 3e                	jmp    c0018997 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018959:	89 e6                	mov    esi,esp
c001895b:	8b 1d 08 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f308
c0018961:	56                   	push   esi
c0018962:	c1 eb 15             	shr    ebx,0x15
c0018965:	68 82 00 00 c0       	push   0xc0000082
c001896a:	83 e3 7e             	and    ebx,0x7e
c001896d:	e8 a0 ff ff ff       	call   c0018912 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018972:	56                   	push   esi
c0018973:	6a 00                	push   0x0
c0018975:	53                   	push   ebx
c0018976:	eb 12                	jmp    c001898a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018978:	89 e3                	mov    ebx,esp
c001897a:	53                   	push   ebx
c001897b:	68 82 00 00 c0       	push   0xc0000082
c0018980:	e8 8d ff ff ff       	call   c0018912 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018985:	53                   	push   ebx
c0018986:	6a 00                	push   0x0
c0018988:	6a 00                	push   0x0
c001898a:	68 82 00 00 c0       	push   0xc0000082
c001898f:	e8 62 ff ff ff       	call   c00188f6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018994:	83 c4 18             	add    esp,0x18
c0018997:	83 c4 10             	add    esp,0x10
c001899a:	5b                   	pop    ebx
c001899b:	5e                   	pop    esi
c001899c:	c3                   	ret    
c001899d:	90                   	nop

c001899e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001899e:	55                   	push   ebp
c001899f:	57                   	push   edi
c00189a0:	56                   	push   esi
c00189a1:	53                   	push   ebx
c00189a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189a6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00189aa:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00189ae:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00189b2:	39 05 e0 e7 02 c0    	cmp    DWORD PTR ds:0xc002e7e0,eax
c00189b8:	75 23                	jne    c00189dd <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00189ba:	a1 ec 1d 03 c0       	mov    eax,ds:0xc0031dec
c00189bf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00189c3:	89 06                	mov    DWORD PTR [esi],eax
c00189c5:	a1 e8 1d 03 c0       	mov    eax,ds:0xc0031de8
c00189ca:	89 07                	mov    DWORD PTR [edi],eax
c00189cc:	a1 e4 1d 03 c0       	mov    eax,ds:0xc0031de4
c00189d1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00189d4:	a1 e0 1d 03 c0       	mov    eax,ds:0xc0031de0
c00189d9:	89 02                	mov    DWORD PTR [edx],eax
c00189db:	eb 3f                	jmp    c0018a1c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00189dd:	31 c9                	xor    ecx,ecx
c00189df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189e3:	0f a2                	cpuid  
c00189e5:	89 06                	mov    DWORD PTR [esi],eax
c00189e7:	89 1f                	mov    DWORD PTR [edi],ebx
c00189e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189ed:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00189f0:	89 10                	mov    DWORD PTR [eax],edx
c00189f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189f6:	a3 e0 e7 02 c0       	mov    ds:0xc002e7e0,eax
c00189fb:	8b 06                	mov    eax,DWORD PTR [esi]
c00189fd:	a3 ec 1d 03 c0       	mov    ds:0xc0031dec,eax
c0018a02:	8b 07                	mov    eax,DWORD PTR [edi]
c0018a04:	a3 e8 1d 03 c0       	mov    ds:0xc0031de8,eax
c0018a09:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018a0c:	a3 e4 1d 03 c0       	mov    ds:0xc0031de4,eax
c0018a11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a15:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a17:	a3 e0 1d 03 c0       	mov    ds:0xc0031de0,eax
c0018a1c:	5b                   	pop    ebx
c0018a1d:	5e                   	pop    esi
c0018a1e:	5f                   	pop    edi
c0018a1f:	5d                   	pop    ebp
c0018a20:	c3                   	ret    
c0018a21:	90                   	nop

c0018a22 <CPU::cpuidCheckEDX(unsigned int)>:
c0018a22:	83 ec 10             	sub    esp,0x10
c0018a25:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a29:	50                   	push   eax
c0018a2a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a2e:	50                   	push   eax
c0018a2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a33:	50                   	push   eax
c0018a34:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a38:	50                   	push   eax
c0018a39:	6a 01                	push   0x1
c0018a3b:	e8 5e ff ff ff       	call   c001899e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a44:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018a48:	0f 95 c0             	setne  al
c0018a4b:	83 c4 24             	add    esp,0x24
c0018a4e:	c3                   	ret    
c0018a4f:	90                   	nop

c0018a50 <CPU::cpuidCheckECX(unsigned int)>:
c0018a50:	83 ec 10             	sub    esp,0x10
c0018a53:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a57:	50                   	push   eax
c0018a58:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a5c:	50                   	push   eax
c0018a5d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a61:	50                   	push   eax
c0018a62:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a66:	50                   	push   eax
c0018a67:	6a 01                	push   0x1
c0018a69:	e8 30 ff ff ff       	call   c001899e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a72:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018a76:	0f 95 c0             	setne  al
c0018a79:	83 c4 24             	add    esp,0x24
c0018a7c:	c3                   	ret    
c0018a7d:	90                   	nop

c0018a7e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018a7e:	83 ec 10             	sub    esp,0x10
c0018a81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a85:	50                   	push   eax
c0018a86:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a8a:	50                   	push   eax
c0018a8b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a8f:	50                   	push   eax
c0018a90:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a94:	50                   	push   eax
c0018a95:	6a 07                	push   0x7
c0018a97:	e8 02 ff ff ff       	call   c001899e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a9c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018aa0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018aa4:	0f 95 c0             	setne  al
c0018aa7:	83 c4 24             	add    esp,0x24
c0018aaa:	c3                   	ret    
c0018aab:	90                   	nop

c0018aac <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018aac:	83 ec 10             	sub    esp,0x10
c0018aaf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ab3:	50                   	push   eax
c0018ab4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ab8:	50                   	push   eax
c0018ab9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018abd:	50                   	push   eax
c0018abe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ac2:	50                   	push   eax
c0018ac3:	6a 07                	push   0x7
c0018ac5:	e8 d4 fe ff ff       	call   c001899e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018aca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ace:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018ad2:	0f 95 c0             	setne  al
c0018ad5:	83 c4 24             	add    esp,0x24
c0018ad8:	c3                   	ret    
c0018ad9:	90                   	nop

c0018ada <CPU::CPU()>:
c0018ada:	83 ec 0c             	sub    esp,0xc
c0018add:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ae1:	83 ec 08             	sub    esp,0x8
c0018ae4:	68 82 c2 02 c0       	push   0xc002c282
c0018ae9:	50                   	push   eax
c0018aea:	e8 17 b4 ff ff       	call   c0013f06 <Device::Device(char const*)>
c0018aef:	83 c4 10             	add    esp,0x10
c0018af2:	ba 5c c3 02 c0       	mov    edx,0xc002c35c
c0018af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018afb:	89 10                	mov    DWORD PTR [eax],edx
c0018afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b01:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b0f:	05 78 01 00 00       	add    eax,0x178
c0018b14:	83 ec 0c             	sub    esp,0xc
c0018b17:	50                   	push   eax
c0018b18:	e8 85 65 ff ff       	call   c000f0a2 <GDT::GDT()>
c0018b1d:	83 c4 10             	add    esp,0x10
c0018b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b24:	05 7c 09 00 00       	add    eax,0x97c
c0018b29:	83 ec 0c             	sub    esp,0xc
c0018b2c:	50                   	push   eax
c0018b2d:	e8 da 67 ff ff       	call   c000f30c <IDT::IDT()>
c0018b32:	83 c4 10             	add    esp,0x10
c0018b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b39:	05 7c 11 00 00       	add    eax,0x117c
c0018b3e:	83 ec 0c             	sub    esp,0xc
c0018b41:	50                   	push   eax
c0018b42:	e8 ad 82 ff ff       	call   c0010df4 <TSS::TSS()>
c0018b47:	83 c4 10             	add    esp,0x10
c0018b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b4e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b59:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018b63:	90                   	nop
c0018b64:	83 c4 0c             	add    esp,0xc
c0018b67:	c3                   	ret    

c0018b68 <CPU::displayFeatures()>:
c0018b68:	53                   	push   ebx
c0018b69:	83 ec 10             	sub    esp,0x10
c0018b6c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018b70:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018b76:	68 90 bf 02 c0       	push   0xc002bf90
c0018b7b:	e8 49 9d ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018b80:	59                   	pop    ecx
c0018b81:	58                   	pop    eax
c0018b82:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018b88:	50                   	push   eax
c0018b89:	68 a1 bf 02 c0       	push   0xc002bfa1
c0018b8e:	e8 36 9d ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018b93:	58                   	pop    eax
c0018b94:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b9a:	5a                   	pop    edx
c0018b9b:	c1 e8 0e             	shr    eax,0xe
c0018b9e:	0f b6 c0             	movzx  eax,al
c0018ba1:	50                   	push   eax
c0018ba2:	68 b2 bf 02 c0       	push   0xc002bfb2
c0018ba7:	e8 1d 9d ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018bac:	59                   	pop    ecx
c0018bad:	58                   	pop    eax
c0018bae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bb4:	66 c1 e8 06          	shr    ax,0x6
c0018bb8:	0f b6 c0             	movzx  eax,al
c0018bbb:	50                   	push   eax
c0018bbc:	68 c3 bf 02 c0       	push   0xc002bfc3
c0018bc1:	e8 03 9d ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018bc6:	c7 04 24 70 c4 02 c0 	mov    DWORD PTR [esp],0xc002c470
c0018bcd:	e8 f7 9c ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018bd2:	83 c4 10             	add    esp,0x10
c0018bd5:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018bda:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018be1:	74 05                	je     c0018be8 <CPU::displayFeatures()+0x80>
c0018be3:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018be8:	52                   	push   edx
c0018be9:	52                   	push   edx
c0018bea:	50                   	push   eax
c0018beb:	68 d4 bf 02 c0       	push   0xc002bfd4
c0018bf0:	e8 d4 9c ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018bf5:	83 c4 10             	add    esp,0x10
c0018bf8:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018bfd:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018c04:	78 05                	js     c0018c0b <CPU::displayFeatures()+0xa3>
c0018c06:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018c0b:	51                   	push   ecx
c0018c0c:	51                   	push   ecx
c0018c0d:	50                   	push   eax
c0018c0e:	68 eb bf 02 c0       	push   0xc002bfeb
c0018c13:	e8 b1 9c ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018c18:	83 c4 10             	add    esp,0x10
c0018c1b:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018c20:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018c27:	75 05                	jne    c0018c2e <CPU::displayFeatures()+0xc6>
c0018c29:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018c2e:	52                   	push   edx
c0018c2f:	52                   	push   edx
c0018c30:	50                   	push   eax
c0018c31:	68 02 c0 02 c0       	push   0xc002c002
c0018c36:	e8 8e 9c ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018c3b:	83 c4 10             	add    esp,0x10
c0018c3e:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018c43:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018c4a:	75 05                	jne    c0018c51 <CPU::displayFeatures()+0xe9>
c0018c4c:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018c51:	51                   	push   ecx
c0018c52:	51                   	push   ecx
c0018c53:	50                   	push   eax
c0018c54:	68 19 c0 02 c0       	push   0xc002c019
c0018c59:	e8 6b 9c ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018c5e:	83 c4 10             	add    esp,0x10
c0018c61:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018c66:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018c6d:	75 05                	jne    c0018c74 <CPU::displayFeatures()+0x10c>
c0018c6f:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018c74:	52                   	push   edx
c0018c75:	52                   	push   edx
c0018c76:	50                   	push   eax
c0018c77:	68 30 c0 02 c0       	push   0xc002c030
c0018c7c:	e8 48 9c ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018c81:	83 c4 10             	add    esp,0x10
c0018c84:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018c89:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018c90:	75 05                	jne    c0018c97 <CPU::displayFeatures()+0x12f>
c0018c92:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018c97:	51                   	push   ecx
c0018c98:	51                   	push   ecx
c0018c99:	50                   	push   eax
c0018c9a:	68 47 c0 02 c0       	push   0xc002c047
c0018c9f:	e8 25 9c ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018ca4:	83 c4 10             	add    esp,0x10
c0018ca7:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018cac:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018cb3:	75 05                	jne    c0018cba <CPU::displayFeatures()+0x152>
c0018cb5:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018cba:	52                   	push   edx
c0018cbb:	52                   	push   edx
c0018cbc:	50                   	push   eax
c0018cbd:	68 5e c0 02 c0       	push   0xc002c05e
c0018cc2:	e8 02 9c ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018cc7:	83 c4 10             	add    esp,0x10
c0018cca:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018ccf:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018cd6:	75 05                	jne    c0018cdd <CPU::displayFeatures()+0x175>
c0018cd8:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018cdd:	51                   	push   ecx
c0018cde:	51                   	push   ecx
c0018cdf:	50                   	push   eax
c0018ce0:	68 75 c0 02 c0       	push   0xc002c075
c0018ce5:	e8 df 9b ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018cea:	83 c4 10             	add    esp,0x10
c0018ced:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018cf2:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018cf9:	75 05                	jne    c0018d00 <CPU::displayFeatures()+0x198>
c0018cfb:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018d00:	52                   	push   edx
c0018d01:	52                   	push   edx
c0018d02:	50                   	push   eax
c0018d03:	68 8c c0 02 c0       	push   0xc002c08c
c0018d08:	e8 bc 9b ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018d0d:	83 c4 10             	add    esp,0x10
c0018d10:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018d15:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018d1c:	75 05                	jne    c0018d23 <CPU::displayFeatures()+0x1bb>
c0018d1e:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018d23:	51                   	push   ecx
c0018d24:	51                   	push   ecx
c0018d25:	50                   	push   eax
c0018d26:	68 a3 c0 02 c0       	push   0xc002c0a3
c0018d2b:	e8 99 9b ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018d30:	83 c4 10             	add    esp,0x10
c0018d33:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018d38:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018d3f:	75 05                	jne    c0018d46 <CPU::displayFeatures()+0x1de>
c0018d41:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018d46:	52                   	push   edx
c0018d47:	52                   	push   edx
c0018d48:	50                   	push   eax
c0018d49:	68 ba c0 02 c0       	push   0xc002c0ba
c0018d4e:	e8 76 9b ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018d53:	83 c4 10             	add    esp,0x10
c0018d56:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018d5b:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018d62:	75 05                	jne    c0018d69 <CPU::displayFeatures()+0x201>
c0018d64:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018d69:	51                   	push   ecx
c0018d6a:	51                   	push   ecx
c0018d6b:	50                   	push   eax
c0018d6c:	68 d1 c0 02 c0       	push   0xc002c0d1
c0018d71:	e8 53 9b ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018d76:	83 c4 10             	add    esp,0x10
c0018d79:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018d7e:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018d85:	75 05                	jne    c0018d8c <CPU::displayFeatures()+0x224>
c0018d87:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018d8c:	52                   	push   edx
c0018d8d:	52                   	push   edx
c0018d8e:	50                   	push   eax
c0018d8f:	68 e8 c0 02 c0       	push   0xc002c0e8
c0018d94:	e8 30 9b ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018d99:	83 c4 10             	add    esp,0x10
c0018d9c:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018da1:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018da8:	78 05                	js     c0018daf <CPU::displayFeatures()+0x247>
c0018daa:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018daf:	51                   	push   ecx
c0018db0:	51                   	push   ecx
c0018db1:	50                   	push   eax
c0018db2:	68 ff c0 02 c0       	push   0xc002c0ff
c0018db7:	e8 0d 9b ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018dbc:	83 c4 10             	add    esp,0x10
c0018dbf:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018dc4:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018dcb:	75 05                	jne    c0018dd2 <CPU::displayFeatures()+0x26a>
c0018dcd:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018dd2:	52                   	push   edx
c0018dd3:	52                   	push   edx
c0018dd4:	50                   	push   eax
c0018dd5:	68 16 c1 02 c0       	push   0xc002c116
c0018dda:	e8 ea 9a ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0018ddf:	83 c4 18             	add    esp,0x18
c0018de2:	5b                   	pop    ebx
c0018de3:	c3                   	ret    

c0018de4 <CPU::detectFeatures()>:
c0018de4:	55                   	push   ebp
c0018de5:	57                   	push   edi
c0018de6:	56                   	push   esi
c0018de7:	53                   	push   ebx
c0018de8:	83 ec 50             	sub    esp,0x50
c0018deb:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018def:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018df9:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018e00:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018e06:	6a 0d                	push   0xd
c0018e08:	6a 00                	push   0x0
c0018e0a:	55                   	push   ebp
c0018e0b:	e8 40 79 fe ff       	call   c0000750 <memset>
c0018e10:	83 c4 10             	add    esp,0x10
c0018e13:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0018e18:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018e1f:	0f 84 22 09 00 00    	je     c0019747 <CPU::detectFeatures()+0x963>
c0018e25:	83 ec 0c             	sub    esp,0xc
c0018e28:	89 ef                	mov    edi,ebp
c0018e2a:	6a 10                	push   0x10
c0018e2c:	e8 f1 fb ff ff       	call   c0018a22 <CPU::cpuidCheckEDX(unsigned int)>
c0018e31:	83 e0 01             	and    eax,0x1
c0018e34:	8d 14 00             	lea    edx,[eax+eax*1]
c0018e37:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e3d:	83 e0 fd             	and    eax,0xfffffffd
c0018e40:	09 d0                	or     eax,edx
c0018e42:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e48:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018e4f:	e8 ce fb ff ff       	call   c0018a22 <CPU::cpuidCheckEDX(unsigned int)>
c0018e54:	83 e0 01             	and    eax,0x1
c0018e57:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018e5e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e64:	83 e0 fb             	and    eax,0xfffffffb
c0018e67:	09 d0                	or     eax,edx
c0018e69:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e6f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018e76:	e8 a7 fb ff ff       	call   c0018a22 <CPU::cpuidCheckEDX(unsigned int)>
c0018e7b:	83 e0 01             	and    eax,0x1
c0018e7e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018e85:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e8b:	83 e0 f7             	and    eax,0xfffffff7
c0018e8e:	09 d0                	or     eax,edx
c0018e90:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e96:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018e9d:	e8 80 fb ff ff       	call   c0018a22 <CPU::cpuidCheckEDX(unsigned int)>
c0018ea2:	83 e0 01             	and    eax,0x1
c0018ea5:	c1 e0 04             	shl    eax,0x4
c0018ea8:	88 c2                	mov    dl,al
c0018eaa:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018eb0:	83 e0 ef             	and    eax,0xffffffef
c0018eb3:	09 d0                	or     eax,edx
c0018eb5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ebb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018ec2:	e8 5b fb ff ff       	call   c0018a22 <CPU::cpuidCheckEDX(unsigned int)>
c0018ec7:	83 e0 01             	and    eax,0x1
c0018eca:	c1 e0 05             	shl    eax,0x5
c0018ecd:	88 c2                	mov    dl,al
c0018ecf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ed5:	83 e0 df             	and    eax,0xffffffdf
c0018ed8:	09 d0                	or     eax,edx
c0018eda:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ee0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018ee7:	e8 36 fb ff ff       	call   c0018a22 <CPU::cpuidCheckEDX(unsigned int)>
c0018eec:	83 e0 01             	and    eax,0x1
c0018eef:	8d 14 00             	lea    edx,[eax+eax*1]
c0018ef2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018ef8:	83 e0 fd             	and    eax,0xfffffffd
c0018efb:	09 d0                	or     eax,edx
c0018efd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f03:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018f0a:	e8 13 fb ff ff       	call   c0018a22 <CPU::cpuidCheckEDX(unsigned int)>
c0018f0f:	83 e0 01             	and    eax,0x1
c0018f12:	c1 e0 06             	shl    eax,0x6
c0018f15:	88 c2                	mov    dl,al
c0018f17:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f1d:	83 e0 bf             	and    eax,0xffffffbf
c0018f20:	09 d0                	or     eax,edx
c0018f22:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f28:	58                   	pop    eax
c0018f29:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f2d:	50                   	push   eax
c0018f2e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f32:	50                   	push   eax
c0018f33:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018f37:	56                   	push   esi
c0018f38:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f3c:	50                   	push   eax
c0018f3d:	6a 00                	push   0x0
c0018f3f:	e8 5a fa ff ff       	call   c001899e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f44:	b8 04 00 00 00       	mov    eax,0x4
c0018f49:	89 c1                	mov    ecx,eax
c0018f4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f4d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018f53:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018f57:	89 c1                	mov    ecx,eax
c0018f59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f5b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018f61:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018f65:	89 c1                	mov    ecx,eax
c0018f67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f69:	83 c4 18             	add    esp,0x18
c0018f6c:	68 2d c1 02 c0       	push   0xc002c12d
c0018f71:	55                   	push   ebp
c0018f72:	e8 21 79 fe ff       	call   c0000898 <strcmp>
c0018f77:	83 c4 10             	add    esp,0x10
c0018f7a:	85 c0                	test   eax,eax
c0018f7c:	75 0f                	jne    c0018f8d <CPU::detectFeatures()+0x1a9>
c0018f7e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018f88:	e9 22 02 00 00       	jmp    c00191af <CPU::detectFeatures()+0x3cb>
c0018f8d:	50                   	push   eax
c0018f8e:	50                   	push   eax
c0018f8f:	68 3a c1 02 c0       	push   0xc002c13a
c0018f94:	55                   	push   ebp
c0018f95:	e8 fe 78 fe ff       	call   c0000898 <strcmp>
c0018f9a:	83 c4 10             	add    esp,0x10
c0018f9d:	85 c0                	test   eax,eax
c0018f9f:	74 dd                	je     c0018f7e <CPU::detectFeatures()+0x19a>
c0018fa1:	50                   	push   eax
c0018fa2:	50                   	push   eax
c0018fa3:	68 47 c1 02 c0       	push   0xc002c147
c0018fa8:	55                   	push   ebp
c0018fa9:	e8 ea 78 fe ff       	call   c0000898 <strcmp>
c0018fae:	83 c4 10             	add    esp,0x10
c0018fb1:	85 c0                	test   eax,eax
c0018fb3:	74 2a                	je     c0018fdf <CPU::detectFeatures()+0x1fb>
c0018fb5:	50                   	push   eax
c0018fb6:	50                   	push   eax
c0018fb7:	68 54 c1 02 c0       	push   0xc002c154
c0018fbc:	55                   	push   ebp
c0018fbd:	e8 d6 78 fe ff       	call   c0000898 <strcmp>
c0018fc2:	83 c4 10             	add    esp,0x10
c0018fc5:	85 c0                	test   eax,eax
c0018fc7:	74 16                	je     c0018fdf <CPU::detectFeatures()+0x1fb>
c0018fc9:	50                   	push   eax
c0018fca:	50                   	push   eax
c0018fcb:	68 61 c1 02 c0       	push   0xc002c161
c0018fd0:	55                   	push   ebp
c0018fd1:	e8 c2 78 fe ff       	call   c0000898 <strcmp>
c0018fd6:	83 c4 10             	add    esp,0x10
c0018fd9:	85 c0                	test   eax,eax
c0018fdb:	74 48                	je     c0019025 <CPU::detectFeatures()+0x241>
c0018fdd:	eb 0f                	jmp    c0018fee <CPU::detectFeatures()+0x20a>
c0018fdf:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018fe9:	e9 c1 01 00 00       	jmp    c00191af <CPU::detectFeatures()+0x3cb>
c0018fee:	50                   	push   eax
c0018fef:	50                   	push   eax
c0018ff0:	68 6e c1 02 c0       	push   0xc002c16e
c0018ff5:	55                   	push   ebp
c0018ff6:	e8 9d 78 fe ff       	call   c0000898 <strcmp>
c0018ffb:	83 c4 10             	add    esp,0x10
c0018ffe:	85 c0                	test   eax,eax
c0019000:	74 23                	je     c0019025 <CPU::detectFeatures()+0x241>
c0019002:	57                   	push   edi
c0019003:	57                   	push   edi
c0019004:	68 7b c1 02 c0       	push   0xc002c17b
c0019009:	55                   	push   ebp
c001900a:	e8 89 78 fe ff       	call   c0000898 <strcmp>
c001900f:	83 c4 10             	add    esp,0x10
c0019012:	85 c0                	test   eax,eax
c0019014:	75 1e                	jne    c0019034 <CPU::detectFeatures()+0x250>
c0019016:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019020:	e9 8a 01 00 00       	jmp    c00191af <CPU::detectFeatures()+0x3cb>
c0019025:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001902f:	e9 7b 01 00 00       	jmp    c00191af <CPU::detectFeatures()+0x3cb>
c0019034:	56                   	push   esi
c0019035:	56                   	push   esi
c0019036:	68 88 c1 02 c0       	push   0xc002c188
c001903b:	55                   	push   ebp
c001903c:	e8 57 78 fe ff       	call   c0000898 <strcmp>
c0019041:	83 c4 10             	add    esp,0x10
c0019044:	85 c0                	test   eax,eax
c0019046:	75 0f                	jne    c0019057 <CPU::detectFeatures()+0x273>
c0019048:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019052:	e9 58 01 00 00       	jmp    c00191af <CPU::detectFeatures()+0x3cb>
c0019057:	51                   	push   ecx
c0019058:	51                   	push   ecx
c0019059:	68 47 c1 02 c0       	push   0xc002c147
c001905e:	55                   	push   ebp
c001905f:	e8 34 78 fe ff       	call   c0000898 <strcmp>
c0019064:	83 c4 10             	add    esp,0x10
c0019067:	85 c0                	test   eax,eax
c0019069:	75 0f                	jne    c001907a <CPU::detectFeatures()+0x296>
c001906b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019075:	e9 35 01 00 00       	jmp    c00191af <CPU::detectFeatures()+0x3cb>
c001907a:	52                   	push   edx
c001907b:	52                   	push   edx
c001907c:	68 95 c1 02 c0       	push   0xc002c195
c0019081:	55                   	push   ebp
c0019082:	e8 11 78 fe ff       	call   c0000898 <strcmp>
c0019087:	83 c4 10             	add    esp,0x10
c001908a:	85 c0                	test   eax,eax
c001908c:	75 0f                	jne    c001909d <CPU::detectFeatures()+0x2b9>
c001908e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019098:	e9 12 01 00 00       	jmp    c00191af <CPU::detectFeatures()+0x3cb>
c001909d:	50                   	push   eax
c001909e:	50                   	push   eax
c001909f:	68 a2 c1 02 c0       	push   0xc002c1a2
c00190a4:	55                   	push   ebp
c00190a5:	e8 ee 77 fe ff       	call   c0000898 <strcmp>
c00190aa:	83 c4 10             	add    esp,0x10
c00190ad:	85 c0                	test   eax,eax
c00190af:	75 0f                	jne    c00190c0 <CPU::detectFeatures()+0x2dc>
c00190b1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00190bb:	e9 ef 00 00 00       	jmp    c00191af <CPU::detectFeatures()+0x3cb>
c00190c0:	50                   	push   eax
c00190c1:	50                   	push   eax
c00190c2:	68 af c1 02 c0       	push   0xc002c1af
c00190c7:	55                   	push   ebp
c00190c8:	e8 cb 77 fe ff       	call   c0000898 <strcmp>
c00190cd:	83 c4 10             	add    esp,0x10
c00190d0:	85 c0                	test   eax,eax
c00190d2:	75 0f                	jne    c00190e3 <CPU::detectFeatures()+0x2ff>
c00190d4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00190de:	e9 cc 00 00 00       	jmp    c00191af <CPU::detectFeatures()+0x3cb>
c00190e3:	50                   	push   eax
c00190e4:	50                   	push   eax
c00190e5:	68 bc c1 02 c0       	push   0xc002c1bc
c00190ea:	55                   	push   ebp
c00190eb:	e8 a8 77 fe ff       	call   c0000898 <strcmp>
c00190f0:	83 c4 10             	add    esp,0x10
c00190f3:	85 c0                	test   eax,eax
c00190f5:	75 0f                	jne    c0019106 <CPU::detectFeatures()+0x322>
c00190f7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019101:	e9 a9 00 00 00       	jmp    c00191af <CPU::detectFeatures()+0x3cb>
c0019106:	50                   	push   eax
c0019107:	50                   	push   eax
c0019108:	68 c9 c1 02 c0       	push   0xc002c1c9
c001910d:	55                   	push   ebp
c001910e:	e8 85 77 fe ff       	call   c0000898 <strcmp>
c0019113:	83 c4 10             	add    esp,0x10
c0019116:	85 c0                	test   eax,eax
c0019118:	75 0f                	jne    c0019129 <CPU::detectFeatures()+0x345>
c001911a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019124:	e9 86 00 00 00       	jmp    c00191af <CPU::detectFeatures()+0x3cb>
c0019129:	50                   	push   eax
c001912a:	50                   	push   eax
c001912b:	68 d6 c1 02 c0       	push   0xc002c1d6
c0019130:	55                   	push   ebp
c0019131:	e8 62 77 fe ff       	call   c0000898 <strcmp>
c0019136:	83 c4 10             	add    esp,0x10
c0019139:	85 c0                	test   eax,eax
c001913b:	75 0c                	jne    c0019149 <CPU::detectFeatures()+0x365>
c001913d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019147:	eb 66                	jmp    c00191af <CPU::detectFeatures()+0x3cb>
c0019149:	50                   	push   eax
c001914a:	50                   	push   eax
c001914b:	68 e3 c1 02 c0       	push   0xc002c1e3
c0019150:	55                   	push   ebp
c0019151:	e8 42 77 fe ff       	call   c0000898 <strcmp>
c0019156:	83 c4 10             	add    esp,0x10
c0019159:	85 c0                	test   eax,eax
c001915b:	75 0c                	jne    c0019169 <CPU::detectFeatures()+0x385>
c001915d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019167:	eb 46                	jmp    c00191af <CPU::detectFeatures()+0x3cb>
c0019169:	57                   	push   edi
c001916a:	57                   	push   edi
c001916b:	68 f0 c1 02 c0       	push   0xc002c1f0
c0019170:	55                   	push   ebp
c0019171:	e8 22 77 fe ff       	call   c0000898 <strcmp>
c0019176:	83 c4 10             	add    esp,0x10
c0019179:	85 c0                	test   eax,eax
c001917b:	74 e0                	je     c001915d <CPU::detectFeatures()+0x379>
c001917d:	56                   	push   esi
c001917e:	56                   	push   esi
c001917f:	68 fd c1 02 c0       	push   0xc002c1fd
c0019184:	55                   	push   ebp
c0019185:	e8 0e 77 fe ff       	call   c0000898 <strcmp>
c001918a:	83 c4 10             	add    esp,0x10
c001918d:	85 c0                	test   eax,eax
c001918f:	74 cc                	je     c001915d <CPU::detectFeatures()+0x379>
c0019191:	51                   	push   ecx
c0019192:	51                   	push   ecx
c0019193:	68 0a c2 02 c0       	push   0xc002c20a
c0019198:	55                   	push   ebp
c0019199:	e8 fa 76 fe ff       	call   c0000898 <strcmp>
c001919e:	83 c4 10             	add    esp,0x10
c00191a1:	85 c0                	test   eax,eax
c00191a3:	74 b8                	je     c001915d <CPU::detectFeatures()+0x379>
c00191a5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00191af:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00191b4:	0f 86 be 00 00 00    	jbe    c0019278 <CPU::detectFeatures()+0x494>
c00191ba:	83 ec 0c             	sub    esp,0xc
c00191bd:	68 80 00 00 00       	push   0x80
c00191c2:	e8 b7 f8 ff ff       	call   c0018a7e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00191c7:	83 e0 01             	and    eax,0x1
c00191ca:	c1 e0 06             	shl    eax,0x6
c00191cd:	88 c2                	mov    dl,al
c00191cf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191d5:	83 e0 bf             	and    eax,0xffffffbf
c00191d8:	09 d0                	or     eax,edx
c00191da:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191e0:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00191e7:	e8 92 f8 ff ff       	call   c0018a7e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00191ec:	83 e0 01             	and    eax,0x1
c00191ef:	c1 e0 04             	shl    eax,0x4
c00191f2:	88 c2                	mov    dl,al
c00191f4:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00191fa:	83 e0 ef             	and    eax,0xffffffef
c00191fd:	09 d0                	or     eax,edx
c00191ff:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019205:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001920c:	e8 6d f8 ff ff       	call   c0018a7e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019211:	c1 e0 07             	shl    eax,0x7
c0019214:	88 c2                	mov    dl,al
c0019216:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001921c:	83 e0 7f             	and    eax,0x7f
c001921f:	09 d0                	or     eax,edx
c0019221:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019227:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001922e:	e8 79 f8 ff ff       	call   c0018aac <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019233:	83 e0 01             	and    eax,0x1
c0019236:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001923d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019243:	83 e0 f7             	and    eax,0xfffffff7
c0019246:	09 d0                	or     eax,edx
c0019248:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001924e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019255:	e8 52 f8 ff ff       	call   c0018aac <CPU::cpuidCheckExtendedECX(unsigned int)>
c001925a:	83 c4 10             	add    esp,0x10
c001925d:	83 e0 01             	and    eax,0x1
c0019260:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019267:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001926d:	83 e0 fb             	and    eax,0xfffffffb
c0019270:	09 d0                	or     eax,edx
c0019272:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019278:	83 ec 0c             	sub    esp,0xc
c001927b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001927f:	50                   	push   eax
c0019280:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019284:	50                   	push   eax
c0019285:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019289:	56                   	push   esi
c001928a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001928e:	50                   	push   eax
c001928f:	6a 01                	push   0x1
c0019291:	e8 08 f7 ff ff       	call   c001899e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019296:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001929a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00192a0:	88 ca                	mov    dl,cl
c00192a2:	83 e0 f0             	and    eax,0xfffffff0
c00192a5:	83 e2 0f             	and    edx,0xf
c00192a8:	09 d0                	or     eax,edx
c00192aa:	88 ca                	mov    dl,cl
c00192ac:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00192b2:	c0 ea 04             	shr    dl,0x4
c00192b5:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00192b9:	0f b6 c2             	movzx  eax,dl
c00192bc:	83 c4 20             	add    esp,0x20
c00192bf:	c1 e0 06             	shl    eax,0x6
c00192c2:	89 c7                	mov    edi,eax
c00192c4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192ca:	66 25 3f c0          	and    ax,0xc03f
c00192ce:	09 f8                	or     eax,edi
c00192d0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00192d7:	89 c8                	mov    eax,ecx
c00192d9:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00192e0:	c1 e8 08             	shr    eax,0x8
c00192e3:	83 e5 3f             	and    ebp,0x3f
c00192e6:	83 e0 0f             	and    eax,0xf
c00192e9:	89 c7                	mov    edi,eax
c00192eb:	c1 e7 06             	shl    edi,0x6
c00192ee:	09 ef                	or     edi,ebp
c00192f0:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00192f7:	89 fa                	mov    edx,edi
c00192f9:	83 e5 c0             	and    ebp,0xffffffc0
c00192fc:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019302:	88 c2                	mov    dl,al
c0019304:	c0 ea 02             	shr    dl,0x2
c0019307:	89 d7                	mov    edi,edx
c0019309:	09 ef                	or     edi,ebp
c001930b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019311:	89 fa                	mov    edx,edi
c0019313:	83 e5 cf             	and    ebp,0xffffffcf
c0019316:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001931c:	89 cf                	mov    edi,ecx
c001931e:	c1 ef 0c             	shr    edi,0xc
c0019321:	83 e7 03             	and    edi,0x3
c0019324:	c1 e7 04             	shl    edi,0x4
c0019327:	09 ef                	or     edi,ebp
c0019329:	3c 06                	cmp    al,0x6
c001932b:	89 fa                	mov    edx,edi
c001932d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019333:	74 04                	je     c0019339 <CPU::detectFeatures()+0x555>
c0019335:	3c 0f                	cmp    al,0xf
c0019337:	75 5c                	jne    c0019395 <CPU::detectFeatures()+0x5b1>
c0019339:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001933d:	89 cf                	mov    edi,ecx
c001933f:	c1 ef 10             	shr    edi,0x10
c0019342:	c1 e7 04             	shl    edi,0x4
c0019345:	09 fa                	or     edx,edi
c0019347:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001934d:	0f b6 d2             	movzx  edx,dl
c0019350:	66 81 e7 3f c0       	and    di,0xc03f
c0019355:	c1 e2 06             	shl    edx,0x6
c0019358:	09 fa                	or     edx,edi
c001935a:	3c 0f                	cmp    al,0xf
c001935c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019363:	75 30                	jne    c0019395 <CPU::detectFeatures()+0x5b1>
c0019365:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001936b:	c1 e9 14             	shr    ecx,0x14
c001936e:	83 e0 3f             	and    eax,0x3f
c0019371:	83 c1 0f             	add    ecx,0xf
c0019374:	88 ca                	mov    dl,cl
c0019376:	c0 e9 02             	shr    cl,0x2
c0019379:	c1 e2 06             	shl    edx,0x6
c001937c:	09 d0                	or     eax,edx
c001937e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019384:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001938a:	83 e0 c0             	and    eax,0xffffffc0
c001938d:	09 c1                	or     ecx,eax
c001938f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019395:	83 ec 0c             	sub    esp,0xc
c0019398:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001939f:	8d 44 24 28          	lea    eax,[esp+0x28]
c00193a3:	50                   	push   eax
c00193a4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00193a8:	55                   	push   ebp
c00193a9:	56                   	push   esi
c00193aa:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00193ae:	57                   	push   edi
c00193af:	68 00 00 00 80       	push   0x80000000
c00193b4:	e8 e5 f5 ff ff       	call   c001899e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193b9:	83 c4 20             	add    esp,0x20
c00193bc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00193c4:	76 22                	jbe    c00193e8 <CPU::detectFeatures()+0x604>
c00193c6:	83 ec 0c             	sub    esp,0xc
c00193c9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00193cd:	50                   	push   eax
c00193ce:	55                   	push   ebp
c00193cf:	56                   	push   esi
c00193d0:	57                   	push   edi
c00193d1:	68 01 00 00 80       	push   0x80000001
c00193d6:	e8 c3 f5 ff ff       	call   c001899e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193db:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00193e5:	83 c4 20             	add    esp,0x20
c00193e8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00193ee:	83 f8 01             	cmp    eax,0x1
c00193f1:	75 6f                	jne    c0019462 <CPU::detectFeatures()+0x67e>
c00193f3:	51                   	push   ecx
c00193f4:	51                   	push   ecx
c00193f5:	68 16 c2 02 c0       	push   0xc002c216
c00193fa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00193fe:	56                   	push   esi
c00193ff:	e8 08 74 fe ff       	call   c000080c <strcpy>
c0019404:	5f                   	pop    edi
c0019405:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001940b:	5d                   	pop    ebp
c001940c:	66 c1 e8 06          	shr    ax,0x6
c0019410:	0f b6 c0             	movzx  eax,al
c0019413:	50                   	push   eax
c0019414:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001941a:	c1 e8 0e             	shr    eax,0xe
c001941d:	0f b6 c0             	movzx  eax,al
c0019420:	50                   	push   eax
c0019421:	e8 22 f2 ff ff       	call   c0018648 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019426:	5a                   	pop    edx
c0019427:	59                   	pop    ecx
c0019428:	50                   	push   eax
c0019429:	56                   	push   esi
c001942a:	e8 1d 75 fe ff       	call   c000094c <strcat>
c001942f:	5f                   	pop    edi
c0019430:	5d                   	pop    ebp
c0019431:	56                   	push   esi
c0019432:	53                   	push   ebx
c0019433:	e8 c0 aa ff ff       	call   c0013ef8 <Device::setName(char const*)>
c0019438:	58                   	pop    eax
c0019439:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001943f:	5a                   	pop    edx
c0019440:	68 1d c2 02 c0       	push   0xc002c21d
c0019445:	50                   	push   eax
c0019446:	e8 4d 74 fe ff       	call   c0000898 <strcmp>
c001944b:	83 c4 10             	add    esp,0x10
c001944e:	85 c0                	test   eax,eax
c0019450:	0f 85 71 03 00 00    	jne    c00197c7 <CPU::detectFeatures()+0x9e3>
c0019456:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001945d:	e9 65 03 00 00       	jmp    c00197c7 <CPU::detectFeatures()+0x9e3>
c0019462:	83 f8 02             	cmp    eax,0x2
c0019465:	0f 85 b5 00 00 00    	jne    c0019520 <CPU::detectFeatures()+0x73c>
c001946b:	57                   	push   edi
c001946c:	57                   	push   edi
c001946d:	68 2f c2 02 c0       	push   0xc002c22f
c0019472:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019476:	56                   	push   esi
c0019477:	e8 90 73 fe ff       	call   c000080c <strcpy>
c001947c:	5d                   	pop    ebp
c001947d:	58                   	pop    eax
c001947e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019484:	66 c1 e8 06          	shr    ax,0x6
c0019488:	0f b6 c0             	movzx  eax,al
c001948b:	50                   	push   eax
c001948c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019492:	c1 e8 0e             	shr    eax,0xe
c0019495:	0f b6 c0             	movzx  eax,al
c0019498:	50                   	push   eax
c0019499:	e8 16 f0 ff ff       	call   c00184b4 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001949e:	5a                   	pop    edx
c001949f:	59                   	pop    ecx
c00194a0:	50                   	push   eax
c00194a1:	56                   	push   esi
c00194a2:	e8 a5 74 fe ff       	call   c000094c <strcat>
c00194a7:	5f                   	pop    edi
c00194a8:	5d                   	pop    ebp
c00194a9:	56                   	push   esi
c00194aa:	53                   	push   ebx
c00194ab:	e8 48 aa ff ff       	call   c0013ef8 <Device::setName(char const*)>
c00194b0:	58                   	pop    eax
c00194b1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00194b7:	5a                   	pop    edx
c00194b8:	68 34 c2 02 c0       	push   0xc002c234
c00194bd:	50                   	push   eax
c00194be:	e8 d5 73 fe ff       	call   c0000898 <strcmp>
c00194c3:	83 c4 10             	add    esp,0x10
c00194c6:	85 c0                	test   eax,eax
c00194c8:	75 20                	jne    c00194ea <CPU::detectFeatures()+0x706>
c00194ca:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c00194d0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00194d6:	a8 01                	test   al,0x1
c00194d8:	74 10                	je     c00194ea <CPU::detectFeatures()+0x706>
c00194da:	83 e0 fe             	and    eax,0xfffffffe
c00194dd:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00194e3:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00194ea:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194f0:	c1 e8 0e             	shr    eax,0xe
c00194f3:	3c 05                	cmp    al,0x5
c00194f5:	0f 85 cc 02 00 00    	jne    c00197c7 <CPU::detectFeatures()+0x9e3>
c00194fb:	56                   	push   esi
c00194fc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019502:	83 e0 0f             	and    eax,0xf
c0019505:	50                   	push   eax
c0019506:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001950c:	66 c1 e8 06          	shr    ax,0x6
c0019510:	0f b6 c0             	movzx  eax,al
c0019513:	50                   	push   eax
c0019514:	6a 05                	push   0x5
c0019516:	e8 0f f4 ff ff       	call   c001892a <CPU::AMD_K6_writeback(int, int, int)>
c001951b:	e9 1f 02 00 00       	jmp    c001973f <CPU::detectFeatures()+0x95b>
c0019520:	8d 50 fd             	lea    edx,[eax-0x3]
c0019523:	83 fa 01             	cmp    edx,0x1
c0019526:	76 09                	jbe    c0019531 <CPU::detectFeatures()+0x74d>
c0019528:	83 f8 06             	cmp    eax,0x6
c001952b:	0f 85 91 01 00 00    	jne    c00196c2 <CPU::detectFeatures()+0x8de>
c0019531:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019537:	c1 ea 0e             	shr    edx,0xe
c001953a:	80 fa 05             	cmp    dl,0x5
c001953d:	75 7b                	jne    c00195ba <CPU::detectFeatures()+0x7d6>
c001953f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019545:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001954a:	66 81 fa 00 01       	cmp    dx,0x100
c001954f:	75 0c                	jne    c001955d <CPU::detectFeatures()+0x779>
c0019551:	51                   	push   ecx
c0019552:	51                   	push   ecx
c0019553:	68 3b c2 02 c0       	push   0xc002c23b
c0019558:	e9 dc 01 00 00       	jmp    c0019739 <CPU::detectFeatures()+0x955>
c001955d:	66 81 fa 00 02       	cmp    dx,0x200
c0019562:	75 0c                	jne    c0019570 <CPU::detectFeatures()+0x78c>
c0019564:	52                   	push   edx
c0019565:	52                   	push   edx
c0019566:	68 4e c2 02 c0       	push   0xc002c24e
c001956b:	e9 c9 01 00 00       	jmp    c0019739 <CPU::detectFeatures()+0x955>
c0019570:	66 81 fa 40 02       	cmp    dx,0x240
c0019575:	75 0c                	jne    c0019583 <CPU::detectFeatures()+0x79f>
c0019577:	50                   	push   eax
c0019578:	50                   	push   eax
c0019579:	68 60 c2 02 c0       	push   0xc002c260
c001957e:	e9 b6 01 00 00       	jmp    c0019739 <CPU::detectFeatures()+0x955>
c0019583:	83 f8 06             	cmp    eax,0x6
c0019586:	75 0c                	jne    c0019594 <CPU::detectFeatures()+0x7b0>
c0019588:	50                   	push   eax
c0019589:	50                   	push   eax
c001958a:	68 72 c2 02 c0       	push   0xc002c272
c001958f:	e9 a5 01 00 00       	jmp    c0019739 <CPU::detectFeatures()+0x955>
c0019594:	83 f8 04             	cmp    eax,0x4
c0019597:	75 0c                	jne    c00195a5 <CPU::detectFeatures()+0x7c1>
c0019599:	50                   	push   eax
c001959a:	50                   	push   eax
c001959b:	68 7e c2 02 c0       	push   0xc002c27e
c00195a0:	e9 94 01 00 00       	jmp    c0019739 <CPU::detectFeatures()+0x955>
c00195a5:	83 f8 03             	cmp    eax,0x3
c00195a8:	0f 85 19 02 00 00    	jne    c00197c7 <CPU::detectFeatures()+0x9e3>
c00195ae:	50                   	push   eax
c00195af:	50                   	push   eax
c00195b0:	68 86 c2 02 c0       	push   0xc002c286
c00195b5:	e9 7f 01 00 00       	jmp    c0019739 <CPU::detectFeatures()+0x955>
c00195ba:	80 fa 06             	cmp    dl,0x6
c00195bd:	0f 85 db 00 00 00    	jne    c001969e <CPU::detectFeatures()+0x8ba>
c00195c3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00195c9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00195ce:	66 81 fa 80 01       	cmp    dx,0x180
c00195d3:	75 0c                	jne    c00195e1 <CPU::detectFeatures()+0x7fd>
c00195d5:	50                   	push   eax
c00195d6:	50                   	push   eax
c00195d7:	68 91 c2 02 c0       	push   0xc002c291
c00195dc:	e9 58 01 00 00       	jmp    c0019739 <CPU::detectFeatures()+0x955>
c00195e1:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00195e7:	66 f7 c1 80 ff       	test   cx,0xff80
c00195ec:	75 0c                	jne    c00195fa <CPU::detectFeatures()+0x816>
c00195ee:	50                   	push   eax
c00195ef:	50                   	push   eax
c00195f0:	68 a1 c2 02 c0       	push   0xc002c2a1
c00195f5:	e9 3f 01 00 00       	jmp    c0019739 <CPU::detectFeatures()+0x955>
c00195fa:	66 81 fa 40 02       	cmp    dx,0x240
c00195ff:	75 0c                	jne    c001960d <CPU::detectFeatures()+0x829>
c0019601:	55                   	push   ebp
c0019602:	55                   	push   ebp
c0019603:	68 a8 c2 02 c0       	push   0xc002c2a8
c0019608:	e9 2c 01 00 00       	jmp    c0019739 <CPU::detectFeatures()+0x955>
c001960d:	66 81 fa 80 02       	cmp    dx,0x280
c0019612:	75 0c                	jne    c0019620 <CPU::detectFeatures()+0x83c>
c0019614:	57                   	push   edi
c0019615:	57                   	push   edi
c0019616:	68 b1 c2 02 c0       	push   0xc002c2b1
c001961b:	e9 19 01 00 00       	jmp    c0019739 <CPU::detectFeatures()+0x955>
c0019620:	66 81 fa 40 03       	cmp    dx,0x340
c0019625:	74 ed                	je     c0019614 <CPU::detectFeatures()+0x830>
c0019627:	66 81 fa c0 03       	cmp    dx,0x3c0
c001962c:	75 0c                	jne    c001963a <CPU::detectFeatures()+0x856>
c001962e:	56                   	push   esi
c001962f:	56                   	push   esi
c0019630:	68 b8 c2 02 c0       	push   0xc002c2b8
c0019635:	e9 ff 00 00 00       	jmp    c0019739 <CPU::detectFeatures()+0x955>
c001963a:	83 f8 06             	cmp    eax,0x6
c001963d:	0f 84 45 ff ff ff    	je     c0019588 <CPU::detectFeatures()+0x7a4>
c0019643:	83 f8 04             	cmp    eax,0x4
c0019646:	0f 84 4d ff ff ff    	je     c0019599 <CPU::detectFeatures()+0x7b5>
c001964c:	83 f8 03             	cmp    eax,0x3
c001964f:	0f 85 72 01 00 00    	jne    c00197c7 <CPU::detectFeatures()+0x9e3>
c0019655:	51                   	push   ecx
c0019656:	51                   	push   ecx
c0019657:	68 c1 c2 02 c0       	push   0xc002c2c1
c001965c:	53                   	push   ebx
c001965d:	e8 96 a8 ff ff       	call   c0013ef8 <Device::setName(char const*)>
c0019662:	b1 c1                	mov    cl,0xc1
c0019664:	88 c8                	mov    al,cl
c0019666:	e6 22                	out    0x22,al
c0019668:	e4 23                	in     al,0x23
c001966a:	88 c2                	mov    dl,al
c001966c:	88 c8                	mov    al,cl
c001966e:	e6 22                	out    0x22,al
c0019670:	88 d0                	mov    al,dl
c0019672:	83 c8 10             	or     eax,0x10
c0019675:	e6 23                	out    0x23,al
c0019677:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001967e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019681:	89 d0                	mov    eax,edx
c0019683:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019689:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001968d:	40                   	inc    eax
c001968e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019694:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019699:	e9 a1 00 00 00       	jmp    c001973f <CPU::detectFeatures()+0x95b>
c001969e:	83 f8 06             	cmp    eax,0x6
c00196a1:	0f 84 e1 fe ff ff    	je     c0019588 <CPU::detectFeatures()+0x7a4>
c00196a7:	83 f8 04             	cmp    eax,0x4
c00196aa:	0f 84 e9 fe ff ff    	je     c0019599 <CPU::detectFeatures()+0x7b5>
c00196b0:	83 f8 03             	cmp    eax,0x3
c00196b3:	0f 85 0e 01 00 00    	jne    c00197c7 <CPU::detectFeatures()+0x9e3>
c00196b9:	52                   	push   edx
c00196ba:	52                   	push   edx
c00196bb:	68 cc c2 02 c0       	push   0xc002c2cc
c00196c0:	eb 77                	jmp    c0019739 <CPU::detectFeatures()+0x955>
c00196c2:	83 f8 07             	cmp    eax,0x7
c00196c5:	75 09                	jne    c00196d0 <CPU::detectFeatures()+0x8ec>
c00196c7:	50                   	push   eax
c00196c8:	50                   	push   eax
c00196c9:	68 d6 c2 02 c0       	push   0xc002c2d6
c00196ce:	eb 69                	jmp    c0019739 <CPU::detectFeatures()+0x955>
c00196d0:	83 f8 0a             	cmp    eax,0xa
c00196d3:	75 09                	jne    c00196de <CPU::detectFeatures()+0x8fa>
c00196d5:	50                   	push   eax
c00196d6:	50                   	push   eax
c00196d7:	68 e1 c2 02 c0       	push   0xc002c2e1
c00196dc:	eb 5b                	jmp    c0019739 <CPU::detectFeatures()+0x955>
c00196de:	83 f8 0b             	cmp    eax,0xb
c00196e1:	75 09                	jne    c00196ec <CPU::detectFeatures()+0x908>
c00196e3:	50                   	push   eax
c00196e4:	50                   	push   eax
c00196e5:	68 e9 c2 02 c0       	push   0xc002c2e9
c00196ea:	eb 4d                	jmp    c0019739 <CPU::detectFeatures()+0x955>
c00196ec:	83 f8 08             	cmp    eax,0x8
c00196ef:	75 09                	jne    c00196fa <CPU::detectFeatures()+0x916>
c00196f1:	50                   	push   eax
c00196f2:	50                   	push   eax
c00196f3:	68 f2 c2 02 c0       	push   0xc002c2f2
c00196f8:	eb 3f                	jmp    c0019739 <CPU::detectFeatures()+0x955>
c00196fa:	83 f8 09             	cmp    eax,0x9
c00196fd:	75 09                	jne    c0019708 <CPU::detectFeatures()+0x924>
c00196ff:	50                   	push   eax
c0019700:	50                   	push   eax
c0019701:	68 fa c2 02 c0       	push   0xc002c2fa
c0019706:	eb 31                	jmp    c0019739 <CPU::detectFeatures()+0x955>
c0019708:	83 f8 05             	cmp    eax,0x5
c001970b:	75 09                	jne    c0019716 <CPU::detectFeatures()+0x932>
c001970d:	50                   	push   eax
c001970e:	50                   	push   eax
c001970f:	68 02 c3 02 c0       	push   0xc002c302
c0019714:	eb 23                	jmp    c0019739 <CPU::detectFeatures()+0x955>
c0019716:	83 f8 0c             	cmp    eax,0xc
c0019719:	75 09                	jne    c0019724 <CPU::detectFeatures()+0x940>
c001971b:	55                   	push   ebp
c001971c:	55                   	push   ebp
c001971d:	68 10 c3 02 c0       	push   0xc002c310
c0019722:	eb 15                	jmp    c0019739 <CPU::detectFeatures()+0x955>
c0019724:	83 f8 0d             	cmp    eax,0xd
c0019727:	75 09                	jne    c0019732 <CPU::detectFeatures()+0x94e>
c0019729:	57                   	push   edi
c001972a:	57                   	push   edi
c001972b:	68 1b c3 02 c0       	push   0xc002c31b
c0019730:	eb 07                	jmp    c0019739 <CPU::detectFeatures()+0x955>
c0019732:	56                   	push   esi
c0019733:	56                   	push   esi
c0019734:	68 2f c3 02 c0       	push   0xc002c32f
c0019739:	53                   	push   ebx
c001973a:	e8 b9 a7 ff ff       	call   c0013ef8 <Device::setName(char const*)>
c001973f:	83 c4 10             	add    esp,0x10
c0019742:	e9 80 00 00 00       	jmp    c00197c7 <CPU::detectFeatures()+0x9e3>
c0019747:	51                   	push   ecx
c0019748:	51                   	push   ecx
c0019749:	68 7b c1 02 c0       	push   0xc002c17b
c001974e:	55                   	push   ebp
c001974f:	e8 b8 70 fe ff       	call   c000080c <strcpy>
c0019754:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001975e:	e8 4b 6b fe ff       	call   c00002ae <is486>
c0019763:	83 c4 10             	add    esp,0x10
c0019766:	85 c0                	test   eax,eax
c0019768:	74 2b                	je     c0019795 <CPU::detectFeatures()+0x9b1>
c001976a:	52                   	push   edx
c001976b:	52                   	push   edx
c001976c:	68 3b c3 02 c0       	push   0xc002c33b
c0019771:	53                   	push   ebx
c0019772:	e8 81 a7 ff ff       	call   c0013ef8 <Device::setName(char const*)>
c0019777:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001977e:	0f 20 c0             	mov    eax,cr0
c0019781:	83 e0 14             	and    eax,0x14
c0019784:	83 c4 10             	add    esp,0x10
c0019787:	83 f8 04             	cmp    eax,0x4
c001978a:	75 1f                	jne    c00197ab <CPU::detectFeatures()+0x9c7>
c001978c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019793:	eb 32                	jmp    c00197c7 <CPU::detectFeatures()+0x9e3>
c0019795:	50                   	push   eax
c0019796:	50                   	push   eax
c0019797:	68 46 c3 02 c0       	push   0xc002c346
c001979c:	53                   	push   ebx
c001979d:	e8 56 a7 ff ff       	call   c0013ef8 <Device::setName(char const*)>
c00197a2:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00197a9:	eb d3                	jmp    c001977e <CPU::detectFeatures()+0x99a>
c00197ab:	e8 d9 6a fe ff       	call   c0000289 <hasLegacyFPU>
c00197b0:	83 e0 01             	and    eax,0x1
c00197b3:	8d 14 00             	lea    edx,[eax+eax*1]
c00197b6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00197bc:	83 e0 fd             	and    eax,0xfffffffd
c00197bf:	09 d0                	or     eax,edx
c00197c1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00197c7:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00197ce:	83 c4 4c             	add    esp,0x4c
c00197d1:	5b                   	pop    ebx
c00197d2:	5e                   	pop    esi
c00197d3:	5f                   	pop    edi
c00197d4:	5d                   	pop    ebp
c00197d5:	c3                   	ret    

c00197d6 <CPU::setupSMEP()>:
c00197d6:	0f 20 e0             	mov    eax,cr4
c00197d9:	0d 00 00 10 00       	or     eax,0x100000
c00197de:	0f 22 e0             	mov    cr4,eax
c00197e1:	c3                   	ret    

c00197e2 <CPU::setupUMIP()>:
c00197e2:	0f 20 e0             	mov    eax,cr4
c00197e5:	80 cc 08             	or     ah,0x8
c00197e8:	0f 22 e0             	mov    cr4,eax
c00197eb:	c3                   	ret    

c00197ec <CPU::setupTSC()>:
c00197ec:	0f 20 e0             	mov    eax,cr4
c00197ef:	83 c8 04             	or     eax,0x4
c00197f2:	0f 22 e0             	mov    cr4,eax
c00197f5:	c3                   	ret    

c00197f6 <CPU::setupLargePages()>:
c00197f6:	0f 20 e0             	mov    eax,cr4
c00197f9:	83 c8 10             	or     eax,0x10
c00197fc:	0f 22 e0             	mov    cr4,eax
c00197ff:	c3                   	ret    

c0019800 <CPU::setupPAT()>:
c0019800:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0019805:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001980c:	74 2c                	je     c001983a <CPU::setupPAT()+0x3a>
c001980e:	53                   	push   ebx
c001980f:	83 ec 10             	sub    esp,0x10
c0019812:	68 77 02 00 00       	push   0x277
c0019817:	50                   	push   eax
c0019818:	e8 15 56 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c001981d:	83 e2 f8             	and    edx,0xfffffff8
c0019820:	83 ca 01             	or     edx,0x1
c0019823:	52                   	push   edx
c0019824:	50                   	push   eax
c0019825:	68 77 02 00 00       	push   0x277
c001982a:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c0019830:	e8 29 56 ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c0019835:	83 c4 28             	add    esp,0x28
c0019838:	5b                   	pop    ebx
c0019839:	c3                   	ret    
c001983a:	c3                   	ret    
c001983b:	90                   	nop

c001983c <CPU::setupMTRR()>:
c001983c:	c3                   	ret    
c001983d:	90                   	nop

c001983e <CPU::setupGlobalPages()>:
c001983e:	0f 20 e0             	mov    eax,cr4
c0019841:	0c 80                	or     al,0x80
c0019843:	0f 22 e0             	mov    cr4,eax
c0019846:	c3                   	ret    
c0019847:	90                   	nop

c0019848 <CPU::allowUsermodeDataAccess()>:
c0019848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001984c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019853:	74 03                	je     c0019858 <CPU::allowUsermodeDataAccess()+0x10>
c0019855:	0f 01 cb             	stac   
c0019858:	c3                   	ret    
c0019859:	90                   	nop

c001985a <CPU::prohibitUsermodeDataAccess()>:
c001985a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001985e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019865:	74 03                	je     c001986a <CPU::prohibitUsermodeDataAccess()+0x10>
c0019867:	0f 01 ca             	clac   
c001986a:	c3                   	ret    
c001986b:	90                   	nop

c001986c <CPU::setupSMAP()>:
c001986c:	0f 20 e0             	mov    eax,cr4
c001986f:	0d 00 00 20 00       	or     eax,0x200000
c0019874:	0f 22 e0             	mov    cr4,eax
c0019877:	eb e1                	jmp    c001985a <CPU::prohibitUsermodeDataAccess()>
c0019879:	90                   	nop

c001987a <CPU::setupFeatures()>:
c001987a:	83 ec 0c             	sub    esp,0xc
c001987d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019881:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019888:	74 07                	je     c0019891 <CPU::setupFeatures()+0x17>
c001988a:	52                   	push   edx
c001988b:	e8 46 ff ff ff       	call   c00197d6 <CPU::setupSMEP()>
c0019890:	58                   	pop    eax
c0019891:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019898:	74 07                	je     c00198a1 <CPU::setupFeatures()+0x27>
c001989a:	52                   	push   edx
c001989b:	e8 cc ff ff ff       	call   c001986c <CPU::setupSMAP()>
c00198a0:	58                   	pop    eax
c00198a1:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00198a8:	74 07                	je     c00198b1 <CPU::setupFeatures()+0x37>
c00198aa:	52                   	push   edx
c00198ab:	e8 32 ff ff ff       	call   c00197e2 <CPU::setupUMIP()>
c00198b0:	58                   	pop    eax
c00198b1:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00198b8:	74 07                	je     c00198c1 <CPU::setupFeatures()+0x47>
c00198ba:	52                   	push   edx
c00198bb:	e8 2c ff ff ff       	call   c00197ec <CPU::setupTSC()>
c00198c0:	58                   	pop    eax
c00198c1:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00198c8:	74 07                	je     c00198d1 <CPU::setupFeatures()+0x57>
c00198ca:	52                   	push   edx
c00198cb:	e8 26 ff ff ff       	call   c00197f6 <CPU::setupLargePages()>
c00198d0:	59                   	pop    ecx
c00198d1:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00198d8:	74 07                	je     c00198e1 <CPU::setupFeatures()+0x67>
c00198da:	52                   	push   edx
c00198db:	e8 5e ff ff ff       	call   c001983e <CPU::setupGlobalPages()>
c00198e0:	58                   	pop    eax
c00198e1:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00198e8:	74 0c                	je     c00198f6 <CPU::setupFeatures()+0x7c>
c00198ea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00198ee:	83 c4 0c             	add    esp,0xc
c00198f1:	e9 0a ff ff ff       	jmp    c0019800 <CPU::setupPAT()>
c00198f6:	83 c4 0c             	add    esp,0xc
c00198f9:	c3                   	ret    

c00198fa <CPU::open(int, int, void*)>:
c00198fa:	57                   	push   edi
c00198fb:	56                   	push   esi
c00198fc:	53                   	push   ebx
c00198fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019901:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019905:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001990b:	83 ec 0c             	sub    esp,0xc
c001990e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019914:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001991a:	50                   	push   eax
c001991b:	e8 fe 57 ff ff       	call   c000f11e <GDT::setup()>
c0019920:	83 c4 0c             	add    esp,0xc
c0019923:	6a 00                	push   0x0
c0019925:	68 ef be ad de       	push   0xdeadbeef
c001992a:	57                   	push   edi
c001992b:	e8 04 75 ff ff       	call   c0010e34 <TSS::setup(unsigned long, unsigned long)>
c0019930:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019933:	e8 dc 74 ff ff       	call   c0010e14 <TSS::flush()>
c0019938:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001993e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019941:	e8 3c 5a ff ff       	call   c000f382 <IDT::setup()>
c0019946:	b8 00 04 00 00       	mov    eax,0x400
c001994b:	0f 23 f8             	mov    db7,eax
c001994e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019958:	e8 2d 62 ff ff       	call   c000fb8a <Phys::allocatePage()>
c001995d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019963:	89 30                	mov    DWORD PTR [eax],esi
c0019965:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001996b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001996e:	58                   	pop    eax
c001996f:	5a                   	pop    edx
c0019970:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019976:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001997a:	e8 55 86 ff ff       	call   c0011fd4 <VAS::setCPUSpecific(unsigned long)>
c001997f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019982:	e8 5d f4 ff ff       	call   c0018de4 <CPU::detectFeatures()>
c0019987:	e8 9e b9 ff ff       	call   c001532a <setupInterruptController()>
c001998c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019992:	a1 e0 f2 02 c0       	mov    eax,ds:0xc002f2e0
c0019997:	83 e0 10             	and    eax,0x10
c001999a:	83 f8 01             	cmp    eax,0x1
c001999d:	19 c0                	sbb    eax,eax
c001999f:	83 e0 46             	and    eax,0x46
c00199a2:	83 c0 1e             	add    eax,0x1e
c00199a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00199a8:	e8 d4 cf ff ff       	call   c0016981 <setupTimer(int)>
c00199ad:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00199b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199b6:	e8 bf fe ff ff       	call   c001987a <CPU::setupFeatures()>
c00199bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199be:	e8 a5 f1 ff ff       	call   c0018b68 <CPU::displayFeatures()>
c00199c3:	83 c4 10             	add    esp,0x10
c00199c6:	31 c0                	xor    eax,eax
c00199c8:	5b                   	pop    ebx
c00199c9:	5e                   	pop    esi
c00199ca:	5f                   	pop    edi
c00199cb:	c3                   	ret    

c00199cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00199cc:	57                   	push   edi
c00199cd:	56                   	push   esi
c00199ce:	53                   	push   ebx
c00199cf:	51                   	push   ecx
c00199d0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00199d4:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00199d7:	0f 02 c0             	lar    eax,ax
c00199da:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00199dd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00199e1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00199e4:	88 ca                	mov    dl,cl
c00199e6:	c0 ea 06             	shr    dl,0x6
c00199e9:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00199ed:	89 ca                	mov    edx,ecx
c00199ef:	66 c1 ea 03          	shr    dx,0x3
c00199f3:	83 e2 07             	and    edx,0x7
c00199f6:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00199fb:	88 17                	mov    BYTE PTR [edi],dl
c00199fd:	0f 84 a6 01 00 00    	je     c0019ba9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019a03:	83 e1 07             	and    ecx,0x7
c0019a06:	80 f9 04             	cmp    cl,0x4
c0019a09:	0f 84 98 00 00 00    	je     c0019aa7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019a0f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019a14:	0f 95 c0             	setne  al
c0019a17:	80 f9 05             	cmp    cl,0x5
c0019a1a:	0f 95 c2             	setne  dl
c0019a1d:	08 c2                	or     dl,al
c0019a1f:	74 79                	je     c0019a9a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019a21:	84 c9                	test   cl,cl
c0019a23:	75 05                	jne    c0019a2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019a25:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019a28:	eb 3c                	jmp    c0019a66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a2a:	80 f9 01             	cmp    cl,0x1
c0019a2d:	75 05                	jne    c0019a34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019a2f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019a32:	eb 32                	jmp    c0019a66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a34:	80 f9 02             	cmp    cl,0x2
c0019a37:	75 05                	jne    c0019a3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019a39:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019a3c:	eb 28                	jmp    c0019a66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a3e:	31 c0                	xor    eax,eax
c0019a40:	80 f9 03             	cmp    cl,0x3
c0019a43:	75 05                	jne    c0019a4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019a45:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019a48:	eb 1c                	jmp    c0019a66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a4a:	80 f9 05             	cmp    cl,0x5
c0019a4d:	75 05                	jne    c0019a54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019a4f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019a52:	eb 12                	jmp    c0019a66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a54:	80 f9 06             	cmp    cl,0x6
c0019a57:	75 05                	jne    c0019a5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019a59:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019a5c:	eb 08                	jmp    c0019a66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a5e:	80 f9 07             	cmp    cl,0x7
c0019a61:	75 03                	jne    c0019a66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a63:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019a66:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019a6b:	75 10                	jne    c0019a7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019a6d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019a71:	b9 03 00 00 00       	mov    ecx,0x3
c0019a76:	01 d0                	add    eax,edx
c0019a78:	e9 37 01 00 00       	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019a7d:	b9 02 00 00 00       	mov    ecx,0x2
c0019a82:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019a87:	0f 85 27 01 00 00    	jne    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019a8d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019a90:	b9 06 00 00 00       	mov    ecx,0x6
c0019a95:	e9 1a 01 00 00       	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019a9a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019a9d:	b9 06 00 00 00       	mov    ecx,0x6
c0019aa2:	e9 0f 01 00 00       	jmp    c0019bb6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019aa7:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019aaa:	88 ca                	mov    dl,cl
c0019aac:	c0 ea 06             	shr    dl,0x6
c0019aaf:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019ab3:	89 ca                	mov    edx,ecx
c0019ab5:	66 c1 ea 03          	shr    dx,0x3
c0019ab9:	83 e2 07             	and    edx,0x7
c0019abc:	80 e1 07             	and    cl,0x7
c0019abf:	75 05                	jne    c0019ac6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019ac1:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019ac4:	eb 4c                	jmp    c0019b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ac6:	80 f9 01             	cmp    cl,0x1
c0019ac9:	75 05                	jne    c0019ad0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019acb:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019ace:	eb 42                	jmp    c0019b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ad0:	80 f9 02             	cmp    cl,0x2
c0019ad3:	75 05                	jne    c0019ada <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019ad5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019ad8:	eb 38                	jmp    c0019b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ada:	80 f9 03             	cmp    cl,0x3
c0019add:	75 05                	jne    c0019ae4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019adf:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019ae2:	eb 2e                	jmp    c0019b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ae4:	80 f9 04             	cmp    cl,0x4
c0019ae7:	75 12                	jne    c0019afb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019ae9:	f6 c4 60             	test   ah,0x60
c0019aec:	75 08                	jne    c0019af6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019aee:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019af1:	8d 78 14             	lea    edi,[eax+0x14]
c0019af4:	eb 1c                	jmp    c0019b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019af6:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019af9:	eb 17                	jmp    c0019b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019afb:	80 f9 05             	cmp    cl,0x5
c0019afe:	75 05                	jne    c0019b05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019b00:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019b03:	eb 0d                	jmp    c0019b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b05:	80 f9 06             	cmp    cl,0x6
c0019b08:	75 05                	jne    c0019b0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019b0a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019b0d:	eb 03                	jmp    c0019b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b0f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019b12:	84 d2                	test   dl,dl
c0019b14:	75 05                	jne    c0019b1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019b16:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019b19:	eb 3c                	jmp    c0019b57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b1b:	80 fa 01             	cmp    dl,0x1
c0019b1e:	75 05                	jne    c0019b25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019b20:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019b23:	eb 32                	jmp    c0019b57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b25:	80 fa 02             	cmp    dl,0x2
c0019b28:	75 05                	jne    c0019b2f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019b2a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019b2d:	eb 28                	jmp    c0019b57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b2f:	80 fa 03             	cmp    dl,0x3
c0019b32:	75 05                	jne    c0019b39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019b34:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019b37:	eb 1e                	jmp    c0019b57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b39:	31 c0                	xor    eax,eax
c0019b3b:	80 fa 04             	cmp    dl,0x4
c0019b3e:	74 17                	je     c0019b57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b40:	80 fa 05             	cmp    dl,0x5
c0019b43:	75 05                	jne    c0019b4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019b45:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019b48:	eb 0d                	jmp    c0019b57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b4a:	80 fa 06             	cmp    dl,0x6
c0019b4d:	75 05                	jne    c0019b54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019b4f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019b52:	eb 03                	jmp    c0019b57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b54:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019b57:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b5c:	0f 94 c2             	sete   dl
c0019b5f:	80 f9 05             	cmp    cl,0x5
c0019b62:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019b66:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019b6b:	d3 e0                	shl    eax,cl
c0019b6d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019b71:	74 0a                	je     c0019b7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019b73:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019b76:	b9 07 00 00 00       	mov    ecx,0x7
c0019b7b:	eb 37                	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b7d:	01 f8                	add    eax,edi
c0019b7f:	b9 03 00 00 00       	mov    ecx,0x3
c0019b84:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b89:	74 2b                	je     c0019bb6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b8b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019b90:	75 0d                	jne    c0019b9f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019b92:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019b96:	01 c8                	add    eax,ecx
c0019b98:	b9 04 00 00 00       	mov    ecx,0x4
c0019b9d:	eb 17                	jmp    c0019bb6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b9f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ba2:	b9 07 00 00 00       	mov    ecx,0x7
c0019ba7:	eb 0d                	jmp    c0019bb6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ba9:	b9 02 00 00 00       	mov    ecx,0x2
c0019bae:	b2 01                	mov    dl,0x1
c0019bb0:	31 c0                	xor    eax,eax
c0019bb2:	eb 02                	jmp    c0019bb6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019bb4:	31 d2                	xor    edx,edx
c0019bb6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019bba:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019bbc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019bc0:	88 11                	mov    BYTE PTR [ecx],dl
c0019bc2:	5a                   	pop    edx
c0019bc3:	5b                   	pop    ebx
c0019bc4:	5e                   	pop    esi
c0019bc5:	5f                   	pop    edi
c0019bc6:	c3                   	ret    

c0019bc7 <Krnl::smpEntry()>:
c0019bc7:	eb fe                	jmp    c0019bc7 <Krnl::smpEntry()>

c0019bc9 <Krnl::startCPU(int)>:
c0019bc9:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0019bce:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019bd5:	0f 84 36 01 00 00    	je     c0019d11 <Krnl::startCPU(int)+0x148>
c0019bdb:	53                   	push   ebx
c0019bdc:	83 ec 10             	sub    esp,0x10
c0019bdf:	fa                   	cli    
c0019be0:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c0019be6:	6a 1b                	push   0x1b
c0019be8:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c0019bee:	e8 3f 52 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019bf3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019bf8:	89 c3                	mov    ebx,eax
c0019bfa:	58                   	pop    eax
c0019bfb:	5a                   	pop    edx
c0019bfc:	53                   	push   ebx
c0019bfd:	68 80 c3 02 c0       	push   0xc002c380
c0019c02:	e8 c2 8c ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0019c07:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c15:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c1f:	c1 e0 18             	shl    eax,0x18
c0019c22:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019c28:	83 c4 10             	add    esp,0x10
c0019c2b:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019c31:	09 c2                	or     edx,eax
c0019c33:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019c39:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019c3f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019c45:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019c4b:	80 cd c5             	or     ch,0xc5
c0019c4e:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019c54:	f3 90                	pause  
c0019c56:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019c58:	0f ba e1 0c          	bt     ecx,0xc
c0019c5c:	72 f6                	jb     c0019c54 <Krnl::startCPU(int)+0x8b>
c0019c5e:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019c64:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019c6a:	09 c1                	or     ecx,eax
c0019c6c:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019c72:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019c78:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019c7e:	80 cd 85             	or     ch,0x85
c0019c81:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019c87:	f3 90                	pause  
c0019c89:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019c8b:	0f ba e1 0c          	bt     ecx,0xc
c0019c8f:	72 f6                	jb     c0019c87 <Krnl::startCPU(int)+0xbe>
c0019c91:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c9b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ca1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ca7:	09 c1                	or     ecx,eax
c0019ca9:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019caf:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019cb5:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019cbb:	81 c9 02 06 00 00    	or     ecx,0x602
c0019cc1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019cc7:	f3 90                	pause  
c0019cc9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ccb:	0f ba e1 0c          	bt     ecx,0xc
c0019ccf:	72 f6                	jb     c0019cc7 <Krnl::startCPU(int)+0xfe>
c0019cd1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019cdb:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ce1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ce7:	09 c8                	or     eax,ecx
c0019ce9:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019cef:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019cf5:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019cfa:	0d 02 06 00 00       	or     eax,0x602
c0019cff:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019d05:	f3 90                	pause  
c0019d07:	8b 02                	mov    eax,DWORD PTR [edx]
c0019d09:	0f ba e0 0c          	bt     eax,0xc
c0019d0d:	72 f6                	jb     c0019d05 <Krnl::startCPU(int)+0x13c>
c0019d0f:	eb fe                	jmp    c0019d0f <Krnl::startCPU(int)+0x146>
c0019d11:	c3                   	ret    

c0019d12 <Krnl::startCPUs()>:
c0019d12:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0019d17:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019d1d:	88 c2                	mov    dl,al
c0019d1f:	83 e2 0a             	and    edx,0xa
c0019d22:	80 fa 0a             	cmp    dl,0xa
c0019d25:	75 09                	jne    c0019d30 <Krnl::startCPUs()+0x1e>
c0019d27:	a8 01                	test   al,0x1
c0019d29:	74 05                	je     c0019d30 <Krnl::startCPUs()+0x1e>
c0019d2b:	e9 6b 64 fe ff       	jmp    c000019b <prepareTramp>
c0019d30:	c3                   	ret    
c0019d31:	90                   	nop

c0019d32 <EnvVarContainer::getEnv(char const*)>:
c0019d32:	57                   	push   edi
c0019d33:	56                   	push   esi
c0019d34:	53                   	push   ebx
c0019d35:	31 db                	xor    ebx,ebx
c0019d37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019d3b:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019d3d:	7e 2b                	jle    c0019d6a <EnvVarContainer::getEnv(char const*)+0x38>
c0019d3f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019d46:	50                   	push   eax
c0019d47:	50                   	push   eax
c0019d48:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019d4b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019d4e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019d52:	e8 41 6b fe ff       	call   c0000898 <strcmp>
c0019d57:	83 c4 10             	add    esp,0x10
c0019d5a:	85 c0                	test   eax,eax
c0019d5c:	75 09                	jne    c0019d67 <EnvVarContainer::getEnv(char const*)+0x35>
c0019d5e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019d61:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019d65:	eb 05                	jmp    c0019d6c <EnvVarContainer::getEnv(char const*)+0x3a>
c0019d67:	43                   	inc    ebx
c0019d68:	eb d1                	jmp    c0019d3b <EnvVarContainer::getEnv(char const*)+0x9>
c0019d6a:	31 c0                	xor    eax,eax
c0019d6c:	5b                   	pop    ebx
c0019d6d:	5e                   	pop    esi
c0019d6e:	5f                   	pop    edi
c0019d6f:	c3                   	ret    

c0019d70 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019d70:	55                   	push   ebp
c0019d71:	57                   	push   edi
c0019d72:	56                   	push   esi
c0019d73:	53                   	push   ebx
c0019d74:	83 ec 28             	sub    esp,0x28
c0019d77:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019d7b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019d7f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019d83:	56                   	push   esi
c0019d84:	e8 e3 69 fe ff       	call   c000076c <strlen>
c0019d89:	40                   	inc    eax
c0019d8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d8d:	e8 fa 5a ff ff       	call   c000f88c <malloc>
c0019d92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019d99:	e8 ce 69 fe ff       	call   c000076c <strlen>
c0019d9e:	40                   	inc    eax
c0019d9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019da2:	e8 e5 5a ff ff       	call   c000f88c <malloc>
c0019da7:	89 34 24             	mov    DWORD PTR [esp],esi
c0019daa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019dae:	e8 b9 69 fe ff       	call   c000076c <strlen>
c0019db3:	83 c4 0c             	add    esp,0xc
c0019db6:	40                   	inc    eax
c0019db7:	50                   	push   eax
c0019db8:	6a 00                	push   0x0
c0019dba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019dbe:	e8 8d 69 fe ff       	call   c0000750 <memset>
c0019dc3:	89 34 24             	mov    DWORD PTR [esp],esi
c0019dc6:	e8 a1 69 fe ff       	call   c000076c <strlen>
c0019dcb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019dcf:	8d 48 01             	lea    ecx,[eax+0x1]
c0019dd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019dd4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019dd7:	89 de                	mov    esi,ebx
c0019dd9:	e8 8e 69 fe ff       	call   c000076c <strlen>
c0019dde:	83 c4 0c             	add    esp,0xc
c0019de1:	40                   	inc    eax
c0019de2:	50                   	push   eax
c0019de3:	6a 00                	push   0x0
c0019de5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019de9:	e8 62 69 fe ff       	call   c0000750 <memset>
c0019dee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019df1:	e8 76 69 fe ff       	call   c000076c <strlen>
c0019df6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019dfa:	8d 48 01             	lea    ecx,[eax+0x1]
c0019dfd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019dff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e02:	40                   	inc    eax
c0019e03:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019e06:	c1 e0 03             	shl    eax,0x3
c0019e09:	5a                   	pop    edx
c0019e0a:	59                   	pop    ecx
c0019e0b:	50                   	push   eax
c0019e0c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019e0f:	e8 64 5a ff ff       	call   c000f878 <realloc>
c0019e14:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019e18:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e1b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019e1e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019e22:	b9 08 00 00 00       	mov    ecx,0x8
c0019e27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e29:	83 c4 2c             	add    esp,0x2c
c0019e2c:	5b                   	pop    ebx
c0019e2d:	5e                   	pop    esi
c0019e2e:	5f                   	pop    edi
c0019e2f:	5d                   	pop    ebp
c0019e30:	c3                   	ret    
c0019e31:	90                   	nop

c0019e32 <EnvVarContainer::deleteEnv(char const*)>:
c0019e32:	c3                   	ret    
c0019e33:	90                   	nop

c0019e34 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019e34:	55                   	push   ebp
c0019e35:	57                   	push   edi
c0019e36:	56                   	push   esi
c0019e37:	53                   	push   ebx
c0019e38:	81 ec 38 01 00 00    	sub    esp,0x138
c0019e3e:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c0019e45:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019e4c:	68 14 01 00 00       	push   0x114
c0019e51:	e8 36 5a ff ff       	call   c000f88c <malloc>
c0019e56:	83 c4 0c             	add    esp,0xc
c0019e59:	89 c5                	mov    ebp,eax
c0019e5b:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0019e5e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019e65:	50                   	push   eax
c0019e66:	e8 bd 8f ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c0019e6b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019e6e:	e8 87 92 ff ff       	call   c00130fa <File::exists()>
c0019e73:	83 c4 10             	add    esp,0x10
c0019e76:	84 c0                	test   al,al
c0019e78:	75 32                	jne    c0019eac <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c0019e7a:	51                   	push   ecx
c0019e7b:	51                   	push   ecx
c0019e7c:	6a 12                	push   0x12
c0019e7e:	55                   	push   ebp
c0019e7f:	e8 08 90 ff ff       	call   c0012e8c <File::open(FileOpenMode)>
c0019e84:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e87:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019e8a:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e8d:	e8 da 68 fe ff       	call   c000076c <strlen>
c0019e92:	5a                   	pop    edx
c0019e93:	31 d2                	xor    edx,edx
c0019e95:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019e99:	51                   	push   ecx
c0019e9a:	56                   	push   esi
c0019e9b:	52                   	push   edx
c0019e9c:	50                   	push   eax
c0019e9d:	55                   	push   ebp
c0019e9e:	ff d7                	call   edi
c0019ea0:	83 c4 14             	add    esp,0x14
c0019ea3:	55                   	push   ebp
c0019ea4:	e8 41 90 ff ff       	call   c0012eea <File::close()>
c0019ea9:	83 c4 10             	add    esp,0x10
c0019eac:	31 f6                	xor    esi,esi
c0019eae:	50                   	push   eax
c0019eaf:	68 00 01 00 00       	push   0x100
c0019eb4:	6a 00                	push   0x0
c0019eb6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019eba:	50                   	push   eax
c0019ebb:	e8 90 68 fe ff       	call   c0000750 <memset>
c0019ec0:	58                   	pop    eax
c0019ec1:	5a                   	pop    edx
c0019ec2:	6a 01                	push   0x1
c0019ec4:	55                   	push   ebp
c0019ec5:	e8 c2 8f ff ff       	call   c0012e8c <File::open(FileOpenMode)>
c0019eca:	83 c4 10             	add    esp,0x10
c0019ecd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019ed5:	83 ec 0c             	sub    esp,0xc
c0019ed8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019edb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019edf:	51                   	push   ecx
c0019ee0:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019ee4:	52                   	push   edx
c0019ee5:	6a 00                	push   0x0
c0019ee7:	6a 01                	push   0x1
c0019ee9:	55                   	push   ebp
c0019eea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019eed:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019ef1:	83 c4 20             	add    esp,0x20
c0019ef4:	3c 0d                	cmp    al,0xd
c0019ef6:	0f 84 16 01 00 00    	je     c001a012 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c0019efc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f01:	0f 84 fc 00 00 00    	je     c001a003 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f07:	3c 0a                	cmp    al,0xa
c0019f09:	74 13                	je     c0019f1e <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019f0b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019f10:	74 0c                	je     c0019f1e <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019f12:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019f18:	0f 8e e5 00 00 00    	jle    c001a003 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f22:	83 ec 0c             	sub    esp,0xc
c0019f25:	8d 78 01             	lea    edi,[eax+0x1]
c0019f28:	57                   	push   edi
c0019f29:	e8 5e 59 ff ff       	call   c000f88c <malloc>
c0019f2e:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019f32:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019f36:	8d 56 04             	lea    edx,[esi+0x4]
c0019f39:	89 14 24             	mov    DWORD PTR [esp],edx
c0019f3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019f40:	e8 47 59 ff ff       	call   c000f88c <malloc>
c0019f45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019f49:	83 c4 0c             	add    esp,0xc
c0019f4c:	57                   	push   edi
c0019f4d:	6a 00                	push   0x0
c0019f4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019f53:	e8 f8 67 fe ff       	call   c0000750 <memset>
c0019f58:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019f5c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019f60:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019f64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f66:	83 c4 0c             	add    esp,0xc
c0019f69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019f6d:	52                   	push   edx
c0019f6e:	6a 00                	push   0x0
c0019f70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f74:	e8 d7 67 fe ff       	call   c0000750 <memset>
c0019f79:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019f7d:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019f81:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f84:	e8 e3 67 fe ff       	call   c000076c <strlen>
c0019f89:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019f8d:	89 c1                	mov    ecx,eax
c0019f8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f91:	5e                   	pop    esi
c0019f92:	5f                   	pop    edi
c0019f93:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019f97:	68 91 c3 02 c0       	push   0xc002c391
c0019f9c:	e8 28 89 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0019fa1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fa3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0019fa6:	40                   	inc    eax
c0019fa7:	83 c4 10             	add    esp,0x10
c0019faa:	89 03                	mov    DWORD PTR [ebx],eax
c0019fac:	85 d2                	test   edx,edx
c0019fae:	75 0c                	jne    c0019fbc <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c0019fb0:	83 ec 0c             	sub    esp,0xc
c0019fb3:	6a 08                	push   0x8
c0019fb5:	e8 d2 58 ff ff       	call   c000f88c <malloc>
c0019fba:	eb 0c                	jmp    c0019fc8 <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c0019fbc:	c1 e0 03             	shl    eax,0x3
c0019fbf:	51                   	push   ecx
c0019fc0:	51                   	push   ecx
c0019fc1:	50                   	push   eax
c0019fc2:	52                   	push   edx
c0019fc3:	e8 b0 58 ff ff       	call   c000f878 <realloc>
c0019fc8:	83 c4 10             	add    esp,0x10
c0019fcb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019fce:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019fd0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0019fd3:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019fd7:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019fdb:	b9 08 00 00 00       	mov    ecx,0x8
c0019fe0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fe2:	31 f6                	xor    esi,esi
c0019fe4:	52                   	push   edx
c0019fe5:	68 00 01 00 00       	push   0x100
c0019fea:	6a 00                	push   0x0
c0019fec:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019ff0:	50                   	push   eax
c0019ff1:	e8 5a 67 fe ff       	call   c0000750 <memset>
c0019ff6:	83 c4 10             	add    esp,0x10
c0019ff9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a001:	eb 0f                	jmp    c001a012 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a003:	3c 3d                	cmp    al,0x3d
c001a005:	74 07                	je     c001a00e <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a007:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a00b:	46                   	inc    esi
c001a00c:	eb 04                	jmp    c001a012 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a00e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a012:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a017:	0f 85 b8 fe ff ff    	jne    c0019ed5 <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a01d:	50                   	push   eax
c001a01e:	50                   	push   eax
c001a01f:	ff 33                	push   DWORD PTR [ebx]
c001a021:	68 9f c3 02 c0       	push   0xc002c39f
c001a026:	e8 9e 88 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001a02b:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a031:	5b                   	pop    ebx
c001a032:	5e                   	pop    esi
c001a033:	5f                   	pop    edi
c001a034:	5d                   	pop    ebp
c001a035:	c3                   	ret    

c001a036 <EnvVarContainer::__loadSystem()>:
c001a036:	83 ec 10             	sub    esp,0x10
c001a039:	68 00 e8 02 c0       	push   0xc002e800
c001a03e:	68 ca c3 02 c0       	push   0xc002c3ca
c001a043:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a047:	e8 e8 fd ff ff       	call   c0019e34 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a04c:	83 c4 1c             	add    esp,0x1c
c001a04f:	c3                   	ret    

c001a050 <EnvVarContainer::__loadUser()>:
c001a050:	c3                   	ret    
c001a051:	90                   	nop

c001a052 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a056:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a05c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a060:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a064:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a067:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a06b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a072:	90                   	nop
c001a073:	c3                   	ret    

c001a074 <EnvVarContainer::~EnvVarContainer()>:
c001a074:	83 ec 0c             	sub    esp,0xc
c001a077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a07b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a07e:	85 c0                	test   eax,eax
c001a080:	74 1d                	je     c001a09f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a086:	8b 00                	mov    eax,DWORD PTR [eax]
c001a088:	85 c0                	test   eax,eax
c001a08a:	74 13                	je     c001a09f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a090:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a093:	83 ec 0c             	sub    esp,0xc
c001a096:	50                   	push   eax
c001a097:	e8 00 58 ff ff       	call   c000f89c <free>
c001a09c:	83 c4 10             	add    esp,0x10
c001a09f:	90                   	nop
c001a0a0:	83 c4 0c             	add    esp,0xc
c001a0a3:	c3                   	ret    

c001a0a4 <Krnl::getEnv(Process*, char const*)>:
c001a0a4:	53                   	push   ebx
c001a0a5:	83 ec 08             	sub    esp,0x8
c001a0a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a0b0:	39 05 10 28 03 c0    	cmp    DWORD PTR ds:0xc0032810,eax
c001a0b6:	74 04                	je     c001a0bc <Krnl::getEnv(Process*, char const*)+0x18>
c001a0b8:	85 c0                	test   eax,eax
c001a0ba:	75 0b                	jne    c001a0c7 <Krnl::getEnv(Process*, char const*)+0x23>
c001a0bc:	a1 f4 1d 03 c0       	mov    eax,ds:0xc0031df4
c001a0c1:	85 c0                	test   eax,eax
c001a0c3:	75 19                	jne    c001a0de <Krnl::getEnv(Process*, char const*)+0x3a>
c001a0c5:	eb 27                	jmp    c001a0ee <Krnl::getEnv(Process*, char const*)+0x4a>
c001a0c7:	52                   	push   edx
c001a0c8:	52                   	push   edx
c001a0c9:	53                   	push   ebx
c001a0ca:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a0d0:	e8 5d fc ff ff       	call   c0019d32 <EnvVarContainer::getEnv(char const*)>
c001a0d5:	83 c4 10             	add    esp,0x10
c001a0d8:	85 c0                	test   eax,eax
c001a0da:	75 28                	jne    c001a104 <Krnl::getEnv(Process*, char const*)+0x60>
c001a0dc:	eb de                	jmp    c001a0bc <Krnl::getEnv(Process*, char const*)+0x18>
c001a0de:	52                   	push   edx
c001a0df:	52                   	push   edx
c001a0e0:	53                   	push   ebx
c001a0e1:	50                   	push   eax
c001a0e2:	e8 4b fc ff ff       	call   c0019d32 <EnvVarContainer::getEnv(char const*)>
c001a0e7:	83 c4 10             	add    esp,0x10
c001a0ea:	85 c0                	test   eax,eax
c001a0ec:	75 16                	jne    c001a104 <Krnl::getEnv(Process*, char const*)+0x60>
c001a0ee:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a0f2:	a1 f8 1d 03 c0       	mov    eax,ds:0xc0031df8
c001a0f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a0fb:	83 c4 08             	add    esp,0x8
c001a0fe:	5b                   	pop    ebx
c001a0ff:	e9 2e fc ff ff       	jmp    c0019d32 <EnvVarContainer::getEnv(char const*)>
c001a104:	83 c4 08             	add    esp,0x8
c001a107:	5b                   	pop    ebx
c001a108:	c3                   	ret    

c001a109 <Krnl::setEnvSystem(char const*, char const*)>:
c001a109:	83 ec 10             	sub    esp,0x10
c001a10c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a110:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a114:	ff 35 f8 1d 03 c0    	push   DWORD PTR ds:0xc0031df8
c001a11a:	e8 51 fc ff ff       	call   c0019d70 <EnvVarContainer::setEnv(char const*, char const*)>
c001a11f:	83 c4 1c             	add    esp,0x1c
c001a122:	c3                   	ret    

c001a123 <Krnl::setEnvUser(char const*, char const*)>:
c001a123:	a1 f4 1d 03 c0       	mov    eax,ds:0xc0031df4
c001a128:	85 c0                	test   eax,eax
c001a12a:	74 15                	je     c001a141 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a12c:	83 ec 10             	sub    esp,0x10
c001a12f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a133:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a137:	50                   	push   eax
c001a138:	e8 33 fc ff ff       	call   c0019d70 <EnvVarContainer::setEnv(char const*, char const*)>
c001a13d:	83 c4 1c             	add    esp,0x1c
c001a140:	c3                   	ret    
c001a141:	c3                   	ret    

c001a142 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a146:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a14c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a150:	e9 1b fc ff ff       	jmp    c0019d70 <EnvVarContainer::setEnv(char const*, char const*)>

c001a155 <Krnl::deleteEnvSystem(char const*)>:
c001a155:	c3                   	ret    

c001a156 <Krnl::deleteEnvUser(char const*)>:
c001a156:	c3                   	ret    

c001a157 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a157:	c3                   	ret    

c001a158 <Krnl::newProcessEnv(Process*)>:
c001a158:	83 ec 28             	sub    esp,0x28
c001a15b:	6a 0c                	push   0xc
c001a15d:	e8 2a 57 ff ff       	call   c000f88c <malloc>
c001a162:	5a                   	pop    edx
c001a163:	59                   	pop    ecx
c001a164:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a168:	50                   	push   eax
c001a169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a16d:	e8 e0 fe ff ff       	call   c001a052 <EnvVarContainer::EnvVarContainer(Process*)>
c001a172:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a176:	83 c4 2c             	add    esp,0x2c
c001a179:	c3                   	ret    

c001a17a <Krnl::copyProcessEnv(Process*, Process*)>:
c001a17a:	57                   	push   edi
c001a17b:	56                   	push   esi
c001a17c:	53                   	push   ebx
c001a17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a181:	83 ec 0c             	sub    esp,0xc
c001a184:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a18a:	6a 0c                	push   0xc
c001a18c:	e8 fb 56 ff ff       	call   c000f88c <malloc>
c001a191:	89 c3                	mov    ebx,eax
c001a193:	58                   	pop    eax
c001a194:	5a                   	pop    edx
c001a195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a199:	53                   	push   ebx
c001a19a:	e8 b3 fe ff ff       	call   c001a052 <EnvVarContainer::EnvVarContainer(Process*)>
c001a19f:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1a1:	89 03                	mov    DWORD PTR [ebx],eax
c001a1a3:	c1 e0 03             	shl    eax,0x3
c001a1a6:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1a9:	e8 de 56 ff ff       	call   c000f88c <malloc>
c001a1ae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a1b1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a1b3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a1b6:	c1 e1 03             	shl    ecx,0x3
c001a1b9:	89 c7                	mov    edi,eax
c001a1bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a1bd:	83 c4 10             	add    esp,0x10
c001a1c0:	89 d8                	mov    eax,ebx
c001a1c2:	5b                   	pop    ebx
c001a1c3:	5e                   	pop    esi
c001a1c4:	5f                   	pop    edi
c001a1c5:	c3                   	ret    

c001a1c6 <Krnl::loadSystemEnv()>:
c001a1c6:	53                   	push   ebx
c001a1c7:	83 ec 14             	sub    esp,0x14
c001a1ca:	6a 0c                	push   0xc
c001a1cc:	e8 bb 56 ff ff       	call   c000f88c <malloc>
c001a1d1:	89 c3                	mov    ebx,eax
c001a1d3:	58                   	pop    eax
c001a1d4:	5a                   	pop    edx
c001a1d5:	ff 35 10 28 03 c0    	push   DWORD PTR ds:0xc0032810
c001a1db:	53                   	push   ebx
c001a1dc:	e8 71 fe ff ff       	call   c001a052 <EnvVarContainer::EnvVarContainer(Process*)>
c001a1e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1e4:	89 1d f8 1d 03 c0    	mov    DWORD PTR ds:0xc0031df8,ebx
c001a1ea:	e8 47 fe ff ff       	call   c001a036 <EnvVarContainer::__loadSystem()>
c001a1ef:	83 c4 18             	add    esp,0x18
c001a1f2:	5b                   	pop    ebx
c001a1f3:	c3                   	ret    

c001a1f4 <Krnl::loadUserEnv()>:
c001a1f4:	53                   	push   ebx
c001a1f5:	83 ec 14             	sub    esp,0x14
c001a1f8:	6a 0c                	push   0xc
c001a1fa:	e8 8d 56 ff ff       	call   c000f88c <malloc>
c001a1ff:	89 c3                	mov    ebx,eax
c001a201:	58                   	pop    eax
c001a202:	5a                   	pop    edx
c001a203:	ff 35 10 28 03 c0    	push   DWORD PTR ds:0xc0032810
c001a209:	53                   	push   ebx
c001a20a:	e8 43 fe ff ff       	call   c001a052 <EnvVarContainer::EnvVarContainer(Process*)>
c001a20f:	89 1d f4 1d 03 c0    	mov    DWORD PTR ds:0xc0031df4,ebx
c001a215:	83 c4 18             	add    esp,0x18
c001a218:	5b                   	pop    ebx
c001a219:	c3                   	ret    

c001a21a <Krnl::flushEnv()>:
c001a21a:	c3                   	ret    

c001a21b <Krnl::getProcessTotalEnvCount(Process*)>:
c001a21b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a21f:	8b 15 f4 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031df4
c001a225:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a22b:	a1 f8 1d 03 c0       	mov    eax,ds:0xc0031df8
c001a230:	8b 00                	mov    eax,DWORD PTR [eax]
c001a232:	03 01                	add    eax,DWORD PTR [ecx]
c001a234:	85 d2                	test   edx,edx
c001a236:	74 02                	je     c001a23a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a238:	03 02                	add    eax,DWORD PTR [edx]
c001a23a:	c3                   	ret    

c001a23b <Krnl::getProcessEnvPair(Process*, int)>:
c001a23b:	57                   	push   edi
c001a23c:	8b 0d f4 1d 03 c0    	mov    ecx,DWORD PTR ds:0xc0031df4
c001a242:	56                   	push   esi
c001a243:	85 c9                	test   ecx,ecx
c001a245:	53                   	push   ebx
c001a246:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a24a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a24e:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a254:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a258:	8b 02                	mov    eax,DWORD PTR [edx]
c001a25a:	75 47                	jne    c001a2a3 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a25c:	39 c3                	cmp    ebx,eax
c001a25e:	7c 47                	jl     c001a2a7 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a260:	8b 15 f8 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031df8
c001a266:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a268:	01 c1                	add    ecx,eax
c001a26a:	39 d9                	cmp    ecx,ebx
c001a26c:	7e 6c                	jle    c001a2da <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a26e:	51                   	push   ecx
c001a26f:	89 d9                	mov    ecx,ebx
c001a271:	29 c1                	sub    ecx,eax
c001a273:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a276:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a27a:	53                   	push   ebx
c001a27b:	68 ec c3 02 c0       	push   0xc002c3ec
c001a280:	e8 44 86 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001a285:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a28b:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a28d:	a1 f8 1d 03 c0       	mov    eax,ds:0xc0031df8
c001a292:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a295:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a299:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a29c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a29f:	89 06                	mov    DWORD PTR [esi],eax
c001a2a1:	eb 51                	jmp    c001a2f4 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a2a3:	39 c3                	cmp    ebx,eax
c001a2a5:	7d 05                	jge    c001a2ac <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a2a7:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a2aa:	eb 20                	jmp    c001a2cc <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a2ac:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a2ae:	8d 14 07             	lea    edx,[edi+eax*1]
c001a2b1:	39 da                	cmp    edx,ebx
c001a2b3:	7e 04                	jle    c001a2b9 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a2b5:	29 c3                	sub    ebx,eax
c001a2b7:	eb 10                	jmp    c001a2c9 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a2b9:	8b 0d f8 1d 03 c0    	mov    ecx,DWORD PTR ds:0xc0031df8
c001a2bf:	03 11                	add    edx,DWORD PTR [ecx]
c001a2c1:	39 da                	cmp    edx,ebx
c001a2c3:	7e 15                	jle    c001a2da <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a2c5:	29 c3                	sub    ebx,eax
c001a2c7:	29 fb                	sub    ebx,edi
c001a2c9:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a2cc:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a2d0:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a2d3:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a2d6:	89 06                	mov    DWORD PTR [esi],eax
c001a2d8:	eb 1d                	jmp    c001a2f7 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a2da:	83 ec 0c             	sub    esp,0xc
c001a2dd:	68 00 c4 02 c0       	push   0xc002c400
c001a2e2:	e8 18 00 00 00       	call   c001a2ff <Krnl::panic(char const*)>
c001a2e7:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a2ed:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a2f4:	83 c4 10             	add    esp,0x10
c001a2f7:	89 f0                	mov    eax,esi
c001a2f9:	5b                   	pop    ebx
c001a2fa:	5e                   	pop    esi
c001a2fb:	5f                   	pop    edi
c001a2fc:	c2 04 00             	ret    0x4

c001a2ff <Krnl::panic(char const*)>:
c001a2ff:	55                   	push   ebp
c001a300:	89 e5                	mov    ebp,esp
c001a302:	53                   	push   ebx
c001a303:	83 ec 0c             	sub    esp,0xc
c001a306:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a309:	fa                   	cli    
c001a30a:	c6 05 04 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031e04,0x1
c001a311:	53                   	push   ebx
c001a312:	c6 05 00 e2 02 c0 00 	mov    BYTE PTR ds:0xc002e200,0x0
c001a319:	68 1a c4 02 c0       	push   0xc002c41a
c001a31e:	e8 a6 85 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001a323:	58                   	pop    eax
c001a324:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a329:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a32f:	e8 b8 63 ff ff       	call   c00106ec <setActiveTerminal(VgaText*)>
c001a334:	83 c4 0c             	add    esp,0xc
c001a337:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a33c:	6a 01                	push   0x1
c001a33e:	6a 0f                	push   0xf
c001a340:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a346:	e8 4d 60 ff ff       	call   c0010398 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a34b:	58                   	pop    eax
c001a34c:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a351:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a357:	e8 d6 65 ff ff       	call   c0010932 <VgaText::clearScreen()>
c001a35c:	58                   	pop    eax
c001a35d:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a362:	5a                   	pop    edx
c001a363:	68 33 c4 02 c0       	push   0xc002c433
c001a368:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a36e:	e8 4b 67 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a373:	59                   	pop    ecx
c001a374:	58                   	pop    eax
c001a375:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a37a:	68 d8 c4 02 c0       	push   0xc002c4d8
c001a37f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a385:	e8 34 67 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a38a:	58                   	pop    eax
c001a38b:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a390:	5a                   	pop    edx
c001a391:	68 4f c4 02 c0       	push   0xc002c44f
c001a396:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a39c:	e8 1d 67 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a3a1:	59                   	pop    ecx
c001a3a2:	58                   	pop    eax
c001a3a3:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a3a8:	53                   	push   ebx
c001a3a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3af:	e8 0a 67 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a3b4:	58                   	pop    eax
c001a3b5:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a3ba:	5a                   	pop    edx
c001a3bb:	68 6f c4 02 c0       	push   0xc002c46f
c001a3c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3c6:	e8 f3 66 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a3cb:	a1 00 1e 03 c0       	mov    eax,ds:0xc0031e00
c001a3d0:	83 c4 10             	add    esp,0x10
c001a3d3:	85 c0                	test   eax,eax
c001a3d5:	74 02                	je     c001a3d9 <Krnl::panic(char const*)+0xda>
c001a3d7:	ff d0                	call   eax
c001a3d9:	83 ec 0c             	sub    esp,0xc
c001a3dc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a3df:	e8 9e 32 00 00       	call   c001d682 <Thr::getDriverNameFromAddress(unsigned long)>
c001a3e4:	83 c4 10             	add    esp,0x10
c001a3e7:	89 c3                	mov    ebx,eax
c001a3e9:	85 c0                	test   eax,eax
c001a3eb:	0f 84 50 02 00 00    	je     c001a641 <Krnl::panic(char const*)+0x342>
c001a3f1:	83 ec 08             	sub    esp,0x8
c001a3f4:	8b 15 10 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032810
c001a3fa:	68 14 c5 02 c0       	push   0xc002c514
c001a3ff:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a405:	e8 b4 66 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a40a:	58                   	pop    eax
c001a40b:	5a                   	pop    edx
c001a40c:	8b 15 10 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032810
c001a412:	68 4f c4 02 c0       	push   0xc002c44f
c001a417:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a41d:	e8 9c 66 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a422:	59                   	pop    ecx
c001a423:	58                   	pop    eax
c001a424:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a429:	53                   	push   ebx
c001a42a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a430:	e8 89 66 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a435:	83 c4 10             	add    esp,0x10
c001a438:	83 ec 08             	sub    esp,0x8
c001a43b:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a440:	68 6e c4 02 c0       	push   0xc002c46e
c001a445:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a44b:	e8 6e 66 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a450:	58                   	pop    eax
c001a451:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a456:	5a                   	pop    edx
c001a457:	68 6c c5 02 c0       	push   0xc002c56c
c001a45c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a462:	e8 57 66 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a467:	59                   	pop    ecx
c001a468:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a46d:	5b                   	pop    ebx
c001a46e:	68 ac c5 02 c0       	push   0xc002c5ac
c001a473:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a479:	e8 40 66 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a47e:	58                   	pop    eax
c001a47f:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a484:	5a                   	pop    edx
c001a485:	68 5a c4 02 c0       	push   0xc002c45a
c001a48a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a490:	e8 29 66 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a495:	59                   	pop    ecx
c001a496:	5b                   	pop    ebx
c001a497:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a49a:	68 72 c4 02 c0       	push   0xc002c472
c001a49f:	e8 25 84 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001a4a4:	58                   	pop    eax
c001a4a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a4a8:	5a                   	pop    edx
c001a4a9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a4ac:	68 7b c4 02 c0       	push   0xc002c47b
c001a4b1:	e8 13 84 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001a4b6:	59                   	pop    ecx
c001a4b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a4ba:	5b                   	pop    ebx
c001a4bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4bd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a4c0:	68 84 c4 02 c0       	push   0xc002c484
c001a4c5:	e8 ff 83 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001a4ca:	58                   	pop    eax
c001a4cb:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a4d0:	5a                   	pop    edx
c001a4d1:	68 f0 c5 02 c0       	push   0xc002c5f0
c001a4d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4dc:	e8 dd 65 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a4e1:	59                   	pop    ecx
c001a4e2:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a4e7:	5b                   	pop    ebx
c001a4e8:	68 8d c4 02 c0       	push   0xc002c48d
c001a4ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4f3:	e8 c6 65 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a4f8:	0f 20 c0             	mov    eax,cr0
c001a4fb:	5a                   	pop    edx
c001a4fc:	59                   	pop    ecx
c001a4fd:	50                   	push   eax
c001a4fe:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a503:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a509:	e8 6a 65 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c001a50e:	5b                   	pop    ebx
c001a50f:	58                   	pop    eax
c001a510:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a515:	68 97 c4 02 c0       	push   0xc002c497
c001a51a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a520:	e8 99 65 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a525:	0f 20 d0             	mov    eax,cr2
c001a528:	5a                   	pop    edx
c001a529:	59                   	pop    ecx
c001a52a:	50                   	push   eax
c001a52b:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a530:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a536:	e8 3d 65 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c001a53b:	5b                   	pop    ebx
c001a53c:	58                   	pop    eax
c001a53d:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a542:	68 a1 c4 02 c0       	push   0xc002c4a1
c001a547:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a54d:	e8 6c 65 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a552:	0f 20 d8             	mov    eax,cr3
c001a555:	5a                   	pop    edx
c001a556:	59                   	pop    ecx
c001a557:	50                   	push   eax
c001a558:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a55d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a563:	e8 10 65 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c001a568:	5b                   	pop    ebx
c001a569:	58                   	pop    eax
c001a56a:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a56f:	68 b4 c4 02 c0       	push   0xc002c4b4
c001a574:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a57a:	e8 3f 65 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a57f:	0f 20 e0             	mov    eax,cr4
c001a582:	5a                   	pop    edx
c001a583:	59                   	pop    ecx
c001a584:	50                   	push   eax
c001a585:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a58a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a590:	e8 e3 64 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c001a595:	5b                   	pop    ebx
c001a596:	58                   	pop    eax
c001a597:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a59c:	68 be c4 02 c0       	push   0xc002c4be
c001a5a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5a7:	e8 12 65 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a5ac:	5a                   	pop    edx
c001a5ad:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a5b2:	59                   	pop    ecx
c001a5b3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a5b9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a5bc:	50                   	push   eax
c001a5bd:	e8 b6 64 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c001a5c2:	5b                   	pop    ebx
c001a5c3:	58                   	pop    eax
c001a5c4:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a5c9:	68 8b d3 02 c0       	push   0xc002d38b
c001a5ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5d4:	e8 e5 64 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a5d9:	5a                   	pop    edx
c001a5da:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a5df:	59                   	pop    ecx
c001a5e0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a5e6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a5e9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a5ec:	50                   	push   eax
c001a5ed:	e8 86 64 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c001a5f2:	5b                   	pop    ebx
c001a5f3:	58                   	pop    eax
c001a5f4:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a5f9:	68 8b d3 02 c0       	push   0xc002d38b
c001a5fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a604:	e8 b5 64 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a609:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a60e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a611:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a617:	8b 12                	mov    edx,DWORD PTR [edx]
c001a619:	59                   	pop    ecx
c001a61a:	5b                   	pop    ebx
c001a61b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a61e:	50                   	push   eax
c001a61f:	e8 54 64 ff ff       	call   c0010a78 <VgaText::putx(unsigned int)>
c001a624:	83 c4 10             	add    esp,0x10
c001a627:	b2 fe                	mov    dl,0xfe
c001a629:	e4 60                	in     al,0x60
c001a62b:	3c 1c                	cmp    al,0x1c
c001a62d:	74 04                	je     c001a633 <Krnl::panic(char const*)+0x334>
c001a62f:	3c 5a                	cmp    al,0x5a
c001a631:	75 f6                	jne    c001a629 <Krnl::panic(char const*)+0x32a>
c001a633:	e4 64                	in     al,0x64
c001a635:	a8 02                	test   al,0x2
c001a637:	75 fa                	jne    c001a633 <Krnl::panic(char const*)+0x334>
c001a639:	88 d0                	mov    al,dl
c001a63b:	e6 64                	out    0x64,al
c001a63d:	fa                   	cli    
c001a63e:	f4                   	hlt    
c001a63f:	eb e8                	jmp    c001a629 <Krnl::panic(char const*)+0x32a>
c001a641:	50                   	push   eax
c001a642:	50                   	push   eax
c001a643:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a648:	68 40 c5 02 c0       	push   0xc002c540
c001a64d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a653:	e8 66 64 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a658:	58                   	pop    eax
c001a659:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a65e:	5a                   	pop    edx
c001a65f:	68 4f c4 02 c0       	push   0xc002c44f
c001a664:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a66a:	e8 4f 64 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a66f:	59                   	pop    ecx
c001a670:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a675:	5b                   	pop    ebx
c001a676:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a679:	83 c0 0c             	add    eax,0xc
c001a67c:	50                   	push   eax
c001a67d:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001a682:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a688:	e8 31 64 ff ff       	call   c0010abe <VgaText::puts(char const*)>
c001a68d:	83 c4 10             	add    esp,0x10
c001a690:	e9 a3 fd ff ff       	jmp    c001a438 <Krnl::panic(char const*)+0x139>

c001a695 <Net::switchEndian16(unsigned short)>:
c001a695:	83 ec 04             	sub    esp,0x4
c001a698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a69c:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a6a0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a6a4:	c1 f8 08             	sar    eax,0x8
c001a6a7:	89 c2                	mov    edx,eax
c001a6a9:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a6ad:	c1 e0 08             	shl    eax,0x8
c001a6b0:	09 d0                	or     eax,edx
c001a6b2:	83 c4 04             	add    esp,0x4
c001a6b5:	c3                   	ret    

c001a6b6 <Net::switchEndian32(unsigned int)>:
c001a6b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6ba:	c1 e8 18             	shr    eax,0x18
c001a6bd:	89 c2                	mov    edx,eax
c001a6bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6c3:	c1 e0 08             	shl    eax,0x8
c001a6c6:	25 00 00 ff 00       	and    eax,0xff0000
c001a6cb:	09 c2                	or     edx,eax
c001a6cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6d1:	c1 e8 08             	shr    eax,0x8
c001a6d4:	25 00 ff 00 00       	and    eax,0xff00
c001a6d9:	09 c2                	or     edx,eax
c001a6db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6df:	c1 e0 18             	shl    eax,0x18
c001a6e2:	09 d0                	or     eax,edx
c001a6e4:	c3                   	ret    

c001a6e5 <Net::crc32Calc(unsigned char*, int)>:
c001a6e5:	83 ec 10             	sub    esp,0x10
c001a6e8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a6ed:	75 07                	jne    c001a6f6 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a6ef:	b8 00 00 00 00       	mov    eax,0x0
c001a6f4:	eb 7c                	jmp    c001a772 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a6f6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a6fb:	7f 07                	jg     c001a704 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a6fd:	b8 00 00 00 00       	mov    eax,0x0
c001a702:	eb 6e                	jmp    c001a772 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a704:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a70c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a718:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a71c:	7d 4e                	jge    c001a76c <Net::crc32Calc(unsigned char*, int)+0x87>
c001a71e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a722:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a726:	01 d0                	add    eax,edx
c001a728:	8a 00                	mov    al,BYTE PTR [eax]
c001a72a:	0f b6 c0             	movzx  eax,al
c001a72d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a731:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a739:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a73e:	7f 26                	jg     c001a766 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a744:	83 e0 01             	and    eax,0x1
c001a747:	74 0d                	je     c001a756 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a749:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a74d:	d1 e8                	shr    eax,1
c001a74f:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a754:	eb 06                	jmp    c001a75c <Net::crc32Calc(unsigned char*, int)+0x77>
c001a756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a75a:	d1 e8                	shr    eax,1
c001a75c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a760:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a764:	eb d3                	jmp    c001a739 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a766:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a76a:	eb a8                	jmp    c001a714 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a76c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a770:	f7 d0                	not    eax
c001a772:	83 c4 10             	add    esp,0x10
c001a775:	c3                   	ret    

c001a776 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a776:	57                   	push   edi
c001a777:	56                   	push   esi
c001a778:	53                   	push   ebx
c001a779:	83 ec 60             	sub    esp,0x60
c001a77c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a783:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a787:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a78f:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a794:	7f 1a                	jg     c001a7b0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a796:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a79d:	8d 50 01             	lea    edx,[eax+0x1]
c001a7a0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a7a7:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a7aa:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a7ae:	eb df                	jmp    c001a78f <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a7b0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7b7:	8d 50 01             	lea    edx,[eax+0x1]
c001a7ba:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a7c1:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a7c4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a7cf:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a7d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a7d7:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a7df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a7e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a7e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a7ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a7f3:	89 c6                	mov    esi,eax
c001a7f5:	89 d7                	mov    edi,edx
c001a7f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a7f9:	89 c8                	mov    eax,ecx
c001a7fb:	89 fa                	mov    edx,edi
c001a7fd:	89 f3                	mov    ebx,esi
c001a7ff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a803:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a807:	89 04 24             	mov    DWORD PTR [esp],eax
c001a80a:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a812:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a819:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a81d:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a821:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a825:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a82d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a831:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a835:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a839:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a83d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a841:	89 c6                	mov    esi,eax
c001a843:	89 d7                	mov    edi,edx
c001a845:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a847:	89 c8                	mov    eax,ecx
c001a849:	89 fa                	mov    edx,edi
c001a84b:	89 f3                	mov    ebx,esi
c001a84d:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a851:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a855:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a859:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a861:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a868:	0f b7 c0             	movzx  eax,ax
c001a86b:	c1 f8 08             	sar    eax,0x8
c001a86e:	89 c1                	mov    ecx,eax
c001a870:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a877:	8d 50 01             	lea    edx,[eax+0x1]
c001a87a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a881:	88 ca                	mov    dl,cl
c001a883:	88 10                	mov    BYTE PTR [eax],dl
c001a885:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a88c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a893:	8d 48 01             	lea    ecx,[eax+0x1]
c001a896:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a89d:	88 10                	mov    BYTE PTR [eax],dl
c001a89f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a8a3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a8a7:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a8ae:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a8b2:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a8b6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a8ba:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a8be:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a8c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a8c6:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a8ca:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a8ce:	89 c6                	mov    esi,eax
c001a8d0:	89 d7                	mov    edi,edx
c001a8d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8d4:	89 c8                	mov    eax,ecx
c001a8d6:	89 fa                	mov    edx,edi
c001a8d8:	89 f3                	mov    ebx,esi
c001a8da:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a8de:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a8e2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a8e6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a8ea:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a8f1:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8f8:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a8fc:	50                   	push   eax
c001a8fd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a901:	e8 df fd ff ff       	call   c001a6e5 <Net::crc32Calc(unsigned char*, int)>
c001a906:	83 c4 08             	add    esp,0x8
c001a909:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a90d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a911:	c1 e8 18             	shr    eax,0x18
c001a914:	89 c1                	mov    ecx,eax
c001a916:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a91d:	8d 50 01             	lea    edx,[eax+0x1]
c001a920:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a927:	88 ca                	mov    dl,cl
c001a929:	88 10                	mov    BYTE PTR [eax],dl
c001a92b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a92f:	c1 e8 10             	shr    eax,0x10
c001a932:	89 c1                	mov    ecx,eax
c001a934:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a93b:	8d 50 01             	lea    edx,[eax+0x1]
c001a93e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a945:	88 ca                	mov    dl,cl
c001a947:	88 10                	mov    BYTE PTR [eax],dl
c001a949:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a94d:	c1 e8 08             	shr    eax,0x8
c001a950:	89 c1                	mov    ecx,eax
c001a952:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a959:	8d 50 01             	lea    edx,[eax+0x1]
c001a95c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a963:	88 ca                	mov    dl,cl
c001a965:	88 10                	mov    BYTE PTR [eax],dl
c001a967:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a96e:	8d 50 01             	lea    edx,[eax+0x1]
c001a971:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a978:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a97c:	88 10                	mov    BYTE PTR [eax],dl
c001a97e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a982:	83 c4 60             	add    esp,0x60
c001a985:	5b                   	pop    ebx
c001a986:	5e                   	pop    esi
c001a987:	5f                   	pop    edi
c001a988:	c3                   	ret    

c001a989 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a989:	57                   	push   edi
c001a98a:	56                   	push   esi
c001a98b:	53                   	push   ebx
c001a98c:	83 ec 70             	sub    esp,0x70
c001a98f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a996:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a99a:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a9a2:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9a9:	83 c0 0e             	add    eax,0xe
c001a9ac:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a9b0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9b7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a9bb:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a9c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a9c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a9cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a9cf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a9d3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a9d7:	89 c6                	mov    esi,eax
c001a9d9:	89 d7                	mov    edi,edx
c001a9db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a9dd:	89 c8                	mov    eax,ecx
c001a9df:	89 fa                	mov    edx,edi
c001a9e1:	89 f3                	mov    ebx,esi
c001a9e3:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a9e7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a9eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a9ef:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a9f7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9fe:	83 c0 08             	add    eax,0x8
c001aa01:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001aa05:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa0c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aa10:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001aa18:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aa1c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aa20:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aa24:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001aa28:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aa2c:	89 c6                	mov    esi,eax
c001aa2e:	89 d7                	mov    edi,edx
c001aa30:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa32:	89 c8                	mov    eax,ecx
c001aa34:	89 fa                	mov    edx,edi
c001aa36:	89 f3                	mov    ebx,esi
c001aa38:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001aa3c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001aa40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aa44:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aa4c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa53:	8d 50 01             	lea    edx,[eax+0x1]
c001aa56:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa5d:	8a 00                	mov    al,BYTE PTR [eax]
c001aa5f:	0f b6 c0             	movzx  eax,al
c001aa62:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001aa67:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa6e:	8d 50 01             	lea    edx,[eax+0x1]
c001aa71:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa78:	8a 00                	mov    al,BYTE PTR [eax]
c001aa7a:	0f b6 c0             	movzx  eax,al
c001aa7d:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001aa82:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001aa87:	c1 e0 08             	shl    eax,0x8
c001aa8a:	89 c2                	mov    edx,eax
c001aa8c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aa90:	09 d0                	or     eax,edx
c001aa92:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001aa99:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aa9d:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001aaa5:	75 46                	jne    c001aaed <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001aaa7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aaae:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aab1:	66 3d dc 05          	cmp    ax,0x5dc
c001aab5:	77 16                	ja     c001aacd <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001aab7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aabe:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aac1:	0f b7 c0             	movzx  eax,ax
c001aac4:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001aacb:	eb 20                	jmp    c001aaed <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001aacd:	83 ec 0c             	sub    esp,0xc
c001aad0:	68 18 c6 02 c0       	push   0xc002c618
c001aad5:	e8 ef 7d ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001aada:	83 c4 10             	add    esp,0x10
c001aadd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aae4:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001aae8:	e9 17 01 00 00       	jmp    c001ac04 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001aaed:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aaf4:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001aafb:	8b 12                	mov    edx,DWORD PTR [edx]
c001aafd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ab01:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001ab08:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ab0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab20:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ab24:	89 c6                	mov    esi,eax
c001ab26:	89 d7                	mov    edi,edx
c001ab28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab2a:	89 c8                	mov    eax,ecx
c001ab2c:	89 fa                	mov    edx,edi
c001ab2e:	89 f3                	mov    ebx,esi
c001ab30:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ab34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ab38:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab3b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab42:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001ab49:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab50:	8d 50 01             	lea    edx,[eax+0x1]
c001ab53:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab5a:	8a 00                	mov    al,BYTE PTR [eax]
c001ab5c:	0f b6 c0             	movzx  eax,al
c001ab5f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001ab63:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab6a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab6d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab74:	8a 00                	mov    al,BYTE PTR [eax]
c001ab76:	0f b6 c0             	movzx  eax,al
c001ab79:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001ab7d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab84:	8d 50 01             	lea    edx,[eax+0x1]
c001ab87:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab8e:	8a 00                	mov    al,BYTE PTR [eax]
c001ab90:	0f b6 c0             	movzx  eax,al
c001ab93:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001ab97:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab9e:	8d 50 01             	lea    edx,[eax+0x1]
c001aba1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aba8:	8a 00                	mov    al,BYTE PTR [eax]
c001abaa:	0f b6 c0             	movzx  eax,al
c001abad:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001abb1:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001abb5:	c1 e0 18             	shl    eax,0x18
c001abb8:	89 c2                	mov    edx,eax
c001abba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001abbe:	c1 e0 10             	shl    eax,0x10
c001abc1:	09 c2                	or     edx,eax
c001abc3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001abc7:	c1 e0 08             	shl    eax,0x8
c001abca:	09 d0                	or     eax,edx
c001abcc:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001abd0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001abd4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abdb:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001abdf:	83 e8 04             	sub    eax,0x4
c001abe2:	83 ec 08             	sub    esp,0x8
c001abe5:	50                   	push   eax
c001abe6:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001abea:	e8 f6 fa ff ff       	call   c001a6e5 <Net::crc32Calc(unsigned char*, int)>
c001abef:	83 c4 10             	add    esp,0x10
c001abf2:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001abf6:	0f 94 c2             	sete   dl
c001abf9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ac00:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ac03:	90                   	nop
c001ac04:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ac0b:	83 c4 70             	add    esp,0x70
c001ac0e:	5b                   	pop    ebx
c001ac0f:	5e                   	pop    esi
c001ac10:	5f                   	pop    edi
c001ac11:	c2 04 00             	ret    0x4

c001ac14 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ac14:	55                   	push   ebp
c001ac15:	57                   	push   edi
c001ac16:	56                   	push   esi
c001ac17:	53                   	push   ebx
c001ac18:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac1e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ac25:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ac27:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ac2a:	80 fb 40             	cmp    bl,0x40
c001ac2d:	75 1b                	jne    c001ac4a <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ac2f:	8a 16                	mov    dl,BYTE PTR [esi]
c001ac31:	84 d2                	test   dl,dl
c001ac33:	0f 84 f1 00 00 00    	je     c001ad2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac39:	8d 46 01             	lea    eax,[esi+0x1]
c001ac3c:	80 fa 3a             	cmp    dl,0x3a
c001ac3f:	74 04                	je     c001ac45 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ac41:	89 c6                	mov    esi,eax
c001ac43:	eb ea                	jmp    c001ac2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ac45:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ac48:	89 c6                	mov    esi,eax
c001ac4a:	50                   	push   eax
c001ac4b:	6a 40                	push   0x40
c001ac4d:	6a 00                	push   0x0
c001ac4f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac53:	50                   	push   eax
c001ac54:	e8 f7 5a fe ff       	call   c0000750 <memset>
c001ac59:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ac60:	31 c0                	xor    eax,eax
c001ac62:	83 c4 10             	add    esp,0x10
c001ac65:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ac67:	84 c9                	test   cl,cl
c001ac69:	0f 84 bb 00 00 00    	je     c001ad2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac6f:	3d c7 00 00 00       	cmp    eax,0xc7
c001ac74:	0f 8f b0 00 00 00    	jg     c001ad2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac7a:	80 f9 0a             	cmp    cl,0xa
c001ac7d:	0f 85 98 00 00 00    	jne    c001ad1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ac83:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ac88:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ac8c:	a8 df                	test   al,0xdf
c001ac8e:	0f 94 c1             	sete   cl
c001ac91:	3c 23                	cmp    al,0x23
c001ac93:	0f 94 c2             	sete   dl
c001ac96:	08 d1                	or     cl,dl
c001ac98:	75 4a                	jne    c001ace4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac9a:	8d 50 f7             	lea    edx,[eax-0x9]
c001ac9d:	80 fa 01             	cmp    dl,0x1
c001aca0:	76 42                	jbe    c001ace4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aca2:	3c 5b                	cmp    al,0x5b
c001aca4:	75 42                	jne    c001ace8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001aca6:	80 fb 40             	cmp    bl,0x40
c001aca9:	75 39                	jne    c001ace4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acab:	83 ec 0c             	sub    esp,0xc
c001acae:	8d 54 24 65          	lea    edx,[esp+0x65]
c001acb2:	52                   	push   edx
c001acb3:	e8 b4 5a fe ff       	call   c000076c <strlen>
c001acb8:	83 c4 10             	add    esp,0x10
c001acbb:	83 f8 3f             	cmp    eax,0x3f
c001acbe:	77 6a                	ja     c001ad2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acc0:	50                   	push   eax
c001acc1:	50                   	push   eax
c001acc2:	8d 54 24 61          	lea    edx,[esp+0x61]
c001acc6:	52                   	push   edx
c001acc7:	8d 54 24 24          	lea    edx,[esp+0x24]
c001accb:	52                   	push   edx
c001accc:	e8 3b 5b fe ff       	call   c000080c <strcpy>
c001acd1:	58                   	pop    eax
c001acd2:	8d 54 24 24          	lea    edx,[esp+0x24]
c001acd6:	52                   	push   edx
c001acd7:	e8 90 5a fe ff       	call   c000076c <strlen>
c001acdc:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ace1:	83 c4 10             	add    esp,0x10
c001ace4:	31 d2                	xor    edx,edx
c001ace6:	eb 3a                	jmp    c001ad22 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ace8:	80 fb 40             	cmp    bl,0x40
c001aceb:	74 06                	je     c001acf3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001aced:	8d 44 24 58          	lea    eax,[esp+0x58]
c001acf1:	eb 20                	jmp    c001ad13 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001acf3:	50                   	push   eax
c001acf4:	50                   	push   eax
c001acf5:	55                   	push   ebp
c001acf6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001acfa:	50                   	push   eax
c001acfb:	e8 98 5b fe ff       	call   c0000898 <strcmp>
c001ad00:	83 c4 10             	add    esp,0x10
c001ad03:	85 c0                	test   eax,eax
c001ad05:	75 dd                	jne    c001ace4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad07:	eb e4                	jmp    c001aced <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ad09:	8d 50 01             	lea    edx,[eax+0x1]
c001ad0c:	80 f9 3d             	cmp    cl,0x3d
c001ad0f:	74 1d                	je     c001ad2e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ad11:	89 d0                	mov    eax,edx
c001ad13:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad15:	84 c9                	test   cl,cl
c001ad17:	75 f0                	jne    c001ad09 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ad19:	eb 0f                	jmp    c001ad2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad1b:	8d 50 01             	lea    edx,[eax+0x1]
c001ad1e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ad22:	47                   	inc    edi
c001ad23:	89 d0                	mov    eax,edx
c001ad25:	e9 3b ff ff ff       	jmp    c001ac65 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ad2a:	31 c0                	xor    eax,eax
c001ad2c:	eb 33                	jmp    c001ad61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ad2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ad35:	50                   	push   eax
c001ad36:	50                   	push   eax
c001ad37:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ad3b:	50                   	push   eax
c001ad3c:	56                   	push   esi
c001ad3d:	e8 56 5b fe ff       	call   c0000898 <strcmp>
c001ad42:	83 c4 10             	add    esp,0x10
c001ad45:	85 c0                	test   eax,eax
c001ad47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad4b:	75 97                	jne    c001ace4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad4d:	51                   	push   ecx
c001ad4e:	51                   	push   ecx
c001ad4f:	52                   	push   edx
c001ad50:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ad57:	e8 b0 5a fe ff       	call   c000080c <strcpy>
c001ad5c:	83 c4 10             	add    esp,0x10
c001ad5f:	b0 01                	mov    al,0x1
c001ad61:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ad67:	5b                   	pop    ebx
c001ad68:	5e                   	pop    esi
c001ad69:	5f                   	pop    edi
c001ad6a:	5d                   	pop    ebp
c001ad6b:	c3                   	ret    

c001ad6c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ad6c:	57                   	push   edi
c001ad6d:	56                   	push   esi
c001ad6e:	53                   	push   ebx
c001ad6f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad75:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ad7c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ad83:	53                   	push   ebx
c001ad84:	e8 e3 59 fe ff       	call   c000076c <strlen>
c001ad89:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad8c:	89 c7                	mov    edi,eax
c001ad8e:	e8 d9 59 fe ff       	call   c000076c <strlen>
c001ad93:	83 c4 10             	add    esp,0x10
c001ad96:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ad9a:	3d ff 00 00 00       	cmp    eax,0xff
c001ad9f:	0f 87 d3 00 00 00    	ja     c001ae78 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ada5:	57                   	push   edi
c001ada6:	57                   	push   edi
c001ada7:	56                   	push   esi
c001ada8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001adac:	56                   	push   esi
c001adad:	e8 5a 5a fe ff       	call   c000080c <strcpy>
c001adb2:	58                   	pop    eax
c001adb3:	5a                   	pop    edx
c001adb4:	68 6d cb 02 c0       	push   0xc002cb6d
c001adb9:	56                   	push   esi
c001adba:	e8 8d 5b fe ff       	call   c000094c <strcat>
c001adbf:	59                   	pop    ecx
c001adc0:	5f                   	pop    edi
c001adc1:	53                   	push   ebx
c001adc2:	56                   	push   esi
c001adc3:	e8 84 5b fe ff       	call   c000094c <strcat>
c001adc8:	58                   	pop    eax
c001adc9:	5a                   	pop    edx
c001adca:	68 64 c6 02 c0       	push   0xc002c664
c001adcf:	56                   	push   esi
c001add0:	e8 77 5b fe ff       	call   c000094c <strcat>
c001add5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001addc:	e8 ab 4a ff ff       	call   c000f88c <malloc>
c001ade1:	83 c4 0c             	add    esp,0xc
c001ade4:	89 c3                	mov    ebx,eax
c001ade6:	ff 35 10 28 03 c0    	push   DWORD PTR ds:0xc0032810
c001adec:	56                   	push   esi
c001aded:	50                   	push   eax
c001adee:	e8 35 80 ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c001adf3:	83 c4 10             	add    esp,0x10
c001adf6:	85 db                	test   ebx,ebx
c001adf8:	74 7e                	je     c001ae78 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001adfa:	51                   	push   ecx
c001adfb:	51                   	push   ecx
c001adfc:	6a 01                	push   0x1
c001adfe:	53                   	push   ebx
c001adff:	e8 88 80 ff ff       	call   c0012e8c <File::open(FileOpenMode)>
c001ae04:	83 c4 10             	add    esp,0x10
c001ae07:	85 c0                	test   eax,eax
c001ae09:	74 08                	je     c001ae13 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ae0b:	83 ec 0c             	sub    esp,0xc
c001ae0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae10:	53                   	push   ebx
c001ae11:	eb 5f                	jmp    c001ae72 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ae13:	52                   	push   edx
c001ae14:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ae18:	50                   	push   eax
c001ae19:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ae1d:	50                   	push   eax
c001ae1e:	53                   	push   ebx
c001ae1f:	e8 14 83 ff ff       	call   c0013138 <File::stat(unsigned long long*, bool*)>
c001ae24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae28:	83 c4 10             	add    esp,0x10
c001ae2b:	89 c1                	mov    ecx,eax
c001ae2d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ae31:	74 31                	je     c001ae64 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae33:	83 ec 0c             	sub    esp,0xc
c001ae36:	50                   	push   eax
c001ae37:	e8 50 4a ff ff       	call   c000f88c <malloc>
c001ae3c:	89 c6                	mov    esi,eax
c001ae3e:	58                   	pop    eax
c001ae3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae41:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ae45:	52                   	push   edx
c001ae46:	56                   	push   esi
c001ae47:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae4b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae4f:	53                   	push   ebx
c001ae50:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae53:	83 c4 20             	add    esp,0x20
c001ae56:	85 c0                	test   eax,eax
c001ae58:	75 0a                	jne    c001ae64 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae5e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ae62:	74 18                	je     c001ae7c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ae64:	83 ec 0c             	sub    esp,0xc
c001ae67:	53                   	push   ebx
c001ae68:	e8 7d 80 ff ff       	call   c0012eea <File::close()>
c001ae6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae72:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae75:	83 c4 10             	add    esp,0x10
c001ae78:	31 c0                	xor    eax,eax
c001ae7a:	eb 3b                	jmp    c001aeb7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ae7c:	83 ec 0c             	sub    esp,0xc
c001ae7f:	53                   	push   ebx
c001ae80:	e8 65 80 ff ff       	call   c0012eea <File::close()>
c001ae85:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae8a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae8d:	83 c4 0c             	add    esp,0xc
c001ae90:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae97:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae9e:	56                   	push   esi
c001ae9f:	e8 70 fd ff ff       	call   c001ac14 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001aea4:	89 34 24             	mov    DWORD PTR [esp],esi
c001aea7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aeab:	e8 ec 49 ff ff       	call   c000f89c <free>
c001aeb0:	83 c4 10             	add    esp,0x10
c001aeb3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aeb7:	81 c4 20 01 00 00    	add    esp,0x120
c001aebd:	5b                   	pop    ebx
c001aebe:	5e                   	pop    esi
c001aebf:	5f                   	pop    edi
c001aec0:	c3                   	ret    

c001aec1 <Reg::getLine(char*, char*, char*)>:
c001aec1:	57                   	push   edi
c001aec2:	56                   	push   esi
c001aec3:	53                   	push   ebx
c001aec4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aec8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aecc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aed0:	57                   	push   edi
c001aed1:	56                   	push   esi
c001aed2:	53                   	push   ebx
c001aed3:	68 69 c6 02 c0       	push   0xc002c669
c001aed8:	e8 8f fe ff ff       	call   c001ad6c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aedd:	83 c4 10             	add    esp,0x10
c001aee0:	84 c0                	test   al,al
c001aee2:	75 10                	jne    c001aef4 <Reg::getLine(char*, char*, char*)+0x33>
c001aee4:	57                   	push   edi
c001aee5:	56                   	push   esi
c001aee6:	53                   	push   ebx
c001aee7:	68 8e c6 02 c0       	push   0xc002c68e
c001aeec:	e8 7b fe ff ff       	call   c001ad6c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aef1:	83 c4 10             	add    esp,0x10
c001aef4:	5b                   	pop    ebx
c001aef5:	5e                   	pop    esi
c001aef6:	5f                   	pop    edi
c001aef7:	c3                   	ret    

c001aef8 <Reg::readInt(char*, char*, int*)>:
c001aef8:	55                   	push   ebp
c001aef9:	57                   	push   edi
c001aefa:	56                   	push   esi
c001aefb:	53                   	push   ebx
c001aefc:	81 ec f0 00 00 00    	sub    esp,0xf0
c001af02:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001af06:	57                   	push   edi
c001af07:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af0e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af15:	e8 a7 ff ff ff       	call   c001aec1 <Reg::getLine(char*, char*, char*)>
c001af1a:	83 c4 10             	add    esp,0x10
c001af1d:	84 c0                	test   al,al
c001af1f:	0f 84 b3 00 00 00    	je     c001afd8 <Reg::readInt(char*, char*, int*)+0xe0>
c001af25:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001af29:	80 fa 2b             	cmp    dl,0x2b
c001af2c:	74 0c                	je     c001af3a <Reg::readInt(char*, char*, int*)+0x42>
c001af2e:	80 fa 2d             	cmp    dl,0x2d
c001af31:	75 0e                	jne    c001af41 <Reg::readInt(char*, char*, int*)+0x49>
c001af33:	ba 01 00 00 00       	mov    edx,0x1
c001af38:	eb 0b                	jmp    c001af45 <Reg::readInt(char*, char*, int*)+0x4d>
c001af3a:	ba 01 00 00 00       	mov    edx,0x1
c001af3f:	eb 02                	jmp    c001af43 <Reg::readInt(char*, char*, int*)+0x4b>
c001af41:	31 d2                	xor    edx,edx
c001af43:	31 c0                	xor    eax,eax
c001af45:	be 0a 00 00 00       	mov    esi,0xa
c001af4a:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001af4f:	75 20                	jne    c001af71 <Reg::readInt(char*, char*, int*)+0x79>
c001af51:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001af55:	80 f9 78             	cmp    cl,0x78
c001af58:	75 0a                	jne    c001af64 <Reg::readInt(char*, char*, int*)+0x6c>
c001af5a:	83 c2 02             	add    edx,0x2
c001af5d:	be 10 00 00 00       	mov    esi,0x10
c001af62:	eb 0d                	jmp    c001af71 <Reg::readInt(char*, char*, int*)+0x79>
c001af64:	80 f9 62             	cmp    cl,0x62
c001af67:	75 08                	jne    c001af71 <Reg::readInt(char*, char*, int*)+0x79>
c001af69:	83 c2 02             	add    edx,0x2
c001af6c:	be 02 00 00 00       	mov    esi,0x2
c001af71:	01 d7                	add    edi,edx
c001af73:	31 d2                	xor    edx,edx
c001af75:	8a 1f                	mov    bl,BYTE PTR [edi]
c001af77:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001af7b:	80 fb 0d             	cmp    bl,0xd
c001af7e:	0f 94 c3             	sete   bl
c001af81:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001af86:	0f 94 c1             	sete   cl
c001af89:	08 cb                	or     bl,cl
c001af8b:	75 3a                	jne    c001afc7 <Reg::readInt(char*, char*, int*)+0xcf>
c001af8d:	0f af d6             	imul   edx,esi
c001af90:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001af95:	83 fe 10             	cmp    esi,0x10
c001af98:	75 26                	jne    c001afc0 <Reg::readInt(char*, char*, int*)+0xc8>
c001af9a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af9e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001afa1:	89 e9                	mov    ecx,ebp
c001afa3:	80 f9 05             	cmp    cl,0x5
c001afa6:	77 06                	ja     c001afae <Reg::readInt(char*, char*, int*)+0xb6>
c001afa8:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001afac:	eb 16                	jmp    c001afc4 <Reg::readInt(char*, char*, int*)+0xcc>
c001afae:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001afb2:	83 e9 61             	sub    ecx,0x61
c001afb5:	80 f9 05             	cmp    cl,0x5
c001afb8:	77 06                	ja     c001afc0 <Reg::readInt(char*, char*, int*)+0xc8>
c001afba:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001afbe:	eb 04                	jmp    c001afc4 <Reg::readInt(char*, char*, int*)+0xcc>
c001afc0:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001afc4:	47                   	inc    edi
c001afc5:	eb ae                	jmp    c001af75 <Reg::readInt(char*, char*, int*)+0x7d>
c001afc7:	84 c0                	test   al,al
c001afc9:	74 02                	je     c001afcd <Reg::readInt(char*, char*, int*)+0xd5>
c001afcb:	f7 da                	neg    edx
c001afcd:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001afd4:	89 10                	mov    DWORD PTR [eax],edx
c001afd6:	88 d8                	mov    al,bl
c001afd8:	81 c4 ec 00 00 00    	add    esp,0xec
c001afde:	5b                   	pop    ebx
c001afdf:	5e                   	pop    esi
c001afe0:	5f                   	pop    edi
c001afe1:	5d                   	pop    ebp
c001afe2:	c3                   	ret    

c001afe3 <Reg::readString(char*, char*, char*, int)>:
c001afe3:	57                   	push   edi
c001afe4:	56                   	push   esi
c001afe5:	53                   	push   ebx
c001afe6:	81 ec d4 00 00 00    	sub    esp,0xd4
c001afec:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001aff3:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001aff7:	57                   	push   edi
c001aff8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001afff:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b006:	e8 b6 fe ff ff       	call   c001aec1 <Reg::getLine(char*, char*, char*)>
c001b00b:	83 c4 10             	add    esp,0x10
c001b00e:	89 c6                	mov    esi,eax
c001b010:	84 c0                	test   al,al
c001b012:	74 44                	je     c001b058 <Reg::readString(char*, char*, char*, int)+0x75>
c001b014:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b01b:	31 c0                	xor    eax,eax
c001b01d:	4a                   	dec    edx
c001b01e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b021:	84 c9                	test   cl,cl
c001b023:	74 0f                	je     c001b034 <Reg::readString(char*, char*, char*, int)+0x51>
c001b025:	39 c2                	cmp    edx,eax
c001b027:	7e 0b                	jle    c001b034 <Reg::readString(char*, char*, char*, int)+0x51>
c001b029:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b02c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b031:	40                   	inc    eax
c001b032:	eb ea                	jmp    c001b01e <Reg::readString(char*, char*, char*, int)+0x3b>
c001b034:	83 ec 0c             	sub    esp,0xc
c001b037:	53                   	push   ebx
c001b038:	e8 2f 57 fe ff       	call   c000076c <strlen>
c001b03d:	83 c4 10             	add    esp,0x10
c001b040:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b045:	75 11                	jne    c001b058 <Reg::readString(char*, char*, char*, int)+0x75>
c001b047:	83 ec 0c             	sub    esp,0xc
c001b04a:	53                   	push   ebx
c001b04b:	e8 1c 57 fe ff       	call   c000076c <strlen>
c001b050:	83 c4 10             	add    esp,0x10
c001b053:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b058:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b05e:	89 f0                	mov    eax,esi
c001b060:	5b                   	pop    ebx
c001b061:	5e                   	pop    esi
c001b062:	5f                   	pop    edi
c001b063:	c3                   	ret    

c001b064 <Reg::readBool(char*, char*, bool*)>:
c001b064:	83 ec 20             	sub    esp,0x20
c001b067:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b06b:	50                   	push   eax
c001b06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b074:	e8 7f fe ff ff       	call   c001aef8 <Reg::readInt(char*, char*, int*)>
c001b079:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b07e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b082:	0f 95 02             	setne  BYTE PTR [edx]
c001b085:	83 c4 2c             	add    esp,0x2c
c001b088:	c3                   	ret    

c001b089 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b089:	53                   	push   ebx
c001b08a:	83 ec 1c             	sub    esp,0x1c
c001b08d:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b091:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b095:	50                   	push   eax
c001b096:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b09a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b09e:	e8 c1 ff ff ff       	call   c001b064 <Reg::readBool(char*, char*, bool*)>
c001b0a3:	83 c4 10             	add    esp,0x10
c001b0a6:	84 c0                	test   al,al
c001b0a8:	74 04                	je     c001b0ae <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b0aa:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b0ae:	88 d8                	mov    al,bl
c001b0b0:	83 c4 18             	add    esp,0x18
c001b0b3:	5b                   	pop    ebx
c001b0b4:	c3                   	ret    

c001b0b5 <Reg::readIntWithDefault(char*, char*, int)>:
c001b0b5:	53                   	push   ebx
c001b0b6:	83 ec 1c             	sub    esp,0x1c
c001b0b9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b0bd:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b0c1:	50                   	push   eax
c001b0c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0ca:	e8 29 fe ff ff       	call   c001aef8 <Reg::readInt(char*, char*, int*)>
c001b0cf:	83 c4 10             	add    esp,0x10
c001b0d2:	84 c0                	test   al,al
c001b0d4:	74 04                	je     c001b0da <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b0d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b0da:	89 d8                	mov    eax,ebx
c001b0dc:	83 c4 18             	add    esp,0x18
c001b0df:	5b                   	pop    ebx
c001b0e0:	c3                   	ret    

c001b0e1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b0e1:	57                   	push   edi
c001b0e2:	56                   	push   esi
c001b0e3:	56                   	push   esi
c001b0e4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b0e8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b0ec:	56                   	push   esi
c001b0ed:	57                   	push   edi
c001b0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0f6:	e8 e8 fe ff ff       	call   c001afe3 <Reg::readString(char*, char*, char*, int)>
c001b0fb:	83 c4 10             	add    esp,0x10
c001b0fe:	84 c0                	test   al,al
c001b100:	75 1a                	jne    c001b11c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b102:	51                   	push   ecx
c001b103:	56                   	push   esi
c001b104:	6a 00                	push   0x0
c001b106:	57                   	push   edi
c001b107:	e8 44 56 fe ff       	call   c0000750 <memset>
c001b10c:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b10f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b113:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b115:	83 c4 10             	add    esp,0x10
c001b118:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b11c:	89 f8                	mov    eax,edi
c001b11e:	5a                   	pop    edx
c001b11f:	5e                   	pop    esi
c001b120:	5f                   	pop    edi
c001b121:	c3                   	ret    

c001b122 <Sys::eject(regs*)>:
c001b122:	83 ec 0c             	sub    esp,0xc
c001b125:	83 ca ff             	or     edx,0xffffffff
c001b128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b12c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b12f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b134:	83 e9 41             	sub    ecx,0x41
c001b137:	83 f9 19             	cmp    ecx,0x19
c001b13a:	77 18                	ja     c001b154 <Sys::eject(regs*)+0x32>
c001b13c:	8b 0c 8d c0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0740]
c001b143:	85 c9                	test   ecx,ecx
c001b145:	74 0d                	je     c001b154 <Sys::eject(regs*)+0x32>
c001b147:	83 ec 0c             	sub    esp,0xc
c001b14a:	51                   	push   ecx
c001b14b:	e8 8c b0 ff ff       	call   c00161dc <LogicalDisk::eject()>
c001b150:	83 c4 10             	add    esp,0x10
c001b153:	99                   	cdq    
c001b154:	83 c4 0c             	add    esp,0xc
c001b157:	c3                   	ret    

c001b158 <Sys::exit(regs*)>:
c001b158:	83 ec 18             	sub    esp,0x18
c001b15b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b15f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b162:	e8 7e 38 00 00       	call   c001e9e5 <terminateTask(int)>
c001b167:	83 c8 ff             	or     eax,0xffffffff
c001b16a:	83 c4 1c             	add    esp,0x1c
c001b16d:	89 c2                	mov    edx,eax
c001b16f:	c3                   	ret    

c001b170 <Sys::getCwd(regs*)>:
c001b170:	83 ec 10             	sub    esp,0x10
c001b173:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b177:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b17a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b17d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b182:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b185:	e8 a0 7a ff ff       	call   c0012c2a <Fs::getcwd(Process*, char*, int)>
c001b18a:	83 c4 1c             	add    esp,0x1c
c001b18d:	99                   	cdq    
c001b18e:	c3                   	ret    

c001b18f <Sys::getPID(regs*)>:
c001b18f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b194:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b197:	8b 00                	mov    eax,DWORD PTR [eax]
c001b199:	99                   	cdq    
c001b19a:	c3                   	ret    

c001b19b <Sys::getRAMData(regs*)>:
c001b19b:	8b 0d 14 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f314
c001b1a1:	6b 05 10 f3 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f310,0x64
c001b1a8:	99                   	cdq    
c001b1a9:	f7 f9                	idiv   ecx
c001b1ab:	c1 e0 18             	shl    eax,0x18
c001b1ae:	09 c8                	or     eax,ecx
c001b1b0:	99                   	cdq    
c001b1b1:	c3                   	ret    

c001b1b2 <Sys::getVGAPtr(regs*)>:
c001b1b2:	55                   	push   ebp
c001b1b3:	57                   	push   edi
c001b1b4:	56                   	push   esi
c001b1b5:	53                   	push   ebx
c001b1b6:	83 ec 18             	sub    esp,0x18
c001b1b9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b1bd:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b1c0:	e8 02 33 00 00       	call   c001e4c7 <Thr::processFromPID(int)>
c001b1c5:	83 c4 10             	add    esp,0x10
c001b1c8:	89 c1                	mov    ecx,eax
c001b1ca:	b8 01 00 00 00       	mov    eax,0x1
c001b1cf:	85 c9                	test   ecx,ecx
c001b1d1:	74 59                	je     c001b22c <Sys::getVGAPtr(regs*)+0x7a>
c001b1d3:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b1d9:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b1dd:	74 0c                	je     c001b1eb <Sys::getVGAPtr(regs*)+0x39>
c001b1df:	83 ec 0c             	sub    esp,0xc
c001b1e2:	53                   	push   ebx
c001b1e3:	e8 04 55 ff ff       	call   c00106ec <setActiveTerminal(VgaText*)>
c001b1e8:	83 c4 10             	add    esp,0x10
c001b1eb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b1ee:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b1f1:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b1f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1f8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b1fb:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b1fe:	81 c3 82 00 00 00    	add    ebx,0x82
c001b204:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b20a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b20d:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b210:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b216:	50                   	push   eax
c001b217:	50                   	push   eax
c001b218:	53                   	push   ebx
c001b219:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b21c:	05 a8 0f 00 00       	add    eax,0xfa8
c001b221:	50                   	push   eax
c001b222:	e8 e5 55 fe ff       	call   c000080c <strcpy>
c001b227:	83 c4 10             	add    esp,0x10
c001b22a:	31 c0                	xor    eax,eax
c001b22c:	83 c4 0c             	add    esp,0xc
c001b22f:	31 d2                	xor    edx,edx
c001b231:	5b                   	pop    ebx
c001b232:	5e                   	pop    esi
c001b233:	5f                   	pop    edi
c001b234:	5d                   	pop    ebp
c001b235:	c3                   	ret    

c001b236 <Sys::loadDLL(regs*)>:
c001b236:	56                   	push   esi
c001b237:	53                   	push   ebx
c001b238:	31 d2                	xor    edx,edx
c001b23a:	51                   	push   ecx
c001b23b:	b8 01 00 00 00       	mov    eax,0x1
c001b240:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b244:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b248:	0f 84 8c 00 00 00    	je     c001b2da <Sys::loadDLL(regs*)+0xa4>
c001b24e:	83 ec 0c             	sub    esp,0xc
c001b251:	68 14 01 00 00       	push   0x114
c001b256:	e8 31 46 ff ff       	call   c000f88c <malloc>
c001b25b:	83 c4 0c             	add    esp,0xc
c001b25e:	89 c3                	mov    ebx,eax
c001b260:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b265:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b268:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b26b:	53                   	push   ebx
c001b26c:	e8 b7 7b ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c001b271:	83 c4 10             	add    esp,0x10
c001b274:	31 d2                	xor    edx,edx
c001b276:	b8 02 00 00 00       	mov    eax,0x2
c001b27b:	85 db                	test   ebx,ebx
c001b27d:	74 5b                	je     c001b2da <Sys::loadDLL(regs*)+0xa4>
c001b27f:	83 ec 0c             	sub    esp,0xc
c001b282:	53                   	push   ebx
c001b283:	e8 72 7e ff ff       	call   c00130fa <File::exists()>
c001b288:	83 c4 10             	add    esp,0x10
c001b28b:	84 c0                	test   al,al
c001b28d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b28f:	75 11                	jne    c001b2a2 <Sys::loadDLL(regs*)+0x6c>
c001b291:	83 ec 0c             	sub    esp,0xc
c001b294:	53                   	push   ebx
c001b295:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b298:	83 c4 10             	add    esp,0x10
c001b29b:	b8 03 00 00 00       	mov    eax,0x3
c001b2a0:	eb 36                	jmp    c001b2d8 <Sys::loadDLL(regs*)+0xa2>
c001b2a2:	83 ec 0c             	sub    esp,0xc
c001b2a5:	53                   	push   ebx
c001b2a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2a9:	58                   	pop    eax
c001b2aa:	5a                   	pop    edx
c001b2ab:	6a 00                	push   0x0
c001b2ad:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2b0:	e8 1e 24 00 00       	call   c001d6d3 <Thr::loadDLL(char const*, bool)>
c001b2b5:	83 c4 10             	add    esp,0x10
c001b2b8:	89 c1                	mov    ecx,eax
c001b2ba:	31 d2                	xor    edx,edx
c001b2bc:	b8 04 00 00 00       	mov    eax,0x4
c001b2c1:	85 c9                	test   ecx,ecx
c001b2c3:	74 15                	je     c001b2da <Sys::loadDLL(regs*)+0xa4>
c001b2c5:	53                   	push   ebx
c001b2c6:	53                   	push   ebx
c001b2c7:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c001b2cd:	51                   	push   ecx
c001b2ce:	e8 2b 26 00 00       	call   c001d8fe <Thr::executeDLL(unsigned long, void*)>
c001b2d3:	83 c4 10             	add    esp,0x10
c001b2d6:	31 c0                	xor    eax,eax
c001b2d8:	31 d2                	xor    edx,edx
c001b2da:	59                   	pop    ecx
c001b2db:	5b                   	pop    ebx
c001b2dc:	5e                   	pop    esi
c001b2dd:	c3                   	ret    

c001b2de <Sys::read(regs*)>:
c001b2de:	57                   	push   edi
c001b2df:	56                   	push   esi
c001b2e0:	53                   	push   ebx
c001b2e1:	83 ec 10             	sub    esp,0x10
c001b2e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2e8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2eb:	83 f8 02             	cmp    eax,0x2
c001b2ee:	77 10                	ja     c001b300 <Sys::read(regs*)+0x22>
c001b2f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2f8:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b2fe:	eb 0e                	jmp    c001b30e <Sys::read(regs*)+0x30>
c001b300:	83 ec 0c             	sub    esp,0xc
c001b303:	50                   	push   eax
c001b304:	e8 64 60 ff ff       	call   c001136d <getFromFileDescriptor(int)>
c001b309:	83 c4 10             	add    esp,0x10
c001b30c:	89 c1                	mov    ecx,eax
c001b30e:	83 c8 ff             	or     eax,0xffffffff
c001b311:	85 c9                	test   ecx,ecx
c001b313:	89 c2                	mov    edx,eax
c001b315:	74 28                	je     c001b33f <Sys::read(regs*)+0x61>
c001b317:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b31f:	31 ff                	xor    edi,edi
c001b321:	83 ec 0c             	sub    esp,0xc
c001b324:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b326:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b32a:	52                   	push   edx
c001b32b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b32e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b331:	57                   	push   edi
c001b332:	56                   	push   esi
c001b333:	51                   	push   ecx
c001b334:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b337:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b33b:	83 c4 20             	add    esp,0x20
c001b33e:	99                   	cdq    
c001b33f:	83 c4 10             	add    esp,0x10
c001b342:	5b                   	pop    ebx
c001b343:	5e                   	pop    esi
c001b344:	5f                   	pop    edi
c001b345:	c3                   	ret    

c001b346 <Sys::sbrk(regs*)>:
c001b346:	56                   	push   esi
c001b347:	53                   	push   ebx
c001b348:	50                   	push   eax
c001b349:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b34e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b352:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b355:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b358:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b35e:	85 db                	test   ebx,ebx
c001b360:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b363:	74 02                	je     c001b367 <Sys::sbrk(regs*)+0x21>
c001b365:	79 06                	jns    c001b36d <Sys::sbrk(regs*)+0x27>
c001b367:	89 f0                	mov    eax,esi
c001b369:	31 d2                	xor    edx,edx
c001b36b:	eb 2a                	jmp    c001b397 <Sys::sbrk(regs*)+0x51>
c001b36d:	83 c8 ff             	or     eax,0xffffffff
c001b370:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b376:	89 c2                	mov    edx,eax
c001b378:	77 1d                	ja     c001b397 <Sys::sbrk(regs*)+0x51>
c001b37a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b380:	50                   	push   eax
c001b381:	c1 ea 0c             	shr    edx,0xc
c001b384:	68 07 0c 00 00       	push   0xc07
c001b389:	52                   	push   edx
c001b38a:	51                   	push   ecx
c001b38b:	e8 6c 6a ff ff       	call   c0011dfc <VAS::allocatePages(int, int)>
c001b390:	89 f0                	mov    eax,esi
c001b392:	31 d2                	xor    edx,edx
c001b394:	83 c4 10             	add    esp,0x10
c001b397:	59                   	pop    ecx
c001b398:	5b                   	pop    ebx
c001b399:	5e                   	pop    esi
c001b39a:	c3                   	ret    

c001b39b <Sys::setCwd(regs*)>:
c001b39b:	83 ec 14             	sub    esp,0x14
c001b39e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b3a2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b3a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3aa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3ad:	e8 e7 7d ff ff       	call   c0013199 <Fs::setcwd(Process*, char*)>
c001b3b2:	83 c4 1c             	add    esp,0x1c
c001b3b5:	99                   	cdq    
c001b3b6:	c3                   	ret    

c001b3b7 <Sys::setTime(regs*)>:
c001b3b7:	55                   	push   ebp
c001b3b8:	31 d2                	xor    edx,edx
c001b3ba:	57                   	push   edi
c001b3bb:	bf 18 00 00 00       	mov    edi,0x18
c001b3c0:	56                   	push   esi
c001b3c1:	53                   	push   ebx
c001b3c2:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b3c7:	83 ec 30             	sub    esp,0x30
c001b3ca:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b3ce:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b3d1:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b3d4:	f7 f3                	div    ebx
c001b3d6:	89 d6                	mov    esi,edx
c001b3d8:	31 d2                	xor    edx,edx
c001b3da:	f7 f3                	div    ebx
c001b3dc:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b3df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b3e3:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b3e8:	31 d2                	xor    edx,edx
c001b3ea:	f7 f3                	div    ebx
c001b3ec:	31 d2                	xor    edx,edx
c001b3ee:	bb 0c 00 00 00       	mov    ebx,0xc
c001b3f3:	f7 f7                	div    edi
c001b3f5:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b3f8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b3fc:	0f b7 cd             	movzx  ecx,bp
c001b3ff:	56                   	push   esi
c001b400:	89 c7                	mov    edi,eax
c001b402:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b406:	c1 e6 10             	shl    esi,0x10
c001b409:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b40d:	83 e7 1f             	and    edi,0x1f
c001b410:	51                   	push   ecx
c001b411:	47                   	inc    edi
c001b412:	c1 e8 05             	shr    eax,0x5
c001b415:	31 d2                	xor    edx,edx
c001b417:	f7 f3                	div    ebx
c001b419:	31 db                	xor    ebx,ebx
c001b41b:	52                   	push   edx
c001b41c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b420:	57                   	push   edi
c001b421:	68 a9 c6 02 c0       	push   0xc002c6a9
c001b426:	e8 9e 74 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001b42b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b42f:	89 f8                	mov    eax,edi
c001b431:	31 c9                	xor    ecx,ecx
c001b433:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b437:	88 c1                	mov    cl,al
c001b439:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b43f:	88 d5                	mov    ch,dl
c001b441:	c1 e0 10             	shl    eax,0x10
c001b444:	0f b7 d1             	movzx  edx,cx
c001b447:	09 c2                	or     edx,eax
c001b449:	89 d8                	mov    eax,ebx
c001b44b:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b450:	09 f0                	or     eax,esi
c001b452:	89 c3                	mov    ebx,eax
c001b454:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b458:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b45c:	83 c4 18             	add    esp,0x18
c001b45f:	53                   	push   ebx
c001b460:	52                   	push   edx
c001b461:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b465:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b469:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b46d:	e8 49 84 ff ff       	call   c00138bb <datetimeToSeconds(datetime_t)>
c001b472:	83 c4 0c             	add    esp,0xc
c001b475:	52                   	push   edx
c001b476:	50                   	push   eax
c001b477:	56                   	push   esi
c001b478:	e8 c5 85 ff ff       	call   c0013a42 <secondsToDatetime(unsigned long long)>
c001b47d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b481:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b485:	51                   	push   ecx
c001b486:	89 d6                	mov    esi,edx
c001b488:	51                   	push   ecx
c001b489:	c1 ee 10             	shr    esi,0x10
c001b48c:	89 f3                	mov    ebx,esi
c001b48e:	0f b6 f3             	movzx  esi,bl
c001b491:	56                   	push   esi
c001b492:	0f b6 f6             	movzx  esi,dh
c001b495:	0f b6 d2             	movzx  edx,dl
c001b498:	56                   	push   esi
c001b499:	52                   	push   edx
c001b49a:	89 c2                	mov    edx,eax
c001b49c:	c1 ea 10             	shr    edx,0x10
c001b49f:	52                   	push   edx
c001b4a0:	0f b6 d4             	movzx  edx,ah
c001b4a3:	0f b6 c0             	movzx  eax,al
c001b4a6:	52                   	push   edx
c001b4a7:	50                   	push   eax
c001b4a8:	68 c5 c6 02 c0       	push   0xc002c6c5
c001b4ad:	e8 17 74 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001b4b2:	83 c4 2c             	add    esp,0x2c
c001b4b5:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001b4ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b4be:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b4c2:	53                   	push   ebx
c001b4c3:	51                   	push   ecx
c001b4c4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b4ca:	e8 13 85 ff ff       	call   c00139e2 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b4cf:	83 f0 01             	xor    eax,0x1
c001b4d2:	31 d2                	xor    edx,edx
c001b4d4:	0f b6 c0             	movzx  eax,al
c001b4d7:	83 c4 3c             	add    esp,0x3c
c001b4da:	5b                   	pop    ebx
c001b4db:	5e                   	pop    esi
c001b4dc:	5f                   	pop    edi
c001b4dd:	5d                   	pop    ebp
c001b4de:	c3                   	ret    

c001b4df <Sys::timezone(regs*)>:
c001b4df:	53                   	push   ebx
c001b4e0:	83 ec 08             	sub    esp,0x8
c001b4e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4e7:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b4eb:	75 17                	jne    c001b504 <Sys::timezone(regs*)+0x25>
c001b4ed:	83 ec 0c             	sub    esp,0xc
c001b4f0:	68 e1 c6 02 c0       	push   0xc002c6e1
c001b4f5:	e8 cf 73 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001b4fa:	83 c8 ff             	or     eax,0xffffffff
c001b4fd:	83 c4 10             	add    esp,0x10
c001b500:	89 c2                	mov    edx,eax
c001b502:	eb 20                	jmp    c001b524 <Sys::timezone(regs*)+0x45>
c001b504:	83 ec 0c             	sub    esp,0xc
c001b507:	68 19 c7 02 c0       	push   0xc002c719
c001b50c:	e8 b8 73 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001b511:	58                   	pop    eax
c001b512:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b515:	e8 2a 82 ff ff       	call   c0013744 <User::loadClockSettings(int)>
c001b51a:	83 c4 10             	add    esp,0x10
c001b51d:	b8 01 00 00 00       	mov    eax,0x1
c001b522:	31 d2                	xor    edx,edx
c001b524:	83 c4 08             	add    esp,0x8
c001b527:	5b                   	pop    ebx
c001b528:	c3                   	ret    

c001b529 <Sys::write(regs*)>:
c001b529:	57                   	push   edi
c001b52a:	56                   	push   esi
c001b52b:	53                   	push   ebx
c001b52c:	83 ec 10             	sub    esp,0x10
c001b52f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b533:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b536:	83 f8 02             	cmp    eax,0x2
c001b539:	77 10                	ja     c001b54b <Sys::write(regs*)+0x22>
c001b53b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b540:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b543:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b549:	eb 0e                	jmp    c001b559 <Sys::write(regs*)+0x30>
c001b54b:	83 ec 0c             	sub    esp,0xc
c001b54e:	50                   	push   eax
c001b54f:	e8 19 5e ff ff       	call   c001136d <getFromFileDescriptor(int)>
c001b554:	83 c4 10             	add    esp,0x10
c001b557:	89 c1                	mov    ecx,eax
c001b559:	83 c8 ff             	or     eax,0xffffffff
c001b55c:	85 c9                	test   ecx,ecx
c001b55e:	89 c2                	mov    edx,eax
c001b560:	74 28                	je     c001b58a <Sys::write(regs*)+0x61>
c001b562:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b56a:	31 ff                	xor    edi,edi
c001b56c:	83 ec 0c             	sub    esp,0xc
c001b56f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b571:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b575:	52                   	push   edx
c001b576:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b579:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b57c:	57                   	push   edi
c001b57d:	56                   	push   esi
c001b57e:	51                   	push   ecx
c001b57f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b582:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b586:	83 c4 20             	add    esp,0x20
c001b589:	99                   	cdq    
c001b58a:	83 c4 10             	add    esp,0x10
c001b58d:	5b                   	pop    ebx
c001b58e:	5e                   	pop    esi
c001b58f:	5f                   	pop    edi
c001b590:	c3                   	ret    

c001b591 <Sys::wsbe(regs*)>:
c001b591:	57                   	push   edi
c001b592:	b9 0b 00 00 00       	mov    ecx,0xb
c001b597:	56                   	push   esi
c001b598:	be 58 c7 02 c0       	mov    esi,0xc002c758
c001b59d:	53                   	push   ebx
c001b59e:	83 ec 30             	sub    esp,0x30
c001b5a1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b5a5:	fc                   	cld    
c001b5a6:	83 ec 0c             	sub    esp,0xc
c001b5a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5ab:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b5af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5b7:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b5bd:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5bf:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b5c2:	57                   	push   edi
c001b5c3:	e8 a4 51 fe ff       	call   c000076c <strlen>
c001b5c8:	5a                   	pop    edx
c001b5c9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b5cd:	52                   	push   edx
c001b5ce:	31 d2                	xor    edx,edx
c001b5d0:	57                   	push   edi
c001b5d1:	52                   	push   edx
c001b5d2:	50                   	push   eax
c001b5d3:	56                   	push   esi
c001b5d4:	ff d3                	call   ebx
c001b5d6:	83 c4 14             	add    esp,0x14
c001b5d9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b5dd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5e0:	e8 00 34 00 00       	call   c001e9e5 <terminateTask(int)>
c001b5e5:	83 c4 40             	add    esp,0x40
c001b5e8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b5ed:	5b                   	pop    ebx
c001b5ee:	31 d2                	xor    edx,edx
c001b5f0:	5e                   	pop    esi
c001b5f1:	5f                   	pop    edi
c001b5f2:	c3                   	ret    

c001b5f3 <Sys::yield(regs*)>:
c001b5f3:	57                   	push   edi
c001b5f4:	56                   	push   esi
c001b5f5:	53                   	push   ebx
c001b5f6:	fa                   	cli    
c001b5f7:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001b5fd:	e8 b0 2a 00 00       	call   c001e0b2 <schedule()>
c001b602:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001b607:	48                   	dec    eax
c001b608:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001b60d:	75 01                	jne    c001b610 <Sys::yield(regs*)+0x1d>
c001b60f:	fb                   	sti    
c001b610:	8b 35 30 f9 02 c0    	mov    esi,DWORD PTR ds:0xc002f930
c001b616:	8b 3d 34 f9 02 c0    	mov    edi,DWORD PTR ds:0xc002f934
c001b61c:	89 f0                	mov    eax,esi
c001b61e:	89 fb                	mov    ebx,edi
c001b620:	89 f1                	mov    ecx,esi
c001b622:	c1 e0 07             	shl    eax,0x7
c001b625:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b629:	25 80 30 0f 00       	and    eax,0xf3080
c001b62e:	c1 eb 17             	shr    ebx,0x17
c001b631:	31 c8                	xor    eax,ecx
c001b633:	89 da                	mov    edx,ebx
c001b635:	5b                   	pop    ebx
c001b636:	5e                   	pop    esi
c001b637:	5f                   	pop    edi
c001b638:	c3                   	ret    

c001b639 <sysCallSeekDir(regs*)>:
c001b639:	31 c0                	xor    eax,eax
c001b63b:	31 d2                	xor    edx,edx
c001b63d:	c3                   	ret    

c001b63e <sysCallTellDir(regs*)>:
c001b63e:	31 c0                	xor    eax,eax
c001b640:	31 d2                	xor    edx,edx
c001b642:	c3                   	ret    

c001b643 <sysCallVerify(regs*)>:
c001b643:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b647:	31 d2                	xor    edx,edx
c001b649:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b64c:	c3                   	ret    

c001b64d <sysFormatDisk(regs*)>:
c001b64d:	56                   	push   esi
c001b64e:	53                   	push   ebx
c001b64f:	53                   	push   ebx
c001b650:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b654:	8b 1d 34 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f434
c001b65a:	eb 25                	jmp    c001b681 <sysFormatDisk(regs*)+0x34>
c001b65c:	83 ec 0c             	sub    esp,0xc
c001b65f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b662:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b664:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b667:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b66a:	50                   	push   eax
c001b66b:	ff 34 85 c0 f8 02 c0 	push   DWORD PTR [eax*4-0x3ffd0740]
c001b672:	53                   	push   ebx
c001b673:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b676:	83 c4 20             	add    esp,0x20
c001b679:	83 f8 08             	cmp    eax,0x8
c001b67c:	75 12                	jne    c001b690 <sysFormatDisk(regs*)+0x43>
c001b67e:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b681:	85 db                	test   ebx,ebx
c001b683:	75 d7                	jne    c001b65c <sysFormatDisk(regs*)+0xf>
c001b685:	59                   	pop    ecx
c001b686:	b8 03 00 00 00       	mov    eax,0x3
c001b68b:	31 d2                	xor    edx,edx
c001b68d:	5b                   	pop    ebx
c001b68e:	5e                   	pop    esi
c001b68f:	c3                   	ret    
c001b690:	85 c0                	test   eax,eax
c001b692:	74 1b                	je     c001b6af <sysFormatDisk(regs*)+0x62>
c001b694:	83 f8 09             	cmp    eax,0x9
c001b697:	74 0b                	je     c001b6a4 <sysFormatDisk(regs*)+0x57>
c001b699:	59                   	pop    ecx
c001b69a:	b8 02 00 00 00       	mov    eax,0x2
c001b69f:	31 d2                	xor    edx,edx
c001b6a1:	5b                   	pop    ebx
c001b6a2:	5e                   	pop    esi
c001b6a3:	c3                   	ret    
c001b6a4:	59                   	pop    ecx
c001b6a5:	b8 01 00 00 00       	mov    eax,0x1
c001b6aa:	31 d2                	xor    edx,edx
c001b6ac:	5b                   	pop    ebx
c001b6ad:	5e                   	pop    esi
c001b6ae:	c3                   	ret    
c001b6af:	59                   	pop    ecx
c001b6b0:	31 c0                	xor    eax,eax
c001b6b2:	31 d2                	xor    edx,edx
c001b6b4:	5b                   	pop    ebx
c001b6b5:	5e                   	pop    esi
c001b6b6:	c3                   	ret    

c001b6b7 <sysSetDiskVolumeLabel(regs*)>:
c001b6b7:	56                   	push   esi
c001b6b8:	53                   	push   ebx
c001b6b9:	53                   	push   ebx
c001b6ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6be:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6c1:	83 f8 19             	cmp    eax,0x19
c001b6c4:	77 29                	ja     c001b6ef <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6c6:	8b 0c 85 c0 f8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0740]
c001b6cd:	85 c9                	test   ecx,ecx
c001b6cf:	74 1e                	je     c001b6ef <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6d1:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b6d4:	85 d2                	test   edx,edx
c001b6d6:	74 17                	je     c001b6ef <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6d8:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b6de:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b6e0:	52                   	push   edx
c001b6e1:	50                   	push   eax
c001b6e2:	51                   	push   ecx
c001b6e3:	53                   	push   ebx
c001b6e4:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b6e7:	83 c4 10             	add    esp,0x10
c001b6ea:	99                   	cdq    
c001b6eb:	59                   	pop    ecx
c001b6ec:	5b                   	pop    ebx
c001b6ed:	5e                   	pop    esi
c001b6ee:	c3                   	ret    
c001b6ef:	59                   	pop    ecx
c001b6f0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b6f5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6fa:	5b                   	pop    ebx
c001b6fb:	5e                   	pop    esi
c001b6fc:	c3                   	ret    

c001b6fd <sysGetDiskVolumeLabel(regs*)>:
c001b6fd:	57                   	push   edi
c001b6fe:	56                   	push   esi
c001b6ff:	53                   	push   ebx
c001b700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b704:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b707:	83 fa 19             	cmp    edx,0x19
c001b70a:	77 34                	ja     c001b740 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b70c:	8b 0c 95 c0 f8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0740]
c001b713:	85 c9                	test   ecx,ecx
c001b715:	74 29                	je     c001b740 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b717:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b71a:	85 db                	test   ebx,ebx
c001b71c:	74 22                	je     c001b740 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b71e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b721:	85 c0                	test   eax,eax
c001b723:	74 1b                	je     c001b740 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b725:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b72b:	83 ec 0c             	sub    esp,0xc
c001b72e:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b730:	50                   	push   eax
c001b731:	53                   	push   ebx
c001b732:	52                   	push   edx
c001b733:	51                   	push   ecx
c001b734:	56                   	push   esi
c001b735:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b738:	83 c4 20             	add    esp,0x20
c001b73b:	99                   	cdq    
c001b73c:	5b                   	pop    ebx
c001b73d:	5e                   	pop    esi
c001b73e:	5f                   	pop    edi
c001b73f:	c3                   	ret    
c001b740:	5b                   	pop    ebx
c001b741:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b746:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b74b:	5e                   	pop    esi
c001b74c:	5f                   	pop    edi
c001b74d:	c3                   	ret    

c001b74e <sysShutdown(regs*)>:
c001b74e:	83 ec 0c             	sub    esp,0xc
c001b751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b755:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b758:	85 c0                	test   eax,eax
c001b75a:	74 18                	je     c001b774 <sysShutdown(regs*)+0x26>
c001b75c:	83 f8 01             	cmp    eax,0x1
c001b75f:	74 38                	je     c001b799 <sysShutdown(regs*)+0x4b>
c001b761:	83 f8 02             	cmp    eax,0x2
c001b764:	74 24                	je     c001b78a <sysShutdown(regs*)+0x3c>
c001b766:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b76b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b770:	83 c4 0c             	add    esp,0xc
c001b773:	c3                   	ret    
c001b774:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001b779:	8b 10                	mov    edx,DWORD PTR [eax]
c001b77b:	6a 00                	push   0x0
c001b77d:	6a 00                	push   0x0
c001b77f:	6a 00                	push   0x0
c001b781:	50                   	push   eax
c001b782:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b785:	83 c4 10             	add    esp,0x10
c001b788:	eb dc                	jmp    c001b766 <sysShutdown(regs*)+0x18>
c001b78a:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001b78f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b791:	6a 00                	push   0x0
c001b793:	6a 00                	push   0x0
c001b795:	6a 01                	push   0x1
c001b797:	eb e8                	jmp    c001b781 <sysShutdown(regs*)+0x33>
c001b799:	a1 60 19 03 c0       	mov    eax,ds:0xc0031960
c001b79e:	85 c0                	test   eax,eax
c001b7a0:	74 02                	je     c001b7a4 <sysShutdown(regs*)+0x56>
c001b7a2:	ff d0                	call   eax
c001b7a4:	31 c0                	xor    eax,eax
c001b7a6:	31 d2                	xor    edx,edx
c001b7a8:	83 c4 0c             	add    esp,0xc
c001b7ab:	c3                   	ret    

c001b7ac <sysCallRealpath(regs*)>:
c001b7ac:	83 ec 0c             	sub    esp,0xc
c001b7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7b3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b7b6:	85 d2                	test   edx,edx
c001b7b8:	74 07                	je     c001b7c1 <sysCallRealpath(regs*)+0x15>
c001b7ba:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b7bd:	85 c0                	test   eax,eax
c001b7bf:	75 0b                	jne    c001b7cc <sysCallRealpath(regs*)+0x20>
c001b7c1:	b8 01 00 00 00       	mov    eax,0x1
c001b7c6:	31 d2                	xor    edx,edx
c001b7c8:	83 c4 0c             	add    esp,0xc
c001b7cb:	c3                   	ret    
c001b7cc:	51                   	push   ecx
c001b7cd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b7d3:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b7d6:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b7dc:	51                   	push   ecx
c001b7dd:	52                   	push   edx
c001b7de:	50                   	push   eax
c001b7df:	e8 9a 74 ff ff       	call   c0012c7e <Fs::standardiseFiles(char*, char const*, char const*)>
c001b7e4:	83 c4 10             	add    esp,0x10
c001b7e7:	31 c0                	xor    eax,eax
c001b7e9:	31 d2                	xor    edx,edx
c001b7eb:	83 c4 0c             	add    esp,0xc
c001b7ee:	c3                   	ret    

c001b7ef <sysCallGetArgc(regs*)>:
c001b7ef:	83 ec 14             	sub    esp,0x14
c001b7f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7f7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7fa:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b800:	68 84 c7 02 c0       	push   0xc002c784
c001b805:	e8 bf 70 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001b80a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b80f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b812:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b818:	83 c4 1c             	add    esp,0x1c
c001b81b:	99                   	cdq    
c001b81c:	c3                   	ret    

c001b81d <sysCallReadDir(regs*)>:
c001b81d:	53                   	push   ebx
c001b81e:	83 ec 18             	sub    esp,0x18
c001b821:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b825:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b828:	83 f8 02             	cmp    eax,0x2
c001b82b:	76 53                	jbe    c001b880 <sysCallReadDir(regs*)+0x63>
c001b82d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b830:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b836:	77 4f                	ja     c001b887 <sysCallReadDir(regs*)+0x6a>
c001b838:	83 ec 0c             	sub    esp,0xc
c001b83b:	50                   	push   eax
c001b83c:	e8 2c 5b ff ff       	call   c001136d <getFromFileDescriptor(int)>
c001b841:	83 c4 10             	add    esp,0x10
c001b844:	85 c0                	test   eax,eax
c001b846:	74 50                	je     c001b898 <sysCallReadDir(regs*)+0x7b>
c001b848:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b850:	83 ec 0c             	sub    esp,0xc
c001b853:	8b 10                	mov    edx,DWORD PTR [eax]
c001b855:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b859:	51                   	push   ecx
c001b85a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b85d:	6a 00                	push   0x0
c001b85f:	68 10 01 00 00       	push   0x110
c001b864:	50                   	push   eax
c001b865:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b868:	83 c4 20             	add    esp,0x20
c001b86b:	85 c0                	test   eax,eax
c001b86d:	74 38                	je     c001b8a7 <sysCallReadDir(regs*)+0x8a>
c001b86f:	83 f8 07             	cmp    eax,0x7
c001b872:	74 0c                	je     c001b880 <sysCallReadDir(regs*)+0x63>
c001b874:	b8 02 00 00 00       	mov    eax,0x2
c001b879:	31 d2                	xor    edx,edx
c001b87b:	83 c4 18             	add    esp,0x18
c001b87e:	5b                   	pop    ebx
c001b87f:	c3                   	ret    
c001b880:	b8 01 00 00 00       	mov    eax,0x1
c001b885:	eb f2                	jmp    c001b879 <sysCallReadDir(regs*)+0x5c>
c001b887:	83 ec 08             	sub    esp,0x8
c001b88a:	52                   	push   edx
c001b88b:	68 a8 c8 02 c0       	push   0xc002c8a8
c001b890:	e8 34 70 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001b895:	83 c4 10             	add    esp,0x10
c001b898:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b89d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8a2:	83 c4 18             	add    esp,0x18
c001b8a5:	5b                   	pop    ebx
c001b8a6:	c3                   	ret    
c001b8a7:	31 c0                	xor    eax,eax
c001b8a9:	eb ce                	jmp    c001b879 <sysCallReadDir(regs*)+0x5c>

c001b8ab <sysCallIsATTY(regs*)>:
c001b8ab:	83 ec 0c             	sub    esp,0xc
c001b8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8b5:	83 f8 02             	cmp    eax,0x2
c001b8b8:	76 07                	jbe    c001b8c1 <sysCallIsATTY(regs*)+0x16>
c001b8ba:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8bf:	75 26                	jne    c001b8e7 <sysCallIsATTY(regs*)+0x3c>
c001b8c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8c9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b8cf:	85 c0                	test   eax,eax
c001b8d1:	74 24                	je     c001b8f7 <sysCallIsATTY(regs*)+0x4c>
c001b8d3:	83 ec 0c             	sub    esp,0xc
c001b8d6:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8d8:	50                   	push   eax
c001b8d9:	ff 12                	call   DWORD PTR [edx]
c001b8db:	31 d2                	xor    edx,edx
c001b8dd:	0f b6 c0             	movzx  eax,al
c001b8e0:	83 c4 10             	add    esp,0x10
c001b8e3:	83 c4 0c             	add    esp,0xc
c001b8e6:	c3                   	ret    
c001b8e7:	83 ec 0c             	sub    esp,0xc
c001b8ea:	50                   	push   eax
c001b8eb:	e8 7d 5a ff ff       	call   c001136d <getFromFileDescriptor(int)>
c001b8f0:	83 c4 10             	add    esp,0x10
c001b8f3:	85 c0                	test   eax,eax
c001b8f5:	75 dc                	jne    c001b8d3 <sysCallIsATTY(regs*)+0x28>
c001b8f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b901:	83 c4 0c             	add    esp,0xc
c001b904:	c3                   	ret    

c001b905 <sysCallSeek(regs*)>:
c001b905:	53                   	push   ebx
c001b906:	83 ec 08             	sub    esp,0x8
c001b909:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b90d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b910:	83 f8 02             	cmp    eax,0x2
c001b913:	76 4a                	jbe    c001b95f <sysCallSeek(regs*)+0x5a>
c001b915:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b91a:	77 32                	ja     c001b94e <sysCallSeek(regs*)+0x49>
c001b91c:	83 ec 0c             	sub    esp,0xc
c001b91f:	50                   	push   eax
c001b920:	e8 48 5a ff ff       	call   c001136d <getFromFileDescriptor(int)>
c001b925:	83 c4 0c             	add    esp,0xc
c001b928:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b92b:	31 db                	xor    ebx,ebx
c001b92d:	53                   	push   ebx
c001b92e:	51                   	push   ecx
c001b92f:	50                   	push   eax
c001b930:	e8 15 76 ff ff       	call   c0012f4a <File::seek(unsigned long long)>
c001b935:	83 c4 10             	add    esp,0x10
c001b938:	85 c0                	test   eax,eax
c001b93a:	0f 95 c0             	setne  al
c001b93d:	31 d2                	xor    edx,edx
c001b93f:	0f b6 c0             	movzx  eax,al
c001b942:	f7 d8                	neg    eax
c001b944:	83 d2 00             	adc    edx,0x0
c001b947:	83 c4 08             	add    esp,0x8
c001b94a:	f7 da                	neg    edx
c001b94c:	5b                   	pop    ebx
c001b94d:	c3                   	ret    
c001b94e:	83 ec 08             	sub    esp,0x8
c001b951:	50                   	push   eax
c001b952:	68 8f c7 02 c0       	push   0xc002c78f
c001b957:	e8 6d 6f ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001b95c:	83 c4 10             	add    esp,0x10
c001b95f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b964:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b969:	83 c4 08             	add    esp,0x8
c001b96c:	5b                   	pop    ebx
c001b96d:	c3                   	ret    

c001b96e <sysCallTell(regs*)>:
c001b96e:	53                   	push   ebx
c001b96f:	83 ec 08             	sub    esp,0x8
c001b972:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b976:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b979:	83 f8 02             	cmp    eax,0x2
c001b97c:	76 5e                	jbe    c001b9dc <sysCallTell(regs*)+0x6e>
c001b97e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b983:	77 2d                	ja     c001b9b2 <sysCallTell(regs*)+0x44>
c001b985:	83 ec 0c             	sub    esp,0xc
c001b988:	50                   	push   eax
c001b989:	e8 df 59 ff ff       	call   c001136d <getFromFileDescriptor(int)>
c001b98e:	5a                   	pop    edx
c001b98f:	59                   	pop    ecx
c001b990:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b993:	50                   	push   eax
c001b994:	e8 07 76 ff ff       	call   c0012fa0 <File::tell(unsigned long long*)>
c001b999:	83 c4 10             	add    esp,0x10
c001b99c:	85 c0                	test   eax,eax
c001b99e:	0f 95 c0             	setne  al
c001b9a1:	31 d2                	xor    edx,edx
c001b9a3:	0f b6 c0             	movzx  eax,al
c001b9a6:	f7 d8                	neg    eax
c001b9a8:	83 d2 00             	adc    edx,0x0
c001b9ab:	83 c4 08             	add    esp,0x8
c001b9ae:	f7 da                	neg    edx
c001b9b0:	5b                   	pop    ebx
c001b9b1:	c3                   	ret    
c001b9b2:	83 ec 08             	sub    esp,0x8
c001b9b5:	50                   	push   eax
c001b9b6:	68 a9 c7 02 c0       	push   0xc002c7a9
c001b9bb:	e8 09 6f ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001b9c0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9c3:	83 c4 10             	add    esp,0x10
c001b9c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9d3:	31 d2                	xor    edx,edx
c001b9d5:	31 c0                	xor    eax,eax
c001b9d7:	83 c4 08             	add    esp,0x8
c001b9da:	5b                   	pop    ebx
c001b9db:	c3                   	ret    
c001b9dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9e6:	83 c4 08             	add    esp,0x8
c001b9e9:	5b                   	pop    ebx
c001b9ea:	c3                   	ret    

c001b9eb <sysCallSize(regs*)>:
c001b9eb:	53                   	push   ebx
c001b9ec:	83 ec 18             	sub    esp,0x18
c001b9ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9f6:	83 f8 02             	cmp    eax,0x2
c001b9f9:	76 64                	jbe    c001ba5f <sysCallSize(regs*)+0x74>
c001b9fb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba00:	77 33                	ja     c001ba35 <sysCallSize(regs*)+0x4a>
c001ba02:	83 ec 0c             	sub    esp,0xc
c001ba05:	50                   	push   eax
c001ba06:	e8 62 59 ff ff       	call   c001136d <getFromFileDescriptor(int)>
c001ba0b:	83 c4 0c             	add    esp,0xc
c001ba0e:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ba12:	52                   	push   edx
c001ba13:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba16:	50                   	push   eax
c001ba17:	e8 1c 77 ff ff       	call   c0013138 <File::stat(unsigned long long*, bool*)>
c001ba1c:	83 c4 10             	add    esp,0x10
c001ba1f:	85 c0                	test   eax,eax
c001ba21:	0f 95 c0             	setne  al
c001ba24:	31 d2                	xor    edx,edx
c001ba26:	0f b6 c0             	movzx  eax,al
c001ba29:	f7 d8                	neg    eax
c001ba2b:	83 d2 00             	adc    edx,0x0
c001ba2e:	83 c4 18             	add    esp,0x18
c001ba31:	f7 da                	neg    edx
c001ba33:	5b                   	pop    ebx
c001ba34:	c3                   	ret    
c001ba35:	83 ec 08             	sub    esp,0x8
c001ba38:	50                   	push   eax
c001ba39:	68 c3 c7 02 c0       	push   0xc002c7c3
c001ba3e:	e8 86 6e ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001ba43:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba46:	83 c4 10             	add    esp,0x10
c001ba49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba4f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba56:	31 d2                	xor    edx,edx
c001ba58:	31 c0                	xor    eax,eax
c001ba5a:	83 c4 18             	add    esp,0x18
c001ba5d:	5b                   	pop    ebx
c001ba5e:	c3                   	ret    
c001ba5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba64:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba69:	83 c4 18             	add    esp,0x18
c001ba6c:	5b                   	pop    ebx
c001ba6d:	c3                   	ret    

c001ba6e <sysCallSizeFromFilename(regs*)>:
c001ba6e:	57                   	push   edi
c001ba6f:	56                   	push   esi
c001ba70:	53                   	push   ebx
c001ba71:	83 ec 20             	sub    esp,0x20
c001ba74:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba78:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001ba7b:	83 fb 02             	cmp    ebx,0x2
c001ba7e:	0f 86 99 00 00 00    	jbe    c001bb1d <sysCallSizeFromFilename(regs*)+0xaf>
c001ba84:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ba8a:	77 65                	ja     c001baf1 <sysCallSizeFromFilename(regs*)+0x83>
c001ba8c:	83 ec 0c             	sub    esp,0xc
c001ba8f:	68 14 01 00 00       	push   0x114
c001ba94:	e8 f3 3d ff ff       	call   c000f88c <malloc>
c001ba99:	83 c4 0c             	add    esp,0xc
c001ba9c:	89 c6                	mov    esi,eax
c001ba9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baa3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001baa6:	53                   	push   ebx
c001baa7:	56                   	push   esi
c001baa8:	e8 7b 73 ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c001baad:	83 c4 0c             	add    esp,0xc
c001bab0:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bab4:	50                   	push   eax
c001bab5:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bab8:	56                   	push   esi
c001bab9:	e8 7a 76 ff ff       	call   c0013138 <File::stat(unsigned long long*, bool*)>
c001babe:	83 c4 10             	add    esp,0x10
c001bac1:	85 f6                	test   esi,esi
c001bac3:	74 14                	je     c001bad9 <sysCallSizeFromFilename(regs*)+0x6b>
c001bac5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bac9:	8b 16                	mov    edx,DWORD PTR [esi]
c001bacb:	83 ec 0c             	sub    esp,0xc
c001bace:	56                   	push   esi
c001bacf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bad2:	83 c4 10             	add    esp,0x10
c001bad5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bad9:	85 c0                	test   eax,eax
c001badb:	0f 95 c0             	setne  al
c001bade:	31 d2                	xor    edx,edx
c001bae0:	0f b6 c0             	movzx  eax,al
c001bae3:	f7 d8                	neg    eax
c001bae5:	83 d2 00             	adc    edx,0x0
c001bae8:	83 c4 20             	add    esp,0x20
c001baeb:	f7 da                	neg    edx
c001baed:	5b                   	pop    ebx
c001baee:	5e                   	pop    esi
c001baef:	5f                   	pop    edi
c001baf0:	c3                   	ret    
c001baf1:	83 ec 08             	sub    esp,0x8
c001baf4:	53                   	push   ebx
c001baf5:	68 c3 c7 02 c0       	push   0xc002c7c3
c001bafa:	e8 ca 6d ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001baff:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bb02:	83 c4 10             	add    esp,0x10
c001bb05:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb0b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb12:	31 d2                	xor    edx,edx
c001bb14:	83 c4 20             	add    esp,0x20
c001bb17:	31 c0                	xor    eax,eax
c001bb19:	5b                   	pop    ebx
c001bb1a:	5e                   	pop    esi
c001bb1b:	5f                   	pop    edi
c001bb1c:	c3                   	ret    
c001bb1d:	83 c4 20             	add    esp,0x20
c001bb20:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb25:	5b                   	pop    ebx
c001bb26:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb2b:	5e                   	pop    esi
c001bb2c:	5f                   	pop    edi
c001bb2d:	c3                   	ret    

c001bb2e <sysCallClose(regs*)>:
c001bb2e:	53                   	push   ebx
c001bb2f:	83 ec 08             	sub    esp,0x8
c001bb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb36:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb39:	83 f8 02             	cmp    eax,0x2
c001bb3c:	76 50                	jbe    c001bb8e <sysCallClose(regs*)+0x60>
c001bb3e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bb43:	74 58                	je     c001bb9d <sysCallClose(regs*)+0x6f>
c001bb45:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb4a:	74 60                	je     c001bbac <sysCallClose(regs*)+0x7e>
c001bb4c:	77 2f                	ja     c001bb7d <sysCallClose(regs*)+0x4f>
c001bb4e:	83 ec 0c             	sub    esp,0xc
c001bb51:	50                   	push   eax
c001bb52:	e8 16 58 ff ff       	call   c001136d <getFromFileDescriptor(int)>
c001bb57:	89 c3                	mov    ebx,eax
c001bb59:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb5c:	e8 89 73 ff ff       	call   c0012eea <File::close()>
c001bb61:	83 c4 10             	add    esp,0x10
c001bb64:	85 db                	test   ebx,ebx
c001bb66:	74 0c                	je     c001bb74 <sysCallClose(regs*)+0x46>
c001bb68:	83 ec 0c             	sub    esp,0xc
c001bb6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb6d:	53                   	push   ebx
c001bb6e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb71:	83 c4 10             	add    esp,0x10
c001bb74:	31 c0                	xor    eax,eax
c001bb76:	31 d2                	xor    edx,edx
c001bb78:	83 c4 08             	add    esp,0x8
c001bb7b:	5b                   	pop    ebx
c001bb7c:	c3                   	ret    
c001bb7d:	83 ec 08             	sub    esp,0x8
c001bb80:	50                   	push   eax
c001bb81:	68 cc c8 02 c0       	push   0xc002c8cc
c001bb86:	e8 3e 6d ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001bb8b:	83 c4 10             	add    esp,0x10
c001bb8e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb93:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb98:	83 c4 08             	add    esp,0x8
c001bb9b:	5b                   	pop    ebx
c001bb9c:	c3                   	ret    
c001bb9d:	83 ec 0c             	sub    esp,0xc
c001bba0:	68 de c7 02 c0       	push   0xc002c7de
c001bba5:	e8 1f 6d ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001bbaa:	eb c5                	jmp    c001bb71 <sysCallClose(regs*)+0x43>
c001bbac:	83 ec 0c             	sub    esp,0xc
c001bbaf:	68 ec c7 02 c0       	push   0xc002c7ec
c001bbb4:	eb ef                	jmp    c001bba5 <sysCallClose(regs*)+0x77>

c001bbb6 <sysCallOpenDir(regs*)>:
c001bbb6:	56                   	push   esi
c001bbb7:	53                   	push   ebx
c001bbb8:	53                   	push   ebx
c001bbb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bbbd:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bbc0:	85 f6                	test   esi,esi
c001bbc2:	74 59                	je     c001bc1d <sysCallOpenDir(regs*)+0x67>
c001bbc4:	83 ec 0c             	sub    esp,0xc
c001bbc7:	68 14 01 00 00       	push   0x114
c001bbcc:	e8 bb 3c ff ff       	call   c000f88c <malloc>
c001bbd1:	83 c4 0c             	add    esp,0xc
c001bbd4:	89 c6                	mov    esi,eax
c001bbd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbdb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbde:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbe1:	56                   	push   esi
c001bbe2:	e8 ed 76 ff ff       	call   c00132d4 <Directory::Directory(char const*, Process*)>
c001bbe7:	83 c4 10             	add    esp,0x10
c001bbea:	85 f6                	test   esi,esi
c001bbec:	74 2f                	je     c001bc1d <sysCallOpenDir(regs*)+0x67>
c001bbee:	83 ec 0c             	sub    esp,0xc
c001bbf1:	56                   	push   esi
c001bbf2:	e8 41 77 ff ff       	call   c0013338 <Directory::open()>
c001bbf7:	83 c4 10             	add    esp,0x10
c001bbfa:	85 c0                	test   eax,eax
c001bbfc:	75 1f                	jne    c001bc1d <sysCallOpenDir(regs*)+0x67>
c001bbfe:	83 ec 0c             	sub    esp,0xc
c001bc01:	56                   	push   esi
c001bc02:	e8 71 54 ff ff       	call   c0011078 <UnixFile::getFileDescriptor()>
c001bc07:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc0a:	83 c4 10             	add    esp,0x10
c001bc0d:	89 02                	mov    DWORD PTR [edx],eax
c001bc0f:	c1 f8 1f             	sar    eax,0x1f
c001bc12:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bc15:	31 c0                	xor    eax,eax
c001bc17:	59                   	pop    ecx
c001bc18:	31 d2                	xor    edx,edx
c001bc1a:	5b                   	pop    ebx
c001bc1b:	5e                   	pop    esi
c001bc1c:	c3                   	ret    
c001bc1d:	59                   	pop    ecx
c001bc1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc23:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc28:	5b                   	pop    ebx
c001bc29:	5e                   	pop    esi
c001bc2a:	c3                   	ret    

c001bc2b <sysCallCloseDir(regs*)>:
c001bc2b:	53                   	push   ebx
c001bc2c:	83 ec 08             	sub    esp,0x8
c001bc2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc33:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc36:	83 f8 02             	cmp    eax,0x2
c001bc39:	76 47                	jbe    c001bc82 <sysCallCloseDir(regs*)+0x57>
c001bc3b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc40:	77 2f                	ja     c001bc71 <sysCallCloseDir(regs*)+0x46>
c001bc42:	83 ec 0c             	sub    esp,0xc
c001bc45:	50                   	push   eax
c001bc46:	e8 22 57 ff ff       	call   c001136d <getFromFileDescriptor(int)>
c001bc4b:	89 c3                	mov    ebx,eax
c001bc4d:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc50:	e8 3f 77 ff ff       	call   c0013394 <Directory::close()>
c001bc55:	83 c4 10             	add    esp,0x10
c001bc58:	85 db                	test   ebx,ebx
c001bc5a:	74 0c                	je     c001bc68 <sysCallCloseDir(regs*)+0x3d>
c001bc5c:	83 ec 0c             	sub    esp,0xc
c001bc5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc61:	53                   	push   ebx
c001bc62:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc65:	83 c4 10             	add    esp,0x10
c001bc68:	31 c0                	xor    eax,eax
c001bc6a:	31 d2                	xor    edx,edx
c001bc6c:	83 c4 08             	add    esp,0x8
c001bc6f:	5b                   	pop    ebx
c001bc70:	c3                   	ret    
c001bc71:	83 ec 08             	sub    esp,0x8
c001bc74:	50                   	push   eax
c001bc75:	68 f4 c8 02 c0       	push   0xc002c8f4
c001bc7a:	e8 4a 6c ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001bc7f:	83 c4 10             	add    esp,0x10
c001bc82:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc87:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc8c:	83 c4 08             	add    esp,0x8
c001bc8f:	5b                   	pop    ebx
c001bc90:	c3                   	ret    

c001bc91 <sysCallMakeDir(regs*)>:
c001bc91:	56                   	push   esi
c001bc92:	53                   	push   ebx
c001bc93:	83 ec 10             	sub    esp,0x10
c001bc96:	68 14 01 00 00       	push   0x114
c001bc9b:	e8 ec 3b ff ff       	call   c000f88c <malloc>
c001bca0:	83 c4 0c             	add    esp,0xc
c001bca3:	89 c3                	mov    ebx,eax
c001bca5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcaa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bcb1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bcb4:	53                   	push   ebx
c001bcb5:	e8 1a 76 ff ff       	call   c00132d4 <Directory::Directory(char const*, Process*)>
c001bcba:	83 c4 10             	add    esp,0x10
c001bcbd:	85 db                	test   ebx,ebx
c001bcbf:	74 32                	je     c001bcf3 <sysCallMakeDir(regs*)+0x62>
c001bcc1:	83 ec 0c             	sub    esp,0xc
c001bcc4:	53                   	push   ebx
c001bcc5:	e8 4e 78 ff ff       	call   c0013518 <Directory::create()>
c001bcca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bccd:	89 c6                	mov    esi,eax
c001bccf:	e8 c0 76 ff ff       	call   c0013394 <Directory::close()>
c001bcd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcd9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bcdc:	83 c4 10             	add    esp,0x10
c001bcdf:	31 c0                	xor    eax,eax
c001bce1:	59                   	pop    ecx
c001bce2:	85 f6                	test   esi,esi
c001bce4:	5b                   	pop    ebx
c001bce5:	0f 95 c0             	setne  al
c001bce8:	5e                   	pop    esi
c001bce9:	31 d2                	xor    edx,edx
c001bceb:	f7 d8                	neg    eax
c001bced:	83 d2 00             	adc    edx,0x0
c001bcf0:	f7 da                	neg    edx
c001bcf2:	c3                   	ret    
c001bcf3:	59                   	pop    ecx
c001bcf4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcf9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcfe:	5b                   	pop    ebx
c001bcff:	5e                   	pop    esi
c001bd00:	c3                   	ret    

c001bd01 <sysCallWait(regs*)>:
c001bd01:	83 ec 10             	sub    esp,0x10
c001bd04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd08:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bd0b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd0e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bd11:	e8 c8 25 00 00       	call   c001e2de <waitTask(int, int*, int)>
c001bd16:	83 c4 1c             	add    esp,0x1c
c001bd19:	99                   	cdq    
c001bd1a:	c3                   	ret    

c001bd1b <sysCallNotImpl(regs*)>:
c001bd1b:	83 ec 18             	sub    esp,0x18
c001bd1e:	68 fa c7 02 c0       	push   0xc002c7fa
c001bd23:	e8 d7 e5 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001bd28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd32:	83 c4 1c             	add    esp,0x1c
c001bd35:	c3                   	ret    

c001bd36 <sysPanic(regs*)>:
c001bd36:	83 ec 18             	sub    esp,0x18
c001bd39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd3d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd40:	e8 ba e5 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001bd45:	c7 04 24 14 c8 02 c0 	mov    DWORD PTR [esp],0xc002c814
c001bd4c:	e8 ae e5 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001bd51:	b8 01 00 00 00       	mov    eax,0x1
c001bd56:	31 d2                	xor    edx,edx
c001bd58:	83 c4 1c             	add    esp,0x1c
c001bd5b:	c3                   	ret    

c001bd5c <sysCallRmdir(regs*)>:
c001bd5c:	56                   	push   esi
c001bd5d:	53                   	push   ebx
c001bd5e:	83 ec 20             	sub    esp,0x20
c001bd61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd65:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd68:	68 14 01 00 00       	push   0x114
c001bd6d:	e8 1a 3b ff ff       	call   c000f88c <malloc>
c001bd72:	83 c4 0c             	add    esp,0xc
c001bd75:	89 c3                	mov    ebx,eax
c001bd77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd7c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd7f:	56                   	push   esi
c001bd80:	53                   	push   ebx
c001bd81:	e8 a2 70 ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c001bd86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd89:	e8 76 72 ff ff       	call   c0013004 <File::unlink()>
c001bd8e:	83 c4 10             	add    esp,0x10
c001bd91:	85 db                	test   ebx,ebx
c001bd93:	74 14                	je     c001bda9 <sysCallRmdir(regs*)+0x4d>
c001bd95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd99:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd9b:	83 ec 0c             	sub    esp,0xc
c001bd9e:	53                   	push   ebx
c001bd9f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bda2:	83 c4 10             	add    esp,0x10
c001bda5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bda9:	85 c0                	test   eax,eax
c001bdab:	0f 95 c0             	setne  al
c001bdae:	31 d2                	xor    edx,edx
c001bdb0:	0f b6 c0             	movzx  eax,al
c001bdb3:	f7 d8                	neg    eax
c001bdb5:	83 d2 00             	adc    edx,0x0
c001bdb8:	83 c4 14             	add    esp,0x14
c001bdbb:	f7 da                	neg    edx
c001bdbd:	5b                   	pop    ebx
c001bdbe:	5e                   	pop    esi
c001bdbf:	c3                   	ret    

c001bdc0 <sysCallUnlink(regs*)>:
c001bdc0:	56                   	push   esi
c001bdc1:	53                   	push   ebx
c001bdc2:	83 ec 20             	sub    esp,0x20
c001bdc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bdc9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bdcc:	68 14 01 00 00       	push   0x114
c001bdd1:	e8 b6 3a ff ff       	call   c000f88c <malloc>
c001bdd6:	83 c4 0c             	add    esp,0xc
c001bdd9:	89 c3                	mov    ebx,eax
c001bddb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bde0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bde3:	56                   	push   esi
c001bde4:	53                   	push   ebx
c001bde5:	e8 3e 70 ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c001bdea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bded:	e8 12 72 ff ff       	call   c0013004 <File::unlink()>
c001bdf2:	83 c4 10             	add    esp,0x10
c001bdf5:	85 db                	test   ebx,ebx
c001bdf7:	74 14                	je     c001be0d <sysCallUnlink(regs*)+0x4d>
c001bdf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdfd:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bdff:	83 ec 0c             	sub    esp,0xc
c001be02:	53                   	push   ebx
c001be03:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be06:	83 c4 10             	add    esp,0x10
c001be09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be0d:	85 c0                	test   eax,eax
c001be0f:	0f 95 c0             	setne  al
c001be12:	31 d2                	xor    edx,edx
c001be14:	0f b6 c0             	movzx  eax,al
c001be17:	f7 d8                	neg    eax
c001be19:	83 d2 00             	adc    edx,0x0
c001be1c:	83 c4 14             	add    esp,0x14
c001be1f:	f7 da                	neg    edx
c001be21:	5b                   	pop    ebx
c001be22:	5e                   	pop    esi
c001be23:	c3                   	ret    

c001be24 <sysCallGetArgv(regs*)>:
c001be24:	83 ec 0c             	sub    esp,0xc
c001be27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be2b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001be2e:	85 c0                	test   eax,eax
c001be30:	78 2b                	js     c001be5d <sysCallGetArgv(regs*)+0x39>
c001be32:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be38:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001be3b:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001be41:	7d 1a                	jge    c001be5d <sysCallGetArgv(regs*)+0x39>
c001be43:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001be4a:	85 c0                	test   eax,eax
c001be4c:	74 17                	je     c001be65 <sysCallGetArgv(regs*)+0x41>
c001be4e:	83 ec 08             	sub    esp,0x8
c001be51:	50                   	push   eax
c001be52:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001be55:	e8 b2 49 fe ff       	call   c000080c <strcpy>
c001be5a:	83 c4 10             	add    esp,0x10
c001be5d:	31 c0                	xor    eax,eax
c001be5f:	31 d2                	xor    edx,edx
c001be61:	83 c4 0c             	add    esp,0xc
c001be64:	c3                   	ret    
c001be65:	b8 01 00 00 00       	mov    eax,0x1
c001be6a:	31 d2                	xor    edx,edx
c001be6c:	83 c4 0c             	add    esp,0xc
c001be6f:	c3                   	ret    

c001be70 <sysCallTTYName(regs*)>:
c001be70:	56                   	push   esi
c001be71:	53                   	push   ebx
c001be72:	53                   	push   ebx
c001be73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001be77:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001be7a:	85 c0                	test   eax,eax
c001be7c:	74 5f                	je     c001bedd <sysCallTTYName(regs*)+0x6d>
c001be7e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001be81:	83 f8 02             	cmp    eax,0x2
c001be84:	77 3e                	ja     c001bec4 <sysCallTTYName(regs*)+0x54>
c001be86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be8b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be8e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001be94:	85 db                	test   ebx,ebx
c001be96:	74 45                	je     c001bedd <sysCallTTYName(regs*)+0x6d>
c001be98:	83 ec 0c             	sub    esp,0xc
c001be9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be9d:	53                   	push   ebx
c001be9e:	ff 10                	call   DWORD PTR [eax]
c001bea0:	83 c4 10             	add    esp,0x10
c001bea3:	84 c0                	test   al,al
c001bea5:	74 41                	je     c001bee8 <sysCallTTYName(regs*)+0x78>
c001bea7:	83 ec 08             	sub    esp,0x8
c001beaa:	81 c3 82 00 00 00    	add    ebx,0x82
c001beb0:	53                   	push   ebx
c001beb1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001beb4:	e8 53 49 fe ff       	call   c000080c <strcpy>
c001beb9:	83 c4 10             	add    esp,0x10
c001bebc:	31 c0                	xor    eax,eax
c001bebe:	59                   	pop    ecx
c001bebf:	31 d2                	xor    edx,edx
c001bec1:	5b                   	pop    ebx
c001bec2:	5e                   	pop    esi
c001bec3:	c3                   	ret    
c001bec4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bec9:	74 bb                	je     c001be86 <sysCallTTYName(regs*)+0x16>
c001becb:	83 ec 0c             	sub    esp,0xc
c001bece:	50                   	push   eax
c001becf:	e8 99 54 ff ff       	call   c001136d <getFromFileDescriptor(int)>
c001bed4:	83 c4 10             	add    esp,0x10
c001bed7:	89 c3                	mov    ebx,eax
c001bed9:	85 db                	test   ebx,ebx
c001bedb:	75 bb                	jne    c001be98 <sysCallTTYName(regs*)+0x28>
c001bedd:	59                   	pop    ecx
c001bede:	b8 01 00 00 00       	mov    eax,0x1
c001bee3:	31 d2                	xor    edx,edx
c001bee5:	5b                   	pop    ebx
c001bee6:	5e                   	pop    esi
c001bee7:	c3                   	ret    
c001bee8:	59                   	pop    ecx
c001bee9:	b8 02 00 00 00       	mov    eax,0x2
c001beee:	31 d2                	xor    edx,edx
c001bef0:	5b                   	pop    ebx
c001bef1:	5e                   	pop    esi
c001bef2:	c3                   	ret    

c001bef3 <sysCallUSleep(regs*)>:
c001bef3:	83 ec 14             	sub    esp,0x14
c001bef6:	b8 e8 03 00 00       	mov    eax,0x3e8
c001befb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001beff:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bf06:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bf09:	01 ca                	add    edx,ecx
c001bf0b:	52                   	push   edx
c001bf0c:	50                   	push   eax
c001bf0d:	e8 a3 24 00 00       	call   c001e3b5 <nanoSleep(unsigned long long)>
c001bf12:	31 c0                	xor    eax,eax
c001bf14:	31 d2                	xor    edx,edx
c001bf16:	83 c4 1c             	add    esp,0x1c
c001bf19:	c3                   	ret    

c001bf1a <sysCallSpawn(regs*)>:
c001bf1a:	56                   	push   esi
c001bf1b:	53                   	push   ebx
c001bf1c:	50                   	push   eax
c001bf1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf21:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bf24:	85 c0                	test   eax,eax
c001bf26:	75 08                	jne    c001bf30 <sysCallSpawn(regs*)+0x16>
c001bf28:	59                   	pop    ecx
c001bf29:	31 c0                	xor    eax,eax
c001bf2b:	31 d2                	xor    edx,edx
c001bf2d:	5b                   	pop    ebx
c001bf2e:	5e                   	pop    esi
c001bf2f:	c3                   	ret    
c001bf30:	83 ec 08             	sub    esp,0x8
c001bf33:	50                   	push   eax
c001bf34:	68 23 c8 02 c0       	push   0xc002c823
c001bf39:	e8 8b 69 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001bf3e:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001bf45:	e8 42 39 ff ff       	call   c000f88c <malloc>
c001bf4a:	83 c4 10             	add    esp,0x10
c001bf4d:	89 c6                	mov    esi,eax
c001bf4f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bf52:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf55:	85 c0                	test   eax,eax
c001bf57:	75 32                	jne    c001bf8b <sysCallSpawn(regs*)+0x71>
c001bf59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf5e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf61:	52                   	push   edx
c001bf62:	50                   	push   eax
c001bf63:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf66:	56                   	push   esi
c001bf67:	e8 26 1b 00 00       	call   c001da92 <Process::Process(char const*, Process*, char**)>
c001bf6c:	83 c4 10             	add    esp,0x10
c001bf6f:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bf76:	75 b0                	jne    c001bf28 <sysCallSpawn(regs*)+0xe>
c001bf78:	83 ec 0c             	sub    esp,0xc
c001bf7b:	56                   	push   esi
c001bf7c:	e8 f3 1f 00 00       	call   c001df74 <Process::createUserThread()>
c001bf81:	8b 06                	mov    eax,DWORD PTR [esi]
c001bf83:	83 c4 10             	add    esp,0x10
c001bf86:	99                   	cdq    
c001bf87:	59                   	pop    ecx
c001bf88:	5b                   	pop    ebx
c001bf89:	5e                   	pop    esi
c001bf8a:	c3                   	ret    
c001bf8b:	31 c0                	xor    eax,eax
c001bf8d:	eb d2                	jmp    c001bf61 <sysCallSpawn(regs*)+0x47>

c001bf8f <sysCallGetEnv(regs*)>:
c001bf8f:	55                   	push   ebp
c001bf90:	57                   	push   edi
c001bf91:	56                   	push   esi
c001bf92:	53                   	push   ebx
c001bf93:	83 ec 28             	sub    esp,0x28
c001bf96:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bf9a:	68 31 c8 02 c0       	push   0xc002c831
c001bf9f:	e8 25 69 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001bfa4:	5f                   	pop    edi
c001bfa5:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bfa8:	5d                   	pop    ebp
c001bfa9:	53                   	push   ebx
c001bfaa:	68 5e cb 02 c0       	push   0xc002cb5e
c001bfaf:	e8 15 69 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001bfb4:	58                   	pop    eax
c001bfb5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bfb8:	5a                   	pop    edx
c001bfb9:	57                   	push   edi
c001bfba:	68 3a c8 02 c0       	push   0xc002c83a
c001bfbf:	e8 05 69 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001bfc4:	59                   	pop    ecx
c001bfc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfca:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfcd:	e8 49 e2 ff ff       	call   c001a21b <Krnl::getProcessTotalEnvCount(Process*)>
c001bfd2:	5a                   	pop    edx
c001bfd3:	89 c5                	mov    ebp,eax
c001bfd5:	59                   	pop    ecx
c001bfd6:	50                   	push   eax
c001bfd7:	68 44 c8 02 c0       	push   0xc002c844
c001bfdc:	e8 e8 68 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001bfe1:	83 c4 10             	add    esp,0x10
c001bfe4:	39 ef                	cmp    edi,ebp
c001bfe6:	7c 15                	jl     c001bffd <sysCallGetEnv(regs*)+0x6e>
c001bfe8:	85 db                	test   ebx,ebx
c001bfea:	75 0c                	jne    c001bff8 <sysCallGetEnv(regs*)+0x69>
c001bfec:	83 c4 1c             	add    esp,0x1c
c001bfef:	31 c0                	xor    eax,eax
c001bff1:	5b                   	pop    ebx
c001bff2:	31 d2                	xor    edx,edx
c001bff4:	5e                   	pop    esi
c001bff5:	5f                   	pop    edi
c001bff6:	5d                   	pop    ebp
c001bff7:	c3                   	ret    
c001bff8:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bffb:	eb ef                	jmp    c001bfec <sysCallGetEnv(regs*)+0x5d>
c001bffd:	83 ec 0c             	sub    esp,0xc
c001c000:	68 50 c8 02 c0       	push   0xc002c850
c001c005:	e8 bf 68 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001c00a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c00e:	83 c4 0c             	add    esp,0xc
c001c011:	57                   	push   edi
c001c012:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c018:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c01b:	50                   	push   eax
c001c01c:	e8 1a e2 ff ff       	call   c001a23b <Krnl::getProcessEnvPair(Process*, int)>
c001c021:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c025:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c029:	68 0f cc 02 c0       	push   0xc002cc0f
c001c02e:	e8 96 68 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001c033:	83 c4 10             	add    esp,0x10
c001c036:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c039:	85 f6                	test   esi,esi
c001c03b:	75 47                	jne    c001c084 <sysCallGetEnv(regs*)+0xf5>
c001c03d:	83 ec 0c             	sub    esp,0xc
c001c040:	55                   	push   ebp
c001c041:	e8 26 47 fe ff       	call   c000076c <strlen>
c001c046:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c049:	89 c3                	mov    ebx,eax
c001c04b:	e8 1c 47 fe ff       	call   c000076c <strlen>
c001c050:	5a                   	pop    edx
c001c051:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c055:	59                   	pop    ecx
c001c056:	50                   	push   eax
c001c057:	68 53 c8 02 c0       	push   0xc002c853
c001c05c:	e8 68 68 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001c061:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c064:	e8 03 47 fe ff       	call   c000076c <strlen>
c001c069:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c06c:	89 c3                	mov    ebx,eax
c001c06e:	e8 f9 46 fe ff       	call   c000076c <strlen>
c001c073:	83 c4 10             	add    esp,0x10
c001c076:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c07a:	83 c4 1c             	add    esp,0x1c
c001c07d:	31 d2                	xor    edx,edx
c001c07f:	5b                   	pop    ebx
c001c080:	5e                   	pop    esi
c001c081:	5f                   	pop    edi
c001c082:	5d                   	pop    ebp
c001c083:	c3                   	ret    
c001c084:	83 ec 0c             	sub    esp,0xc
c001c087:	68 29 cc 02 c0       	push   0xc002cc29
c001c08c:	e8 38 68 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001c091:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c094:	58                   	pop    eax
c001c095:	5a                   	pop    edx
c001c096:	55                   	push   ebp
c001c097:	53                   	push   ebx
c001c098:	e8 6f 47 fe ff       	call   c000080c <strcpy>
c001c09d:	59                   	pop    ecx
c001c09e:	5e                   	pop    esi
c001c09f:	68 5d c8 02 c0       	push   0xc002c85d
c001c0a4:	53                   	push   ebx
c001c0a5:	e8 a2 48 fe ff       	call   c000094c <strcat>
c001c0aa:	5d                   	pop    ebp
c001c0ab:	58                   	pop    eax
c001c0ac:	57                   	push   edi
c001c0ad:	53                   	push   ebx
c001c0ae:	e8 99 48 fe ff       	call   c000094c <strcat>
c001c0b3:	c7 04 24 43 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc43
c001c0ba:	e8 0a 68 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001c0bf:	83 c4 10             	add    esp,0x10
c001c0c2:	e9 25 ff ff ff       	jmp    c001bfec <sysCallGetEnv(regs*)+0x5d>

c001c0c7 <sysAppSettings(regs*)>:
c001c0c7:	57                   	push   edi
c001c0c8:	56                   	push   esi
c001c0c9:	56                   	push   esi
c001c0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ce:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c0d1:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c0d7:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c0dc:	66 3d c0 09          	cmp    ax,0x9c0
c001c0e0:	75 2e                	jne    c001c110 <sysAppSettings(regs*)+0x49>
c001c0e2:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c0e8:	83 e0 1f             	and    eax,0x1f
c001c0eb:	3c 01                	cmp    al,0x1
c001c0ed:	74 2c                	je     c001c11b <sysAppSettings(regs*)+0x54>
c001c0ef:	3c 07                	cmp    al,0x7
c001c0f1:	0f 84 b3 00 00 00    	je     c001c1aa <sysAppSettings(regs*)+0xe3>
c001c0f7:	84 c0                	test   al,al
c001c0f9:	0f 84 d2 00 00 00    	je     c001c1d1 <sysAppSettings(regs*)+0x10a>
c001c0ff:	3c 08                	cmp    al,0x8
c001c101:	74 63                	je     c001c166 <sysAppSettings(regs*)+0x9f>
c001c103:	59                   	pop    ecx
c001c104:	0f b6 c0             	movzx  eax,al
c001c107:	5e                   	pop    esi
c001c108:	05 e8 03 00 00       	add    eax,0x3e8
c001c10d:	5f                   	pop    edi
c001c10e:	99                   	cdq    
c001c10f:	c3                   	ret    
c001c110:	b8 01 00 00 00       	mov    eax,0x1
c001c115:	59                   	pop    ecx
c001c116:	31 d2                	xor    edx,edx
c001c118:	5e                   	pop    esi
c001c119:	5f                   	pop    edi
c001c11a:	c3                   	ret    
c001c11b:	50                   	push   eax
c001c11c:	68 00 01 00 00       	push   0x100
c001c121:	6a 00                	push   0x0
c001c123:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c128:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c12b:	83 c0 0c             	add    eax,0xc
c001c12e:	50                   	push   eax
c001c12f:	e8 1c 46 fe ff       	call   c0000750 <memset>
c001c134:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c139:	b9 ff 00 00 00       	mov    ecx,0xff
c001c13e:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c141:	83 c7 0c             	add    edi,0xc
c001c144:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c146:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c14b:	5a                   	pop    edx
c001c14c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c14f:	59                   	pop    ecx
c001c150:	8d 50 0c             	lea    edx,[eax+0xc]
c001c153:	52                   	push   edx
c001c154:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c15a:	e8 79 42 ff ff       	call   c00103d8 <VgaText::setTitle(char*)>
c001c15f:	83 c4 10             	add    esp,0x10
c001c162:	31 c0                	xor    eax,eax
c001c164:	eb af                	jmp    c001c115 <sysAppSettings(regs*)+0x4e>
c001c166:	83 ec 08             	sub    esp,0x8
c001c169:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c16f:	83 e0 0f             	and    eax,0xf
c001c172:	50                   	push   eax
c001c173:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c178:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c17b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c181:	e8 42 42 ff ff       	call   c00103c8 <VgaText::setTitleColour(VgaColour)>
c001c186:	5f                   	pop    edi
c001c187:	58                   	pop    eax
c001c188:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c18e:	c1 e8 04             	shr    eax,0x4
c001c191:	83 e0 0f             	and    eax,0xf
c001c194:	50                   	push   eax
c001c195:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c19a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c19d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1a3:	e8 10 42 ff ff       	call   c00103b8 <VgaText::setTitleTextColour(VgaColour)>
c001c1a8:	eb b5                	jmp    c001c15f <sysAppSettings(regs*)+0x98>
c001c1aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1b2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c1b8:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c1be:	c0 e8 06             	shr    al,0x6
c001c1c1:	83 e0 01             	and    eax,0x1
c001c1c4:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c1ca:	31 c0                	xor    eax,eax
c001c1cc:	e9 44 ff ff ff       	jmp    c001c115 <sysAppSettings(regs*)+0x4e>
c001c1d1:	b8 02 00 00 00       	mov    eax,0x2
c001c1d6:	e9 3a ff ff ff       	jmp    c001c115 <sysAppSettings(regs*)+0x4e>

c001c1db <sysSetFatAttrib(regs*)>:
c001c1db:	57                   	push   edi
c001c1dc:	56                   	push   esi
c001c1dd:	53                   	push   ebx
c001c1de:	83 ec 1c             	sub    esp,0x1c
c001c1e1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c1e5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c1e8:	68 14 01 00 00       	push   0x114
c001c1ed:	e8 9a 36 ff ff       	call   c000f88c <malloc>
c001c1f2:	83 c4 0c             	add    esp,0xc
c001c1f5:	89 c3                	mov    ebx,eax
c001c1f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1fc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c1ff:	57                   	push   edi
c001c200:	53                   	push   ebx
c001c201:	e8 22 6c ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c001c206:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c209:	83 c4 0c             	add    esp,0xc
c001c20c:	0f b6 d4             	movzx  edx,ah
c001c20f:	0f b6 c0             	movzx  eax,al
c001c212:	52                   	push   edx
c001c213:	50                   	push   eax
c001c214:	53                   	push   ebx
c001c215:	e8 84 6e ff ff       	call   c001309e <File::chfatattr(unsigned char, unsigned char)>
c001c21a:	83 c4 10             	add    esp,0x10
c001c21d:	85 db                	test   ebx,ebx
c001c21f:	74 14                	je     c001c235 <sysSetFatAttrib(regs*)+0x5a>
c001c221:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c225:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c227:	83 ec 0c             	sub    esp,0xc
c001c22a:	53                   	push   ebx
c001c22b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c22e:	83 c4 10             	add    esp,0x10
c001c231:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c235:	85 c0                	test   eax,eax
c001c237:	0f 95 c0             	setne  al
c001c23a:	31 d2                	xor    edx,edx
c001c23c:	0f b6 c0             	movzx  eax,al
c001c23f:	f7 d8                	neg    eax
c001c241:	83 d2 00             	adc    edx,0x0
c001c244:	83 c4 10             	add    esp,0x10
c001c247:	f7 da                	neg    edx
c001c249:	5b                   	pop    ebx
c001c24a:	5e                   	pop    esi
c001c24b:	5f                   	pop    edi
c001c24c:	c3                   	ret    

c001c24d <sysPipe(regs*)>:
c001c24d:	57                   	push   edi
c001c24e:	56                   	push   esi
c001c24f:	53                   	push   ebx
c001c250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c254:	83 ec 0c             	sub    esp,0xc
c001c257:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c25a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c25d:	6a 20                	push   0x20
c001c25f:	e8 28 36 ff ff       	call   c000f88c <malloc>
c001c264:	89 c3                	mov    ebx,eax
c001c266:	58                   	pop    eax
c001c267:	5a                   	pop    edx
c001c268:	68 00 50 00 00       	push   0x5000
c001c26d:	53                   	push   ebx
c001c26e:	e8 9d 3e ff ff       	call   c0010110 <Pipe::Pipe(int)>
c001c273:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c276:	e8 fd 4d ff ff       	call   c0011078 <UnixFile::getFileDescriptor()>
c001c27b:	89 07                	mov    DWORD PTR [edi],eax
c001c27d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c280:	e8 f3 4d ff ff       	call   c0011078 <UnixFile::getFileDescriptor()>
c001c285:	83 c4 10             	add    esp,0x10
c001c288:	89 06                	mov    DWORD PTR [esi],eax
c001c28a:	31 d2                	xor    edx,edx
c001c28c:	5b                   	pop    ebx
c001c28d:	31 c0                	xor    eax,eax
c001c28f:	5e                   	pop    esi
c001c290:	5f                   	pop    edi
c001c291:	c3                   	ret    

c001c292 <sysGetUnixTime(regs*)>:
c001c292:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001c297:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c29d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c2a1:	e9 74 75 ff ff       	jmp    c001381a <Clock::timeInSecondsLocal()>

c001c2a6 <string_ends_with(char const*, char const*)>:
c001c2a6:	57                   	push   edi
c001c2a7:	56                   	push   esi
c001c2a8:	53                   	push   ebx
c001c2a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2ad:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c2b1:	83 ec 0c             	sub    esp,0xc
c001c2b4:	53                   	push   ebx
c001c2b5:	e8 b2 44 fe ff       	call   c000076c <strlen>
c001c2ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c2bd:	89 c6                	mov    esi,eax
c001c2bf:	e8 a8 44 fe ff       	call   c000076c <strlen>
c001c2c4:	83 c4 10             	add    esp,0x10
c001c2c7:	39 c6                	cmp    esi,eax
c001c2c9:	7d 06                	jge    c001c2d1 <string_ends_with(char const*, char const*)+0x2b>
c001c2cb:	5b                   	pop    ebx
c001c2cc:	31 c0                	xor    eax,eax
c001c2ce:	5e                   	pop    esi
c001c2cf:	5f                   	pop    edi
c001c2d0:	c3                   	ret    
c001c2d1:	83 ec 08             	sub    esp,0x8
c001c2d4:	29 c6                	sub    esi,eax
c001c2d6:	57                   	push   edi
c001c2d7:	01 f3                	add    ebx,esi
c001c2d9:	53                   	push   ebx
c001c2da:	e8 b9 45 fe ff       	call   c0000898 <strcmp>
c001c2df:	83 c4 10             	add    esp,0x10
c001c2e2:	85 c0                	test   eax,eax
c001c2e4:	5b                   	pop    ebx
c001c2e5:	0f 94 c0             	sete   al
c001c2e8:	5e                   	pop    esi
c001c2e9:	0f b6 c0             	movzx  eax,al
c001c2ec:	5f                   	pop    edi
c001c2ed:	c3                   	ret    

c001c2ee <sysCallOpen(regs*)>:
c001c2ee:	56                   	push   esi
c001c2ef:	53                   	push   ebx
c001c2f0:	81 ec 04 01 00 00    	sub    esp,0x104
c001c2f6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c2fd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c300:	85 c9                	test   ecx,ecx
c001c302:	0f 84 b3 00 00 00    	je     c001c3bb <sysCallOpen(regs*)+0xcd>
c001c308:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c30b:	85 c0                	test   eax,eax
c001c30d:	0f 84 a8 00 00 00    	je     c001c3bb <sysCallOpen(regs*)+0xcd>
c001c313:	52                   	push   edx
c001c314:	68 5f c8 02 c0       	push   0xc002c85f
c001c319:	50                   	push   eax
c001c31a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c31e:	56                   	push   esi
c001c31f:	e8 5a 69 ff ff       	call   c0012c7e <Fs::standardiseFiles(char*, char const*, char const*)>
c001c324:	89 34 24             	mov    DWORD PTR [esp],esi
c001c327:	e8 40 44 fe ff       	call   c000076c <strlen>
c001c32c:	83 c4 10             	add    esp,0x10
c001c32f:	48                   	dec    eax
c001c330:	74 1d                	je     c001c34f <sysCallOpen(regs*)+0x61>
c001c332:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c335:	eb 0f                	jmp    c001c346 <sysCallOpen(regs*)+0x58>
c001c337:	80 fa 3a             	cmp    dl,0x3a
c001c33a:	74 0f                	je     c001c34b <sysCallOpen(regs*)+0x5d>
c001c33c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c340:	48                   	dec    eax
c001c341:	74 0c                	je     c001c34f <sysCallOpen(regs*)+0x61>
c001c343:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c346:	80 fa 2e             	cmp    dl,0x2e
c001c349:	75 ec                	jne    c001c337 <sysCallOpen(regs*)+0x49>
c001c34b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c34f:	83 ec 08             	sub    esp,0x8
c001c352:	68 63 c8 02 c0       	push   0xc002c863
c001c357:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c35a:	e8 47 ff ff ff       	call   c001c2a6 <string_ends_with(char const*, char const*)>
c001c35f:	83 c4 10             	add    esp,0x10
c001c362:	85 c0                	test   eax,eax
c001c364:	75 17                	jne    c001c37d <sysCallOpen(regs*)+0x8f>
c001c366:	83 ec 08             	sub    esp,0x8
c001c369:	68 84 c8 02 c0       	push   0xc002c884
c001c36e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c371:	e8 30 ff ff ff       	call   c001c2a6 <string_ends_with(char const*, char const*)>
c001c376:	83 c4 10             	add    esp,0x10
c001c379:	85 c0                	test   eax,eax
c001c37b:	74 51                	je     c001c3ce <sysCallOpen(regs*)+0xe0>
c001c37d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c380:	83 ec 08             	sub    esp,0x8
c001c383:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c389:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c390:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c393:	ff 30                	push   DWORD PTR [eax]
c001c395:	68 68 c8 02 c0       	push   0xc002c868
c001c39a:	e8 2a 65 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001c39f:	c7 04 24 77 c8 02 c0 	mov    DWORD PTR [esp],0xc002c877
c001c3a6:	e8 1e 65 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001c3ab:	83 c4 10             	add    esp,0x10
c001c3ae:	81 c4 04 01 00 00    	add    esp,0x104
c001c3b4:	31 c0                	xor    eax,eax
c001c3b6:	31 d2                	xor    edx,edx
c001c3b8:	5b                   	pop    ebx
c001c3b9:	5e                   	pop    esi
c001c3ba:	c3                   	ret    
c001c3bb:	81 c4 04 01 00 00    	add    esp,0x104
c001c3c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c3c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c3cb:	5b                   	pop    ebx
c001c3cc:	5e                   	pop    esi
c001c3cd:	c3                   	ret    
c001c3ce:	83 ec 08             	sub    esp,0x8
c001c3d1:	68 64 c8 02 c0       	push   0xc002c864
c001c3d6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3d9:	e8 ba 44 fe ff       	call   c0000898 <strcmp>
c001c3de:	83 c4 10             	add    esp,0x10
c001c3e1:	85 c0                	test   eax,eax
c001c3e3:	74 98                	je     c001c37d <sysCallOpen(regs*)+0x8f>
c001c3e5:	83 ec 08             	sub    esp,0x8
c001c3e8:	68 63 c8 02 c0       	push   0xc002c863
c001c3ed:	56                   	push   esi
c001c3ee:	e8 b3 fe ff ff       	call   c001c2a6 <string_ends_with(char const*, char const*)>
c001c3f3:	83 c4 10             	add    esp,0x10
c001c3f6:	85 c0                	test   eax,eax
c001c3f8:	75 83                	jne    c001c37d <sysCallOpen(regs*)+0x8f>
c001c3fa:	83 ec 08             	sub    esp,0x8
c001c3fd:	68 89 c8 02 c0       	push   0xc002c889
c001c402:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c405:	e8 9c fe ff ff       	call   c001c2a6 <string_ends_with(char const*, char const*)>
c001c40a:	83 c4 10             	add    esp,0x10
c001c40d:	85 c0                	test   eax,eax
c001c40f:	0f 85 d9 00 00 00    	jne    c001c4ee <sysCallOpen(regs*)+0x200>
c001c415:	83 ec 08             	sub    esp,0x8
c001c418:	68 8e c8 02 c0       	push   0xc002c88e
c001c41d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c420:	e8 81 fe ff ff       	call   c001c2a6 <string_ends_with(char const*, char const*)>
c001c425:	83 c4 10             	add    esp,0x10
c001c428:	85 c0                	test   eax,eax
c001c42a:	0f 85 be 00 00 00    	jne    c001c4ee <sysCallOpen(regs*)+0x200>
c001c430:	83 ec 08             	sub    esp,0x8
c001c433:	68 8a c8 02 c0       	push   0xc002c88a
c001c438:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c43b:	e8 58 44 fe ff       	call   c0000898 <strcmp>
c001c440:	83 c4 10             	add    esp,0x10
c001c443:	85 c0                	test   eax,eax
c001c445:	0f 84 a3 00 00 00    	je     c001c4ee <sysCallOpen(regs*)+0x200>
c001c44b:	83 ec 08             	sub    esp,0x8
c001c44e:	68 89 c8 02 c0       	push   0xc002c889
c001c453:	56                   	push   esi
c001c454:	e8 4d fe ff ff       	call   c001c2a6 <string_ends_with(char const*, char const*)>
c001c459:	83 c4 10             	add    esp,0x10
c001c45c:	85 c0                	test   eax,eax
c001c45e:	0f 85 8a 00 00 00    	jne    c001c4ee <sysCallOpen(regs*)+0x200>
c001c464:	83 ec 0c             	sub    esp,0xc
c001c467:	68 14 01 00 00       	push   0x114
c001c46c:	e8 1b 34 ff ff       	call   c000f88c <malloc>
c001c471:	83 c4 0c             	add    esp,0xc
c001c474:	89 c6                	mov    esi,eax
c001c476:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c47b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c47e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c481:	56                   	push   esi
c001c482:	e8 a1 69 ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c001c487:	83 c4 10             	add    esp,0x10
c001c48a:	85 f6                	test   esi,esi
c001c48c:	0f 84 29 ff ff ff    	je     c001c3bb <sysCallOpen(regs*)+0xcd>
c001c492:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c495:	0f b6 c2             	movzx  eax,dl
c001c498:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c49b:	89 d0                	mov    eax,edx
c001c49d:	83 e0 01             	and    eax,0x1
c001c4a0:	f6 c2 02             	test   dl,0x2
c001c4a3:	74 03                	je     c001c4a8 <sysCallOpen(regs*)+0x1ba>
c001c4a5:	83 c8 02             	or     eax,0x2
c001c4a8:	f6 c2 04             	test   dl,0x4
c001c4ab:	74 03                	je     c001c4b0 <sysCallOpen(regs*)+0x1c2>
c001c4ad:	83 c8 04             	or     eax,0x4
c001c4b0:	f6 c2 08             	test   dl,0x8
c001c4b3:	74 03                	je     c001c4b8 <sysCallOpen(regs*)+0x1ca>
c001c4b5:	83 c8 0a             	or     eax,0xa
c001c4b8:	83 e2 10             	and    edx,0x10
c001c4bb:	74 03                	je     c001c4c0 <sysCallOpen(regs*)+0x1d2>
c001c4bd:	83 c8 12             	or     eax,0x12
c001c4c0:	83 ec 08             	sub    esp,0x8
c001c4c3:	50                   	push   eax
c001c4c4:	56                   	push   esi
c001c4c5:	e8 c2 69 ff ff       	call   c0012e8c <File::open(FileOpenMode)>
c001c4ca:	83 c4 10             	add    esp,0x10
c001c4cd:	85 c0                	test   eax,eax
c001c4cf:	0f 85 e6 fe ff ff    	jne    c001c3bb <sysCallOpen(regs*)+0xcd>
c001c4d5:	83 ec 0c             	sub    esp,0xc
c001c4d8:	56                   	push   esi
c001c4d9:	e8 9a 4b ff ff       	call   c0011078 <UnixFile::getFileDescriptor()>
c001c4de:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c4e1:	89 02                	mov    DWORD PTR [edx],eax
c001c4e3:	c1 f8 1f             	sar    eax,0x1f
c001c4e6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c4e9:	e9 bd fe ff ff       	jmp    c001c3ab <sysCallOpen(regs*)+0xbd>
c001c4ee:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4f1:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c4f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4fe:	e9 ab fe ff ff       	jmp    c001c3ae <sysCallOpen(regs*)+0xc0>

c001c503 <Sys::loadSyscalls()>:
c001c503:	c7 05 20 1e 03 c0 f3 b5 01 c0 	mov    DWORD PTR ds:0xc0031e20,0xc001b5f3
c001c50d:	c7 05 24 1e 03 c0 58 b1 01 c0 	mov    DWORD PTR ds:0xc0031e24,0xc001b158
c001c517:	c7 05 28 1e 03 c0 46 b3 01 c0 	mov    DWORD PTR ds:0xc0031e28,0xc001b346
c001c521:	c7 05 2c 1e 03 c0 29 b5 01 c0 	mov    DWORD PTR ds:0xc0031e2c,0xc001b529
c001c52b:	c7 05 30 1e 03 c0 de b2 01 c0 	mov    DWORD PTR ds:0xc0031e30,0xc001b2de
c001c535:	c7 05 34 1e 03 c0 8f b1 01 c0 	mov    DWORD PTR ds:0xc0031e34,0xc001b18f
c001c53f:	c7 05 38 1e 03 c0 70 b1 01 c0 	mov    DWORD PTR ds:0xc0031e38,0xc001b170
c001c549:	c7 05 3c 1e 03 c0 9b b3 01 c0 	mov    DWORD PTR ds:0xc0031e3c,0xc001b39b
c001c553:	c7 05 44 1e 03 c0 2e bb 01 c0 	mov    DWORD PTR ds:0xc0031e44,0xc001bb2e
c001c55d:	c7 05 40 1e 03 c0 ee c2 01 c0 	mov    DWORD PTR ds:0xc0031e40,0xc001c2ee
c001c567:	c7 05 48 1e 03 c0 b6 bb 01 c0 	mov    DWORD PTR ds:0xc0031e48,0xc001bbb6
c001c571:	c7 05 4c 1e 03 c0 1d b8 01 c0 	mov    DWORD PTR ds:0xc0031e4c,0xc001b81d
c001c57b:	c7 05 50 1e 03 c0 39 b6 01 c0 	mov    DWORD PTR ds:0xc0031e50,0xc001b639
c001c585:	c7 05 54 1e 03 c0 3e b6 01 c0 	mov    DWORD PTR ds:0xc0031e54,0xc001b63e
c001c58f:	c7 05 58 1e 03 c0 91 bc 01 c0 	mov    DWORD PTR ds:0xc0031e58,0xc001bc91
c001c599:	c7 05 5c 1e 03 c0 2b bc 01 c0 	mov    DWORD PTR ds:0xc0031e5c,0xc001bc2b
c001c5a3:	c7 05 60 1e 03 c0 05 b9 01 c0 	mov    DWORD PTR ds:0xc0031e60,0xc001b905
c001c5ad:	c7 05 64 1e 03 c0 6e b9 01 c0 	mov    DWORD PTR ds:0xc0031e64,0xc001b96e
c001c5b7:	c7 05 68 1e 03 c0 eb b9 01 c0 	mov    DWORD PTR ds:0xc0031e68,0xc001b9eb
c001c5c1:	c7 05 6c 1e 03 c0 43 b6 01 c0 	mov    DWORD PTR ds:0xc0031e6c,0xc001b643
c001c5cb:	c7 05 70 1e 03 c0 01 bd 01 c0 	mov    DWORD PTR ds:0xc0031e70,0xc001bd01
c001c5d5:	c7 05 74 1e 03 c0 1b bd 01 c0 	mov    DWORD PTR ds:0xc0031e74,0xc001bd1b
c001c5df:	c7 05 78 1e 03 c0 1b bd 01 c0 	mov    DWORD PTR ds:0xc0031e78,0xc001bd1b
c001c5e9:	c7 05 7c 1e 03 c0 5c bd 01 c0 	mov    DWORD PTR ds:0xc0031e7c,0xc001bd5c
c001c5f3:	c7 05 80 1e 03 c0 c0 bd 01 c0 	mov    DWORD PTR ds:0xc0031e80,0xc001bdc0
c001c5fd:	c7 05 84 1e 03 c0 ef b7 01 c0 	mov    DWORD PTR ds:0xc0031e84,0xc001b7ef
c001c607:	c7 05 88 1e 03 c0 24 be 01 c0 	mov    DWORD PTR ds:0xc0031e88,0xc001be24
c001c611:	c7 05 8c 1e 03 c0 ac b7 01 c0 	mov    DWORD PTR ds:0xc0031e8c,0xc001b7ac
c001c61b:	c7 05 90 1e 03 c0 70 be 01 c0 	mov    DWORD PTR ds:0xc0031e90,0xc001be70
c001c625:	c7 05 94 1e 03 c0 ab b8 01 c0 	mov    DWORD PTR ds:0xc0031e94,0xc001b8ab
c001c62f:	c7 05 98 1e 03 c0 f3 be 01 c0 	mov    DWORD PTR ds:0xc0031e98,0xc001bef3
c001c639:	c7 05 9c 1e 03 c0 6e ba 01 c0 	mov    DWORD PTR ds:0xc0031e9c,0xc001ba6e
c001c643:	c7 05 a0 1e 03 c0 1a bf 01 c0 	mov    DWORD PTR ds:0xc0031ea0,0xc001bf1a
c001c64d:	c7 05 a4 1e 03 c0 8f bf 01 c0 	mov    DWORD PTR ds:0xc0031ea4,0xc001bf8f
c001c657:	c7 05 a8 1e 03 c0 c7 c0 01 c0 	mov    DWORD PTR ds:0xc0031ea8,0xc001c0c7
c001c661:	c7 05 ac 1e 03 c0 4d b6 01 c0 	mov    DWORD PTR ds:0xc0031eac,0xc001b64d
c001c66b:	c7 05 b0 1e 03 c0 b7 b6 01 c0 	mov    DWORD PTR ds:0xc0031eb0,0xc001b6b7
c001c675:	c7 05 b4 1e 03 c0 fd b6 01 c0 	mov    DWORD PTR ds:0xc0031eb4,0xc001b6fd
c001c67f:	c7 05 b8 1e 03 c0 db c1 01 c0 	mov    DWORD PTR ds:0xc0031eb8,0xc001c1db
c001c689:	c7 05 bc 1e 03 c0 36 bd 01 c0 	mov    DWORD PTR ds:0xc0031ebc,0xc001bd36
c001c693:	c7 05 c0 1e 03 c0 4e b7 01 c0 	mov    DWORD PTR ds:0xc0031ec0,0xc001b74e
c001c69d:	c7 05 c4 1e 03 c0 4d c2 01 c0 	mov    DWORD PTR ds:0xc0031ec4,0xc001c24d
c001c6a7:	c7 05 c8 1e 03 c0 92 c2 01 c0 	mov    DWORD PTR ds:0xc0031ec8,0xc001c292
c001c6b1:	c7 05 cc 1e 03 c0 36 b2 01 c0 	mov    DWORD PTR ds:0xc0031ecc,0xc001b236
c001c6bb:	c7 05 d0 1e 03 c0 b7 b3 01 c0 	mov    DWORD PTR ds:0xc0031ed0,0xc001b3b7
c001c6c5:	c7 05 d4 1e 03 c0 df b4 01 c0 	mov    DWORD PTR ds:0xc0031ed4,0xc001b4df
c001c6cf:	c7 05 d8 1e 03 c0 22 b1 01 c0 	mov    DWORD PTR ds:0xc0031ed8,0xc001b122
c001c6d9:	c7 05 dc 1e 03 c0 91 b5 01 c0 	mov    DWORD PTR ds:0xc0031edc,0xc001b591
c001c6e3:	c7 05 e0 1e 03 c0 9b b1 01 c0 	mov    DWORD PTR ds:0xc0031ee0,0xc001b19b
c001c6ed:	c7 05 e4 1e 03 c0 b2 b1 01 c0 	mov    DWORD PTR ds:0xc0031ee4,0xc001b1b2
c001c6f7:	c3                   	ret    

c001c6f8 <Sys::systemCall(regs*, void*)>:
c001c6f8:	53                   	push   ebx
c001c6f9:	83 ec 08             	sub    esp,0x8
c001c6fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c700:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c703:	83 f8 7f             	cmp    eax,0x7f
c001c706:	77 16                	ja     c001c71e <Sys::systemCall(regs*, void*)+0x26>
c001c708:	8b 14 85 20 1e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce1e0]
c001c70f:	85 d2                	test   edx,edx
c001c711:	74 0b                	je     c001c71e <Sys::systemCall(regs*, void*)+0x26>
c001c713:	83 ec 0c             	sub    esp,0xc
c001c716:	53                   	push   ebx
c001c717:	ff d2                	call   edx
c001c719:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c71c:	eb 0d                	jmp    c001c72b <Sys::systemCall(regs*, void*)+0x33>
c001c71e:	52                   	push   edx
c001c71f:	52                   	push   edx
c001c720:	50                   	push   eax
c001c721:	68 93 c8 02 c0       	push   0xc002c893
c001c726:	e8 9e 61 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001c72b:	83 c4 10             	add    esp,0x10
c001c72e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c733:	31 d2                	xor    edx,edx
c001c735:	83 c4 08             	add    esp,0x8
c001c738:	5b                   	pop    ebx
c001c739:	c3                   	ret    

c001c73a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c73a:	55                   	push   ebp
c001c73b:	57                   	push   edi
c001c73c:	56                   	push   esi
c001c73d:	53                   	push   ebx
c001c73e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c744:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c74b:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c752:	85 c0                	test   eax,eax
c001c754:	0f 95 c1             	setne  cl
c001c757:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c75f:	0f 94 c2             	sete   dl
c001c762:	84 d1                	test   cl,dl
c001c764:	74 23                	je     c001c789 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c766:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c76c:	74 1b                	je     c001c789 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c76e:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c774:	89 da                	mov    edx,ebx
c001c776:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c77c:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c782:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c789:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c790:	05 ff 0f 00 00       	add    eax,0xfff
c001c795:	83 ec 0c             	sub    esp,0xc
c001c798:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c79c:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c7a2:	c1 e8 0c             	shr    eax,0xc
c001c7a5:	89 fe                	mov    esi,edi
c001c7a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7ab:	c1 ee 0c             	shr    esi,0xc
c001c7ae:	6a 01                	push   0x1
c001c7b0:	e8 0e 4d ff ff       	call   c00114c3 <Virt::allocateKernelVirtualPages(int)>
c001c7b5:	89 c5                	mov    ebp,eax
c001c7b7:	58                   	pop    eax
c001c7b8:	5a                   	pop    edx
c001c7b9:	56                   	push   esi
c001c7ba:	68 17 c9 02 c0       	push   0xc002c917
c001c7bf:	e8 05 61 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001c7c4:	59                   	pop    ecx
c001c7c5:	58                   	pop    eax
c001c7c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7ca:	68 29 c9 02 c0       	push   0xc002c929
c001c7cf:	e8 f5 60 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001c7d4:	83 c4 10             	add    esp,0x10
c001c7d7:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c7dd:	0f 86 31 01 00 00    	jbe    c001c914 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c7e3:	c1 e6 0c             	shl    esi,0xc
c001c7e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7e9:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c7ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7f0:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c7f7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c7fa:	01 df                	add    edi,ebx
c001c7fc:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c7ff:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c803:	0f 84 08 01 00 00    	je     c001c911 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c809:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c80f:	76 05                	jbe    c001c816 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c811:	bf 00 10 00 00       	mov    edi,0x1000
c001c816:	83 ec 0c             	sub    esp,0xc
c001c819:	31 d2                	xor    edx,edx
c001c81b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c822:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c824:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c828:	50                   	push   eax
c001c829:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c82d:	56                   	push   esi
c001c82e:	52                   	push   edx
c001c82f:	57                   	push   edi
c001c830:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c837:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c83a:	83 c4 20             	add    esp,0x20
c001c83d:	85 c0                	test   eax,eax
c001c83f:	74 0a                	je     c001c84b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c841:	53                   	push   ebx
c001c842:	53                   	push   ebx
c001c843:	50                   	push   eax
c001c844:	68 3b c9 02 c0       	push   0xc002c93b
c001c849:	eb 0f                	jmp    c001c85a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c84b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c84f:	74 20                	je     c001c871 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c851:	51                   	push   ecx
c001c852:	51                   	push   ecx
c001c853:	6a 00                	push   0x0
c001c855:	68 66 c9 02 c0       	push   0xc002c966
c001c85a:	e8 6a 60 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001c85f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c862:	e8 1c 51 ff ff       	call   c0011983 <Virt::freeKernelVirtualPages(unsigned long)>
c001c867:	83 c4 10             	add    esp,0x10
c001c86a:	31 c0                	xor    eax,eax
c001c86c:	e9 68 01 00 00       	jmp    c001c9d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c871:	fa                   	cli    
c001c872:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001c878:	e8 0d 33 ff ff       	call   c000fb8a <Phys::allocatePage()>
c001c87d:	6a 07                	push   0x7
c001c87f:	89 c7                	mov    edi,eax
c001c881:	55                   	push   ebp
c001c882:	50                   	push   eax
c001c883:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c888:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c88b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c891:	e8 64 54 ff ff       	call   c0011cfa <VAS::mapPage(unsigned long, unsigned long, int)>
c001c896:	83 c4 0c             	add    esp,0xc
c001c899:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c8a0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8a6:	6a 00                	push   0x0
c001c8a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8b0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8b6:	e8 99 52 ff ff       	call   c0011b54 <VAS::mapOtherVASIn(bool, VAS*)>
c001c8bb:	58                   	pop    eax
c001c8bc:	5a                   	pop    edx
c001c8bd:	68 07 0c 00 00       	push   0xc07
c001c8c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c8c6:	57                   	push   edi
c001c8c7:	89 ef                	mov    edi,ebp
c001c8c9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c8d0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8d6:	6a 00                	push   0x0
c001c8d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8e0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8e6:	e8 cb 57 ff ff       	call   c00120b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c8eb:	b9 00 10 00 00       	mov    ecx,0x1000
c001c8f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c8f2:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001c8f7:	83 c4 20             	add    esp,0x20
c001c8fa:	48                   	dec    eax
c001c8fb:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001c900:	85 c0                	test   eax,eax
c001c902:	75 01                	jne    c001c905 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c904:	fb                   	sti    
c001c905:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c90c:	e9 df fe ff ff       	jmp    c001c7f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c911:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c914:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c91c:	0f 86 a9 00 00 00    	jbe    c001c9cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c922:	fa                   	cli    
c001c923:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001c929:	51                   	push   ecx
c001c92a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c931:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c937:	6a 00                	push   0x0
c001c939:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c93e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c941:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c947:	e8 08 52 ff ff       	call   c0011b54 <VAS::mapOtherVASIn(bool, VAS*)>
c001c94c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c950:	c1 e6 0c             	shl    esi,0xc
c001c953:	01 de                	add    esi,ebx
c001c955:	83 c4 10             	add    esp,0x10
c001c958:	39 de                	cmp    esi,ebx
c001c95a:	74 61                	je     c001c9bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c95c:	e8 29 32 ff ff       	call   c000fb8a <Phys::allocatePage()>
c001c961:	6a 07                	push   0x7
c001c963:	89 c7                	mov    edi,eax
c001c965:	55                   	push   ebp
c001c966:	50                   	push   eax
c001c967:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c96c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c96f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c975:	e8 80 53 ff ff       	call   c0011cfa <VAS::mapPage(unsigned long, unsigned long, int)>
c001c97a:	58                   	pop    eax
c001c97b:	5a                   	pop    edx
c001c97c:	68 07 0c 00 00       	push   0xc07
c001c981:	53                   	push   ebx
c001c982:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c988:	57                   	push   edi
c001c989:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c990:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c996:	6a 00                	push   0x0
c001c998:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c99d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9a0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9a6:	e8 0b 57 ff ff       	call   c00120b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9ab:	83 c4 1c             	add    esp,0x1c
c001c9ae:	68 00 10 00 00       	push   0x1000
c001c9b3:	6a 00                	push   0x0
c001c9b5:	55                   	push   ebp
c001c9b6:	e8 95 3d fe ff       	call   c0000750 <memset>
c001c9bb:	eb 98                	jmp    c001c955 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c9bd:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001c9c2:	48                   	dec    eax
c001c9c3:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001c9c8:	75 01                	jne    c001c9cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c9ca:	fb                   	sti    
c001c9cb:	83 ec 0c             	sub    esp,0xc
c001c9ce:	55                   	push   ebp
c001c9cf:	e8 af 4f ff ff       	call   c0011983 <Virt::freeKernelVirtualPages(unsigned long)>
c001c9d4:	83 c4 10             	add    esp,0x10
c001c9d7:	b0 01                	mov    al,0x1
c001c9d9:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c9df:	5b                   	pop    ebx
c001c9e0:	5e                   	pop    esi
c001c9e1:	5f                   	pop    edi
c001c9e2:	5d                   	pop    ebp
c001c9e3:	c3                   	ret    

c001c9e4 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c9e4:	55                   	push   ebp
c001c9e5:	57                   	push   edi
c001c9e6:	56                   	push   esi
c001c9e7:	53                   	push   ebx
c001c9e8:	83 ec 48             	sub    esp,0x48
c001c9eb:	68 14 01 00 00       	push   0x114
c001c9f0:	e8 97 2e ff ff       	call   c000f88c <malloc>
c001c9f5:	83 c4 0c             	add    esp,0xc
c001c9f8:	89 c6                	mov    esi,eax
c001c9fa:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c9fe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca02:	50                   	push   eax
c001ca03:	e8 20 64 ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c001ca08:	58                   	pop    eax
c001ca09:	5a                   	pop    edx
c001ca0a:	6a 01                	push   0x1
c001ca0c:	56                   	push   esi
c001ca0d:	e8 7a 64 ff ff       	call   c0012e8c <File::open(FileOpenMode)>
c001ca12:	83 c4 10             	add    esp,0x10
c001ca15:	85 c0                	test   eax,eax
c001ca17:	0f 85 47 01 00 00    	jne    c001cb64 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca1d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ca25:	83 ec 0c             	sub    esp,0xc
c001ca28:	6a 34                	push   0x34
c001ca2a:	e8 5d 2e ff ff       	call   c000f88c <malloc>
c001ca2f:	89 c3                	mov    ebx,eax
c001ca31:	58                   	pop    eax
c001ca32:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca34:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ca38:	57                   	push   edi
c001ca39:	53                   	push   ebx
c001ca3a:	6a 00                	push   0x0
c001ca3c:	6a 34                	push   0x34
c001ca3e:	56                   	push   esi
c001ca3f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca42:	83 c4 20             	add    esp,0x20
c001ca45:	85 c0                	test   eax,eax
c001ca47:	0f 85 17 01 00 00    	jne    c001cb64 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca4d:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ca53:	0f 85 0b 01 00 00    	jne    c001cb64 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca59:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca5c:	85 c0                	test   eax,eax
c001ca5e:	0f 84 00 01 00 00    	je     c001cb64 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca64:	31 d2                	xor    edx,edx
c001ca66:	55                   	push   ebp
c001ca67:	52                   	push   edx
c001ca68:	50                   	push   eax
c001ca69:	56                   	push   esi
c001ca6a:	e8 db 64 ff ff       	call   c0012f4a <File::seek(unsigned long long)>
c001ca6f:	83 c4 10             	add    esp,0x10
c001ca72:	85 c0                	test   eax,eax
c001ca74:	0f 85 ea 00 00 00    	jne    c001cb64 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca7a:	83 ec 0c             	sub    esp,0xc
c001ca7d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ca80:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca88:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca8c:	0f af c2             	imul   eax,edx
c001ca8f:	50                   	push   eax
c001ca90:	e8 f7 2d ff ff       	call   c000f88c <malloc>
c001ca95:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ca97:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca9b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca9e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001caa2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001caa6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001caaa:	0f af c2             	imul   eax,edx
c001caad:	99                   	cdq    
c001caae:	52                   	push   edx
c001caaf:	50                   	push   eax
c001cab0:	56                   	push   esi
c001cab1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cab4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cab7:	83 c4 20             	add    esp,0x20
c001caba:	85 c0                	test   eax,eax
c001cabc:	0f 84 a2 00 00 00    	je     c001cb64 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cac2:	31 d2                	xor    edx,edx
c001cac4:	51                   	push   ecx
c001cac5:	52                   	push   edx
c001cac6:	50                   	push   eax
c001cac7:	56                   	push   esi
c001cac8:	e8 7d 64 ff ff       	call   c0012f4a <File::seek(unsigned long long)>
c001cacd:	83 c4 10             	add    esp,0x10
c001cad0:	85 c0                	test   eax,eax
c001cad2:	0f 85 8c 00 00 00    	jne    c001cb64 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cad8:	83 ec 0c             	sub    esp,0xc
c001cadb:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cadf:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cae3:	31 ed                	xor    ebp,ebp
c001cae5:	0f af c2             	imul   eax,edx
c001cae8:	50                   	push   eax
c001cae9:	e8 9e 2d ff ff       	call   c000f88c <malloc>
c001caee:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001caf0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001caf4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001caf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cafb:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001caff:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb03:	0f af c2             	imul   eax,edx
c001cb06:	99                   	cdq    
c001cb07:	52                   	push   edx
c001cb08:	50                   	push   eax
c001cb09:	56                   	push   esi
c001cb0a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb0d:	83 c4 20             	add    esp,0x20
c001cb10:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb18:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb1c:	0f 86 80 00 00 00    	jbe    c001cba2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cb22:	0f b7 fd             	movzx  edi,bp
c001cb25:	c1 e7 05             	shl    edi,0x5
c001cb28:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cb2c:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cb2f:	75 6b                	jne    c001cb9c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb31:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cb34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb38:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cb3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb3f:	52                   	push   edx
c001cb40:	31 d2                	xor    edx,edx
c001cb42:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cb45:	52                   	push   edx
c001cb46:	50                   	push   eax
c001cb47:	56                   	push   esi
c001cb48:	e8 fd 63 ff ff       	call   c0012f4a <File::seek(unsigned long long)>
c001cb4d:	83 c4 10             	add    esp,0x10
c001cb50:	85 c0                	test   eax,eax
c001cb52:	74 17                	je     c001cb6b <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cb54:	83 ec 0c             	sub    esp,0xc
c001cb57:	68 92 c9 02 c0       	push   0xc002c992
c001cb5c:	e8 68 5d ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001cb61:	83 c4 10             	add    esp,0x10
c001cb64:	31 c0                	xor    eax,eax
c001cb66:	e9 87 00 00 00       	jmp    c001cbf2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cb6b:	83 ec 0c             	sub    esp,0xc
c001cb6e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cb71:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cb74:	50                   	push   eax
c001cb75:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cb79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb7d:	56                   	push   esi
c001cb7e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cb82:	e8 b3 fb ff ff       	call   c001c73a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cb87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb8b:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cb8f:	83 c4 20             	add    esp,0x20
c001cb92:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cb96:	73 04                	jae    c001cb9c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb9c:	45                   	inc    ebp
c001cb9d:	e9 76 ff ff ff       	jmp    c001cb18 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cba2:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cba6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbae:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cbb4:	83 ec 0c             	sub    esp,0xc
c001cbb7:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cbbd:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cbc2:	05 00 10 00 00       	add    eax,0x1000
c001cbc7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cbca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbce:	e8 c9 2c ff ff       	call   c000f89c <free>
c001cbd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbd6:	e8 c1 2c ff ff       	call   c000f89c <free>
c001cbdb:	58                   	pop    eax
c001cbdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbe0:	e8 b7 2c ff ff       	call   c000f89c <free>
c001cbe5:	89 34 24             	mov    DWORD PTR [esp],esi
c001cbe8:	e8 fd 62 ff ff       	call   c0012eea <File::close()>
c001cbed:	83 c4 10             	add    esp,0x10
c001cbf0:	b0 01                	mov    al,0x1
c001cbf2:	83 c4 3c             	add    esp,0x3c
c001cbf5:	5b                   	pop    ebx
c001cbf6:	5e                   	pop    esi
c001cbf7:	5f                   	pop    edi
c001cbf8:	5d                   	pop    ebp
c001cbf9:	c3                   	ret    

c001cbfa <Thr::runtimeReferenceHelper()>:
c001cbfa:	83 ec 18             	sub    esp,0x18
c001cbfd:	68 9a c9 02 c0       	push   0xc002c99a
c001cc02:	e8 c2 5c ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001cc07:	fa                   	cli    
c001cc08:	83 c4 10             	add    esp,0x10
c001cc0b:	eb fe                	jmp    c001cc0b <Thr::runtimeReferenceHelper()+0x11>

c001cc0d <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc0d:	57                   	push   edi
c001cc0e:	56                   	push   esi
c001cc0f:	53                   	push   ebx
c001cc10:	31 db                	xor    ebx,ebx
c001cc12:	39 1d c0 27 03 c0    	cmp    DWORD PTR ds:0xc00327c0,ebx
c001cc18:	7e 3c                	jle    c001cc56 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc1a:	8b 34 9d 40 27 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcd8c0]
c001cc21:	31 ff                	xor    edi,edi
c001cc23:	39 3c 9d 40 26 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcd9c0],edi
c001cc2a:	7e 27                	jle    c001cc53 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cc2c:	50                   	push   eax
c001cc2d:	50                   	push   eax
c001cc2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc32:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc34:	03 04 9d c0 26 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcd940]
c001cc3b:	50                   	push   eax
c001cc3c:	e8 57 3c fe ff       	call   c0000898 <strcmp>
c001cc41:	83 c4 10             	add    esp,0x10
c001cc44:	85 c0                	test   eax,eax
c001cc46:	75 05                	jne    c001cc4d <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cc48:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cc4b:	eb 0b                	jmp    c001cc58 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cc4d:	83 c6 10             	add    esi,0x10
c001cc50:	47                   	inc    edi
c001cc51:	eb d0                	jmp    c001cc23 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cc53:	43                   	inc    ebx
c001cc54:	eb bc                	jmp    c001cc12 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cc56:	31 c0                	xor    eax,eax
c001cc58:	5b                   	pop    ebx
c001cc59:	5e                   	pop    esi
c001cc5a:	5f                   	pop    edi
c001cc5b:	c3                   	ret    

c001cc5c <Thr::loadKernelSymbolTable(char const*)>:
c001cc5c:	55                   	push   ebp
c001cc5d:	57                   	push   edi
c001cc5e:	56                   	push   esi
c001cc5f:	53                   	push   ebx
c001cc60:	83 ec 68             	sub    esp,0x68
c001cc63:	8b 35 10 28 03 c0    	mov    esi,DWORD PTR ds:0xc0032810
c001cc69:	68 14 01 00 00       	push   0x114
c001cc6e:	e8 19 2c ff ff       	call   c000f88c <malloc>
c001cc73:	83 c4 0c             	add    esp,0xc
c001cc76:	89 c3                	mov    ebx,eax
c001cc78:	56                   	push   esi
c001cc79:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cc7d:	50                   	push   eax
c001cc7e:	e8 a5 61 ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c001cc83:	5e                   	pop    esi
c001cc84:	5f                   	pop    edi
c001cc85:	6a 01                	push   0x1
c001cc87:	53                   	push   ebx
c001cc88:	e8 ff 61 ff ff       	call   c0012e8c <File::open(FileOpenMode)>
c001cc8d:	83 c4 10             	add    esp,0x10
c001cc90:	85 c0                	test   eax,eax
c001cc92:	74 0a                	je     c001cc9e <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cc94:	83 ec 0c             	sub    esp,0xc
c001cc97:	68 bc c9 02 c0       	push   0xc002c9bc
c001cc9c:	eb 34                	jmp    c001ccd2 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cc9e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cca6:	83 ec 0c             	sub    esp,0xc
c001cca9:	6a 34                	push   0x34
c001ccab:	e8 dc 2b ff ff       	call   c000f88c <malloc>
c001ccb0:	59                   	pop    ecx
c001ccb1:	89 c7                	mov    edi,eax
c001ccb3:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ccb7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccb9:	56                   	push   esi
c001ccba:	57                   	push   edi
c001ccbb:	6a 00                	push   0x0
c001ccbd:	6a 34                	push   0x34
c001ccbf:	53                   	push   ebx
c001ccc0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ccc3:	83 c4 20             	add    esp,0x20
c001ccc6:	85 c0                	test   eax,eax
c001ccc8:	74 17                	je     c001cce1 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ccca:	83 ec 0c             	sub    esp,0xc
c001cccd:	68 d3 c9 02 c0       	push   0xc002c9d3
c001ccd2:	e8 28 d6 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001ccd7:	83 c4 10             	add    esp,0x10
c001ccda:	31 c0                	xor    eax,eax
c001ccdc:	e9 31 02 00 00       	jmp    c001cf12 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cce1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cce7:	75 e1                	jne    c001ccca <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cce9:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ccec:	85 c0                	test   eax,eax
c001ccee:	74 da                	je     c001ccca <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ccf0:	52                   	push   edx
c001ccf1:	31 d2                	xor    edx,edx
c001ccf3:	52                   	push   edx
c001ccf4:	50                   	push   eax
c001ccf5:	53                   	push   ebx
c001ccf6:	e8 4f 62 ff ff       	call   c0012f4a <File::seek(unsigned long long)>
c001ccfb:	83 c4 10             	add    esp,0x10
c001ccfe:	85 c0                	test   eax,eax
c001cd00:	75 c8                	jne    c001ccca <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd02:	83 ec 0c             	sub    esp,0xc
c001cd05:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd09:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd0d:	31 ed                	xor    ebp,ebp
c001cd0f:	0f af c2             	imul   eax,edx
c001cd12:	50                   	push   eax
c001cd13:	e8 74 2b ff ff       	call   c000f88c <malloc>
c001cd18:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd1e:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd25:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd29:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd2d:	0f af c2             	imul   eax,edx
c001cd30:	99                   	cdq    
c001cd31:	52                   	push   edx
c001cd32:	50                   	push   eax
c001cd33:	53                   	push   ebx
c001cd34:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd37:	83 c4 20             	add    esp,0x20
c001cd3a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cd42:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cd4a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd52:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cd5a:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cd5e:	0f 86 aa 00 00 00    	jbe    c001ce0e <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cd64:	0f b7 f5             	movzx  esi,bp
c001cd67:	6b f6 28             	imul   esi,esi,0x28
c001cd6a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd6e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cd71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd75:	50                   	push   eax
c001cd76:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd7a:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cd7e:	8b 16                	mov    edx,DWORD PTR [esi]
c001cd80:	6b c0 28             	imul   eax,eax,0x28
c001cd83:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cd87:	89 d0                	mov    eax,edx
c001cd89:	31 d2                	xor    edx,edx
c001cd8b:	52                   	push   edx
c001cd8c:	50                   	push   eax
c001cd8d:	53                   	push   ebx
c001cd8e:	e8 b7 61 ff ff       	call   c0012f4a <File::seek(unsigned long long)>
c001cd93:	83 c4 0c             	add    esp,0xc
c001cd96:	6a 20                	push   0x20
c001cd98:	6a 00                	push   0x0
c001cd9a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cd9e:	52                   	push   edx
c001cd9f:	e8 ac 39 fe ff       	call   c0000750 <memset>
c001cda4:	58                   	pop    eax
c001cda5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cda7:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cdab:	51                   	push   ecx
c001cdac:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cdb0:	52                   	push   edx
c001cdb1:	6a 00                	push   0x0
c001cdb3:	6a 1f                	push   0x1f
c001cdb5:	53                   	push   ebx
c001cdb6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdb9:	83 c4 18             	add    esp,0x18
c001cdbc:	68 ea c9 02 c0       	push   0xc002c9ea
c001cdc1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cdc5:	52                   	push   edx
c001cdc6:	e8 cd 3a fe ff       	call   c0000898 <strcmp>
c001cdcb:	83 c4 10             	add    esp,0x10
c001cdce:	85 c0                	test   eax,eax
c001cdd0:	75 0f                	jne    c001cde1 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cdd2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cdd5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cdd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cddd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cde1:	50                   	push   eax
c001cde2:	50                   	push   eax
c001cde3:	68 f2 c9 02 c0       	push   0xc002c9f2
c001cde8:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cdec:	50                   	push   eax
c001cded:	e8 a6 3a fe ff       	call   c0000898 <strcmp>
c001cdf2:	83 c4 10             	add    esp,0x10
c001cdf5:	85 c0                	test   eax,eax
c001cdf7:	75 0f                	jne    c001ce08 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cdf9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cdfc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce08:	45                   	inc    ebp
c001ce09:	e9 4c ff ff ff       	jmp    c001cd5a <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce0e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce13:	75 10                	jne    c001ce25 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce15:	83 ec 0c             	sub    esp,0xc
c001ce18:	68 fa c9 02 c0       	push   0xc002c9fa
c001ce1d:	e8 dd d4 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001ce22:	83 c4 10             	add    esp,0x10
c001ce25:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ce2a:	75 10                	jne    c001ce3c <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ce2c:	83 ec 0c             	sub    esp,0xc
c001ce2f:	68 fa c9 02 c0       	push   0xc002c9fa
c001ce34:	e8 c6 d4 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001ce39:	83 c4 10             	add    esp,0x10
c001ce3c:	31 d2                	xor    edx,edx
c001ce3e:	50                   	push   eax
c001ce3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce43:	52                   	push   edx
c001ce44:	50                   	push   eax
c001ce45:	53                   	push   ebx
c001ce46:	e8 ff 60 ff ff       	call   c0012f4a <File::seek(unsigned long long)>
c001ce4b:	5a                   	pop    edx
c001ce4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ce50:	e8 37 2a ff ff       	call   c000f88c <malloc>
c001ce55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce5d:	31 c9                	xor    ecx,ecx
c001ce5f:	5e                   	pop    esi
c001ce60:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce62:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ce66:	55                   	push   ebp
c001ce67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce6b:	51                   	push   ecx
c001ce6c:	52                   	push   edx
c001ce6d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ce71:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ce75:	53                   	push   ebx
c001ce76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce79:	83 c4 14             	add    esp,0x14
c001ce7c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce80:	e8 07 2a ff ff       	call   c000f88c <malloc>
c001ce85:	89 c6                	mov    esi,eax
c001ce87:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce8c:	56                   	push   esi
c001ce8d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ce91:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ce95:	51                   	push   ecx
c001ce96:	52                   	push   edx
c001ce97:	53                   	push   ebx
c001ce98:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce9f:	8b 15 c0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327c0
c001cea5:	83 c4 1c             	add    esp,0x1c
c001cea8:	c1 e8 04             	shr    eax,0x4
c001ceab:	89 04 95 40 26 03 c0 	mov    DWORD PTR [edx*4-0x3ffcd9c0],eax
c001ceb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ceb6:	31 d2                	xor    edx,edx
c001ceb8:	52                   	push   edx
c001ceb9:	50                   	push   eax
c001ceba:	53                   	push   ebx
c001cebb:	e8 8a 60 ff ff       	call   c0012f4a <File::seek(unsigned long long)>
c001cec0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cec2:	31 d2                	xor    edx,edx
c001cec4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cec7:	56                   	push   esi
c001cec8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cecc:	52                   	push   edx
c001cecd:	50                   	push   eax
c001cece:	53                   	push   ebx
c001cecf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ced2:	83 c4 14             	add    esp,0x14
c001ced5:	53                   	push   ebx
c001ced6:	e8 0f 60 ff ff       	call   c0012eea <File::close()>
c001cedb:	5d                   	pop    ebp
c001cedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cee0:	e8 b7 29 ff ff       	call   c000f89c <free>
c001cee5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cee8:	e8 af 29 ff ff       	call   c000f89c <free>
c001ceed:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c001cef2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cef6:	8d 50 01             	lea    edx,[eax+0x1]
c001cef9:	89 0c 85 40 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8c0],ecx
c001cf00:	89 34 85 c0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd940],esi
c001cf07:	89 15 c0 27 03 c0    	mov    DWORD PTR ds:0xc00327c0,edx
c001cf0d:	83 c4 10             	add    esp,0x10
c001cf10:	b0 01                	mov    al,0x1
c001cf12:	83 c4 5c             	add    esp,0x5c
c001cf15:	5b                   	pop    ebx
c001cf16:	5e                   	pop    esi
c001cf17:	5f                   	pop    edi
c001cf18:	5d                   	pop    ebp
c001cf19:	c3                   	ret    

c001cf1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf1a:	55                   	push   ebp
c001cf1b:	57                   	push   edi
c001cf1c:	56                   	push   esi
c001cf1d:	53                   	push   ebx
c001cf1e:	81 ec 68 03 00 00    	sub    esp,0x368
c001cf24:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cf2b:	8b 1d 10 28 03 c0    	mov    ebx,DWORD PTR ds:0xc0032810
c001cf31:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cf35:	68 14 01 00 00       	push   0x114
c001cf3a:	e8 4d 29 ff ff       	call   c000f88c <malloc>
c001cf3f:	83 c4 0c             	add    esp,0xc
c001cf42:	89 c5                	mov    ebp,eax
c001cf44:	53                   	push   ebx
c001cf45:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cf4c:	50                   	push   eax
c001cf4d:	e8 d6 5e ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c001cf52:	5e                   	pop    esi
c001cf53:	5f                   	pop    edi
c001cf54:	6a 01                	push   0x1
c001cf56:	55                   	push   ebp
c001cf57:	e8 30 5f ff ff       	call   c0012e8c <File::open(FileOpenMode)>
c001cf5c:	83 c4 10             	add    esp,0x10
c001cf5f:	85 c0                	test   eax,eax
c001cf61:	0f 85 a7 06 00 00    	jne    c001d60e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf67:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cf6f:	83 ec 0c             	sub    esp,0xc
c001cf72:	6a 34                	push   0x34
c001cf74:	e8 13 29 ff ff       	call   c000f88c <malloc>
c001cf79:	5b                   	pop    ebx
c001cf7a:	89 c7                	mov    edi,eax
c001cf7c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cf80:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf83:	53                   	push   ebx
c001cf84:	57                   	push   edi
c001cf85:	6a 00                	push   0x0
c001cf87:	6a 34                	push   0x34
c001cf89:	55                   	push   ebp
c001cf8a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf8d:	83 c4 20             	add    esp,0x20
c001cf90:	85 c0                	test   eax,eax
c001cf92:	0f 85 76 06 00 00    	jne    c001d60e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf98:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cf9e:	0f 85 6a 06 00 00    	jne    c001d60e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfa4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cfa7:	85 c0                	test   eax,eax
c001cfa9:	0f 84 5f 06 00 00    	je     c001d60e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfaf:	31 d2                	xor    edx,edx
c001cfb1:	51                   	push   ecx
c001cfb2:	52                   	push   edx
c001cfb3:	50                   	push   eax
c001cfb4:	55                   	push   ebp
c001cfb5:	e8 90 5f ff ff       	call   c0012f4a <File::seek(unsigned long long)>
c001cfba:	83 c4 10             	add    esp,0x10
c001cfbd:	85 c0                	test   eax,eax
c001cfbf:	0f 85 49 06 00 00    	jne    c001d60e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfc5:	83 ec 0c             	sub    esp,0xc
c001cfc8:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cfcb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cfcf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cfd3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfd7:	0f af c2             	imul   eax,edx
c001cfda:	50                   	push   eax
c001cfdb:	e8 ac 28 ff ff       	call   c000f88c <malloc>
c001cfe0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cfe3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cfe7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfee:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cff2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cff6:	0f af c2             	imul   eax,edx
c001cff9:	99                   	cdq    
c001cffa:	52                   	push   edx
c001cffb:	50                   	push   eax
c001cffc:	55                   	push   ebp
c001cffd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d000:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d003:	83 c4 20             	add    esp,0x20
c001d006:	85 c0                	test   eax,eax
c001d008:	0f 84 00 06 00 00    	je     c001d60e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d00e:	52                   	push   edx
c001d00f:	31 d2                	xor    edx,edx
c001d011:	52                   	push   edx
c001d012:	50                   	push   eax
c001d013:	55                   	push   ebp
c001d014:	e8 31 5f ff ff       	call   c0012f4a <File::seek(unsigned long long)>
c001d019:	83 c4 10             	add    esp,0x10
c001d01c:	85 c0                	test   eax,eax
c001d01e:	0f 85 ea 05 00 00    	jne    c001d60e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d024:	83 ec 0c             	sub    esp,0xc
c001d027:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d02b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d02f:	31 f6                	xor    esi,esi
c001d031:	0f af c2             	imul   eax,edx
c001d034:	50                   	push   eax
c001d035:	e8 52 28 ff ff       	call   c000f88c <malloc>
c001d03a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d03d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d041:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d044:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d048:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d04c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d050:	0f af c2             	imul   eax,edx
c001d053:	99                   	cdq    
c001d054:	52                   	push   edx
c001d055:	50                   	push   eax
c001d056:	55                   	push   ebp
c001d057:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d05a:	83 c4 20             	add    esp,0x20
c001d05d:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d061:	0f 86 8a 00 00 00    	jbe    c001d0f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d067:	0f b7 de             	movzx  ebx,si
c001d06a:	c1 e3 05             	shl    ebx,0x5
c001d06d:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d071:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d074:	75 75                	jne    c001d0eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d076:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d079:	31 d2                	xor    edx,edx
c001d07b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d07f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d082:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d086:	50                   	push   eax
c001d087:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d08a:	52                   	push   edx
c001d08b:	50                   	push   eax
c001d08c:	55                   	push   ebp
c001d08d:	e8 b8 5e ff ff       	call   c0012f4a <File::seek(unsigned long long)>
c001d092:	83 c4 10             	add    esp,0x10
c001d095:	85 c0                	test   eax,eax
c001d097:	0f 85 71 05 00 00    	jne    c001d60e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d09d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d0a4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0a7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d0ab:	31 d2                	xor    edx,edx
c001d0ad:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d0b1:	83 ec 0c             	sub    esp,0xc
c001d0b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d0b8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0bf:	50                   	push   eax
c001d0c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0c8:	52                   	push   edx
c001d0c9:	50                   	push   eax
c001d0ca:	55                   	push   ebp
c001d0cb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0ce:	83 c4 1c             	add    esp,0x1c
c001d0d1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d0d4:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d0d7:	50                   	push   eax
c001d0d8:	6a 00                	push   0x0
c001d0da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0de:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d0e2:	50                   	push   eax
c001d0e3:	e8 68 36 fe ff       	call   c0000750 <memset>
c001d0e8:	83 c4 10             	add    esp,0x10
c001d0eb:	46                   	inc    esi
c001d0ec:	e9 6c ff ff ff       	jmp    c001d05d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d0f1:	53                   	push   ebx
c001d0f2:	31 db                	xor    ebx,ebx
c001d0f4:	68 00 01 00 00       	push   0x100
c001d0f9:	6a 00                	push   0x0
c001d0fb:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d0ff:	50                   	push   eax
c001d100:	e8 4b 36 fe ff       	call   c0000750 <memset>
c001d105:	83 c4 0c             	add    esp,0xc
c001d108:	68 00 01 00 00       	push   0x100
c001d10d:	6a 00                	push   0x0
c001d10f:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d116:	50                   	push   eax
c001d117:	e8 34 36 fe ff       	call   c0000750 <memset>
c001d11c:	83 c4 10             	add    esp,0x10
c001d11f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d127:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d12f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d137:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d13f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d147:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d14b:	0f 86 30 01 00 00    	jbe    c001d281 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d151:	0f b7 f3             	movzx  esi,bx
c001d154:	6b f6 28             	imul   esi,esi,0x28
c001d157:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d15b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d15e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d162:	52                   	push   edx
c001d163:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d167:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d16b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d16d:	6b d2 28             	imul   edx,edx,0x28
c001d170:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d174:	31 d2                	xor    edx,edx
c001d176:	52                   	push   edx
c001d177:	50                   	push   eax
c001d178:	55                   	push   ebp
c001d179:	e8 cc 5d ff ff       	call   c0012f4a <File::seek(unsigned long long)>
c001d17e:	83 c4 0c             	add    esp,0xc
c001d181:	6a 20                	push   0x20
c001d183:	6a 00                	push   0x0
c001d185:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d18c:	51                   	push   ecx
c001d18d:	e8 be 35 fe ff       	call   c0000750 <memset>
c001d192:	59                   	pop    ecx
c001d193:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d196:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d19a:	52                   	push   edx
c001d19b:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d1a2:	51                   	push   ecx
c001d1a3:	6a 00                	push   0x0
c001d1a5:	6a 1f                	push   0x1f
c001d1a7:	55                   	push   ebp
c001d1a8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d1ab:	83 c4 1c             	add    esp,0x1c
c001d1ae:	6a 09                	push   0x9
c001d1b0:	68 14 ca 02 c0       	push   0xc002ca14
c001d1b5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1bc:	51                   	push   ecx
c001d1bd:	e8 8a 34 fe ff       	call   c000064c <memcmp>
c001d1c2:	83 c4 10             	add    esp,0x10
c001d1c5:	85 c0                	test   eax,eax
c001d1c7:	75 21                	jne    c001d1ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d1c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1d1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d1d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1dc:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d1e3:	89 d0                	mov    eax,edx
c001d1e5:	40                   	inc    eax
c001d1e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1ea:	50                   	push   eax
c001d1eb:	6a 09                	push   0x9
c001d1ed:	68 1e ca 02 c0       	push   0xc002ca1e
c001d1f2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1f9:	50                   	push   eax
c001d1fa:	e8 4d 34 fe ff       	call   c000064c <memcmp>
c001d1ff:	83 c4 10             	add    esp,0x10
c001d202:	85 c0                	test   eax,eax
c001d204:	75 21                	jne    c001d227 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d20a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d20e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d212:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d216:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d219:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d220:	89 d0                	mov    eax,edx
c001d222:	40                   	inc    eax
c001d223:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d227:	50                   	push   eax
c001d228:	50                   	push   eax
c001d229:	68 ea c9 02 c0       	push   0xc002c9ea
c001d22e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d235:	50                   	push   eax
c001d236:	e8 5d 36 fe ff       	call   c0000898 <strcmp>
c001d23b:	83 c4 10             	add    esp,0x10
c001d23e:	85 c0                	test   eax,eax
c001d240:	75 0f                	jne    c001d251 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d242:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d245:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d249:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d24d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d251:	50                   	push   eax
c001d252:	50                   	push   eax
c001d253:	68 f2 c9 02 c0       	push   0xc002c9f2
c001d258:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d25f:	50                   	push   eax
c001d260:	e8 33 36 fe ff       	call   c0000898 <strcmp>
c001d265:	83 c4 10             	add    esp,0x10
c001d268:	85 c0                	test   eax,eax
c001d26a:	75 0f                	jne    c001d27b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d26c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d26f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d277:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d27b:	43                   	inc    ebx
c001d27c:	e9 c6 fe ff ff       	jmp    c001d147 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d281:	31 d2                	xor    edx,edx
c001d283:	50                   	push   eax
c001d284:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d288:	52                   	push   edx
c001d289:	50                   	push   eax
c001d28a:	55                   	push   ebp
c001d28b:	e8 ba 5c ff ff       	call   c0012f4a <File::seek(unsigned long long)>
c001d290:	58                   	pop    eax
c001d291:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d295:	e8 f2 25 ff ff       	call   c000f88c <malloc>
c001d29a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d29d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d2a1:	31 d2                	xor    edx,edx
c001d2a3:	58                   	pop    eax
c001d2a4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d2a8:	53                   	push   ebx
c001d2a9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d2ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2b1:	52                   	push   edx
c001d2b2:	50                   	push   eax
c001d2b3:	55                   	push   ebp
c001d2b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2b7:	83 c4 14             	add    esp,0x14
c001d2ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2be:	e8 c9 25 ff ff       	call   c000f88c <malloc>
c001d2c3:	31 d2                	xor    edx,edx
c001d2c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d2c9:	83 c4 0c             	add    esp,0xc
c001d2cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2d0:	52                   	push   edx
c001d2d1:	50                   	push   eax
c001d2d2:	55                   	push   ebp
c001d2d3:	e8 72 5c ff ff       	call   c0012f4a <File::seek(unsigned long long)>
c001d2d8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2db:	31 d2                	xor    edx,edx
c001d2dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d2e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d2e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d2e8:	52                   	push   edx
c001d2e9:	50                   	push   eax
c001d2ea:	55                   	push   ebp
c001d2eb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2ee:	83 c4 20             	add    esp,0x20
c001d2f1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d2f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d2fd:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d301:	0f 84 0b 03 00 00    	je     c001d612 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d307:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d30e:	31 d2                	xor    edx,edx
c001d310:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d314:	c1 e8 03             	shr    eax,0x3
c001d317:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d31b:	51                   	push   ecx
c001d31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d320:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d324:	52                   	push   edx
c001d325:	50                   	push   eax
c001d326:	55                   	push   ebp
c001d327:	e8 1e 5c ff ff       	call   c0012f4a <File::seek(unsigned long long)>
c001d32c:	5b                   	pop    ebx
c001d32d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d331:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d338:	e8 4f 25 ff ff       	call   c000f88c <malloc>
c001d33d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d340:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d344:	31 d2                	xor    edx,edx
c001d346:	5e                   	pop    esi
c001d347:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d34b:	50                   	push   eax
c001d34c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d350:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d354:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d35b:	52                   	push   edx
c001d35c:	50                   	push   eax
c001d35d:	55                   	push   ebp
c001d35e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d361:	83 c4 20             	add    esp,0x20
c001d364:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d36c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d370:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d374:	0f 8d 7c 02 00 00    	jge    c001d5f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d37a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d37e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d382:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d387:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d38a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d38e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d392:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d396:	89 d8                	mov    eax,ebx
c001d398:	c1 e8 08             	shr    eax,0x8
c001d39b:	89 c6                	mov    esi,eax
c001d39d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d3a1:	c1 e6 04             	shl    esi,0x4
c001d3a4:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d3a8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d3ab:	85 d2                	test   edx,edx
c001d3ad:	0f 85 bf 00 00 00    	jne    c001d472 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3b3:	83 ec 0c             	sub    esp,0xc
c001d3b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3ba:	03 06                	add    eax,DWORD PTR [esi]
c001d3bc:	50                   	push   eax
c001d3bd:	e8 4b f8 ff ff       	call   c001cc0d <Thr::getAddressOfKernelSymbol(char const*)>
c001d3c2:	83 c4 10             	add    esp,0x10
c001d3c5:	89 c2                	mov    edx,eax
c001d3c7:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d3cc:	85 c0                	test   eax,eax
c001d3ce:	0f 85 9e 00 00 00    	jne    c001d472 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3d4:	83 ec 0c             	sub    esp,0xc
c001d3d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3db:	03 06                	add    eax,DWORD PTR [esi]
c001d3dd:	50                   	push   eax
c001d3de:	e8 5c 11 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001d3e3:	83 c4 10             	add    esp,0x10
c001d3e6:	89 c2                	mov    edx,eax
c001d3e8:	85 c0                	test   eax,eax
c001d3ea:	0f 85 82 00 00 00    	jne    c001d472 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3f0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d3f4:	50                   	push   eax
c001d3f5:	50                   	push   eax
c001d3f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3fa:	03 06                	add    eax,DWORD PTR [esi]
c001d3fc:	50                   	push   eax
c001d3fd:	68 28 ca 02 c0       	push   0xc002ca28
c001d402:	e8 c2 54 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001d407:	58                   	pop    eax
c001d408:	5a                   	pop    edx
c001d409:	68 42 ca 02 c0       	push   0xc002ca42
c001d40e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d415:	50                   	push   eax
c001d416:	e8 f1 33 fe ff       	call   c000080c <strcpy>
c001d41b:	59                   	pop    ecx
c001d41c:	58                   	pop    eax
c001d41d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d421:	03 06                	add    eax,DWORD PTR [esi]
c001d423:	50                   	push   eax
c001d424:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d42b:	50                   	push   eax
c001d42c:	e8 1b 35 fe ff       	call   c000094c <strcat>
c001d431:	58                   	pop    eax
c001d432:	5a                   	pop    edx
c001d433:	68 d8 ca 02 c0       	push   0xc002cad8
c001d438:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d43f:	50                   	push   eax
c001d440:	e8 07 35 fe ff       	call   c000094c <strcat>
c001d445:	83 c4 10             	add    esp,0x10
c001d448:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d44d:	0f 84 5d 01 00 00    	je     c001d5b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d453:	83 ec 0c             	sub    esp,0xc
c001d456:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d45d:	50                   	push   eax
c001d45e:	e8 9c ce ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001d463:	83 c4 10             	add    esp,0x10
c001d466:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d46a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d46e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d472:	80 fb 01             	cmp    bl,0x1
c001d475:	0f 85 88 00 00 00    	jne    c001d503 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d47b:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d482:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d486:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d48a:	01 ce                	add    esi,ecx
c001d48c:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d492:	0f 94 c0             	sete   al
c001d495:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d49b:	0f 94 c3             	sete   bl
c001d49e:	09 c3                	or     ebx,eax
c001d4a0:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4a2:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d4a7:	74 41                	je     c001d4ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d4a9:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d4ac:	84 db                	test   bl,bl
c001d4ae:	75 15                	jne    c001d4c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d4b0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4b4:	66 83 f8 0c          	cmp    ax,0xc
c001d4b8:	76 05                	jbe    c001d4bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d4ba:	b8 0c 00 00 00       	mov    eax,0xc
c001d4bf:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4c3:	76 37                	jbe    c001d4fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d4c5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d4c9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4ce:	0f 84 dc 00 00 00    	je     c001d5b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d4d4:	83 ec 0c             	sub    esp,0xc
c001d4d7:	68 59 ca 02 c0       	push   0xc002ca59
c001d4dc:	e8 1e ce ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001d4e1:	83 c4 10             	add    esp,0x10
c001d4e4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d4e8:	eb 12                	jmp    c001d4fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d4ea:	01 c1                	add    ecx,eax
c001d4ec:	84 db                	test   bl,bl
c001d4ee:	75 0c                	jne    c001d4fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d4f0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4f4:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4f8:	77 02                	ja     c001d4fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d4fa:	01 d1                	add    ecx,edx
c001d4fc:	89 0e                	mov    DWORD PTR [esi],ecx
c001d4fe:	e9 ea 00 00 00       	jmp    c001d5ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d503:	80 fb 02             	cmp    bl,0x2
c001d506:	75 7c                	jne    c001d584 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d508:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d50f:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d513:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d517:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d51d:	74 20                	je     c001d53f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d51f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d525:	74 18                	je     c001d53f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d527:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d52b:	b9 0a 00 00 00       	mov    ecx,0xa
c001d530:	66 83 f8 0e          	cmp    ax,0xe
c001d534:	77 03                	ja     c001d539 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d536:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d539:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d53d:	76 1f                	jbe    c001d55e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d53f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d543:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d548:	74 66                	je     c001d5b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d54a:	83 ec 0c             	sub    esp,0xc
c001d54d:	68 75 ca 02 c0       	push   0xc002ca75
c001d552:	e8 a8 cd ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001d557:	83 c4 10             	add    esp,0x10
c001d55a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d55e:	8b 06                	mov    eax,DWORD PTR [esi]
c001d560:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d565:	74 13                	je     c001d57a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d567:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d56b:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d572:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d576:	01 c8                	add    eax,ecx
c001d578:	eb 04                	jmp    c001d57e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d57a:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d57e:	01 c2                	add    edx,eax
c001d580:	89 16                	mov    DWORD PTR [esi],edx
c001d582:	eb 69                	jmp    c001d5ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d584:	0f b6 db             	movzx  ebx,bl
c001d587:	50                   	push   eax
c001d588:	50                   	push   eax
c001d589:	53                   	push   ebx
c001d58a:	68 91 ca 02 c0       	push   0xc002ca91
c001d58f:	e8 35 53 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001d594:	83 c4 10             	add    esp,0x10
c001d597:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d59c:	74 12                	je     c001d5b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d59e:	83 ec 0c             	sub    esp,0xc
c001d5a1:	68 9c ca 02 c0       	push   0xc002ca9c
c001d5a6:	e8 54 cd ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001d5ab:	83 c4 10             	add    esp,0x10
c001d5ae:	eb 3d                	jmp    c001d5ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d5b0:	83 ec 0c             	sub    esp,0xc
c001d5b3:	55                   	push   ebp
c001d5b4:	e8 31 59 ff ff       	call   c0012eea <File::close()>
c001d5b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5bc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5c2:	59                   	pop    ecx
c001d5c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5c7:	e8 d0 22 ff ff       	call   c000f89c <free>
c001d5cc:	5b                   	pop    ebx
c001d5cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d5d1:	e8 c6 22 ff ff       	call   c000f89c <free>
c001d5d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5d9:	e8 be 22 ff ff       	call   c000f89c <free>
c001d5de:	5e                   	pop    esi
c001d5df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5e3:	e8 b4 22 ff ff       	call   c000f89c <free>
c001d5e8:	83 c4 10             	add    esp,0x10
c001d5eb:	eb 21                	jmp    c001d60e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5ed:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d5f1:	e9 76 fd ff ff       	jmp    c001d36c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d5f6:	83 ec 0c             	sub    esp,0xc
c001d5f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5fd:	e8 9a 22 ff ff       	call   c000f89c <free>
c001d602:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d606:	83 c4 10             	add    esp,0x10
c001d609:	e9 eb fc ff ff       	jmp    c001d2f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d60e:	31 c0                	xor    eax,eax
c001d610:	eb 33                	jmp    c001d645 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d612:	83 ec 0c             	sub    esp,0xc
c001d615:	55                   	push   ebp
c001d616:	e8 cf 58 ff ff       	call   c0012eea <File::close()>
c001d61b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d61e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d621:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d624:	58                   	pop    eax
c001d625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d629:	e8 6e 22 ff ff       	call   c000f89c <free>
c001d62e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d631:	e8 66 22 ff ff       	call   c000f89c <free>
c001d636:	5a                   	pop    edx
c001d637:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d63b:	e8 5c 22 ff ff       	call   c000f89c <free>
c001d640:	83 c4 10             	add    esp,0x10
c001d643:	b0 01                	mov    al,0x1
c001d645:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d64b:	5b                   	pop    ebx
c001d64c:	5e                   	pop    esi
c001d64d:	5f                   	pop    edi
c001d64e:	5d                   	pop    ebp
c001d64f:	c3                   	ret    

c001d650 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d650:	56                   	push   esi
c001d651:	31 d2                	xor    edx,edx
c001d653:	53                   	push   ebx
c001d654:	8b 1d 20 20 03 c0    	mov    ebx,DWORD PTR ds:0xc0032020
c001d65a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d65e:	39 d3                	cmp    ebx,edx
c001d660:	7e 1b                	jle    c001d67d <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d662:	8b 04 95 40 22 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcddc0]
c001d669:	39 c8                	cmp    eax,ecx
c001d66b:	77 0d                	ja     c001d67a <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d66d:	8b 34 95 40 20 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcdfc0]
c001d674:	01 c6                	add    esi,eax
c001d676:	39 ce                	cmp    esi,ecx
c001d678:	77 05                	ja     c001d67f <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d67a:	42                   	inc    edx
c001d67b:	eb e1                	jmp    c001d65e <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d67d:	31 c0                	xor    eax,eax
c001d67f:	5b                   	pop    ebx
c001d680:	5e                   	pop    esi
c001d681:	c3                   	ret    

c001d682 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d682:	53                   	push   ebx
c001d683:	31 c0                	xor    eax,eax
c001d685:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d689:	8b 1d 20 20 03 c0    	mov    ebx,DWORD PTR ds:0xc0032020
c001d68f:	39 c3                	cmp    ebx,eax
c001d691:	7e 22                	jle    c001d6b5 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d693:	8b 14 85 40 22 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcddc0]
c001d69a:	39 ca                	cmp    edx,ecx
c001d69c:	77 14                	ja     c001d6b2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d69e:	03 14 85 40 20 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcdfc0]
c001d6a5:	39 ca                	cmp    edx,ecx
c001d6a7:	76 09                	jbe    c001d6b2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6a9:	8b 04 85 40 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdbc0]
c001d6b0:	eb 05                	jmp    c001d6b7 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d6b2:	40                   	inc    eax
c001d6b3:	eb da                	jmp    c001d68f <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d6b5:	31 c0                	xor    eax,eax
c001d6b7:	5b                   	pop    ebx
c001d6b8:	c3                   	ret    

c001d6b9 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d6b9:	53                   	push   ebx
c001d6ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d6be:	53                   	push   ebx
c001d6bf:	e8 8c ff ff ff       	call   c001d650 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d6c4:	5a                   	pop    edx
c001d6c5:	31 d2                	xor    edx,edx
c001d6c7:	85 c0                	test   eax,eax
c001d6c9:	74 04                	je     c001d6cf <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d6cb:	89 da                	mov    edx,ebx
c001d6cd:	29 c2                	sub    edx,eax
c001d6cf:	89 d0                	mov    eax,edx
c001d6d1:	5b                   	pop    ebx
c001d6d2:	c3                   	ret    

c001d6d3 <Thr::loadDLL(char const*, bool)>:
c001d6d3:	55                   	push   ebp
c001d6d4:	57                   	push   edi
c001d6d5:	56                   	push   esi
c001d6d6:	53                   	push   ebx
c001d6d7:	81 ec 34 01 00 00    	sub    esp,0x134
c001d6dd:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d6e4:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d6eb:	56                   	push   esi
c001d6ec:	68 b4 ca 02 c0       	push   0xc002cab4
c001d6f1:	e8 d3 51 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001d6f6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d6fd:	e8 8a 21 ff ff       	call   c000f88c <malloc>
c001d702:	83 c4 0c             	add    esp,0xc
c001d705:	89 c3                	mov    ebx,eax
c001d707:	ff 35 10 28 03 c0    	push   DWORD PTR ds:0xc0032810
c001d70d:	56                   	push   esi
c001d70e:	50                   	push   eax
c001d70f:	e8 14 57 ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c001d714:	83 c4 10             	add    esp,0x10
c001d717:	85 db                	test   ebx,ebx
c001d719:	75 3c                	jne    c001d757 <Thr::loadDLL(char const*, bool)+0x84>
c001d71b:	89 f8                	mov    eax,edi
c001d71d:	84 c0                	test   al,al
c001d71f:	0f 84 cc 01 00 00    	je     c001d8f1 <Thr::loadDLL(char const*, bool)+0x21e>
c001d725:	55                   	push   ebp
c001d726:	55                   	push   ebp
c001d727:	68 c5 ca 02 c0       	push   0xc002cac5
c001d72c:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d730:	55                   	push   ebp
c001d731:	e8 d6 30 fe ff       	call   c000080c <strcpy>
c001d736:	58                   	pop    eax
c001d737:	5a                   	pop    edx
c001d738:	56                   	push   esi
c001d739:	55                   	push   ebp
c001d73a:	e8 0d 32 fe ff       	call   c000094c <strcat>
c001d73f:	59                   	pop    ecx
c001d740:	58                   	pop    eax
c001d741:	68 d8 ca 02 c0       	push   0xc002cad8
c001d746:	55                   	push   ebp
c001d747:	e8 00 32 fe ff       	call   c000094c <strcat>
c001d74c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d74f:	e8 ab cb ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001d754:	83 c4 10             	add    esp,0x10
c001d757:	51                   	push   ecx
c001d758:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d75c:	50                   	push   eax
c001d75d:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d761:	50                   	push   eax
c001d762:	53                   	push   ebx
c001d763:	e8 d0 59 ff ff       	call   c0013138 <File::stat(unsigned long long*, bool*)>
c001d768:	83 c4 10             	add    esp,0x10
c001d76b:	85 db                	test   ebx,ebx
c001d76d:	74 0c                	je     c001d77b <Thr::loadDLL(char const*, bool)+0xa8>
c001d76f:	83 ec 0c             	sub    esp,0xc
c001d772:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d774:	53                   	push   ebx
c001d775:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d778:	83 c4 10             	add    esp,0x10
c001d77b:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d780:	75 0a                	jne    c001d78c <Thr::loadDLL(char const*, bool)+0xb9>
c001d782:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d786:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d78a:	75 3c                	jne    c001d7c8 <Thr::loadDLL(char const*, bool)+0xf5>
c001d78c:	89 f8                	mov    eax,edi
c001d78e:	84 c0                	test   al,al
c001d790:	0f 84 43 01 00 00    	je     c001d8d9 <Thr::loadDLL(char const*, bool)+0x206>
c001d796:	51                   	push   ecx
c001d797:	51                   	push   ecx
c001d798:	68 c5 ca 02 c0       	push   0xc002cac5
c001d79d:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d7a1:	53                   	push   ebx
c001d7a2:	e8 65 30 fe ff       	call   c000080c <strcpy>
c001d7a7:	5d                   	pop    ebp
c001d7a8:	58                   	pop    eax
c001d7a9:	56                   	push   esi
c001d7aa:	53                   	push   ebx
c001d7ab:	e8 9c 31 fe ff       	call   c000094c <strcat>
c001d7b0:	58                   	pop    eax
c001d7b1:	5a                   	pop    edx
c001d7b2:	68 d8 ca 02 c0       	push   0xc002cad8
c001d7b7:	53                   	push   ebx
c001d7b8:	e8 8f 31 fe ff       	call   c000094c <strcat>
c001d7bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7c0:	e8 3a cb ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001d7c5:	83 c4 10             	add    esp,0x10
c001d7c8:	52                   	push   edx
c001d7c9:	6a 03                	push   0x3
c001d7cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d7d3:	05 ff 0f 00 00       	add    eax,0xfff
c001d7d8:	83 d2 00             	adc    edx,0x0
c001d7db:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d7df:	50                   	push   eax
c001d7e0:	ff 35 30 f4 02 c0    	push   DWORD PTR ds:0xc002f430
c001d7e6:	e8 11 46 ff ff       	call   c0011dfc <VAS::allocatePages(int, int)>
c001d7eb:	59                   	pop    ecx
c001d7ec:	89 c3                	mov    ebx,eax
c001d7ee:	5d                   	pop    ebp
c001d7ef:	50                   	push   eax
c001d7f0:	68 da ca 02 c0       	push   0xc002cada
c001d7f5:	e8 cf 50 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001d7fa:	89 34 24             	mov    DWORD PTR [esp],esi
c001d7fd:	e8 6a 2f fe ff       	call   c000076c <strlen>
c001d802:	8b 2d 20 20 03 c0    	mov    ebp,DWORD PTR ds:0xc0032020
c001d808:	40                   	inc    eax
c001d809:	89 04 24             	mov    DWORD PTR [esp],eax
c001d80c:	e8 7b 20 ff ff       	call   c000f88c <malloc>
c001d811:	89 04 ad 40 24 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcdbc0],eax
c001d818:	58                   	pop    eax
c001d819:	a1 20 20 03 c0       	mov    eax,ds:0xc0032020
c001d81e:	5a                   	pop    edx
c001d81f:	56                   	push   esi
c001d820:	ff 34 85 40 24 03 c0 	push   DWORD PTR [eax*4-0x3ffcdbc0]
c001d827:	e8 e0 2f fe ff       	call   c000080c <strcpy>
c001d82c:	a1 20 20 03 c0       	mov    eax,ds:0xc0032020
c001d831:	8d 50 01             	lea    edx,[eax+0x1]
c001d834:	89 1c 85 40 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcddc0],ebx
c001d83b:	89 15 20 20 03 c0    	mov    DWORD PTR ds:0xc0032020,edx
c001d841:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d845:	83 c4 0c             	add    esp,0xc
c001d848:	89 14 85 40 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdfc0],edx
c001d84f:	6a 01                	push   0x1
c001d851:	53                   	push   ebx
c001d852:	56                   	push   esi
c001d853:	e8 c2 f6 ff ff       	call   c001cf1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d858:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d85c:	83 c4 10             	add    esp,0x10
c001d85f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d864:	0f 85 83 00 00 00    	jne    c001d8ed <Thr::loadDLL(char const*, bool)+0x21a>
c001d86a:	89 f8                	mov    eax,edi
c001d86c:	84 c0                	test   al,al
c001d86e:	74 6d                	je     c001d8dd <Thr::loadDLL(char const*, bool)+0x20a>
c001d870:	83 ec 0c             	sub    esp,0xc
c001d873:	68 e7 ca 02 c0       	push   0xc002cae7
c001d878:	e8 82 ca ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001d87d:	83 c4 10             	add    esp,0x10
c001d880:	eb 5b                	jmp    c001d8dd <Thr::loadDLL(char const*, bool)+0x20a>
c001d882:	89 ee                	mov    esi,ebp
c001d884:	50                   	push   eax
c001d885:	c1 e6 0c             	shl    esi,0xc
c001d888:	50                   	push   eax
c001d889:	01 de                	add    esi,ebx
c001d88b:	56                   	push   esi
c001d88c:	ff 35 30 f4 02 c0    	push   DWORD PTR ds:0xc002f430
c001d892:	e8 cd 40 ff ff       	call   c0011964 <VAS::getPageTableEntry(unsigned long)>
c001d897:	83 c4 10             	add    esp,0x10
c001d89a:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d89d:	75 0c                	jne    c001d8ab <Thr::loadDLL(char const*, bool)+0x1d8>
c001d89f:	83 ec 0c             	sub    esp,0xc
c001d8a2:	56                   	push   esi
c001d8a3:	e8 87 22 ff ff       	call   c000fb2f <Phys::freePage(unsigned long)>
c001d8a8:	83 c4 10             	add    esp,0x10
c001d8ab:	45                   	inc    ebp
c001d8ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d8b4:	05 ff 0f 00 00       	add    eax,0xfff
c001d8b9:	bf 00 00 00 00       	mov    edi,0x0
c001d8be:	83 d2 00             	adc    edx,0x0
c001d8c1:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d8c5:	c1 ea 0c             	shr    edx,0xc
c001d8c8:	39 c5                	cmp    ebp,eax
c001d8ca:	89 d1                	mov    ecx,edx
c001d8cc:	89 f8                	mov    eax,edi
c001d8ce:	19 c8                	sbb    eax,ecx
c001d8d0:	72 b0                	jb     c001d882 <Thr::loadDLL(char const*, bool)+0x1af>
c001d8d2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d8d7:	75 18                	jne    c001d8f1 <Thr::loadDLL(char const*, bool)+0x21e>
c001d8d9:	31 db                	xor    ebx,ebx
c001d8db:	eb 14                	jmp    c001d8f1 <Thr::loadDLL(char const*, bool)+0x21e>
c001d8dd:	83 ec 0c             	sub    esp,0xc
c001d8e0:	68 06 cb 02 c0       	push   0xc002cb06
c001d8e5:	e8 15 ca ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001d8ea:	83 c4 10             	add    esp,0x10
c001d8ed:	31 ed                	xor    ebp,ebp
c001d8ef:	eb bb                	jmp    c001d8ac <Thr::loadDLL(char const*, bool)+0x1d9>
c001d8f1:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d8f7:	89 d8                	mov    eax,ebx
c001d8f9:	5b                   	pop    ebx
c001d8fa:	5e                   	pop    esi
c001d8fb:	5f                   	pop    edi
c001d8fc:	5d                   	pop    ebp
c001d8fd:	c3                   	ret    

c001d8fe <Thr::executeDLL(unsigned long, void*)>:
c001d8fe:	56                   	push   esi
c001d8ff:	53                   	push   ebx
c001d900:	52                   	push   edx
c001d901:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d905:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d909:	85 db                	test   ebx,ebx
c001d90b:	75 10                	jne    c001d91d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d90d:	83 ec 0c             	sub    esp,0xc
c001d910:	68 22 cb 02 c0       	push   0xc002cb22
c001d915:	e8 e5 c9 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001d91a:	83 c4 10             	add    esp,0x10
c001d91d:	50                   	push   eax
c001d91e:	50                   	push   eax
c001d91f:	53                   	push   ebx
c001d920:	68 4c cb 02 c0       	push   0xc002cb4c
c001d925:	e8 9f 4f ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001d92a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d92e:	89 d8                	mov    eax,ebx
c001d930:	83 c4 14             	add    esp,0x14
c001d933:	5b                   	pop    ebx
c001d934:	5e                   	pop    esi
c001d935:	ff e0                	jmp    eax
c001d937:	90                   	nop

c001d938 <userModeEntryPoint(void*)>:
c001d938:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001d93d:	48                   	dec    eax
c001d93e:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001d943:	75 01                	jne    c001d946 <userModeEntryPoint(void*)+0xe>
c001d945:	fb                   	sti    
c001d946:	fb                   	sti    
c001d947:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d94c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d94f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d955:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d959:	e9 cc 29 fe ff       	jmp    c000032a <goToUsermode>

c001d95e <changeTSS>:
c001d95e:	83 ec 14             	sub    esp,0x14
c001d961:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d966:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d969:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d96e:	c1 e2 15             	shl    edx,0x15
c001d971:	29 d0                	sub    eax,edx
c001d973:	50                   	push   eax
c001d974:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001d979:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d97f:	05 7c 11 00 00       	add    eax,0x117c
c001d984:	50                   	push   eax
c001d985:	e8 78 34 ff ff       	call   c0010e02 <TSS::setESP(unsigned long)>
c001d98a:	83 c4 1c             	add    esp,0x1c
c001d98d:	c3                   	ret    

c001d98e <switchToThread(ThreadControlBlock*)>:
c001d98e:	57                   	push   edi
c001d98f:	a1 e4 27 03 c0       	mov    eax,ds:0xc00327e4
c001d994:	56                   	push   esi
c001d995:	85 c0                	test   eax,eax
c001d997:	53                   	push   ebx
c001d998:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d99c:	0f 85 88 00 00 00    	jne    c001da2a <switchToThread(ThreadControlBlock*)+0x9c>
c001d9a2:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d9a5:	3c ff                	cmp    al,0xff
c001d9a7:	74 7d                	je     c001da26 <switchToThread(ThreadControlBlock*)+0x98>
c001d9a9:	0f b6 d0             	movzx  edx,al
c001d9ac:	b8 84 03 00 00       	mov    eax,0x384
c001d9b1:	29 d0                	sub    eax,edx
c001d9b3:	c1 e0 10             	shl    eax,0x10
c001d9b6:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d9b9:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d9bc:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001d9c1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9c7:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d9ce:	74 4a                	je     c001da1a <switchToThread(ThreadControlBlock*)+0x8c>
c001d9d0:	0f 31                	rdtsc  
c001d9d2:	a3 28 28 03 c0       	mov    ds:0xc0032828,eax
c001d9d7:	89 c6                	mov    esi,eax
c001d9d9:	89 d7                	mov    edi,edx
c001d9db:	2b 35 18 28 03 c0    	sub    esi,DWORD PTR ds:0xc0032818
c001d9e1:	89 15 2c 28 03 c0    	mov    DWORD PTR ds:0xc003282c,edx
c001d9e7:	1b 3d 1c 28 03 c0    	sbb    edi,DWORD PTR ds:0xc003281c
c001d9ed:	89 35 20 28 03 c0    	mov    DWORD PTR ds:0xc0032820,esi
c001d9f3:	a3 18 28 03 c0       	mov    ds:0xc0032818,eax
c001d9f8:	89 3d 24 28 03 c0    	mov    DWORD PTR ds:0xc0032824,edi
c001d9fe:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001da04:	89 15 1c 28 03 c0    	mov    DWORD PTR ds:0xc003281c,edx
c001da0a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001da0d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001da10:	01 c6                	add    esi,eax
c001da12:	11 d7                	adc    edi,edx
c001da14:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001da17:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001da1a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001da1e:	5b                   	pop    ebx
c001da1f:	5e                   	pop    esi
c001da20:	5f                   	pop    edi
c001da21:	e9 3c 29 fe ff       	jmp    c0000362 <switchToThreadASM>
c001da26:	31 c0                	xor    eax,eax
c001da28:	eb 8f                	jmp    c001d9b9 <switchToThread(ThreadControlBlock*)+0x2b>
c001da2a:	5b                   	pop    ebx
c001da2b:	c7 05 e0 27 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00327e0,0x1
c001da35:	5e                   	pop    esi
c001da36:	5f                   	pop    edi
c001da37:	c3                   	ret    

c001da38 <Process::addArgs(char**)>:
c001da38:	57                   	push   edi
c001da39:	56                   	push   esi
c001da3a:	53                   	push   ebx
c001da3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da3f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da43:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da4d:	85 ff                	test   edi,edi
c001da4f:	74 3d                	je     c001da8e <Process::addArgs(char**)+0x56>
c001da51:	8b 07                	mov    eax,DWORD PTR [edi]
c001da53:	85 c0                	test   eax,eax
c001da55:	74 37                	je     c001da8e <Process::addArgs(char**)+0x56>
c001da57:	31 db                	xor    ebx,ebx
c001da59:	83 ec 0c             	sub    esp,0xc
c001da5c:	50                   	push   eax
c001da5d:	e8 0a 2d fe ff       	call   c000076c <strlen>
c001da62:	40                   	inc    eax
c001da63:	89 04 24             	mov    DWORD PTR [esp],eax
c001da66:	e8 21 1e ff ff       	call   c000f88c <malloc>
c001da6b:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da72:	5a                   	pop    edx
c001da73:	59                   	pop    ecx
c001da74:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da77:	43                   	inc    ebx
c001da78:	50                   	push   eax
c001da79:	e8 8e 2d fe ff       	call   c000080c <strcpy>
c001da7e:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da84:	83 c4 10             	add    esp,0x10
c001da87:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da8a:	85 c0                	test   eax,eax
c001da8c:	75 cb                	jne    c001da59 <Process::addArgs(char**)+0x21>
c001da8e:	5b                   	pop    ebx
c001da8f:	5e                   	pop    esi
c001da90:	5f                   	pop    edi
c001da91:	c3                   	ret    

c001da92 <Process::Process(char const*, Process*, char**)>:
c001da92:	56                   	push   esi
c001da93:	53                   	push   ebx
c001da94:	83 ec 14             	sub    esp,0x14
c001da97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da9b:	05 0c 02 00 00       	add    eax,0x20c
c001daa0:	bb 07 00 00 00       	mov    ebx,0x7
c001daa5:	89 c6                	mov    esi,eax
c001daa7:	85 db                	test   ebx,ebx
c001daa9:	78 12                	js     c001dabd <Process::Process(char const*, Process*, char**)+0x2b>
c001daab:	83 ec 0c             	sub    esp,0xc
c001daae:	56                   	push   esi
c001daaf:	e8 de ba 00 00       	call   c0029592 <ThreadControlBlock::ThreadControlBlock()>
c001dab4:	83 c4 10             	add    esp,0x10
c001dab7:	83 c6 63             	add    esi,0x63
c001daba:	4b                   	dec    ebx
c001dabb:	eb ea                	jmp    c001daa7 <Process::Process(char const*, Process*, char**)+0x15>
c001dabd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac1:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dac8:	83 ec 0c             	sub    esp,0xc
c001dacb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dacf:	e8 84 c6 ff ff       	call   c001a158 <Krnl::newProcessEnv(Process*)>
c001dad4:	83 c4 10             	add    esp,0x10
c001dad7:	89 c2                	mov    edx,eax
c001dad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dadd:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dae7:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001daf0:	a1 50 e8 02 c0       	mov    eax,ds:0xc002e850
c001daf5:	8d 50 01             	lea    edx,[eax+0x1]
c001daf8:	89 15 50 e8 02 c0    	mov    DWORD PTR ds:0xc002e850,edx
c001dafe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db02:	89 02                	mov    DWORD PTR [edx],eax
c001db04:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001db0c:	83 ec 0c             	sub    esp,0xc
c001db0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db13:	e8 74 1d ff ff       	call   c000f88c <malloc>
c001db18:	83 c4 10             	add    esp,0x10
c001db1b:	89 c3                	mov    ebx,eax
c001db1d:	83 ec 08             	sub    esp,0x8
c001db20:	6a 00                	push   0x0
c001db22:	53                   	push   ebx
c001db23:	e8 7c 46 ff ff       	call   c00121a4 <VAS::VAS(bool)>
c001db28:	83 c4 10             	add    esp,0x10
c001db2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db2f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db39:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db47:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db4b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db55:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db5b:	85 c0                	test   eax,eax
c001db5d:	74 42                	je     c001dba1 <Process::Process(char const*, Process*, char**)+0x10f>
c001db5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db63:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db69:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db73:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db7d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db83:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db8d:	05 0c 01 00 00       	add    eax,0x10c
c001db92:	83 ec 08             	sub    esp,0x8
c001db95:	52                   	push   edx
c001db96:	50                   	push   eax
c001db97:	e8 70 2c fe ff       	call   c000080c <strcpy>
c001db9c:	83 c4 10             	add    esp,0x10
c001db9f:	eb 63                	jmp    c001dc04 <Process::Process(char const*, Process*, char**)+0x172>
c001dba1:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001dba9:	83 ec 0c             	sub    esp,0xc
c001dbac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dbb0:	e8 d7 1c ff ff       	call   c000f88c <malloc>
c001dbb5:	83 c4 10             	add    esp,0x10
c001dbb8:	89 c3                	mov    ebx,eax
c001dbba:	83 ec 08             	sub    esp,0x8
c001dbbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbc1:	53                   	push   ebx
c001dbc2:	e8 1d 2f ff ff       	call   c0010ae4 <VgaText::VgaText(char const*)>
c001dbc7:	83 c4 10             	add    esp,0x10
c001dbca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbce:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dbd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbd8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dbde:	83 ec 0c             	sub    esp,0xc
c001dbe1:	50                   	push   eax
c001dbe2:	e8 04 26 ff ff       	call   c00101eb <addToTerminalCycle(VgaText*)>
c001dbe7:	83 c4 10             	add    esp,0x10
c001dbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbee:	05 0c 01 00 00       	add    eax,0x10c
c001dbf3:	83 ec 08             	sub    esp,0x8
c001dbf6:	68 6b cb 02 c0       	push   0xc002cb6b
c001dbfb:	50                   	push   eax
c001dbfc:	e8 0b 2c fe ff       	call   c000080c <strcpy>
c001dc01:	83 c4 10             	add    esp,0x10
c001dc04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc08:	83 c0 0c             	add    eax,0xc
c001dc0b:	83 ec 08             	sub    esp,0x8
c001dc0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc12:	50                   	push   eax
c001dc13:	e8 f4 2b fe ff       	call   c000080c <strcpy>
c001dc18:	83 c4 10             	add    esp,0x10
c001dc1b:	83 ec 08             	sub    esp,0x8
c001dc1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc26:	e8 0d fe ff ff       	call   c001da38 <Process::addArgs(char**)>
c001dc2b:	83 c4 10             	add    esp,0x10
c001dc2e:	83 ec 08             	sub    esp,0x8
c001dc31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc39:	e8 a6 ed ff ff       	call   c001c9e4 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc3e:	83 c4 10             	add    esp,0x10
c001dc41:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc45:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc49:	83 f0 01             	xor    eax,0x1
c001dc4c:	88 c2                	mov    dl,al
c001dc4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc52:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc58:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc5d:	83 ec 08             	sub    esp,0x8
c001dc60:	50                   	push   eax
c001dc61:	68 98 cc 02 c0       	push   0xc002cc98
c001dc66:	e8 5e 4c ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001dc6b:	83 c4 10             	add    esp,0x10
c001dc6e:	90                   	nop
c001dc6f:	83 c4 14             	add    esp,0x14
c001dc72:	5b                   	pop    ebx
c001dc73:	5e                   	pop    esi
c001dc74:	c3                   	ret    
c001dc75:	90                   	nop

c001dc76 <Process::Process(bool, char const*, Process*, char**)>:
c001dc76:	56                   	push   esi
c001dc77:	53                   	push   ebx
c001dc78:	83 ec 24             	sub    esp,0x24
c001dc7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc7f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc87:	05 0c 02 00 00       	add    eax,0x20c
c001dc8c:	bb 07 00 00 00       	mov    ebx,0x7
c001dc91:	89 c6                	mov    esi,eax
c001dc93:	85 db                	test   ebx,ebx
c001dc95:	78 12                	js     c001dca9 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc97:	83 ec 0c             	sub    esp,0xc
c001dc9a:	56                   	push   esi
c001dc9b:	e8 f2 b8 00 00       	call   c0029592 <ThreadControlBlock::ThreadControlBlock()>
c001dca0:	83 c4 10             	add    esp,0x10
c001dca3:	83 c6 63             	add    esi,0x63
c001dca6:	4b                   	dec    ebx
c001dca7:	eb ea                	jmp    c001dc93 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dca9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcad:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dcb4:	83 ec 0c             	sub    esp,0xc
c001dcb7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcbb:	e8 98 c4 ff ff       	call   c001a158 <Krnl::newProcessEnv(Process*)>
c001dcc0:	83 c4 10             	add    esp,0x10
c001dcc3:	89 c2                	mov    edx,eax
c001dcc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcc9:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd3:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dcdc:	a1 50 e8 02 c0       	mov    eax,ds:0xc002e850
c001dce1:	8d 50 01             	lea    edx,[eax+0x1]
c001dce4:	89 15 50 e8 02 c0    	mov    DWORD PTR ds:0xc002e850,edx
c001dcea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dcee:	89 02                	mov    DWORD PTR [edx],eax
c001dcf0:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dcf8:	83 ec 0c             	sub    esp,0xc
c001dcfb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dcff:	e8 88 1b ff ff       	call   c000f88c <malloc>
c001dd04:	83 c4 10             	add    esp,0x10
c001dd07:	89 c3                	mov    ebx,eax
c001dd09:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd0e:	83 ec 08             	sub    esp,0x8
c001dd11:	50                   	push   eax
c001dd12:	53                   	push   ebx
c001dd13:	e8 8c 44 ff ff       	call   c00121a4 <VAS::VAS(bool)>
c001dd18:	83 c4 10             	add    esp,0x10
c001dd1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd1f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd29:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd37:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd3b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd45:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd4b:	85 c0                	test   eax,eax
c001dd4d:	74 42                	je     c001dd91 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd53:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd59:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd63:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd6d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd73:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd7d:	05 0c 01 00 00       	add    eax,0x10c
c001dd82:	83 ec 08             	sub    esp,0x8
c001dd85:	52                   	push   edx
c001dd86:	50                   	push   eax
c001dd87:	e8 80 2a fe ff       	call   c000080c <strcpy>
c001dd8c:	83 c4 10             	add    esp,0x10
c001dd8f:	eb 63                	jmp    c001ddf4 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd91:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001dd99:	83 ec 0c             	sub    esp,0xc
c001dd9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dda0:	e8 e7 1a ff ff       	call   c000f88c <malloc>
c001dda5:	83 c4 10             	add    esp,0x10
c001dda8:	89 c3                	mov    ebx,eax
c001ddaa:	83 ec 08             	sub    esp,0x8
c001ddad:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddb1:	53                   	push   ebx
c001ddb2:	e8 2d 2d ff ff       	call   c0010ae4 <VgaText::VgaText(char const*)>
c001ddb7:	83 c4 10             	add    esp,0x10
c001ddba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddbe:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ddc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddc8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ddce:	83 ec 0c             	sub    esp,0xc
c001ddd1:	50                   	push   eax
c001ddd2:	e8 14 24 ff ff       	call   c00101eb <addToTerminalCycle(VgaText*)>
c001ddd7:	83 c4 10             	add    esp,0x10
c001ddda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddde:	05 0c 01 00 00       	add    eax,0x10c
c001dde3:	83 ec 08             	sub    esp,0x8
c001dde6:	68 6b cb 02 c0       	push   0xc002cb6b
c001ddeb:	50                   	push   eax
c001ddec:	e8 1b 2a fe ff       	call   c000080c <strcpy>
c001ddf1:	83 c4 10             	add    esp,0x10
c001ddf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddf8:	83 c0 0c             	add    eax,0xc
c001ddfb:	83 ec 08             	sub    esp,0x8
c001ddfe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de02:	50                   	push   eax
c001de03:	e8 04 2a fe ff       	call   c000080c <strcpy>
c001de08:	83 c4 10             	add    esp,0x10
c001de0b:	83 ec 08             	sub    esp,0x8
c001de0e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de12:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de16:	e8 1d fc ff ff       	call   c001da38 <Process::addArgs(char**)>
c001de1b:	83 c4 10             	add    esp,0x10
c001de1e:	90                   	nop
c001de1f:	83 c4 24             	add    esp,0x24
c001de22:	5b                   	pop    ebx
c001de23:	5e                   	pop    esi
c001de24:	c3                   	ret    

c001de25 <taskStartupFunction>:
c001de25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de2a:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de2d:	c3                   	ret    

c001de2e <Semaphore::Semaphore(int)>:
c001de2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de36:	89 10                	mov    DWORD PTR [eax],edx
c001de38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de3c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001de43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de47:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001de4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de52:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001de59:	90                   	nop
c001de5a:	c3                   	ret    
c001de5b:	90                   	nop

c001de5c <Mutex::Mutex()>:
c001de5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de60:	6a 01                	push   0x1
c001de62:	50                   	push   eax
c001de63:	e8 c6 ff ff ff       	call   c001de2e <Semaphore::Semaphore(int)>
c001de68:	83 c4 08             	add    esp,0x8
c001de6b:	90                   	nop
c001de6c:	c3                   	ret    
c001de6d:	90                   	nop

c001de6e <Process::createThread(void (*)(void*), void*, int)>:
c001de6e:	55                   	push   ebp
c001de6f:	31 c9                	xor    ecx,ecx
c001de71:	57                   	push   edi
c001de72:	56                   	push   esi
c001de73:	53                   	push   ebx
c001de74:	83 ec 1c             	sub    esp,0x1c
c001de77:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001de7b:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001de82:	89 f2                	mov    edx,esi
c001de84:	0f b7 c2             	movzx  eax,dx
c001de87:	83 e2 01             	and    edx,0x1
c001de8a:	74 16                	je     c001dea2 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001de8c:	d1 f8                	sar    eax,1
c001de8e:	41                   	inc    ecx
c001de8f:	89 c2                	mov    edx,eax
c001de91:	83 f9 10             	cmp    ecx,0x10
c001de94:	75 ee                	jne    c001de84 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001de96:	83 c4 1c             	add    esp,0x1c
c001de99:	31 db                	xor    ebx,ebx
c001de9b:	89 d8                	mov    eax,ebx
c001de9d:	5b                   	pop    ebx
c001de9e:	5e                   	pop    esi
c001de9f:	5f                   	pop    edi
c001dea0:	5d                   	pop    ebp
c001dea1:	c3                   	ret    
c001dea2:	b8 01 00 00 00       	mov    eax,0x1
c001dea7:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001deaa:	d3 e0                	shl    eax,cl
c001deac:	09 c6                	or     esi,eax
c001deae:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001deb1:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001deb8:	89 c6                	mov    esi,eax
c001deba:	c1 e6 05             	shl    esi,0x5
c001debd:	01 f0                	add    eax,esi
c001debf:	01 d8                	add    eax,ebx
c001dec1:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001dec8:	75 0a                	jne    c001ded4 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001deca:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001ded4:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001deda:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001dede:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001dee1:	01 ca                	add    edx,ecx
c001dee3:	83 ec 08             	sub    esp,0x8
c001dee6:	89 d0                	mov    eax,edx
c001dee8:	c1 e0 05             	shl    eax,0x5
c001deeb:	01 d0                	add    eax,edx
c001deed:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001def1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001def5:	01 d8                	add    eax,ebx
c001def7:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001defd:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001df03:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df09:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df0f:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001df15:	89 cd                	mov    ebp,ecx
c001df17:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001df1b:	f7 dd                	neg    ebp
c001df1d:	c1 e5 15             	shl    ebp,0x15
c001df20:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001df26:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001df2c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001df36:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001df3c:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001df46:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001df50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df54:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001df5b:	53                   	push   ebx
c001df5c:	68 04 28 03 c0       	push   0xc0032804
c001df61:	e8 e6 b3 00 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df66:	89 d8                	mov    eax,ebx
c001df68:	83 c4 10             	add    esp,0x10
c001df6b:	83 c4 1c             	add    esp,0x1c
c001df6e:	5b                   	pop    ebx
c001df6f:	5e                   	pop    esi
c001df70:	5f                   	pop    edi
c001df71:	5d                   	pop    ebp
c001df72:	c3                   	ret    
c001df73:	90                   	nop

c001df74 <Process::createUserThread()>:
c001df74:	83 ec 0c             	sub    esp,0xc
c001df77:	68 80 00 00 00       	push   0x80
c001df7c:	6a 00                	push   0x0
c001df7e:	68 38 d9 01 c0       	push   0xc001d938
c001df83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df87:	e8 e2 fe ff ff       	call   c001de6e <Process::createThread(void (*)(void*), void*, int)>
c001df8c:	83 c4 1c             	add    esp,0x1c
c001df8f:	c3                   	ret    

c001df90 <setupMultitasking(void (*)())>:
c001df90:	56                   	push   esi
c001df91:	53                   	push   ebx
c001df92:	51                   	push   ecx
c001df93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df97:	eb 10                	jmp    c001dfa9 <setupMultitasking(void (*)())+0x19>
c001df99:	83 ec 0c             	sub    esp,0xc
c001df9c:	68 04 28 03 c0       	push   0xc0032804
c001dfa1:	e8 f8 b2 00 00       	call   c002929e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfa6:	83 c4 10             	add    esp,0x10
c001dfa9:	83 ec 0c             	sub    esp,0xc
c001dfac:	68 04 28 03 c0       	push   0xc0032804
c001dfb1:	e8 c4 b2 00 00       	call   c002927a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dfb6:	83 c4 10             	add    esp,0x10
c001dfb9:	84 c0                	test   al,al
c001dfbb:	74 dc                	je     c001df99 <setupMultitasking(void (*)())+0x9>
c001dfbd:	83 ec 0c             	sub    esp,0xc
c001dfc0:	68 3f 07 00 00       	push   0x73f
c001dfc5:	e8 c2 18 ff ff       	call   c000f88c <malloc>
c001dfca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dfd1:	89 c3                	mov    ebx,eax
c001dfd3:	6a 00                	push   0x0
c001dfd5:	68 6f cb 02 c0       	push   0xc002cb6f
c001dfda:	6a 01                	push   0x1
c001dfdc:	50                   	push   eax
c001dfdd:	e8 94 fc ff ff       	call   c001dc76 <Process::Process(bool, char const*, Process*, char**)>
c001dfe2:	83 c4 18             	add    esp,0x18
c001dfe5:	89 1d 10 28 03 c0    	mov    DWORD PTR ds:0xc0032810,ebx
c001dfeb:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dff1:	68 c0 cc 02 c0       	push   0xc002ccc0
c001dff6:	e8 ce 48 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001dffb:	58                   	pop    eax
c001dffc:	5a                   	pop    edx
c001dffd:	6a 63                	push   0x63
c001dfff:	68 f4 cc 02 c0       	push   0xc002ccf4
c001e004:	e8 c0 48 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001e009:	59                   	pop    ecx
c001e00a:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e010:	e8 d7 26 ff ff       	call   c00106ec <setActiveTerminal(VgaText*)>
c001e015:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e01d:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e027:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e02d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e030:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e03a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e040:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e046:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e050:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e05a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e064:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e06a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e074:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e07a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e084:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e08a:	58                   	pop    eax
c001e08b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e091:	5a                   	pop    edx
c001e092:	68 6b cb 02 c0       	push   0xc002cb6b
c001e097:	50                   	push   eax
c001e098:	e8 6f 27 fe ff       	call   c000080c <strcpy>
c001e09d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e0a4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e0a8:	83 c4 14             	add    esp,0x14
c001e0ab:	5b                   	pop    ebx
c001e0ac:	5e                   	pop    esi
c001e0ad:	e9 a2 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e0b2 <schedule()>:
c001e0b2:	a1 e4 27 03 c0       	mov    eax,ds:0xc00327e4
c001e0b7:	85 c0                	test   eax,eax
c001e0b9:	74 0b                	je     c001e0c6 <schedule()+0x14>
c001e0bb:	c7 05 e0 27 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00327e0,0x1
c001e0c5:	c3                   	ret    
c001e0c6:	53                   	push   ebx
c001e0c7:	83 ec 14             	sub    esp,0x14
c001e0ca:	68 04 28 03 c0       	push   0xc0032804
c001e0cf:	e8 a6 b1 00 00       	call   c002927a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0d4:	83 c4 10             	add    esp,0x10
c001e0d7:	84 c0                	test   al,al
c001e0d9:	75 38                	jne    c001e113 <schedule()+0x61>
c001e0db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0e0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e0e3:	4a                   	dec    edx
c001e0e4:	74 32                	je     c001e118 <schedule()+0x66>
c001e0e6:	83 ec 0c             	sub    esp,0xc
c001e0e9:	68 04 28 03 c0       	push   0xc0032804
c001e0ee:	e8 a3 b1 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0f3:	c7 04 24 04 28 03 c0 	mov    DWORD PTR [esp],0xc0032804
c001e0fa:	89 c3                	mov    ebx,eax
c001e0fc:	e8 9d b1 00 00       	call   c002929e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e101:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e108:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e10b:	e8 7e f8 ff ff       	call   c001d98e <switchToThread(ThreadControlBlock*)>
c001e110:	83 c4 10             	add    esp,0x10
c001e113:	83 c4 08             	add    esp,0x8
c001e116:	5b                   	pop    ebx
c001e117:	c3                   	ret    
c001e118:	83 ec 08             	sub    esp,0x8
c001e11b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e122:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e128:	68 04 28 03 c0       	push   0xc0032804
c001e12d:	e8 1a b2 00 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e132:	83 c4 10             	add    esp,0x10
c001e135:	eb af                	jmp    c001e0e6 <schedule()+0x34>
c001e137:	90                   	nop

c001e138 <Semaphore::tryAcquire()>:
c001e138:	53                   	push   ebx
c001e139:	83 ec 08             	sub    esp,0x8
c001e13c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e140:	fa                   	cli    
c001e141:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001e146:	8d 50 01             	lea    edx,[eax+0x1]
c001e149:	89 15 e8 27 03 c0    	mov    DWORD PTR ds:0xc00327e8,edx
c001e14f:	8b 15 e4 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327e4
c001e155:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e158:	89 1d e4 27 03 c0    	mov    DWORD PTR ds:0xc00327e4,ebx
c001e15e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e161:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e163:	7c 2a                	jl     c001e18f <Semaphore::tryAcquire()+0x57>
c001e165:	89 15 e4 27 03 c0    	mov    DWORD PTR ds:0xc00327e4,edx
c001e16b:	85 d2                	test   edx,edx
c001e16d:	75 0a                	jne    c001e179 <Semaphore::tryAcquire()+0x41>
c001e16f:	8b 15 e0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327e0
c001e175:	85 d2                	test   edx,edx
c001e177:	75 5b                	jne    c001e1d4 <Semaphore::tryAcquire()+0x9c>
c001e179:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001e17e:	85 c0                	test   eax,eax
c001e180:	74 07                	je     c001e189 <Semaphore::tryAcquire()+0x51>
c001e182:	31 c0                	xor    eax,eax
c001e184:	83 c4 08             	add    esp,0x8
c001e187:	5b                   	pop    ebx
c001e188:	c3                   	ret    
c001e189:	fb                   	sti    
c001e18a:	83 c4 08             	add    esp,0x8
c001e18d:	5b                   	pop    ebx
c001e18e:	c3                   	ret    
c001e18f:	43                   	inc    ebx
c001e190:	89 15 e4 27 03 c0    	mov    DWORD PTR ds:0xc00327e4,edx
c001e196:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e199:	85 d2                	test   edx,edx
c001e19b:	75 1f                	jne    c001e1bc <Semaphore::tryAcquire()+0x84>
c001e19d:	8b 0d e0 27 03 c0    	mov    ecx,DWORD PTR ds:0xc00327e0
c001e1a3:	85 c9                	test   ecx,ecx
c001e1a5:	74 15                	je     c001e1bc <Semaphore::tryAcquire()+0x84>
c001e1a7:	c7 05 e0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327e0,0x0
c001e1b1:	e8 fc fe ff ff       	call   c001e0b2 <schedule()>
c001e1b6:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001e1bb:	48                   	dec    eax
c001e1bc:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001e1c1:	85 c0                	test   eax,eax
c001e1c3:	75 08                	jne    c001e1cd <Semaphore::tryAcquire()+0x95>
c001e1c5:	fb                   	sti    
c001e1c6:	b0 01                	mov    al,0x1
c001e1c8:	83 c4 08             	add    esp,0x8
c001e1cb:	5b                   	pop    ebx
c001e1cc:	c3                   	ret    
c001e1cd:	b0 01                	mov    al,0x1
c001e1cf:	83 c4 08             	add    esp,0x8
c001e1d2:	5b                   	pop    ebx
c001e1d3:	c3                   	ret    
c001e1d4:	c7 05 e0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327e0,0x0
c001e1de:	e8 cf fe ff ff       	call   c001e0b2 <schedule()>
c001e1e3:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001e1e8:	48                   	dec    eax
c001e1e9:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001e1ee:	85 c0                	test   eax,eax
c001e1f0:	75 90                	jne    c001e182 <Semaphore::tryAcquire()+0x4a>
c001e1f2:	eb 95                	jmp    c001e189 <Semaphore::tryAcquire()+0x51>

c001e1f4 <Semaphore::assertLocked(char const*)>:
c001e1f4:	83 ec 0c             	sub    esp,0xc
c001e1f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1fb:	fa                   	cli    
c001e1fc:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001e202:	a1 e4 27 03 c0       	mov    eax,ds:0xc00327e4
c001e207:	8d 48 01             	lea    ecx,[eax+0x1]
c001e20a:	89 0d e4 27 03 c0    	mov    DWORD PTR ds:0xc00327e4,ecx
c001e210:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e212:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e215:	7c 24                	jl     c001e23b <Semaphore::assertLocked(char const*)+0x47>
c001e217:	a3 e4 27 03 c0       	mov    ds:0xc00327e4,eax
c001e21c:	85 c0                	test   eax,eax
c001e21e:	75 09                	jne    c001e229 <Semaphore::assertLocked(char const*)+0x35>
c001e220:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c001e225:	85 c0                	test   eax,eax
c001e227:	75 29                	jne    c001e252 <Semaphore::assertLocked(char const*)+0x5e>
c001e229:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001e22e:	48                   	dec    eax
c001e22f:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001e234:	75 01                	jne    c001e237 <Semaphore::assertLocked(char const*)+0x43>
c001e236:	fb                   	sti    
c001e237:	83 c4 0c             	add    esp,0xc
c001e23a:	c3                   	ret    
c001e23b:	83 ec 0c             	sub    esp,0xc
c001e23e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e242:	e8 b8 c0 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001e247:	a1 e4 27 03 c0       	mov    eax,ds:0xc00327e4
c001e24c:	83 c4 10             	add    esp,0x10
c001e24f:	48                   	dec    eax
c001e250:	eb c5                	jmp    c001e217 <Semaphore::assertLocked(char const*)+0x23>
c001e252:	c7 05 e0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327e0,0x0
c001e25c:	e8 51 fe ff ff       	call   c001e0b2 <schedule()>
c001e261:	eb c6                	jmp    c001e229 <Semaphore::assertLocked(char const*)+0x35>

c001e263 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e263:	83 ec 14             	sub    esp,0x14
c001e266:	ff 35 e8 27 03 c0    	push   DWORD PTR ds:0xc00327e8
c001e26c:	68 18 cd 02 c0       	push   0xc002cd18
c001e271:	e8 53 46 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001e276:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e27b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e27f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e282:	e8 2b fe ff ff       	call   c001e0b2 <schedule()>
c001e287:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001e28c:	83 c4 10             	add    esp,0x10
c001e28f:	48                   	dec    eax
c001e290:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001e295:	85 c0                	test   eax,eax
c001e297:	75 06                	jne    c001e29f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e299:	fb                   	sti    
c001e29a:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001e29f:	83 ec 08             	sub    esp,0x8
c001e2a2:	50                   	push   eax
c001e2a3:	68 4c cd 02 c0       	push   0xc002cd4c
c001e2a8:	e8 1c 46 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001e2ad:	83 c4 1c             	add    esp,0x1c
c001e2b0:	c3                   	ret    

c001e2b1 <blockTask(TaskState)>:
c001e2b1:	83 ec 0c             	sub    esp,0xc
c001e2b4:	fa                   	cli    
c001e2b5:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001e2bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2c4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2c7:	e8 e6 fd ff ff       	call   c001e0b2 <schedule()>
c001e2cc:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001e2d1:	48                   	dec    eax
c001e2d2:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001e2d7:	75 01                	jne    c001e2da <blockTask(TaskState)+0x29>
c001e2d9:	fb                   	sti    
c001e2da:	83 c4 0c             	add    esp,0xc
c001e2dd:	c3                   	ret    

c001e2de <waitTask(int, int*, int)>:
c001e2de:	83 ec 18             	sub    esp,0x18
c001e2e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2ea:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e2ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2f6:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e2f9:	6a 07                	push   0x7
c001e2fb:	e8 b1 ff ff ff       	call   c001e2b1 <blockTask(TaskState)>
c001e300:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e305:	83 c4 10             	add    esp,0x10
c001e308:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e30b:	85 d2                	test   edx,edx
c001e30d:	74 0a                	je     c001e319 <waitTask(int, int*, int)+0x3b>
c001e30f:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e312:	89 02                	mov    DWORD PTR [edx],eax
c001e314:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e319:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e31c:	83 c4 0c             	add    esp,0xc
c001e31f:	c3                   	ret    

c001e320 <nanoSleepUntil(unsigned long long)>:
c001e320:	83 ec 0c             	sub    esp,0xc
c001e323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e327:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e32b:	3b 05 30 f9 02 c0    	cmp    eax,DWORD PTR ds:0xc002f930
c001e331:	89 d1                	mov    ecx,edx
c001e333:	1b 0d 34 f9 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f934
c001e339:	73 04                	jae    c001e33f <nanoSleepUntil(unsigned long long)+0x1f>
c001e33b:	83 c4 0c             	add    esp,0xc
c001e33e:	c3                   	ret    
c001e33f:	fa                   	cli    
c001e340:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001e346:	83 ec 08             	sub    esp,0x8
c001e349:	ff 05 e4 27 03 c0    	inc    DWORD PTR ds:0xc00327e4
c001e34f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e355:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e358:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e35b:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e361:	68 f8 27 03 c0       	push   0xc00327f8
c001e366:	e8 e1 af 00 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e36b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e372:	e8 3a ff ff ff       	call   c001e2b1 <blockTask(TaskState)>
c001e377:	a1 e4 27 03 c0       	mov    eax,ds:0xc00327e4
c001e37c:	83 c4 10             	add    esp,0x10
c001e37f:	48                   	dec    eax
c001e380:	a3 e4 27 03 c0       	mov    ds:0xc00327e4,eax
c001e385:	85 c0                	test   eax,eax
c001e387:	75 09                	jne    c001e392 <nanoSleepUntil(unsigned long long)+0x72>
c001e389:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c001e38e:	85 c0                	test   eax,eax
c001e390:	75 12                	jne    c001e3a4 <nanoSleepUntil(unsigned long long)+0x84>
c001e392:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001e397:	48                   	dec    eax
c001e398:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001e39d:	75 9c                	jne    c001e33b <nanoSleepUntil(unsigned long long)+0x1b>
c001e39f:	fb                   	sti    
c001e3a0:	83 c4 0c             	add    esp,0xc
c001e3a3:	c3                   	ret    
c001e3a4:	c7 05 e0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327e0,0x0
c001e3ae:	e8 ff fc ff ff       	call   c001e0b2 <schedule()>
c001e3b3:	eb dd                	jmp    c001e392 <nanoSleepUntil(unsigned long long)+0x72>

c001e3b5 <nanoSleep(unsigned long long)>:
c001e3b5:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001e3ba:	8b 15 34 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f934
c001e3c0:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3c4:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3c8:	e9 53 ff ff ff       	jmp    c001e320 <nanoSleepUntil(unsigned long long)>

c001e3cd <sleep(unsigned long long)>:
c001e3cd:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e3d5:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e3da:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e3de:	01 ca                	add    edx,ecx
c001e3e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e3e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e3e8:	eb cb                	jmp    c001e3b5 <nanoSleep(unsigned long long)>

c001e3ea <Semaphore::acquire()>:
c001e3ea:	83 ec 0c             	sub    esp,0xc
c001e3ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e3f1:	fa                   	cli    
c001e3f2:	a1 e4 27 03 c0       	mov    eax,ds:0xc00327e4
c001e3f7:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001e3fd:	8d 48 01             	lea    ecx,[eax+0x1]
c001e400:	89 0d e4 27 03 c0    	mov    DWORD PTR ds:0xc00327e4,ecx
c001e406:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e409:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e40b:	7d 28                	jge    c001e435 <Semaphore::acquire()+0x4b>
c001e40d:	41                   	inc    ecx
c001e40e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e411:	a3 e4 27 03 c0       	mov    ds:0xc00327e4,eax
c001e416:	85 c0                	test   eax,eax
c001e418:	75 09                	jne    c001e423 <Semaphore::acquire()+0x39>
c001e41a:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c001e41f:	85 c0                	test   eax,eax
c001e421:	75 4e                	jne    c001e471 <Semaphore::acquire()+0x87>
c001e423:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001e428:	48                   	dec    eax
c001e429:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001e42e:	75 01                	jne    c001e431 <Semaphore::acquire()+0x47>
c001e430:	fb                   	sti    
c001e431:	83 c4 0c             	add    esp,0xc
c001e434:	c3                   	ret    
c001e435:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e43a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e441:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e444:	85 c9                	test   ecx,ecx
c001e446:	74 3a                	je     c001e482 <Semaphore::acquire()+0x98>
c001e448:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e44b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e451:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e454:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e459:	83 ec 0c             	sub    esp,0xc
c001e45c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e45f:	6a 05                	push   0x5
c001e461:	e8 4b fe ff ff       	call   c001e2b1 <blockTask(TaskState)>
c001e466:	a1 e4 27 03 c0       	mov    eax,ds:0xc00327e4
c001e46b:	83 c4 10             	add    esp,0x10
c001e46e:	48                   	dec    eax
c001e46f:	eb a0                	jmp    c001e411 <Semaphore::acquire()+0x27>
c001e471:	c7 05 e0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327e0,0x0
c001e47b:	e8 32 fc ff ff       	call   c001e0b2 <schedule()>
c001e480:	eb a1                	jmp    c001e423 <Semaphore::acquire()+0x39>
c001e482:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e487:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e48a:	eb c8                	jmp    c001e454 <Semaphore::acquire()+0x6a>

c001e48c <taskReturned>:
c001e48c:	83 ec 18             	sub    esp,0x18
c001e48f:	68 80 cd 02 c0       	push   0xc002cd80
c001e494:	e8 66 be ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001e499:	83 c4 10             	add    esp,0x10
c001e49c:	83 ec 0c             	sub    esp,0xc
c001e49f:	6a 02                	push   0x2
c001e4a1:	e8 0b fe ff ff       	call   c001e2b1 <blockTask(TaskState)>
c001e4a6:	fa                   	cli    
c001e4a7:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001e4ad:	e8 00 fc ff ff       	call   c001e0b2 <schedule()>
c001e4b2:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001e4b7:	83 c4 10             	add    esp,0x10
c001e4ba:	48                   	dec    eax
c001e4bb:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001e4c0:	85 c0                	test   eax,eax
c001e4c2:	75 d8                	jne    c001e49c <taskReturned+0x10>
c001e4c4:	fb                   	sti    
c001e4c5:	eb d5                	jmp    c001e49c <taskReturned+0x10>

c001e4c7 <Thr::processFromPID(int)>:
c001e4c7:	57                   	push   edi
c001e4c8:	56                   	push   esi
c001e4c9:	53                   	push   ebx
c001e4ca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e4ce:	83 ec 0c             	sub    esp,0xc
c001e4d1:	68 76 cb 02 c0       	push   0xc002cb76
c001e4d6:	e8 ee 43 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001e4db:	fa                   	cli    
c001e4dc:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001e4e2:	c7 04 24 04 28 03 c0 	mov    DWORD PTR [esp],0xc0032804
c001e4e9:	e8 a8 ad 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4ee:	83 c4 10             	add    esp,0x10
c001e4f1:	89 c7                	mov    edi,eax
c001e4f3:	eb 14                	jmp    c001e509 <Thr::processFromPID(int)+0x42>
c001e4f5:	83 ec 0c             	sub    esp,0xc
c001e4f8:	68 04 28 03 c0       	push   0xc0032804
c001e4fd:	e8 94 ad 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e502:	83 c4 10             	add    esp,0x10
c001e505:	39 f8                	cmp    eax,edi
c001e507:	74 49                	je     c001e552 <Thr::processFromPID(int)+0x8b>
c001e509:	83 ec 0c             	sub    esp,0xc
c001e50c:	68 04 28 03 c0       	push   0xc0032804
c001e511:	e8 80 ad 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e516:	c7 04 24 04 28 03 c0 	mov    DWORD PTR [esp],0xc0032804
c001e51d:	89 c3                	mov    ebx,eax
c001e51f:	e8 7a ad 00 00       	call   c002929e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e524:	58                   	pop    eax
c001e525:	5a                   	pop    edx
c001e526:	53                   	push   ebx
c001e527:	68 04 28 03 c0       	push   0xc0032804
c001e52c:	e8 1b ae 00 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e531:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e534:	83 c4 10             	add    esp,0x10
c001e537:	39 30                	cmp    DWORD PTR [eax],esi
c001e539:	75 ba                	jne    c001e4f5 <Thr::processFromPID(int)+0x2e>
c001e53b:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001e540:	48                   	dec    eax
c001e541:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001e546:	74 07                	je     c001e54f <Thr::processFromPID(int)+0x88>
c001e548:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e54b:	5b                   	pop    ebx
c001e54c:	5e                   	pop    esi
c001e54d:	5f                   	pop    edi
c001e54e:	c3                   	ret    
c001e54f:	fb                   	sti    
c001e550:	eb f6                	jmp    c001e548 <Thr::processFromPID(int)+0x81>
c001e552:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001e557:	48                   	dec    eax
c001e558:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001e55d:	75 01                	jne    c001e560 <Thr::processFromPID(int)+0x99>
c001e55f:	fb                   	sti    
c001e560:	83 ec 0c             	sub    esp,0xc
c001e563:	68 91 cb 02 c0       	push   0xc002cb91
c001e568:	e8 5c 43 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001e56d:	83 c4 10             	add    esp,0x10
c001e570:	31 c0                	xor    eax,eax
c001e572:	5b                   	pop    ebx
c001e573:	5e                   	pop    esi
c001e574:	5f                   	pop    edi
c001e575:	c3                   	ret    

c001e576 <unblockTask(ThreadControlBlock*)>:
c001e576:	53                   	push   ebx
c001e577:	83 ec 08             	sub    esp,0x8
c001e57a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e57e:	fa                   	cli    
c001e57f:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001e585:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e588:	85 c0                	test   eax,eax
c001e58a:	74 66                	je     c001e5f2 <unblockTask(ThreadControlBlock*)+0x7c>
c001e58c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e58f:	48                   	dec    eax
c001e590:	74 31                	je     c001e5c3 <unblockTask(ThreadControlBlock*)+0x4d>
c001e592:	83 ec 0c             	sub    esp,0xc
c001e595:	68 04 28 03 c0       	push   0xc0032804
c001e59a:	e8 f7 ac 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e59f:	83 c4 10             	add    esp,0x10
c001e5a2:	85 c0                	test   eax,eax
c001e5a4:	75 17                	jne    c001e5bd <unblockTask(ThreadControlBlock*)+0x47>
c001e5a6:	eb 68                	jmp    c001e610 <unblockTask(ThreadControlBlock*)+0x9a>
c001e5a8:	83 ec 08             	sub    esp,0x8
c001e5ab:	50                   	push   eax
c001e5ac:	68 04 28 03 c0       	push   0xc0032804
c001e5b1:	e8 7e b0 00 00       	call   c0029634 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e5b6:	83 c4 10             	add    esp,0x10
c001e5b9:	85 c0                	test   eax,eax
c001e5bb:	74 53                	je     c001e610 <unblockTask(ThreadControlBlock*)+0x9a>
c001e5bd:	39 c3                	cmp    ebx,eax
c001e5bf:	75 e7                	jne    c001e5a8 <unblockTask(ThreadControlBlock*)+0x32>
c001e5c1:	eb 1c                	jmp    c001e5df <unblockTask(ThreadControlBlock*)+0x69>
c001e5c3:	83 ec 0c             	sub    esp,0xc
c001e5c6:	68 70 ce 02 c0       	push   0xc002ce70
c001e5cb:	e8 f9 42 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001e5d0:	c7 04 24 fc cd 02 c0 	mov    DWORD PTR [esp],0xc002cdfc
c001e5d7:	e8 ed 42 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001e5dc:	83 c4 10             	add    esp,0x10
c001e5df:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001e5e4:	48                   	dec    eax
c001e5e5:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001e5ea:	75 01                	jne    c001e5ed <unblockTask(ThreadControlBlock*)+0x77>
c001e5ec:	fb                   	sti    
c001e5ed:	83 c4 08             	add    esp,0x8
c001e5f0:	5b                   	pop    ebx
c001e5f1:	c3                   	ret    
c001e5f2:	83 ec 0c             	sub    esp,0xc
c001e5f5:	68 b4 cd 02 c0       	push   0xc002cdb4
c001e5fa:	e8 ca 42 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001e5ff:	c7 04 24 fc cd 02 c0 	mov    DWORD PTR [esp],0xc002cdfc
c001e606:	e8 be 42 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001e60b:	83 c4 10             	add    esp,0x10
c001e60e:	eb cf                	jmp    c001e5df <unblockTask(ThreadControlBlock*)+0x69>
c001e610:	83 ec 08             	sub    esp,0x8
c001e613:	53                   	push   ebx
c001e614:	68 04 28 03 c0       	push   0xc0032804
c001e619:	e8 2e ad 00 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e61e:	83 c4 10             	add    esp,0x10
c001e621:	eb bc                	jmp    c001e5df <unblockTask(ThreadControlBlock*)+0x69>

c001e623 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e623:	55                   	push   ebp
c001e624:	57                   	push   edi
c001e625:	56                   	push   esi
c001e626:	53                   	push   ebx
c001e627:	83 ec 1c             	sub    esp,0x1c
c001e62a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e62e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e631:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e637:	85 ff                	test   edi,edi
c001e639:	7e 20                	jle    c001e65b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e63b:	31 f6                	xor    esi,esi
c001e63d:	83 ec 0c             	sub    esp,0xc
c001e640:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e647:	46                   	inc    esi
c001e648:	e8 4f 12 ff ff       	call   c000f89c <free>
c001e64d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e650:	83 c4 10             	add    esp,0x10
c001e653:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e659:	7f e2                	jg     c001e63d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e65b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e665:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e66a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e66d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e670:	d3 c0                	rol    eax,cl
c001e672:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e679:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e67c:	89 f7                	mov    edi,esi
c001e67e:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e686:	0f 85 74 01 00 00    	jne    c001e800 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e68c:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e692:	85 ed                	test   ebp,ebp
c001e694:	74 1b                	je     c001e6b1 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e696:	83 ec 0c             	sub    esp,0xc
c001e699:	55                   	push   ebp
c001e69a:	e8 d5 b9 ff ff       	call   c001a074 <EnvVarContainer::~EnvVarContainer()>
c001e69f:	59                   	pop    ecx
c001e6a0:	5e                   	pop    esi
c001e6a1:	6a 0c                	push   0xc
c001e6a3:	55                   	push   ebp
c001e6a4:	e8 40 41 ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c001e6a9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6ac:	83 c4 10             	add    esp,0x10
c001e6af:	89 f7                	mov    edi,esi
c001e6b1:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e6b7:	85 c0                	test   eax,eax
c001e6b9:	0f 84 aa 00 00 00    	je     c001e769 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e6bf:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e6c2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e6c6:	31 c9                	xor    ecx,ecx
c001e6c8:	eb 10                	jmp    c001e6da <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e6ca:	41                   	inc    ecx
c001e6cb:	83 f9 10             	cmp    ecx,0x10
c001e6ce:	0f 84 95 00 00 00    	je     c001e769 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e6d4:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e6da:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e6e1:	d3 fa                	sar    edx,cl
c001e6e3:	83 e2 01             	and    edx,0x1
c001e6e6:	74 e2                	je     c001e6ca <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6e8:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e6eb:	01 ca                	add    edx,ecx
c001e6ed:	89 d5                	mov    ebp,edx
c001e6ef:	c1 e5 05             	shl    ebp,0x5
c001e6f2:	01 ea                	add    edx,ebp
c001e6f4:	01 d0                	add    eax,edx
c001e6f6:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e6fc:	83 fd 07             	cmp    ebp,0x7
c001e6ff:	75 c9                	jne    c001e6ca <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e701:	05 40 02 00 00       	add    eax,0x240
c001e706:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e709:	83 fd ff             	cmp    ebp,0xffffffff
c001e70c:	0f 8c 08 01 00 00    	jl     c001e81a <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e712:	0f 84 b9 01 00 00    	je     c001e8d1 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e718:	85 ed                	test   ebp,ebp
c001e71a:	0f 84 a0 01 00 00    	je     c001e8c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e720:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e722:	75 a6                	jne    c001e6ca <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e724:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e72a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e72e:	01 d0                	add    eax,edx
c001e730:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e734:	83 ec 0c             	sub    esp,0xc
c001e737:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e73d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e740:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e746:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e74d:	50                   	push   eax
c001e74e:	e8 23 fe ff ff       	call   c001e576 <unblockTask(ThreadControlBlock*)>
c001e753:	83 c4 10             	add    esp,0x10
c001e756:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e759:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e75d:	89 f7                	mov    edi,esi
c001e75f:	41                   	inc    ecx
c001e760:	83 f9 10             	cmp    ecx,0x10
c001e763:	0f 85 6b ff ff ff    	jne    c001e6d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e769:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e76f:	85 c0                	test   eax,eax
c001e771:	74 5d                	je     c001e7d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e773:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e779:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e77f:	74 4f                	je     c001e7d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e781:	83 ec 0c             	sub    esp,0xc
c001e784:	68 04 28 03 c0       	push   0xc0032804
c001e789:	e8 08 ab 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e78e:	c7 04 24 04 28 03 c0 	mov    DWORD PTR [esp],0xc0032804
c001e795:	89 c7                	mov    edi,eax
c001e797:	e8 de aa 00 00       	call   c002927a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e79c:	83 c4 10             	add    esp,0x10
c001e79f:	84 c0                	test   al,al
c001e7a1:	0f 84 e4 00 00 00    	je     c001e88b <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e7a7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7aa:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e7b0:	85 d2                	test   edx,edx
c001e7b2:	74 0f                	je     c001e7c3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e7b4:	83 ec 0c             	sub    esp,0xc
c001e7b7:	8b 02                	mov    eax,DWORD PTR [edx]
c001e7b9:	52                   	push   edx
c001e7ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e7bd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7c0:	83 c4 10             	add    esp,0x10
c001e7c3:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e7cd:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e7d0:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e7d6:	85 db                	test   ebx,ebx
c001e7d8:	74 16                	je     c001e7f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e7da:	83 ec 0c             	sub    esp,0xc
c001e7dd:	53                   	push   ebx
c001e7de:	e8 9b 33 ff ff       	call   c0011b7e <VAS::~VAS()>
c001e7e3:	58                   	pop    eax
c001e7e4:	5a                   	pop    edx
c001e7e5:	6a 14                	push   0x14
c001e7e7:	53                   	push   ebx
c001e7e8:	e8 fc 3f ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c001e7ed:	83 c4 10             	add    esp,0x10
c001e7f0:	83 ec 0c             	sub    esp,0xc
c001e7f3:	68 a8 cb 02 c0       	push   0xc002cba8
c001e7f8:	e8 cc 40 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001e7fd:	83 c4 10             	add    esp,0x10
c001e800:	83 ec 08             	sub    esp,0x8
c001e803:	68 3f 07 00 00       	push   0x73f
c001e808:	68 b6 cb 02 c0       	push   0xc002cbb6
c001e80d:	e8 b7 40 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001e812:	83 c4 2c             	add    esp,0x2c
c001e815:	5b                   	pop    ebx
c001e816:	5e                   	pop    esi
c001e817:	5f                   	pop    edi
c001e818:	5d                   	pop    ebp
c001e819:	c3                   	ret    
c001e81a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e81e:	83 ec 0c             	sub    esp,0xc
c001e821:	68 b4 ce 02 c0       	push   0xc002ceb4
c001e826:	e8 d4 ba ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001e82b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e82e:	83 c4 10             	add    esp,0x10
c001e831:	89 f7                	mov    edi,esi
c001e833:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e837:	e9 8e fe ff ff       	jmp    c001e6ca <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e83c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e842:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e848:	75 1c                	jne    c001e866 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e84a:	83 ec 0c             	sub    esp,0xc
c001e84d:	68 1c cf 02 c0       	push   0xc002cf1c
c001e852:	e8 72 40 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001e857:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e85e:	e8 4e fa ff ff       	call   c001e2b1 <blockTask(TaskState)>
c001e863:	83 c4 10             	add    esp,0x10
c001e866:	83 ec 08             	sub    esp,0x8
c001e869:	56                   	push   esi
c001e86a:	68 04 28 03 c0       	push   0xc0032804
c001e86f:	e8 d8 aa 00 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e874:	c7 04 24 04 28 03 c0 	mov    DWORD PTR [esp],0xc0032804
c001e87b:	e8 16 aa 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e880:	83 c4 10             	add    esp,0x10
c001e883:	39 f8                	cmp    eax,edi
c001e885:	0f 84 1c ff ff ff    	je     c001e7a7 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e88b:	83 ec 0c             	sub    esp,0xc
c001e88e:	68 04 28 03 c0       	push   0xc0032804
c001e893:	e8 fe a9 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e898:	c7 04 24 04 28 03 c0 	mov    DWORD PTR [esp],0xc0032804
c001e89f:	89 c6                	mov    esi,eax
c001e8a1:	e8 f8 a9 00 00       	call   c002929e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e8a6:	83 c4 10             	add    esp,0x10
c001e8a9:	39 f3                	cmp    ebx,esi
c001e8ab:	74 b9                	je     c001e866 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e8ad:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e8b0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e8b3:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e8b9:	75 ab                	jne    c001e866 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e8bb:	e9 7c ff ff ff       	jmp    c001e83c <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e8c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e8c4:	83 ec 0c             	sub    esp,0xc
c001e8c7:	68 e8 ce 02 c0       	push   0xc002cee8
c001e8cc:	e9 55 ff ff ff       	jmp    c001e826 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e8d1:	8b 36                	mov    esi,DWORD PTR [esi]
c001e8d3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e8d7:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e8da:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e8dd:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e8e3:	01 d7                	add    edi,edx
c001e8e5:	89 f8                	mov    eax,edi
c001e8e7:	e9 44 fe ff ff       	jmp    c001e730 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e8ec <cleanerTaskFunction(void*)>:
c001e8ec:	53                   	push   ebx
c001e8ed:	83 ec 08             	sub    esp,0x8
c001e8f0:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001e8f5:	48                   	dec    eax
c001e8f6:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001e8fb:	75 01                	jne    c001e8fe <cleanerTaskFunction(void*)+0x12>
c001e8fd:	fb                   	sti    
c001e8fe:	fa                   	cli    
c001e8ff:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001e904:	80 3d cc 27 03 c0 00 	cmp    BYTE PTR ds:0xc00327cc,0x0
c001e90b:	8d 50 01             	lea    edx,[eax+0x1]
c001e90e:	89 15 e8 27 03 c0    	mov    DWORD PTR ds:0xc00327e8,edx
c001e914:	0f 84 b9 00 00 00    	je     c001e9d3 <cleanerTaskFunction(void*)+0xe7>
c001e91a:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001e91f:	85 c0                	test   eax,eax
c001e921:	75 01                	jne    c001e924 <cleanerTaskFunction(void*)+0x38>
c001e923:	fb                   	sti    
c001e924:	c6 05 cc 27 03 c0 00 	mov    BYTE PTR ds:0xc00327cc,0x0
c001e92b:	fa                   	cli    
c001e92c:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001e932:	ff 05 e4 27 03 c0    	inc    DWORD PTR ds:0xc00327e4
c001e938:	fa                   	cli    
c001e939:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001e93f:	eb 3e                	jmp    c001e97f <cleanerTaskFunction(void*)+0x93>
c001e941:	83 ec 0c             	sub    esp,0xc
c001e944:	68 ec 27 03 c0       	push   0xc00327ec
c001e949:	e8 48 a9 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e94e:	c7 04 24 ec 27 03 c0 	mov    DWORD PTR [esp],0xc00327ec
c001e955:	89 c3                	mov    ebx,eax
c001e957:	e8 42 a9 00 00       	call   c002929e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e95c:	c7 04 24 cc cb 02 c0 	mov    DWORD PTR [esp],0xc002cbcc
c001e963:	e8 61 3f ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001e968:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e96b:	e8 b3 fc ff ff       	call   c001e623 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e970:	c7 04 24 e5 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbe5
c001e977:	e8 4d 3f ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001e97c:	83 c4 10             	add    esp,0x10
c001e97f:	83 ec 0c             	sub    esp,0xc
c001e982:	68 ec 27 03 c0       	push   0xc00327ec
c001e987:	e8 ee a8 00 00       	call   c002927a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e98c:	83 c4 10             	add    esp,0x10
c001e98f:	84 c0                	test   al,al
c001e991:	74 ae                	je     c001e941 <cleanerTaskFunction(void*)+0x55>
c001e993:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001e998:	48                   	dec    eax
c001e999:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001e99e:	75 01                	jne    c001e9a1 <cleanerTaskFunction(void*)+0xb5>
c001e9a0:	fb                   	sti    
c001e9a1:	a1 e4 27 03 c0       	mov    eax,ds:0xc00327e4
c001e9a6:	48                   	dec    eax
c001e9a7:	a3 e4 27 03 c0       	mov    ds:0xc00327e4,eax
c001e9ac:	0f 85 3e ff ff ff    	jne    c001e8f0 <cleanerTaskFunction(void*)+0x4>
c001e9b2:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c001e9b7:	85 c0                	test   eax,eax
c001e9b9:	0f 84 31 ff ff ff    	je     c001e8f0 <cleanerTaskFunction(void*)+0x4>
c001e9bf:	c7 05 e0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327e0,0x0
c001e9c9:	e8 e4 f6 ff ff       	call   c001e0b2 <schedule()>
c001e9ce:	e9 1d ff ff ff       	jmp    c001e8f0 <cleanerTaskFunction(void*)+0x4>
c001e9d3:	83 ec 0c             	sub    esp,0xc
c001e9d6:	6a 02                	push   0x2
c001e9d8:	e8 86 f8 ff ff       	call   c001e263 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e9dd:	83 c4 10             	add    esp,0x10
c001e9e0:	e9 3f ff ff ff       	jmp    c001e924 <cleanerTaskFunction(void*)+0x38>

c001e9e5 <terminateTask(int)>:
c001e9e5:	83 ec 14             	sub    esp,0x14
c001e9e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e9f0:	83 c0 0c             	add    eax,0xc
c001e9f3:	50                   	push   eax
c001e9f4:	68 44 cf 02 c0       	push   0xc002cf44
c001e9f9:	e8 cb 3e ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001e9fe:	fa                   	cli    
c001e9ff:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001ea05:	ff 05 e4 27 03 c0    	inc    DWORD PTR ds:0xc00327e4
c001ea0b:	fa                   	cli    
c001ea0c:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001ea12:	c7 04 24 f8 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbf8
c001ea19:	e8 ab 3e ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001ea1e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ea22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea27:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001ea2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea2f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ea32:	5a                   	pop    edx
c001ea33:	59                   	pop    ecx
c001ea34:	50                   	push   eax
c001ea35:	68 ec 27 03 c0       	push   0xc00327ec
c001ea3a:	e8 0d a9 00 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ea3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea44:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ea4b:	c7 04 24 12 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc12
c001ea52:	e8 72 3e ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001ea57:	83 c4 10             	add    esp,0x10
c001ea5a:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001ea5f:	85 c0                	test   eax,eax
c001ea61:	0f 84 8d 00 00 00    	je     c001eaf4 <terminateTask(int)+0x10f>
c001ea67:	83 ec 0c             	sub    esp,0xc
c001ea6a:	68 2c cc 02 c0       	push   0xc002cc2c
c001ea6f:	e8 55 3e ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001ea74:	58                   	pop    eax
c001ea75:	c6 05 cc 27 03 c0 01 	mov    BYTE PTR ds:0xc00327cc,0x1
c001ea7c:	ff 35 c8 27 03 c0    	push   DWORD PTR ds:0xc00327c8
c001ea82:	e8 ef fa ff ff       	call   c001e576 <unblockTask(ThreadControlBlock*)>
c001ea87:	c7 04 24 46 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc46
c001ea8e:	e8 36 3e ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001ea93:	83 c4 10             	add    esp,0x10
c001ea96:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001ea9b:	48                   	dec    eax
c001ea9c:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001eaa1:	75 01                	jne    c001eaa4 <terminateTask(int)+0xbf>
c001eaa3:	fb                   	sti    
c001eaa4:	a1 e4 27 03 c0       	mov    eax,ds:0xc00327e4
c001eaa9:	48                   	dec    eax
c001eaaa:	a3 e4 27 03 c0       	mov    ds:0xc00327e4,eax
c001eaaf:	75 09                	jne    c001eaba <terminateTask(int)+0xd5>
c001eab1:	83 3d e0 27 03 c0 00 	cmp    DWORD PTR ds:0xc00327e0,0x0
c001eab8:	75 4c                	jne    c001eb06 <terminateTask(int)+0x121>
c001eaba:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001eabf:	48                   	dec    eax
c001eac0:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001eac5:	75 01                	jne    c001eac8 <terminateTask(int)+0xe3>
c001eac7:	fb                   	sti    
c001eac8:	83 ec 0c             	sub    esp,0xc
c001eacb:	68 7e cc 02 c0       	push   0xc002cc7e
c001ead0:	e8 f4 3d ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001ead5:	83 c4 10             	add    esp,0x10
c001ead8:	fa                   	cli    
c001ead9:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001eadf:	e8 ce f5 ff ff       	call   c001e0b2 <schedule()>
c001eae4:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001eae9:	48                   	dec    eax
c001eaea:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001eaef:	75 e7                	jne    c001ead8 <terminateTask(int)+0xf3>
c001eaf1:	fb                   	sti    
c001eaf2:	eb e4                	jmp    c001ead8 <terminateTask(int)+0xf3>
c001eaf4:	83 ec 0c             	sub    esp,0xc
c001eaf7:	68 60 cc 02 c0       	push   0xc002cc60
c001eafc:	e8 c8 3d ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001eb01:	83 c4 10             	add    esp,0x10
c001eb04:	eb 90                	jmp    c001ea96 <terminateTask(int)+0xb1>
c001eb06:	c7 05 e0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327e0,0x0
c001eb10:	e8 9d f5 ff ff       	call   c001e0b2 <schedule()>
c001eb15:	eb a3                	jmp    c001eaba <terminateTask(int)+0xd5>

c001eb17 <Thr::terminateFromIRQ(int)>:
c001eb17:	83 ec 18             	sub    esp,0x18
c001eb1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb1e:	e8 c2 fe ff ff       	call   c001e9e5 <terminateTask(int)>
c001eb23:	90                   	nop

c001eb24 <Semaphore::release()>:
c001eb24:	83 ec 0c             	sub    esp,0xc
c001eb27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb2b:	fa                   	cli    
c001eb2c:	a1 e4 27 03 c0       	mov    eax,ds:0xc00327e4
c001eb31:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001eb37:	8d 48 01             	lea    ecx,[eax+0x1]
c001eb3a:	89 0d e4 27 03 c0    	mov    DWORD PTR ds:0xc00327e4,ecx
c001eb40:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001eb43:	85 c9                	test   ecx,ecx
c001eb45:	74 3c                	je     c001eb83 <Semaphore::release()+0x5f>
c001eb47:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001eb4a:	83 ec 0c             	sub    esp,0xc
c001eb4d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001eb50:	51                   	push   ecx
c001eb51:	e8 20 fa ff ff       	call   c001e576 <unblockTask(ThreadControlBlock*)>
c001eb56:	a1 e4 27 03 c0       	mov    eax,ds:0xc00327e4
c001eb5b:	83 c4 10             	add    esp,0x10
c001eb5e:	48                   	dec    eax
c001eb5f:	a3 e4 27 03 c0       	mov    ds:0xc00327e4,eax
c001eb64:	85 c0                	test   eax,eax
c001eb66:	75 09                	jne    c001eb71 <Semaphore::release()+0x4d>
c001eb68:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c001eb6d:	85 c0                	test   eax,eax
c001eb6f:	75 17                	jne    c001eb88 <Semaphore::release()+0x64>
c001eb71:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001eb76:	48                   	dec    eax
c001eb77:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001eb7c:	75 01                	jne    c001eb7f <Semaphore::release()+0x5b>
c001eb7e:	fb                   	sti    
c001eb7f:	83 c4 0c             	add    esp,0xc
c001eb82:	c3                   	ret    
c001eb83:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001eb86:	eb d7                	jmp    c001eb5f <Semaphore::release()+0x3b>
c001eb88:	c7 05 e0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327e0,0x0
c001eb92:	e8 1b f5 ff ff       	call   c001e0b2 <schedule()>
c001eb97:	eb d8                	jmp    c001eb71 <Semaphore::release()+0x4d>

c001eb99 <__static_initialization_and_destruction_0(int, int)>:
c001eb99:	83 ec 0c             	sub    esp,0xc
c001eb9c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001eba1:	0f 85 88 00 00 00    	jne    c001ec2f <__static_initialization_and_destruction_0(int, int)+0x96>
c001eba7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ebaf:	75 7e                	jne    c001ec2f <__static_initialization_and_destruction_0(int, int)+0x96>
c001ebb1:	83 ec 0c             	sub    esp,0xc
c001ebb4:	68 04 28 03 c0       	push   0xc0032804
c001ebb9:	e8 1e aa 00 00       	call   c00295dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ebbe:	83 c4 10             	add    esp,0x10
c001ebc1:	83 ec 04             	sub    esp,0x4
c001ebc4:	68 bc dd 02 c0       	push   0xc002ddbc
c001ebc9:	68 04 28 03 c0       	push   0xc0032804
c001ebce:	68 90 95 02 c0       	push   0xc0029590
c001ebd3:	e8 8b 3b ff ff       	call   c0012763 <__cxa_atexit>
c001ebd8:	83 c4 10             	add    esp,0x10
c001ebdb:	83 ec 0c             	sub    esp,0xc
c001ebde:	68 f8 27 03 c0       	push   0xc00327f8
c001ebe3:	e8 f4 a9 00 00       	call   c00295dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ebe8:	83 c4 10             	add    esp,0x10
c001ebeb:	83 ec 04             	sub    esp,0x4
c001ebee:	68 bc dd 02 c0       	push   0xc002ddbc
c001ebf3:	68 f8 27 03 c0       	push   0xc00327f8
c001ebf8:	68 90 95 02 c0       	push   0xc0029590
c001ebfd:	e8 61 3b ff ff       	call   c0012763 <__cxa_atexit>
c001ec02:	83 c4 10             	add    esp,0x10
c001ec05:	83 ec 0c             	sub    esp,0xc
c001ec08:	68 ec 27 03 c0       	push   0xc00327ec
c001ec0d:	e8 ca a9 00 00       	call   c00295dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ec12:	83 c4 10             	add    esp,0x10
c001ec15:	83 ec 04             	sub    esp,0x4
c001ec18:	68 bc dd 02 c0       	push   0xc002ddbc
c001ec1d:	68 ec 27 03 c0       	push   0xc00327ec
c001ec22:	68 90 95 02 c0       	push   0xc0029590
c001ec27:	e8 37 3b ff ff       	call   c0012763 <__cxa_atexit>
c001ec2c:	83 c4 10             	add    esp,0x10
c001ec2f:	90                   	nop
c001ec30:	83 c4 0c             	add    esp,0xc
c001ec33:	c3                   	ret    

c001ec34 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ec34:	83 ec 0c             	sub    esp,0xc
c001ec37:	83 ec 08             	sub    esp,0x8
c001ec3a:	68 ff ff 00 00       	push   0xffff
c001ec3f:	6a 01                	push   0x1
c001ec41:	e8 53 ff ff ff       	call   c001eb99 <__static_initialization_and_destruction_0(int, int)>
c001ec46:	83 c4 10             	add    esp,0x10
c001ec49:	83 c4 0c             	add    esp,0xc
c001ec4c:	c3                   	ret    

c001ec4d <Vm::inbv(unsigned short)>:
c001ec4d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ec51:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ec56:	75 06                	jne    c001ec5e <Vm::inbv(unsigned short)+0x11>
c001ec58:	a0 4c 28 03 c0       	mov    al,ds:0xc003284c
c001ec5d:	c3                   	ret    
c001ec5e:	ec                   	in     al,dx
c001ec5f:	c3                   	ret    

c001ec60 <Vm::outbv(unsigned short, unsigned char)>:
c001ec60:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ec64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec68:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ec6d:	75 25                	jne    c001ec94 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001ec6f:	8b 0d 4c 28 03 c0    	mov    ecx,DWORD PTR ds:0xc003284c
c001ec75:	8d 51 01             	lea    edx,[ecx+0x1]
c001ec78:	88 81 60 28 03 c0    	mov    BYTE PTR [ecx-0x3ffcd7a0],al
c001ec7e:	89 15 4c 28 03 c0    	mov    DWORD PTR ds:0xc003284c,edx
c001ec84:	83 fa 20             	cmp    edx,0x20
c001ec87:	75 0c                	jne    c001ec95 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001ec89:	c7 05 4c 28 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003284c,0x1f
c001ec93:	c3                   	ret    
c001ec94:	ee                   	out    dx,al
c001ec95:	c3                   	ret    

c001ec96 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ec96:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec9b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eca0:	c1 e0 04             	shl    eax,0x4
c001eca3:	01 d0                	add    eax,edx
c001eca5:	c3                   	ret    

c001eca6 <Vm::getSegment(unsigned int)>:
c001eca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecaa:	c1 e8 10             	shr    eax,0x10
c001ecad:	c3                   	ret    

c001ecae <Vm::getOffset(unsigned int)>:
c001ecae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecb2:	c3                   	ret    

c001ecb3 <Vm::mainloop2()>:
c001ecb3:	83 ec 18             	sub    esp,0x18
c001ecb6:	fa                   	cli    
c001ecb7:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001ecbd:	6a 02                	push   0x2
c001ecbf:	c6 05 45 28 03 c0 01 	mov    BYTE PTR ds:0xc0032845,0x1
c001ecc6:	e8 98 f5 ff ff       	call   c001e263 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eccb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ecd0:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ecd4:	52                   	push   edx
c001ecd5:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ecd9:	52                   	push   edx
c001ecda:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ecde:	52                   	push   edx
c001ecdf:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ece3:	50                   	push   eax
c001ece4:	e8 11 16 fe ff       	call   c00002fa <goToVM86>
c001ece9:	83 c4 2c             	add    esp,0x2c
c001ecec:	c3                   	ret    

c001eced <Vm::mainVm8086Loop(void*)>:
c001eced:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001ecf2:	48                   	dec    eax
c001ecf3:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001ecf8:	75 01                	jne    c001ecfb <Vm::mainVm8086Loop(void*)+0xe>
c001ecfa:	fb                   	sti    
c001ecfb:	eb b6                	jmp    c001ecb3 <Vm::mainloop2()>

c001ecfd <Vm::mainloop3(unsigned long)>:
c001ecfd:	83 ec 18             	sub    esp,0x18
c001ed00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed04:	fa                   	cli    
c001ed05:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001ed0b:	6a 02                	push   0x2
c001ed0d:	c6 05 44 28 03 c0 01 	mov    BYTE PTR ds:0xc0032844,0x1
c001ed14:	a3 40 28 03 c0       	mov    ds:0xc0032840,eax
c001ed19:	e8 45 f5 ff ff       	call   c001e263 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ed1e:	83 c4 1c             	add    esp,0x1c
c001ed21:	eb 90                	jmp    c001ecb3 <Vm::mainloop2()>

c001ed23 <Vm::initialise8086()>:
c001ed23:	83 ec 0c             	sub    esp,0xc
c001ed26:	68 80 00 00 00       	push   0x80
c001ed2b:	6a 00                	push   0x0
c001ed2d:	68 ed ec 01 c0       	push   0xc001eced
c001ed32:	ff 35 10 28 03 c0    	push   DWORD PTR ds:0xc0032810
c001ed38:	e8 31 f1 ff ff       	call   c001de6e <Process::createThread(void (*)(void*), void*, int)>
c001ed3d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ed44:	a3 48 28 03 c0       	mov    ds:0xc0032848,eax
c001ed49:	68 00 01 00 00       	push   0x100
c001ed4e:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c001ed53:	6a 00                	push   0x0
c001ed55:	6a 00                	push   0x0
c001ed57:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ed5d:	e8 8e 32 ff ff       	call   c0011ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ed62:	83 c4 2c             	add    esp,0x2c
c001ed65:	c3                   	ret    

c001ed66 <Vm::finish8086()>:
c001ed66:	53                   	push   ebx
c001ed67:	83 ec 08             	sub    esp,0x8
c001ed6a:	fa                   	cli    
c001ed6b:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001ed71:	80 3d 44 28 03 c0 00 	cmp    BYTE PTR ds:0xc0032844,0x0
c001ed78:	75 15                	jne    c001ed8f <Vm::finish8086()+0x29>
c001ed7a:	e8 33 f3 ff ff       	call   c001e0b2 <schedule()>
c001ed7f:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001ed84:	48                   	dec    eax
c001ed85:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001ed8a:	75 de                	jne    c001ed6a <Vm::finish8086()+0x4>
c001ed8c:	fb                   	sti    
c001ed8d:	eb db                	jmp    c001ed6a <Vm::finish8086()+0x4>
c001ed8f:	83 ec 0c             	sub    esp,0xc
c001ed92:	8b 1d 40 28 03 c0    	mov    ebx,DWORD PTR ds:0xc0032840
c001ed98:	ff 35 48 28 03 c0    	push   DWORD PTR ds:0xc0032848
c001ed9e:	c6 05 44 28 03 c0 00 	mov    BYTE PTR ds:0xc0032844,0x0
c001eda5:	e8 cc f7 ff ff       	call   c001e576 <unblockTask(ThreadControlBlock*)>
c001edaa:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001edaf:	83 c4 10             	add    esp,0x10
c001edb2:	8d 50 ff             	lea    edx,[eax-0x1]
c001edb5:	89 15 e8 27 03 c0    	mov    DWORD PTR ds:0xc00327e8,edx
c001edbb:	85 d2                	test   edx,edx
c001edbd:	75 01                	jne    c001edc0 <Vm::finish8086()+0x5a>
c001edbf:	fb                   	sti    
c001edc0:	89 d8                	mov    eax,ebx
c001edc2:	83 c4 08             	add    esp,0x8
c001edc5:	5b                   	pop    ebx
c001edc6:	c3                   	ret    

c001edc7 <Vm::getOutput8086(unsigned char*)>:
c001edc7:	57                   	push   edi
c001edc8:	8b 0d 4c 28 03 c0    	mov    ecx,DWORD PTR ds:0xc003284c
c001edce:	56                   	push   esi
c001edcf:	be 60 28 03 c0       	mov    esi,0xc0032860
c001edd4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001edd8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001edda:	a1 4c 28 03 c0       	mov    eax,ds:0xc003284c
c001eddf:	5e                   	pop    esi
c001ede0:	c7 05 4c 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003284c,0x0
c001edea:	5f                   	pop    edi
c001edeb:	c3                   	ret    

c001edec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001edec:	55                   	push   ebp
c001eded:	57                   	push   edi
c001edee:	56                   	push   esi
c001edef:	53                   	push   ebx
c001edf0:	83 ec 2c             	sub    esp,0x2c
c001edf3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001edf7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001edfb:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001edff:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001ee03:	fa                   	cli    
c001ee04:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c001ee0a:	0f b6 35 45 28 03 c0 	movzx  esi,BYTE PTR ds:0xc0032845
c001ee11:	89 f0                	mov    eax,esi
c001ee13:	84 c0                	test   al,al
c001ee15:	75 1d                	jne    c001ee34 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001ee17:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ee1b:	e8 92 f2 ff ff       	call   c001e0b2 <schedule()>
c001ee20:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001ee25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ee29:	48                   	dec    eax
c001ee2a:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001ee2f:	75 d2                	jne    c001ee03 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ee31:	fb                   	sti    
c001ee32:	eb cf                	jmp    c001ee03 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ee34:	a1 48 28 03 c0       	mov    eax,ds:0xc0032848
c001ee39:	c7 05 4c 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003284c,0x0
c001ee43:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001ee47:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001ee4b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001ee4f:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001ee53:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ee57:	50                   	push   eax
c001ee58:	6a 20                	push   0x20
c001ee5a:	6a 00                	push   0x0
c001ee5c:	68 60 28 03 c0       	push   0xc0032860
c001ee61:	e8 ea 18 fe ff       	call   c0000750 <memset>
c001ee66:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ee6d:	e8 1a 0a ff ff       	call   c000f88c <malloc>
c001ee72:	83 c4 0c             	add    esp,0xc
c001ee75:	89 c3                	mov    ebx,eax
c001ee77:	ff 35 10 28 03 c0    	push   DWORD PTR ds:0xc0032810
c001ee7d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ee81:	50                   	push   eax
c001ee82:	e8 a1 3f ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c001ee87:	83 c4 10             	add    esp,0x10
c001ee8a:	85 db                	test   ebx,ebx
c001ee8c:	75 0a                	jne    c001ee98 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001ee8e:	83 ec 0c             	sub    esp,0xc
c001ee91:	68 63 cf 02 c0       	push   0xc002cf63
c001ee96:	eb 3e                	jmp    c001eed6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ee98:	50                   	push   eax
c001ee99:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ee9d:	50                   	push   eax
c001ee9e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eea2:	50                   	push   eax
c001eea3:	53                   	push   ebx
c001eea4:	e8 8f 42 ff ff       	call   c0013138 <File::stat(unsigned long long*, bool*)>
c001eea9:	83 c4 10             	add    esp,0x10
c001eeac:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001eeb1:	74 0a                	je     c001eebd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eeb3:	83 ec 0c             	sub    esp,0xc
c001eeb6:	68 77 cf 02 c0       	push   0xc002cf77
c001eebb:	eb 19                	jmp    c001eed6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001eebd:	51                   	push   ecx
c001eebe:	51                   	push   ecx
c001eebf:	6a 01                	push   0x1
c001eec1:	53                   	push   ebx
c001eec2:	e8 c5 3f ff ff       	call   c0012e8c <File::open(FileOpenMode)>
c001eec7:	83 c4 10             	add    esp,0x10
c001eeca:	85 c0                	test   eax,eax
c001eecc:	74 24                	je     c001eef2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001eece:	83 ec 0c             	sub    esp,0xc
c001eed1:	68 90 cf 02 c0       	push   0xc002cf90
c001eed6:	e8 24 b4 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001eedb:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001eee0:	83 c4 10             	add    esp,0x10
c001eee3:	48                   	dec    eax
c001eee4:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001eee9:	85 c0                	test   eax,eax
c001eeeb:	75 01                	jne    c001eeee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001eeed:	fb                   	sti    
c001eeee:	31 f6                	xor    esi,esi
c001eef0:	eb 58                	jmp    c001ef4a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001eef2:	0f b7 ed             	movzx  ebp,bp
c001eef5:	50                   	push   eax
c001eef6:	0f b7 ff             	movzx  edi,di
c001eef9:	50                   	push   eax
c001eefa:	55                   	push   ebp
c001eefb:	57                   	push   edi
c001eefc:	e8 95 fd ff ff       	call   c001ec96 <Vm::realToLinear(unsigned short, unsigned short)>
c001ef01:	5a                   	pop    edx
c001ef02:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ef04:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ef08:	51                   	push   ecx
c001ef09:	50                   	push   eax
c001ef0a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ef0e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ef12:	53                   	push   ebx
c001ef13:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ef16:	83 c4 14             	add    esp,0x14
c001ef19:	53                   	push   ebx
c001ef1a:	e8 cb 3f ff ff       	call   c0012eea <File::close()>
c001ef1f:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001ef24:	83 c4 10             	add    esp,0x10
c001ef27:	48                   	dec    eax
c001ef28:	c6 05 45 28 03 c0 00 	mov    BYTE PTR ds:0xc0032845,0x0
c001ef2f:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001ef34:	85 c0                	test   eax,eax
c001ef36:	75 01                	jne    c001ef39 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001ef38:	fb                   	sti    
c001ef39:	83 ec 0c             	sub    esp,0xc
c001ef3c:	ff 35 48 28 03 c0    	push   DWORD PTR ds:0xc0032848
c001ef42:	e8 2f f6 ff ff       	call   c001e576 <unblockTask(ThreadControlBlock*)>
c001ef47:	83 c4 10             	add    esp,0x10
c001ef4a:	83 c4 2c             	add    esp,0x2c
c001ef4d:	89 f0                	mov    eax,esi
c001ef4f:	5b                   	pop    ebx
c001ef50:	5e                   	pop    esi
c001ef51:	5f                   	pop    edi
c001ef52:	5d                   	pop    ebp
c001ef53:	c3                   	ret    

c001ef54 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ef54:	57                   	push   edi
c001ef55:	56                   	push   esi
c001ef56:	53                   	push   ebx
c001ef57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef5f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef63:	83 e8 06             	sub    eax,0x6
c001ef66:	0f b7 c0             	movzx  eax,ax
c001ef69:	50                   	push   eax
c001ef6a:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ef6f:	50                   	push   eax
c001ef70:	e8 21 fd ff ff       	call   c001ec96 <Vm::realToLinear(unsigned short, unsigned short)>
c001ef75:	5a                   	pop    edx
c001ef76:	5e                   	pop    esi
c001ef77:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ef7a:	8d 56 fa             	lea    edx,[esi-0x6]
c001ef7d:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ef83:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ef86:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ef89:	83 c2 02             	add    edx,0x2
c001ef8c:	66 89 10             	mov    WORD PTR [eax],dx
c001ef8f:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ef92:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ef96:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ef99:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ef9d:	89 d6                	mov    esi,edx
c001ef9f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001efa5:	66 81 e6 ff fd       	and    si,0xfdff
c001efaa:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001efae:	74 07                	je     c001efb7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001efb0:	89 d6                	mov    esi,edx
c001efb2:	66 81 ce 00 02       	or     si,0x200
c001efb7:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001efbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001efc0:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001efc4:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001efcc:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001efcf:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001efd7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001efda:	5b                   	pop    ebx
c001efdb:	5e                   	pop    esi
c001efdc:	5f                   	pop    edi
c001efdd:	c3                   	ret    

c001efde <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001efde:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001efe3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001efe8:	c1 e0 04             	shl    eax,0x4
c001efeb:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001efee:	c3                   	ret    

c001efef <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001efef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eff4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eff9:	c1 e0 04             	shl    eax,0x4
c001effc:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f000:	c3                   	ret    

c001f001 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f001:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f006:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f00b:	c1 e0 04             	shl    eax,0x4
c001f00e:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f011:	c3                   	ret    

c001f012 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f012:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f017:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f01c:	c1 e0 04             	shl    eax,0x4
c001f01f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f023:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f026:	c3                   	ret    

c001f027 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f027:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f02c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f031:	c1 e0 04             	shl    eax,0x4
c001f034:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f038:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f03c:	c3                   	ret    

c001f03d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f03d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f042:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f047:	c1 e0 04             	shl    eax,0x4
c001f04a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f04e:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f051:	c3                   	ret    

c001f052 <Vm::faultHandler(regs*)>:
c001f052:	55                   	push   ebp
c001f053:	57                   	push   edi
c001f054:	56                   	push   esi
c001f055:	53                   	push   ebx
c001f056:	83 ec 1c             	sub    esp,0x1c
c001f059:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f05d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001f060:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001f064:	0f b7 f8             	movzx  edi,ax
c001f067:	52                   	push   edx
c001f068:	0f b7 c0             	movzx  eax,ax
c001f06b:	50                   	push   eax
c001f06c:	e8 25 fc ff ff       	call   c001ec96 <Vm::realToLinear(unsigned short, unsigned short)>
c001f071:	5a                   	pop    edx
c001f072:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001f075:	59                   	pop    ecx
c001f076:	89 c1                	mov    ecx,eax
c001f078:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f07b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f07f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f084:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f088:	0f b7 c5             	movzx  eax,bp
c001f08b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f08f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001f093:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f097:	e8 fa fb ff ff       	call   c001ec96 <Vm::realToLinear(unsigned short, unsigned short)>
c001f09c:	5e                   	pop    esi
c001f09d:	be 06 00 00 00       	mov    esi,0x6
c001f0a2:	5a                   	pop    edx
c001f0a3:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001f0a8:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001f0ad:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001f0b0:	80 fa 9d             	cmp    dl,0x9d
c001f0b3:	0f 84 2c 02 00 00    	je     c001f2e5 <Vm::faultHandler(regs*)+0x293>
c001f0b9:	0f 87 91 00 00 00    	ja     c001f150 <Vm::faultHandler(regs*)+0xfe>
c001f0bf:	80 fa 66             	cmp    dl,0x66
c001f0c2:	0f 84 98 01 00 00    	je     c001f260 <Vm::faultHandler(regs*)+0x20e>
c001f0c8:	77 47                	ja     c001f111 <Vm::faultHandler(regs*)+0xbf>
c001f0ca:	80 fa 36             	cmp    dl,0x36
c001f0cd:	0f 84 80 01 00 00    	je     c001f253 <Vm::faultHandler(regs*)+0x201>
c001f0d3:	77 1a                	ja     c001f0ef <Vm::faultHandler(regs*)+0x9d>
c001f0d5:	80 fa 26             	cmp    dl,0x26
c001f0d8:	0f 84 4e 01 00 00    	je     c001f22c <Vm::faultHandler(regs*)+0x1da>
c001f0de:	80 fa 2e             	cmp    dl,0x2e
c001f0e1:	0f 85 e2 05 00 00    	jne    c001f6c9 <Vm::faultHandler(regs*)+0x677>
c001f0e7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f0ea:	31 f6                	xor    esi,esi
c001f0ec:	41                   	inc    ecx
c001f0ed:	eb be                	jmp    c001f0ad <Vm::faultHandler(regs*)+0x5b>
c001f0ef:	80 fa 64             	cmp    dl,0x64
c001f0f2:	0f 84 41 01 00 00    	je     c001f239 <Vm::faultHandler(regs*)+0x1e7>
c001f0f8:	0f 87 48 01 00 00    	ja     c001f246 <Vm::faultHandler(regs*)+0x1f4>
c001f0fe:	80 fa 3e             	cmp    dl,0x3e
c001f101:	0f 85 c2 05 00 00    	jne    c001f6c9 <Vm::faultHandler(regs*)+0x677>
c001f107:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f10a:	be 01 00 00 00       	mov    esi,0x1
c001f10f:	eb db                	jmp    c001f0ec <Vm::faultHandler(regs*)+0x9a>
c001f111:	80 fa 6d             	cmp    dl,0x6d
c001f114:	0f 84 ec 02 00 00    	je     c001f406 <Vm::faultHandler(regs*)+0x3b4>
c001f11a:	77 17                	ja     c001f133 <Vm::faultHandler(regs*)+0xe1>
c001f11c:	80 fa 67             	cmp    dl,0x67
c001f11f:	0f 84 48 01 00 00    	je     c001f26d <Vm::faultHandler(regs*)+0x21b>
c001f125:	80 fa 6c             	cmp    dl,0x6c
c001f128:	0f 84 69 02 00 00    	je     c001f397 <Vm::faultHandler(regs*)+0x345>
c001f12e:	e9 96 05 00 00       	jmp    c001f6c9 <Vm::faultHandler(regs*)+0x677>
c001f133:	80 fa 6f             	cmp    dl,0x6f
c001f136:	0f 84 f4 03 00 00    	je     c001f530 <Vm::faultHandler(regs*)+0x4de>
c001f13c:	0f 82 59 03 00 00    	jb     c001f49b <Vm::faultHandler(regs*)+0x449>
c001f142:	80 fa 9c             	cmp    dl,0x9c
c001f145:	0f 84 2f 01 00 00    	je     c001f27a <Vm::faultHandler(regs*)+0x228>
c001f14b:	e9 79 05 00 00       	jmp    c001f6c9 <Vm::faultHandler(regs*)+0x677>
c001f150:	80 fa ec             	cmp    dl,0xec
c001f153:	0f 84 14 05 00 00    	je     c001f66d <Vm::faultHandler(regs*)+0x61b>
c001f159:	77 7b                	ja     c001f1d6 <Vm::faultHandler(regs*)+0x184>
c001f15b:	80 fa e4             	cmp    dl,0xe4
c001f15e:	0f 84 93 04 00 00    	je     c001f5f7 <Vm::faultHandler(regs*)+0x5a5>
c001f164:	77 53                	ja     c001f1b9 <Vm::faultHandler(regs*)+0x167>
c001f166:	80 fa cd             	cmp    dl,0xcd
c001f169:	0f 84 d9 01 00 00    	je     c001f348 <Vm::faultHandler(regs*)+0x2f6>
c001f16f:	80 fa cf             	cmp    dl,0xcf
c001f172:	0f 85 51 05 00 00    	jne    c001f6c9 <Vm::faultHandler(regs*)+0x677>
c001f178:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f17b:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001f17e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001f182:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001f185:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001f189:	81 ca 00 02 02 00    	or     edx,0x20200
c001f18f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f192:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001f196:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f19c:	66 c1 e8 09          	shr    ax,0x9
c001f1a0:	83 e0 01             	and    eax,0x1
c001f1a3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1a6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f1a9:	83 c0 06             	add    eax,0x6
c001f1ac:	25 ff ff 00 00       	and    eax,0xffff
c001f1b1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f1b4:	e9 0c 05 00 00       	jmp    c001f6c5 <Vm::faultHandler(regs*)+0x673>
c001f1b9:	80 fa e6             	cmp    dl,0xe6
c001f1bc:	0f 84 7f 04 00 00    	je     c001f641 <Vm::faultHandler(regs*)+0x5ef>
c001f1c2:	0f 82 4b 04 00 00    	jb     c001f613 <Vm::faultHandler(regs*)+0x5c1>
c001f1c8:	80 fa e7             	cmp    dl,0xe7
c001f1cb:	0f 84 87 04 00 00    	je     c001f658 <Vm::faultHandler(regs*)+0x606>
c001f1d1:	e9 f3 04 00 00       	jmp    c001f6c9 <Vm::faultHandler(regs*)+0x677>
c001f1d6:	80 fa ef             	cmp    dl,0xef
c001f1d9:	0f 84 d1 04 00 00    	je     c001f6b0 <Vm::faultHandler(regs*)+0x65e>
c001f1df:	77 28                	ja     c001f209 <Vm::faultHandler(regs*)+0x1b7>
c001f1e1:	80 fa ed             	cmp    dl,0xed
c001f1e4:	0f 84 9f 04 00 00    	je     c001f689 <Vm::faultHandler(regs*)+0x637>
c001f1ea:	80 fa ee             	cmp    dl,0xee
c001f1ed:	0f 85 d6 04 00 00    	jne    c001f6c9 <Vm::faultHandler(regs*)+0x677>
c001f1f3:	50                   	push   eax
c001f1f4:	50                   	push   eax
c001f1f5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f1f9:	50                   	push   eax
c001f1fa:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f1fe:	50                   	push   eax
c001f1ff:	e8 5c fa ff ff       	call   c001ec60 <Vm::outbv(unsigned short, unsigned char)>
c001f204:	e9 9f 04 00 00       	jmp    c001f6a8 <Vm::faultHandler(regs*)+0x656>
c001f209:	80 fa fa             	cmp    dl,0xfa
c001f20c:	0f 84 69 01 00 00    	je     c001f37b <Vm::faultHandler(regs*)+0x329>
c001f212:	80 fa fb             	cmp    dl,0xfb
c001f215:	0f 84 6e 01 00 00    	je     c001f389 <Vm::faultHandler(regs*)+0x337>
c001f21b:	80 fa f3             	cmp    dl,0xf3
c001f21e:	0f 85 a5 04 00 00    	jne    c001f6c9 <Vm::faultHandler(regs*)+0x677>
c001f224:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f227:	e9 c0 fe ff ff       	jmp    c001f0ec <Vm::faultHandler(regs*)+0x9a>
c001f22c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f22f:	be 02 00 00 00       	mov    esi,0x2
c001f234:	e9 b3 fe ff ff       	jmp    c001f0ec <Vm::faultHandler(regs*)+0x9a>
c001f239:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f23c:	be 03 00 00 00       	mov    esi,0x3
c001f241:	e9 a6 fe ff ff       	jmp    c001f0ec <Vm::faultHandler(regs*)+0x9a>
c001f246:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f249:	be 04 00 00 00       	mov    esi,0x4
c001f24e:	e9 99 fe ff ff       	jmp    c001f0ec <Vm::faultHandler(regs*)+0x9a>
c001f253:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f256:	be 05 00 00 00       	mov    esi,0x5
c001f25b:	e9 8c fe ff ff       	jmp    c001f0ec <Vm::faultHandler(regs*)+0x9a>
c001f260:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f263:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001f268:	e9 7f fe ff ff       	jmp    c001f0ec <Vm::faultHandler(regs*)+0x9a>
c001f26d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f270:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001f275:	e9 72 fe ff ff       	jmp    c001f0ec <Vm::faultHandler(regs*)+0x9a>
c001f27a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f27d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f281:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f286:	74 30                	je     c001f2b8 <Vm::faultHandler(regs*)+0x266>
c001f288:	83 e9 04             	sub    ecx,0x4
c001f28b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f291:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f297:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f29a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f29d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f2a3:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f2a7:	0f 84 15 04 00 00    	je     c001f6c2 <Vm::faultHandler(regs*)+0x670>
c001f2ad:	80 ce 02             	or     dh,0x2
c001f2b0:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f2b3:	e9 0a 04 00 00       	jmp    c001f6c2 <Vm::faultHandler(regs*)+0x670>
c001f2b8:	83 e9 02             	sub    ecx,0x2
c001f2bb:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f2c1:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f2c4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f2c8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f2ce:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f2d2:	74 05                	je     c001f2d9 <Vm::faultHandler(regs*)+0x287>
c001f2d4:	80 ce 02             	or     dh,0x2
c001f2d7:	eb 03                	jmp    c001f2dc <Vm::faultHandler(regs*)+0x28a>
c001f2d9:	80 e6 fd             	and    dh,0xfd
c001f2dc:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f2e0:	e9 dd 03 00 00       	jmp    c001f6c2 <Vm::faultHandler(regs*)+0x670>
c001f2e5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f2ea:	74 2a                	je     c001f316 <Vm::faultHandler(regs*)+0x2c4>
c001f2ec:	8b 10                	mov    edx,DWORD PTR [eax]
c001f2ee:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f2f4:	81 ca 00 02 02 00    	or     edx,0x20200
c001f2fa:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f2fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001f2ff:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f305:	c1 e8 09             	shr    eax,0x9
c001f308:	83 e0 01             	and    eax,0x1
c001f30b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f30e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f311:	83 c0 04             	add    eax,0x4
c001f314:	eb 25                	jmp    c001f33b <Vm::faultHandler(regs*)+0x2e9>
c001f316:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f319:	81 ca 00 02 02 00    	or     edx,0x20200
c001f31f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f322:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f325:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f32b:	66 c1 e8 09          	shr    ax,0x9
c001f32f:	83 e0 01             	and    eax,0x1
c001f332:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f335:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f338:	83 c0 02             	add    eax,0x2
c001f33b:	25 ff ff 00 00       	and    eax,0xffff
c001f340:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f343:	e9 7a 03 00 00       	jmp    c001f6c2 <Vm::faultHandler(regs*)+0x670>
c001f348:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f34c:	3c ee                	cmp    al,0xee
c001f34e:	75 10                	jne    c001f360 <Vm::faultHandler(regs*)+0x30e>
c001f350:	83 ec 0c             	sub    esp,0xc
c001f353:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f356:	e8 a2 f9 ff ff       	call   c001ecfd <Vm::mainloop3(unsigned long)>
c001f35b:	e9 4b 03 00 00       	jmp    c001f6ab <Vm::faultHandler(regs*)+0x659>
c001f360:	83 ec 0c             	sub    esp,0xc
c001f363:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f367:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f36b:	51                   	push   ecx
c001f36c:	50                   	push   eax
c001f36d:	53                   	push   ebx
c001f36e:	e8 e1 fb ff ff       	call   c001ef54 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f373:	83 c4 20             	add    esp,0x20
c001f376:	e9 4a 03 00 00       	jmp    c001f6c5 <Vm::faultHandler(regs*)+0x673>
c001f37b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f380:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f384:	e9 39 03 00 00       	jmp    c001f6c2 <Vm::faultHandler(regs*)+0x670>
c001f389:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f38e:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f392:	e9 2b 03 00 00       	jmp    c001f6c2 <Vm::faultHandler(regs*)+0x670>
c001f397:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f39a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f39f:	74 2b                	je     c001f3cc <Vm::faultHandler(regs*)+0x37a>
c001f3a1:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f3a8:	76 22                	jbe    c001f3cc <Vm::faultHandler(regs*)+0x37a>
c001f3aa:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f3ae:	50                   	push   eax
c001f3af:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f3b3:	50                   	push   eax
c001f3b4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f3b8:	50                   	push   eax
c001f3b9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f3bd:	50                   	push   eax
c001f3be:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f3c2:	50                   	push   eax
c001f3c3:	6a 6c                	push   0x6c
c001f3c5:	6a 6c                	push   0x6c
c001f3c7:	e9 b9 01 00 00       	jmp    c001f585 <Vm::faultHandler(regs*)+0x533>
c001f3cc:	83 ec 0c             	sub    esp,0xc
c001f3cf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f3d3:	0f b7 f6             	movzx  esi,si
c001f3d6:	50                   	push   eax
c001f3d7:	e8 71 f8 ff ff       	call   c001ec4d <Vm::inbv(unsigned short)>
c001f3dc:	83 c4 0c             	add    esp,0xc
c001f3df:	0f b6 c0             	movzx  eax,al
c001f3e2:	50                   	push   eax
c001f3e3:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f3e7:	50                   	push   eax
c001f3e8:	56                   	push   esi
c001f3e9:	e8 24 fc ff ff       	call   c001f012 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f3ee:	83 c4 10             	add    esp,0x10
c001f3f1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f3f4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f3f8:	74 03                	je     c001f3fd <Vm::faultHandler(regs*)+0x3ab>
c001f3fa:	48                   	dec    eax
c001f3fb:	eb 01                	jmp    c001f3fe <Vm::faultHandler(regs*)+0x3ac>
c001f3fd:	40                   	inc    eax
c001f3fe:	0f b7 c0             	movzx  eax,ax
c001f401:	e9 8d 00 00 00       	jmp    c001f493 <Vm::faultHandler(regs*)+0x441>
c001f406:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f409:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f40c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f411:	74 29                	je     c001f43c <Vm::faultHandler(regs*)+0x3ea>
c001f413:	3d ff ff 00 00       	cmp    eax,0xffff
c001f418:	76 22                	jbe    c001f43c <Vm::faultHandler(regs*)+0x3ea>
c001f41a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f41e:	50                   	push   eax
c001f41f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f423:	50                   	push   eax
c001f424:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f428:	50                   	push   eax
c001f429:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f42d:	50                   	push   eax
c001f42e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f432:	50                   	push   eax
c001f433:	6a 6d                	push   0x6d
c001f435:	6a 6d                	push   0x6d
c001f437:	e9 49 01 00 00       	jmp    c001f585 <Vm::faultHandler(regs*)+0x533>
c001f43c:	0f b7 c8             	movzx  ecx,ax
c001f43f:	0f b7 f6             	movzx  esi,si
c001f442:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f445:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f44a:	74 20                	je     c001f46c <Vm::faultHandler(regs*)+0x41a>
c001f44c:	ed                   	in     eax,dx
c001f44d:	55                   	push   ebp
c001f44e:	50                   	push   eax
c001f44f:	51                   	push   ecx
c001f450:	56                   	push   esi
c001f451:	e8 e7 fb ff ff       	call   c001f03d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f456:	83 c4 10             	add    esp,0x10
c001f459:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f45c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f460:	74 05                	je     c001f467 <Vm::faultHandler(regs*)+0x415>
c001f462:	83 e8 04             	sub    eax,0x4
c001f465:	eb 27                	jmp    c001f48e <Vm::faultHandler(regs*)+0x43c>
c001f467:	83 c0 04             	add    eax,0x4
c001f46a:	eb 22                	jmp    c001f48e <Vm::faultHandler(regs*)+0x43c>
c001f46c:	66 ed                	in     ax,dx
c001f46e:	0f b7 c0             	movzx  eax,ax
c001f471:	57                   	push   edi
c001f472:	50                   	push   eax
c001f473:	51                   	push   ecx
c001f474:	56                   	push   esi
c001f475:	e8 ad fb ff ff       	call   c001f027 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f47a:	83 c4 10             	add    esp,0x10
c001f47d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f480:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f484:	74 05                	je     c001f48b <Vm::faultHandler(regs*)+0x439>
c001f486:	83 e8 02             	sub    eax,0x2
c001f489:	eb 03                	jmp    c001f48e <Vm::faultHandler(regs*)+0x43c>
c001f48b:	83 c0 02             	add    eax,0x2
c001f48e:	25 ff ff 00 00       	and    eax,0xffff
c001f493:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f496:	e9 27 02 00 00       	jmp    c001f6c2 <Vm::faultHandler(regs*)+0x670>
c001f49b:	8d 46 ff             	lea    eax,[esi-0x1]
c001f49e:	3c 05                	cmp    al,0x5
c001f4a0:	77 24                	ja     c001f4c6 <Vm::faultHandler(regs*)+0x474>
c001f4a2:	0f b6 c0             	movzx  eax,al
c001f4a5:	ff 24 85 04 d0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2ffc]
c001f4ac:	0f b7 fd             	movzx  edi,bp
c001f4af:	eb 15                	jmp    c001f4c6 <Vm::faultHandler(regs*)+0x474>
c001f4b1:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f4b5:	eb 0f                	jmp    c001f4c6 <Vm::faultHandler(regs*)+0x474>
c001f4b7:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f4bb:	eb 09                	jmp    c001f4c6 <Vm::faultHandler(regs*)+0x474>
c001f4bd:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f4c1:	eb 03                	jmp    c001f4c6 <Vm::faultHandler(regs*)+0x474>
c001f4c3:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f4c6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f4c9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f4ce:	74 29                	je     c001f4f9 <Vm::faultHandler(regs*)+0x4a7>
c001f4d0:	3d ff ff 00 00       	cmp    eax,0xffff
c001f4d5:	76 22                	jbe    c001f4f9 <Vm::faultHandler(regs*)+0x4a7>
c001f4d7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f4db:	50                   	push   eax
c001f4dc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f4e0:	50                   	push   eax
c001f4e1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f4e5:	50                   	push   eax
c001f4e6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f4ea:	50                   	push   eax
c001f4eb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f4ef:	50                   	push   eax
c001f4f0:	6a 6e                	push   0x6e
c001f4f2:	6a 6e                	push   0x6e
c001f4f4:	e9 8c 00 00 00       	jmp    c001f585 <Vm::faultHandler(regs*)+0x533>
c001f4f9:	0f b7 c0             	movzx  eax,ax
c001f4fc:	52                   	push   edx
c001f4fd:	52                   	push   edx
c001f4fe:	50                   	push   eax
c001f4ff:	57                   	push   edi
c001f500:	e8 d9 fa ff ff       	call   c001efde <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f505:	59                   	pop    ecx
c001f506:	0f b6 c0             	movzx  eax,al
c001f509:	5e                   	pop    esi
c001f50a:	50                   	push   eax
c001f50b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f50f:	50                   	push   eax
c001f510:	e8 4b f7 ff ff       	call   c001ec60 <Vm::outbv(unsigned short, unsigned char)>
c001f515:	83 c4 10             	add    esp,0x10
c001f518:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f51b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f51f:	74 03                	je     c001f524 <Vm::faultHandler(regs*)+0x4d2>
c001f521:	48                   	dec    eax
c001f522:	eb 01                	jmp    c001f525 <Vm::faultHandler(regs*)+0x4d3>
c001f524:	40                   	inc    eax
c001f525:	0f b7 c0             	movzx  eax,ax
c001f528:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f52b:	e9 92 01 00 00       	jmp    c001f6c2 <Vm::faultHandler(regs*)+0x670>
c001f530:	8d 46 ff             	lea    eax,[esi-0x1]
c001f533:	3c 05                	cmp    al,0x5
c001f535:	77 1f                	ja     c001f556 <Vm::faultHandler(regs*)+0x504>
c001f537:	0f b6 c0             	movzx  eax,al
c001f53a:	ff 24 85 1c d0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2fe4]
c001f541:	89 ef                	mov    edi,ebp
c001f543:	eb 11                	jmp    c001f556 <Vm::faultHandler(regs*)+0x504>
c001f545:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f548:	eb 0c                	jmp    c001f556 <Vm::faultHandler(regs*)+0x504>
c001f54a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f54d:	eb 07                	jmp    c001f556 <Vm::faultHandler(regs*)+0x504>
c001f54f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f552:	eb 02                	jmp    c001f556 <Vm::faultHandler(regs*)+0x504>
c001f554:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f556:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f559:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f55e:	74 37                	je     c001f597 <Vm::faultHandler(regs*)+0x545>
c001f560:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f566:	76 2f                	jbe    c001f597 <Vm::faultHandler(regs*)+0x545>
c001f568:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f56c:	50                   	push   eax
c001f56d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f571:	50                   	push   eax
c001f572:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f576:	50                   	push   eax
c001f577:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f57b:	50                   	push   eax
c001f57c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f580:	50                   	push   eax
c001f581:	6a 6f                	push   0x6f
c001f583:	6a 6f                	push   0x6f
c001f585:	68 a9 cf 02 c0       	push   0xc002cfa9
c001f58a:	e8 3a 33 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001f58f:	83 c4 20             	add    esp,0x20
c001f592:	e9 86 01 00 00       	jmp    c001f71d <Vm::faultHandler(regs*)+0x6cb>
c001f597:	0f b7 d7             	movzx  edx,di
c001f59a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f59d:	0f b7 c6             	movzx  eax,si
c001f5a0:	81 e1 00 04 00 00    	and    ecx,0x400
c001f5a6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f5a9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f5ae:	74 1d                	je     c001f5cd <Vm::faultHandler(regs*)+0x57b>
c001f5b0:	55                   	push   ebp
c001f5b1:	55                   	push   ebp
c001f5b2:	50                   	push   eax
c001f5b3:	52                   	push   edx
c001f5b4:	e8 48 fa ff ff       	call   c001f001 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f5b9:	83 c4 10             	add    esp,0x10
c001f5bc:	89 fa                	mov    edx,edi
c001f5be:	ef                   	out    dx,eax
c001f5bf:	85 c9                	test   ecx,ecx
c001f5c1:	74 05                	je     c001f5c8 <Vm::faultHandler(regs*)+0x576>
c001f5c3:	83 ee 04             	sub    esi,0x4
c001f5c6:	eb 21                	jmp    c001f5e9 <Vm::faultHandler(regs*)+0x597>
c001f5c8:	83 c6 04             	add    esi,0x4
c001f5cb:	eb 1c                	jmp    c001f5e9 <Vm::faultHandler(regs*)+0x597>
c001f5cd:	55                   	push   ebp
c001f5ce:	55                   	push   ebp
c001f5cf:	50                   	push   eax
c001f5d0:	52                   	push   edx
c001f5d1:	e8 19 fa ff ff       	call   c001efef <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f5d6:	83 c4 10             	add    esp,0x10
c001f5d9:	89 fa                	mov    edx,edi
c001f5db:	66 ef                	out    dx,ax
c001f5dd:	85 c9                	test   ecx,ecx
c001f5df:	74 05                	je     c001f5e6 <Vm::faultHandler(regs*)+0x594>
c001f5e1:	83 ee 02             	sub    esi,0x2
c001f5e4:	eb 03                	jmp    c001f5e9 <Vm::faultHandler(regs*)+0x597>
c001f5e6:	83 c6 02             	add    esi,0x2
c001f5e9:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f5ef:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f5f2:	e9 cb 00 00 00       	jmp    c001f6c2 <Vm::faultHandler(regs*)+0x670>
c001f5f7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f5fe:	83 ec 0c             	sub    esp,0xc
c001f601:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f605:	50                   	push   eax
c001f606:	e8 42 f6 ff ff       	call   c001ec4d <Vm::inbv(unsigned short)>
c001f60b:	0f b6 c0             	movzx  eax,al
c001f60e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f611:	eb 3f                	jmp    c001f652 <Vm::faultHandler(regs*)+0x600>
c001f613:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f618:	74 07                	je     c001f621 <Vm::faultHandler(regs*)+0x5cf>
c001f61a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f61e:	ed                   	in     eax,dx
c001f61f:	eb 14                	jmp    c001f635 <Vm::faultHandler(regs*)+0x5e3>
c001f621:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f624:	66 31 f6             	xor    si,si
c001f627:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f62a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f62e:	66 ed                	in     ax,dx
c001f630:	0f b7 c0             	movzx  eax,ax
c001f633:	09 f0                	or     eax,esi
c001f635:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f638:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f63c:	e9 84 00 00 00       	jmp    c001f6c5 <Vm::faultHandler(regs*)+0x673>
c001f641:	52                   	push   edx
c001f642:	52                   	push   edx
c001f643:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f647:	50                   	push   eax
c001f648:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f64c:	50                   	push   eax
c001f64d:	e8 0e f6 ff ff       	call   c001ec60 <Vm::outbv(unsigned short, unsigned char)>
c001f652:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f656:	eb 53                	jmp    c001f6ab <Vm::faultHandler(regs*)+0x659>
c001f658:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f65b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f65f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f664:	74 03                	je     c001f669 <Vm::faultHandler(regs*)+0x617>
c001f666:	ef                   	out    dx,eax
c001f667:	eb cf                	jmp    c001f638 <Vm::faultHandler(regs*)+0x5e6>
c001f669:	66 ef                	out    dx,ax
c001f66b:	eb cb                	jmp    c001f638 <Vm::faultHandler(regs*)+0x5e6>
c001f66d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f674:	83 ec 0c             	sub    esp,0xc
c001f677:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f67b:	50                   	push   eax
c001f67c:	e8 cc f5 ff ff       	call   c001ec4d <Vm::inbv(unsigned short)>
c001f681:	0f b6 c0             	movzx  eax,al
c001f684:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f687:	eb 1f                	jmp    c001f6a8 <Vm::faultHandler(regs*)+0x656>
c001f689:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f68c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f691:	74 03                	je     c001f696 <Vm::faultHandler(regs*)+0x644>
c001f693:	ed                   	in     eax,dx
c001f694:	eb 0d                	jmp    c001f6a3 <Vm::faultHandler(regs*)+0x651>
c001f696:	66 ed                	in     ax,dx
c001f698:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f69b:	0f b7 c0             	movzx  eax,ax
c001f69e:	66 31 d2             	xor    dx,dx
c001f6a1:	09 d0                	or     eax,edx
c001f6a3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f6a6:	eb 1a                	jmp    c001f6c2 <Vm::faultHandler(regs*)+0x670>
c001f6a8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f6ab:	83 c4 10             	add    esp,0x10
c001f6ae:	eb 15                	jmp    c001f6c5 <Vm::faultHandler(regs*)+0x673>
c001f6b0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f6b3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f6b6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f6bb:	74 03                	je     c001f6c0 <Vm::faultHandler(regs*)+0x66e>
c001f6bd:	ef                   	out    dx,eax
c001f6be:	eb 02                	jmp    c001f6c2 <Vm::faultHandler(regs*)+0x670>
c001f6c0:	66 ef                	out    dx,ax
c001f6c2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f6c5:	b0 01                	mov    al,0x1
c001f6c7:	eb 56                	jmp    c001f71f <Vm::faultHandler(regs*)+0x6cd>
c001f6c9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f6cd:	50                   	push   eax
c001f6ce:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f6d2:	50                   	push   eax
c001f6d3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f6d7:	50                   	push   eax
c001f6d8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f6dc:	50                   	push   eax
c001f6dd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f6e1:	50                   	push   eax
c001f6e2:	52                   	push   edx
c001f6e3:	52                   	push   edx
c001f6e4:	68 d6 cf 02 c0       	push   0xc002cfd6
c001f6e9:	e8 db 31 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c001f6ee:	83 c4 20             	add    esp,0x20
c001f6f1:	83 ec 0c             	sub    esp,0xc
c001f6f4:	6a 60                	push   0x60
c001f6f6:	e8 52 f5 ff ff       	call   c001ec4d <Vm::inbv(unsigned short)>
c001f6fb:	83 c4 10             	add    esp,0x10
c001f6fe:	3c 1c                	cmp    al,0x1c
c001f700:	74 04                	je     c001f706 <Vm::faultHandler(regs*)+0x6b4>
c001f702:	3c 5a                	cmp    al,0x5a
c001f704:	75 eb                	jne    c001f6f1 <Vm::faultHandler(regs*)+0x69f>
c001f706:	3c 5a                	cmp    al,0x5a
c001f708:	74 04                	je     c001f70e <Vm::faultHandler(regs*)+0x6bc>
c001f70a:	3c 1c                	cmp    al,0x1c
c001f70c:	75 0f                	jne    c001f71d <Vm::faultHandler(regs*)+0x6cb>
c001f70e:	83 ec 0c             	sub    esp,0xc
c001f711:	6a 60                	push   0x60
c001f713:	e8 35 f5 ff ff       	call   c001ec4d <Vm::inbv(unsigned short)>
c001f718:	83 c4 10             	add    esp,0x10
c001f71b:	eb e9                	jmp    c001f706 <Vm::faultHandler(regs*)+0x6b4>
c001f71d:	31 c0                	xor    eax,eax
c001f71f:	83 c4 1c             	add    esp,0x1c
c001f722:	5b                   	pop    ebx
c001f723:	5e                   	pop    esi
c001f724:	5f                   	pop    edi
c001f725:	5d                   	pop    ebp
c001f726:	c3                   	ret    

c001f727 <Vm::fpuInternalTo32(unsigned long long)>:
c001f727:	57                   	push   edi
c001f728:	56                   	push   esi
c001f729:	53                   	push   ebx
c001f72a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f732:	89 d6                	mov    esi,edx
c001f734:	89 d7                	mov    edi,edx
c001f736:	89 c1                	mov    ecx,eax
c001f738:	c1 ef 14             	shr    edi,0x14
c001f73b:	89 d3                	mov    ebx,edx
c001f73d:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f743:	31 d2                	xor    edx,edx
c001f745:	89 f8                	mov    eax,edi
c001f747:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f74d:	bf ff 00 00 00       	mov    edi,0xff
c001f752:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f757:	83 d2 ff             	adc    edx,0xffffffff
c001f75a:	39 c7                	cmp    edi,eax
c001f75c:	bf 00 00 00 00       	mov    edi,0x0
c001f761:	19 d7                	sbb    edi,edx
c001f763:	72 15                	jb     c001f77a <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f765:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f769:	c1 e0 17             	shl    eax,0x17
c001f76c:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f772:	09 f1                	or     ecx,esi
c001f774:	09 c1                	or     ecx,eax
c001f776:	89 cf                	mov    edi,ecx
c001f778:	eb 02                	jmp    c001f77c <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f77a:	31 ff                	xor    edi,edi
c001f77c:	89 f8                	mov    eax,edi
c001f77e:	5b                   	pop    ebx
c001f77f:	5e                   	pop    esi
c001f780:	5f                   	pop    edi
c001f781:	c3                   	ret    

c001f782 <Vm::fpuInternalTo64(unsigned long long)>:
c001f782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f786:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f78a:	c3                   	ret    

c001f78b <Vm::fpu32ToInternal(unsigned int)>:
c001f78b:	57                   	push   edi
c001f78c:	31 ff                	xor    edi,edi
c001f78e:	56                   	push   esi
c001f78f:	53                   	push   ebx
c001f790:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f794:	89 cb                	mov    ebx,ecx
c001f796:	89 ce                	mov    esi,ecx
c001f798:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f79e:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f7a4:	c1 e9 17             	shr    ecx,0x17
c001f7a7:	89 f0                	mov    eax,esi
c001f7a9:	0f b6 d1             	movzx  edx,cl
c001f7ac:	81 c2 80 03 00 00    	add    edx,0x380
c001f7b2:	89 d1                	mov    ecx,edx
c001f7b4:	89 fa                	mov    edx,edi
c001f7b6:	c1 e1 14             	shl    ecx,0x14
c001f7b9:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f7bd:	c1 e0 1d             	shl    eax,0x1d
c001f7c0:	89 d7                	mov    edi,edx
c001f7c2:	89 c6                	mov    esi,eax
c001f7c4:	89 ca                	mov    edx,ecx
c001f7c6:	89 f0                	mov    eax,esi
c001f7c8:	09 fa                	or     edx,edi
c001f7ca:	09 da                	or     edx,ebx
c001f7cc:	5b                   	pop    ebx
c001f7cd:	5e                   	pop    esi
c001f7ce:	5f                   	pop    edi
c001f7cf:	c3                   	ret    

c001f7d0 <Vm::fpu64ToInternal(unsigned long long)>:
c001f7d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7d8:	c3                   	ret    

c001f7d9 <Vm::fpuFloatToLong(unsigned long long)>:
c001f7d9:	57                   	push   edi
c001f7da:	31 c0                	xor    eax,eax
c001f7dc:	56                   	push   esi
c001f7dd:	31 d2                	xor    edx,edx
c001f7df:	53                   	push   ebx
c001f7e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7e4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7e8:	89 d9                	mov    ecx,ebx
c001f7ea:	c1 e9 14             	shr    ecx,0x14
c001f7ed:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f7f3:	89 cf                	mov    edi,ecx
c001f7f5:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f7fb:	78 33                	js     c001f830 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7fd:	89 d9                	mov    ecx,ebx
c001f7ff:	89 f0                	mov    eax,esi
c001f801:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f807:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f80d:	89 ca                	mov    edx,ecx
c001f80f:	b9 34 00 00 00       	mov    ecx,0x34
c001f814:	29 f9                	sub    ecx,edi
c001f816:	0f ad d0             	shrd   eax,edx,cl
c001f819:	d3 fa                	sar    edx,cl
c001f81b:	f6 c1 20             	test   cl,0x20
c001f81e:	74 05                	je     c001f825 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f820:	89 d0                	mov    eax,edx
c001f822:	c1 fa 1f             	sar    edx,0x1f
c001f825:	85 db                	test   ebx,ebx
c001f827:	79 07                	jns    c001f830 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f829:	f7 d8                	neg    eax
c001f82b:	83 d2 00             	adc    edx,0x0
c001f82e:	f7 da                	neg    edx
c001f830:	5b                   	pop    ebx
c001f831:	5e                   	pop    esi
c001f832:	5f                   	pop    edi
c001f833:	c3                   	ret    

c001f834 <Vm::fpuULongToFloat(unsigned long long)>:
c001f834:	57                   	push   edi
c001f835:	31 c9                	xor    ecx,ecx
c001f837:	56                   	push   esi
c001f838:	53                   	push   ebx
c001f839:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f83d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f841:	0f ba e7 14          	bt     edi,0x14
c001f845:	72 07                	jb     c001f84e <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f847:	01 f6                	add    esi,esi
c001f849:	11 ff                	adc    edi,edi
c001f84b:	41                   	inc    ecx
c001f84c:	eb f3                	jmp    c001f841 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f84e:	89 fa                	mov    edx,edi
c001f850:	89 f0                	mov    eax,esi
c001f852:	bb 33 04 00 00       	mov    ebx,0x433
c001f857:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f85d:	29 cb                	sub    ebx,ecx
c001f85f:	89 d9                	mov    ecx,ebx
c001f861:	5b                   	pop    ebx
c001f862:	c1 e1 14             	shl    ecx,0x14
c001f865:	5e                   	pop    esi
c001f866:	09 ca                	or     edx,ecx
c001f868:	5f                   	pop    edi
c001f869:	c3                   	ret    

c001f86a <Vm::fpuLongToFloat(long long)>:
c001f86a:	56                   	push   esi
c001f86b:	31 c0                	xor    eax,eax
c001f86d:	53                   	push   ebx
c001f86e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f872:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f876:	39 c8                	cmp    eax,ecx
c001f878:	19 d8                	sbb    eax,ebx
c001f87a:	7d 04                	jge    c001f880 <Vm::fpuLongToFloat(long long)+0x16>
c001f87c:	31 f6                	xor    esi,esi
c001f87e:	eb 0c                	jmp    c001f88c <Vm::fpuLongToFloat(long long)+0x22>
c001f880:	f7 d9                	neg    ecx
c001f882:	be 01 00 00 00       	mov    esi,0x1
c001f887:	83 d3 00             	adc    ebx,0x0
c001f88a:	f7 db                	neg    ebx
c001f88c:	31 c0                	xor    eax,eax
c001f88e:	0f ba e3 14          	bt     ebx,0x14
c001f892:	72 07                	jb     c001f89b <Vm::fpuLongToFloat(long long)+0x31>
c001f894:	01 c9                	add    ecx,ecx
c001f896:	11 db                	adc    ebx,ebx
c001f898:	40                   	inc    eax
c001f899:	eb f3                	jmp    c001f88e <Vm::fpuLongToFloat(long long)+0x24>
c001f89b:	ba 33 04 00 00       	mov    edx,0x433
c001f8a0:	29 c2                	sub    edx,eax
c001f8a2:	89 c8                	mov    eax,ecx
c001f8a4:	c1 e2 14             	shl    edx,0x14
c001f8a7:	89 d9                	mov    ecx,ebx
c001f8a9:	89 f3                	mov    ebx,esi
c001f8ab:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f8b1:	09 ca                	or     edx,ecx
c001f8b3:	84 db                	test   bl,bl
c001f8b5:	74 06                	je     c001f8bd <Vm::fpuLongToFloat(long long)+0x53>
c001f8b7:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f8bd:	5b                   	pop    ebx
c001f8be:	5e                   	pop    esi
c001f8bf:	c3                   	ret    

c001f8c0 <Vm::fpuGet0()>:
c001f8c0:	31 c0                	xor    eax,eax
c001f8c2:	31 d2                	xor    edx,edx
c001f8c4:	c3                   	ret    

c001f8c5 <Vm::fpuGet1()>:
c001f8c5:	b8 01 00 00 00       	mov    eax,0x1
c001f8ca:	31 d2                	xor    edx,edx
c001f8cc:	c3                   	ret    

c001f8cd <Vm::fpuGetPi()>:
c001f8cd:	b8 03 00 00 00       	mov    eax,0x3
c001f8d2:	31 d2                	xor    edx,edx
c001f8d4:	c3                   	ret    

c001f8d5 <Vm::fpuGetLog2E()>:
c001f8d5:	83 ec 18             	sub    esp,0x18
c001f8d8:	68 34 d0 02 c0       	push   0xc002d034
c001f8dd:	e8 1d aa ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001f8e2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8e7:	31 d2                	xor    edx,edx
c001f8e9:	83 c4 1c             	add    esp,0x1c
c001f8ec:	c3                   	ret    

c001f8ed <Vm::fpuGetLogE2()>:
c001f8ed:	83 ec 18             	sub    esp,0x18
c001f8f0:	68 40 d0 02 c0       	push   0xc002d040
c001f8f5:	e8 05 aa ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001f8fa:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8ff:	31 d2                	xor    edx,edx
c001f901:	83 c4 1c             	add    esp,0x1c
c001f904:	c3                   	ret    

c001f905 <Vm::fpuGetLog210()>:
c001f905:	83 ec 18             	sub    esp,0x18
c001f908:	68 4c d0 02 c0       	push   0xc002d04c
c001f90d:	e8 ed a9 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001f912:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f917:	31 d2                	xor    edx,edx
c001f919:	83 c4 1c             	add    esp,0x1c
c001f91c:	c3                   	ret    

c001f91d <Vm::fpuGetLog102()>:
c001f91d:	83 ec 18             	sub    esp,0x18
c001f920:	68 59 d0 02 c0       	push   0xc002d059
c001f925:	e8 d5 a9 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001f92a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f92f:	31 d2                	xor    edx,edx
c001f931:	83 c4 1c             	add    esp,0x1c
c001f934:	c3                   	ret    

c001f935 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f935:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f939:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f93d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f941:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f945:	0f 92 c0             	setb   al
c001f948:	c3                   	ret    

c001f949 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f949:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f94d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f951:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f955:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f959:	09 c2                	or     edx,eax
c001f95b:	0f 94 c0             	sete   al
c001f95e:	c3                   	ret    

c001f95f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f95f:	57                   	push   edi
c001f960:	56                   	push   esi
c001f961:	53                   	push   ebx
c001f962:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f966:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f96a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f96e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f972:	57                   	push   edi
c001f973:	56                   	push   esi
c001f974:	53                   	push   ebx
c001f975:	51                   	push   ecx
c001f976:	e8 ce ff ff ff       	call   c001f949 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f97b:	83 c4 10             	add    esp,0x10
c001f97e:	88 c2                	mov    dl,al
c001f980:	31 c0                	xor    eax,eax
c001f982:	84 d2                	test   dl,dl
c001f984:	75 0c                	jne    c001f992 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f986:	57                   	push   edi
c001f987:	56                   	push   esi
c001f988:	53                   	push   ebx
c001f989:	51                   	push   ecx
c001f98a:	e8 a6 ff ff ff       	call   c001f935 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f98f:	83 c4 10             	add    esp,0x10
c001f992:	83 e0 01             	and    eax,0x1
c001f995:	5b                   	pop    ebx
c001f996:	88 c1                	mov    cl,al
c001f998:	83 e2 01             	and    edx,0x1
c001f99b:	a0 81 28 03 c0       	mov    al,ds:0xc0032881
c001f9a0:	c1 e2 06             	shl    edx,0x6
c001f9a3:	83 e0 ba             	and    eax,0xffffffba
c001f9a6:	5e                   	pop    esi
c001f9a7:	09 c8                	or     eax,ecx
c001f9a9:	5f                   	pop    edi
c001f9aa:	09 d0                	or     eax,edx
c001f9ac:	a2 81 28 03 c0       	mov    ds:0xc0032881,al
c001f9b1:	c3                   	ret    

c001f9b2 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f9b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9ba:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f9be:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f9c2:	c3                   	ret    

c001f9c3 <Vm::fpuAbs(unsigned long long)>:
c001f9c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9cb:	c3                   	ret    

c001f9cc <Vm::fpuChs(unsigned long long)>:
c001f9cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9d4:	f7 d8                	neg    eax
c001f9d6:	83 d2 00             	adc    edx,0x0
c001f9d9:	f7 da                	neg    edx
c001f9db:	c3                   	ret    

c001f9dc <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f9dc:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f9e0:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f9e5:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f9e9:	eb c7                	jmp    c001f9b2 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f9eb <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f9eb:	53                   	push   ebx
c001f9ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f9f8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f9fc:	0f af ca             	imul   ecx,edx
c001f9ff:	0f af d8             	imul   ebx,eax
c001fa02:	f7 e2                	mul    edx
c001fa04:	01 d9                	add    ecx,ebx
c001fa06:	5b                   	pop    ebx
c001fa07:	01 ca                	add    edx,ecx
c001fa09:	c3                   	ret    

c001fa0a <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001fa0a:	83 ec 0c             	sub    esp,0xc
c001fa0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa1d:	e8 d2 77 00 00       	call   c00271f4 <__udivdi3>
c001fa22:	83 c4 1c             	add    esp,0x1c
c001fa25:	c3                   	ret    

c001fa26 <Vm::fpuSquare(unsigned long long)>:
c001fa26:	50                   	push   eax
c001fa27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa2f:	52                   	push   edx
c001fa30:	50                   	push   eax
c001fa31:	52                   	push   edx
c001fa32:	50                   	push   eax
c001fa33:	e8 b3 ff ff ff       	call   c001f9eb <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa38:	83 c4 14             	add    esp,0x14
c001fa3b:	c3                   	ret    

c001fa3c <Vm::fpuGetReg(int)>:
c001fa3c:	83 ec 0c             	sub    esp,0xc
c001fa3f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa44:	76 10                	jbe    c001fa56 <Vm::fpuGetReg(int)+0x1a>
c001fa46:	83 ec 0c             	sub    esp,0xc
c001fa49:	68 66 d0 02 c0       	push   0xc002d066
c001fa4e:	e8 ac a8 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001fa53:	83 c4 10             	add    esp,0x10
c001fa56:	a0 81 28 03 c0       	mov    al,ds:0xc0032881
c001fa5b:	b9 08 00 00 00       	mov    ecx,0x8
c001fa60:	c0 e8 03             	shr    al,0x3
c001fa63:	83 e0 07             	and    eax,0x7
c001fa66:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa6a:	99                   	cdq    
c001fa6b:	f7 f9                	idiv   ecx
c001fa6d:	8b 04 d5 84 28 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcd77c]
c001fa74:	8b 14 d5 88 28 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcd778]
c001fa7b:	83 c4 0c             	add    esp,0xc
c001fa7e:	c3                   	ret    

c001fa7f <Vm::fpuSetReg(int, unsigned long long)>:
c001fa7f:	57                   	push   edi
c001fa80:	56                   	push   esi
c001fa81:	52                   	push   edx
c001fa82:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa86:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa8a:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa8f:	76 10                	jbe    c001faa1 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa91:	83 ec 0c             	sub    esp,0xc
c001fa94:	68 79 d0 02 c0       	push   0xc002d079
c001fa99:	e8 61 a8 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c001fa9e:	83 c4 10             	add    esp,0x10
c001faa1:	a0 81 28 03 c0       	mov    al,ds:0xc0032881
c001faa6:	b9 08 00 00 00       	mov    ecx,0x8
c001faab:	c0 e8 03             	shr    al,0x3
c001faae:	83 e0 07             	and    eax,0x7
c001fab1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fab5:	99                   	cdq    
c001fab6:	f7 f9                	idiv   ecx
c001fab8:	89 34 d5 84 28 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd77c],esi
c001fabf:	89 3c d5 88 28 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd778],edi
c001fac6:	58                   	pop    eax
c001fac7:	5e                   	pop    esi
c001fac8:	5f                   	pop    edi
c001fac9:	c3                   	ret    

c001faca <Vm::fpuPush(unsigned long long)>:
c001faca:	a0 81 28 03 c0       	mov    al,ds:0xc0032881
c001facf:	c0 e8 03             	shr    al,0x3
c001fad2:	83 e0 07             	and    eax,0x7
c001fad5:	83 c0 07             	add    eax,0x7
c001fad8:	88 c2                	mov    dl,al
c001fada:	83 e0 07             	and    eax,0x7
c001fadd:	83 e2 07             	and    edx,0x7
c001fae0:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fae7:	8a 15 81 28 03 c0    	mov    dl,BYTE PTR ds:0xc0032881
c001faed:	83 e2 c7             	and    edx,0xffffffc7
c001faf0:	09 ca                	or     edx,ecx
c001faf2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001faf6:	88 15 81 28 03 c0    	mov    BYTE PTR ds:0xc0032881,dl
c001fafc:	89 0c c5 88 28 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd778],ecx
c001fb03:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fb07:	89 14 c5 84 28 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd77c],edx
c001fb0e:	a1 c4 28 03 c0       	mov    eax,ds:0xc00328c4
c001fb13:	83 f8 08             	cmp    eax,0x8
c001fb16:	75 08                	jne    c001fb20 <Vm::fpuPush(unsigned long long)+0x56>
c001fb18:	80 0d 80 28 03 c0 40 	or     BYTE PTR ds:0xc0032880,0x40
c001fb1f:	c3                   	ret    
c001fb20:	40                   	inc    eax
c001fb21:	a3 c4 28 03 c0       	mov    ds:0xc00328c4,eax
c001fb26:	c3                   	ret    

c001fb27 <Vm::fpuPop()>:
c001fb27:	8a 0d 81 28 03 c0    	mov    cl,BYTE PTR ds:0xc0032881
c001fb2d:	53                   	push   ebx
c001fb2e:	c0 e9 03             	shr    cl,0x3
c001fb31:	8a 1d 81 28 03 c0    	mov    bl,BYTE PTR ds:0xc0032881
c001fb37:	83 e1 07             	and    ecx,0x7
c001fb3a:	83 e3 c7             	and    ebx,0xffffffc7
c001fb3d:	8b 04 cd 84 28 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcd77c]
c001fb44:	8b 14 cd 88 28 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcd778]
c001fb4b:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fb52:	83 e1 38             	and    ecx,0x38
c001fb55:	09 d9                	or     ecx,ebx
c001fb57:	88 0d 81 28 03 c0    	mov    BYTE PTR ds:0xc0032881,cl
c001fb5d:	8b 0d c4 28 03 c0    	mov    ecx,DWORD PTR ds:0xc00328c4
c001fb63:	85 c9                	test   ecx,ecx
c001fb65:	74 09                	je     c001fb70 <Vm::fpuPop()+0x49>
c001fb67:	49                   	dec    ecx
c001fb68:	89 0d c4 28 03 c0    	mov    DWORD PTR ds:0xc00328c4,ecx
c001fb6e:	eb 07                	jmp    c001fb77 <Vm::fpuPop()+0x50>
c001fb70:	80 0d 80 28 03 c0 40 	or     BYTE PTR ds:0xc0032880,0x40
c001fb77:	5b                   	pop    ebx
c001fb78:	c3                   	ret    

c001fb79 <Vm::x87Handler(regs*)>:
c001fb79:	55                   	push   ebp
c001fb7a:	57                   	push   edi
c001fb7b:	56                   	push   esi
c001fb7c:	53                   	push   ebx
c001fb7d:	83 ec 1c             	sub    esp,0x1c
c001fb80:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb84:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fb89:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb8c:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb94:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb98:	50                   	push   eax
c001fb99:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb9d:	50                   	push   eax
c001fb9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fba2:	50                   	push   eax
c001fba3:	53                   	push   ebx
c001fba4:	e8 23 9e ff ff       	call   c00199cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fba9:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fbac:	83 c4 10             	add    esp,0x10
c001fbaf:	89 c6                	mov    esi,eax
c001fbb1:	80 fa d9             	cmp    dl,0xd9
c001fbb4:	0f 85 52 01 00 00    	jne    c001fd0c <Vm::x87Handler(regs*)+0x193>
c001fbba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbbe:	8d 50 20             	lea    edx,[eax+0x20]
c001fbc1:	80 fa 0e             	cmp    dl,0xe
c001fbc4:	0f 87 86 00 00 00    	ja     c001fc50 <Vm::x87Handler(regs*)+0xd7>
c001fbca:	0f b6 d2             	movzx  edx,dl
c001fbcd:	ff 24 95 8c d0 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2f74]
c001fbd4:	e8 e7 fc ff ff       	call   c001f8c0 <Vm::fpuGet0()>
c001fbd9:	eb 05                	jmp    c001fbe0 <Vm::x87Handler(regs*)+0x67>
c001fbdb:	e8 e5 fc ff ff       	call   c001f8c5 <Vm::fpuGet1()>
c001fbe0:	57                   	push   edi
c001fbe1:	57                   	push   edi
c001fbe2:	52                   	push   edx
c001fbe3:	50                   	push   eax
c001fbe4:	e8 e1 fe ff ff       	call   c001faca <Vm::fpuPush(unsigned long long)>
c001fbe9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fbed:	83 c4 10             	add    esp,0x10
c001fbf0:	b0 01                	mov    al,0x1
c001fbf2:	e9 e3 09 00 00       	jmp    c00205da <Vm::x87Handler(regs*)+0xa61>
c001fbf7:	83 ec 0c             	sub    esp,0xc
c001fbfa:	6a 00                	push   0x0
c001fbfc:	e8 3b fe ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001fc01:	59                   	pop    ecx
c001fc02:	5e                   	pop    esi
c001fc03:	52                   	push   edx
c001fc04:	50                   	push   eax
c001fc05:	e8 c2 fd ff ff       	call   c001f9cc <Vm::fpuChs(unsigned long long)>
c001fc0a:	eb 13                	jmp    c001fc1f <Vm::x87Handler(regs*)+0xa6>
c001fc0c:	83 ec 0c             	sub    esp,0xc
c001fc0f:	6a 00                	push   0x0
c001fc11:	e8 26 fe ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001fc16:	5f                   	pop    edi
c001fc17:	5d                   	pop    ebp
c001fc18:	52                   	push   edx
c001fc19:	50                   	push   eax
c001fc1a:	e8 a4 fd ff ff       	call   c001f9c3 <Vm::fpuAbs(unsigned long long)>
c001fc1f:	83 c4 0c             	add    esp,0xc
c001fc22:	52                   	push   edx
c001fc23:	50                   	push   eax
c001fc24:	6a 00                	push   0x0
c001fc26:	e8 54 fe ff ff       	call   c001fa7f <Vm::fpuSetReg(int, unsigned long long)>
c001fc2b:	eb bc                	jmp    c001fbe9 <Vm::x87Handler(regs*)+0x70>
c001fc2d:	e8 d3 fc ff ff       	call   c001f905 <Vm::fpuGetLog210()>
c001fc32:	eb ac                	jmp    c001fbe0 <Vm::x87Handler(regs*)+0x67>
c001fc34:	e8 9c fc ff ff       	call   c001f8d5 <Vm::fpuGetLog2E()>
c001fc39:	eb a5                	jmp    c001fbe0 <Vm::x87Handler(regs*)+0x67>
c001fc3b:	e8 8d fc ff ff       	call   c001f8cd <Vm::fpuGetPi()>
c001fc40:	eb 9e                	jmp    c001fbe0 <Vm::x87Handler(regs*)+0x67>
c001fc42:	e8 d6 fc ff ff       	call   c001f91d <Vm::fpuGetLog102()>
c001fc47:	eb 97                	jmp    c001fbe0 <Vm::x87Handler(regs*)+0x67>
c001fc49:	e8 9f fc ff ff       	call   c001f8ed <Vm::fpuGetLogE2()>
c001fc4e:	eb 90                	jmp    c001fbe0 <Vm::x87Handler(regs*)+0x67>
c001fc50:	8d 50 40             	lea    edx,[eax+0x40]
c001fc53:	80 fa 07             	cmp    dl,0x7
c001fc56:	77 15                	ja     c001fc6d <Vm::x87Handler(regs*)+0xf4>
c001fc58:	83 ec 0c             	sub    esp,0xc
c001fc5b:	2d c0 00 00 00       	sub    eax,0xc0
c001fc60:	50                   	push   eax
c001fc61:	e8 d6 fd ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001fc66:	59                   	pop    ecx
c001fc67:	5e                   	pop    esi
c001fc68:	e9 75 ff ff ff       	jmp    c001fbe2 <Vm::x87Handler(regs*)+0x69>
c001fc6d:	8d 50 38             	lea    edx,[eax+0x38]
c001fc70:	80 fa 07             	cmp    dl,0x7
c001fc73:	77 3c                	ja     c001fcb1 <Vm::x87Handler(regs*)+0x138>
c001fc75:	83 ec 0c             	sub    esp,0xc
c001fc78:	2d c8 00 00 00       	sub    eax,0xc8
c001fc7d:	50                   	push   eax
c001fc7e:	e8 b9 fd ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001fc83:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc8a:	89 c6                	mov    esi,eax
c001fc8c:	89 d7                	mov    edi,edx
c001fc8e:	e8 a9 fd ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001fc93:	83 c4 0c             	add    esp,0xc
c001fc96:	52                   	push   edx
c001fc97:	50                   	push   eax
c001fc98:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc9c:	2d c8 00 00 00       	sub    eax,0xc8
c001fca1:	50                   	push   eax
c001fca2:	e8 d8 fd ff ff       	call   c001fa7f <Vm::fpuSetReg(int, unsigned long long)>
c001fca7:	83 c4 0c             	add    esp,0xc
c001fcaa:	57                   	push   edi
c001fcab:	56                   	push   esi
c001fcac:	e9 73 ff ff ff       	jmp    c001fc24 <Vm::x87Handler(regs*)+0xab>
c001fcb1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcb5:	84 d2                	test   dl,dl
c001fcb7:	75 0f                	jne    c001fcc8 <Vm::x87Handler(regs*)+0x14f>
c001fcb9:	83 ec 0c             	sub    esp,0xc
c001fcbc:	ff 36                	push   DWORD PTR [esi]
c001fcbe:	e8 c8 fa ff ff       	call   c001f78b <Vm::fpu32ToInternal(unsigned int)>
c001fcc3:	e9 bf 00 00 00       	jmp    c001fd87 <Vm::x87Handler(regs*)+0x20e>
c001fcc8:	80 fa 03             	cmp    dl,0x3
c001fccb:	75 13                	jne    c001fce0 <Vm::x87Handler(regs*)+0x167>
c001fccd:	e8 55 fe ff ff       	call   c001fb27 <Vm::fpuPop()>
c001fcd2:	55                   	push   ebp
c001fcd3:	55                   	push   ebp
c001fcd4:	52                   	push   edx
c001fcd5:	50                   	push   eax
c001fcd6:	e8 4c fa ff ff       	call   c001f727 <Vm::fpuInternalTo32(unsigned long long)>
c001fcdb:	e9 88 00 00 00       	jmp    c001fd68 <Vm::x87Handler(regs*)+0x1ef>
c001fce0:	80 fa 05             	cmp    dl,0x5
c001fce3:	75 0e                	jne    c001fcf3 <Vm::x87Handler(regs*)+0x17a>
c001fce5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fce8:	66 a3 82 28 03 c0    	mov    ds:0xc0032882,ax
c001fcee:	e9 df 00 00 00       	jmp    c001fdd2 <Vm::x87Handler(regs*)+0x259>
c001fcf3:	31 c0                	xor    eax,eax
c001fcf5:	80 fa 07             	cmp    dl,0x7
c001fcf8:	0f 85 dc 08 00 00    	jne    c00205da <Vm::x87Handler(regs*)+0xa61>
c001fcfe:	66 a1 82 28 03 c0    	mov    ax,ds:0xc0032882
c001fd04:	66 89 06             	mov    WORD PTR [esi],ax
c001fd07:	e9 c6 00 00 00       	jmp    c001fdd2 <Vm::x87Handler(regs*)+0x259>
c001fd0c:	80 fa d8             	cmp    dl,0xd8
c001fd0f:	0f 84 c9 00 00 00    	je     c001fdde <Vm::x87Handler(regs*)+0x265>
c001fd15:	80 fa dc             	cmp    dl,0xdc
c001fd18:	0f 84 0d 02 00 00    	je     c001ff2b <Vm::x87Handler(regs*)+0x3b2>
c001fd1e:	80 fa de             	cmp    dl,0xde
c001fd21:	0f 84 cd 02 00 00    	je     c001fff4 <Vm::x87Handler(regs*)+0x47b>
c001fd27:	80 fa dd             	cmp    dl,0xdd
c001fd2a:	0f 84 5f 04 00 00    	je     c002018f <Vm::x87Handler(regs*)+0x616>
c001fd30:	80 fa da             	cmp    dl,0xda
c001fd33:	0f 84 24 05 00 00    	je     c002025d <Vm::x87Handler(regs*)+0x6e4>
c001fd39:	80 fa df             	cmp    dl,0xdf
c001fd3c:	0f 84 68 05 00 00    	je     c00202aa <Vm::x87Handler(regs*)+0x731>
c001fd42:	31 c0                	xor    eax,eax
c001fd44:	80 fa db             	cmp    dl,0xdb
c001fd47:	0f 85 8d 08 00 00    	jne    c00205da <Vm::x87Handler(regs*)+0xa61>
c001fd4d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd51:	80 fa 03             	cmp    dl,0x3
c001fd54:	0f 85 70 06 00 00    	jne    c00203ca <Vm::x87Handler(regs*)+0x851>
c001fd5a:	e8 c8 fd ff ff       	call   c001fb27 <Vm::fpuPop()>
c001fd5f:	55                   	push   ebp
c001fd60:	55                   	push   ebp
c001fd61:	52                   	push   edx
c001fd62:	50                   	push   eax
c001fd63:	e8 71 fa ff ff       	call   c001f7d9 <Vm::fpuFloatToLong(unsigned long long)>
c001fd68:	83 c4 10             	add    esp,0x10
c001fd6b:	89 06                	mov    DWORD PTR [esi],eax
c001fd6d:	eb 63                	jmp    c001fdd2 <Vm::x87Handler(regs*)+0x259>
c001fd6f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd73:	84 d2                	test   dl,dl
c001fd75:	0f 85 e6 05 00 00    	jne    c0020361 <Vm::x87Handler(regs*)+0x7e8>
c001fd7b:	57                   	push   edi
c001fd7c:	57                   	push   edi
c001fd7d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd80:	ff 36                	push   DWORD PTR [esi]
c001fd82:	e8 49 fa ff ff       	call   c001f7d0 <Vm::fpu64ToInternal(unsigned long long)>
c001fd87:	5e                   	pop    esi
c001fd88:	5f                   	pop    edi
c001fd89:	52                   	push   edx
c001fd8a:	50                   	push   eax
c001fd8b:	e8 3a fd ff ff       	call   c001faca <Vm::fpuPush(unsigned long long)>
c001fd90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd94:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd97:	e9 51 fe ff ff       	jmp    c001fbed <Vm::x87Handler(regs*)+0x74>
c001fd9c:	80 fa 03             	cmp    dl,0x3
c001fd9f:	0f 85 d7 06 00 00    	jne    c002047c <Vm::x87Handler(regs*)+0x903>
c001fda5:	57                   	push   edi
c001fda6:	57                   	push   edi
c001fda7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdaa:	ff 36                	push   DWORD PTR [esi]
c001fdac:	e8 1f fa ff ff       	call   c001f7d0 <Vm::fpu64ToInternal(unsigned long long)>
c001fdb1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdb8:	89 c6                	mov    esi,eax
c001fdba:	89 d7                	mov    edi,edx
c001fdbc:	e8 7b fc ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001fdc1:	57                   	push   edi
c001fdc2:	56                   	push   esi
c001fdc3:	52                   	push   edx
c001fdc4:	50                   	push   eax
c001fdc5:	e8 95 fb ff ff       	call   c001f95f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fdca:	83 c4 20             	add    esp,0x20
c001fdcd:	e8 55 fd ff ff       	call   c001fb27 <Vm::fpuPop()>
c001fdd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fdd6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fdd9:	e9 12 fe ff ff       	jmp    c001fbf0 <Vm::x87Handler(regs*)+0x77>
c001fdde:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fde2:	8d 50 40             	lea    edx,[eax+0x40]
c001fde5:	80 fa 07             	cmp    dl,0x7
c001fde8:	77 29                	ja     c001fe13 <Vm::x87Handler(regs*)+0x29a>
c001fdea:	83 ec 0c             	sub    esp,0xc
c001fded:	2d c0 00 00 00       	sub    eax,0xc0
c001fdf2:	50                   	push   eax
c001fdf3:	e8 44 fc ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001fdf8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdff:	89 c6                	mov    esi,eax
c001fe01:	89 d7                	mov    edi,edx
c001fe03:	e8 34 fc ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001fe08:	57                   	push   edi
c001fe09:	56                   	push   esi
c001fe0a:	52                   	push   edx
c001fe0b:	50                   	push   eax
c001fe0c:	e8 a1 fb ff ff       	call   c001f9b2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe11:	eb 2f                	jmp    c001fe42 <Vm::x87Handler(regs*)+0x2c9>
c001fe13:	8d 50 38             	lea    edx,[eax+0x38]
c001fe16:	80 fa 07             	cmp    dl,0x7
c001fe19:	77 2f                	ja     c001fe4a <Vm::x87Handler(regs*)+0x2d1>
c001fe1b:	83 ec 0c             	sub    esp,0xc
c001fe1e:	2d c8 00 00 00       	sub    eax,0xc8
c001fe23:	50                   	push   eax
c001fe24:	e8 13 fc ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001fe29:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe30:	89 c6                	mov    esi,eax
c001fe32:	89 d7                	mov    edi,edx
c001fe34:	e8 03 fc ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001fe39:	57                   	push   edi
c001fe3a:	56                   	push   esi
c001fe3b:	52                   	push   edx
c001fe3c:	50                   	push   eax
c001fe3d:	e8 a9 fb ff ff       	call   c001f9eb <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe42:	83 c4 1c             	add    esp,0x1c
c001fe45:	e9 d8 fd ff ff       	jmp    c001fc22 <Vm::x87Handler(regs*)+0xa9>
c001fe4a:	8d 50 30             	lea    edx,[eax+0x30]
c001fe4d:	80 fa 07             	cmp    dl,0x7
c001fe50:	77 0d                	ja     c001fe5f <Vm::x87Handler(regs*)+0x2e6>
c001fe52:	83 ec 0c             	sub    esp,0xc
c001fe55:	2d d0 00 00 00       	sub    eax,0xd0
c001fe5a:	e9 99 03 00 00       	jmp    c00201f8 <Vm::x87Handler(regs*)+0x67f>
c001fe5f:	8d 50 28             	lea    edx,[eax+0x28]
c001fe62:	80 fa 07             	cmp    dl,0x7
c001fe65:	77 0d                	ja     c001fe74 <Vm::x87Handler(regs*)+0x2fb>
c001fe67:	83 ec 0c             	sub    esp,0xc
c001fe6a:	2d d8 00 00 00       	sub    eax,0xd8
c001fe6f:	e9 c0 03 00 00       	jmp    c0020234 <Vm::x87Handler(regs*)+0x6bb>
c001fe74:	8d 50 20             	lea    edx,[eax+0x20]
c001fe77:	80 fa 07             	cmp    dl,0x7
c001fe7a:	77 1b                	ja     c001fe97 <Vm::x87Handler(regs*)+0x31e>
c001fe7c:	83 ec 0c             	sub    esp,0xc
c001fe7f:	2d e0 00 00 00       	sub    eax,0xe0
c001fe84:	50                   	push   eax
c001fe85:	e8 b2 fb ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001fe8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe91:	89 c6                	mov    esi,eax
c001fe93:	89 d7                	mov    edi,edx
c001fe95:	eb 22                	jmp    c001feb9 <Vm::x87Handler(regs*)+0x340>
c001fe97:	8d 50 18             	lea    edx,[eax+0x18]
c001fe9a:	80 fa 07             	cmp    dl,0x7
c001fe9d:	77 2d                	ja     c001fecc <Vm::x87Handler(regs*)+0x353>
c001fe9f:	83 ec 0c             	sub    esp,0xc
c001fea2:	6a 00                	push   0x0
c001fea4:	e8 93 fb ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001fea9:	89 c6                	mov    esi,eax
c001feab:	89 d7                	mov    edi,edx
c001fead:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feb1:	2d e8 00 00 00       	sub    eax,0xe8
c001feb6:	89 04 24             	mov    DWORD PTR [esp],eax
c001feb9:	e8 7e fb ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001febe:	57                   	push   edi
c001febf:	56                   	push   esi
c001fec0:	52                   	push   edx
c001fec1:	50                   	push   eax
c001fec2:	e8 15 fb ff ff       	call   c001f9dc <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fec7:	e9 76 ff ff ff       	jmp    c001fe42 <Vm::x87Handler(regs*)+0x2c9>
c001fecc:	8d 50 10             	lea    edx,[eax+0x10]
c001fecf:	80 fa 07             	cmp    dl,0x7
c001fed2:	77 1b                	ja     c001feef <Vm::x87Handler(regs*)+0x376>
c001fed4:	83 ec 0c             	sub    esp,0xc
c001fed7:	2d f0 00 00 00       	sub    eax,0xf0
c001fedc:	50                   	push   eax
c001fedd:	e8 5a fb ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001fee2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fee9:	89 c6                	mov    esi,eax
c001feeb:	89 d7                	mov    edi,edx
c001feed:	eb 22                	jmp    c001ff11 <Vm::x87Handler(regs*)+0x398>
c001feef:	3c f7                	cmp    al,0xf7
c001fef1:	0f 86 d1 03 00 00    	jbe    c00202c8 <Vm::x87Handler(regs*)+0x74f>
c001fef7:	83 ec 0c             	sub    esp,0xc
c001fefa:	6a 00                	push   0x0
c001fefc:	e8 3b fb ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001ff01:	89 c6                	mov    esi,eax
c001ff03:	89 d7                	mov    edi,edx
c001ff05:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff09:	2d f8 00 00 00       	sub    eax,0xf8
c001ff0e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff11:	e8 26 fb ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001ff16:	57                   	push   edi
c001ff17:	56                   	push   esi
c001ff18:	52                   	push   edx
c001ff19:	50                   	push   eax
c001ff1a:	e8 eb fa ff ff       	call   c001fa0a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff1f:	83 c4 1c             	add    esp,0x1c
c001ff22:	52                   	push   edx
c001ff23:	50                   	push   eax
c001ff24:	6a 00                	push   0x0
c001ff26:	e9 51 02 00 00       	jmp    c002017c <Vm::x87Handler(regs*)+0x603>
c001ff2b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff2f:	8d 50 40             	lea    edx,[eax+0x40]
c001ff32:	80 fa 07             	cmp    dl,0x7
c001ff35:	77 37                	ja     c001ff6e <Vm::x87Handler(regs*)+0x3f5>
c001ff37:	83 ec 0c             	sub    esp,0xc
c001ff3a:	2d c0 00 00 00       	sub    eax,0xc0
c001ff3f:	50                   	push   eax
c001ff40:	e8 f7 fa ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001ff45:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff4c:	89 c6                	mov    esi,eax
c001ff4e:	89 d7                	mov    edi,edx
c001ff50:	e8 e7 fa ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001ff55:	57                   	push   edi
c001ff56:	56                   	push   esi
c001ff57:	52                   	push   edx
c001ff58:	50                   	push   eax
c001ff59:	e8 54 fa ff ff       	call   c001f9b2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff5e:	83 c4 1c             	add    esp,0x1c
c001ff61:	52                   	push   edx
c001ff62:	50                   	push   eax
c001ff63:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff67:	2d c0 00 00 00       	sub    eax,0xc0
c001ff6c:	eb 3d                	jmp    c001ffab <Vm::x87Handler(regs*)+0x432>
c001ff6e:	8d 50 38             	lea    edx,[eax+0x38]
c001ff71:	80 fa 07             	cmp    dl,0x7
c001ff74:	77 3b                	ja     c001ffb1 <Vm::x87Handler(regs*)+0x438>
c001ff76:	83 ec 0c             	sub    esp,0xc
c001ff79:	2d c8 00 00 00       	sub    eax,0xc8
c001ff7e:	50                   	push   eax
c001ff7f:	e8 b8 fa ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001ff84:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff8b:	89 c6                	mov    esi,eax
c001ff8d:	89 d7                	mov    edi,edx
c001ff8f:	e8 a8 fa ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001ff94:	57                   	push   edi
c001ff95:	56                   	push   esi
c001ff96:	52                   	push   edx
c001ff97:	50                   	push   eax
c001ff98:	e8 4e fa ff ff       	call   c001f9eb <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff9d:	83 c4 1c             	add    esp,0x1c
c001ffa0:	52                   	push   edx
c001ffa1:	50                   	push   eax
c001ffa2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa6:	2d c8 00 00 00       	sub    eax,0xc8
c001ffab:	50                   	push   eax
c001ffac:	e9 75 fc ff ff       	jmp    c001fc26 <Vm::x87Handler(regs*)+0xad>
c001ffb1:	83 c0 18             	add    eax,0x18
c001ffb4:	3c 07                	cmp    al,0x7
c001ffb6:	0f 87 3b 04 00 00    	ja     c00203f7 <Vm::x87Handler(regs*)+0x87e>
c001ffbc:	83 ec 0c             	sub    esp,0xc
c001ffbf:	6a 00                	push   0x0
c001ffc1:	e8 76 fa ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001ffc6:	89 c6                	mov    esi,eax
c001ffc8:	89 d7                	mov    edi,edx
c001ffca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffce:	2d e8 00 00 00       	sub    eax,0xe8
c001ffd3:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffd6:	e8 61 fa ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c001ffdb:	57                   	push   edi
c001ffdc:	56                   	push   esi
c001ffdd:	52                   	push   edx
c001ffde:	50                   	push   eax
c001ffdf:	e8 f8 f9 ff ff       	call   c001f9dc <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffe4:	83 c4 1c             	add    esp,0x1c
c001ffe7:	52                   	push   edx
c001ffe8:	50                   	push   eax
c001ffe9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffed:	2d e8 00 00 00       	sub    eax,0xe8
c001fff2:	eb b7                	jmp    c001ffab <Vm::x87Handler(regs*)+0x432>
c001fff4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fff8:	8d 50 40             	lea    edx,[eax+0x40]
c001fffb:	80 fa 07             	cmp    dl,0x7
c001fffe:	77 3a                	ja     c002003a <Vm::x87Handler(regs*)+0x4c1>
c0020000:	83 ec 0c             	sub    esp,0xc
c0020003:	2d c0 00 00 00       	sub    eax,0xc0
c0020008:	50                   	push   eax
c0020009:	e8 2e fa ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c002000e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020015:	89 c6                	mov    esi,eax
c0020017:	89 d7                	mov    edi,edx
c0020019:	e8 1e fa ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c002001e:	57                   	push   edi
c002001f:	56                   	push   esi
c0020020:	52                   	push   edx
c0020021:	50                   	push   eax
c0020022:	e8 8b f9 ff ff       	call   c001f9b2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020027:	83 c4 1c             	add    esp,0x1c
c002002a:	52                   	push   edx
c002002b:	50                   	push   eax
c002002c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020030:	2d c0 00 00 00       	sub    eax,0xc0
c0020035:	e9 9e 01 00 00       	jmp    c00201d8 <Vm::x87Handler(regs*)+0x65f>
c002003a:	8d 50 20             	lea    edx,[eax+0x20]
c002003d:	80 fa 07             	cmp    dl,0x7
c0020040:	77 3a                	ja     c002007c <Vm::x87Handler(regs*)+0x503>
c0020042:	83 ec 0c             	sub    esp,0xc
c0020045:	2d e0 00 00 00       	sub    eax,0xe0
c002004a:	50                   	push   eax
c002004b:	e8 ec f9 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c0020050:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020057:	89 c6                	mov    esi,eax
c0020059:	89 d7                	mov    edi,edx
c002005b:	e8 dc f9 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c0020060:	57                   	push   edi
c0020061:	56                   	push   esi
c0020062:	52                   	push   edx
c0020063:	50                   	push   eax
c0020064:	e8 73 f9 ff ff       	call   c001f9dc <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020069:	83 c4 1c             	add    esp,0x1c
c002006c:	52                   	push   edx
c002006d:	50                   	push   eax
c002006e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020072:	2d e0 00 00 00       	sub    eax,0xe0
c0020077:	e9 5c 01 00 00       	jmp    c00201d8 <Vm::x87Handler(regs*)+0x65f>
c002007c:	8d 50 18             	lea    edx,[eax+0x18]
c002007f:	80 fa 07             	cmp    dl,0x7
c0020082:	77 3b                	ja     c00200bf <Vm::x87Handler(regs*)+0x546>
c0020084:	83 ec 0c             	sub    esp,0xc
c0020087:	6a 00                	push   0x0
c0020089:	e8 ae f9 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c002008e:	89 c6                	mov    esi,eax
c0020090:	89 d7                	mov    edi,edx
c0020092:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020096:	2d e8 00 00 00       	sub    eax,0xe8
c002009b:	89 04 24             	mov    DWORD PTR [esp],eax
c002009e:	e8 99 f9 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c00200a3:	57                   	push   edi
c00200a4:	56                   	push   esi
c00200a5:	52                   	push   edx
c00200a6:	50                   	push   eax
c00200a7:	e8 30 f9 ff ff       	call   c001f9dc <Vm::fpuSub(unsigned long long, unsigned long long)>
c00200ac:	83 c4 1c             	add    esp,0x1c
c00200af:	52                   	push   edx
c00200b0:	50                   	push   eax
c00200b1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200b5:	2d e8 00 00 00       	sub    eax,0xe8
c00200ba:	e9 19 01 00 00       	jmp    c00201d8 <Vm::x87Handler(regs*)+0x65f>
c00200bf:	8d 50 38             	lea    edx,[eax+0x38]
c00200c2:	80 fa 07             	cmp    dl,0x7
c00200c5:	77 37                	ja     c00200fe <Vm::x87Handler(regs*)+0x585>
c00200c7:	83 ec 0c             	sub    esp,0xc
c00200ca:	2d c8 00 00 00       	sub    eax,0xc8
c00200cf:	50                   	push   eax
c00200d0:	e8 67 f9 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c00200d5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200dc:	89 c6                	mov    esi,eax
c00200de:	89 d7                	mov    edi,edx
c00200e0:	e8 57 f9 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c00200e5:	57                   	push   edi
c00200e6:	56                   	push   esi
c00200e7:	52                   	push   edx
c00200e8:	50                   	push   eax
c00200e9:	e8 fd f8 ff ff       	call   c001f9eb <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00200ee:	83 c4 1c             	add    esp,0x1c
c00200f1:	52                   	push   edx
c00200f2:	50                   	push   eax
c00200f3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200f7:	2d c8 00 00 00       	sub    eax,0xc8
c00200fc:	eb 7d                	jmp    c002017b <Vm::x87Handler(regs*)+0x602>
c00200fe:	3c f7                	cmp    al,0xf7
c0020100:	76 38                	jbe    c002013a <Vm::x87Handler(regs*)+0x5c1>
c0020102:	83 ec 0c             	sub    esp,0xc
c0020105:	6a 00                	push   0x0
c0020107:	e8 30 f9 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c002010c:	89 c6                	mov    esi,eax
c002010e:	89 d7                	mov    edi,edx
c0020110:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020114:	2d f8 00 00 00       	sub    eax,0xf8
c0020119:	89 04 24             	mov    DWORD PTR [esp],eax
c002011c:	e8 1b f9 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c0020121:	57                   	push   edi
c0020122:	56                   	push   esi
c0020123:	52                   	push   edx
c0020124:	50                   	push   eax
c0020125:	e8 e0 f8 ff ff       	call   c001fa0a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002012a:	83 c4 1c             	add    esp,0x1c
c002012d:	52                   	push   edx
c002012e:	50                   	push   eax
c002012f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020133:	2d f8 00 00 00       	sub    eax,0xf8
c0020138:	eb 41                	jmp    c002017b <Vm::x87Handler(regs*)+0x602>
c002013a:	8d 50 10             	lea    edx,[eax+0x10]
c002013d:	80 fa 07             	cmp    dl,0x7
c0020140:	0f 87 5a 01 00 00    	ja     c00202a0 <Vm::x87Handler(regs*)+0x727>
c0020146:	83 ec 0c             	sub    esp,0xc
c0020149:	2d f0 00 00 00       	sub    eax,0xf0
c002014e:	50                   	push   eax
c002014f:	e8 e8 f8 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c0020154:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002015b:	89 c6                	mov    esi,eax
c002015d:	89 d7                	mov    edi,edx
c002015f:	e8 d8 f8 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c0020164:	57                   	push   edi
c0020165:	56                   	push   esi
c0020166:	52                   	push   edx
c0020167:	50                   	push   eax
c0020168:	e8 9d f8 ff ff       	call   c001fa0a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002016d:	83 c4 1c             	add    esp,0x1c
c0020170:	52                   	push   edx
c0020171:	50                   	push   eax
c0020172:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020176:	2d f0 00 00 00       	sub    eax,0xf0
c002017b:	50                   	push   eax
c002017c:	e8 fe f8 ff ff       	call   c001fa7f <Vm::fpuSetReg(int, unsigned long long)>
c0020181:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020185:	e8 9d f9 ff ff       	call   c001fb27 <Vm::fpuPop()>
c002018a:	e9 5e fa ff ff       	jmp    c001fbed <Vm::x87Handler(regs*)+0x74>
c002018f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020193:	8d 50 30             	lea    edx,[eax+0x30]
c0020196:	80 fa 07             	cmp    dl,0x7
c0020199:	77 1d                	ja     c00201b8 <Vm::x87Handler(regs*)+0x63f>
c002019b:	83 ec 0c             	sub    esp,0xc
c002019e:	6a 00                	push   0x0
c00201a0:	e8 97 f8 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c00201a5:	83 c4 0c             	add    esp,0xc
c00201a8:	52                   	push   edx
c00201a9:	50                   	push   eax
c00201aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201ae:	2d d0 00 00 00       	sub    eax,0xd0
c00201b3:	e9 f3 fd ff ff       	jmp    c001ffab <Vm::x87Handler(regs*)+0x432>
c00201b8:	8d 50 28             	lea    edx,[eax+0x28]
c00201bb:	80 fa 07             	cmp    dl,0x7
c00201be:	77 28                	ja     c00201e8 <Vm::x87Handler(regs*)+0x66f>
c00201c0:	83 ec 0c             	sub    esp,0xc
c00201c3:	6a 00                	push   0x0
c00201c5:	e8 72 f8 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c00201ca:	83 c4 0c             	add    esp,0xc
c00201cd:	52                   	push   edx
c00201ce:	50                   	push   eax
c00201cf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201d3:	2d d8 00 00 00       	sub    eax,0xd8
c00201d8:	50                   	push   eax
c00201d9:	e8 a1 f8 ff ff       	call   c001fa7f <Vm::fpuSetReg(int, unsigned long long)>
c00201de:	e8 44 f9 ff ff       	call   c001fb27 <Vm::fpuPop()>
c00201e3:	e9 01 fa ff ff       	jmp    c001fbe9 <Vm::x87Handler(regs*)+0x70>
c00201e8:	8d 50 20             	lea    edx,[eax+0x20]
c00201eb:	80 fa 07             	cmp    dl,0x7
c00201ee:	77 30                	ja     c0020220 <Vm::x87Handler(regs*)+0x6a7>
c00201f0:	83 ec 0c             	sub    esp,0xc
c00201f3:	2d e0 00 00 00       	sub    eax,0xe0
c00201f8:	50                   	push   eax
c00201f9:	e8 3e f8 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c00201fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020205:	89 c6                	mov    esi,eax
c0020207:	89 d7                	mov    edi,edx
c0020209:	e8 2e f8 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c002020e:	57                   	push   edi
c002020f:	56                   	push   esi
c0020210:	52                   	push   edx
c0020211:	50                   	push   eax
c0020212:	e8 48 f7 ff ff       	call   c001f95f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020217:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002021b:	e9 54 02 00 00       	jmp    c0020474 <Vm::x87Handler(regs*)+0x8fb>
c0020220:	8d 50 18             	lea    edx,[eax+0x18]
c0020223:	80 fa 07             	cmp    dl,0x7
c0020226:	0f 87 43 fb ff ff    	ja     c001fd6f <Vm::x87Handler(regs*)+0x1f6>
c002022c:	83 ec 0c             	sub    esp,0xc
c002022f:	2d e8 00 00 00       	sub    eax,0xe8
c0020234:	50                   	push   eax
c0020235:	e8 02 f8 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c002023a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020241:	89 c6                	mov    esi,eax
c0020243:	89 d7                	mov    edi,edx
c0020245:	e8 f2 f7 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c002024a:	57                   	push   edi
c002024b:	56                   	push   esi
c002024c:	52                   	push   edx
c002024d:	50                   	push   eax
c002024e:	e8 0c f7 ff ff       	call   c001f95f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020253:	83 c4 20             	add    esp,0x20
c0020256:	e8 cc f8 ff ff       	call   c001fb27 <Vm::fpuPop()>
c002025b:	eb 62                	jmp    c00202bf <Vm::x87Handler(regs*)+0x746>
c002025d:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020261:	0f 85 0f 01 00 00    	jne    c0020376 <Vm::x87Handler(regs*)+0x7fd>
c0020267:	83 ec 0c             	sub    esp,0xc
c002026a:	6a 01                	push   0x1
c002026c:	e8 cb f7 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c0020271:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020278:	89 c6                	mov    esi,eax
c002027a:	89 d7                	mov    edi,edx
c002027c:	e8 bb f7 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c0020281:	57                   	push   edi
c0020282:	56                   	push   esi
c0020283:	52                   	push   edx
c0020284:	50                   	push   eax
c0020285:	e8 d5 f6 ff ff       	call   c001f95f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002028a:	83 c4 20             	add    esp,0x20
c002028d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020291:	e8 91 f8 ff ff       	call   c001fb27 <Vm::fpuPop()>
c0020296:	e8 8c f8 ff ff       	call   c001fb27 <Vm::fpuPop()>
c002029b:	e9 50 f9 ff ff       	jmp    c001fbf0 <Vm::x87Handler(regs*)+0x77>
c00202a0:	3c d9                	cmp    al,0xd9
c00202a2:	0f 85 b5 02 00 00    	jne    c002055d <Vm::x87Handler(regs*)+0x9e4>
c00202a8:	eb bd                	jmp    c0020267 <Vm::x87Handler(regs*)+0x6ee>
c00202aa:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00202ae:	0f 85 ea 02 00 00    	jne    c002059e <Vm::x87Handler(regs*)+0xa25>
c00202b4:	0f b7 05 80 28 03 c0 	movzx  eax,WORD PTR ds:0xc0032880
c00202bb:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00202bf:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202c3:	e9 28 f9 ff ff       	jmp    c001fbf0 <Vm::x87Handler(regs*)+0x77>
c00202c8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202cc:	84 d2                	test   dl,dl
c00202ce:	75 0f                	jne    c00202df <Vm::x87Handler(regs*)+0x766>
c00202d0:	83 ec 0c             	sub    esp,0xc
c00202d3:	ff 36                	push   DWORD PTR [esi]
c00202d5:	e8 b1 f4 ff ff       	call   c001f78b <Vm::fpu32ToInternal(unsigned int)>
c00202da:	e9 2c 01 00 00       	jmp    c002040b <Vm::x87Handler(regs*)+0x892>
c00202df:	80 fa 01             	cmp    dl,0x1
c00202e2:	75 0f                	jne    c00202f3 <Vm::x87Handler(regs*)+0x77a>
c00202e4:	83 ec 0c             	sub    esp,0xc
c00202e7:	ff 36                	push   DWORD PTR [esi]
c00202e9:	e8 9d f4 ff ff       	call   c001f78b <Vm::fpu32ToInternal(unsigned int)>
c00202ee:	e9 81 02 00 00       	jmp    c0020574 <Vm::x87Handler(regs*)+0x9fb>
c00202f3:	80 fa 04             	cmp    dl,0x4
c00202f6:	75 0f                	jne    c0020307 <Vm::x87Handler(regs*)+0x78e>
c00202f8:	83 ec 0c             	sub    esp,0xc
c00202fb:	ff 36                	push   DWORD PTR [esi]
c00202fd:	e8 89 f4 ff ff       	call   c001f78b <Vm::fpu32ToInternal(unsigned int)>
c0020302:	e9 86 01 00 00       	jmp    c002048d <Vm::x87Handler(regs*)+0x914>
c0020307:	80 fa 05             	cmp    dl,0x5
c002030a:	75 1b                	jne    c0020327 <Vm::x87Handler(regs*)+0x7ae>
c002030c:	83 ec 0c             	sub    esp,0xc
c002030f:	6a 00                	push   0x0
c0020311:	e8 26 f7 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c0020316:	89 c7                	mov    edi,eax
c0020318:	89 d5                	mov    ebp,edx
c002031a:	58                   	pop    eax
c002031b:	ff 36                	push   DWORD PTR [esi]
c002031d:	e8 69 f4 ff ff       	call   c001f78b <Vm::fpu32ToInternal(unsigned int)>
c0020322:	e9 a3 01 00 00       	jmp    c00204ca <Vm::x87Handler(regs*)+0x951>
c0020327:	80 fa 06             	cmp    dl,0x6
c002032a:	75 0f                	jne    c002033b <Vm::x87Handler(regs*)+0x7c2>
c002032c:	83 ec 0c             	sub    esp,0xc
c002032f:	ff 36                	push   DWORD PTR [esi]
c0020331:	e8 55 f4 ff ff       	call   c001f78b <Vm::fpu32ToInternal(unsigned int)>
c0020336:	e9 ae 01 00 00       	jmp    c00204e9 <Vm::x87Handler(regs*)+0x970>
c002033b:	31 c0                	xor    eax,eax
c002033d:	80 fa 07             	cmp    dl,0x7
c0020340:	0f 85 94 02 00 00    	jne    c00205da <Vm::x87Handler(regs*)+0xa61>
c0020346:	83 ec 0c             	sub    esp,0xc
c0020349:	6a 00                	push   0x0
c002034b:	e8 ec f6 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c0020350:	89 c7                	mov    edi,eax
c0020352:	89 d5                	mov    ebp,edx
c0020354:	58                   	pop    eax
c0020355:	ff 36                	push   DWORD PTR [esi]
c0020357:	e8 2f f4 ff ff       	call   c001f78b <Vm::fpu32ToInternal(unsigned int)>
c002035c:	e9 cb 01 00 00       	jmp    c002052c <Vm::x87Handler(regs*)+0x9b3>
c0020361:	80 fa 03             	cmp    dl,0x3
c0020364:	0f 85 d3 01 00 00    	jne    c002053d <Vm::x87Handler(regs*)+0x9c4>
c002036a:	e8 b8 f7 ff ff       	call   c001fb27 <Vm::fpuPop()>
c002036f:	51                   	push   ecx
c0020370:	51                   	push   ecx
c0020371:	e9 de 01 00 00       	jmp    c0020554 <Vm::x87Handler(regs*)+0x9db>
c0020376:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002037a:	80 fa 01             	cmp    dl,0x1
c002037d:	75 09                	jne    c0020388 <Vm::x87Handler(regs*)+0x80f>
c002037f:	57                   	push   edi
c0020380:	57                   	push   edi
c0020381:	8b 06                	mov    eax,DWORD PTR [esi]
c0020383:	e9 e3 01 00 00       	jmp    c002056b <Vm::x87Handler(regs*)+0x9f2>
c0020388:	80 fa 04             	cmp    dl,0x4
c002038b:	75 12                	jne    c002039f <Vm::x87Handler(regs*)+0x826>
c002038d:	31 d2                	xor    edx,edx
c002038f:	51                   	push   ecx
c0020390:	51                   	push   ecx
c0020391:	8b 06                	mov    eax,DWORD PTR [esi]
c0020393:	52                   	push   edx
c0020394:	50                   	push   eax
c0020395:	e8 d0 f4 ff ff       	call   c001f86a <Vm::fpuLongToFloat(long long)>
c002039a:	e9 ee 00 00 00       	jmp    c002048d <Vm::x87Handler(regs*)+0x914>
c002039f:	31 c0                	xor    eax,eax
c00203a1:	80 fa 07             	cmp    dl,0x7
c00203a4:	0f 85 30 02 00 00    	jne    c00205da <Vm::x87Handler(regs*)+0xa61>
c00203aa:	83 ec 0c             	sub    esp,0xc
c00203ad:	6a 00                	push   0x0
c00203af:	e8 88 f6 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c00203b4:	89 c7                	mov    edi,eax
c00203b6:	89 d5                	mov    ebp,edx
c00203b8:	58                   	pop    eax
c00203b9:	8b 06                	mov    eax,DWORD PTR [esi]
c00203bb:	5a                   	pop    edx
c00203bc:	31 d2                	xor    edx,edx
c00203be:	52                   	push   edx
c00203bf:	50                   	push   eax
c00203c0:	e8 a5 f4 ff ff       	call   c001f86a <Vm::fpuLongToFloat(long long)>
c00203c5:	e9 62 01 00 00       	jmp    c002052c <Vm::x87Handler(regs*)+0x9b3>
c00203ca:	84 d2                	test   dl,dl
c00203cc:	75 0d                	jne    c00203db <Vm::x87Handler(regs*)+0x862>
c00203ce:	31 d2                	xor    edx,edx
c00203d0:	55                   	push   ebp
c00203d1:	55                   	push   ebp
c00203d2:	8b 06                	mov    eax,DWORD PTR [esi]
c00203d4:	52                   	push   edx
c00203d5:	50                   	push   eax
c00203d6:	e9 d3 01 00 00       	jmp    c00205ae <Vm::x87Handler(regs*)+0xa35>
c00203db:	31 c0                	xor    eax,eax
c00203dd:	80 fa 02             	cmp    dl,0x2
c00203e0:	0f 85 f4 01 00 00    	jne    c00205da <Vm::x87Handler(regs*)+0xa61>
c00203e6:	83 ec 0c             	sub    esp,0xc
c00203e9:	6a 00                	push   0x0
c00203eb:	e8 4c f6 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c00203f0:	59                   	pop    ecx
c00203f1:	5f                   	pop    edi
c00203f2:	e9 6a f9 ff ff       	jmp    c001fd61 <Vm::x87Handler(regs*)+0x1e8>
c00203f7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203fb:	84 d2                	test   dl,dl
c00203fd:	75 2a                	jne    c0020429 <Vm::x87Handler(regs*)+0x8b0>
c00203ff:	50                   	push   eax
c0020400:	50                   	push   eax
c0020401:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020404:	ff 36                	push   DWORD PTR [esi]
c0020406:	e8 c5 f3 ff ff       	call   c001f7d0 <Vm::fpu64ToInternal(unsigned long long)>
c002040b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020412:	89 c6                	mov    esi,eax
c0020414:	89 d7                	mov    edi,edx
c0020416:	e8 21 f6 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c002041b:	57                   	push   edi
c002041c:	56                   	push   esi
c002041d:	52                   	push   edx
c002041e:	50                   	push   eax
c002041f:	e8 8e f5 ff ff       	call   c001f9b2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020424:	e9 64 01 00 00       	jmp    c002058d <Vm::x87Handler(regs*)+0xa14>
c0020429:	80 fa 01             	cmp    dl,0x1
c002042c:	75 11                	jne    c002043f <Vm::x87Handler(regs*)+0x8c6>
c002042e:	50                   	push   eax
c002042f:	50                   	push   eax
c0020430:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020433:	ff 36                	push   DWORD PTR [esi]
c0020435:	e8 96 f3 ff ff       	call   c001f7d0 <Vm::fpu64ToInternal(unsigned long long)>
c002043a:	e9 35 01 00 00       	jmp    c0020574 <Vm::x87Handler(regs*)+0x9fb>
c002043f:	80 fa 02             	cmp    dl,0x2
c0020442:	0f 85 54 f9 ff ff    	jne    c001fd9c <Vm::x87Handler(regs*)+0x223>
c0020448:	55                   	push   ebp
c0020449:	55                   	push   ebp
c002044a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002044d:	ff 36                	push   DWORD PTR [esi]
c002044f:	e8 7c f3 ff ff       	call   c001f7d0 <Vm::fpu64ToInternal(unsigned long long)>
c0020454:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002045b:	89 c6                	mov    esi,eax
c002045d:	89 d7                	mov    edi,edx
c002045f:	e8 d8 f5 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c0020464:	57                   	push   edi
c0020465:	56                   	push   esi
c0020466:	52                   	push   edx
c0020467:	50                   	push   eax
c0020468:	e8 f2 f4 ff ff       	call   c001f95f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002046d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020471:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020474:	83 c4 20             	add    esp,0x20
c0020477:	e9 74 f7 ff ff       	jmp    c001fbf0 <Vm::x87Handler(regs*)+0x77>
c002047c:	80 fa 04             	cmp    dl,0x4
c002047f:	75 2a                	jne    c00204ab <Vm::x87Handler(regs*)+0x932>
c0020481:	51                   	push   ecx
c0020482:	51                   	push   ecx
c0020483:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020486:	ff 36                	push   DWORD PTR [esi]
c0020488:	e8 43 f3 ff ff       	call   c001f7d0 <Vm::fpu64ToInternal(unsigned long long)>
c002048d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020494:	89 c6                	mov    esi,eax
c0020496:	89 d7                	mov    edi,edx
c0020498:	e8 9f f5 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c002049d:	57                   	push   edi
c002049e:	56                   	push   esi
c002049f:	52                   	push   edx
c00204a0:	50                   	push   eax
c00204a1:	e8 36 f5 ff ff       	call   c001f9dc <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204a6:	e9 e2 00 00 00       	jmp    c002058d <Vm::x87Handler(regs*)+0xa14>
c00204ab:	80 fa 05             	cmp    dl,0x5
c00204ae:	75 28                	jne    c00204d8 <Vm::x87Handler(regs*)+0x95f>
c00204b0:	83 ec 0c             	sub    esp,0xc
c00204b3:	6a 00                	push   0x0
c00204b5:	e8 82 f5 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c00204ba:	89 c7                	mov    edi,eax
c00204bc:	89 d5                	mov    ebp,edx
c00204be:	58                   	pop    eax
c00204bf:	5a                   	pop    edx
c00204c0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204c3:	ff 36                	push   DWORD PTR [esi]
c00204c5:	e8 06 f3 ff ff       	call   c001f7d0 <Vm::fpu64ToInternal(unsigned long long)>
c00204ca:	83 c4 10             	add    esp,0x10
c00204cd:	55                   	push   ebp
c00204ce:	57                   	push   edi
c00204cf:	52                   	push   edx
c00204d0:	50                   	push   eax
c00204d1:	e8 06 f5 ff ff       	call   c001f9dc <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204d6:	eb 60                	jmp    c0020538 <Vm::x87Handler(regs*)+0x9bf>
c00204d8:	80 fa 06             	cmp    dl,0x6
c00204db:	75 2a                	jne    c0020507 <Vm::x87Handler(regs*)+0x98e>
c00204dd:	51                   	push   ecx
c00204de:	51                   	push   ecx
c00204df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204e2:	ff 36                	push   DWORD PTR [esi]
c00204e4:	e8 e7 f2 ff ff       	call   c001f7d0 <Vm::fpu64ToInternal(unsigned long long)>
c00204e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204f0:	89 c6                	mov    esi,eax
c00204f2:	89 d7                	mov    edi,edx
c00204f4:	e8 43 f5 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c00204f9:	57                   	push   edi
c00204fa:	56                   	push   esi
c00204fb:	52                   	push   edx
c00204fc:	50                   	push   eax
c00204fd:	e8 08 f5 ff ff       	call   c001fa0a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020502:	e9 86 00 00 00       	jmp    c002058d <Vm::x87Handler(regs*)+0xa14>
c0020507:	31 c0                	xor    eax,eax
c0020509:	80 fa 07             	cmp    dl,0x7
c002050c:	0f 85 c8 00 00 00    	jne    c00205da <Vm::x87Handler(regs*)+0xa61>
c0020512:	83 ec 0c             	sub    esp,0xc
c0020515:	6a 00                	push   0x0
c0020517:	e8 20 f5 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c002051c:	89 c7                	mov    edi,eax
c002051e:	89 d5                	mov    ebp,edx
c0020520:	58                   	pop    eax
c0020521:	5a                   	pop    edx
c0020522:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020525:	ff 36                	push   DWORD PTR [esi]
c0020527:	e8 a4 f2 ff ff       	call   c001f7d0 <Vm::fpu64ToInternal(unsigned long long)>
c002052c:	83 c4 10             	add    esp,0x10
c002052f:	55                   	push   ebp
c0020530:	57                   	push   edi
c0020531:	52                   	push   edx
c0020532:	50                   	push   eax
c0020533:	e8 d2 f4 ff ff       	call   c001fa0a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020538:	83 c4 0c             	add    esp,0xc
c002053b:	eb 53                	jmp    c0020590 <Vm::x87Handler(regs*)+0xa17>
c002053d:	31 c0                	xor    eax,eax
c002053f:	80 fa 02             	cmp    dl,0x2
c0020542:	0f 85 92 00 00 00    	jne    c00205da <Vm::x87Handler(regs*)+0xa61>
c0020548:	83 ec 0c             	sub    esp,0xc
c002054b:	6a 00                	push   0x0
c002054d:	e8 ea f4 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c0020552:	59                   	pop    ecx
c0020553:	5f                   	pop    edi
c0020554:	52                   	push   edx
c0020555:	50                   	push   eax
c0020556:	e8 27 f2 ff ff       	call   c001f782 <Vm::fpuInternalTo64(unsigned long long)>
c002055b:	eb 70                	jmp    c00205cd <Vm::x87Handler(regs*)+0xa54>
c002055d:	31 c0                	xor    eax,eax
c002055f:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020564:	75 74                	jne    c00205da <Vm::x87Handler(regs*)+0xa61>
c0020566:	50                   	push   eax
c0020567:	50                   	push   eax
c0020568:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002056b:	31 d2                	xor    edx,edx
c002056d:	52                   	push   edx
c002056e:	50                   	push   eax
c002056f:	e8 f6 f2 ff ff       	call   c001f86a <Vm::fpuLongToFloat(long long)>
c0020574:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002057b:	89 c6                	mov    esi,eax
c002057d:	89 d7                	mov    edi,edx
c002057f:	e8 b8 f4 ff ff       	call   c001fa3c <Vm::fpuGetReg(int)>
c0020584:	57                   	push   edi
c0020585:	56                   	push   esi
c0020586:	52                   	push   edx
c0020587:	50                   	push   eax
c0020588:	e8 5e f4 ff ff       	call   c001f9eb <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002058d:	83 c4 1c             	add    esp,0x1c
c0020590:	52                   	push   edx
c0020591:	50                   	push   eax
c0020592:	6a 00                	push   0x0
c0020594:	e8 e6 f4 ff ff       	call   c001fa7f <Vm::fpuSetReg(int, unsigned long long)>
c0020599:	e9 f2 f7 ff ff       	jmp    c001fd90 <Vm::x87Handler(regs*)+0x217>
c002059e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00205a2:	80 fa 05             	cmp    dl,0x5
c00205a5:	75 11                	jne    c00205b8 <Vm::x87Handler(regs*)+0xa3f>
c00205a7:	55                   	push   ebp
c00205a8:	55                   	push   ebp
c00205a9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205ac:	ff 36                	push   DWORD PTR [esi]
c00205ae:	e8 81 f2 ff ff       	call   c001f834 <Vm::fpuULongToFloat(unsigned long long)>
c00205b3:	e9 cf f7 ff ff       	jmp    c001fd87 <Vm::x87Handler(regs*)+0x20e>
c00205b8:	31 c0                	xor    eax,eax
c00205ba:	80 fa 07             	cmp    dl,0x7
c00205bd:	75 1b                	jne    c00205da <Vm::x87Handler(regs*)+0xa61>
c00205bf:	e8 63 f5 ff ff       	call   c001fb27 <Vm::fpuPop()>
c00205c4:	51                   	push   ecx
c00205c5:	51                   	push   ecx
c00205c6:	52                   	push   edx
c00205c7:	50                   	push   eax
c00205c8:	e8 0c f2 ff ff       	call   c001f7d9 <Vm::fpuFloatToLong(unsigned long long)>
c00205cd:	83 c4 10             	add    esp,0x10
c00205d0:	89 06                	mov    DWORD PTR [esi],eax
c00205d2:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00205d5:	e9 f8 f7 ff ff       	jmp    c001fdd2 <Vm::x87Handler(regs*)+0x259>
c00205da:	83 c4 1c             	add    esp,0x1c
c00205dd:	5b                   	pop    ebx
c00205de:	5e                   	pop    esi
c00205df:	5f                   	pop    edi
c00205e0:	5d                   	pop    ebp
c00205e1:	c3                   	ret    

c00205e2 <__static_initialization_and_destruction_0(int, int)>:
c00205e2:	83 ec 0c             	sub    esp,0xc
c00205e5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00205ea:	75 1a                	jne    c0020606 <__static_initialization_and_destruction_0(int, int)+0x24>
c00205ec:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00205f4:	75 10                	jne    c0020606 <__static_initialization_and_destruction_0(int, int)+0x24>
c00205f6:	83 ec 0c             	sub    esp,0xc
c00205f9:	68 80 28 03 c0       	push   0xc0032880
c00205fe:	e8 39 90 00 00       	call   c002963c <Vm::_FPUState::_FPUState()>
c0020603:	83 c4 10             	add    esp,0x10
c0020606:	90                   	nop
c0020607:	83 c4 0c             	add    esp,0xc
c002060a:	c3                   	ret    

c002060b <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002060b:	83 ec 0c             	sub    esp,0xc
c002060e:	83 ec 08             	sub    esp,0x8
c0020611:	68 ff ff 00 00       	push   0xffff
c0020616:	6a 01                	push   0x1
c0020618:	e8 c5 ff ff ff       	call   c00205e2 <__static_initialization_and_destruction_0(int, int)>
c002061d:	83 c4 10             	add    esp,0x10
c0020620:	83 c4 0c             	add    esp,0xc
c0020623:	c3                   	ret    

c0020624 <FAT::getName()>:
c0020624:	b8 c8 d0 02 c0       	mov    eax,0xc002d0c8
c0020629:	c3                   	ret    

c002062a <FAT::tell(void*, unsigned long long*)>:
c002062a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002062f:	75 06                	jne    c0020637 <FAT::tell(void*, unsigned long long*)+0xd>
c0020631:	b8 04 00 00 00       	mov    eax,0x4
c0020636:	c3                   	ret    
c0020637:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002063c:	75 06                	jne    c0020644 <FAT::tell(void*, unsigned long long*)+0x1a>
c002063e:	b8 04 00 00 00       	mov    eax,0x4
c0020643:	c3                   	ret    
c0020644:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020648:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002064b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002064e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020652:	89 01                	mov    DWORD PTR [ecx],eax
c0020654:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020657:	b8 00 00 00 00       	mov    eax,0x0
c002065c:	c3                   	ret    
c002065d:	90                   	nop

c002065e <FAT::stat(void*, unsigned long long*)>:
c002065e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020663:	75 06                	jne    c002066b <FAT::stat(void*, unsigned long long*)+0xd>
c0020665:	b8 04 00 00 00       	mov    eax,0x4
c002066a:	c3                   	ret    
c002066b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020670:	75 06                	jne    c0020678 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020672:	b8 04 00 00 00       	mov    eax,0x4
c0020677:	c3                   	ret    
c0020678:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002067c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002067f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020682:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020686:	89 01                	mov    DWORD PTR [ecx],eax
c0020688:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002068b:	b8 00 00 00 00       	mov    eax,0x0
c0020690:	c3                   	ret    
c0020691:	90                   	nop

c0020692 <FAT::~FAT()>:
c0020692:	83 ec 0c             	sub    esp,0xc
c0020695:	ba 58 d1 02 c0       	mov    edx,0xc002d158
c002069a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002069e:	89 10                	mov    DWORD PTR [eax],edx
c00206a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206a4:	83 ec 0c             	sub    esp,0xc
c00206a7:	50                   	push   eax
c00206a8:	e8 4b 25 ff ff       	call   c0012bf8 <Filesystem::~Filesystem()>
c00206ad:	83 c4 10             	add    esp,0x10
c00206b0:	90                   	nop
c00206b1:	83 c4 0c             	add    esp,0xc
c00206b4:	c3                   	ret    
c00206b5:	90                   	nop

c00206b6 <FAT::~FAT()>:
c00206b6:	83 ec 0c             	sub    esp,0xc
c00206b9:	83 ec 0c             	sub    esp,0xc
c00206bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206c0:	e8 cd ff ff ff       	call   c0020692 <FAT::~FAT()>
c00206c5:	83 c4 10             	add    esp,0x10
c00206c8:	83 ec 08             	sub    esp,0x8
c00206cb:	6a 08                	push   0x8
c00206cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206d1:	e8 13 21 ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c00206d6:	83 c4 10             	add    esp,0x10
c00206d9:	83 c4 0c             	add    esp,0xc
c00206dc:	c3                   	ret    
c00206dd:	90                   	nop

c00206de <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00206de:	83 ec 1c             	sub    esp,0x1c
c00206e1:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00206e8:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00206ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206f1:	8b 04 85 00 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd700]
c00206f8:	83 f8 ff             	cmp    eax,0xffffffff
c00206fb:	75 34                	jne    c0020731 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00206fd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020701:	88 c2                	mov    dl,al
c0020703:	a1 e0 28 03 c0       	mov    eax,ds:0xc00328e0
c0020708:	01 d0                	add    eax,edx
c002070a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002070e:	8b 15 e0 28 03 c0    	mov    edx,DWORD PTR ds:0xc00328e0
c0020714:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020718:	89 14 85 00 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd700],edx
c002071f:	a1 e0 28 03 c0       	mov    eax,ds:0xc00328e0
c0020724:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020728:	89 14 85 80 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd680],edx
c002072f:	eb 17                	jmp    c0020748 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020731:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020735:	88 c2                	mov    dl,al
c0020737:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002073b:	8b 04 85 00 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd700]
c0020742:	01 d0                	add    eax,edx
c0020744:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020748:	83 ec 04             	sub    esp,0x4
c002074b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002074f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020753:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020757:	50                   	push   eax
c0020758:	e8 a1 65 fe ff       	call   c0006cfe <f_getlabel>
c002075d:	83 c4 10             	add    esp,0x10
c0020760:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020764:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020769:	75 07                	jne    c0020772 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002076b:	b8 00 00 00 00       	mov    eax,0x0
c0020770:	eb 05                	jmp    c0020777 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020772:	b8 01 00 00 00       	mov    eax,0x1
c0020777:	83 c4 1c             	add    esp,0x1c
c002077a:	c3                   	ret    
c002077b:	90                   	nop

c002077c <FAT::setlabel(LogicalDisk*, int, char*)>:
c002077c:	57                   	push   edi
c002077d:	83 ec 58             	sub    esp,0x58
c0020780:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020788:	8d 54 24 10          	lea    edx,[esp+0x10]
c002078c:	b9 0f 00 00 00       	mov    ecx,0xf
c0020791:	b8 00 00 00 00       	mov    eax,0x0
c0020796:	fc                   	cld    
c0020797:	89 d7                	mov    edi,edx
c0020799:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002079b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002079f:	8b 04 85 00 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd700]
c00207a6:	83 f8 ff             	cmp    eax,0xffffffff
c00207a9:	75 34                	jne    c00207df <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00207ab:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207af:	88 c2                	mov    dl,al
c00207b1:	a1 e0 28 03 c0       	mov    eax,ds:0xc00328e0
c00207b6:	01 d0                	add    eax,edx
c00207b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207bc:	8b 15 e0 28 03 c0    	mov    edx,DWORD PTR ds:0xc00328e0
c00207c2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207c6:	89 14 85 00 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd700],edx
c00207cd:	a1 e0 28 03 c0       	mov    eax,ds:0xc00328e0
c00207d2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00207d6:	89 14 85 80 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd680],edx
c00207dd:	eb 17                	jmp    c00207f6 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00207df:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207e3:	88 c2                	mov    dl,al
c00207e5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207e9:	8b 04 85 00 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd700]
c00207f0:	01 d0                	add    eax,edx
c00207f2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207f6:	83 ec 08             	sub    esp,0x8
c00207f9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00207fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020801:	50                   	push   eax
c0020802:	e8 45 01 fe ff       	call   c000094c <strcat>
c0020807:	83 c4 10             	add    esp,0x10
c002080a:	83 ec 0c             	sub    esp,0xc
c002080d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020811:	50                   	push   eax
c0020812:	e8 d5 66 fe ff       	call   c0006eec <f_setlabel>
c0020817:	83 c4 10             	add    esp,0x10
c002081a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002081e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020823:	75 07                	jne    c002082c <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020825:	b8 00 00 00 00       	mov    eax,0x0
c002082a:	eb 05                	jmp    c0020831 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002082c:	b8 01 00 00 00       	mov    eax,0x1
c0020831:	83 c4 58             	add    esp,0x58
c0020834:	5f                   	pop    edi
c0020835:	c3                   	ret    

c0020836 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020836:	83 ec 2c             	sub    esp,0x2c
c0020839:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020841:	83 ec 08             	sub    esp,0x8
c0020844:	68 ec d0 02 c0       	push   0xc002d0ec
c0020849:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002084d:	e8 46 00 fe ff       	call   c0000898 <strcmp>
c0020852:	83 c4 10             	add    esp,0x10
c0020855:	85 c0                	test   eax,eax
c0020857:	0f 94 c0             	sete   al
c002085a:	84 c0                	test   al,al
c002085c:	74 0d                	je     c002086b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002085e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020866:	e9 a6 00 00 00       	jmp    c0020911 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002086b:	83 ec 08             	sub    esp,0x8
c002086e:	68 de d0 02 c0       	push   0xc002d0de
c0020873:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020877:	e8 1c 00 fe ff       	call   c0000898 <strcmp>
c002087c:	83 c4 10             	add    esp,0x10
c002087f:	85 c0                	test   eax,eax
c0020881:	0f 94 c0             	sete   al
c0020884:	84 c0                	test   al,al
c0020886:	74 0a                	je     c0020892 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020888:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020890:	eb 7f                	jmp    c0020911 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020892:	83 ec 08             	sub    esp,0x8
c0020895:	68 e4 d0 02 c0       	push   0xc002d0e4
c002089a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002089e:	e8 f5 ff fd ff       	call   c0000898 <strcmp>
c00208a3:	83 c4 10             	add    esp,0x10
c00208a6:	85 c0                	test   eax,eax
c00208a8:	0f 94 c0             	sete   al
c00208ab:	84 c0                	test   al,al
c00208ad:	74 0a                	je     c00208b9 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00208af:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00208b7:	eb 58                	jmp    c0020911 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208b9:	83 ec 08             	sub    esp,0x8
c00208bc:	68 ac 9d 02 c0       	push   0xc0029dac
c00208c1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208c5:	e8 ce ff fd ff       	call   c0000898 <strcmp>
c00208ca:	83 c4 10             	add    esp,0x10
c00208cd:	85 c0                	test   eax,eax
c00208cf:	0f 94 c0             	sete   al
c00208d2:	84 c0                	test   al,al
c00208d4:	74 0a                	je     c00208e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00208d6:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00208de:	eb 31                	jmp    c0020911 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208e0:	83 ec 08             	sub    esp,0x8
c00208e3:	68 ea d0 02 c0       	push   0xc002d0ea
c00208e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208ec:	e8 a7 ff fd ff       	call   c0000898 <strcmp>
c00208f1:	83 c4 10             	add    esp,0x10
c00208f4:	85 c0                	test   eax,eax
c00208f6:	0f 94 c0             	sete   al
c00208f9:	84 c0                	test   al,al
c00208fb:	74 0a                	je     c0020907 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00208fd:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020905:	eb 0a                	jmp    c0020911 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020907:	b8 08 00 00 00       	mov    eax,0x8
c002090c:	e9 04 01 00 00       	jmp    c0020a15 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020911:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020918:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002091d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020921:	8b 04 85 00 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd700]
c0020928:	83 f8 ff             	cmp    eax,0xffffffff
c002092b:	75 34                	jne    c0020961 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002092d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020931:	88 c2                	mov    dl,al
c0020933:	a1 e0 28 03 c0       	mov    eax,ds:0xc00328e0
c0020938:	01 d0                	add    eax,edx
c002093a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002093e:	8b 15 e0 28 03 c0    	mov    edx,DWORD PTR ds:0xc00328e0
c0020944:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020948:	89 14 85 00 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd700],edx
c002094f:	a1 e0 28 03 c0       	mov    eax,ds:0xc00328e0
c0020954:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020958:	89 14 85 80 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd680],edx
c002095f:	eb 17                	jmp    c0020978 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020961:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020965:	88 c2                	mov    dl,al
c0020967:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002096b:	8b 04 85 00 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd700]
c0020972:	01 d0                	add    eax,edx
c0020974:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002097c:	88 04 24             	mov    BYTE PTR [esp],al
c002097f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020983:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020987:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002098f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020994:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002099c:	83 ec 0c             	sub    esp,0xc
c002099f:	68 00 20 00 00       	push   0x2000
c00209a4:	e8 e3 ee fe ff       	call   c000f88c <malloc>
c00209a9:	83 c4 10             	add    esp,0x10
c00209ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00209b0:	68 00 20 00 00       	push   0x2000
c00209b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209b9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00209bd:	50                   	push   eax
c00209be:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00209c2:	50                   	push   eax
c00209c3:	e8 6f 69 fe ff       	call   c0007337 <f_mkfs>
c00209c8:	83 c4 10             	add    esp,0x10
c00209cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209cf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00209d4:	75 07                	jne    c00209dd <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00209d6:	b8 00 00 00 00       	mov    eax,0x0
c00209db:	eb 38                	jmp    c0020a15 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209dd:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00209e2:	75 17                	jne    c00209fb <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00209e4:	83 ec 0c             	sub    esp,0xc
c00209e7:	68 28 d1 02 c0       	push   0xc002d128
c00209ec:	e8 d8 1e ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00209f1:	83 c4 10             	add    esp,0x10
c00209f4:	b8 09 00 00 00       	mov    eax,0x9
c00209f9:	eb 1a                	jmp    c0020a15 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209ff:	83 ec 08             	sub    esp,0x8
c0020a02:	50                   	push   eax
c0020a03:	68 f0 d0 02 c0       	push   0xc002d0f0
c0020a08:	e8 bc 1e ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0020a0d:	83 c4 10             	add    esp,0x10
c0020a10:	b8 01 00 00 00       	mov    eax,0x1
c0020a15:	83 c4 2c             	add    esp,0x2c
c0020a18:	c3                   	ret    
c0020a19:	90                   	nop

c0020a1a <FAT::tryMount(LogicalDisk*, int)>:
c0020a1a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020a20:	a1 e0 28 03 c0       	mov    eax,ds:0xc00328e0
c0020a25:	83 f8 14             	cmp    eax,0x14
c0020a28:	75 17                	jne    c0020a41 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020a2a:	83 ec 0c             	sub    esp,0xc
c0020a2d:	68 02 d1 02 c0       	push   0xc002d102
c0020a32:	e8 c8 98 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0020a37:	83 c4 10             	add    esp,0x10
c0020a3a:	b0 00                	mov    al,0x0
c0020a3c:	e9 d7 01 00 00       	jmp    c0020c18 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a41:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020a48:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020a4e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a54:	3d 00 02 00 00       	cmp    eax,0x200
c0020a59:	74 07                	je     c0020a62 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020a5b:	b0 00                	mov    al,0x0
c0020a5d:	e9 b6 01 00 00       	jmp    c0020c18 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a62:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a6a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a71:	8b 04 85 00 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd700]
c0020a78:	83 f8 ff             	cmp    eax,0xffffffff
c0020a7b:	74 07                	je     c0020a84 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a7d:	b0 01                	mov    al,0x1
c0020a7f:	e9 94 01 00 00       	jmp    c0020c18 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a84:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a8e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a96:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a9d:	88 c2                	mov    dl,al
c0020a9f:	a1 e0 28 03 c0       	mov    eax,ds:0xc00328e0
c0020aa4:	01 d0                	add    eax,edx
c0020aa6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020aad:	8b 15 e0 28 03 c0    	mov    edx,DWORD PTR ds:0xc00328e0
c0020ab3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020aba:	89 14 85 00 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd700],edx
c0020ac1:	a1 e0 28 03 c0       	mov    eax,ds:0xc00328e0
c0020ac6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020acd:	89 14 85 80 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd680],edx
c0020ad4:	83 ec 0c             	sub    esp,0xc
c0020ad7:	68 54 02 00 00       	push   0x254
c0020adc:	e8 ab ed fe ff       	call   c000f88c <malloc>
c0020ae1:	83 c4 10             	add    esp,0x10
c0020ae4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020aeb:	83 ec 04             	sub    esp,0x4
c0020aee:	6a 00                	push   0x0
c0020af0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020af7:	50                   	push   eax
c0020af8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020aff:	e8 f1 43 fe ff       	call   c0004ef5 <f_mount>
c0020b04:	83 c4 10             	add    esp,0x10
c0020b07:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b0e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020b16:	74 19                	je     c0020b31 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020b18:	83 ec 0c             	sub    esp,0xc
c0020b1b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b22:	e8 85 ed fe ff       	call   c000f8ac <rfree>
c0020b27:	83 c4 10             	add    esp,0x10
c0020b2a:	b0 00                	mov    al,0x0
c0020b2c:	e9 e7 00 00 00       	jmp    c0020c18 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b31:	83 ec 04             	sub    esp,0x4
c0020b34:	68 00 01 00 00       	push   0x100
c0020b39:	6a 00                	push   0x0
c0020b3b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b42:	50                   	push   eax
c0020b43:	e8 08 fc fd ff       	call   c0000750 <memset>
c0020b48:	83 c4 10             	add    esp,0x10
c0020b4b:	83 ec 08             	sub    esp,0x8
c0020b4e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b55:	50                   	push   eax
c0020b56:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b5d:	50                   	push   eax
c0020b5e:	e8 e9 fd fd ff       	call   c000094c <strcat>
c0020b63:	83 c4 10             	add    esp,0x10
c0020b66:	83 ec 08             	sub    esp,0x8
c0020b69:	68 10 d1 02 c0       	push   0xc002d110
c0020b6e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b75:	50                   	push   eax
c0020b76:	e8 d1 fd fd ff       	call   c000094c <strcat>
c0020b7b:	83 c4 10             	add    esp,0x10
c0020b7e:	83 ec 04             	sub    esp,0x4
c0020b81:	6a 01                	push   0x1
c0020b83:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b8a:	50                   	push   eax
c0020b8b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b8f:	50                   	push   eax
c0020b90:	e8 c2 43 fe ff       	call   c0004f57 <f_open>
c0020b95:	83 c4 10             	add    esp,0x10
c0020b98:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b9f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020ba6:	85 c0                	test   eax,eax
c0020ba8:	74 0a                	je     c0020bb4 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020baa:	78 2d                	js     c0020bd9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020bac:	83 e8 04             	sub    eax,0x4
c0020baf:	83 f8 01             	cmp    eax,0x1
c0020bb2:	77 25                	ja     c0020bd9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020bb4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020bbc:	83 ec 0c             	sub    esp,0xc
c0020bbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bc3:	50                   	push   eax
c0020bc4:	e8 e0 4e fe ff       	call   c0005aa9 <f_close>
c0020bc9:	83 c4 10             	add    esp,0x10
c0020bcc:	90                   	nop
c0020bcd:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020bd5:	74 3a                	je     c0020c11 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020bd7:	eb 2d                	jmp    c0020c06 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020bd9:	83 ec 0c             	sub    esp,0xc
c0020bdc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020be3:	e8 c4 ec fe ff       	call   c000f8ac <rfree>
c0020be8:	83 c4 10             	add    esp,0x10
c0020beb:	83 ec 04             	sub    esp,0x4
c0020bee:	6a 00                	push   0x0
c0020bf0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020bf7:	50                   	push   eax
c0020bf8:	6a 00                	push   0x0
c0020bfa:	e8 f6 42 fe ff       	call   c0004ef5 <f_mount>
c0020bff:	83 c4 10             	add    esp,0x10
c0020c02:	b0 00                	mov    al,0x0
c0020c04:	eb 12                	jmp    c0020c18 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020c06:	a1 e0 28 03 c0       	mov    eax,ds:0xc00328e0
c0020c0b:	40                   	inc    eax
c0020c0c:	a3 e0 28 03 c0       	mov    ds:0xc00328e0,eax
c0020c11:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020c18:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020c1e:	c3                   	ret    
c0020c1f:	90                   	nop

c0020c20 <FAT::getFileFirstSector(char const*)>:
c0020c20:	53                   	push   ebx
c0020c21:	83 ec 28             	sub    esp,0x28
c0020c24:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020c2c:	83 ec 0c             	sub    esp,0xc
c0020c2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c33:	e8 54 ec fe ff       	call   c000f88c <malloc>
c0020c38:	83 c4 10             	add    esp,0x10
c0020c3b:	89 c3                	mov    ebx,eax
c0020c3d:	a1 10 28 03 c0       	mov    eax,ds:0xc0032810
c0020c42:	83 ec 04             	sub    esp,0x4
c0020c45:	50                   	push   eax
c0020c46:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020c4a:	53                   	push   ebx
c0020c4b:	e8 d8 21 ff ff       	call   c0012e28 <File::File(char const*, Process*)>
c0020c50:	83 c4 10             	add    esp,0x10
c0020c53:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020c57:	83 ec 08             	sub    esp,0x8
c0020c5a:	6a 01                	push   0x1
c0020c5c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020c60:	e8 27 22 ff ff       	call   c0012e8c <File::open(FileOpenMode)>
c0020c65:	83 c4 10             	add    esp,0x10
c0020c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c6e:	83 c0 0c             	add    eax,0xc
c0020c71:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c73:	83 ec 0c             	sub    esp,0xc
c0020c76:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020c7a:	52                   	push   edx
c0020c7b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020c7f:	52                   	push   edx
c0020c80:	6a 00                	push   0x0
c0020c82:	6a 04                	push   0x4
c0020c84:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020c88:	ff d0                	call   eax
c0020c8a:	83 c4 20             	add    esp,0x20
c0020c8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c91:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020c97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020c9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020c9f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020ca2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020ca5:	83 ec 04             	sub    esp,0x4
c0020ca8:	52                   	push   edx
c0020ca9:	50                   	push   eax
c0020caa:	68 1b d1 02 c0       	push   0xc002d11b
c0020caf:	e8 15 1c ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0020cb4:	83 c4 10             	add    esp,0x10
c0020cb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020cbb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020cbe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020cc1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020cc5:	83 ec 0c             	sub    esp,0xc
c0020cc8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020ccc:	e8 19 22 ff ff       	call   c0012eea <File::close()>
c0020cd1:	83 c4 10             	add    esp,0x10
c0020cd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020cd8:	ba 00 00 00 00       	mov    edx,0x0
c0020cdd:	83 c4 28             	add    esp,0x28
c0020ce0:	5b                   	pop    ebx
c0020ce1:	c3                   	ret    

c0020ce2 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020ce2:	57                   	push   edi
c0020ce3:	56                   	push   esi
c0020ce4:	53                   	push   ebx
c0020ce5:	81 ec 50 02 00 00    	sub    esp,0x250
c0020ceb:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020cf3:	74 0a                	je     c0020cff <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020cf5:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020cfd:	75 0a                	jne    c0020d09 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020cff:	b8 04 00 00 00       	mov    eax,0x4
c0020d04:	e9 29 01 00 00       	jmp    c0020e32 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020d09:	83 ec 08             	sub    esp,0x8
c0020d0c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020d13:	50                   	push   eax
c0020d14:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020d1b:	e8 93 53 fe ff       	call   c00060b3 <f_readdir>
c0020d20:	83 c4 10             	add    esp,0x10
c0020d23:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020d2a:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020d31:	83 ec 0c             	sub    esp,0xc
c0020d34:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020d3b:	83 c0 1a             	add    eax,0x1a
c0020d3e:	50                   	push   eax
c0020d3f:	e8 28 fa fd ff       	call   c000076c <strlen>
c0020d44:	83 c4 10             	add    esp,0x10
c0020d47:	ba 00 00 00 00       	mov    edx,0x0
c0020d4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d54:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020d5b:	0f b6 c0             	movzx  eax,al
c0020d5e:	83 e0 10             	and    eax,0x10
c0020d61:	74 07                	je     c0020d6a <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020d63:	b8 02 00 00 00       	mov    eax,0x2
c0020d68:	eb 05                	jmp    c0020d6f <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020d6a:	b8 01 00 00 00       	mov    eax,0x1
c0020d6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020d73:	83 ec 08             	sub    esp,0x8
c0020d76:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020d7d:	83 c0 1a             	add    eax,0x1a
c0020d80:	50                   	push   eax
c0020d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020d85:	83 c0 10             	add    eax,0x10
c0020d88:	50                   	push   eax
c0020d89:	e8 7e fa fd ff       	call   c000080c <strcpy>
c0020d8e:	83 c4 10             	add    esp,0x10
c0020d91:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020d98:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020d9f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020da3:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020daa:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020db1:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020db8:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020dbf:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020dc6:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020dcd:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020dd4:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020ddb:	89 c6                	mov    esi,eax
c0020ddd:	89 d7                	mov    edi,edx
c0020ddf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020de1:	89 c8                	mov    eax,ecx
c0020de3:	89 fa                	mov    edx,edi
c0020de5:	89 f3                	mov    ebx,esi
c0020de7:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020dee:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020df5:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020dfc:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020e03:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020e09:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020e10:	84 c0                	test   al,al
c0020e12:	75 07                	jne    c0020e1b <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020e14:	b8 07 00 00 00       	mov    eax,0x7
c0020e19:	eb 17                	jmp    c0020e32 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020e1b:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020e22:	85 c0                	test   eax,eax
c0020e24:	75 07                	jne    c0020e2d <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020e26:	b8 00 00 00 00       	mov    eax,0x0
c0020e2b:	eb 05                	jmp    c0020e32 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020e2d:	b8 01 00 00 00       	mov    eax,0x1
c0020e32:	81 c4 50 02 00 00    	add    esp,0x250
c0020e38:	5b                   	pop    ebx
c0020e39:	5e                   	pop    esi
c0020e3a:	5f                   	pop    edi
c0020e3b:	c3                   	ret    

c0020e3c <FAT::read(void*, unsigned long, void*, int*)>:
c0020e3c:	83 ec 1c             	sub    esp,0x1c
c0020e3f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e44:	74 07                	je     c0020e4d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020e46:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020e4b:	75 07                	jne    c0020e54 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020e4d:	b8 04 00 00 00       	mov    eax,0x4
c0020e52:	eb 3d                	jmp    c0020e91 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020e54:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e58:	50                   	push   eax
c0020e59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020e5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020e61:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e65:	e8 29 45 fe ff       	call   c0005393 <f_read>
c0020e6a:	83 c4 10             	add    esp,0x10
c0020e6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e75:	89 c2                	mov    edx,eax
c0020e77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020e7b:	89 10                	mov    DWORD PTR [eax],edx
c0020e7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e81:	85 c0                	test   eax,eax
c0020e83:	75 07                	jne    c0020e8c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020e85:	b8 00 00 00 00       	mov    eax,0x0
c0020e8a:	eb 05                	jmp    c0020e91 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020e8c:	b8 01 00 00 00       	mov    eax,0x1
c0020e91:	83 c4 1c             	add    esp,0x1c
c0020e94:	c3                   	ret    
c0020e95:	90                   	nop

c0020e96 <FAT::write(void*, unsigned long, void*, int*)>:
c0020e96:	83 ec 1c             	sub    esp,0x1c
c0020e99:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e9e:	74 07                	je     c0020ea7 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020ea0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ea5:	75 07                	jne    c0020eae <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020ea7:	b8 04 00 00 00       	mov    eax,0x4
c0020eac:	eb 3d                	jmp    c0020eeb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020eae:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020eb2:	50                   	push   eax
c0020eb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020eb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ebb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ebf:	e8 4f 47 fe ff       	call   c0005613 <f_write>
c0020ec4:	83 c4 10             	add    esp,0x10
c0020ec7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ecb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ecf:	89 c2                	mov    edx,eax
c0020ed1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020ed5:	89 10                	mov    DWORD PTR [eax],edx
c0020ed7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020edb:	85 c0                	test   eax,eax
c0020edd:	75 07                	jne    c0020ee6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020edf:	b8 00 00 00 00       	mov    eax,0x0
c0020ee4:	eb 05                	jmp    c0020eeb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020ee6:	b8 01 00 00 00       	mov    eax,0x1
c0020eeb:	83 c4 1c             	add    esp,0x1c
c0020eee:	c3                   	ret    
c0020eef:	90                   	nop

c0020ef0 <FAT::close(void*)>:
c0020ef0:	83 ec 1c             	sub    esp,0x1c
c0020ef3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ef8:	75 07                	jne    c0020f01 <FAT::close(void*)+0x11>
c0020efa:	b8 04 00 00 00       	mov    eax,0x4
c0020eff:	eb 36                	jmp    c0020f37 <FAT::close(void*)+0x47>
c0020f01:	83 ec 0c             	sub    esp,0xc
c0020f04:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f08:	e8 9c 4b fe ff       	call   c0005aa9 <f_close>
c0020f0d:	83 c4 10             	add    esp,0x10
c0020f10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f14:	83 ec 0c             	sub    esp,0xc
c0020f17:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f1b:	e8 7c e9 fe ff       	call   c000f89c <free>
c0020f20:	83 c4 10             	add    esp,0x10
c0020f23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f27:	85 c0                	test   eax,eax
c0020f29:	75 07                	jne    c0020f32 <FAT::close(void*)+0x42>
c0020f2b:	b8 00 00 00 00       	mov    eax,0x0
c0020f30:	eb 05                	jmp    c0020f37 <FAT::close(void*)+0x47>
c0020f32:	b8 01 00 00 00       	mov    eax,0x1
c0020f37:	83 c4 1c             	add    esp,0x1c
c0020f3a:	c3                   	ret    
c0020f3b:	90                   	nop

c0020f3c <FAT::closeDir(void*)>:
c0020f3c:	83 ec 1c             	sub    esp,0x1c
c0020f3f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020f44:	75 07                	jne    c0020f4d <FAT::closeDir(void*)+0x11>
c0020f46:	b8 04 00 00 00       	mov    eax,0x4
c0020f4b:	eb 36                	jmp    c0020f83 <FAT::closeDir(void*)+0x47>
c0020f4d:	83 ec 0c             	sub    esp,0xc
c0020f50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f54:	e8 38 51 fe ff       	call   c0006091 <f_closedir>
c0020f59:	83 c4 10             	add    esp,0x10
c0020f5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f60:	83 ec 0c             	sub    esp,0xc
c0020f63:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f67:	e8 30 e9 fe ff       	call   c000f89c <free>
c0020f6c:	83 c4 10             	add    esp,0x10
c0020f6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f73:	85 c0                	test   eax,eax
c0020f75:	75 07                	jne    c0020f7e <FAT::closeDir(void*)+0x42>
c0020f77:	b8 00 00 00 00       	mov    eax,0x0
c0020f7c:	eb 05                	jmp    c0020f83 <FAT::closeDir(void*)+0x47>
c0020f7e:	b8 01 00 00 00       	mov    eax,0x1
c0020f83:	83 c4 1c             	add    esp,0x1c
c0020f86:	c3                   	ret    
c0020f87:	90                   	nop

c0020f88 <FAT::seek(void*, unsigned long long)>:
c0020f88:	83 ec 2c             	sub    esp,0x2c
c0020f8b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020f97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f9b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020fa0:	75 07                	jne    c0020fa9 <FAT::seek(void*, unsigned long long)+0x21>
c0020fa2:	b8 04 00 00 00       	mov    eax,0x4
c0020fa7:	eb 2f                	jmp    c0020fd8 <FAT::seek(void*, unsigned long long)+0x50>
c0020fa9:	83 ec 04             	sub    esp,0x4
c0020fac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020fb0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020fb4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020fb8:	e8 1b 4b fe ff       	call   c0005ad8 <f_lseek>
c0020fbd:	83 c4 10             	add    esp,0x10
c0020fc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020fc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020fc8:	85 c0                	test   eax,eax
c0020fca:	75 07                	jne    c0020fd3 <FAT::seek(void*, unsigned long long)+0x4b>
c0020fcc:	b8 00 00 00 00       	mov    eax,0x0
c0020fd1:	eb 05                	jmp    c0020fd8 <FAT::seek(void*, unsigned long long)+0x50>
c0020fd3:	b8 01 00 00 00       	mov    eax,0x1
c0020fd8:	83 c4 2c             	add    esp,0x2c
c0020fdb:	c3                   	ret    

c0020fdc <fatWrapperReadDisk>:
c0020fdc:	83 ec 1c             	sub    esp,0x1c
c0020fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fe3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020fe7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020feb:	89 04 24             	mov    DWORD PTR [esp],eax
c0020fee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020ff2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ff6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ffb:	8b 04 85 c0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0740]
c0021002:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021006:	83 ec 0c             	sub    esp,0xc
c0021009:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002100d:	52                   	push   edx
c002100e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021012:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021016:	50                   	push   eax
c0021017:	e8 2a 52 ff ff       	call   c0016246 <LogicalDisk::read(unsigned long long, int, void*)>
c002101c:	83 c4 20             	add    esp,0x20
c002101f:	83 c4 1c             	add    esp,0x1c
c0021022:	c3                   	ret    

c0021023 <fatWrapperWriteDisk>:
c0021023:	83 ec 1c             	sub    esp,0x1c
c0021026:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002102a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002102e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021032:	89 04 24             	mov    DWORD PTR [esp],eax
c0021035:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021039:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002103d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021042:	8b 04 85 c0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0740]
c0021049:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002104d:	83 ec 0c             	sub    esp,0xc
c0021050:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021054:	52                   	push   edx
c0021055:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021059:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002105d:	50                   	push   eax
c002105e:	e8 4f 52 ff ff       	call   c00162b2 <LogicalDisk::write(unsigned long long, int, void*)>
c0021063:	83 c4 20             	add    esp,0x20
c0021066:	83 c4 1c             	add    esp,0x1c
c0021069:	c3                   	ret    

c002106a <fatWrapperIoctl>:
c002106a:	53                   	push   ebx
c002106b:	83 ec 28             	sub    esp,0x28
c002106e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021072:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021076:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002107a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002107e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0021083:	75 31                	jne    c00210b6 <fatWrapperIoctl+0x4c>
c0021085:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021089:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002108d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021092:	8b 04 85 c0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0740]
c0021099:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002109f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00210a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00210a9:	66 89 02             	mov    WORD PTR [edx],ax
c00210ac:	b8 00 00 00 00       	mov    eax,0x0
c00210b1:	e9 b2 00 00 00       	jmp    c0021168 <fatWrapperIoctl+0xfe>
c00210b6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00210bb:	75 6a                	jne    c0021127 <fatWrapperIoctl+0xbd>
c00210bd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00210c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00210c5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00210ca:	8b 04 85 c0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0740]
c00210d1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00210d7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00210dd:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00210e3:	89 c8                	mov    eax,ecx
c00210e5:	89 da                	mov    edx,ebx
c00210e7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00210eb:	c1 e0 0a             	shl    eax,0xa
c00210ee:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00210f3:	8b 0c 8d c0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0740]
c00210fa:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0021100:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021106:	89 cb                	mov    ebx,ecx
c0021108:	c1 fb 1f             	sar    ebx,0x1f
c002110b:	53                   	push   ebx
c002110c:	51                   	push   ecx
c002110d:	52                   	push   edx
c002110e:	50                   	push   eax
c002110f:	e8 e0 60 00 00       	call   c00271f4 <__udivdi3>
c0021114:	83 c4 10             	add    esp,0x10
c0021117:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002111b:	89 01                	mov    DWORD PTR [ecx],eax
c002111d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021120:	b8 00 00 00 00       	mov    eax,0x0
c0021125:	eb 41                	jmp    c0021168 <fatWrapperIoctl+0xfe>
c0021127:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002112c:	75 07                	jne    c0021135 <fatWrapperIoctl+0xcb>
c002112e:	b8 00 00 00 00       	mov    eax,0x0
c0021133:	eb 33                	jmp    c0021168 <fatWrapperIoctl+0xfe>
c0021135:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002113a:	75 19                	jne    c0021155 <fatWrapperIoctl+0xeb>
c002113c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021140:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021144:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021148:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002114e:	b8 00 00 00 00       	mov    eax,0x0
c0021153:	eb 13                	jmp    c0021168 <fatWrapperIoctl+0xfe>
c0021155:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002115a:	75 07                	jne    c0021163 <fatWrapperIoctl+0xf9>
c002115c:	b8 00 00 00 00       	mov    eax,0x0
c0021161:	eb 05                	jmp    c0021168 <fatWrapperIoctl+0xfe>
c0021163:	b8 04 00 00 00       	mov    eax,0x4
c0021168:	83 c4 28             	add    esp,0x28
c002116b:	5b                   	pop    ebx
c002116c:	c3                   	ret    
c002116d:	90                   	nop

c002116e <FAT::FAT()>:
c002116e:	83 ec 1c             	sub    esp,0x1c
c0021171:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021175:	83 ec 0c             	sub    esp,0xc
c0021178:	50                   	push   eax
c0021179:	e8 56 1a ff ff       	call   c0012bd4 <Filesystem::Filesystem()>
c002117e:	83 c4 10             	add    esp,0x10
c0021181:	ba 58 d1 02 c0       	mov    edx,0xc002d158
c0021186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002118a:	89 10                	mov    DWORD PTR [eax],edx
c002118c:	c7 05 e0 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00328e0,0x0
c0021196:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002119e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00211a3:	7f 15                	jg     c00211ba <FAT::FAT()+0x4c>
c00211a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211a9:	c7 04 85 00 29 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd700],0xffffffff
c00211b4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00211b8:	eb e4                	jmp    c002119e <FAT::FAT()+0x30>
c00211ba:	90                   	nop
c00211bb:	83 c4 1c             	add    esp,0x1c
c00211be:	c3                   	ret    
c00211bf:	90                   	nop

c00211c0 <FAT::fixFilepath(char*)>:
c00211c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211c4:	8a 00                	mov    al,BYTE PTR [eax]
c00211c6:	3c 40                	cmp    al,0x40
c00211c8:	7e 2c                	jle    c00211f6 <FAT::fixFilepath(char*)+0x36>
c00211ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211ce:	8a 00                	mov    al,BYTE PTR [eax]
c00211d0:	83 e8 41             	sub    eax,0x41
c00211d3:	88 c2                	mov    dl,al
c00211d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211d9:	88 10                	mov    BYTE PTR [eax],dl
c00211db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211df:	8a 00                	mov    al,BYTE PTR [eax]
c00211e1:	0f be c0             	movsx  eax,al
c00211e4:	8b 04 85 00 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd700]
c00211eb:	83 c0 30             	add    eax,0x30
c00211ee:	88 c2                	mov    dl,al
c00211f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211f4:	88 10                	mov    BYTE PTR [eax],dl
c00211f6:	90                   	nop
c00211f7:	c3                   	ret    

c00211f8 <FAT::open(char const*, void**, FileOpenMode)>:
c00211f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00211fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021206:	74 0a                	je     c0021212 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021208:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021210:	75 0a                	jne    c002121c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021212:	b8 04 00 00 00       	mov    eax,0x4
c0021217:	e9 fd 00 00 00       	jmp    c0021319 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002121c:	83 ec 08             	sub    esp,0x8
c002121f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021226:	8d 44 24 14          	lea    eax,[esp+0x14]
c002122a:	50                   	push   eax
c002122b:	e8 dc f5 fd ff       	call   c000080c <strcpy>
c0021230:	83 c4 10             	add    esp,0x10
c0021233:	83 ec 08             	sub    esp,0x8
c0021236:	8d 44 24 10          	lea    eax,[esp+0x10]
c002123a:	50                   	push   eax
c002123b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021242:	e8 79 ff ff ff       	call   c00211c0 <FAT::fixFilepath(char*)>
c0021247:	83 c4 10             	add    esp,0x10
c002124a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021252:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021259:	83 e0 01             	and    eax,0x1
c002125c:	74 08                	je     c0021266 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002125e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021266:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002126d:	83 e0 04             	and    eax,0x4
c0021270:	74 10                	je     c0021282 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021272:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002127a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021282:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021289:	83 e0 02             	and    eax,0x2
c002128c:	74 08                	je     c0021296 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002128e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021296:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002129d:	83 e0 08             	and    eax,0x8
c00212a0:	74 08                	je     c00212aa <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00212a2:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00212aa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00212b1:	83 e0 10             	and    eax,0x10
c00212b4:	74 08                	je     c00212be <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00212b6:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00212be:	83 ec 0c             	sub    esp,0xc
c00212c1:	68 50 02 00 00       	push   0x250
c00212c6:	e8 c1 e5 fe ff       	call   c000f88c <malloc>
c00212cb:	83 c4 10             	add    esp,0x10
c00212ce:	89 c2                	mov    edx,eax
c00212d0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00212d7:	89 10                	mov    DWORD PTR [eax],edx
c00212d9:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00212e1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00212e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00212ea:	83 ec 04             	sub    esp,0x4
c00212ed:	52                   	push   edx
c00212ee:	8d 54 24 10          	lea    edx,[esp+0x10]
c00212f2:	52                   	push   edx
c00212f3:	50                   	push   eax
c00212f4:	e8 5e 3c fe ff       	call   c0004f57 <f_open>
c00212f9:	83 c4 10             	add    esp,0x10
c00212fc:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021303:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002130b:	74 07                	je     c0021314 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002130d:	b8 01 00 00 00       	mov    eax,0x1
c0021312:	eb 05                	jmp    c0021319 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021314:	b8 00 00 00 00       	mov    eax,0x0
c0021319:	81 c4 1c 01 00 00    	add    esp,0x11c
c002131f:	c3                   	ret    

c0021320 <FAT::openDir(char const*, void**)>:
c0021320:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021326:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002132e:	74 0a                	je     c002133a <FAT::openDir(char const*, void**)+0x1a>
c0021330:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021338:	75 07                	jne    c0021341 <FAT::openDir(char const*, void**)+0x21>
c002133a:	b8 04 00 00 00       	mov    eax,0x4
c002133f:	eb 7d                	jmp    c00213be <FAT::openDir(char const*, void**)+0x9e>
c0021341:	83 ec 08             	sub    esp,0x8
c0021344:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002134b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002134f:	50                   	push   eax
c0021350:	e8 b7 f4 fd ff       	call   c000080c <strcpy>
c0021355:	83 c4 10             	add    esp,0x10
c0021358:	83 ec 08             	sub    esp,0x8
c002135b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002135f:	50                   	push   eax
c0021360:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021367:	e8 54 fe ff ff       	call   c00211c0 <FAT::fixFilepath(char*)>
c002136c:	83 c4 10             	add    esp,0x10
c002136f:	83 ec 0c             	sub    esp,0xc
c0021372:	6a 4c                	push   0x4c
c0021374:	e8 13 e5 fe ff       	call   c000f88c <malloc>
c0021379:	83 c4 10             	add    esp,0x10
c002137c:	89 c2                	mov    edx,eax
c002137e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021385:	89 10                	mov    DWORD PTR [eax],edx
c0021387:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002138e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021390:	83 ec 08             	sub    esp,0x8
c0021393:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021397:	52                   	push   edx
c0021398:	50                   	push   eax
c0021399:	e8 f1 4b fe ff       	call   c0005f8f <f_opendir>
c002139e:	83 c4 10             	add    esp,0x10
c00213a1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00213a8:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00213b0:	74 07                	je     c00213b9 <FAT::openDir(char const*, void**)+0x99>
c00213b2:	b8 01 00 00 00       	mov    eax,0x1
c00213b7:	eb 05                	jmp    c00213be <FAT::openDir(char const*, void**)+0x9e>
c00213b9:	b8 00 00 00 00       	mov    eax,0x0
c00213be:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213c4:	c3                   	ret    
c00213c5:	90                   	nop

c00213c6 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00213c6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00213cc:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00213d4:	75 0a                	jne    c00213e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00213d6:	b8 04 00 00 00       	mov    eax,0x4
c00213db:	e9 c9 00 00 00       	jmp    c00214a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00213e0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00213e8:	75 0a                	jne    c00213f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00213ea:	b8 04 00 00 00       	mov    eax,0x4
c00213ef:	e9 b5 00 00 00       	jmp    c00214a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00213f4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00213fc:	75 0a                	jne    c0021408 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00213fe:	b8 04 00 00 00       	mov    eax,0x4
c0021403:	e9 a1 00 00 00       	jmp    c00214a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021408:	83 ec 08             	sub    esp,0x8
c002140b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021412:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021419:	50                   	push   eax
c002141a:	e8 ed f3 fd ff       	call   c000080c <strcpy>
c002141f:	83 c4 10             	add    esp,0x10
c0021422:	83 ec 08             	sub    esp,0x8
c0021425:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002142c:	50                   	push   eax
c002142d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021434:	e8 87 fd ff ff       	call   c00211c0 <FAT::fixFilepath(char*)>
c0021439:	83 c4 10             	add    esp,0x10
c002143c:	83 ec 08             	sub    esp,0x8
c002143f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021443:	50                   	push   eax
c0021444:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002144b:	50                   	push   eax
c002144c:	e8 fd 4c fe ff       	call   c000614e <f_stat>
c0021451:	83 c4 10             	add    esp,0x10
c0021454:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002145b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021462:	85 c0                	test   eax,eax
c0021464:	74 07                	je     c002146d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021466:	83 f8 04             	cmp    eax,0x4
c0021469:	74 32                	je     c002149d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002146b:	eb 37                	jmp    c00214a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002146d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021471:	0f b6 c0             	movzx  eax,al
c0021474:	83 e0 10             	and    eax,0x10
c0021477:	0f 95 c2             	setne  dl
c002147a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021481:	88 10                	mov    BYTE PTR [eax],dl
c0021483:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021486:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002148a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021491:	89 01                	mov    DWORD PTR [ecx],eax
c0021493:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021496:	b8 00 00 00 00       	mov    eax,0x0
c002149b:	eb 0c                	jmp    c00214a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002149d:	b8 02 00 00 00       	mov    eax,0x2
c00214a2:	eb 05                	jmp    c00214a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00214a4:	b8 01 00 00 00       	mov    eax,0x1
c00214a9:	81 c4 2c 02 00 00    	add    esp,0x22c
c00214af:	c3                   	ret    

c00214b0 <FAT::unlink(char const*)>:
c00214b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00214b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00214be:	75 07                	jne    c00214c7 <FAT::unlink(char const*)+0x17>
c00214c0:	b8 04 00 00 00       	mov    eax,0x4
c00214c5:	eb 5c                	jmp    c0021523 <FAT::unlink(char const*)+0x73>
c00214c7:	83 ec 08             	sub    esp,0x8
c00214ca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00214d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214d5:	50                   	push   eax
c00214d6:	e8 31 f3 fd ff       	call   c000080c <strcpy>
c00214db:	83 c4 10             	add    esp,0x10
c00214de:	83 ec 08             	sub    esp,0x8
c00214e1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214e5:	50                   	push   eax
c00214e6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00214ed:	e8 ce fc ff ff       	call   c00211c0 <FAT::fixFilepath(char*)>
c00214f2:	83 c4 10             	add    esp,0x10
c00214f5:	83 ec 0c             	sub    esp,0xc
c00214f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214fc:	50                   	push   eax
c00214fd:	e8 9e 4f fe ff       	call   c00064a0 <f_unlink>
c0021502:	83 c4 10             	add    esp,0x10
c0021505:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002150c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021513:	85 c0                	test   eax,eax
c0021515:	75 07                	jne    c002151e <FAT::unlink(char const*)+0x6e>
c0021517:	b8 00 00 00 00       	mov    eax,0x0
c002151c:	eb 05                	jmp    c0021523 <FAT::unlink(char const*)+0x73>
c002151e:	b8 01 00 00 00       	mov    eax,0x1
c0021523:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021529:	c3                   	ret    

c002152a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002152a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021530:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021537:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002153e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021542:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021546:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002154e:	75 0a                	jne    c002155a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021550:	b8 04 00 00 00       	mov    eax,0x4
c0021555:	e9 1c 01 00 00       	jmp    c0021676 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002155a:	83 ec 08             	sub    esp,0x8
c002155d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021564:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021568:	50                   	push   eax
c0021569:	e8 9e f2 fd ff       	call   c000080c <strcpy>
c002156e:	83 c4 10             	add    esp,0x10
c0021571:	83 ec 08             	sub    esp,0x8
c0021574:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021578:	50                   	push   eax
c0021579:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021580:	e8 3b fc ff ff       	call   c00211c0 <FAT::fixFilepath(char*)>
c0021585:	83 c4 10             	add    esp,0x10
c0021588:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021590:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021598:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002159d:	83 e0 01             	and    eax,0x1
c00215a0:	74 08                	je     c00215aa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00215a2:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00215aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215af:	83 e0 02             	and    eax,0x2
c00215b2:	74 08                	je     c00215bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00215b4:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00215bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215c1:	83 e0 04             	and    eax,0x4
c00215c4:	74 08                	je     c00215ce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00215c6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00215ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215d3:	83 e0 08             	and    eax,0x8
c00215d6:	74 08                	je     c00215e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00215d8:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00215e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215e5:	83 e0 01             	and    eax,0x1
c00215e8:	74 08                	je     c00215f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00215ea:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00215f2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215f7:	83 e0 02             	and    eax,0x2
c00215fa:	74 08                	je     c0021604 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00215fc:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021604:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021609:	83 e0 04             	and    eax,0x4
c002160c:	74 08                	je     c0021616 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002160e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021616:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002161b:	83 e0 08             	and    eax,0x8
c002161e:	74 08                	je     c0021628 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021620:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021628:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002162f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021636:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002163e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021646:	83 ec 04             	sub    esp,0x4
c0021649:	52                   	push   edx
c002164a:	50                   	push   eax
c002164b:	8d 44 24 24          	lea    eax,[esp+0x24]
c002164f:	50                   	push   eax
c0021650:	e8 ed 54 fe ff       	call   c0006b42 <f_chmod>
c0021655:	83 c4 10             	add    esp,0x10
c0021658:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002165f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021666:	85 c0                	test   eax,eax
c0021668:	75 07                	jne    c0021671 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002166a:	b8 00 00 00 00       	mov    eax,0x0
c002166f:	eb 05                	jmp    c0021676 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021671:	b8 01 00 00 00       	mov    eax,0x1
c0021676:	81 c4 2c 01 00 00    	add    esp,0x12c
c002167c:	c3                   	ret    
c002167d:	90                   	nop

c002167e <FAT::rename(char const*, char const*)>:
c002167e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021684:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002168c:	74 0a                	je     c0021698 <FAT::rename(char const*, char const*)+0x1a>
c002168e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021696:	75 0a                	jne    c00216a2 <FAT::rename(char const*, char const*)+0x24>
c0021698:	b8 04 00 00 00       	mov    eax,0x4
c002169d:	e9 98 00 00 00       	jmp    c002173a <FAT::rename(char const*, char const*)+0xbc>
c00216a2:	83 ec 08             	sub    esp,0x8
c00216a5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00216ac:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00216b3:	50                   	push   eax
c00216b4:	e8 53 f1 fd ff       	call   c000080c <strcpy>
c00216b9:	83 c4 10             	add    esp,0x10
c00216bc:	83 ec 08             	sub    esp,0x8
c00216bf:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00216c6:	50                   	push   eax
c00216c7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00216ce:	e8 ed fa ff ff       	call   c00211c0 <FAT::fixFilepath(char*)>
c00216d3:	83 c4 10             	add    esp,0x10
c00216d6:	83 ec 08             	sub    esp,0x8
c00216d9:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00216e0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00216e4:	50                   	push   eax
c00216e5:	e8 22 f1 fd ff       	call   c000080c <strcpy>
c00216ea:	83 c4 10             	add    esp,0x10
c00216ed:	83 ec 08             	sub    esp,0x8
c00216f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00216f4:	50                   	push   eax
c00216f5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00216fc:	e8 bf fa ff ff       	call   c00211c0 <FAT::fixFilepath(char*)>
c0021701:	83 c4 10             	add    esp,0x10
c0021704:	83 ec 08             	sub    esp,0x8
c0021707:	8d 44 24 14          	lea    eax,[esp+0x14]
c002170b:	50                   	push   eax
c002170c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021713:	50                   	push   eax
c0021714:	e8 36 51 fe ff       	call   c000684f <f_rename>
c0021719:	83 c4 10             	add    esp,0x10
c002171c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021723:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002172a:	85 c0                	test   eax,eax
c002172c:	75 07                	jne    c0021735 <FAT::rename(char const*, char const*)+0xb7>
c002172e:	b8 00 00 00 00       	mov    eax,0x0
c0021733:	eb 05                	jmp    c002173a <FAT::rename(char const*, char const*)+0xbc>
c0021735:	b8 01 00 00 00       	mov    eax,0x1
c002173a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021740:	c3                   	ret    
c0021741:	90                   	nop

c0021742 <FAT::mkdir(char const*)>:
c0021742:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021748:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021750:	75 07                	jne    c0021759 <FAT::mkdir(char const*)+0x17>
c0021752:	b8 04 00 00 00       	mov    eax,0x4
c0021757:	eb 5c                	jmp    c00217b5 <FAT::mkdir(char const*)+0x73>
c0021759:	83 ec 08             	sub    esp,0x8
c002175c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021763:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021767:	50                   	push   eax
c0021768:	e8 9f f0 fd ff       	call   c000080c <strcpy>
c002176d:	83 c4 10             	add    esp,0x10
c0021770:	83 ec 08             	sub    esp,0x8
c0021773:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021777:	50                   	push   eax
c0021778:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002177f:	e8 3c fa ff ff       	call   c00211c0 <FAT::fixFilepath(char*)>
c0021784:	83 c4 10             	add    esp,0x10
c0021787:	83 ec 0c             	sub    esp,0xc
c002178a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002178e:	50                   	push   eax
c002178f:	e8 8f 4e fe ff       	call   c0006623 <f_mkdir>
c0021794:	83 c4 10             	add    esp,0x10
c0021797:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002179e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00217a5:	85 c0                	test   eax,eax
c00217a7:	75 07                	jne    c00217b0 <FAT::mkdir(char const*)+0x6e>
c00217a9:	b8 00 00 00 00       	mov    eax,0x0
c00217ae:	eb 05                	jmp    c00217b5 <FAT::mkdir(char const*)+0x73>
c00217b0:	b8 01 00 00 00       	mov    eax,0x1
c00217b5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00217bb:	c3                   	ret    

c00217bc <FAT::exists(char const*)>:
c00217bc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00217c2:	83 ec 08             	sub    esp,0x8
c00217c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00217cc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00217d0:	50                   	push   eax
c00217d1:	e8 36 f0 fd ff       	call   c000080c <strcpy>
c00217d6:	83 c4 10             	add    esp,0x10
c00217d9:	83 ec 08             	sub    esp,0x8
c00217dc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217e0:	50                   	push   eax
c00217e1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00217e8:	e8 d3 f9 ff ff       	call   c00211c0 <FAT::fixFilepath(char*)>
c00217ed:	83 c4 10             	add    esp,0x10
c00217f0:	83 ec 08             	sub    esp,0x8
c00217f3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00217fa:	50                   	push   eax
c00217fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00217ff:	50                   	push   eax
c0021800:	e8 49 49 fe ff       	call   c000614e <f_stat>
c0021805:	83 c4 10             	add    esp,0x10
c0021808:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002180f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021816:	85 c0                	test   eax,eax
c0021818:	75 04                	jne    c002181e <FAT::exists(char const*)+0x62>
c002181a:	b0 01                	mov    al,0x1
c002181c:	eb 02                	jmp    c0021820 <FAT::exists(char const*)+0x64>
c002181e:	b0 00                	mov    al,0x0
c0021820:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021826:	c3                   	ret    
c0021827:	90                   	nop

c0021828 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021828:	b8 08 00 00 00       	mov    eax,0x8
c002182d:	c3                   	ret    

c002182e <ISO9660::seek(void*, unsigned long long)>:
c002182e:	53                   	push   ebx
c002182f:	b8 04 00 00 00       	mov    eax,0x4
c0021834:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021838:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002183c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021840:	85 d2                	test   edx,edx
c0021842:	74 17                	je     c002185b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021844:	89 c8                	mov    eax,ecx
c0021846:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021849:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002184c:	b8 01 00 00 00       	mov    eax,0x1
c0021851:	73 08                	jae    c002185b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021853:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021856:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021859:	31 c0                	xor    eax,eax
c002185b:	5b                   	pop    ebx
c002185c:	c3                   	ret    
c002185d:	90                   	nop

c002185e <ISO9660::tell(void*, unsigned long long*)>:
c002185e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021862:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021866:	85 d2                	test   edx,edx
c0021868:	74 12                	je     c002187c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002186a:	85 c0                	test   eax,eax
c002186c:	74 0e                	je     c002187c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002186e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021871:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021874:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021877:	89 10                	mov    DWORD PTR [eax],edx
c0021879:	31 c0                	xor    eax,eax
c002187b:	c3                   	ret    
c002187c:	b8 04 00 00 00       	mov    eax,0x4
c0021881:	c3                   	ret    

c0021882 <ISO9660::getName()>:
c0021882:	b8 b8 d1 02 c0       	mov    eax,0xc002d1b8
c0021887:	c3                   	ret    

c0021888 <ISO9660::stat(void*, unsigned long long*)>:
c0021888:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002188c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021890:	85 d2                	test   edx,edx
c0021892:	74 12                	je     c00218a6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021894:	85 c0                	test   eax,eax
c0021896:	74 0e                	je     c00218a6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021898:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002189b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002189e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00218a1:	89 10                	mov    DWORD PTR [eax],edx
c00218a3:	31 c0                	xor    eax,eax
c00218a5:	c3                   	ret    
c00218a6:	b8 04 00 00 00       	mov    eax,0x4
c00218ab:	c3                   	ret    

c00218ac <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00218ac:	b8 01 00 00 00       	mov    eax,0x1
c00218b1:	c3                   	ret    

c00218b2 <ISO9660::unlink(char const*)>:
c00218b2:	b8 01 00 00 00       	mov    eax,0x1
c00218b7:	c3                   	ret    

c00218b8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00218b8:	b8 01 00 00 00       	mov    eax,0x1
c00218bd:	c3                   	ret    

c00218be <ISO9660::rename(char const*, char const*)>:
c00218be:	b8 01 00 00 00       	mov    eax,0x1
c00218c3:	c3                   	ret    

c00218c4 <ISO9660::mkdir(char const*)>:
c00218c4:	b8 01 00 00 00       	mov    eax,0x1
c00218c9:	c3                   	ret    

c00218ca <ISO9660::close(void*)>:
c00218ca:	83 ec 0c             	sub    esp,0xc
c00218cd:	b8 04 00 00 00       	mov    eax,0x4
c00218d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00218d6:	85 d2                	test   edx,edx
c00218d8:	74 0e                	je     c00218e8 <ISO9660::close(void*)+0x1e>
c00218da:	83 ec 0c             	sub    esp,0xc
c00218dd:	52                   	push   edx
c00218de:	e8 b9 df fe ff       	call   c000f89c <free>
c00218e3:	83 c4 10             	add    esp,0x10
c00218e6:	31 c0                	xor    eax,eax
c00218e8:	83 c4 0c             	add    esp,0xc
c00218eb:	c3                   	ret    

c00218ec <ISO9660::closeDir(void*)>:
c00218ec:	83 ec 0c             	sub    esp,0xc
c00218ef:	b8 04 00 00 00       	mov    eax,0x4
c00218f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00218f8:	85 d2                	test   edx,edx
c00218fa:	74 0e                	je     c002190a <ISO9660::closeDir(void*)+0x1e>
c00218fc:	83 ec 0c             	sub    esp,0xc
c00218ff:	52                   	push   edx
c0021900:	e8 97 df fe ff       	call   c000f89c <free>
c0021905:	83 c4 10             	add    esp,0x10
c0021908:	31 c0                	xor    eax,eax
c002190a:	83 c4 0c             	add    esp,0xc
c002190d:	c3                   	ret    

c002190e <ISO9660::~ISO9660()>:
c002190e:	83 ec 0c             	sub    esp,0xc
c0021911:	ba 1c d2 02 c0       	mov    edx,0xc002d21c
c0021916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002191a:	89 10                	mov    DWORD PTR [eax],edx
c002191c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021920:	83 ec 0c             	sub    esp,0xc
c0021923:	50                   	push   eax
c0021924:	e8 cf 12 ff ff       	call   c0012bf8 <Filesystem::~Filesystem()>
c0021929:	83 c4 10             	add    esp,0x10
c002192c:	90                   	nop
c002192d:	83 c4 0c             	add    esp,0xc
c0021930:	c3                   	ret    
c0021931:	90                   	nop

c0021932 <ISO9660::~ISO9660()>:
c0021932:	83 ec 0c             	sub    esp,0xc
c0021935:	83 ec 0c             	sub    esp,0xc
c0021938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002193c:	e8 cd ff ff ff       	call   c002190e <ISO9660::~ISO9660()>
c0021941:	83 c4 10             	add    esp,0x10
c0021944:	83 ec 08             	sub    esp,0x8
c0021947:	6a 08                	push   0x8
c0021949:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002194d:	e8 97 0e ff ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0021952:	83 c4 10             	add    esp,0x10
c0021955:	83 c4 0c             	add    esp,0xc
c0021958:	c3                   	ret    

c0021959 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021959:	55                   	push   ebp
c002195a:	31 c9                	xor    ecx,ecx
c002195c:	57                   	push   edi
c002195d:	56                   	push   esi
c002195e:	53                   	push   ebx
c002195f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021963:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021967:	89 eb                	mov    ebx,ebp
c0021969:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002196d:	39 ce                	cmp    esi,ecx
c002196f:	7e 17                	jle    c0021988 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021971:	31 d2                	xor    edx,edx
c0021973:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021977:	7d 13                	jge    c002198c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021979:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002197d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021980:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021983:	75 0d                	jne    c0021992 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021985:	42                   	inc    edx
c0021986:	eb eb                	jmp    c0021973 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021988:	31 c0                	xor    eax,eax
c002198a:	eb 0a                	jmp    c0021996 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002198c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021990:	eb 04                	jmp    c0021996 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021992:	41                   	inc    ecx
c0021993:	43                   	inc    ebx
c0021994:	eb d7                	jmp    c002196d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021996:	5b                   	pop    ebx
c0021997:	5e                   	pop    esi
c0021998:	5f                   	pop    edi
c0021999:	5d                   	pop    ebp
c002199a:	c3                   	ret    

c002199b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002199b:	57                   	push   edi
c002199c:	56                   	push   esi
c002199d:	53                   	push   ebx
c002199e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00219a6:	39 0d e0 29 03 c0    	cmp    DWORD PTR ds:0xc00329e0,ecx
c00219ac:	75 08                	jne    c00219b6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00219ae:	38 05 54 e8 02 c0    	cmp    BYTE PTR ds:0xc002e854,al
c00219b4:	74 2b                	je     c00219e1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00219b6:	83 ec 0c             	sub    esp,0xc
c00219b9:	a2 54 e8 02 c0       	mov    ds:0xc002e854,al
c00219be:	68 00 2a 03 c0       	push   0xc0032a00
c00219c3:	0f be c0             	movsx  eax,al
c00219c6:	6a 01                	push   0x1
c00219c8:	89 0d e0 29 03 c0    	mov    DWORD PTR ds:0xc00329e0,ecx
c00219ce:	31 db                	xor    ebx,ebx
c00219d0:	53                   	push   ebx
c00219d1:	51                   	push   ecx
c00219d2:	ff 34 85 bc f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd0844]
c00219d9:	e8 68 48 ff ff       	call   c0016246 <LogicalDisk::read(unsigned long long, int, void*)>
c00219de:	83 c4 20             	add    esp,0x20
c00219e1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00219e5:	be 00 2a 03 c0       	mov    esi,0xc0032a00
c00219ea:	b9 00 08 00 00       	mov    ecx,0x800
c00219ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00219f1:	5b                   	pop    ebx
c00219f2:	5e                   	pop    esi
c00219f3:	5f                   	pop    edi
c00219f4:	c3                   	ret    
c00219f5:	90                   	nop

c00219f6 <ISO9660::tryMount(LogicalDisk*, int)>:
c00219f6:	81 ec 10 08 00 00    	sub    esp,0x810
c00219fc:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021a03:	83 c0 41             	add    eax,0x41
c0021a06:	0f be c0             	movsx  eax,al
c0021a09:	50                   	push   eax
c0021a0a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021a0e:	50                   	push   eax
c0021a0f:	6a 10                	push   0x10
c0021a11:	e8 85 ff ff ff       	call   c002199b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a16:	83 c4 10             	add    esp,0x10
c0021a19:	31 c0                	xor    eax,eax
c0021a1b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021a20:	75 1d                	jne    c0021a3f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a22:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021a27:	75 16                	jne    c0021a3f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a29:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021a2e:	75 0f                	jne    c0021a3f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a30:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021a35:	75 08                	jne    c0021a3f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a37:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021a3c:	0f 94 c0             	sete   al
c0021a3f:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021a45:	c3                   	ret    

c0021a46 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021a46:	55                   	push   ebp
c0021a47:	57                   	push   edi
c0021a48:	56                   	push   esi
c0021a49:	53                   	push   ebx
c0021a4a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021a50:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021a57:	85 ed                	test   ebp,ebp
c0021a59:	0f 84 da 01 00 00    	je     c0021c39 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021a5f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021a67:	0f 84 cc 01 00 00    	je     c0021c39 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021a6d:	b8 01 00 00 00       	mov    eax,0x1
c0021a72:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021a76:	0f 85 c2 01 00 00    	jne    c0021c3e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021a7c:	31 d2                	xor    edx,edx
c0021a7e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021a85:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021a88:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021a8b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021a8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a91:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a95:	01 c8                	add    eax,ecx
c0021a97:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021a9a:	11 da                	adc    edx,ebx
c0021a9c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021aa0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021aa4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021aa8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021aac:	19 d7                	sbb    edi,edx
c0021aae:	72 11                	jb     c0021ac1 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021ab0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021ab3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021ab7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021abb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021abf:	eb 0c                	jmp    c0021acd <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021ac1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021ac5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021ac9:	29 ce                	sub    esi,ecx
c0021acb:	19 df                	sbb    edi,ebx
c0021acd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021ad0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021ad3:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021ad7:	c1 e0 0b             	shl    eax,0xb
c0021ada:	01 c8                	add    eax,ecx
c0021adc:	11 da                	adc    edx,ebx
c0021ade:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ae1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021ae5:	51                   	push   ecx
c0021ae6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021aea:	50                   	push   eax
c0021aeb:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021aef:	53                   	push   ebx
c0021af0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021af4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021af8:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021afc:	50                   	push   eax
c0021afd:	e8 99 fe ff ff       	call   c002199b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b02:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021b05:	b8 00 08 00 00       	mov    eax,0x800
c0021b0a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021b10:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021b14:	29 d0                	sub    eax,edx
c0021b16:	83 c4 10             	add    esp,0x10
c0021b19:	89 f9                	mov    ecx,edi
c0021b1b:	39 c6                	cmp    esi,eax
c0021b1d:	83 d9 00             	sbb    ecx,0x0
c0021b20:	7d 1b                	jge    c0021b3d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021b22:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021b27:	75 12                	jne    c0021b3b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021b29:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021b30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021b36:	e9 fa 00 00 00       	jmp    c0021c35 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021b3b:	89 f0                	mov    eax,esi
c0021b3d:	01 d3                	add    ebx,edx
c0021b3f:	31 d2                	xor    edx,edx
c0021b41:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021b45:	39 c2                	cmp    edx,eax
c0021b47:	7d 14                	jge    c0021b5d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021b49:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021b50:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021b54:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021b57:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021b5a:	42                   	inc    edx
c0021b5b:	eb e8                	jmp    c0021b45 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021b5d:	89 c2                	mov    edx,eax
c0021b5f:	85 c0                	test   eax,eax
c0021b61:	79 02                	jns    c0021b65 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021b63:	31 d2                	xor    edx,edx
c0021b65:	01 c2                	add    edx,eax
c0021b67:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021b6a:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021b71:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021b75:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021b79:	99                   	cdq    
c0021b7a:	01 c1                	add    ecx,eax
c0021b7c:	11 d3                	adc    ebx,edx
c0021b7e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021b82:	29 c6                	sub    esi,eax
c0021b84:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021b88:	19 d7                	sbb    edi,edx
c0021b8a:	89 34 24             	mov    DWORD PTR [esp],esi
c0021b8d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021b91:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021b96:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021b99:	b8 00 00 00 00       	mov    eax,0x0
c0021b9e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021ba2:	7d 43                	jge    c0021be7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021ba4:	52                   	push   edx
c0021ba5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021ba9:	50                   	push   eax
c0021baa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021bae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021bb2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021bb6:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021bba:	50                   	push   eax
c0021bbb:	e8 db fd ff ff       	call   c002199b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021bc0:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021bc8:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021bcd:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021bd5:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021bdd:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021be2:	83 c4 10             	add    esp,0x10
c0021be5:	eb aa                	jmp    c0021b91 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021be7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021beb:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021bee:	74 2a                	je     c0021c1a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021bf0:	50                   	push   eax
c0021bf1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021bf5:	50                   	push   eax
c0021bf6:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021bfa:	56                   	push   esi
c0021bfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021bff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021c03:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021c07:	51                   	push   ecx
c0021c08:	e8 8e fd ff ff       	call   c002199b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c0d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021c11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021c17:	83 c4 10             	add    esp,0x10
c0021c1a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021c21:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021c25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c29:	89 18                	mov    DWORD PTR [eax],ebx
c0021c2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021c2f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021c32:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021c35:	31 c0                	xor    eax,eax
c0021c37:	eb 05                	jmp    c0021c3e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021c39:	b8 04 00 00 00       	mov    eax,0x4
c0021c3e:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021c44:	5b                   	pop    ebx
c0021c45:	5e                   	pop    esi
c0021c46:	5f                   	pop    edi
c0021c47:	5d                   	pop    ebp
c0021c48:	c3                   	ret    
c0021c49:	90                   	nop

c0021c4a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021c4a:	55                   	push   ebp
c0021c4b:	57                   	push   edi
c0021c4c:	56                   	push   esi
c0021c4d:	53                   	push   ebx
c0021c4e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021c54:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021c5b:	85 ed                	test   ebp,ebp
c0021c5d:	0f 84 51 02 00 00    	je     c0021eb4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021c63:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021c6b:	0f 84 43 02 00 00    	je     c0021eb4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021c71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c74:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021c77:	75 0a                	jne    c0021c83 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021c79:	b8 07 00 00 00       	mov    eax,0x7
c0021c7e:	e9 36 02 00 00       	jmp    c0021eb9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c83:	50                   	push   eax
c0021c84:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021c88:	50                   	push   eax
c0021c89:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021c90:	53                   	push   ebx
c0021c91:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021c94:	c1 e0 0b             	shl    eax,0xb
c0021c97:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021c9a:	c1 e8 0b             	shr    eax,0xb
c0021c9d:	50                   	push   eax
c0021c9e:	e8 f8 fc ff ff       	call   c002199b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ca3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021ca6:	83 c4 10             	add    esp,0x10
c0021ca9:	89 c1                	mov    ecx,eax
c0021cab:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021cae:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021cb4:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021cb7:	84 db                	test   bl,bl
c0021cb9:	0f 85 8b 00 00 00    	jne    c0021d4a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021cbf:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021cc5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021cc8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021cce:	29 c6                	sub    esi,eax
c0021cd0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021cd4:	89 f3                	mov    ebx,esi
c0021cd6:	89 f1                	mov    ecx,esi
c0021cd8:	c1 fb 1f             	sar    ebx,0x1f
c0021cdb:	01 f0                	add    eax,esi
c0021cdd:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021ce0:	11 da                	adc    edx,ebx
c0021ce2:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ce5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021ce9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021cec:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021cef:	89 d8                	mov    eax,ebx
c0021cf1:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021cf5:	ba 00 00 00 00       	mov    edx,0x0
c0021cfa:	19 f8                	sbb    eax,edi
c0021cfc:	b8 00 00 00 00       	mov    eax,0x0
c0021d01:	73 08                	jae    c0021d0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021d03:	89 f0                	mov    eax,esi
c0021d05:	89 fa                	mov    edx,edi
c0021d07:	29 c8                	sub    eax,ecx
c0021d09:	19 da                	sbb    edx,ebx
c0021d0b:	89 d7                	mov    edi,edx
c0021d0d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021d10:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021d13:	09 c7                	or     edi,eax
c0021d15:	0f 84 5e ff ff ff    	je     c0021c79 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021d1b:	57                   	push   edi
c0021d1c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021d20:	50                   	push   eax
c0021d21:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021d28:	53                   	push   ebx
c0021d29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021d2c:	c1 e0 0b             	shl    eax,0xb
c0021d2f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021d33:	c1 e8 0b             	shr    eax,0xb
c0021d36:	50                   	push   eax
c0021d37:	e8 5f fc ff ff       	call   c002199b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d3c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021d3f:	83 c4 10             	add    esp,0x10
c0021d42:	25 ff 07 00 00       	and    eax,0x7ff
c0021d47:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021d4a:	31 ff                	xor    edi,edi
c0021d4c:	56                   	push   esi
c0021d4d:	6a 28                	push   0x28
c0021d4f:	6a 00                	push   0x0
c0021d51:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021d55:	50                   	push   eax
c0021d56:	e8 f5 e9 fd ff       	call   c0000750 <memset>
c0021d5b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021d5e:	25 ff 07 00 00       	and    eax,0x7ff
c0021d63:	89 c6                	mov    esi,eax
c0021d65:	83 c6 21             	add    esi,0x21
c0021d68:	83 d7 00             	adc    edi,0x0
c0021d6b:	83 c4 10             	add    esp,0x10
c0021d6e:	31 c9                	xor    ecx,ecx
c0021d70:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021d77:	83 f9 28             	cmp    ecx,0x28
c0021d7a:	88 04 24             	mov    BYTE PTR [esp],al
c0021d7d:	0f 94 c2             	sete   dl
c0021d80:	88 d0                	mov    al,dl
c0021d82:	ba ff 07 00 00       	mov    edx,0x7ff
c0021d87:	39 f2                	cmp    edx,esi
c0021d89:	ba 00 00 00 00       	mov    edx,0x0
c0021d8e:	19 fa                	sbb    edx,edi
c0021d90:	0f 92 c2             	setb   dl
c0021d93:	09 c2                	or     edx,eax
c0021d95:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021d99:	0f 94 c0             	sete   al
c0021d9c:	08 d0                	or     al,dl
c0021d9e:	75 16                	jne    c0021db6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021da0:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021da4:	74 10                	je     c0021db6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021da6:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021da9:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021dad:	41                   	inc    ecx
c0021dae:	83 c6 01             	add    esi,0x1
c0021db1:	83 d7 00             	adc    edi,0x0
c0021db4:	eb ba                	jmp    c0021d70 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021db6:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021dbd:	83 ec 0c             	sub    esp,0xc
c0021dc0:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021dc4:	56                   	push   esi
c0021dc5:	e8 a2 e9 fd ff       	call   c000076c <strlen>
c0021dca:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021dd1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021dd5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021ddd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021de0:	5a                   	pop    edx
c0021de1:	25 ff 07 00 00       	and    eax,0x7ff
c0021de6:	59                   	pop    ecx
c0021de7:	01 f8                	add    eax,edi
c0021de9:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021def:	83 e0 02             	and    eax,0x2
c0021df2:	3c 01                	cmp    al,0x1
c0021df4:	19 c0                	sbb    eax,eax
c0021df6:	83 c0 02             	add    eax,0x2
c0021df9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021dfd:	56                   	push   esi
c0021dfe:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021e02:	50                   	push   eax
c0021e03:	e8 04 ea fd ff       	call   c000080c <strcpy>
c0021e08:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021e0c:	83 c4 10             	add    esp,0x10
c0021e0f:	84 c0                	test   al,al
c0021e11:	75 21                	jne    c0021e34 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021e13:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021e1b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021e23:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021e2b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021e32:	eb 28                	jmp    c0021e5c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021e34:	fe c8                	dec    al
c0021e36:	75 24                	jne    c0021e5c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021e38:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021e40:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021e48:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021e50:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021e57:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021e5c:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021e60:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021e67:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021e6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021e70:	0f b6 f3             	movzx  esi,bl
c0021e73:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021e7a:	31 db                	xor    ebx,ebx
c0021e7c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021e82:	89 df                	mov    edi,ebx
c0021e84:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e8a:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021e8d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021e90:	39 c6                	cmp    esi,eax
c0021e92:	19 d7                	sbb    edi,edx
c0021e94:	72 10                	jb     c0021ea6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021e96:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021e9d:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021ea4:	eb 0a                	jmp    c0021eb0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021ea6:	29 f0                	sub    eax,esi
c0021ea8:	19 da                	sbb    edx,ebx
c0021eaa:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021ead:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021eb0:	31 c0                	xor    eax,eax
c0021eb2:	eb 05                	jmp    c0021eb9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021eb4:	b8 04 00 00 00       	mov    eax,0x4
c0021eb9:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021ebf:	5b                   	pop    ebx
c0021ec0:	5e                   	pop    esi
c0021ec1:	5f                   	pop    edi
c0021ec2:	5d                   	pop    ebp
c0021ec3:	c3                   	ret    

c0021ec4 <readRoot(unsigned int*, unsigned int*, char)>:
c0021ec4:	57                   	push   edi
c0021ec5:	56                   	push   esi
c0021ec6:	81 ec 38 08 00 00    	sub    esp,0x838
c0021ecc:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021ed4:	50                   	push   eax
c0021ed5:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021ed9:	50                   	push   eax
c0021eda:	6a 10                	push   0x10
c0021edc:	e8 ba fa ff ff       	call   c002199b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ee1:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021ee8:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021eec:	b9 22 00 00 00       	mov    ecx,0x22
c0021ef1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021ef3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021efa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021efe:	89 10                	mov    DWORD PTR [eax],edx
c0021f00:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021f07:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021f0b:	89 10                	mov    DWORD PTR [eax],edx
c0021f0d:	81 c4 44 08 00 00    	add    esp,0x844
c0021f13:	b0 01                	mov    al,0x1
c0021f15:	5e                   	pop    esi
c0021f16:	5f                   	pop    edi
c0021f17:	c3                   	ret    

c0021f18 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021f18:	55                   	push   ebp
c0021f19:	57                   	push   edi
c0021f1a:	56                   	push   esi
c0021f1b:	53                   	push   ebx
c0021f1c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021f22:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021f29:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021f30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021f34:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021f38:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021f3c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021f40:	75 03                	jne    c0021f45 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021f42:	83 c3 02             	add    ebx,0x2
c0021f45:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021f48:	75 03                	jne    c0021f4d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021f4a:	43                   	inc    ebx
c0021f4b:	eb f8                	jmp    c0021f45 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021f4d:	51                   	push   ecx
c0021f4e:	68 00 01 00 00       	push   0x100
c0021f53:	6a 00                	push   0x0
c0021f55:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f59:	50                   	push   eax
c0021f5a:	e8 f1 e7 fd ff       	call   c0000750 <memset>
c0021f5f:	83 c4 10             	add    esp,0x10
c0021f62:	31 d2                	xor    edx,edx
c0021f64:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021f67:	84 c0                	test   al,al
c0021f69:	74 21                	je     c0021f8c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021f6b:	3c 2f                	cmp    al,0x2f
c0021f6d:	75 0b                	jne    c0021f7a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021f6f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021f73:	bd 01 00 00 00       	mov    ebp,0x1
c0021f78:	eb 14                	jmp    c0021f8e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021f7a:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021f7d:	80 f9 19             	cmp    cl,0x19
c0021f80:	77 03                	ja     c0021f85 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f82:	83 e8 20             	sub    eax,0x20
c0021f85:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021f89:	42                   	inc    edx
c0021f8a:	eb d8                	jmp    c0021f64 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021f8c:	31 ed                	xor    ebp,ebp
c0021f8e:	83 ec 0c             	sub    esp,0xc
c0021f91:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021f98:	e8 ef d8 fe ff       	call   c000f88c <malloc>
c0021f9d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021fa4:	89 c6                	mov    esi,eax
c0021fa6:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021fac:	c1 ef 0b             	shr    edi,0xb
c0021faf:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021fb6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021fba:	83 c4 10             	add    esp,0x10
c0021fbd:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021fc2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021fc6:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021fcd:	74 28                	je     c0021ff7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021fcf:	52                   	push   edx
c0021fd0:	57                   	push   edi
c0021fd1:	50                   	push   eax
c0021fd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021fd6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021fdd:	e8 b9 f9 ff ff       	call   c002199b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021fe2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021fe6:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021fed:	05 00 08 00 00       	add    eax,0x800
c0021ff2:	83 c4 10             	add    esp,0x10
c0021ff5:	eb cb                	jmp    c0021fc2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021ff7:	83 ec 0c             	sub    esp,0xc
c0021ffa:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021ffe:	57                   	push   edi
c0021fff:	e8 68 e7 fd ff       	call   c000076c <strlen>
c0022004:	50                   	push   eax
c0022005:	57                   	push   edi
c0022006:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002200d:	56                   	push   esi
c002200e:	e8 46 f9 ff ff       	call   c0021959 <__memmem(unsigned char*, int, unsigned char*, int)>
c0022013:	83 c4 20             	add    esp,0x20
c0022016:	85 c0                	test   eax,eax
c0022018:	75 13                	jne    c002202d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002201a:	83 ec 0c             	sub    esp,0xc
c002201d:	56                   	push   esi
c002201e:	e8 79 d8 fe ff       	call   c000f89c <free>
c0022023:	83 c4 10             	add    esp,0x10
c0022026:	31 c0                	xor    eax,eax
c0022028:	e9 b3 00 00 00       	jmp    c00220e0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002202d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022031:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0022035:	c1 e7 08             	shl    edi,0x8
c0022038:	c1 e2 10             	shl    edx,0x10
c002203b:	09 d7                	or     edi,edx
c002203d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022041:	09 d7                	or     edi,edx
c0022043:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0022047:	c1 e2 18             	shl    edx,0x18
c002204a:	09 d7                	or     edi,edx
c002204c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022050:	89 d1                	mov    ecx,edx
c0022052:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0022056:	c1 e1 08             	shl    ecx,0x8
c0022059:	c1 e2 10             	shl    edx,0x10
c002205c:	09 ca                	or     edx,ecx
c002205e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022062:	09 ca                	or     edx,ecx
c0022064:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0022068:	c1 e1 18             	shl    ecx,0x18
c002206b:	09 ca                	or     edx,ecx
c002206d:	89 e9                	mov    ecx,ebp
c002206f:	84 c9                	test   cl,cl
c0022071:	74 3c                	je     c00220af <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0022073:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022077:	83 ec 0c             	sub    esp,0xc
c002207a:	56                   	push   esi
c002207b:	e8 1c d8 fe ff       	call   c000f89c <free>
c0022080:	83 c4 0c             	add    esp,0xc
c0022083:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002208a:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c002208f:	50                   	push   eax
c0022090:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022097:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002209e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00220a2:	52                   	push   edx
c00220a3:	57                   	push   edi
c00220a4:	53                   	push   ebx
c00220a5:	e8 6e fe ff ff       	call   c0021f18 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00220aa:	83 c4 20             	add    esp,0x20
c00220ad:	eb 31                	jmp    c00220e0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00220af:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00220b2:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00220b9:	d0 e8                	shr    al,1
c00220bb:	89 3b                	mov    DWORD PTR [ebx],edi
c00220bd:	83 e0 01             	and    eax,0x1
c00220c0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00220c7:	83 ec 0c             	sub    esp,0xc
c00220ca:	89 13                	mov    DWORD PTR [ebx],edx
c00220cc:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00220d3:	89 03                	mov    DWORD PTR [ebx],eax
c00220d5:	56                   	push   esi
c00220d6:	e8 c1 d7 fe ff       	call   c000f89c <free>
c00220db:	83 c4 10             	add    esp,0x10
c00220de:	b0 01                	mov    al,0x1
c00220e0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00220e6:	5b                   	pop    ebx
c00220e7:	5e                   	pop    esi
c00220e8:	5f                   	pop    edi
c00220e9:	5d                   	pop    ebp
c00220ea:	c3                   	ret    

c00220eb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00220eb:	55                   	push   ebp
c00220ec:	57                   	push   edi
c00220ed:	56                   	push   esi
c00220ee:	53                   	push   ebx
c00220ef:	83 ec 20             	sub    esp,0x20
c00220f2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00220f6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00220fa:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00220fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022106:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002210e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0022113:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0022119:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002211f:	57                   	push   edi
c0022120:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022124:	50                   	push   eax
c0022125:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022129:	50                   	push   eax
c002212a:	e8 95 fd ff ff       	call   c0021ec4 <readRoot(unsigned int*, unsigned int*, char)>
c002212f:	5a                   	pop    edx
c0022130:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022134:	e8 33 e6 fd ff       	call   c000076c <strlen>
c0022139:	83 c4 10             	add    esp,0x10
c002213c:	83 f8 03             	cmp    eax,0x3
c002213f:	77 17                	ja     c0022158 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022141:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022145:	89 03                	mov    DWORD PTR [ebx],eax
c0022147:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002214b:	89 06                	mov    DWORD PTR [esi],eax
c002214d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022154:	b0 01                	mov    al,0x1
c0022156:	eb 19                	jmp    c0022171 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0022158:	50                   	push   eax
c0022159:	55                   	push   ebp
c002215a:	57                   	push   edi
c002215b:	56                   	push   esi
c002215c:	53                   	push   ebx
c002215d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022161:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022165:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022169:	e8 aa fd ff ff       	call   c0021f18 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002216e:	83 c4 20             	add    esp,0x20
c0022171:	83 c4 1c             	add    esp,0x1c
c0022174:	5b                   	pop    ebx
c0022175:	5e                   	pop    esi
c0022176:	5f                   	pop    edi
c0022177:	5d                   	pop    ebp
c0022178:	c3                   	ret    
c0022179:	90                   	nop

c002217a <ISO9660::open(char const*, void**, FileOpenMode)>:
c002217a:	57                   	push   edi
c002217b:	56                   	push   esi
c002217c:	53                   	push   ebx
c002217d:	83 ec 10             	sub    esp,0x10
c0022180:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022184:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022188:	85 ff                	test   edi,edi
c002218a:	0f 84 9d 00 00 00    	je     c002222d <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022190:	85 f6                	test   esi,esi
c0022192:	0f 84 95 00 00 00    	je     c002222d <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022198:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002219d:	74 17                	je     c00221b6 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c002219f:	83 ec 0c             	sub    esp,0xc
c00221a2:	68 d3 d1 02 c0       	push   0xc002d1d3
c00221a7:	e8 1d 07 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00221ac:	83 c4 10             	add    esp,0x10
c00221af:	b8 03 00 00 00       	mov    eax,0x3
c00221b4:	eb 7c                	jmp    c0022232 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00221b6:	83 ec 0c             	sub    esp,0xc
c00221b9:	6a 1c                	push   0x1c
c00221bb:	e8 cc d6 fe ff       	call   c000f88c <malloc>
c00221c0:	89 07                	mov    DWORD PTR [edi],eax
c00221c2:	89 c3                	mov    ebx,eax
c00221c4:	58                   	pop    eax
c00221c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00221c9:	50                   	push   eax
c00221ca:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00221cd:	50                   	push   eax
c00221ce:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221d2:	50                   	push   eax
c00221d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221d7:	50                   	push   eax
c00221d8:	56                   	push   esi
c00221d9:	e8 0d ff ff ff       	call   c00220eb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221de:	83 c4 20             	add    esp,0x20
c00221e1:	84 c0                	test   al,al
c00221e3:	74 07                	je     c00221ec <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00221e5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00221ea:	74 0b                	je     c00221f7 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00221ec:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00221f0:	b8 01 00 00 00       	mov    eax,0x1
c00221f5:	eb 3b                	jmp    c0022232 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00221f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221fb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00221ff:	89 03                	mov    DWORD PTR [ebx],eax
c0022201:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022208:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002220c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022213:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002221a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002221d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022224:	8a 06                	mov    al,BYTE PTR [esi]
c0022226:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022229:	31 c0                	xor    eax,eax
c002222b:	eb 05                	jmp    c0022232 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002222d:	b8 04 00 00 00       	mov    eax,0x4
c0022232:	83 c4 10             	add    esp,0x10
c0022235:	5b                   	pop    ebx
c0022236:	5e                   	pop    esi
c0022237:	5f                   	pop    edi
c0022238:	c3                   	ret    
c0022239:	90                   	nop

c002223a <ISO9660::exists(char const*)>:
c002223a:	83 ec 28             	sub    esp,0x28
c002223d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022241:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022245:	52                   	push   edx
c0022246:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022249:	52                   	push   edx
c002224a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002224e:	52                   	push   edx
c002224f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022253:	52                   	push   edx
c0022254:	50                   	push   eax
c0022255:	e8 91 fe ff ff       	call   c00220eb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002225a:	83 c4 3c             	add    esp,0x3c
c002225d:	c3                   	ret    

c002225e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002225e:	56                   	push   esi
c002225f:	53                   	push   ebx
c0022260:	83 ec 14             	sub    esp,0x14
c0022263:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022267:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002226b:	85 db                	test   ebx,ebx
c002226d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022271:	0f 94 c2             	sete   dl
c0022274:	85 f6                	test   esi,esi
c0022276:	0f 94 c0             	sete   al
c0022279:	08 c2                	or     dl,al
c002227b:	75 68                	jne    c00222e5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002227d:	85 c9                	test   ecx,ecx
c002227f:	74 64                	je     c00222e5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022281:	83 ec 0c             	sub    esp,0xc
c0022284:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022287:	8d 44 24 18          	lea    eax,[esp+0x18]
c002228b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022291:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022298:	50                   	push   eax
c0022299:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002229c:	50                   	push   eax
c002229d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222a1:	50                   	push   eax
c00222a2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222a6:	50                   	push   eax
c00222a7:	51                   	push   ecx
c00222a8:	e8 3e fe ff ff       	call   c00220eb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00222ad:	83 c4 20             	add    esp,0x20
c00222b0:	ba 01 00 00 00       	mov    edx,0x1
c00222b5:	84 c0                	test   al,al
c00222b7:	74 31                	je     c00222ea <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00222b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222bd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222c4:	89 03                	mov    DWORD PTR [ebx],eax
c00222c6:	ba 00 00 00 00       	mov    edx,0x0
c00222cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222cf:	85 c0                	test   eax,eax
c00222d1:	0f 95 06             	setne  BYTE PTR [esi]
c00222d4:	74 14                	je     c00222ea <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00222d6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00222dc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222e3:	eb 05                	jmp    c00222ea <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00222e5:	ba 04 00 00 00       	mov    edx,0x4
c00222ea:	83 c4 14             	add    esp,0x14
c00222ed:	89 d0                	mov    eax,edx
c00222ef:	5b                   	pop    ebx
c00222f0:	5e                   	pop    esi
c00222f1:	c3                   	ret    

c00222f2 <ISO9660::openDir(char const*, void**)>:
c00222f2:	57                   	push   edi
c00222f3:	56                   	push   esi
c00222f4:	53                   	push   ebx
c00222f5:	83 ec 10             	sub    esp,0x10
c00222f8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00222fc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022300:	85 ff                	test   edi,edi
c0022302:	0f 84 95 00 00 00    	je     c002239d <ISO9660::openDir(char const*, void**)+0xab>
c0022308:	85 f6                	test   esi,esi
c002230a:	0f 84 8d 00 00 00    	je     c002239d <ISO9660::openDir(char const*, void**)+0xab>
c0022310:	83 ec 0c             	sub    esp,0xc
c0022313:	6a 1c                	push   0x1c
c0022315:	e8 72 d5 fe ff       	call   c000f88c <malloc>
c002231a:	89 07                	mov    DWORD PTR [edi],eax
c002231c:	89 c3                	mov    ebx,eax
c002231e:	59                   	pop    ecx
c002231f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022323:	50                   	push   eax
c0022324:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022327:	50                   	push   eax
c0022328:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002232c:	50                   	push   eax
c002232d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022331:	50                   	push   eax
c0022332:	56                   	push   esi
c0022333:	e8 b3 fd ff ff       	call   c00220eb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022338:	83 c4 20             	add    esp,0x20
c002233b:	84 c0                	test   al,al
c002233d:	74 07                	je     c0022346 <ISO9660::openDir(char const*, void**)+0x54>
c002233f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022344:	75 21                	jne    c0022367 <ISO9660::openDir(char const*, void**)+0x75>
c0022346:	0f b6 c0             	movzx  eax,al
c0022349:	52                   	push   edx
c002234a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002234e:	50                   	push   eax
c002234f:	68 f9 d1 02 c0       	push   0xc002d1f9
c0022354:	e8 70 05 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0022359:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002235d:	83 c4 10             	add    esp,0x10
c0022360:	b8 01 00 00 00       	mov    eax,0x1
c0022365:	eb 3b                	jmp    c00223a2 <ISO9660::openDir(char const*, void**)+0xb0>
c0022367:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002236b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002236f:	89 03                	mov    DWORD PTR [ebx],eax
c0022371:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022378:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002237c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022383:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002238a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002238d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022394:	8a 06                	mov    al,BYTE PTR [esi]
c0022396:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022399:	31 c0                	xor    eax,eax
c002239b:	eb 05                	jmp    c00223a2 <ISO9660::openDir(char const*, void**)+0xb0>
c002239d:	b8 04 00 00 00       	mov    eax,0x4
c00223a2:	83 c4 10             	add    esp,0x10
c00223a5:	5b                   	pop    ebx
c00223a6:	5e                   	pop    esi
c00223a7:	5f                   	pop    edi
c00223a8:	c3                   	ret    
c00223a9:	90                   	nop

c00223aa <ISO9660::ISO9660()>:
c00223aa:	83 ec 0c             	sub    esp,0xc
c00223ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b1:	83 ec 0c             	sub    esp,0xc
c00223b4:	50                   	push   eax
c00223b5:	e8 1a 08 ff ff       	call   c0012bd4 <Filesystem::Filesystem()>
c00223ba:	83 c4 10             	add    esp,0x10
c00223bd:	ba 1c d2 02 c0       	mov    edx,0xc002d21c
c00223c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c6:	89 10                	mov    DWORD PTR [eax],edx
c00223c8:	90                   	nop
c00223c9:	83 c4 0c             	add    esp,0xc
c00223cc:	c3                   	ret    
c00223cd:	90                   	nop

c00223ce <SoundChannel::SoundChannel(int, int, int, int)>:
c00223ce:	83 ec 1c             	sub    esp,0x1c
c00223d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223d5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00223d9:	89 10                	mov    DWORD PTR [eax],edx
c00223db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223df:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00223e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00223e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223ea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00223ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00223f1:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00223f6:	75 23                	jne    c002241b <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c00223f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00223fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022402:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022405:	0f af c2             	imul   eax,edx
c0022408:	85 c0                	test   eax,eax
c002240a:	79 03                	jns    c002240f <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c002240c:	83 c0 03             	add    eax,0x3
c002240f:	c1 f8 02             	sar    eax,0x2
c0022412:	05 a0 0f 00 00       	add    eax,0xfa0
c0022417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002241b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002241f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022423:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022426:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002242a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022435:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002243c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022440:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022443:	c1 e0 02             	shl    eax,0x2
c0022446:	83 ec 0c             	sub    esp,0xc
c0022449:	50                   	push   eax
c002244a:	e8 3d d4 fe ff       	call   c000f88c <malloc>
c002244f:	83 c4 10             	add    esp,0x10
c0022452:	89 c2                	mov    edx,eax
c0022454:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022458:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002245b:	83 ec 04             	sub    esp,0x4
c002245e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022462:	50                   	push   eax
c0022463:	6a 01                	push   0x1
c0022465:	6a 04                	push   0x4
c0022467:	e8 f9 66 fe ff       	call   c0008b65 <src_new>
c002246c:	83 c4 10             	add    esp,0x10
c002246f:	89 c2                	mov    edx,eax
c0022471:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022475:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022478:	83 ec 0c             	sub    esp,0xc
c002247b:	68 7c d2 02 c0       	push   0xc002d27c
c0022480:	e8 44 04 ff ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0022485:	83 c4 10             	add    esp,0x10
c0022488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002248c:	85 c0                	test   eax,eax
c002248e:	74 10                	je     c00224a0 <SoundChannel::SoundChannel(int, int, int, int)+0xd2>
c0022490:	83 ec 0c             	sub    esp,0xc
c0022493:	68 92 d2 02 c0       	push   0xc002d292
c0022498:	e8 62 7e ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c002249d:	83 c4 10             	add    esp,0x10
c00224a0:	a0 00 36 03 c0       	mov    al,ds:0xc0033600
c00224a5:	83 f0 01             	xor    eax,0x1
c00224a8:	84 c0                	test   al,al
c00224aa:	74 57                	je     c0022503 <SoundChannel::SoundChannel(int, int, int, int)+0x135>
c00224ac:	a1 ac d2 02 c0       	mov    eax,ds:0xc002d2ac
c00224b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00224b5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00224bd:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00224c5:	7f 35                	jg     c00224fc <SoundChannel::SoundChannel(int, int, int, int)+0x12e>
c00224c7:	83 ec 0c             	sub    esp,0xc
c00224ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00224ce:	e8 4c 56 00 00       	call   c0027b1f <__floatsisf>
c00224d3:	83 c4 10             	add    esp,0x10
c00224d6:	8b 15 ac d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2ac
c00224dc:	83 ec 08             	sub    esp,0x8
c00224df:	52                   	push   edx
c00224e0:	50                   	push   eax
c00224e1:	e8 4b 52 00 00       	call   c0027731 <__mulsf3>
c00224e6:	83 c4 10             	add    esp,0x10
c00224e9:	89 c2                	mov    edx,eax
c00224eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224ef:	89 14 85 00 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffcce00],edx
c00224f6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00224fa:	eb c1                	jmp    c00224bd <SoundChannel::SoundChannel(int, int, int, int)+0xef>
c00224fc:	c6 05 00 36 03 c0 01 	mov    BYTE PTR ds:0xc0033600,0x1
c0022503:	90                   	nop
c0022504:	83 c4 1c             	add    esp,0x1c
c0022507:	c3                   	ret    

c0022508 <SoundChannel::~SoundChannel()>:
c0022508:	83 ec 0c             	sub    esp,0xc
c002250b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002250f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022512:	83 ec 0c             	sub    esp,0xc
c0022515:	50                   	push   eax
c0022516:	e8 81 d3 fe ff       	call   c000f89c <free>
c002251b:	83 c4 10             	add    esp,0x10
c002251e:	90                   	nop
c002251f:	83 c4 0c             	add    esp,0xc
c0022522:	c3                   	ret    
c0022523:	90                   	nop

c0022524 <SoundChannel::getSampleRate()>:
c0022524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022528:	8b 00                	mov    eax,DWORD PTR [eax]
c002252a:	c3                   	ret    
c002252b:	90                   	nop

c002252c <SoundChannel::getBits()>:
c002252c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022533:	c3                   	ret    

c0022534 <SoundChannel::getBufferUsed()>:
c0022534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022538:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002253b:	c3                   	ret    

c002253c <SoundChannel::getBufferSize()>:
c002253c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022540:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022543:	c3                   	ret    

c0022544 <SoundChannel::unbuffer(float*, int, int)>:
c0022544:	56                   	push   esi
c0022545:	53                   	push   ebx
c0022546:	83 ec 40             	sub    esp,0x40
c0022549:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002254d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022550:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022554:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022557:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002255b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002255f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022563:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022567:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002256b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002256f:	e8 ab 55 00 00       	call   c0027b1f <__floatsisf>
c0022574:	5a                   	pop    edx
c0022575:	89 c6                	mov    esi,eax
c0022577:	ff 33                	push   DWORD PTR [ebx]
c0022579:	e8 a1 55 00 00       	call   c0027b1f <__floatsisf>
c002257e:	59                   	pop    ecx
c002257f:	5a                   	pop    edx
c0022580:	50                   	push   eax
c0022581:	56                   	push   esi
c0022582:	e8 6d 53 00 00       	call   c00278f4 <__divsf3>
c0022587:	89 04 24             	mov    DWORD PTR [esp],eax
c002258a:	e8 60 68 00 00       	call   c0028def <__extendsfdf2>
c002258f:	59                   	pop    ecx
c0022590:	5e                   	pop    esi
c0022591:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022595:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022599:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00225a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00225a5:	50                   	push   eax
c00225a6:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00225a9:	e8 ac 61 fe ff       	call   c000875a <src_process>
c00225ae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00225b2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00225b5:	83 c4 0c             	add    esp,0xc
c00225b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00225bb:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00225be:	29 d0                	sub    eax,edx
c00225c0:	c1 e0 02             	shl    eax,0x2
c00225c3:	50                   	push   eax
c00225c4:	8d 04 91             	lea    eax,[ecx+edx*4]
c00225c7:	50                   	push   eax
c00225c8:	51                   	push   ecx
c00225c9:	e8 ba e0 fd ff       	call   c0000688 <memmove>
c00225ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00225d2:	83 c4 44             	add    esp,0x44
c00225d5:	5b                   	pop    ebx
c00225d6:	5e                   	pop    esi
c00225d7:	c3                   	ret    

c00225d8 <SoundChannel::buffer16(short*, int)>:
c00225d8:	55                   	push   ebp
c00225d9:	57                   	push   edi
c00225da:	56                   	push   esi
c00225db:	53                   	push   ebx
c00225dc:	83 ec 1c             	sub    esp,0x1c
c00225df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00225e3:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00225e6:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00225e9:	0f 84 d2 00 00 00    	je     c00226c1 <SoundChannel::buffer16(short*, int)+0xe9>
c00225ef:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00225f3:	85 ed                	test   ebp,ebp
c00225f5:	0f 8e c6 00 00 00    	jle    c00226c1 <SoundChannel::buffer16(short*, int)+0xe9>
c00225fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00225ff:	bd 00 00 00 38       	mov    ebp,0x38000000
c0022604:	83 ec 0c             	sub    esp,0xc
c0022607:	0f bf 00             	movsx  eax,WORD PTR [eax]
c002260a:	50                   	push   eax
c002260b:	e8 0f 55 00 00       	call   c0027b1f <__floatsisf>
c0022610:	59                   	pop    ecx
c0022611:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022614:	5f                   	pop    edi
c0022615:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0022618:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002261b:	55                   	push   ebp
c002261c:	50                   	push   eax
c002261d:	e8 0f 51 00 00       	call   c0027731 <__mulsf3>
c0022622:	83 c4 10             	add    esp,0x10
c0022625:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0022628:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c002262b:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c002262e:	0f 84 99 00 00 00    	je     c00226cd <SoundChannel::buffer16(short*, int)+0xf5>
c0022634:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0022639:	74 78                	je     c00226b3 <SoundChannel::buffer16(short*, int)+0xdb>
c002263b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002263f:	83 ec 0c             	sub    esp,0xc
c0022642:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0022646:	50                   	push   eax
c0022647:	e8 d3 54 00 00       	call   c0027b1f <__floatsisf>
c002264c:	5f                   	pop    edi
c002264d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022650:	5a                   	pop    edx
c0022651:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0022654:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022657:	55                   	push   ebp
c0022658:	50                   	push   eax
c0022659:	e8 d3 50 00 00       	call   c0027731 <__mulsf3>
c002265e:	83 c4 10             	add    esp,0x10
c0022661:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0022664:	be 02 00 00 00       	mov    esi,0x2
c0022669:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c002266c:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c002266f:	74 46                	je     c00226b7 <SoundChannel::buffer16(short*, int)+0xdf>
c0022671:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0022675:	eb 36                	jmp    c00226ad <SoundChannel::buffer16(short*, int)+0xd5>
c0022677:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002267b:	83 ec 0c             	sub    esp,0xc
c002267e:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0022682:	46                   	inc    esi
c0022683:	50                   	push   eax
c0022684:	e8 96 54 00 00       	call   c0027b1f <__floatsisf>
c0022689:	5a                   	pop    edx
c002268a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c002268d:	59                   	pop    ecx
c002268e:	8d 4f 01             	lea    ecx,[edi+0x1]
c0022691:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022698:	50                   	push   eax
c0022699:	e8 93 50 00 00       	call   c0027731 <__mulsf3>
c002269e:	83 c4 10             	add    esp,0x10
c00226a1:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c00226a5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00226a8:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c00226ab:	74 0a                	je     c00226b7 <SoundChannel::buffer16(short*, int)+0xdf>
c00226ad:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c00226b1:	75 c4                	jne    c0022677 <SoundChannel::buffer16(short*, int)+0x9f>
c00226b3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00226b7:	83 c4 1c             	add    esp,0x1c
c00226ba:	89 f0                	mov    eax,esi
c00226bc:	5b                   	pop    ebx
c00226bd:	5e                   	pop    esi
c00226be:	5f                   	pop    edi
c00226bf:	5d                   	pop    ebp
c00226c0:	c3                   	ret    
c00226c1:	83 c4 1c             	add    esp,0x1c
c00226c4:	31 f6                	xor    esi,esi
c00226c6:	5b                   	pop    ebx
c00226c7:	89 f0                	mov    eax,esi
c00226c9:	5e                   	pop    esi
c00226ca:	5f                   	pop    edi
c00226cb:	5d                   	pop    ebp
c00226cc:	c3                   	ret    
c00226cd:	be 01 00 00 00       	mov    esi,0x1
c00226d2:	eb e3                	jmp    c00226b7 <SoundChannel::buffer16(short*, int)+0xdf>

c00226d4 <SoundChannel::buffer8(unsigned char*, int)>:
c00226d4:	55                   	push   ebp
c00226d5:	57                   	push   edi
c00226d6:	56                   	push   esi
c00226d7:	53                   	push   ebx
c00226d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00226dc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00226e0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00226e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00226e7:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00226ea:	74 7a                	je     c0022766 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00226ec:	85 ff                	test   edi,edi
c00226ee:	7e 76                	jle    c0022766 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00226f0:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00226f4:	8d 70 01             	lea    esi,[eax+0x1]
c00226f7:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00226fa:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00226fd:	8b 1c 9d 00 32 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcce00]
c0022704:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022707:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002270a:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002270d:	74 5e                	je     c002276d <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002270f:	83 ff 01             	cmp    edi,0x1
c0022712:	74 4b                	je     c002275f <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022714:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022718:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002271b:	8d 70 01             	lea    esi,[eax+0x1]
c002271e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022721:	8b 1c 9d 00 32 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcce00]
c0022728:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002272b:	b8 02 00 00 00       	mov    eax,0x2
c0022730:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022733:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022736:	75 23                	jne    c002275b <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022738:	eb 27                	jmp    c0022761 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002273a:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002273f:	8d 71 01             	lea    esi,[ecx+0x1]
c0022742:	40                   	inc    eax
c0022743:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022746:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022749:	8b 1c 9d 00 32 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcce00]
c0022750:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022753:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022756:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022759:	74 06                	je     c0022761 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002275b:	39 c7                	cmp    edi,eax
c002275d:	75 db                	jne    c002273a <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002275f:	89 f8                	mov    eax,edi
c0022761:	5b                   	pop    ebx
c0022762:	5e                   	pop    esi
c0022763:	5f                   	pop    edi
c0022764:	5d                   	pop    ebp
c0022765:	c3                   	ret    
c0022766:	5b                   	pop    ebx
c0022767:	31 c0                	xor    eax,eax
c0022769:	5e                   	pop    esi
c002276a:	5f                   	pop    edi
c002276b:	5d                   	pop    ebp
c002276c:	c3                   	ret    
c002276d:	b8 01 00 00 00       	mov    eax,0x1
c0022772:	eb ed                	jmp    c0022761 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022774 <SoundDevice::SoundDevice(char const*)>:
c0022774:	83 ec 1c             	sub    esp,0x1c
c0022777:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002277b:	83 ec 08             	sub    esp,0x8
c002277e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022782:	50                   	push   eax
c0022783:	e8 7e 17 ff ff       	call   c0013f06 <Device::Device(char const*)>
c0022788:	83 c4 10             	add    esp,0x10
c002278b:	ba ac d3 02 c0       	mov    edx,0xc002d3ac
c0022790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022794:	89 10                	mov    DWORD PTR [eax],edx
c0022796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002279a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00227a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227a8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00227b2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00227ba:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00227bf:	7f 19                	jg     c00227da <SoundDevice::SoundDevice(char const*)+0x66>
c00227c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00227c9:	83 c2 54             	add    edx,0x54
c00227cc:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00227d4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00227d8:	eb e0                	jmp    c00227ba <SoundDevice::SoundDevice(char const*)+0x46>
c00227da:	90                   	nop
c00227db:	83 c4 1c             	add    esp,0x1c
c00227de:	c3                   	ret    
c00227df:	90                   	nop

c00227e0 <SoundDevice::~SoundDevice()>:
c00227e0:	53                   	push   ebx
c00227e1:	83 ec 18             	sub    esp,0x18
c00227e4:	ba ac d3 02 c0       	mov    edx,0xc002d3ac
c00227e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227ed:	89 10                	mov    DWORD PTR [eax],edx
c00227ef:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00227f7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00227fc:	7f 46                	jg     c0022844 <SoundDevice::~SoundDevice()+0x64>
c00227fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022802:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022806:	83 c2 54             	add    edx,0x54
c0022809:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002280d:	85 c0                	test   eax,eax
c002280f:	74 2d                	je     c002283e <SoundDevice::~SoundDevice()+0x5e>
c0022811:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022815:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022819:	83 c2 54             	add    edx,0x54
c002281c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022820:	85 db                	test   ebx,ebx
c0022822:	74 1a                	je     c002283e <SoundDevice::~SoundDevice()+0x5e>
c0022824:	83 ec 0c             	sub    esp,0xc
c0022827:	53                   	push   ebx
c0022828:	e8 db fc ff ff       	call   c0022508 <SoundChannel::~SoundChannel()>
c002282d:	83 c4 10             	add    esp,0x10
c0022830:	83 ec 08             	sub    esp,0x8
c0022833:	6a 2c                	push   0x2c
c0022835:	53                   	push   ebx
c0022836:	e8 ae ff fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c002283b:	83 c4 10             	add    esp,0x10
c002283e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022842:	eb b3                	jmp    c00227f7 <SoundDevice::~SoundDevice()+0x17>
c0022844:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022848:	83 ec 0c             	sub    esp,0xc
c002284b:	50                   	push   eax
c002284c:	e8 7f 13 ff ff       	call   c0013bd0 <Device::~Device()>
c0022851:	83 c4 10             	add    esp,0x10
c0022854:	90                   	nop
c0022855:	83 c4 18             	add    esp,0x18
c0022858:	5b                   	pop    ebx
c0022859:	c3                   	ret    

c002285a <SoundDevice::~SoundDevice()>:
c002285a:	83 ec 0c             	sub    esp,0xc
c002285d:	83 ec 0c             	sub    esp,0xc
c0022860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022864:	e8 77 ff ff ff       	call   c00227e0 <SoundDevice::~SoundDevice()>
c0022869:	83 c4 10             	add    esp,0x10
c002286c:	83 ec 08             	sub    esp,0x8
c002286f:	68 e4 01 00 00       	push   0x1e4
c0022874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022878:	e8 6c ff fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c002287d:	83 c4 10             	add    esp,0x10
c0022880:	83 c4 0c             	add    esp,0xc
c0022883:	c3                   	ret    

c0022884 <SoundDevice::getFreeChannelNum()>:
c0022884:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022888:	31 c0                	xor    eax,eax
c002288a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022892:	74 09                	je     c002289d <SoundDevice::getFreeChannelNum()+0x19>
c0022894:	40                   	inc    eax
c0022895:	83 f8 20             	cmp    eax,0x20
c0022898:	75 f0                	jne    c002288a <SoundDevice::getFreeChannelNum()+0x6>
c002289a:	83 c8 ff             	or     eax,0xffffffff
c002289d:	c3                   	ret    

c002289e <SoundDevice::addChannel(SoundChannel*)>:
c002289e:	56                   	push   esi
c002289f:	53                   	push   ebx
c00228a0:	51                   	push   ecx
c00228a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00228a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00228a9:	53                   	push   ebx
c00228aa:	e8 d5 ff ff ff       	call   c0022884 <SoundDevice::getFreeChannelNum()>
c00228af:	5a                   	pop    edx
c00228b0:	83 f8 ff             	cmp    eax,0xffffffff
c00228b3:	74 51                	je     c0022906 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00228b5:	85 f6                	test   esi,esi
c00228b7:	74 4d                	je     c0022906 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00228b9:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00228c0:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00228c7:	75 30                	jne    c00228f9 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00228c9:	83 ec 0c             	sub    esp,0xc
c00228cc:	56                   	push   esi
c00228cd:	e8 52 fc ff ff       	call   c0022524 <SoundChannel::getSampleRate()>
c00228d2:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00228d8:	89 34 24             	mov    DWORD PTR [esp],esi
c00228db:	e8 4c fc ff ff       	call   c002252c <SoundChannel::getBits()>
c00228e0:	83 c4 0c             	add    esp,0xc
c00228e3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00228e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00228eb:	50                   	push   eax
c00228ec:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00228f2:	53                   	push   ebx
c00228f3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00228f6:	83 c4 10             	add    esp,0x10
c00228f9:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00228ff:	b8 01 00 00 00       	mov    eax,0x1
c0022904:	eb 03                	jmp    c0022909 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022906:	83 c8 ff             	or     eax,0xffffffff
c0022909:	5a                   	pop    edx
c002290a:	5b                   	pop    ebx
c002290b:	5e                   	pop    esi
c002290c:	c3                   	ret    
c002290d:	90                   	nop

c002290e <SoundDevice::removeChannel(int)>:
c002290e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022912:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022916:	83 fa 1f             	cmp    edx,0x1f
c0022919:	77 23                	ja     c002293e <SoundDevice::removeChannel(int)+0x30>
c002291b:	8d 14 90             	lea    edx,[eax+edx*4]
c002291e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022925:	74 17                	je     c002293e <SoundDevice::removeChannel(int)+0x30>
c0022927:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022931:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022937:	75 05                	jne    c002293e <SoundDevice::removeChannel(int)+0x30>
c0022939:	8b 00                	mov    eax,DWORD PTR [eax]
c002293b:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c002293e:	c3                   	ret    
c002293f:	90                   	nop

c0022940 <SoundDevice::floatTo16(float*, short*, int)>:
c0022940:	57                   	push   edi
c0022941:	56                   	push   esi
c0022942:	53                   	push   ebx
c0022943:	31 db                	xor    ebx,ebx
c0022945:	83 ec 10             	sub    esp,0x10
c0022948:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002294c:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022950:	0f 8d d0 00 00 00    	jge    c0022a26 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022956:	83 ec 0c             	sub    esp,0xc
c0022959:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002295d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022960:	e8 8a 64 00 00       	call   c0028def <__extendsfdf2>
c0022965:	83 c4 10             	add    esp,0x10
c0022968:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002296c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022970:	68 00 00 f0 3f       	push   0x3ff00000
c0022975:	6a 00                	push   0x0
c0022977:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002297b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002297f:	e8 f7 53 00 00       	call   c0027d7b <__adddf3>
c0022984:	83 c4 10             	add    esp,0x10
c0022987:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002298b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002298f:	68 00 00 e0 3f       	push   0x3fe00000
c0022994:	6a 00                	push   0x0
c0022996:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002299a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002299e:	e8 55 5a 00 00       	call   c00283f8 <__muldf3>
c00229a3:	83 c4 10             	add    esp,0x10
c00229a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00229aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00229ae:	68 c0 ff df 40       	push   0x40dfffc0
c00229b3:	6a 00                	push   0x0
c00229b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229bd:	e8 36 5a 00 00       	call   c00283f8 <__muldf3>
c00229c2:	59                   	pop    ecx
c00229c3:	5f                   	pop    edi
c00229c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00229c8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00229cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229d4:	e8 f2 62 00 00       	call   c0028ccb <__truncdfsf2>
c00229d9:	5a                   	pop    edx
c00229da:	89 c7                	mov    edi,eax
c00229dc:	59                   	pop    ecx
c00229dd:	68 00 fe ff 46       	push   0x46fffe00
c00229e2:	50                   	push   eax
c00229e3:	e8 8d 53 00 00       	call   c0027d75 <__gesf2>
c00229e8:	83 c4 10             	add    esp,0x10
c00229eb:	85 c0                	test   eax,eax
c00229ed:	78 08                	js     c00229f7 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c00229ef:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c00229f5:	eb 29                	jmp    c0022a20 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00229f7:	50                   	push   eax
c00229f8:	50                   	push   eax
c00229f9:	6a 00                	push   0x0
c00229fb:	57                   	push   edi
c00229fc:	e8 78 53 00 00       	call   c0027d79 <__lesf2>
c0022a01:	83 c4 10             	add    esp,0x10
c0022a04:	85 c0                	test   eax,eax
c0022a06:	7f 08                	jg     c0022a10 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022a08:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022a0e:	eb 10                	jmp    c0022a20 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022a10:	83 ec 0c             	sub    esp,0xc
c0022a13:	57                   	push   edi
c0022a14:	e8 73 64 00 00       	call   c0028e8c <lrintf>
c0022a19:	83 c4 10             	add    esp,0x10
c0022a1c:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022a20:	43                   	inc    ebx
c0022a21:	e9 26 ff ff ff       	jmp    c002294c <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022a26:	83 c4 10             	add    esp,0x10
c0022a29:	5b                   	pop    ebx
c0022a2a:	5e                   	pop    esi
c0022a2b:	5f                   	pop    edi
c0022a2c:	c3                   	ret    
c0022a2d:	90                   	nop

c0022a2e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022a2e:	57                   	push   edi
c0022a2f:	56                   	push   esi
c0022a30:	53                   	push   ebx
c0022a31:	31 db                	xor    ebx,ebx
c0022a33:	83 ec 10             	sub    esp,0x10
c0022a36:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022a3a:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022a3e:	0f 8d cb 00 00 00    	jge    c0022b0f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022a44:	83 ec 0c             	sub    esp,0xc
c0022a47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022a4b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022a4e:	e8 9c 63 00 00       	call   c0028def <__extendsfdf2>
c0022a53:	83 c4 10             	add    esp,0x10
c0022a56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a5e:	68 00 00 f0 3f       	push   0x3ff00000
c0022a63:	6a 00                	push   0x0
c0022a65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a6d:	e8 09 53 00 00       	call   c0027d7b <__adddf3>
c0022a72:	83 c4 10             	add    esp,0x10
c0022a75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a7d:	68 00 00 e0 3f       	push   0x3fe00000
c0022a82:	6a 00                	push   0x0
c0022a84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a8c:	e8 67 59 00 00       	call   c00283f8 <__muldf3>
c0022a91:	83 c4 10             	add    esp,0x10
c0022a94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a9c:	68 00 00 60 40       	push   0x40600000
c0022aa1:	6a 00                	push   0x0
c0022aa3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aa7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aab:	e8 48 59 00 00       	call   c00283f8 <__muldf3>
c0022ab0:	59                   	pop    ecx
c0022ab1:	5f                   	pop    edi
c0022ab2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022ab6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022aba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022abe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ac2:	e8 04 62 00 00       	call   c0028ccb <__truncdfsf2>
c0022ac7:	5a                   	pop    edx
c0022ac8:	89 c7                	mov    edi,eax
c0022aca:	59                   	pop    ecx
c0022acb:	68 00 00 fe 42       	push   0x42fe0000
c0022ad0:	50                   	push   eax
c0022ad1:	e8 9f 52 00 00       	call   c0027d75 <__gesf2>
c0022ad6:	83 c4 10             	add    esp,0x10
c0022ad9:	85 c0                	test   eax,eax
c0022adb:	78 06                	js     c0022ae3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022add:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022ae1:	eb 26                	jmp    c0022b09 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022ae3:	50                   	push   eax
c0022ae4:	50                   	push   eax
c0022ae5:	6a 00                	push   0x0
c0022ae7:	57                   	push   edi
c0022ae8:	e8 8c 52 00 00       	call   c0027d79 <__lesf2>
c0022aed:	83 c4 10             	add    esp,0x10
c0022af0:	85 c0                	test   eax,eax
c0022af2:	7f 06                	jg     c0022afa <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022af4:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022af8:	eb 0f                	jmp    c0022b09 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022afa:	83 ec 0c             	sub    esp,0xc
c0022afd:	57                   	push   edi
c0022afe:	e8 89 63 00 00       	call   c0028e8c <lrintf>
c0022b03:	83 c4 10             	add    esp,0x10
c0022b06:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022b09:	43                   	inc    ebx
c0022b0a:	e9 2b ff ff ff       	jmp    c0022a3a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022b0f:	83 c4 10             	add    esp,0x10
c0022b12:	5b                   	pop    ebx
c0022b13:	5e                   	pop    esi
c0022b14:	5f                   	pop    edi
c0022b15:	c3                   	ret    

c0022b16 <SoundDevice::getAudio(int, float*, float*)>:
c0022b16:	55                   	push   ebp
c0022b17:	57                   	push   edi
c0022b18:	56                   	push   esi
c0022b19:	53                   	push   ebx
c0022b1a:	83 ec 28             	sub    esp,0x28
c0022b1d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022b21:	68 b0 d2 02 c0       	push   0xc002d2b0
c0022b26:	e8 9e fd fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0022b2b:	59                   	pop    ecx
c0022b2c:	5e                   	pop    esi
c0022b2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022b31:	68 c7 d2 02 c0       	push   0xc002d2c7
c0022b36:	e8 8e fd fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0022b3b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022b3f:	83 c4 0c             	add    esp,0xc
c0022b42:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
c0022b49:	56                   	push   esi
c0022b4a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b4e:	68 e9 d2 02 c0       	push   0xc002d2e9
c0022b53:	e8 71 fd fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0022b58:	83 c4 0c             	add    esp,0xc
c0022b5b:	56                   	push   esi
c0022b5c:	31 f6                	xor    esi,esi
c0022b5e:	6a 00                	push   0x0
c0022b60:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022b64:	e8 e7 db fd ff       	call   c0000750 <memset>
c0022b69:	83 c4 10             	add    esp,0x10
c0022b6c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022b74:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022b7c:	8b 84 b3 5c 01 00 00 	mov    eax,DWORD PTR [ebx+esi*4+0x15c]
c0022b83:	85 c0                	test   eax,eax
c0022b85:	0f 84 d7 00 00 00    	je     c0022c62 <SoundDevice::getAudio(int, float*, float*)+0x14c>
c0022b8b:	83 ec 0c             	sub    esp,0xc
c0022b8e:	50                   	push   eax
c0022b8f:	e8 a8 f9 ff ff       	call   c002253c <SoundChannel::getBufferSize()>
c0022b94:	5f                   	pop    edi
c0022b95:	5d                   	pop    ebp
c0022b96:	50                   	push   eax
c0022b97:	68 0d d3 02 c0       	push   0xc002d30d
c0022b9c:	e8 28 fd fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0022ba1:	58                   	pop    eax
c0022ba2:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022ba9:	e8 86 f9 ff ff       	call   c0022534 <SoundChannel::getBufferUsed()>
c0022bae:	5a                   	pop    edx
c0022baf:	59                   	pop    ecx
c0022bb0:	50                   	push   eax
c0022bb1:	68 20 d3 02 c0       	push   0xc002d320
c0022bb6:	e8 0e fd fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0022bbb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022bbf:	99                   	cdq    
c0022bc0:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022bc6:	50                   	push   eax
c0022bc7:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022bcd:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022bd1:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022bd8:	e8 67 f9 ff ff       	call   c0022544 <SoundChannel::unbuffer(float*, int, int)>
c0022bdd:	83 c4 14             	add    esp,0x14
c0022be0:	89 c5                	mov    ebp,eax
c0022be2:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022be9:	e8 46 f9 ff ff       	call   c0022534 <SoundChannel::getBufferUsed()>
c0022bee:	5f                   	pop    edi
c0022bef:	5a                   	pop    edx
c0022bf0:	50                   	push   eax
c0022bf1:	68 38 d3 02 c0       	push   0xc002d338
c0022bf6:	e8 ce fc fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0022bfb:	56                   	push   esi
c0022bfc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022c00:	99                   	cdq    
c0022c01:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022c07:	50                   	push   eax
c0022c08:	55                   	push   ebp
c0022c09:	68 50 d3 02 c0       	push   0xc002d350
c0022c0e:	e8 b6 fc fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0022c13:	83 c4 20             	add    esp,0x20
c0022c16:	31 c0                	xor    eax,eax
c0022c18:	39 e8                	cmp    eax,ebp
c0022c1a:	7d 1e                	jge    c0022c3a <SoundDevice::getAudio(int, float*, float*)+0x124>
c0022c1c:	8b 93 58 01 00 00    	mov    edx,DWORD PTR [ebx+0x158]
c0022c22:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022c26:	0f af d0             	imul   edx,eax
c0022c29:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c0022c2c:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0022c30:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022c34:	40                   	inc    eax
c0022c35:	89 0c 97             	mov    DWORD PTR [edi+edx*4],ecx
c0022c38:	eb de                	jmp    c0022c18 <SoundDevice::getAudio(int, float*, float*)+0x102>
c0022c3a:	50                   	push   eax
c0022c3b:	50                   	push   eax
c0022c3c:	55                   	push   ebp
c0022c3d:	68 7d d3 02 c0       	push   0xc002d37d
c0022c42:	e8 82 fc fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0022c47:	01 6c 24 18          	add    DWORD PTR [esp+0x18],ebp
c0022c4b:	5a                   	pop    edx
c0022c4c:	59                   	pop    ecx
c0022c4d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022c51:	68 8e d3 02 c0       	push   0xc002d38e
c0022c56:	e8 6e fc fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0022c5b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0022c5f:	83 c4 10             	add    esp,0x10
c0022c62:	46                   	inc    esi
c0022c63:	83 fe 20             	cmp    esi,0x20
c0022c66:	0f 85 10 ff ff ff    	jne    c0022b7c <SoundDevice::getAudio(int, float*, float*)+0x66>
c0022c6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022c70:	83 c4 1c             	add    esp,0x1c
c0022c73:	5b                   	pop    ebx
c0022c74:	5e                   	pop    esi
c0022c75:	5f                   	pop    edi
c0022c76:	5d                   	pop    ebp
c0022c77:	c3                   	ret    

c0022c78 <PCI::open(int, int, void*)>:
c0022c78:	83 ec 18             	sub    esp,0x18
c0022c7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c7f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022c83:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022c89:	8b 10                	mov    edx,DWORD PTR [eax]
c0022c8b:	50                   	push   eax
c0022c8c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022c8f:	31 c0                	xor    eax,eax
c0022c91:	83 c4 1c             	add    esp,0x1c
c0022c94:	c3                   	ret    
c0022c95:	90                   	nop

c0022c96 <PCI::close(int, int, void*)>:
c0022c96:	31 c0                	xor    eax,eax
c0022c98:	c3                   	ret    
c0022c99:	90                   	nop

c0022c9a <PCI::PCI()>:
c0022c9a:	83 ec 0c             	sub    esp,0xc
c0022c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ca1:	83 ec 08             	sub    esp,0x8
c0022ca4:	68 dc d3 02 c0       	push   0xc002d3dc
c0022ca9:	50                   	push   eax
c0022caa:	e8 bb 08 ff ff       	call   c001356a <Bus::Bus(char const*)>
c0022caf:	83 c4 10             	add    esp,0x10
c0022cb2:	ba f0 d4 02 c0       	mov    edx,0xc002d4f0
c0022cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cbb:	89 10                	mov    DWORD PTR [eax],edx
c0022cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cc1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022ccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ccf:	a3 04 36 03 c0       	mov    ds:0xc0033604,eax
c0022cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cd8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022cde:	0f b6 d0             	movzx  edx,al
c0022ce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ce5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022cf6:	0f b6 d0             	movzx  edx,al
c0022cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cfd:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d06:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022d0c:	8d 50 01             	lea    edx,[eax+0x1]
c0022d0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d13:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022d19:	0f b6 d0             	movzx  edx,al
c0022d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d20:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022d24:	83 c9 c0             	or     ecx,0xffffffc0
c0022d27:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022d2b:	90                   	nop
c0022d2c:	83 c4 0c             	add    esp,0xc
c0022d2f:	c3                   	ret    

c0022d30 <PCI::readBAR8(unsigned int, int)>:
c0022d30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d38:	f6 c2 01             	test   dl,0x1
c0022d3b:	74 07                	je     c0022d44 <PCI::readBAR8(unsigned int, int)+0x14>
c0022d3d:	83 e2 fc             	and    edx,0xfffffffc
c0022d40:	01 c2                	add    edx,eax
c0022d42:	ec                   	in     al,dx
c0022d43:	c3                   	ret    
c0022d44:	83 e2 f0             	and    edx,0xfffffff0
c0022d47:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022d4a:	c3                   	ret    
c0022d4b:	90                   	nop

c0022d4c <PCI::readBAR16(unsigned int, int)>:
c0022d4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d54:	f6 c2 01             	test   dl,0x1
c0022d57:	74 08                	je     c0022d61 <PCI::readBAR16(unsigned int, int)+0x15>
c0022d59:	83 e2 fc             	and    edx,0xfffffffc
c0022d5c:	01 c2                	add    edx,eax
c0022d5e:	66 ed                	in     ax,dx
c0022d60:	c3                   	ret    
c0022d61:	83 e2 f0             	and    edx,0xfffffff0
c0022d64:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022d68:	c3                   	ret    
c0022d69:	90                   	nop

c0022d6a <PCI::readBAR32(unsigned int, int)>:
c0022d6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d72:	f6 c2 01             	test   dl,0x1
c0022d75:	74 07                	je     c0022d7e <PCI::readBAR32(unsigned int, int)+0x14>
c0022d77:	83 e2 fc             	and    edx,0xfffffffc
c0022d7a:	01 c2                	add    edx,eax
c0022d7c:	ed                   	in     eax,dx
c0022d7d:	c3                   	ret    
c0022d7e:	83 e2 f0             	and    edx,0xfffffff0
c0022d81:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022d84:	c3                   	ret    
c0022d85:	90                   	nop

c0022d86 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022d86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d8e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d92:	f6 c2 01             	test   dl,0x1
c0022d95:	74 07                	je     c0022d9e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022d97:	83 e2 fc             	and    edx,0xfffffffc
c0022d9a:	01 ca                	add    edx,ecx
c0022d9c:	ee                   	out    dx,al
c0022d9d:	c3                   	ret    
c0022d9e:	83 e2 f0             	and    edx,0xfffffff0
c0022da1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022da4:	c3                   	ret    
c0022da5:	90                   	nop

c0022da6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022da6:	57                   	push   edi
c0022da7:	56                   	push   esi
c0022da8:	53                   	push   ebx
c0022da9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022dad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022db1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022db5:	f6 c2 01             	test   dl,0x1
c0022db8:	74 24                	je     c0022dde <PCI::writeBAR16(unsigned int, unsigned short, int)+0x38>
c0022dba:	89 d3                	mov    ebx,edx
c0022dbc:	83 e3 fc             	and    ebx,0xfffffffc
c0022dbf:	50                   	push   eax
c0022dc0:	0f b7 c7             	movzx  eax,di
c0022dc3:	50                   	push   eax
c0022dc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0022dc7:	50                   	push   eax
c0022dc8:	68 e4 d3 02 c0       	push   0xc002d3e4
c0022dcd:	e8 f7 fa fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0022dd2:	8d 14 33             	lea    edx,[ebx+esi*1]
c0022dd5:	89 f8                	mov    eax,edi
c0022dd7:	66 ef                	out    dx,ax
c0022dd9:	83 c4 10             	add    esp,0x10
c0022ddc:	eb 07                	jmp    c0022de5 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x3f>
c0022dde:	83 e2 f0             	and    edx,0xfffffff0
c0022de1:	66 89 3c 32          	mov    WORD PTR [edx+esi*1],di
c0022de5:	5b                   	pop    ebx
c0022de6:	5e                   	pop    esi
c0022de7:	5f                   	pop    edi
c0022de8:	c3                   	ret    
c0022de9:	90                   	nop

c0022dea <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022dea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022dee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022df2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022df6:	f6 c2 01             	test   dl,0x1
c0022df9:	74 07                	je     c0022e02 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022dfb:	83 e2 fc             	and    edx,0xfffffffc
c0022dfe:	01 ca                	add    edx,ecx
c0022e00:	ef                   	out    dx,eax
c0022e01:	c3                   	ret    
c0022e02:	83 e2 f0             	and    edx,0xfffffff0
c0022e05:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022e08:	c3                   	ret    
c0022e09:	90                   	nop

c0022e0a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022e0a:	55                   	push   ebp
c0022e0b:	57                   	push   edi
c0022e0c:	56                   	push   esi
c0022e0d:	53                   	push   ebx
c0022e0e:	83 ec 0c             	sub    esp,0xc
c0022e11:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022e15:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022e19:	89 f0                	mov    eax,esi
c0022e1b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022e1f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e23:	3c 07                	cmp    al,0x7
c0022e25:	76 10                	jbe    c0022e37 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022e27:	83 ec 0c             	sub    esp,0xc
c0022e2a:	68 fb d3 02 c0       	push   0xc002d3fb
c0022e2f:	e8 cb 74 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0022e34:	83 c4 10             	add    esp,0x10
c0022e37:	80 fb 0f             	cmp    bl,0xf
c0022e3a:	76 10                	jbe    c0022e4c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022e3c:	83 ec 0c             	sub    esp,0xc
c0022e3f:	68 2b d4 02 c0       	push   0xc002d42b
c0022e44:	e8 b6 74 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0022e49:	83 c4 10             	add    esp,0x10
c0022e4c:	8d 04 36             	lea    eax,[esi+esi*1]
c0022e4f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022e54:	83 c8 f0             	or     eax,0xfffffff0
c0022e57:	ee                   	out    dx,al
c0022e58:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022e5d:	89 e8                	mov    eax,ebp
c0022e5f:	ee                   	out    dx,al
c0022e60:	83 c4 0c             	add    esp,0xc
c0022e63:	89 d8                	mov    eax,ebx
c0022e65:	66 81 e7 fc 00       	and    di,0xfc
c0022e6a:	5b                   	pop    ebx
c0022e6b:	c1 e0 08             	shl    eax,0x8
c0022e6e:	5e                   	pop    esi
c0022e6f:	09 f8                	or     eax,edi
c0022e71:	5f                   	pop    edi
c0022e72:	66 0d 00 c0          	or     ax,0xc000
c0022e76:	5d                   	pop    ebp
c0022e77:	c3                   	ret    

c0022e78 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022e78:	57                   	push   edi
c0022e79:	56                   	push   esi
c0022e7a:	53                   	push   ebx
c0022e7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022e83:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022e89:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022e8d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022e91:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022e95:	83 ff 01             	cmp    edi,0x1
c0022e98:	75 3e                	jne    c0022ed8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022e9a:	89 de                	mov    esi,ebx
c0022e9c:	0f b6 c0             	movzx  eax,al
c0022e9f:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022ea5:	c1 e0 10             	shl    eax,0x10
c0022ea8:	0f b6 c9             	movzx  ecx,cl
c0022eab:	09 f0                	or     eax,esi
c0022ead:	c1 e1 08             	shl    ecx,0x8
c0022eb0:	0f b6 d2             	movzx  edx,dl
c0022eb3:	09 c8                	or     eax,ecx
c0022eb5:	c1 e2 0b             	shl    edx,0xb
c0022eb8:	09 d0                	or     eax,edx
c0022eba:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022ebf:	0d 00 00 00 80       	or     eax,0x80000000
c0022ec4:	ef                   	out    dx,eax
c0022ec5:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022eca:	ed                   	in     eax,dx
c0022ecb:	83 e3 02             	and    ebx,0x2
c0022ece:	0f b6 cb             	movzx  ecx,bl
c0022ed1:	c1 e1 03             	shl    ecx,0x3
c0022ed4:	d3 e8                	shr    eax,cl
c0022ed6:	eb 43                	jmp    c0022f1b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022ed8:	83 ff 02             	cmp    edi,0x2
c0022edb:	75 2c                	jne    c0022f09 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022edd:	83 ec 0c             	sub    esp,0xc
c0022ee0:	0f b6 c9             	movzx  ecx,cl
c0022ee3:	0f b6 d2             	movzx  edx,dl
c0022ee6:	0f b6 fb             	movzx  edi,bl
c0022ee9:	0f b6 c0             	movzx  eax,al
c0022eec:	57                   	push   edi
c0022eed:	51                   	push   ecx
c0022eee:	52                   	push   edx
c0022eef:	50                   	push   eax
c0022ef0:	56                   	push   esi
c0022ef1:	e8 14 ff ff ff       	call   c0022e0a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ef6:	89 c2                	mov    edx,eax
c0022ef8:	ed                   	in     eax,dx
c0022ef9:	83 e3 02             	and    ebx,0x2
c0022efc:	83 c4 20             	add    esp,0x20
c0022eff:	0f b6 cb             	movzx  ecx,bl
c0022f02:	c1 e1 03             	shl    ecx,0x3
c0022f05:	d3 e8                	shr    eax,cl
c0022f07:	eb 12                	jmp    c0022f1b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022f09:	83 ec 0c             	sub    esp,0xc
c0022f0c:	68 5b d4 02 c0       	push   0xc002d45b
c0022f11:	e8 e9 73 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0022f16:	83 c4 10             	add    esp,0x10
c0022f19:	31 c0                	xor    eax,eax
c0022f1b:	5b                   	pop    ebx
c0022f1c:	5e                   	pop    esi
c0022f1d:	5f                   	pop    edi
c0022f1e:	c3                   	ret    
c0022f1f:	90                   	nop

c0022f20 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022f20:	83 ec 18             	sub    esp,0x18
c0022f23:	6a 00                	push   0x0
c0022f25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f2a:	50                   	push   eax
c0022f2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f30:	50                   	push   eax
c0022f31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f36:	50                   	push   eax
c0022f37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f3b:	e8 38 ff ff ff       	call   c0022e78 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f40:	83 c4 2c             	add    esp,0x2c
c0022f43:	c3                   	ret    

c0022f44 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022f44:	83 ec 18             	sub    esp,0x18
c0022f47:	6a 0e                	push   0xe
c0022f49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f4e:	50                   	push   eax
c0022f4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f54:	50                   	push   eax
c0022f55:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f5a:	50                   	push   eax
c0022f5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f5f:	e8 14 ff ff ff       	call   c0022e78 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f64:	83 c4 2c             	add    esp,0x2c
c0022f67:	0f b6 c0             	movzx  eax,al
c0022f6a:	c3                   	ret    
c0022f6b:	90                   	nop

c0022f6c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022f6c:	55                   	push   ebp
c0022f6d:	57                   	push   edi
c0022f6e:	56                   	push   esi
c0022f6f:	53                   	push   ebx
c0022f70:	83 ec 18             	sub    esp,0x18
c0022f73:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022f78:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022f7d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022f82:	6a 0a                	push   0xa
c0022f84:	56                   	push   esi
c0022f85:	55                   	push   ebp
c0022f86:	57                   	push   edi
c0022f87:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022f8b:	e8 e8 fe ff ff       	call   c0022e78 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f90:	83 c4 14             	add    esp,0x14
c0022f93:	89 c3                	mov    ebx,eax
c0022f95:	6a 0a                	push   0xa
c0022f97:	0f b6 db             	movzx  ebx,bl
c0022f9a:	56                   	push   esi
c0022f9b:	55                   	push   ebp
c0022f9c:	57                   	push   edi
c0022f9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022fa1:	e8 d2 fe ff ff       	call   c0022e78 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fa6:	83 c4 2c             	add    esp,0x2c
c0022fa9:	25 00 ff 00 00       	and    eax,0xff00
c0022fae:	09 d8                	or     eax,ebx
c0022fb0:	5b                   	pop    ebx
c0022fb1:	5e                   	pop    esi
c0022fb2:	5f                   	pop    edi
c0022fb3:	5d                   	pop    ebp
c0022fb4:	c3                   	ret    
c0022fb5:	90                   	nop

c0022fb6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022fb6:	83 ec 18             	sub    esp,0x18
c0022fb9:	6a 08                	push   0x8
c0022fbb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fc0:	50                   	push   eax
c0022fc1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fc6:	50                   	push   eax
c0022fc7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fcc:	50                   	push   eax
c0022fcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fd1:	e8 a2 fe ff ff       	call   c0022e78 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fd6:	83 c4 2c             	add    esp,0x2c
c0022fd9:	0f b6 c4             	movzx  eax,ah
c0022fdc:	c3                   	ret    
c0022fdd:	90                   	nop

c0022fde <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022fde:	83 ec 18             	sub    esp,0x18
c0022fe1:	6a 08                	push   0x8
c0022fe3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fe8:	50                   	push   eax
c0022fe9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fee:	50                   	push   eax
c0022fef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ff4:	50                   	push   eax
c0022ff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ff9:	e8 7a fe ff ff       	call   c0022e78 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ffe:	83 c4 2c             	add    esp,0x2c
c0023001:	c3                   	ret    

c0023002 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0023002:	83 ec 18             	sub    esp,0x18
c0023005:	6a 3c                	push   0x3c
c0023007:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002300c:	50                   	push   eax
c002300d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023012:	50                   	push   eax
c0023013:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023018:	50                   	push   eax
c0023019:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002301d:	e8 56 fe ff ff       	call   c0022e78 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023022:	83 c4 2c             	add    esp,0x2c
c0023025:	c3                   	ret    

c0023026 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0023026:	83 ec 18             	sub    esp,0x18
c0023029:	6a 18                	push   0x18
c002302b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023030:	50                   	push   eax
c0023031:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023036:	50                   	push   eax
c0023037:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002303c:	50                   	push   eax
c002303d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023041:	e8 32 fe ff ff       	call   c0022e78 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023046:	83 c4 2c             	add    esp,0x2c
c0023049:	0f b6 c4             	movzx  eax,ah
c002304c:	c3                   	ret    
c002304d:	90                   	nop

c002304e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002304e:	55                   	push   ebp
c002304f:	57                   	push   edi
c0023050:	56                   	push   esi
c0023051:	53                   	push   ebx
c0023052:	83 ec 28             	sub    esp,0x28
c0023055:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023059:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002305e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0023063:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0023068:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002306f:	8d 43 12             	lea    eax,[ebx+0x12]
c0023072:	83 c3 10             	add    ebx,0x10
c0023075:	0f b6 c0             	movzx  eax,al
c0023078:	0f b6 db             	movzx  ebx,bl
c002307b:	50                   	push   eax
c002307c:	51                   	push   ecx
c002307d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0023081:	57                   	push   edi
c0023082:	55                   	push   ebp
c0023083:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023087:	e8 ec fd ff ff       	call   c0022e78 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002308c:	83 c4 14             	add    esp,0x14
c002308f:	89 c6                	mov    esi,eax
c0023091:	53                   	push   ebx
c0023092:	c1 e6 10             	shl    esi,0x10
c0023095:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023099:	51                   	push   ecx
c002309a:	57                   	push   edi
c002309b:	55                   	push   ebp
c002309c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00230a0:	e8 d3 fd ff ff       	call   c0022e78 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230a5:	83 c4 3c             	add    esp,0x3c
c00230a8:	0f b7 c0             	movzx  eax,ax
c00230ab:	5b                   	pop    ebx
c00230ac:	09 f0                	or     eax,esi
c00230ae:	5e                   	pop    esi
c00230af:	5f                   	pop    edi
c00230b0:	5d                   	pop    ebp
c00230b1:	c3                   	ret    

c00230b2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00230b2:	55                   	push   ebp
c00230b3:	57                   	push   edi
c00230b4:	56                   	push   esi
c00230b5:	53                   	push   ebx
c00230b6:	83 ec 0c             	sub    esp,0xc
c00230b9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00230bd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00230c1:	89 f5                	mov    ebp,esi
c00230c3:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00230c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00230cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00230d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00230d5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00230d9:	83 f9 01             	cmp    ecx,0x1
c00230dc:	75 5d                	jne    c002313b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00230de:	0f b6 c8             	movzx  ecx,al
c00230e1:	0f b6 d2             	movzx  edx,dl
c00230e4:	c1 e1 10             	shl    ecx,0x10
c00230e7:	c1 e2 0b             	shl    edx,0xb
c00230ea:	89 f0                	mov    eax,esi
c00230ec:	25 fc 00 00 00       	and    eax,0xfc
c00230f1:	09 c1                	or     ecx,eax
c00230f3:	89 e8                	mov    eax,ebp
c00230f5:	0f b6 c0             	movzx  eax,al
c00230f8:	c1 e0 08             	shl    eax,0x8
c00230fb:	09 c1                	or     ecx,eax
c00230fd:	09 d1                	or     ecx,edx
c00230ff:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023104:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002310a:	89 c8                	mov    eax,ecx
c002310c:	ef                   	out    dx,eax
c002310d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023112:	ed                   	in     eax,dx
c0023113:	0f b7 db             	movzx  ebx,bx
c0023116:	83 e6 02             	and    esi,0x2
c0023119:	74 0a                	je     c0023125 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c002311b:	0f b7 d0             	movzx  edx,ax
c002311e:	c1 e3 10             	shl    ebx,0x10
c0023121:	09 d3                	or     ebx,edx
c0023123:	eb 05                	jmp    c002312a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0023125:	66 31 c0             	xor    ax,ax
c0023128:	09 c3                	or     ebx,eax
c002312a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002312f:	89 c8                	mov    eax,ecx
c0023131:	ef                   	out    dx,eax
c0023132:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023137:	89 d8                	mov    eax,ebx
c0023139:	eb 41                	jmp    c002317c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002313b:	83 f9 02             	cmp    ecx,0x2
c002313e:	75 45                	jne    c0023185 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0023140:	83 ec 0c             	sub    esp,0xc
c0023143:	0f b6 d2             	movzx  edx,dl
c0023146:	89 f1                	mov    ecx,esi
c0023148:	0f b6 c0             	movzx  eax,al
c002314b:	0f b6 f1             	movzx  esi,cl
c002314e:	89 e9                	mov    ecx,ebp
c0023150:	56                   	push   esi
c0023151:	0f b6 c9             	movzx  ecx,cl
c0023154:	51                   	push   ecx
c0023155:	52                   	push   edx
c0023156:	50                   	push   eax
c0023157:	57                   	push   edi
c0023158:	e8 ad fc ff ff       	call   c0022e0a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002315d:	89 c2                	mov    edx,eax
c002315f:	ed                   	in     eax,dx
c0023160:	83 c4 20             	add    esp,0x20
c0023163:	0f b7 db             	movzx  ebx,bx
c0023166:	f6 c2 02             	test   dl,0x2
c0023169:	74 0c                	je     c0023177 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002316b:	0f b7 c8             	movzx  ecx,ax
c002316e:	89 d8                	mov    eax,ebx
c0023170:	c1 e0 10             	shl    eax,0x10
c0023173:	09 c8                	or     eax,ecx
c0023175:	eb 05                	jmp    c002317c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0023177:	66 31 c0             	xor    ax,ax
c002317a:	09 d8                	or     eax,ebx
c002317c:	ef                   	out    dx,eax
c002317d:	83 c4 0c             	add    esp,0xc
c0023180:	5b                   	pop    ebx
c0023181:	5e                   	pop    esi
c0023182:	5f                   	pop    edi
c0023183:	5d                   	pop    ebp
c0023184:	c3                   	ret    
c0023185:	c7 44 24 20 5b d4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002d45b
c002318d:	83 c4 0c             	add    esp,0xc
c0023190:	5b                   	pop    ebx
c0023191:	5e                   	pop    esi
c0023192:	5f                   	pop    edi
c0023193:	5d                   	pop    ebp
c0023194:	e9 66 71 ff ff       	jmp    c001a2ff <Krnl::panic(char const*)>
c0023199:	90                   	nop

c002319a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002319a:	55                   	push   ebp
c002319b:	57                   	push   edi
c002319c:	56                   	push   esi
c002319d:	53                   	push   ebx
c002319e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00231a4:	80 3d 10 36 03 c0 00 	cmp    BYTE PTR ds:0xc0033610,0x0
c00231ab:	0f 85 96 00 00 00    	jne    c0023247 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c00231b1:	83 ec 0c             	sub    esp,0xc
c00231b4:	68 14 01 00 00       	push   0x114
c00231b9:	e8 ce c6 fe ff       	call   c000f88c <malloc>
c00231be:	83 c4 0c             	add    esp,0xc
c00231c1:	89 c3                	mov    ebx,eax
c00231c3:	ff 35 10 28 03 c0    	push   DWORD PTR ds:0xc0032810
c00231c9:	68 61 d4 02 c0       	push   0xc002d461
c00231ce:	50                   	push   eax
c00231cf:	e8 54 fc fe ff       	call   c0012e28 <File::File(char const*, Process*)>
c00231d4:	5a                   	pop    edx
c00231d5:	59                   	pop    ecx
c00231d6:	6a 01                	push   0x1
c00231d8:	53                   	push   ebx
c00231d9:	e8 ae fc fe ff       	call   c0012e8c <File::open(FileOpenMode)>
c00231de:	83 c4 0c             	add    esp,0xc
c00231e1:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00231e5:	50                   	push   eax
c00231e6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00231ea:	50                   	push   eax
c00231eb:	53                   	push   ebx
c00231ec:	e8 47 ff fe ff       	call   c0013138 <File::stat(unsigned long long*, bool*)>
c00231f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00231f5:	40                   	inc    eax
c00231f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00231f9:	e8 8e c6 fe ff       	call   c000f88c <malloc>
c00231fe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023202:	a3 0c 36 03 c0       	mov    ds:0xc003360c,eax
c0023207:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002320b:	5e                   	pop    esi
c002320c:	8b 13                	mov    edx,DWORD PTR [ebx]
c002320e:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0023212:	51                   	push   ecx
c0023213:	50                   	push   eax
c0023214:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023218:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002321c:	53                   	push   ebx
c002321d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0023220:	83 c4 14             	add    esp,0x14
c0023223:	53                   	push   ebx
c0023224:	e8 c1 fc fe ff       	call   c0012eea <File::close()>
c0023229:	5f                   	pop    edi
c002322a:	5d                   	pop    ebp
c002322b:	ff 35 0c 36 03 c0    	push   DWORD PTR ds:0xc003360c
c0023231:	68 7a d4 02 c0       	push   0xc002d47a
c0023236:	e8 8e f6 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c002323b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002323f:	83 c4 10             	add    esp,0x10
c0023242:	a3 08 36 03 c0       	mov    ds:0xc0033608,eax
c0023247:	a1 08 36 03 c0       	mov    eax,ds:0xc0033608
c002324c:	8b 15 0c 36 03 c0    	mov    edx,DWORD PTR ds:0xc003360c
c0023252:	89 04 24             	mov    DWORD PTR [esp],eax
c0023255:	31 ff                	xor    edi,edi
c0023257:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c002325f:	31 f6                	xor    esi,esi
c0023261:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0023266:	31 db                	xor    ebx,ebx
c0023268:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0023270:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0023275:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c002327c:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0023280:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0023287:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002328b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002328e:	0f 8e 6b 01 00 00    	jle    c00233ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c0023294:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023297:	d4 40                	aam    0x40
c0023299:	d5 39                	aad    0x39
c002329b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002329f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00232a3:	d4 40                	aam    0x40
c00232a5:	d5 39                	aad    0x39
c00232a7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00232ab:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00232af:	d4 40                	aam    0x40
c00232b1:	d5 39                	aad    0x39
c00232b3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00232b7:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00232bb:	d4 40                	aam    0x40
c00232bd:	d5 39                	aad    0x39
c00232bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00232c3:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00232c7:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00232cb:	3c 56                	cmp    al,0x56
c00232cd:	74 45                	je     c0023314 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x17a>
c00232cf:	d4 40                	aam    0x40
c00232d1:	d5 39                	aad    0x39
c00232d3:	8d 48 d0             	lea    ecx,[eax-0x30]
c00232d6:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00232da:	0f b6 c9             	movzx  ecx,cl
c00232dd:	c1 e1 04             	shl    ecx,0x4
c00232e0:	d4 40                	aam    0x40
c00232e2:	d5 39                	aad    0x39
c00232e4:	8d 58 d0             	lea    ebx,[eax-0x30]
c00232e7:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00232eb:	0f b6 db             	movzx  ebx,bl
c00232ee:	09 cb                	or     ebx,ecx
c00232f0:	c1 e3 04             	shl    ebx,0x4
c00232f3:	d4 40                	aam    0x40
c00232f5:	d5 39                	aad    0x39
c00232f7:	8d 48 d0             	lea    ecx,[eax-0x30]
c00232fa:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00232fe:	0f b6 c9             	movzx  ecx,cl
c0023301:	09 cb                	or     ebx,ecx
c0023303:	c1 e3 04             	shl    ebx,0x4
c0023306:	89 d9                	mov    ecx,ebx
c0023308:	d4 40                	aam    0x40
c002330a:	d5 39                	aad    0x39
c002330c:	8d 58 d0             	lea    ebx,[eax-0x30]
c002330f:	0f b6 db             	movzx  ebx,bl
c0023312:	09 cb                	or     ebx,ecx
c0023314:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0023318:	80 f9 44             	cmp    cl,0x44
c002331b:	74 47                	je     c0023364 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ca>
c002331d:	88 c8                	mov    al,cl
c002331f:	d4 40                	aam    0x40
c0023321:	d5 39                	aad    0x39
c0023323:	83 e8 30             	sub    eax,0x30
c0023326:	0f b6 e8             	movzx  ebp,al
c0023329:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c002332d:	c1 e5 04             	shl    ebp,0x4
c0023330:	d4 40                	aam    0x40
c0023332:	d5 39                	aad    0x39
c0023334:	83 e8 30             	sub    eax,0x30
c0023337:	0f b6 f0             	movzx  esi,al
c002333a:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c002333e:	09 ee                	or     esi,ebp
c0023340:	c1 e6 04             	shl    esi,0x4
c0023343:	d4 40                	aam    0x40
c0023345:	d5 39                	aad    0x39
c0023347:	83 e8 30             	sub    eax,0x30
c002334a:	0f b6 e8             	movzx  ebp,al
c002334d:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0023351:	09 ee                	or     esi,ebp
c0023353:	c1 e6 04             	shl    esi,0x4
c0023356:	89 f5                	mov    ebp,esi
c0023358:	d4 40                	aam    0x40
c002335a:	d5 39                	aad    0x39
c002335c:	83 e8 30             	sub    eax,0x30
c002335f:	0f b6 f0             	movzx  esi,al
c0023362:	09 ee                	or     esi,ebp
c0023364:	83 c7 10             	add    edi,0x10
c0023367:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c002336b:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002336e:	3c 0a                	cmp    al,0xa
c0023370:	74 09                	je     c002337b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e1>
c0023372:	45                   	inc    ebp
c0023373:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023376:	75 16                	jne    c002338e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f4>
c0023378:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002337b:	3c 0a                	cmp    al,0xa
c002337d:	0f 94 c0             	sete   al
c0023380:	0f b6 c0             	movzx  eax,al
c0023383:	01 c7                	add    edi,eax
c0023385:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c002338a:	75 0c                	jne    c0023398 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1fe>
c002338c:	eb 15                	jmp    c00233a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c002338e:	47                   	inc    edi
c002338f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0023392:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0023396:	eb d3                	jmp    c002336b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1d1>
c0023398:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c002339d:	0f 85 e8 fe ff ff    	jne    c002328b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233a3:	80 f9 44             	cmp    cl,0x44
c00233a6:	74 0b                	je     c00233b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x219>
c00233a8:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c00233ad:	0f 85 d8 fe ff ff    	jne    c002328b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233b3:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00233b7:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00233bb:	c1 e1 04             	shl    ecx,0x4
c00233be:	83 e8 30             	sub    eax,0x30
c00233c1:	09 c8                	or     eax,ecx
c00233c3:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00233c7:	0f 85 be fe ff ff    	jne    c002328b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233cd:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00233d1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00233d5:	c1 e1 04             	shl    ecx,0x4
c00233d8:	83 e8 30             	sub    eax,0x30
c00233db:	09 c8                	or     eax,ecx
c00233dd:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00233e1:	0f 85 a4 fe ff ff    	jne    c002328b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233e7:	50                   	push   eax
c00233e8:	50                   	push   eax
c00233e9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00233ed:	50                   	push   eax
c00233ee:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00233f5:	e8 12 d4 fd ff       	call   c000080c <strcpy>
c00233fa:	83 c4 10             	add    esp,0x10
c00233fd:	eb 15                	jmp    c0023414 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x27a>
c00233ff:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023406:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0023411:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0023414:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c002341b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0023421:	5b                   	pop    ebx
c0023422:	5e                   	pop    esi
c0023423:	5f                   	pop    edi
c0023424:	5d                   	pop    ebp
c0023425:	c3                   	ret    

c0023426 <PCI::checkBus(unsigned char)>:
c0023426:	56                   	push   esi
c0023427:	53                   	push   ebx
c0023428:	31 db                	xor    ebx,ebx
c002342a:	51                   	push   ecx
c002342b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023430:	52                   	push   edx
c0023431:	53                   	push   ebx
c0023432:	43                   	inc    ebx
c0023433:	56                   	push   esi
c0023434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023438:	e8 37 03 00 00       	call   c0023774 <PCI::checkDevice(unsigned char, unsigned char)>
c002343d:	83 c4 10             	add    esp,0x10
c0023440:	83 fb 20             	cmp    ebx,0x20
c0023443:	75 eb                	jne    c0023430 <PCI::checkBus(unsigned char)+0xa>
c0023445:	58                   	pop    eax
c0023446:	5b                   	pop    ebx
c0023447:	5e                   	pop    esi
c0023448:	c3                   	ret    
c0023449:	90                   	nop

c002344a <PCI::foundDevice(PCIDeviceInfo)>:
c002344a:	55                   	push   ebp
c002344b:	57                   	push   edi
c002344c:	56                   	push   esi
c002344d:	53                   	push   ebx
c002344e:	83 ec 1c             	sub    esp,0x1c
c0023451:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023455:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002345b:	0f 84 52 01 00 00    	je     c00235b3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023461:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023465:	66 81 f9 06 04       	cmp    cx,0x406
c002346a:	75 2c                	jne    c0023498 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c002346c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0023471:	50                   	push   eax
c0023472:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023477:	50                   	push   eax
c0023478:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002347d:	50                   	push   eax
c002347e:	56                   	push   esi
c002347f:	e8 a2 fb ff ff       	call   c0023026 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023484:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023488:	0f b6 c0             	movzx  eax,al
c002348b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002348f:	83 c4 2c             	add    esp,0x2c
c0023492:	5b                   	pop    ebx
c0023493:	5e                   	pop    esi
c0023494:	5f                   	pop    edi
c0023495:	5d                   	pop    ebp
c0023496:	eb 8e                	jmp    c0023426 <PCI::checkBus(unsigned char)>
c0023498:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002349c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00234a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00234a6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00234aa:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00234ae:	88 d3                	mov    bl,dl
c00234b0:	85 c0                	test   eax,eax
c00234b2:	74 33                	je     c00234e7 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00234b4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00234b7:	85 d2                	test   edx,edx
c00234b9:	74 28                	je     c00234e3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234bb:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00234c1:	31 ef                	xor    edi,ebp
c00234c3:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00234c9:	75 18                	jne    c00234e3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234cb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00234cf:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00234d5:	75 0c                	jne    c00234e3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234d7:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00234dd:	0f 84 d0 00 00 00    	je     c00235b3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00234e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00234e5:	eb c9                	jmp    c00234b0 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00234e7:	66 81 f9 01 06       	cmp    cx,0x601
c00234ec:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00234f0:	75 19                	jne    c002350b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00234f2:	83 ec 0c             	sub    esp,0xc
c00234f5:	68 64 01 00 00       	push   0x164
c00234fa:	e8 8d c3 fe ff       	call   c000f88c <malloc>
c00234ff:	89 c5                	mov    ebp,eax
c0023501:	89 04 24             	mov    DWORD PTR [esp],eax
c0023504:	e8 a1 0f 00 00       	call   c00244aa <SATABus::SATABus()>
c0023509:	eb 1e                	jmp    c0023529 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002350b:	66 81 f9 01 01       	cmp    cx,0x101
c0023510:	75 60                	jne    c0023572 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023512:	83 ec 0c             	sub    esp,0xc
c0023515:	68 70 02 00 00       	push   0x270
c002351a:	e8 6d c3 fe ff       	call   c000f88c <malloc>
c002351f:	89 c5                	mov    ebp,eax
c0023521:	89 04 24             	mov    DWORD PTR [esp],eax
c0023524:	e8 0f 03 00 00       	call   c0023838 <IDE::IDE()>
c0023529:	58                   	pop    eax
c002352a:	5a                   	pop    edx
c002352b:	55                   	push   ebp
c002352c:	56                   	push   esi
c002352d:	e8 d0 07 ff ff       	call   c0013d02 <Device::addChild(Device*)>
c0023532:	83 ec 1c             	sub    esp,0x1c
c0023535:	b9 09 00 00 00       	mov    ecx,0x9
c002353a:	fc                   	cld    
c002353b:	89 e7                	mov    edi,esp
c002353d:	89 de                	mov    esi,ebx
c002353f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023541:	55                   	push   ebp
c0023542:	e8 cd 06 ff ff       	call   c0013c14 <Device::preOpenPCI(PCIDeviceInfo)>
c0023547:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002354a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002354e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023556:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002355e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023566:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023569:	83 c4 4c             	add    esp,0x4c
c002356c:	5b                   	pop    ebx
c002356d:	5e                   	pop    esi
c002356e:	5f                   	pop    edi
c002356f:	5d                   	pop    ebp
c0023570:	ff e0                	jmp    eax
c0023572:	83 ec 0c             	sub    esp,0xc
c0023575:	68 58 01 00 00       	push   0x158
c002357a:	e8 0d c3 fe ff       	call   c000f88c <malloc>
c002357f:	89 c5                	mov    ebp,eax
c0023581:	58                   	pop    eax
c0023582:	5a                   	pop    edx
c0023583:	68 8c d4 02 c0       	push   0xc002d48c
c0023588:	55                   	push   ebp
c0023589:	e8 7e 0a ff ff       	call   c001400c <DriverlessDevice::DriverlessDevice(char const*)>
c002358e:	59                   	pop    ecx
c002358f:	5f                   	pop    edi
c0023590:	55                   	push   ebp
c0023591:	56                   	push   esi
c0023592:	e8 6b 07 ff ff       	call   c0013d02 <Device::addChild(Device*)>
c0023597:	b9 09 00 00 00       	mov    ecx,0x9
c002359c:	fc                   	cld    
c002359d:	89 df                	mov    edi,ebx
c002359f:	89 de                	mov    esi,ebx
c00235a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00235a3:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00235a7:	83 c4 2c             	add    esp,0x2c
c00235aa:	5b                   	pop    ebx
c00235ab:	5e                   	pop    esi
c00235ac:	5f                   	pop    edi
c00235ad:	5d                   	pop    ebp
c00235ae:	e9 61 06 ff ff       	jmp    c0013c14 <Device::preOpenPCI(PCIDeviceInfo)>
c00235b3:	83 c4 1c             	add    esp,0x1c
c00235b6:	5b                   	pop    ebx
c00235b7:	5e                   	pop    esi
c00235b8:	5f                   	pop    edi
c00235b9:	5d                   	pop    ebp
c00235ba:	c3                   	ret    
c00235bb:	90                   	nop

c00235bc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00235bc:	55                   	push   ebp
c00235bd:	57                   	push   edi
c00235be:	56                   	push   esi
c00235bf:	53                   	push   ebx
c00235c0:	83 ec 68             	sub    esp,0x68
c00235c3:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00235c7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00235ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00235d2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00235d9:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c00235de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00235e2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00235e9:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00235ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00235f2:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c00235f7:	6a 0c                	push   0xc
c00235f9:	57                   	push   edi
c00235fa:	53                   	push   ebx
c00235fb:	56                   	push   esi
c00235fc:	55                   	push   ebp
c00235fd:	e8 76 f8 ff ff       	call   c0022e78 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023602:	83 c4 20             	add    esp,0x20
c0023605:	57                   	push   edi
c0023606:	53                   	push   ebx
c0023607:	56                   	push   esi
c0023608:	55                   	push   ebp
c0023609:	e8 5e f9 ff ff       	call   c0022f6c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002360e:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0023613:	57                   	push   edi
c0023614:	53                   	push   ebx
c0023615:	56                   	push   esi
c0023616:	55                   	push   ebp
c0023617:	e8 e6 f9 ff ff       	call   c0023002 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002361c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0023620:	83 c4 14             	add    esp,0x14
c0023623:	6a 3c                	push   0x3c
c0023625:	57                   	push   edi
c0023626:	53                   	push   ebx
c0023627:	56                   	push   esi
c0023628:	55                   	push   ebp
c0023629:	e8 4a f8 ff ff       	call   c0022e78 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002362e:	0f b6 c4             	movzx  eax,ah
c0023631:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023635:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0023639:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002363d:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0023642:	83 c4 20             	add    esp,0x20
c0023645:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002364b:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023652:	74 7c                	je     c00236d0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023654:	31 c0                	xor    eax,eax
c0023656:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c002365c:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023662:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0023668:	7e 66                	jle    c00236d0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c002366a:	8d 14 c2             	lea    edx,[edx+eax*8]
c002366d:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023674:	39 cb                	cmp    ebx,ecx
c0023676:	75 55                	jne    c00236cd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023678:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c002367f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0023683:	75 48                	jne    c00236cd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023685:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023689:	83 ec 0c             	sub    esp,0xc
c002368c:	68 a6 d4 02 c0       	push   0xc002d4a6
c0023691:	e8 33 f2 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0023696:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002369a:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c00236a0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00236a4:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00236aa:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c00236b2:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c00236b6:	52                   	push   edx
c00236b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00236bb:	53                   	push   ebx
c00236bc:	68 cb d4 02 c0       	push   0xc002d4cb
c00236c1:	e8 03 f2 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00236c6:	83 c4 20             	add    esp,0x20
c00236c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00236cd:	40                   	inc    eax
c00236ce:	eb 86                	jmp    c0023656 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c00236d0:	31 d2                	xor    edx,edx
c00236d2:	83 ec 0c             	sub    esp,0xc
c00236d5:	57                   	push   edi
c00236d6:	53                   	push   ebx
c00236d7:	56                   	push   esi
c00236d8:	52                   	push   edx
c00236d9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00236dd:	55                   	push   ebp
c00236de:	e8 6b f9 ff ff       	call   c002304e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00236e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00236e7:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00236eb:	42                   	inc    edx
c00236ec:	83 c4 20             	add    esp,0x20
c00236ef:	83 fa 06             	cmp    edx,0x6
c00236f2:	75 de                	jne    c00236d2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c00236f4:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00236f9:	83 ec 0c             	sub    esp,0xc
c00236fc:	86 e0                	xchg   al,ah
c00236fe:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0023703:	6a 02                	push   0x2
c0023705:	57                   	push   edi
c0023706:	53                   	push   ebx
c0023707:	56                   	push   esi
c0023708:	55                   	push   ebp
c0023709:	e8 6a f7 ff ff       	call   c0022e78 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002370e:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0023713:	83 c4 20             	add    esp,0x20
c0023716:	57                   	push   edi
c0023717:	53                   	push   ebx
c0023718:	56                   	push   esi
c0023719:	55                   	push   ebp
c002371a:	e8 97 f8 ff ff       	call   c0022fb6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002371f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023723:	57                   	push   edi
c0023724:	53                   	push   ebx
c0023725:	56                   	push   esi
c0023726:	55                   	push   ebp
c0023727:	e8 f4 f7 ff ff       	call   c0022f20 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002372c:	b9 09 00 00 00       	mov    ecx,0x9
c0023731:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0023736:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c002373a:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002373e:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023742:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0023746:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002374a:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002374e:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0023752:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0023756:	83 ec 0c             	sub    esp,0xc
c0023759:	fc                   	cld    
c002375a:	89 e7                	mov    edi,esp
c002375c:	8d 74 24 58          	lea    esi,[esp+0x58]
c0023760:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023762:	55                   	push   ebp
c0023763:	e8 e2 fc ff ff       	call   c002344a <PCI::foundDevice(PCIDeviceInfo)>
c0023768:	81 c4 8c 00 00 00    	add    esp,0x8c
c002376e:	5b                   	pop    ebx
c002376f:	5e                   	pop    esi
c0023770:	5f                   	pop    edi
c0023771:	5d                   	pop    ebp
c0023772:	c3                   	ret    
c0023773:	90                   	nop

c0023774 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023774:	55                   	push   ebp
c0023775:	57                   	push   edi
c0023776:	56                   	push   esi
c0023777:	53                   	push   ebx
c0023778:	83 ec 0c             	sub    esp,0xc
c002377b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002377f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023784:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023789:	6a 00                	push   0x0
c002378b:	56                   	push   esi
c002378c:	57                   	push   edi
c002378d:	55                   	push   ebp
c002378e:	e8 8d f7 ff ff       	call   c0022f20 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023793:	6a 00                	push   0x0
c0023795:	56                   	push   esi
c0023796:	57                   	push   edi
c0023797:	55                   	push   ebp
c0023798:	e8 1f fe ff ff       	call   c00235bc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002379d:	83 c4 20             	add    esp,0x20
c00237a0:	6a 00                	push   0x0
c00237a2:	56                   	push   esi
c00237a3:	57                   	push   edi
c00237a4:	55                   	push   ebp
c00237a5:	e8 9a f7 ff ff       	call   c0022f44 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00237aa:	83 c4 10             	add    esp,0x10
c00237ad:	84 c0                	test   al,al
c00237af:	79 27                	jns    c00237d8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00237b1:	bb 01 00 00 00       	mov    ebx,0x1
c00237b6:	53                   	push   ebx
c00237b7:	56                   	push   esi
c00237b8:	57                   	push   edi
c00237b9:	55                   	push   ebp
c00237ba:	e8 61 f7 ff ff       	call   c0022f20 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00237bf:	83 c4 10             	add    esp,0x10
c00237c2:	66 40                	inc    ax
c00237c4:	74 0c                	je     c00237d2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00237c6:	53                   	push   ebx
c00237c7:	56                   	push   esi
c00237c8:	57                   	push   edi
c00237c9:	55                   	push   ebp
c00237ca:	e8 ed fd ff ff       	call   c00235bc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00237cf:	83 c4 10             	add    esp,0x10
c00237d2:	43                   	inc    ebx
c00237d3:	83 fb 08             	cmp    ebx,0x8
c00237d6:	75 de                	jne    c00237b6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00237d8:	83 c4 0c             	add    esp,0xc
c00237db:	5b                   	pop    ebx
c00237dc:	5e                   	pop    esi
c00237dd:	5f                   	pop    edi
c00237de:	5d                   	pop    ebp
c00237df:	c3                   	ret    

c00237e0 <PCI::detect()>:
c00237e0:	56                   	push   esi
c00237e1:	53                   	push   ebx
c00237e2:	53                   	push   ebx
c00237e3:	31 db                	xor    ebx,ebx
c00237e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00237e9:	6a 00                	push   0x0
c00237eb:	6a 00                	push   0x0
c00237ed:	6a 00                	push   0x0
c00237ef:	56                   	push   esi
c00237f0:	e8 4f f7 ff ff       	call   c0022f44 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00237f5:	83 c4 10             	add    esp,0x10
c00237f8:	a8 80                	test   al,0x80
c00237fa:	75 21                	jne    c002381d <PCI::detect()+0x3d>
c00237fc:	51                   	push   ecx
c00237fd:	51                   	push   ecx
c00237fe:	6a 00                	push   0x0
c0023800:	56                   	push   esi
c0023801:	e8 20 fc ff ff       	call   c0023426 <PCI::checkBus(unsigned char)>
c0023806:	83 c4 10             	add    esp,0x10
c0023809:	eb 24                	jmp    c002382f <PCI::detect()+0x4f>
c002380b:	52                   	push   edx
c002380c:	52                   	push   edx
c002380d:	53                   	push   ebx
c002380e:	43                   	inc    ebx
c002380f:	56                   	push   esi
c0023810:	e8 11 fc ff ff       	call   c0023426 <PCI::checkBus(unsigned char)>
c0023815:	83 c4 10             	add    esp,0x10
c0023818:	83 fb 08             	cmp    ebx,0x8
c002381b:	74 12                	je     c002382f <PCI::detect()+0x4f>
c002381d:	53                   	push   ebx
c002381e:	6a 00                	push   0x0
c0023820:	6a 00                	push   0x0
c0023822:	56                   	push   esi
c0023823:	e8 f8 f6 ff ff       	call   c0022f20 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023828:	83 c4 10             	add    esp,0x10
c002382b:	66 40                	inc    ax
c002382d:	74 dc                	je     c002380b <PCI::detect()+0x2b>
c002382f:	58                   	pop    eax
c0023830:	5b                   	pop    ebx
c0023831:	5e                   	pop    esi
c0023832:	c3                   	ret    
c0023833:	90                   	nop

c0023834 <IDE::close(int, int, void*)>:
c0023834:	83 c8 ff             	or     eax,0xffffffff
c0023837:	c3                   	ret    

c0023838 <IDE::IDE()>:
c0023838:	83 ec 0c             	sub    esp,0xc
c002383b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002383f:	83 ec 08             	sub    esp,0x8
c0023842:	68 14 d5 02 c0       	push   0xc002d514
c0023847:	50                   	push   eax
c0023848:	e8 63 08 ff ff       	call   c00140b0 <HardDiskController::HardDiskController(char const*)>
c002384d:	83 c4 10             	add    esp,0x10
c0023850:	ba 54 d7 02 c0       	mov    edx,0xc002d754
c0023855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023859:	89 10                	mov    DWORD PTR [eax],edx
c002385b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002385f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023866:	90                   	nop
c0023867:	83 c4 0c             	add    esp,0xc
c002386a:	c3                   	ret    
c002386b:	90                   	nop

c002386c <IDE::prepareInterrupt(unsigned char)>:
c002386c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023871:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023875:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002387d:	c3                   	ret    

c002387e <selectDrive(unsigned char, unsigned char)>:
c002387e:	c3                   	ret    
c002387f:	90                   	nop

c0023880 <IDE::getBase(unsigned char)>:
c0023880:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023889:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023891:	c3                   	ret    

c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023892:	55                   	push   ebp
c0023893:	57                   	push   edi
c0023894:	56                   	push   esi
c0023895:	53                   	push   ebx
c0023896:	83 ec 1c             	sub    esp,0x1c
c0023899:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002389d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238a1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00238a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00238a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00238ac:	80 f9 03             	cmp    cl,0x3
c00238af:	77 51                	ja     c0023902 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00238b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00238b5:	0f b6 f2             	movzx  esi,dl
c00238b8:	0f b6 db             	movzx  ebx,bl
c00238bb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00238be:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00238c2:	83 ca 80             	or     edx,0xffffff80
c00238c5:	0f b6 d2             	movzx  edx,dl
c00238c8:	52                   	push   edx
c00238c9:	6a 0c                	push   0xc
c00238cb:	56                   	push   esi
c00238cc:	57                   	push   edi
c00238cd:	e8 c0 ff ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238d2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00238d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00238db:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00238df:	ee                   	out    dx,al
c00238e0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00238e5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00238e9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00238ed:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00238f1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00238f9:	83 c4 2c             	add    esp,0x2c
c00238fc:	5b                   	pop    ebx
c00238fd:	5e                   	pop    esi
c00238fe:	5f                   	pop    edi
c00238ff:	5d                   	pop    ebp
c0023900:	eb 90                	jmp    c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023902:	80 fb 07             	cmp    bl,0x7
c0023905:	77 12                	ja     c0023919 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023907:	0f b6 d2             	movzx  edx,dl
c002390a:	0f b6 db             	movzx  ebx,bl
c002390d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023915:	89 da                	mov    edx,ebx
c0023917:	eb 2f                	jmp    c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023919:	80 fb 0d             	cmp    bl,0xd
c002391c:	77 13                	ja     c0023931 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002391e:	0f b6 d2             	movzx  edx,dl
c0023921:	0f b6 db             	movzx  ebx,bl
c0023924:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002392b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002392f:	eb 17                	jmp    c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023931:	80 fb 15             	cmp    bl,0x15
c0023934:	77 13                	ja     c0023949 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023936:	0f b6 d2             	movzx  edx,dl
c0023939:	0f b6 db             	movzx  ebx,bl
c002393c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023944:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023948:	ee                   	out    dx,al
c0023949:	83 c4 1c             	add    esp,0x1c
c002394c:	5b                   	pop    ebx
c002394d:	5e                   	pop    esi
c002394e:	5f                   	pop    edi
c002394f:	5d                   	pop    ebp
c0023950:	c3                   	ret    
c0023951:	90                   	nop

c0023952 <IDE::read(unsigned char, unsigned char)>:
c0023952:	55                   	push   ebp
c0023953:	57                   	push   edi
c0023954:	56                   	push   esi
c0023955:	53                   	push   ebx
c0023956:	83 ec 1c             	sub    esp,0x1c
c0023959:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002395d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023961:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023964:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023968:	3c 03                	cmp    al,0x3
c002396a:	77 43                	ja     c00239af <IDE::read(unsigned char, unsigned char)+0x5d>
c002396c:	0f b6 f2             	movzx  esi,dl
c002396f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023972:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023976:	83 c8 80             	or     eax,0xffffff80
c0023979:	0f b6 c0             	movzx  eax,al
c002397c:	50                   	push   eax
c002397d:	6a 0c                	push   0xc
c002397f:	56                   	push   esi
c0023980:	57                   	push   edi
c0023981:	e8 0c ff ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023986:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002398b:	0f b6 c3             	movzx  eax,bl
c002398e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023992:	ec                   	in     al,dx
c0023993:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023997:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002399c:	52                   	push   edx
c002399d:	6a 0c                	push   0xc
c002399f:	56                   	push   esi
c00239a0:	57                   	push   edi
c00239a1:	e8 ec fe ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239a6:	83 c4 20             	add    esp,0x20
c00239a9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00239ad:	eb 49                	jmp    c00239f8 <IDE::read(unsigned char, unsigned char)+0xa6>
c00239af:	80 fb 07             	cmp    bl,0x7
c00239b2:	77 12                	ja     c00239c6 <IDE::read(unsigned char, unsigned char)+0x74>
c00239b4:	0f b6 d2             	movzx  edx,dl
c00239b7:	0f b6 c3             	movzx  eax,bl
c00239ba:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00239c2:	89 c2                	mov    edx,eax
c00239c4:	eb 31                	jmp    c00239f7 <IDE::read(unsigned char, unsigned char)+0xa5>
c00239c6:	80 fb 0d             	cmp    bl,0xd
c00239c9:	77 13                	ja     c00239de <IDE::read(unsigned char, unsigned char)+0x8c>
c00239cb:	0f b6 d2             	movzx  edx,dl
c00239ce:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00239d5:	0f b6 d3             	movzx  edx,bl
c00239d8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00239dc:	eb 19                	jmp    c00239f7 <IDE::read(unsigned char, unsigned char)+0xa5>
c00239de:	31 c0                	xor    eax,eax
c00239e0:	80 fb 15             	cmp    bl,0x15
c00239e3:	77 13                	ja     c00239f8 <IDE::read(unsigned char, unsigned char)+0xa6>
c00239e5:	0f b6 d2             	movzx  edx,dl
c00239e8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00239f0:	0f b6 d3             	movzx  edx,bl
c00239f3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00239f7:	ec                   	in     al,dx
c00239f8:	83 c4 1c             	add    esp,0x1c
c00239fb:	5b                   	pop    ebx
c00239fc:	5e                   	pop    esi
c00239fd:	5f                   	pop    edi
c00239fe:	5d                   	pop    ebp
c00239ff:	c3                   	ret    

c0023a00 <IDE::waitInterrupt(unsigned char)>:
c0023a00:	55                   	push   ebp
c0023a01:	57                   	push   edi
c0023a02:	56                   	push   esi
c0023a03:	53                   	push   ebx
c0023a04:	31 db                	xor    ebx,ebx
c0023a06:	83 ec 0c             	sub    esp,0xc
c0023a09:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023a0d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023a12:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023a1a:	89 e8                	mov    eax,ebp
c0023a1c:	84 c0                	test   al,al
c0023a1e:	75 34                	jne    c0023a54 <IDE::waitInterrupt(unsigned char)+0x54>
c0023a20:	52                   	push   edx
c0023a21:	6a 0c                	push   0xc
c0023a23:	56                   	push   esi
c0023a24:	57                   	push   edi
c0023a25:	e8 28 ff ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c0023a2a:	83 c4 10             	add    esp,0x10
c0023a2d:	a8 01                	test   al,0x1
c0023a2f:	75 2b                	jne    c0023a5c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023a31:	f6 c3 04             	test   bl,0x4
c0023a34:	75 16                	jne    c0023a4c <IDE::waitInterrupt(unsigned char)+0x4c>
c0023a36:	83 fb 32             	cmp    ebx,0x32
c0023a39:	7e 11                	jle    c0023a4c <IDE::waitInterrupt(unsigned char)+0x4c>
c0023a3b:	50                   	push   eax
c0023a3c:	50                   	push   eax
c0023a3d:	6a 00                	push   0x0
c0023a3f:	68 80 96 98 00       	push   0x989680
c0023a44:	e8 6c a9 ff ff       	call   c001e3b5 <nanoSleep(unsigned long long)>
c0023a49:	83 c4 10             	add    esp,0x10
c0023a4c:	83 fb 3c             	cmp    ebx,0x3c
c0023a4f:	74 0b                	je     c0023a5c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023a51:	43                   	inc    ebx
c0023a52:	eb be                	jmp    c0023a12 <IDE::waitInterrupt(unsigned char)+0x12>
c0023a54:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023a5c:	83 c4 0c             	add    esp,0xc
c0023a5f:	89 e8                	mov    eax,ebp
c0023a61:	5b                   	pop    ebx
c0023a62:	5e                   	pop    esi
c0023a63:	5f                   	pop    edi
c0023a64:	5d                   	pop    ebp
c0023a65:	c3                   	ret    

c0023a66 <ideChannel0IRQHandler(regs*, void*)>:
c0023a66:	83 ec 10             	sub    esp,0x10
c0023a69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a6d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023a74:	6a 07                	push   0x7
c0023a76:	6a 00                	push   0x0
c0023a78:	50                   	push   eax
c0023a79:	e8 d4 fe ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c0023a7e:	83 c4 1c             	add    esp,0x1c
c0023a81:	c3                   	ret    

c0023a82 <ideChannel1IRQHandler(regs*, void*)>:
c0023a82:	83 ec 10             	sub    esp,0x10
c0023a85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a89:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023a90:	6a 07                	push   0x7
c0023a92:	6a 01                	push   0x1
c0023a94:	50                   	push   eax
c0023a95:	e8 b8 fe ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c0023a9a:	83 c4 1c             	add    esp,0x1c
c0023a9d:	c3                   	ret    

c0023a9e <IDE::enableIRQs(unsigned char, bool)>:
c0023a9e:	57                   	push   edi
c0023a9f:	56                   	push   esi
c0023aa0:	be 04 00 00 00       	mov    esi,0x4
c0023aa5:	53                   	push   ebx
c0023aa6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023aab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023aaf:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023ab4:	0f 94 c0             	sete   al
c0023ab7:	d1 e0                	shl    eax,1
c0023ab9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023ac0:	0f b6 c0             	movzx  eax,al
c0023ac3:	50                   	push   eax
c0023ac4:	6a 0c                	push   0xc
c0023ac6:	57                   	push   edi
c0023ac7:	53                   	push   ebx
c0023ac8:	e8 c5 fd ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023acd:	83 c4 10             	add    esp,0x10
c0023ad0:	50                   	push   eax
c0023ad1:	6a 0c                	push   0xc
c0023ad3:	57                   	push   edi
c0023ad4:	53                   	push   ebx
c0023ad5:	e8 78 fe ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c0023ada:	83 c4 10             	add    esp,0x10
c0023add:	4e                   	dec    esi
c0023ade:	75 f0                	jne    c0023ad0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023ae0:	5b                   	pop    ebx
c0023ae1:	5e                   	pop    esi
c0023ae2:	5f                   	pop    edi
c0023ae3:	c3                   	ret    

c0023ae4 <IDE::open(int, int, void*)>:
c0023ae4:	55                   	push   ebp
c0023ae5:	57                   	push   edi
c0023ae6:	56                   	push   esi
c0023ae7:	53                   	push   ebx
c0023ae8:	83 ec 1c             	sub    esp,0x1c
c0023aeb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023aef:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023af8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023b01:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023b08:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023b0f:	0f 85 b0 02 00 00    	jne    c0023dc5 <IDE::open(int, int, void*)+0x2e1>
c0023b15:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023b1b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023b1f:	83 e0 7f             	and    eax,0x7f
c0023b22:	3c 05                	cmp    al,0x5
c0023b24:	74 04                	je     c0023b2a <IDE::open(int, int, void*)+0x46>
c0023b26:	3c 0f                	cmp    al,0xf
c0023b28:	75 32                	jne    c0023b5c <IDE::open(int, int, void*)+0x78>
c0023b2a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023b30:	83 e0 fc             	and    eax,0xfffffffc
c0023b33:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023b3a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023b40:	83 e0 fc             	and    eax,0xfffffffc
c0023b43:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023b4a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023b50:	83 e0 fc             	and    eax,0xfffffffc
c0023b53:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023b5a:	eb 14                	jmp    c0023b70 <IDE::open(int, int, void*)+0x8c>
c0023b5c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023b66:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023b70:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023b77:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023b7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023b82:	89 c6                	mov    esi,eax
c0023b84:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023b89:	c1 e6 10             	shl    esi,0x10
c0023b8c:	89 e8                	mov    eax,ebp
c0023b8e:	89 fa                	mov    edx,edi
c0023b90:	c1 e0 0b             	shl    eax,0xb
c0023b93:	09 f0                	or     eax,esi
c0023b95:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023b9c:	c1 e6 08             	shl    esi,0x8
c0023b9f:	09 c6                	or     esi,eax
c0023ba1:	89 f0                	mov    eax,esi
c0023ba3:	0d 08 00 00 80       	or     eax,0x80000008
c0023ba8:	ef                   	out    dx,eax
c0023ba9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023bae:	89 ca                	mov    edx,ecx
c0023bb0:	ed                   	in     eax,dx
c0023bb1:	c1 e8 10             	shr    eax,0x10
c0023bb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0023bb9:	0f 84 f5 00 00 00    	je     c0023cb4 <IDE::open(int, int, void*)+0x1d0>
c0023bbf:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023bc5:	89 fa                	mov    edx,edi
c0023bc7:	89 f0                	mov    eax,esi
c0023bc9:	ef                   	out    dx,eax
c0023bca:	b0 fe                	mov    al,0xfe
c0023bcc:	89 ca                	mov    edx,ecx
c0023bce:	ee                   	out    dx,al
c0023bcf:	89 f0                	mov    eax,esi
c0023bd1:	89 fa                	mov    edx,edi
c0023bd3:	ef                   	out    dx,eax
c0023bd4:	89 ca                	mov    edx,ecx
c0023bd6:	ed                   	in     eax,dx
c0023bd7:	3c fe                	cmp    al,0xfe
c0023bd9:	0f 85 a9 00 00 00    	jne    c0023c88 <IDE::open(int, int, void*)+0x1a4>
c0023bdf:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c0023be5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023bec:	74 33                	je     c0023c21 <IDE::open(int, int, void*)+0x13d>
c0023bee:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023bf4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023bf8:	40                   	inc    eax
c0023bf9:	83 ec 0c             	sub    esp,0xc
c0023bfc:	0f b6 c0             	movzx  eax,al
c0023bff:	50                   	push   eax
c0023c00:	55                   	push   ebp
c0023c01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023c05:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023c0b:	51                   	push   ecx
c0023c0c:	e8 a1 41 ff ff       	call   c0017db2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023c11:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023c16:	83 c4 1c             	add    esp,0x1c
c0023c19:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023c1f:	eb 0a                	jmp    c0023c2b <IDE::open(int, int, void*)+0x147>
c0023c21:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023c2b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023c32:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023c39:	c1 e1 10             	shl    ecx,0x10
c0023c3c:	c1 e0 08             	shl    eax,0x8
c0023c3f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023c44:	09 c1                	or     ecx,eax
c0023c46:	89 fa                	mov    edx,edi
c0023c48:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023c4f:	c1 e0 0b             	shl    eax,0xb
c0023c52:	09 c1                	or     ecx,eax
c0023c54:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023c5a:	89 c8                	mov    eax,ecx
c0023c5c:	ef                   	out    dx,eax
c0023c5d:	be fc 0c 00 00       	mov    esi,0xcfc
c0023c62:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023c68:	89 f2                	mov    edx,esi
c0023c6a:	ee                   	out    dx,al
c0023c6b:	89 c8                	mov    eax,ecx
c0023c6d:	89 fa                	mov    edx,edi
c0023c6f:	ef                   	out    dx,eax
c0023c70:	89 f2                	mov    edx,esi
c0023c72:	ed                   	in     eax,dx
c0023c73:	0f b6 c0             	movzx  eax,al
c0023c76:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023c7c:	74 46                	je     c0023cc4 <IDE::open(int, int, void*)+0x1e0>
c0023c7e:	83 ec 0c             	sub    esp,0xc
c0023c81:	68 2c d5 02 c0       	push   0xc002d52c
c0023c86:	eb 34                	jmp    c0023cbc <IDE::open(int, int, void*)+0x1d8>
c0023c88:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023c91:	75 17                	jne    c0023caa <IDE::open(int, int, void*)+0x1c6>
c0023c93:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023c98:	74 07                	je     c0023ca1 <IDE::open(int, int, void*)+0x1bd>
c0023c9a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023c9f:	75 09                	jne    c0023caa <IDE::open(int, int, void*)+0x1c6>
c0023ca1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023ca8:	eb 1a                	jmp    c0023cc4 <IDE::open(int, int, void*)+0x1e0>
c0023caa:	83 ec 0c             	sub    esp,0xc
c0023cad:	68 34 d5 02 c0       	push   0xc002d534
c0023cb2:	eb 08                	jmp    c0023cbc <IDE::open(int, int, void*)+0x1d8>
c0023cb4:	83 ec 0c             	sub    esp,0xc
c0023cb7:	68 65 d5 02 c0       	push   0xc002d565
c0023cbc:	e8 3e 66 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0023cc1:	83 c4 10             	add    esp,0x10
c0023cc4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023ccb:	79 1a                	jns    c0023ce7 <IDE::open(int, int, void*)+0x203>
c0023ccd:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023cd3:	83 e0 fc             	and    eax,0xfffffffc
c0023cd6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023cdd:	83 c0 08             	add    eax,0x8
c0023ce0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023ce7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023ced:	89 c2                	mov    edx,eax
c0023cef:	83 e2 0f             	and    edx,0xf
c0023cf2:	66 83 fa 08          	cmp    dx,0x8
c0023cf6:	75 0a                	jne    c0023d02 <IDE::open(int, int, void*)+0x21e>
c0023cf8:	83 e8 02             	sub    eax,0x2
c0023cfb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023d02:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023d08:	89 c2                	mov    edx,eax
c0023d0a:	83 e2 0f             	and    edx,0xf
c0023d0d:	66 83 fa 08          	cmp    dx,0x8
c0023d11:	75 0a                	jne    c0023d1d <IDE::open(int, int, void*)+0x239>
c0023d13:	83 e8 02             	sub    eax,0x2
c0023d16:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023d1d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023d24:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023d2b:	89 d0                	mov    eax,edx
c0023d2d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d30:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d34:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023d38:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023d3b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d40:	0f b6 c9             	movzx  ecx,cl
c0023d43:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023d4a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023d4d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023d51:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023d55:	8d 50 02             	lea    edx,[eax+0x2]
c0023d58:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023d5d:	0f b6 d2             	movzx  edx,dl
c0023d60:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023d66:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d69:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d6d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023d71:	8d 48 03             	lea    ecx,[eax+0x3]
c0023d74:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d79:	0f b6 c9             	movzx  ecx,cl
c0023d7c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023d82:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023d85:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023d89:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023d8d:	8d 50 04             	lea    edx,[eax+0x4]
c0023d90:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023d96:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023d9b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023da2:	66 85 f6             	test   si,si
c0023da5:	74 3e                	je     c0023de5 <IDE::open(int, int, void*)+0x301>
c0023da7:	0f b6 d2             	movzx  edx,dl
c0023daa:	83 c0 05             	add    eax,0x5
c0023dad:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023db0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023db4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023db8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023dbe:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023dc3:	eb 20                	jmp    c0023de5 <IDE::open(int, int, void*)+0x301>
c0023dc5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023dcf:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023dd9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023de0:	e9 02 ff ff ff       	jmp    c0023ce7 <IDE::open(int, int, void*)+0x203>
c0023de5:	52                   	push   edx
c0023de6:	52                   	push   edx
c0023de7:	6a 00                	push   0x0
c0023de9:	53                   	push   ebx
c0023dea:	e8 7d fa ff ff       	call   c002386c <IDE::prepareInterrupt(unsigned char)>
c0023def:	59                   	pop    ecx
c0023df0:	5e                   	pop    esi
c0023df1:	6a 01                	push   0x1
c0023df3:	53                   	push   ebx
c0023df4:	e8 73 fa ff ff       	call   c002386c <IDE::prepareInterrupt(unsigned char)>
c0023df9:	83 c4 0c             	add    esp,0xc
c0023dfc:	6a 00                	push   0x0
c0023dfe:	6a 00                	push   0x0
c0023e00:	53                   	push   ebx
c0023e01:	e8 98 fc ff ff       	call   c0023a9e <IDE::enableIRQs(unsigned char, bool)>
c0023e06:	83 c4 0c             	add    esp,0xc
c0023e09:	6a 00                	push   0x0
c0023e0b:	6a 01                	push   0x1
c0023e0d:	53                   	push   ebx
c0023e0e:	e8 8b fc ff ff       	call   c0023a9e <IDE::enableIRQs(unsigned char, bool)>
c0023e13:	83 c4 10             	add    esp,0x10
c0023e16:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023e1d:	74 40                	je     c0023e5f <IDE::open(int, int, void*)+0x37b>
c0023e1f:	83 ec 0c             	sub    esp,0xc
c0023e22:	68 8f d5 02 c0       	push   0xc002d58f
c0023e27:	e8 9d ea fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0023e2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e2f:	6a 01                	push   0x1
c0023e31:	68 66 3a 02 c0       	push   0xc0023a66
c0023e36:	6a 0e                	push   0xe
c0023e38:	53                   	push   ebx
c0023e39:	e8 3c fe fe ff       	call   c0013c7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e3e:	83 c4 14             	add    esp,0x14
c0023e41:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023e47:	53                   	push   ebx
c0023e48:	6a 01                	push   0x1
c0023e4a:	68 82 3a 02 c0       	push   0xc0023a82
c0023e4f:	6a 0f                	push   0xf
c0023e51:	53                   	push   ebx
c0023e52:	e8 23 fe fe ff       	call   c0013c7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e57:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023e5d:	eb 4a                	jmp    c0023ea9 <IDE::open(int, int, void*)+0x3c5>
c0023e5f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023e69:	50                   	push   eax
c0023e6a:	6a 0f                	push   0xf
c0023e6c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023e72:	68 ab d5 02 c0       	push   0xc002d5ab
c0023e77:	e8 4d ea fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0023e7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e7f:	6a 00                	push   0x0
c0023e81:	68 66 3a 02 c0       	push   0xc0023a66
c0023e86:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023e8c:	53                   	push   ebx
c0023e8d:	e8 e8 fd fe ff       	call   c0013c7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e92:	83 c4 14             	add    esp,0x14
c0023e95:	53                   	push   ebx
c0023e96:	6a 00                	push   0x0
c0023e98:	68 82 3a 02 c0       	push   0xc0023a82
c0023e9d:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023ea3:	53                   	push   ebx
c0023ea4:	e8 d1 fd fe ff       	call   c0013c7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023ea9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023eab:	83 c4 20             	add    esp,0x20
c0023eae:	83 ec 0c             	sub    esp,0xc
c0023eb1:	53                   	push   ebx
c0023eb2:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023eb5:	83 c4 0c             	add    esp,0xc
c0023eb8:	6a 07                	push   0x7
c0023eba:	6a 00                	push   0x0
c0023ebc:	53                   	push   ebx
c0023ebd:	e8 90 fa ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c0023ec2:	83 c4 0c             	add    esp,0xc
c0023ec5:	6a 07                	push   0x7
c0023ec7:	6a 01                	push   0x1
c0023ec9:	53                   	push   ebx
c0023eca:	e8 83 fa ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c0023ecf:	83 c4 0c             	add    esp,0xc
c0023ed2:	6a 01                	push   0x1
c0023ed4:	6a 00                	push   0x0
c0023ed6:	53                   	push   ebx
c0023ed7:	e8 c2 fb ff ff       	call   c0023a9e <IDE::enableIRQs(unsigned char, bool)>
c0023edc:	83 c4 0c             	add    esp,0xc
c0023edf:	6a 01                	push   0x1
c0023ee1:	6a 01                	push   0x1
c0023ee3:	53                   	push   ebx
c0023ee4:	e8 b5 fb ff ff       	call   c0023a9e <IDE::enableIRQs(unsigned char, bool)>
c0023ee9:	83 c4 2c             	add    esp,0x2c
c0023eec:	31 c0                	xor    eax,eax
c0023eee:	5b                   	pop    ebx
c0023eef:	5e                   	pop    esi
c0023ef0:	5f                   	pop    edi
c0023ef1:	5d                   	pop    ebp
c0023ef2:	c3                   	ret    
c0023ef3:	90                   	nop

c0023ef4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023ef4:	55                   	push   ebp
c0023ef5:	57                   	push   edi
c0023ef6:	56                   	push   esi
c0023ef7:	53                   	push   ebx
c0023ef8:	83 ec 1c             	sub    esp,0x1c
c0023efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023eff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023f03:	8d 50 f8             	lea    edx,[eax-0x8]
c0023f06:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023f0a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023f0e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023f12:	80 fa 03             	cmp    dl,0x3
c0023f15:	77 5d                	ja     c0023f74 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023f17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023f1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023f1f:	0f b6 db             	movzx  ebx,bl
c0023f22:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023f25:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023f29:	83 ca 80             	or     edx,0xffffff80
c0023f2c:	0f b6 d2             	movzx  edx,dl
c0023f2f:	52                   	push   edx
c0023f30:	6a 0c                	push   0xc
c0023f32:	53                   	push   ebx
c0023f33:	56                   	push   esi
c0023f34:	e8 59 f9 ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f39:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023f3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f42:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023f46:	0f b6 c0             	movzx  eax,al
c0023f49:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023f4d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023f4f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023f54:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023f58:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023f5c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023f60:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023f68:	83 c4 2c             	add    esp,0x2c
c0023f6b:	5b                   	pop    ebx
c0023f6c:	5e                   	pop    esi
c0023f6d:	5f                   	pop    edi
c0023f6e:	5d                   	pop    ebp
c0023f6f:	e9 1e f9 ff ff       	jmp    c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f74:	3c 07                	cmp    al,0x7
c0023f76:	77 10                	ja     c0023f88 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023f78:	0f b6 db             	movzx  ebx,bl
c0023f7b:	0f b6 d0             	movzx  edx,al
c0023f7e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023f86:	eb 2d                	jmp    c0023fb5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023f88:	3c 0d                	cmp    al,0xd
c0023f8a:	77 13                	ja     c0023f9f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023f8c:	0f b6 db             	movzx  ebx,bl
c0023f8f:	0f b6 c0             	movzx  eax,al
c0023f92:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023f99:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023f9d:	eb 16                	jmp    c0023fb5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023f9f:	3c 15                	cmp    al,0x15
c0023fa1:	77 14                	ja     c0023fb7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023fa3:	0f b6 db             	movzx  ebx,bl
c0023fa6:	0f b6 c0             	movzx  eax,al
c0023fa9:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023fb1:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023fb5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023fb7:	83 c4 1c             	add    esp,0x1c
c0023fba:	5b                   	pop    ebx
c0023fbb:	5e                   	pop    esi
c0023fbc:	5f                   	pop    edi
c0023fbd:	5d                   	pop    ebp
c0023fbe:	c3                   	ret    
c0023fbf:	90                   	nop

c0023fc0 <IDE::detect()>:
c0023fc0:	55                   	push   ebp
c0023fc1:	57                   	push   edi
c0023fc2:	56                   	push   esi
c0023fc3:	53                   	push   ebx
c0023fc4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023fca:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023fd1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023fd8:	0f 85 be 02 00 00    	jne    c002429c <IDE::detect()+0x2dc>
c0023fde:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023fe5:	31 f6                	xor    esi,esi
c0023fe7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023fef:	31 ed                	xor    ebp,ebp
c0023ff1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023ff5:	c1 e0 06             	shl    eax,0x6
c0023ff8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0024000:	89 e8                	mov    eax,ebp
c0024002:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0024006:	c1 e0 04             	shl    eax,0x4
c0024009:	83 c8 a0             	or     eax,0xffffffa0
c002400c:	0f b6 c0             	movzx  eax,al
c002400f:	50                   	push   eax
c0024010:	6a 06                	push   0x6
c0024012:	56                   	push   esi
c0024013:	53                   	push   ebx
c0024014:	e8 79 f8 ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024019:	83 c4 0c             	add    esp,0xc
c002401c:	6a 0c                	push   0xc
c002401e:	56                   	push   esi
c002401f:	53                   	push   ebx
c0024020:	e8 2d f9 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c0024025:	83 c4 0c             	add    esp,0xc
c0024028:	6a 0c                	push   0xc
c002402a:	56                   	push   esi
c002402b:	53                   	push   ebx
c002402c:	e8 21 f9 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c0024031:	83 c4 0c             	add    esp,0xc
c0024034:	6a 0c                	push   0xc
c0024036:	56                   	push   esi
c0024037:	53                   	push   ebx
c0024038:	e8 15 f9 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c002403d:	83 c4 0c             	add    esp,0xc
c0024040:	6a 0c                	push   0xc
c0024042:	56                   	push   esi
c0024043:	53                   	push   ebx
c0024044:	e8 09 f9 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c0024049:	68 ec 00 00 00       	push   0xec
c002404e:	6a 07                	push   0x7
c0024050:	56                   	push   esi
c0024051:	53                   	push   ebx
c0024052:	e8 3b f8 ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024057:	83 c4 1c             	add    esp,0x1c
c002405a:	6a 0c                	push   0xc
c002405c:	56                   	push   esi
c002405d:	53                   	push   ebx
c002405e:	e8 ef f8 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c0024063:	83 c4 0c             	add    esp,0xc
c0024066:	6a 0c                	push   0xc
c0024068:	56                   	push   esi
c0024069:	53                   	push   ebx
c002406a:	e8 e3 f8 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c002406f:	83 c4 0c             	add    esp,0xc
c0024072:	6a 0c                	push   0xc
c0024074:	56                   	push   esi
c0024075:	53                   	push   ebx
c0024076:	e8 d7 f8 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c002407b:	83 c4 0c             	add    esp,0xc
c002407e:	6a 0c                	push   0xc
c0024080:	56                   	push   esi
c0024081:	53                   	push   ebx
c0024082:	e8 cb f8 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c0024087:	83 c4 0c             	add    esp,0xc
c002408a:	6a 0c                	push   0xc
c002408c:	56                   	push   esi
c002408d:	53                   	push   ebx
c002408e:	e8 bf f8 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c0024093:	83 c4 10             	add    esp,0x10
c0024096:	84 c0                	test   al,al
c0024098:	0f 84 8b 01 00 00    	je     c0024229 <IDE::detect()+0x269>
c002409e:	31 ff                	xor    edi,edi
c00240a0:	50                   	push   eax
c00240a1:	6a 0c                	push   0xc
c00240a3:	56                   	push   esi
c00240a4:	53                   	push   ebx
c00240a5:	e8 a8 f8 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c00240aa:	83 c4 10             	add    esp,0x10
c00240ad:	a8 01                	test   al,0x1
c00240af:	0f 85 8e 01 00 00    	jne    c0024243 <IDE::detect()+0x283>
c00240b5:	84 c0                	test   al,al
c00240b7:	78 04                	js     c00240bd <IDE::detect()+0xfd>
c00240b9:	a8 08                	test   al,0x8
c00240bb:	75 27                	jne    c00240e4 <IDE::detect()+0x124>
c00240bd:	47                   	inc    edi
c00240be:	81 ff 17 01 00 00    	cmp    edi,0x117
c00240c4:	7e da                	jle    c00240a0 <IDE::detect()+0xe0>
c00240c6:	50                   	push   eax
c00240c7:	50                   	push   eax
c00240c8:	6a 00                	push   0x0
c00240ca:	68 40 4b 4c 00       	push   0x4c4b40
c00240cf:	e8 e1 a2 ff ff       	call   c001e3b5 <nanoSleep(unsigned long long)>
c00240d4:	83 c4 10             	add    esp,0x10
c00240d7:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00240dd:	75 c1                	jne    c00240a0 <IDE::detect()+0xe0>
c00240df:	e9 5f 01 00 00       	jmp    c0024243 <IDE::detect()+0x283>
c00240e4:	31 c9                	xor    ecx,ecx
c00240e6:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00240ea:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00240ee:	83 ec 0c             	sub    esp,0xc
c00240f1:	68 80 00 00 00       	push   0x80
c00240f6:	57                   	push   edi
c00240f7:	6a 00                	push   0x0
c00240f9:	56                   	push   esi
c00240fa:	53                   	push   ebx
c00240fb:	e8 f4 fd ff ff       	call   c0023ef4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0024100:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0024105:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024109:	89 d1                	mov    ecx,edx
c002410b:	c1 e0 06             	shl    eax,0x6
c002410e:	01 d8                	add    eax,ebx
c0024110:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0024117:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002411e:	89 f2                	mov    edx,esi
c0024120:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0024126:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002412a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0024130:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024134:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002413b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024143:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002414a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024152:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0024158:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002415f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0024165:	8d 54 24 58          	lea    edx,[esp+0x58]
c0024169:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002416d:	83 c4 20             	add    esp,0x20
c0024170:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024173:	83 c0 02             	add    eax,0x2
c0024176:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002417c:	83 c7 02             	add    edi,0x2
c002417f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024182:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0024188:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002418c:	75 e2                	jne    c0024170 <IDE::detect()+0x1b0>
c002418e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024192:	c1 e0 06             	shl    eax,0x6
c0024195:	01 d8                	add    eax,ebx
c0024197:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002419d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00241a4:	66 c1 ea 09          	shr    dx,0x9
c00241a8:	83 e2 01             	and    edx,0x1
c00241ab:	84 c9                	test   cl,cl
c00241ad:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00241b3:	75 2f                	jne    c00241e4 <IDE::detect()+0x224>
c00241b5:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00241bb:	85 c0                	test   eax,eax
c00241bd:	74 66                	je     c0024225 <IDE::detect()+0x265>
c00241bf:	50                   	push   eax
c00241c0:	55                   	push   ebp
c00241c1:	56                   	push   esi
c00241c2:	68 c7 d5 02 c0       	push   0xc002d5c7
c00241c7:	e8 fd e6 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00241cc:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00241d3:	e8 b4 b6 fe ff       	call   c000f88c <malloc>
c00241d8:	89 c7                	mov    edi,eax
c00241da:	89 04 24             	mov    DWORD PTR [esp],eax
c00241dd:	e8 78 06 00 00       	call   c002485a <ATA::ATA()>
c00241e2:	eb 28                	jmp    c002420c <IDE::detect()+0x24c>
c00241e4:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00241ea:	55                   	push   ebp
c00241eb:	56                   	push   esi
c00241ec:	68 f6 d5 02 c0       	push   0xc002d5f6
c00241f1:	e8 d3 e6 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00241f6:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00241fd:	e8 8a b6 fe ff       	call   c000f88c <malloc>
c0024202:	89 c7                	mov    edi,eax
c0024204:	89 04 24             	mov    DWORD PTR [esp],eax
c0024207:	e8 56 0c 00 00       	call   c0024e62 <ATAPI::ATAPI()>
c002420c:	5a                   	pop    edx
c002420d:	59                   	pop    ecx
c002420e:	57                   	push   edi
c002420f:	53                   	push   ebx
c0024210:	e8 ed fa fe ff       	call   c0013d02 <Device::addChild(Device*)>
c0024215:	8b 07                	mov    eax,DWORD PTR [edi]
c0024217:	53                   	push   ebx
c0024218:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002421c:	6a 00                	push   0x0
c002421e:	57                   	push   edi
c002421f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024222:	83 c4 20             	add    esp,0x20
c0024225:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0024229:	4d                   	dec    ebp
c002422a:	74 0a                	je     c0024236 <IDE::detect()+0x276>
c002422c:	bd 01 00 00 00       	mov    ebp,0x1
c0024231:	e9 bb fd ff ff       	jmp    c0023ff1 <IDE::detect()+0x31>
c0024236:	4e                   	dec    esi
c0024237:	74 63                	je     c002429c <IDE::detect()+0x2dc>
c0024239:	be 01 00 00 00       	mov    esi,0x1
c002423e:	e9 ac fd ff ff       	jmp    c0023fef <IDE::detect()+0x2f>
c0024243:	50                   	push   eax
c0024244:	6a 04                	push   0x4
c0024246:	56                   	push   esi
c0024247:	53                   	push   ebx
c0024248:	e8 05 f7 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c002424d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0024251:	83 c4 0c             	add    esp,0xc
c0024254:	6a 05                	push   0x5
c0024256:	56                   	push   esi
c0024257:	53                   	push   ebx
c0024258:	e8 f5 f6 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c002425d:	83 c4 10             	add    esp,0x10
c0024260:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0024264:	80 fa 14             	cmp    dl,0x14
c0024267:	75 04                	jne    c002426d <IDE::detect()+0x2ad>
c0024269:	3c eb                	cmp    al,0xeb
c002426b:	eb 07                	jmp    c0024274 <IDE::detect()+0x2b4>
c002426d:	3c 96                	cmp    al,0x96
c002426f:	75 b8                	jne    c0024229 <IDE::detect()+0x269>
c0024271:	80 fa 69             	cmp    dl,0x69
c0024274:	75 b3                	jne    c0024229 <IDE::detect()+0x269>
c0024276:	68 a1 00 00 00       	push   0xa1
c002427b:	6a 07                	push   0x7
c002427d:	56                   	push   esi
c002427e:	53                   	push   ebx
c002427f:	e8 0e f6 ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024284:	5f                   	pop    edi
c0024285:	58                   	pop    eax
c0024286:	6a 00                	push   0x0
c0024288:	68 40 42 0f 00       	push   0xf4240
c002428d:	e8 23 a1 ff ff       	call   c001e3b5 <nanoSleep(unsigned long long)>
c0024292:	83 c4 10             	add    esp,0x10
c0024295:	b1 01                	mov    cl,0x1
c0024297:	e9 4a fe ff ff       	jmp    c00240e6 <IDE::detect()+0x126>
c002429c:	81 c4 1c 02 00 00    	add    esp,0x21c
c00242a2:	5b                   	pop    ebx
c00242a3:	5e                   	pop    esi
c00242a4:	5f                   	pop    edi
c00242a5:	5d                   	pop    ebp
c00242a6:	c3                   	ret    
c00242a7:	90                   	nop

c00242a8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00242a8:	55                   	push   ebp
c00242a9:	57                   	push   edi
c00242aa:	56                   	push   esi
c00242ab:	53                   	push   ebx
c00242ac:	83 ec 1c             	sub    esp,0x1c
c00242af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00242b3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00242b7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00242bb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00242bf:	88 c3                	mov    bl,al
c00242c1:	84 c0                	test   al,al
c00242c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00242c7:	0f 84 67 01 00 00    	je     c0024434 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00242cd:	83 ec 0c             	sub    esp,0xc
c00242d0:	68 27 d6 02 c0       	push   0xc002d627
c00242d5:	e8 ef e5 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00242da:	83 c4 10             	add    esp,0x10
c00242dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00242e1:	3c 01                	cmp    al,0x1
c00242e3:	75 17                	jne    c00242fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00242e5:	83 ec 0c             	sub    esp,0xc
c00242e8:	b3 13                	mov    bl,0x13
c00242ea:	68 33 d6 02 c0       	push   0xc002d633
c00242ef:	e8 d5 e5 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00242f4:	83 c4 10             	add    esp,0x10
c00242f7:	e9 25 01 00 00       	jmp    c0024421 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00242fc:	3c 02                	cmp    al,0x2
c00242fe:	0f 85 ef 00 00 00    	jne    c00243f3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0024304:	d1 e6                	shl    esi,1
c0024306:	09 ee                	or     esi,ebp
c0024308:	52                   	push   edx
c0024309:	89 f0                	mov    eax,esi
c002430b:	6a 01                	push   0x1
c002430d:	0f b6 f0             	movzx  esi,al
c0024310:	c1 e6 06             	shl    esi,0x6
c0024313:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002431b:	50                   	push   eax
c002431c:	57                   	push   edi
c002431d:	e8 30 f6 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c0024322:	83 c4 10             	add    esp,0x10
c0024325:	89 c6                	mov    esi,eax
c0024327:	a8 01                	test   al,0x1
c0024329:	74 12                	je     c002433d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002432b:	83 ec 0c             	sub    esp,0xc
c002432e:	b3 07                	mov    bl,0x7
c0024330:	68 48 d6 02 c0       	push   0xc002d648
c0024335:	e8 8f e5 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c002433a:	83 c4 10             	add    esp,0x10
c002433d:	f7 c6 02 00 00 00    	test   esi,0x2
c0024343:	74 12                	je     c0024357 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0024345:	83 ec 0c             	sub    esp,0xc
c0024348:	b3 03                	mov    bl,0x3
c002434a:	68 66 d6 02 c0       	push   0xc002d666
c002434f:	e8 75 e5 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0024354:	83 c4 10             	add    esp,0x10
c0024357:	f7 c6 04 00 00 00    	test   esi,0x4
c002435d:	74 12                	je     c0024371 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c002435f:	83 ec 0c             	sub    esp,0xc
c0024362:	b3 14                	mov    bl,0x14
c0024364:	68 86 d6 02 c0       	push   0xc002d686
c0024369:	e8 5b e5 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c002436e:	83 c4 10             	add    esp,0x10
c0024371:	f7 c6 08 00 00 00    	test   esi,0x8
c0024377:	74 12                	je     c002438b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0024379:	83 ec 0c             	sub    esp,0xc
c002437c:	b3 03                	mov    bl,0x3
c002437e:	68 66 d6 02 c0       	push   0xc002d666
c0024383:	e8 41 e5 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0024388:	83 c4 10             	add    esp,0x10
c002438b:	f7 c6 10 00 00 00    	test   esi,0x10
c0024391:	74 12                	je     c00243a5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024393:	83 ec 0c             	sub    esp,0xc
c0024396:	b3 15                	mov    bl,0x15
c0024398:	68 9e d6 02 c0       	push   0xc002d69e
c002439d:	e8 27 e5 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00243a2:	83 c4 10             	add    esp,0x10
c00243a5:	f7 c6 20 00 00 00    	test   esi,0x20
c00243ab:	74 12                	je     c00243bf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00243ad:	83 ec 0c             	sub    esp,0xc
c00243b0:	b3 03                	mov    bl,0x3
c00243b2:	68 66 d6 02 c0       	push   0xc002d666
c00243b7:	e8 0d e5 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00243bc:	83 c4 10             	add    esp,0x10
c00243bf:	f7 c6 40 00 00 00    	test   esi,0x40
c00243c5:	74 12                	je     c00243d9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00243c7:	83 ec 0c             	sub    esp,0xc
c00243ca:	b3 16                	mov    bl,0x16
c00243cc:	68 b8 d6 02 c0       	push   0xc002d6b8
c00243d1:	e8 f3 e4 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00243d6:	83 c4 10             	add    esp,0x10
c00243d9:	89 f0                	mov    eax,esi
c00243db:	84 c0                	test   al,al
c00243dd:	79 42                	jns    c0024421 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00243df:	83 ec 0c             	sub    esp,0xc
c00243e2:	b3 0d                	mov    bl,0xd
c00243e4:	68 d9 d6 02 c0       	push   0xc002d6d9
c00243e9:	e8 db e4 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00243ee:	83 c4 10             	add    esp,0x10
c00243f1:	eb 2e                	jmp    c0024421 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00243f3:	3c 03                	cmp    al,0x3
c00243f5:	75 14                	jne    c002440b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00243f7:	83 ec 0c             	sub    esp,0xc
c00243fa:	b3 17                	mov    bl,0x17
c00243fc:	68 ed d6 02 c0       	push   0xc002d6ed
c0024401:	e8 c3 e4 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0024406:	83 c4 10             	add    esp,0x10
c0024409:	eb 16                	jmp    c0024421 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002440b:	3c 04                	cmp    al,0x4
c002440d:	75 12                	jne    c0024421 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002440f:	83 ec 0c             	sub    esp,0xc
c0024412:	b3 08                	mov    bl,0x8
c0024414:	68 03 d7 02 c0       	push   0xc002d703
c0024419:	e8 ab e4 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c002441e:	83 c4 10             	add    esp,0x10
c0024421:	50                   	push   eax
c0024422:	50                   	push   eax
c0024423:	0f b6 c3             	movzx  eax,bl
c0024426:	50                   	push   eax
c0024427:	68 1b d7 02 c0       	push   0xc002d71b
c002442c:	e8 98 e4 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0024431:	83 c4 10             	add    esp,0x10
c0024434:	83 c4 1c             	add    esp,0x1c
c0024437:	88 d8                	mov    al,bl
c0024439:	5b                   	pop    ebx
c002443a:	5e                   	pop    esi
c002443b:	5f                   	pop    edi
c002443c:	5d                   	pop    ebp
c002443d:	c3                   	ret    

c002443e <IDE::polling(unsigned char, unsigned int)>:
c002443e:	57                   	push   edi
c002443f:	56                   	push   esi
c0024440:	53                   	push   ebx
c0024441:	bb 04 00 00 00       	mov    ebx,0x4
c0024446:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002444a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002444f:	52                   	push   edx
c0024450:	6a 0c                	push   0xc
c0024452:	56                   	push   esi
c0024453:	57                   	push   edi
c0024454:	e8 f9 f4 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c0024459:	83 c4 10             	add    esp,0x10
c002445c:	4b                   	dec    ebx
c002445d:	75 f0                	jne    c002444f <IDE::polling(unsigned char, unsigned int)+0x11>
c002445f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024464:	50                   	push   eax
c0024465:	6a 0c                	push   0xc
c0024467:	56                   	push   esi
c0024468:	57                   	push   edi
c0024469:	e8 e4 f4 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c002446e:	83 c4 10             	add    esp,0x10
c0024471:	a8 01                	test   al,0x1
c0024473:	74 12                	je     c0024487 <IDE::polling(unsigned char, unsigned int)+0x49>
c0024475:	83 ec 0c             	sub    esp,0xc
c0024478:	68 35 d7 02 c0       	push   0xc002d735
c002447d:	e8 47 e4 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0024482:	83 c4 10             	add    esp,0x10
c0024485:	eb 17                	jmp    c002449e <IDE::polling(unsigned char, unsigned int)+0x60>
c0024487:	a8 20                	test   al,0x20
c0024489:	75 0f                	jne    c002449a <IDE::polling(unsigned char, unsigned int)+0x5c>
c002448b:	4b                   	dec    ebx
c002448c:	74 10                	je     c002449e <IDE::polling(unsigned char, unsigned int)+0x60>
c002448e:	84 c0                	test   al,al
c0024490:	78 d2                	js     c0024464 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024492:	a8 08                	test   al,0x8
c0024494:	74 ce                	je     c0024464 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024496:	31 c0                	xor    eax,eax
c0024498:	eb 06                	jmp    c00244a0 <IDE::polling(unsigned char, unsigned int)+0x62>
c002449a:	b0 01                	mov    al,0x1
c002449c:	eb 02                	jmp    c00244a0 <IDE::polling(unsigned char, unsigned int)+0x62>
c002449e:	b0 02                	mov    al,0x2
c00244a0:	5b                   	pop    ebx
c00244a1:	5e                   	pop    esi
c00244a2:	5f                   	pop    edi
c00244a3:	c3                   	ret    

c00244a4 <SATABus::close(int, int, void*)>:
c00244a4:	31 c0                	xor    eax,eax
c00244a6:	c3                   	ret    
c00244a7:	90                   	nop

c00244a8 <SATABus::detect()>:
c00244a8:	c3                   	ret    
c00244a9:	90                   	nop

c00244aa <SATABus::SATABus()>:
c00244aa:	83 ec 0c             	sub    esp,0xc
c00244ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244b1:	83 ec 08             	sub    esp,0x8
c00244b4:	68 78 d7 02 c0       	push   0xc002d778
c00244b9:	50                   	push   eax
c00244ba:	e8 f1 fb fe ff       	call   c00140b0 <HardDiskController::HardDiskController(char const*)>
c00244bf:	83 c4 10             	add    esp,0x10
c00244c2:	ba 34 d8 02 c0       	mov    edx,0xc002d834
c00244c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244cb:	89 10                	mov    DWORD PTR [eax],edx
c00244cd:	83 ec 0c             	sub    esp,0xc
c00244d0:	6a 50                	push   0x50
c00244d2:	e8 68 b7 fe ff       	call   c000fc3f <Phys::allocateContiguousPages(int)>
c00244d7:	83 c4 10             	add    esp,0x10
c00244da:	89 c2                	mov    edx,eax
c00244dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244e0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00244e6:	83 ec 0c             	sub    esp,0xc
c00244e9:	6a 50                	push   0x50
c00244eb:	e8 d3 cf fe ff       	call   c00114c3 <Virt::allocateKernelVirtualPages(int)>
c00244f0:	83 c4 10             	add    esp,0x10
c00244f3:	89 c2                	mov    edx,eax
c00244f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244f9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00244ff:	a1 30 f4 02 c0       	mov    eax,ds:0xc002f430
c0024504:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024508:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002450e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024512:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024518:	83 ec 0c             	sub    esp,0xc
c002451b:	6a 03                	push   0x3
c002451d:	6a 50                	push   0x50
c002451f:	51                   	push   ecx
c0024520:	52                   	push   edx
c0024521:	50                   	push   eax
c0024522:	e8 c9 da fe ff       	call   c0011ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0024527:	83 c4 20             	add    esp,0x20
c002452a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002452e:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0024534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024538:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002453e:	83 ec 04             	sub    esp,0x4
c0024541:	52                   	push   edx
c0024542:	50                   	push   eax
c0024543:	68 9c d7 02 c0       	push   0xc002d79c
c0024548:	e8 7c e3 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c002454d:	83 c4 10             	add    esp,0x10
c0024550:	90                   	nop
c0024551:	83 c4 0c             	add    esp,0xc
c0024554:	c3                   	ret    
c0024555:	90                   	nop

c0024556 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0024556:	83 ec 0c             	sub    esp,0xc
c0024559:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002455d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024560:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024563:	09 c2                	or     edx,eax
c0024565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024569:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002456f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024571:	31 c0                	xor    eax,eax
c0024573:	c1 e9 08             	shr    ecx,0x8
c0024576:	83 e1 0f             	and    ecx,0xf
c0024579:	39 c8                	cmp    eax,ecx
c002457b:	74 0a                	je     c0024587 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002457d:	f6 c2 01             	test   dl,0x1
c0024580:	74 18                	je     c002459a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024582:	d1 ea                	shr    edx,1
c0024584:	40                   	inc    eax
c0024585:	eb f2                	jmp    c0024579 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024587:	83 ec 0c             	sub    esp,0xc
c002458a:	68 c0 d7 02 c0       	push   0xc002d7c0
c002458f:	e8 6b 5d ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0024594:	83 c4 10             	add    esp,0x10
c0024597:	83 c8 ff             	or     eax,0xffffffff
c002459a:	83 c4 0c             	add    esp,0xc
c002459d:	c3                   	ret    

c002459e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002459e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00245a2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00245a5:	89 c2                	mov    edx,eax
c00245a7:	c1 ea 08             	shr    edx,0x8
c00245aa:	83 e2 0f             	and    edx,0xf
c00245ad:	fe ca                	dec    dl
c00245af:	75 31                	jne    c00245e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00245b1:	83 e0 0f             	and    eax,0xf
c00245b4:	3c 03                	cmp    al,0x3
c00245b6:	75 2a                	jne    c00245e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00245b8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00245bb:	b8 02 00 00 00       	mov    eax,0x2
c00245c0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00245c6:	74 1c                	je     c00245e4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00245c8:	b8 04 00 00 00       	mov    eax,0x4
c00245cd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00245d3:	74 0f                	je     c00245e4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00245d5:	31 c0                	xor    eax,eax
c00245d7:	83 fa 03             	cmp    edx,0x3
c00245da:	0f 94 c0             	sete   al
c00245dd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00245e1:	c3                   	ret    
c00245e2:	31 c0                	xor    eax,eax
c00245e4:	c3                   	ret    
c00245e5:	90                   	nop

c00245e6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00245e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00245ea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245ed:	0f ba e2 0f          	bt     edx,0xf
c00245f1:	72 f7                	jb     c00245ea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00245f3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245f6:	83 ca 10             	or     edx,0x10
c00245f9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00245fc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245ff:	83 ca 01             	or     edx,0x1
c0024602:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024605:	c3                   	ret    

c0024606 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002460a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002460d:	83 e2 fe             	and    edx,0xfffffffe
c0024610:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024613:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024616:	83 e2 ef             	and    edx,0xffffffef
c0024619:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002461c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002461f:	0f ba e2 0e          	bt     edx,0xe
c0024623:	72 f7                	jb     c002461c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024625:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024628:	0f ba e2 0f          	bt     edx,0xf
c002462c:	72 ee                	jb     c002461c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002462e:	c3                   	ret    
c002462f:	90                   	nop

c0024630 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024630:	55                   	push   ebp
c0024631:	57                   	push   edi
c0024632:	56                   	push   esi
c0024633:	53                   	push   ebx
c0024634:	83 ec 1c             	sub    esp,0x1c
c0024637:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002463b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002463f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024643:	53                   	push   ebx
c0024644:	89 fd                	mov    ebp,edi
c0024646:	56                   	push   esi
c0024647:	c1 e5 0a             	shl    ebp,0xa
c002464a:	e8 b7 ff ff ff       	call   c0024606 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002464f:	83 ec 0c             	sub    esp,0xc
c0024652:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024658:	01 e8                	add    eax,ebp
c002465a:	89 03                	mov    DWORD PTR [ebx],eax
c002465c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002465e:	68 00 04 00 00       	push   0x400
c0024663:	6a 00                	push   0x0
c0024665:	50                   	push   eax
c0024666:	e8 e5 c0 fd ff       	call   c0000750 <memset>
c002466b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024671:	89 fa                	mov    edx,edi
c0024673:	01 e8                	add    eax,ebp
c0024675:	c1 e7 0d             	shl    edi,0xd
c0024678:	89 03                	mov    DWORD PTR [ebx],eax
c002467a:	c1 e2 08             	shl    edx,0x8
c002467d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024684:	81 c2 00 80 00 00    	add    edx,0x8000
c002468a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002468e:	89 d0                	mov    eax,edx
c0024690:	83 c4 1c             	add    esp,0x1c
c0024693:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024699:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002469c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002469f:	68 00 01 00 00       	push   0x100
c00246a4:	6a 00                	push   0x0
c00246a6:	50                   	push   eax
c00246a7:	e8 a4 c0 fd ff       	call   c0000750 <memset>
c00246ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00246b0:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00246b6:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00246bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00246c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00246c3:	83 c4 10             	add    esp,0x10
c00246c6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00246cd:	31 ff                	xor    edi,edi
c00246cf:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00246d5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00246db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00246df:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00246e5:	83 c5 20             	add    ebp,0x20
c00246e8:	01 f8                	add    eax,edi
c00246ea:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00246ed:	52                   	push   edx
c00246ee:	68 00 01 00 00       	push   0x100
c00246f3:	6a 00                	push   0x0
c00246f5:	50                   	push   eax
c00246f6:	e8 55 c0 fd ff       	call   c0000750 <memset>
c00246fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00246ff:	83 c4 10             	add    esp,0x10
c0024702:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024708:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002470f:	01 f8                	add    eax,edi
c0024711:	81 c7 00 01 00 00    	add    edi,0x100
c0024717:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002471a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024720:	75 b3                	jne    c00246d5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024722:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024726:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002472a:	83 c4 1c             	add    esp,0x1c
c002472d:	5b                   	pop    ebx
c002472e:	5e                   	pop    esi
c002472f:	5f                   	pop    edi
c0024730:	5d                   	pop    ebp
c0024731:	e9 b0 fe ff ff       	jmp    c00245e6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024736 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024736:	55                   	push   ebp
c0024737:	57                   	push   edi
c0024738:	56                   	push   esi
c0024739:	53                   	push   ebx
c002473a:	31 db                	xor    ebx,ebx
c002473c:	83 ec 0c             	sub    esp,0xc
c002473f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024743:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024747:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002474a:	f7 c7 01 00 00 00    	test   edi,0x1
c0024750:	0f 84 aa 00 00 00    	je     c0024800 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024756:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002475a:	89 d8                	mov    eax,ebx
c002475c:	c1 e0 07             	shl    eax,0x7
c002475f:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024766:	55                   	push   ebp
c0024767:	56                   	push   esi
c0024768:	e8 31 fe ff ff       	call   c002459e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002476d:	5a                   	pop    edx
c002476e:	83 f8 01             	cmp    eax,0x1
c0024771:	59                   	pop    ecx
c0024772:	75 30                	jne    c00247a4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024774:	50                   	push   eax
c0024775:	50                   	push   eax
c0024776:	53                   	push   ebx
c0024777:	68 e5 d7 02 c0       	push   0xc002d7e5
c002477c:	e8 48 e1 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0024781:	83 c4 0c             	add    esp,0xc
c0024784:	53                   	push   ebx
c0024785:	55                   	push   ebp
c0024786:	56                   	push   esi
c0024787:	e8 a4 fe ff ff       	call   c0024630 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002478c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024793:	e8 f4 b0 fe ff       	call   c000f88c <malloc>
c0024798:	89 c5                	mov    ebp,eax
c002479a:	89 04 24             	mov    DWORD PTR [esp],eax
c002479d:	e8 24 0d 00 00       	call   c00254c6 <SATA::SATA()>
c00247a2:	eb 33                	jmp    c00247d7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00247a4:	83 f8 04             	cmp    eax,0x4
c00247a7:	75 47                	jne    c00247f0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00247a9:	50                   	push   eax
c00247aa:	50                   	push   eax
c00247ab:	53                   	push   ebx
c00247ac:	68 fc d7 02 c0       	push   0xc002d7fc
c00247b1:	e8 13 e1 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00247b6:	83 c4 0c             	add    esp,0xc
c00247b9:	53                   	push   ebx
c00247ba:	55                   	push   ebp
c00247bb:	56                   	push   esi
c00247bc:	e8 6f fe ff ff       	call   c0024630 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00247c1:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00247c8:	e8 bf b0 fe ff       	call   c000f88c <malloc>
c00247cd:	89 c5                	mov    ebp,eax
c00247cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00247d2:	e8 65 10 00 00       	call   c002583c <SATAPI::SATAPI()>
c00247d7:	5a                   	pop    edx
c00247d8:	59                   	pop    ecx
c00247d9:	55                   	push   ebp
c00247da:	56                   	push   esi
c00247db:	e8 22 f5 fe ff       	call   c0013d02 <Device::addChild(Device*)>
c00247e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00247e3:	56                   	push   esi
c00247e4:	6a 00                	push   0x0
c00247e6:	53                   	push   ebx
c00247e7:	55                   	push   ebp
c00247e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00247eb:	83 c4 20             	add    esp,0x20
c00247ee:	eb 10                	jmp    c0024800 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00247f0:	50                   	push   eax
c00247f1:	50                   	push   eax
c00247f2:	53                   	push   ebx
c00247f3:	68 15 d8 02 c0       	push   0xc002d815
c00247f8:	e8 cc e0 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00247fd:	83 c4 10             	add    esp,0x10
c0024800:	d1 ef                	shr    edi,1
c0024802:	43                   	inc    ebx
c0024803:	83 fb 20             	cmp    ebx,0x20
c0024806:	0f 85 3e ff ff ff    	jne    c002474a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002480c:	83 c4 0c             	add    esp,0xc
c002480f:	5b                   	pop    ebx
c0024810:	5e                   	pop    esi
c0024811:	5f                   	pop    edi
c0024812:	5d                   	pop    ebp
c0024813:	c3                   	ret    

c0024814 <SATABus::open(int, int, void*)>:
c0024814:	83 ec 14             	sub    esp,0x14
c0024817:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002481b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024821:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024827:	52                   	push   edx
c0024828:	50                   	push   eax
c0024829:	e8 08 ff ff ff       	call   c0024736 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002482e:	31 c0                	xor    eax,eax
c0024830:	83 c4 1c             	add    esp,0x1c
c0024833:	c3                   	ret    

c0024834 <ATA::close(int, int, void*)>:
c0024834:	83 ec 0c             	sub    esp,0xc
c0024837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002483b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024841:	85 c0                	test   eax,eax
c0024843:	74 0c                	je     c0024851 <ATA::close(int, int, void*)+0x1d>
c0024845:	83 ec 0c             	sub    esp,0xc
c0024848:	8b 10                	mov    edx,DWORD PTR [eax]
c002484a:	50                   	push   eax
c002484b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002484e:	83 c4 10             	add    esp,0x10
c0024851:	31 c0                	xor    eax,eax
c0024853:	83 c4 0c             	add    esp,0xc
c0024856:	c3                   	ret    
c0024857:	90                   	nop

c0024858 <ATA::powerSaving(PowerSavingLevel)>:
c0024858:	c3                   	ret    
c0024859:	90                   	nop

c002485a <ATA::ATA()>:
c002485a:	83 ec 0c             	sub    esp,0xc
c002485d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024861:	83 ec 04             	sub    esp,0x4
c0024864:	68 00 02 00 00       	push   0x200
c0024869:	68 fd d8 02 c0       	push   0xc002d8fd
c002486e:	50                   	push   eax
c002486f:	e8 d4 f8 fe ff       	call   c0014148 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024874:	83 c4 10             	add    esp,0x10
c0024877:	ba 80 d8 02 c0       	mov    edx,0xc002d880
c002487c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024880:	89 10                	mov    DWORD PTR [eax],edx
c0024882:	90                   	nop
c0024883:	83 c4 0c             	add    esp,0xc
c0024886:	c3                   	ret    
c0024887:	90                   	nop

c0024888 <ATA::flush(bool)>:
c0024888:	53                   	push   ebx
c0024889:	83 ec 08             	sub    esp,0x8
c002488c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024891:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024895:	19 c0                	sbb    eax,eax
c0024897:	83 e0 fd             	and    eax,0xfffffffd
c002489a:	05 ea 00 00 00       	add    eax,0xea
c002489f:	50                   	push   eax
c00248a0:	6a 07                	push   0x7
c00248a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248a9:	50                   	push   eax
c00248aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248b0:	e8 dd ef ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248b5:	83 c4 0c             	add    esp,0xc
c00248b8:	6a 00                	push   0x0
c00248ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248c1:	50                   	push   eax
c00248c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248c8:	e8 71 fb ff ff       	call   c002443e <IDE::polling(unsigned char, unsigned int)>
c00248cd:	83 c4 18             	add    esp,0x18
c00248d0:	5b                   	pop    ebx
c00248d1:	c3                   	ret    

c00248d2 <ATA::readyForCommand()>:
c00248d2:	56                   	push   esi
c00248d3:	53                   	push   ebx
c00248d4:	31 db                	xor    ebx,ebx
c00248d6:	50                   	push   eax
c00248d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00248db:	50                   	push   eax
c00248dc:	6a 0c                	push   0xc
c00248de:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00248e5:	50                   	push   eax
c00248e6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00248ec:	e8 61 f0 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c00248f1:	83 c4 10             	add    esp,0x10
c00248f4:	a8 88                	test   al,0x88
c00248f6:	74 23                	je     c002491b <ATA::readyForCommand()+0x49>
c00248f8:	43                   	inc    ebx
c00248f9:	83 fb 63             	cmp    ebx,0x63
c00248fc:	7e dd                	jle    c00248db <ATA::readyForCommand()+0x9>
c00248fe:	51                   	push   ecx
c00248ff:	51                   	push   ecx
c0024900:	6a 00                	push   0x0
c0024902:	68 40 42 0f 00       	push   0xf4240
c0024907:	e8 a9 9a ff ff       	call   c001e3b5 <nanoSleep(unsigned long long)>
c002490c:	83 c4 10             	add    esp,0x10
c002490f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024915:	75 c4                	jne    c00248db <ATA::readyForCommand()+0x9>
c0024917:	31 c0                	xor    eax,eax
c0024919:	eb 02                	jmp    c002491d <ATA::readyForCommand()+0x4b>
c002491b:	b0 01                	mov    al,0x1
c002491d:	5a                   	pop    edx
c002491e:	5b                   	pop    ebx
c002491f:	5e                   	pop    esi
c0024920:	c3                   	ret    
c0024921:	90                   	nop

c0024922 <ATA::access(unsigned long long, int, void*, bool)>:
c0024922:	55                   	push   ebp
c0024923:	57                   	push   edi
c0024924:	56                   	push   esi
c0024925:	53                   	push   ebx
c0024926:	83 ec 2c             	sub    esp,0x2c
c0024929:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002492d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024931:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024935:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024939:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002493d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024941:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024945:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002494b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002494f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024955:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024959:	c1 e0 06             	shl    eax,0x6
c002495c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024964:	74 5d                	je     c00249c3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024966:	89 fa                	mov    edx,edi
c0024968:	89 f0                	mov    eax,esi
c002496a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002496e:	c1 ea 1c             	shr    edx,0x1c
c0024971:	89 d1                	mov    ecx,edx
c0024973:	09 c1                	or     ecx,eax
c0024975:	74 25                	je     c002499c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024977:	31 ed                	xor    ebp,ebp
c0024979:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024980:	89 fa                	mov    edx,edi
c0024982:	89 f0                	mov    eax,esi
c0024984:	0f ad d0             	shrd   eax,edx,cl
c0024987:	d3 ea                	shr    edx,cl
c0024989:	f6 c1 20             	test   cl,0x20
c002498c:	74 02                	je     c0024990 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002498e:	89 d0                	mov    eax,edx
c0024990:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024994:	45                   	inc    ebp
c0024995:	83 fd 06             	cmp    ebp,0x6
c0024998:	75 df                	jne    c0024979 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002499a:	eb 76                	jmp    c0024a12 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002499c:	89 f0                	mov    eax,esi
c002499e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00249a3:	89 fa                	mov    edx,edi
c00249a5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00249ac:	0f ac d0 10          	shrd   eax,edx,0x10
c00249b0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00249b5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00249b9:	c1 ee 18             	shr    esi,0x18
c00249bc:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00249c1:	eb 56                	jmp    c0024a19 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00249c3:	6a 00                	push   0x0
c00249c5:	6a 3f                	push   0x3f
c00249c7:	57                   	push   edi
c00249c8:	56                   	push   esi
c00249c9:	e8 26 29 00 00       	call   c00272f4 <__umoddi3>
c00249ce:	83 c4 10             	add    esp,0x10
c00249d1:	40                   	inc    eax
c00249d2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00249d6:	6a 00                	push   0x0
c00249d8:	68 f0 03 00 00       	push   0x3f0
c00249dd:	57                   	push   edi
c00249de:	56                   	push   esi
c00249df:	e8 10 28 00 00       	call   c00271f4 <__udivdi3>
c00249e4:	83 c4 10             	add    esp,0x10
c00249e7:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00249ec:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00249f3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00249f8:	6a 00                	push   0x0
c00249fa:	6a 3f                	push   0x3f
c00249fc:	57                   	push   edi
c00249fd:	56                   	push   esi
c00249fe:	e8 f1 27 00 00       	call   c00271f4 <__udivdi3>
c0024a03:	83 c4 10             	add    esp,0x10
c0024a06:	89 c6                	mov    esi,eax
c0024a08:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024a0d:	83 e6 0f             	and    esi,0xf
c0024a10:	eb 07                	jmp    c0024a19 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024a12:	31 f6                	xor    esi,esi
c0024a14:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024a19:	bf 01 00 00 00       	mov    edi,0x1
c0024a1e:	50                   	push   eax
c0024a1f:	6a 00                	push   0x0
c0024a21:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a28:	50                   	push   eax
c0024a29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024a2d:	e8 6c f0 ff ff       	call   c0023a9e <IDE::enableIRQs(unsigned char, bool)>
c0024a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a35:	e8 98 fe ff ff       	call   c00248d2 <ATA::readyForCommand()>
c0024a3a:	83 c4 10             	add    esp,0x10
c0024a3d:	84 c0                	test   al,al
c0024a3f:	0f 84 5a 02 00 00    	je     c0024c9f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024a45:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024a4b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a51:	c1 e0 04             	shl    eax,0x4
c0024a54:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024a5b:	09 c6                	or     esi,eax
c0024a5d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024a62:	75 05                	jne    c0024a69 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024a64:	83 ce a0             	or     esi,0xffffffa0
c0024a67:	eb 03                	jmp    c0024a6c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024a69:	83 ce e0             	or     esi,0xffffffe0
c0024a6c:	89 f0                	mov    eax,esi
c0024a6e:	0f b6 f0             	movzx  esi,al
c0024a71:	56                   	push   esi
c0024a72:	6a 06                	push   0x6
c0024a74:	51                   	push   ecx
c0024a75:	52                   	push   edx
c0024a76:	e8 17 ee ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a7b:	83 c4 10             	add    esp,0x10
c0024a7e:	6a 00                	push   0x0
c0024a80:	6a 01                	push   0x1
c0024a82:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a89:	50                   	push   eax
c0024a8a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a90:	e8 fd ed ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a95:	83 c4 10             	add    esp,0x10
c0024a98:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024a9d:	75 6e                	jne    c0024b0d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024a9f:	6a 00                	push   0x0
c0024aa1:	6a 08                	push   0x8
c0024aa3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024aaa:	50                   	push   eax
c0024aab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ab1:	e8 dc ed ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ab6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024abb:	50                   	push   eax
c0024abc:	6a 09                	push   0x9
c0024abe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ac5:	50                   	push   eax
c0024ac6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024acc:	e8 c1 ed ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ad1:	83 c4 20             	add    esp,0x20
c0024ad4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024ad9:	50                   	push   eax
c0024ada:	6a 0a                	push   0xa
c0024adc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ae3:	50                   	push   eax
c0024ae4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024aea:	e8 a3 ed ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aef:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024af4:	50                   	push   eax
c0024af5:	6a 0b                	push   0xb
c0024af7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024afe:	50                   	push   eax
c0024aff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b05:	e8 88 ed ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b0a:	83 c4 20             	add    esp,0x20
c0024b0d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024b12:	50                   	push   eax
c0024b13:	6a 02                	push   0x2
c0024b15:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b1c:	50                   	push   eax
c0024b1d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b23:	e8 6a ed ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b28:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024b2d:	50                   	push   eax
c0024b2e:	6a 03                	push   0x3
c0024b30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b37:	50                   	push   eax
c0024b38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b3e:	e8 4f ed ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b43:	83 c4 20             	add    esp,0x20
c0024b46:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024b4b:	50                   	push   eax
c0024b4c:	6a 04                	push   0x4
c0024b4e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b55:	50                   	push   eax
c0024b56:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b5c:	e8 31 ed ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b61:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024b66:	50                   	push   eax
c0024b67:	6a 05                	push   0x5
c0024b69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b70:	50                   	push   eax
c0024b71:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b77:	e8 16 ed ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b7c:	83 c4 20             	add    esp,0x20
c0024b7f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024b84:	0f 94 c0             	sete   al
c0024b87:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024b8c:	74 09                	je     c0024b97 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024b8e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024b95:	eb 07                	jmp    c0024b9e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024b97:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024b9e:	0f b6 c0             	movzx  eax,al
c0024ba1:	50                   	push   eax
c0024ba2:	6a 07                	push   0x7
c0024ba4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bab:	50                   	push   eax
c0024bac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bb2:	e8 db ec ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bb7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024bbb:	83 c4 10             	add    esp,0x10
c0024bbe:	85 f6                	test   esi,esi
c0024bc0:	0f 84 ba 00 00 00    	je     c0024c80 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024bc6:	50                   	push   eax
c0024bc7:	6a 01                	push   0x1
c0024bc9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bd0:	50                   	push   eax
c0024bd1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bd7:	e8 62 f8 ff ff       	call   c002443e <IDE::polling(unsigned char, unsigned int)>
c0024bdc:	83 c4 10             	add    esp,0x10
c0024bdf:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024be5:	84 c0                	test   al,al
c0024be7:	74 2c                	je     c0024c15 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024be9:	0f b6 f8             	movzx  edi,al
c0024bec:	0f b6 d2             	movzx  edx,dl
c0024bef:	57                   	push   edi
c0024bf0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024bf7:	50                   	push   eax
c0024bf8:	52                   	push   edx
c0024bf9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bff:	e8 a4 f6 ff ff       	call   c00242a8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024c04:	c7 04 24 58 d8 02 c0 	mov    DWORD PTR [esp],0xc002d858
c0024c0b:	e8 b9 dc fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0024c10:	e9 87 00 00 00       	jmp    c0024c9c <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024c15:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024c1a:	74 33                	je     c0024c4f <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024c1c:	31 ed                	xor    ebp,ebp
c0024c1e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024c22:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024c26:	50                   	push   eax
c0024c27:	50                   	push   eax
c0024c28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c2f:	50                   	push   eax
c0024c30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c36:	e8 45 ec ff ff       	call   c0023880 <IDE::getBase(unsigned char)>
c0024c3b:	89 c2                	mov    edx,eax
c0024c3d:	89 f8                	mov    eax,edi
c0024c3f:	66 ef                	out    dx,ax
c0024c41:	45                   	inc    ebp
c0024c42:	83 c4 10             	add    esp,0x10
c0024c45:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024c4b:	75 d1                	jne    c0024c1e <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024c4d:	eb 23                	jmp    c0024c72 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024c4f:	0f b6 d2             	movzx  edx,dl
c0024c52:	51                   	push   ecx
c0024c53:	51                   	push   ecx
c0024c54:	52                   	push   edx
c0024c55:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c5b:	e8 20 ec ff ff       	call   c0023880 <IDE::getBase(unsigned char)>
c0024c60:	b9 00 01 00 00       	mov    ecx,0x100
c0024c65:	89 c2                	mov    edx,eax
c0024c67:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024c6b:	fc                   	cld    
c0024c6c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024c6f:	83 c4 10             	add    esp,0x10
c0024c72:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024c7a:	4e                   	dec    esi
c0024c7b:	e9 3e ff ff ff       	jmp    c0024bbe <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024c80:	31 ff                	xor    edi,edi
c0024c82:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024c87:	74 16                	je     c0024c9f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024c89:	50                   	push   eax
c0024c8a:	50                   	push   eax
c0024c8b:	31 c0                	xor    eax,eax
c0024c8d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024c92:	0f 94 c0             	sete   al
c0024c95:	50                   	push   eax
c0024c96:	53                   	push   ebx
c0024c97:	e8 ec fb ff ff       	call   c0024888 <ATA::flush(bool)>
c0024c9c:	83 c4 10             	add    esp,0x10
c0024c9f:	83 c4 2c             	add    esp,0x2c
c0024ca2:	89 f8                	mov    eax,edi
c0024ca4:	5b                   	pop    ebx
c0024ca5:	5e                   	pop    esi
c0024ca6:	5f                   	pop    edi
c0024ca7:	5d                   	pop    ebp
c0024ca8:	c3                   	ret    
c0024ca9:	90                   	nop

c0024caa <ATA::read(unsigned long long, int, void*)>:
c0024caa:	57                   	push   edi
c0024cab:	b8 04 00 00 00       	mov    eax,0x4
c0024cb0:	56                   	push   esi
c0024cb1:	53                   	push   ebx
c0024cb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024cb6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024cba:	8d 7a ff             	lea    edi,[edx-0x1]
c0024cbd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024cc1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024cc5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024ccb:	77 25                	ja     c0024cf2 <ATA::read(unsigned long long, int, void*)+0x48>
c0024ccd:	b8 06 00 00 00       	mov    eax,0x6
c0024cd2:	85 f6                	test   esi,esi
c0024cd4:	74 1c                	je     c0024cf2 <ATA::read(unsigned long long, int, void*)+0x48>
c0024cd6:	50                   	push   eax
c0024cd7:	50                   	push   eax
c0024cd8:	6a 00                	push   0x0
c0024cda:	56                   	push   esi
c0024cdb:	52                   	push   edx
c0024cdc:	53                   	push   ebx
c0024cdd:	51                   	push   ecx
c0024cde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ce2:	e8 3b fc ff ff       	call   c0024922 <ATA::access(unsigned long long, int, void*, bool)>
c0024ce7:	83 c4 20             	add    esp,0x20
c0024cea:	85 c0                	test   eax,eax
c0024cec:	0f 95 c0             	setne  al
c0024cef:	0f b6 c0             	movzx  eax,al
c0024cf2:	5b                   	pop    ebx
c0024cf3:	5e                   	pop    esi
c0024cf4:	5f                   	pop    edi
c0024cf5:	c3                   	ret    

c0024cf6 <ATA::write(unsigned long long, int, void*)>:
c0024cf6:	57                   	push   edi
c0024cf7:	b8 04 00 00 00       	mov    eax,0x4
c0024cfc:	56                   	push   esi
c0024cfd:	53                   	push   ebx
c0024cfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d06:	8d 7a ff             	lea    edi,[edx-0x1]
c0024d09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024d0d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024d11:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024d17:	77 25                	ja     c0024d3e <ATA::write(unsigned long long, int, void*)+0x48>
c0024d19:	b8 06 00 00 00       	mov    eax,0x6
c0024d1e:	85 f6                	test   esi,esi
c0024d20:	74 1c                	je     c0024d3e <ATA::write(unsigned long long, int, void*)+0x48>
c0024d22:	50                   	push   eax
c0024d23:	50                   	push   eax
c0024d24:	6a 01                	push   0x1
c0024d26:	56                   	push   esi
c0024d27:	52                   	push   edx
c0024d28:	53                   	push   ebx
c0024d29:	51                   	push   ecx
c0024d2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d2e:	e8 ef fb ff ff       	call   c0024922 <ATA::access(unsigned long long, int, void*, bool)>
c0024d33:	83 c4 20             	add    esp,0x20
c0024d36:	85 c0                	test   eax,eax
c0024d38:	0f 95 c0             	setne  al
c0024d3b:	0f b6 c0             	movzx  eax,al
c0024d3e:	5b                   	pop    ebx
c0024d3f:	5e                   	pop    esi
c0024d40:	5f                   	pop    edi
c0024d41:	c3                   	ret    

c0024d42 <ATA::detectCHS()>:
c0024d42:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024d46:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024d4c:	c1 e0 06             	shl    eax,0x6
c0024d4f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024d55:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024d5f:	c7 44 24 04 63 d8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d863
c0024d67:	e9 93 55 ff ff       	jmp    c001a2ff <Krnl::panic(char const*)>

c0024d6c <ATA::open(int, int, void*)>:
c0024d6c:	53                   	push   ebx
c0024d6d:	83 ec 08             	sub    esp,0x8
c0024d70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d74:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d7c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024d82:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d88:	c1 e0 06             	shl    eax,0x6
c0024d8b:	01 d0                	add    eax,edx
c0024d8d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024d94:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024d9a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024da1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024dab:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024db1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024db8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024dbf:	75 0c                	jne    c0024dcd <ATA::open(int, int, void*)+0x61>
c0024dc1:	83 ec 0c             	sub    esp,0xc
c0024dc4:	53                   	push   ebx
c0024dc5:	e8 78 ff ff ff       	call   c0024d42 <ATA::detectCHS()>
c0024dca:	83 c4 10             	add    esp,0x10
c0024dcd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024dd3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024dd9:	c1 e0 06             	shl    eax,0x6
c0024ddc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024de3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024ded:	d1 e8                	shr    eax,1
c0024def:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024df5:	6a 04                	push   0x4
c0024df7:	6a 0c                	push   0xc
c0024df9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e00:	50                   	push   eax
c0024e01:	52                   	push   edx
c0024e02:	e8 8b ea ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e07:	90                   	nop
c0024e08:	90                   	nop
c0024e09:	6a 00                	push   0x0
c0024e0b:	6a 0c                	push   0xc
c0024e0d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e14:	50                   	push   eax
c0024e15:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e1b:	e8 72 ea ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e20:	83 c4 14             	add    esp,0x14
c0024e23:	53                   	push   ebx
c0024e24:	e8 87 f3 fe ff       	call   c00141b0 <PhysicalDisk::startCache()>
c0024e29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e2c:	e8 39 16 ff ff       	call   c001646a <createPartitionsForDisk(PhysicalDisk*)>
c0024e31:	31 c0                	xor    eax,eax
c0024e33:	83 c4 18             	add    esp,0x18
c0024e36:	5b                   	pop    ebx
c0024e37:	c3                   	ret    

c0024e38 <ATAPI::write(unsigned long long, int, void*)>:
c0024e38:	b8 03 00 00 00       	mov    eax,0x3
c0024e3d:	c3                   	ret    

c0024e3e <ATAPI::close(int, int, void*)>:
c0024e3e:	83 ec 0c             	sub    esp,0xc
c0024e41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e45:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024e4b:	85 c0                	test   eax,eax
c0024e4d:	74 0c                	je     c0024e5b <ATAPI::close(int, int, void*)+0x1d>
c0024e4f:	83 ec 0c             	sub    esp,0xc
c0024e52:	8b 10                	mov    edx,DWORD PTR [eax]
c0024e54:	50                   	push   eax
c0024e55:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e58:	83 c4 10             	add    esp,0x10
c0024e5b:	31 c0                	xor    eax,eax
c0024e5d:	83 c4 0c             	add    esp,0xc
c0024e60:	c3                   	ret    
c0024e61:	90                   	nop

c0024e62 <ATAPI::ATAPI()>:
c0024e62:	83 ec 0c             	sub    esp,0xc
c0024e65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e69:	83 ec 04             	sub    esp,0x4
c0024e6c:	68 00 08 00 00       	push   0x800
c0024e71:	68 9d d9 02 c0       	push   0xc002d99d
c0024e76:	50                   	push   eax
c0024e77:	e8 cc f2 fe ff       	call   c0014148 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024e7c:	83 c4 10             	add    esp,0x10
c0024e7f:	ba b8 d8 02 c0       	mov    edx,0xc002d8b8
c0024e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e88:	89 10                	mov    DWORD PTR [eax],edx
c0024e8a:	90                   	nop
c0024e8b:	83 c4 0c             	add    esp,0xc
c0024e8e:	c3                   	ret    
c0024e8f:	90                   	nop

c0024e90 <ATAPI::readyForCommand()>:
c0024e90:	56                   	push   esi
c0024e91:	53                   	push   ebx
c0024e92:	31 db                	xor    ebx,ebx
c0024e94:	50                   	push   eax
c0024e95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024e99:	50                   	push   eax
c0024e9a:	6a 0c                	push   0xc
c0024e9c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024ea3:	50                   	push   eax
c0024ea4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024eaa:	e8 a3 ea ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c0024eaf:	83 c4 10             	add    esp,0x10
c0024eb2:	a8 88                	test   al,0x88
c0024eb4:	74 23                	je     c0024ed9 <ATAPI::readyForCommand()+0x49>
c0024eb6:	43                   	inc    ebx
c0024eb7:	83 fb 63             	cmp    ebx,0x63
c0024eba:	7e dd                	jle    c0024e99 <ATAPI::readyForCommand()+0x9>
c0024ebc:	51                   	push   ecx
c0024ebd:	51                   	push   ecx
c0024ebe:	6a 00                	push   0x0
c0024ec0:	68 40 42 0f 00       	push   0xf4240
c0024ec5:	e8 eb 94 ff ff       	call   c001e3b5 <nanoSleep(unsigned long long)>
c0024eca:	83 c4 10             	add    esp,0x10
c0024ecd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024ed3:	75 c4                	jne    c0024e99 <ATAPI::readyForCommand()+0x9>
c0024ed5:	31 c0                	xor    eax,eax
c0024ed7:	eb 02                	jmp    c0024edb <ATAPI::readyForCommand()+0x4b>
c0024ed9:	b0 01                	mov    al,0x1
c0024edb:	5a                   	pop    edx
c0024edc:	5b                   	pop    ebx
c0024edd:	5e                   	pop    esi
c0024ede:	c3                   	ret    
c0024edf:	90                   	nop

c0024ee0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024ee0:	55                   	push   ebp
c0024ee1:	57                   	push   edi
c0024ee2:	56                   	push   esi
c0024ee3:	53                   	push   ebx
c0024ee4:	83 ec 20             	sub    esp,0x20
c0024ee7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024eeb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024eef:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024ef3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024ef7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024efb:	6a 01                	push   0x1
c0024efd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f04:	50                   	push   eax
c0024f05:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f0b:	e8 8e eb ff ff       	call   c0023a9e <IDE::enableIRQs(unsigned char, bool)>
c0024f10:	5e                   	pop    esi
c0024f11:	58                   	pop    eax
c0024f12:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f19:	50                   	push   eax
c0024f1a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f20:	e8 47 e9 ff ff       	call   c002386c <IDE::prepareInterrupt(unsigned char)>
c0024f25:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024f28:	e8 63 ff ff ff       	call   c0024e90 <ATAPI::readyForCommand()>
c0024f2d:	83 c4 10             	add    esp,0x10
c0024f30:	84 c0                	test   al,al
c0024f32:	75 0a                	jne    c0024f3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024f34:	bb 01 00 00 00       	mov    ebx,0x1
c0024f39:	e9 57 02 00 00       	jmp    c0025195 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024f3e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024f44:	c1 e0 04             	shl    eax,0x4
c0024f47:	0f b6 c0             	movzx  eax,al
c0024f4a:	50                   	push   eax
c0024f4b:	6a 06                	push   0x6
c0024f4d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f54:	50                   	push   eax
c0024f55:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f5b:	e8 32 e9 ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f60:	6a 00                	push   0x0
c0024f62:	6a 01                	push   0x1
c0024f64:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f6b:	50                   	push   eax
c0024f6c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f72:	e8 1b e9 ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f77:	83 c4 20             	add    esp,0x20
c0024f7a:	0f b6 c3             	movzx  eax,bl
c0024f7d:	0f b6 df             	movzx  ebx,bh
c0024f80:	50                   	push   eax
c0024f81:	6a 04                	push   0x4
c0024f83:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f8a:	50                   	push   eax
c0024f8b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f91:	e8 fc e8 ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f96:	53                   	push   ebx
c0024f97:	6a 05                	push   0x5
c0024f99:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fa0:	50                   	push   eax
c0024fa1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fa7:	e8 e6 e8 ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fac:	83 c4 20             	add    esp,0x20
c0024faf:	68 a0 00 00 00       	push   0xa0
c0024fb4:	6a 07                	push   0x7
c0024fb6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fbd:	50                   	push   eax
c0024fbe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fc4:	e8 c9 e8 ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fc9:	83 c4 0c             	add    esp,0xc
c0024fcc:	6a 01                	push   0x1
c0024fce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fd5:	50                   	push   eax
c0024fd6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fdc:	e8 5d f4 ff ff       	call   c002443e <IDE::polling(unsigned char, unsigned int)>
c0024fe1:	83 c4 10             	add    esp,0x10
c0024fe4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024fea:	84 c0                	test   al,al
c0024fec:	74 23                	je     c0025011 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024fee:	0f b6 d8             	movzx  ebx,al
c0024ff1:	0f b6 d2             	movzx  edx,dl
c0024ff4:	53                   	push   ebx
c0024ff5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024ffc:	50                   	push   eax
c0024ffd:	52                   	push   edx
c0024ffe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025004:	e8 9f f2 ff ff       	call   c00242a8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0025009:	83 c4 10             	add    esp,0x10
c002500c:	e9 84 01 00 00       	jmp    c0025195 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025011:	0f b6 d2             	movzx  edx,dl
c0025014:	53                   	push   ebx
c0025015:	53                   	push   ebx
c0025016:	52                   	push   edx
c0025017:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002501d:	e8 5e e8 ff ff       	call   c0023880 <IDE::getBase(unsigned char)>
c0025022:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0025026:	b9 06 00 00 00       	mov    ecx,0x6
c002502b:	89 c2                	mov    edx,eax
c002502d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0025030:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0025034:	83 c4 10             	add    esp,0x10
c0025037:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002503d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025044:	85 db                	test   ebx,ebx
c0025046:	0f 84 ec 00 00 00    	je     c0025138 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002504c:	51                   	push   ecx
c002504d:	51                   	push   ecx
c002504e:	52                   	push   edx
c002504f:	50                   	push   eax
c0025050:	e8 ab e9 ff ff       	call   c0023a00 <IDE::waitInterrupt(unsigned char)>
c0025055:	83 c4 10             	add    esp,0x10
c0025058:	84 c0                	test   al,al
c002505a:	0f 84 d4 fe ff ff    	je     c0024f34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025060:	56                   	push   esi
c0025061:	56                   	push   esi
c0025062:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025069:	50                   	push   eax
c002506a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025070:	e8 f7 e7 ff ff       	call   c002386c <IDE::prepareInterrupt(unsigned char)>
c0025075:	83 c4 0c             	add    esp,0xc
c0025078:	6a 04                	push   0x4
c002507a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025081:	50                   	push   eax
c0025082:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025088:	e8 c5 e8 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c002508d:	83 c4 0c             	add    esp,0xc
c0025090:	89 c6                	mov    esi,eax
c0025092:	6a 05                	push   0x5
c0025094:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002509b:	50                   	push   eax
c002509c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250a2:	e8 ab e8 ff ff       	call   c0023952 <IDE::read(unsigned char, unsigned char)>
c00250a7:	89 f1                	mov    ecx,esi
c00250a9:	0f b6 c0             	movzx  eax,al
c00250ac:	0f b6 f1             	movzx  esi,cl
c00250af:	c1 e0 08             	shl    eax,0x8
c00250b2:	09 c6                	or     esi,eax
c00250b4:	d1 fe                	sar    esi,1
c00250b6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00250ba:	83 c4 10             	add    esp,0x10
c00250bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00250c2:	74 41                	je     c0025105 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00250c4:	31 c9                	xor    ecx,ecx
c00250c6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00250cc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00250d3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00250d7:	75 0a                	jne    c00250e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00250d9:	01 c9                	add    ecx,ecx
c00250db:	01 cd                	add    ebp,ecx
c00250dd:	4b                   	dec    ebx
c00250de:	e9 54 ff ff ff       	jmp    c0025037 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00250e3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00250e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00250ec:	51                   	push   ecx
c00250ed:	51                   	push   ecx
c00250ee:	52                   	push   edx
c00250ef:	50                   	push   eax
c00250f0:	e8 8b e7 ff ff       	call   c0023880 <IDE::getBase(unsigned char)>
c00250f5:	89 c2                	mov    edx,eax
c00250f7:	89 f0                	mov    eax,esi
c00250f9:	66 ef                	out    dx,ax
c00250fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00250ff:	83 c4 10             	add    esp,0x10
c0025102:	41                   	inc    ecx
c0025103:	eb c1                	jmp    c00250c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0025105:	31 f6                	xor    esi,esi
c0025107:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002510d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025114:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0025118:	75 06                	jne    c0025120 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002511a:	01 f6                	add    esi,esi
c002511c:	01 f5                	add    ebp,esi
c002511e:	eb bd                	jmp    c00250dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0025120:	51                   	push   ecx
c0025121:	51                   	push   ecx
c0025122:	52                   	push   edx
c0025123:	50                   	push   eax
c0025124:	e8 57 e7 ff ff       	call   c0023880 <IDE::getBase(unsigned char)>
c0025129:	89 c2                	mov    edx,eax
c002512b:	66 ed                	in     ax,dx
c002512d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0025132:	83 c4 10             	add    esp,0x10
c0025135:	46                   	inc    esi
c0025136:	eb cf                	jmp    c0025107 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0025138:	51                   	push   ecx
c0025139:	51                   	push   ecx
c002513a:	52                   	push   edx
c002513b:	50                   	push   eax
c002513c:	e8 bf e8 ff ff       	call   c0023a00 <IDE::waitInterrupt(unsigned char)>
c0025141:	83 c4 10             	add    esp,0x10
c0025144:	84 c0                	test   al,al
c0025146:	0f 84 e8 fd ff ff    	je     c0024f34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002514c:	bb a0 86 01 00       	mov    ebx,0x186a0
c0025151:	52                   	push   edx
c0025152:	52                   	push   edx
c0025153:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002515a:	50                   	push   eax
c002515b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025161:	e8 06 e7 ff ff       	call   c002386c <IDE::prepareInterrupt(unsigned char)>
c0025166:	83 c4 10             	add    esp,0x10
c0025169:	50                   	push   eax
c002516a:	50                   	push   eax
c002516b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025172:	50                   	push   eax
c0025173:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025179:	e8 02 e7 ff ff       	call   c0023880 <IDE::getBase(unsigned char)>
c002517e:	8d 50 07             	lea    edx,[eax+0x7]
c0025181:	ec                   	in     al,dx
c0025182:	83 c4 10             	add    esp,0x10
c0025185:	a8 88                	test   al,0x88
c0025187:	74 0a                	je     c0025193 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0025189:	4b                   	dec    ebx
c002518a:	75 dd                	jne    c0025169 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002518c:	bb 02 00 00 00       	mov    ebx,0x2
c0025191:	eb 02                	jmp    c0025195 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025193:	31 db                	xor    ebx,ebx
c0025195:	83 c4 1c             	add    esp,0x1c
c0025198:	89 d8                	mov    eax,ebx
c002519a:	5b                   	pop    ebx
c002519b:	5e                   	pop    esi
c002519c:	5f                   	pop    edi
c002519d:	5d                   	pop    ebp
c002519e:	c3                   	ret    
c002519f:	90                   	nop

c00251a0 <ATAPI::diskRemoved()>:
c00251a0:	83 ec 18             	sub    esp,0x18
c00251a3:	68 a9 d9 02 c0       	push   0xc002d9a9
c00251a8:	e8 1c d7 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00251ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251b1:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00251b8:	83 c4 1c             	add    esp,0x1c
c00251bb:	c3                   	ret    

c00251bc <ATAPI::eject()>:
c00251bc:	57                   	push   edi
c00251bd:	b9 03 00 00 00       	mov    ecx,0x3
c00251c2:	53                   	push   ebx
c00251c3:	83 ec 14             	sub    esp,0x14
c00251c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00251ca:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251ce:	fc                   	cld    
c00251cf:	31 c0                	xor    eax,eax
c00251d1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00251d3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00251d8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00251dd:	50                   	push   eax
c00251de:	50                   	push   eax
c00251df:	6a 00                	push   0x0
c00251e1:	6a 00                	push   0x0
c00251e3:	6a 00                	push   0x0
c00251e5:	6a 02                	push   0x2
c00251e7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00251eb:	50                   	push   eax
c00251ec:	53                   	push   ebx
c00251ed:	e8 ee fc ff ff       	call   c0024ee0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00251f2:	83 c4 14             	add    esp,0x14
c00251f5:	53                   	push   ebx
c00251f6:	e8 a5 ff ff ff       	call   c00251a0 <ATAPI::diskRemoved()>
c00251fb:	83 c4 24             	add    esp,0x24
c00251fe:	31 c0                	xor    eax,eax
c0025200:	5b                   	pop    ebx
c0025201:	5f                   	pop    edi
c0025202:	c3                   	ret    
c0025203:	90                   	nop

c0025204 <ATAPI::diskInserted()>:
c0025204:	53                   	push   ebx
c0025205:	83 ec 14             	sub    esp,0x14
c0025208:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002520c:	68 c0 d9 02 c0       	push   0xc002d9c0
c0025211:	e8 b3 d6 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0025216:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002521d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025220:	e8 8b ef fe ff       	call   c00141b0 <PhysicalDisk::startCache()>
c0025225:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025229:	83 c4 18             	add    esp,0x18
c002522c:	5b                   	pop    ebx
c002522d:	e9 38 12 ff ff       	jmp    c001646a <createPartitionsForDisk(PhysicalDisk*)>

c0025232 <ATAPI::detectMedia()>:
c0025232:	56                   	push   esi
c0025233:	53                   	push   ebx
c0025234:	83 ec 28             	sub    esp,0x28
c0025237:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002523b:	6a 0c                	push   0xc
c002523d:	6a 00                	push   0x0
c002523f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025243:	56                   	push   esi
c0025244:	e8 07 b5 fd ff       	call   c0000750 <memset>
c0025249:	58                   	pop    eax
c002524a:	5a                   	pop    edx
c002524b:	6a 00                	push   0x0
c002524d:	6a 00                	push   0x0
c002524f:	6a 00                	push   0x0
c0025251:	6a 00                	push   0x0
c0025253:	56                   	push   esi
c0025254:	53                   	push   ebx
c0025255:	e8 86 fc ff ff       	call   c0024ee0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002525a:	83 c4 1c             	add    esp,0x1c
c002525d:	6a 0c                	push   0xc
c002525f:	6a 00                	push   0x0
c0025261:	56                   	push   esi
c0025262:	e8 e9 b4 fd ff       	call   c0000750 <memset>
c0025267:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002526c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025271:	59                   	pop    ecx
c0025272:	58                   	pop    eax
c0025273:	6a 01                	push   0x1
c0025275:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0025279:	50                   	push   eax
c002527a:	6a 00                	push   0x0
c002527c:	6a 12                	push   0x12
c002527e:	56                   	push   esi
c002527f:	53                   	push   ebx
c0025280:	e8 5b fc ff ff       	call   c0024ee0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025285:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025289:	83 c4 20             	add    esp,0x20
c002528c:	83 e0 7f             	and    eax,0x7f
c002528f:	3c 70                	cmp    al,0x70
c0025291:	74 15                	je     c00252a8 <ATAPI::detectMedia()+0x76>
c0025293:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002529a:	75 0c                	jne    c00252a8 <ATAPI::detectMedia()+0x76>
c002529c:	83 ec 0c             	sub    esp,0xc
c002529f:	53                   	push   ebx
c00252a0:	e8 5f ff ff ff       	call   c0025204 <ATAPI::diskInserted()>
c00252a5:	83 c4 10             	add    esp,0x10
c00252a8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00252ac:	83 e0 0f             	and    eax,0xf
c00252af:	3c 02                	cmp    al,0x2
c00252b1:	75 1b                	jne    c00252ce <ATAPI::detectMedia()+0x9c>
c00252b3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00252b8:	75 2d                	jne    c00252e7 <ATAPI::detectMedia()+0xb5>
c00252ba:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252c1:	74 24                	je     c00252e7 <ATAPI::detectMedia()+0xb5>
c00252c3:	83 ec 0c             	sub    esp,0xc
c00252c6:	53                   	push   ebx
c00252c7:	e8 d4 fe ff ff       	call   c00251a0 <ATAPI::diskRemoved()>
c00252cc:	eb 16                	jmp    c00252e4 <ATAPI::detectMedia()+0xb2>
c00252ce:	84 c0                	test   al,al
c00252d0:	75 15                	jne    c00252e7 <ATAPI::detectMedia()+0xb5>
c00252d2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252d9:	75 0c                	jne    c00252e7 <ATAPI::detectMedia()+0xb5>
c00252db:	83 ec 0c             	sub    esp,0xc
c00252de:	53                   	push   ebx
c00252df:	e8 20 ff ff ff       	call   c0025204 <ATAPI::diskInserted()>
c00252e4:	83 c4 10             	add    esp,0x10
c00252e7:	83 c4 24             	add    esp,0x24
c00252ea:	5b                   	pop    ebx
c00252eb:	5e                   	pop    esi
c00252ec:	c3                   	ret    
c00252ed:	90                   	nop

c00252ee <ATAPI::open(int, int, void*)>:
c00252ee:	53                   	push   ebx
c00252ef:	83 ec 08             	sub    esp,0x8
c00252f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00252f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00252fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00252fe:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025304:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002530a:	c1 e0 06             	shl    eax,0x6
c002530d:	01 d0                	add    eax,edx
c002530f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0025316:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002531c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0025323:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002532d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025333:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002533a:	6a 04                	push   0x4
c002533c:	6a 0c                	push   0xc
c002533e:	51                   	push   ecx
c002533f:	52                   	push   edx
c0025340:	e8 4d e5 ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025345:	90                   	nop
c0025346:	90                   	nop
c0025347:	6a 00                	push   0x0
c0025349:	6a 0c                	push   0xc
c002534b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025352:	50                   	push   eax
c0025353:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025359:	e8 34 e5 ff ff       	call   c0023892 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002535e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025365:	83 c4 14             	add    esp,0x14
c0025368:	53                   	push   ebx
c0025369:	e8 c4 fe ff ff       	call   c0025232 <ATAPI::detectMedia()>
c002536e:	31 c0                	xor    eax,eax
c0025370:	83 c4 18             	add    esp,0x18
c0025373:	5b                   	pop    ebx
c0025374:	c3                   	ret    
c0025375:	90                   	nop

c0025376 <ATAPI::read(unsigned long long, int, void*)>:
c0025376:	55                   	push   ebp
c0025377:	57                   	push   edi
c0025378:	56                   	push   esi
c0025379:	53                   	push   ebx
c002537a:	83 ec 1c             	sub    esp,0x1c
c002537d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025381:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025385:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025389:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025390:	74 41                	je     c00253d3 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0025392:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025396:	b9 03 00 00 00       	mov    ecx,0x3
c002539b:	fc                   	cld    
c002539c:	31 c0                	xor    eax,eax
c002539e:	86 fb                	xchg   bl,bh
c00253a0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00253a2:	c1 c3 10             	rol    ebx,0x10
c00253a5:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00253aa:	89 e8                	mov    eax,ebp
c00253ac:	86 fb                	xchg   bl,bh
c00253ae:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00253b2:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00253b6:	50                   	push   eax
c00253b7:	50                   	push   eax
c00253b8:	55                   	push   ebp
c00253b9:	c1 e5 0b             	shl    ebp,0xb
c00253bc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00253c0:	6a 00                	push   0x0
c00253c2:	55                   	push   ebp
c00253c3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00253c7:	50                   	push   eax
c00253c8:	56                   	push   esi
c00253c9:	e8 12 fb ff ff       	call   c0024ee0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00253ce:	83 c4 20             	add    esp,0x20
c00253d1:	eb 1a                	jmp    c00253ed <ATAPI::read(unsigned long long, int, void*)+0x77>
c00253d3:	83 ec 0c             	sub    esp,0xc
c00253d6:	56                   	push   esi
c00253d7:	e8 56 fe ff ff       	call   c0025232 <ATAPI::detectMedia()>
c00253dc:	83 c4 10             	add    esp,0x10
c00253df:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00253e6:	75 aa                	jne    c0025392 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00253e8:	b8 02 00 00 00       	mov    eax,0x2
c00253ed:	83 c4 1c             	add    esp,0x1c
c00253f0:	5b                   	pop    ebx
c00253f1:	5e                   	pop    esi
c00253f2:	5f                   	pop    edi
c00253f3:	5d                   	pop    ebp
c00253f4:	c3                   	ret    
c00253f5:	90                   	nop

c00253f6 <SATA::close(int, int, void*)>:
c00253f6:	83 ec 0c             	sub    esp,0xc
c00253f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253fd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025403:	85 c0                	test   eax,eax
c0025405:	74 0c                	je     c0025413 <SATA::close(int, int, void*)+0x1d>
c0025407:	83 ec 0c             	sub    esp,0xc
c002540a:	8b 10                	mov    edx,DWORD PTR [eax]
c002540c:	50                   	push   eax
c002540d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025410:	83 c4 10             	add    esp,0x10
c0025413:	31 c0                	xor    eax,eax
c0025415:	83 c4 0c             	add    esp,0xc
c0025418:	c3                   	ret    
c0025419:	90                   	nop

c002541a <SATA::powerSaving(PowerSavingLevel)>:
c002541a:	c3                   	ret    
c002541b:	90                   	nop

c002541c <SATA::open(int, int, void*)>:
c002541c:	56                   	push   esi
c002541d:	53                   	push   ebx
c002541e:	50                   	push   eax
c002541f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025423:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025427:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0025431:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025437:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025441:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025445:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002544f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025455:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002545c:	e8 29 a7 fe ff       	call   c000fb8a <Phys::allocatePage()>
c0025461:	89 c6                	mov    esi,eax
c0025463:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025469:	81 c6 00 10 00 00    	add    esi,0x1000
c002546f:	e8 16 a7 fe ff       	call   c000fb8a <Phys::allocatePage()>
c0025474:	39 c6                	cmp    esi,eax
c0025476:	74 10                	je     c0025488 <SATA::open(int, int, void*)+0x6c>
c0025478:	83 ec 0c             	sub    esp,0xc
c002547b:	68 e8 d8 02 c0       	push   0xc002d8e8
c0025480:	e8 7a 4e ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0025485:	83 c4 10             	add    esp,0x10
c0025488:	83 ec 0c             	sub    esp,0xc
c002548b:	6a 02                	push   0x2
c002548d:	e8 31 c0 fe ff       	call   c00114c3 <Virt::allocateKernelVirtualPages(int)>
c0025492:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025498:	6a 03                	push   0x3
c002549a:	50                   	push   eax
c002549b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00254a1:	ff 35 30 f4 02 c0    	push   DWORD PTR ds:0xc002f430
c00254a7:	e8 4e c8 fe ff       	call   c0011cfa <VAS::mapPage(unsigned long, unsigned long, int)>
c00254ac:	83 c4 14             	add    esp,0x14
c00254af:	53                   	push   ebx
c00254b0:	e8 fb ec fe ff       	call   c00141b0 <PhysicalDisk::startCache()>
c00254b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00254b8:	e8 ad 0f ff ff       	call   c001646a <createPartitionsForDisk(PhysicalDisk*)>
c00254bd:	83 c4 14             	add    esp,0x14
c00254c0:	31 c0                	xor    eax,eax
c00254c2:	5b                   	pop    ebx
c00254c3:	5e                   	pop    esi
c00254c4:	c3                   	ret    
c00254c5:	90                   	nop

c00254c6 <SATA::SATA()>:
c00254c6:	83 ec 0c             	sub    esp,0xc
c00254c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254cd:	83 ec 04             	sub    esp,0x4
c00254d0:	68 00 02 00 00       	push   0x200
c00254d5:	68 fc d8 02 c0       	push   0xc002d8fc
c00254da:	50                   	push   eax
c00254db:	e8 68 ec fe ff       	call   c0014148 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00254e0:	83 c4 10             	add    esp,0x10
c00254e3:	ba 6c d9 02 c0       	mov    edx,0xc002d96c
c00254e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ec:	89 10                	mov    DWORD PTR [eax],edx
c00254ee:	90                   	nop
c00254ef:	83 c4 0c             	add    esp,0xc
c00254f2:	c3                   	ret    
c00254f3:	90                   	nop

c00254f4 <SATA::access(unsigned long long, int, void*, bool)>:
c00254f4:	55                   	push   ebp
c00254f5:	57                   	push   edi
c00254f6:	56                   	push   esi
c00254f7:	53                   	push   ebx
c00254f8:	83 ec 2c             	sub    esp,0x2c
c00254fb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00254ff:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0025503:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025507:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002550b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002550f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0025514:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025518:	7e 10                	jle    c002552a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c002551a:	83 ec 0c             	sub    esp,0xc
c002551d:	68 0c d9 02 c0       	push   0xc002d90c
c0025522:	e8 d8 4d ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0025527:	83 c4 10             	add    esp,0x10
c002552a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0025530:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0025536:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002553c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025540:	89 d0                	mov    eax,edx
c0025542:	c1 e0 07             	shl    eax,0x7
c0025545:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025549:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025553:	51                   	push   ecx
c0025554:	8d 42 02             	lea    eax,[edx+0x2]
c0025557:	51                   	push   ecx
c0025558:	c1 e0 07             	shl    eax,0x7
c002555b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002555f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025563:	50                   	push   eax
c0025564:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002556a:	e8 e7 ef ff ff       	call   c0024556 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002556f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025573:	83 c4 10             	add    esp,0x10
c0025576:	b8 01 00 00 00       	mov    eax,0x1
c002557b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025580:	0f 84 cb 01 00 00    	je     c0025751 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025586:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002558a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002558e:	c1 e0 09             	shl    eax,0x9
c0025591:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025596:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002559a:	74 0e                	je     c00255aa <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c002559c:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00255a2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00255a6:	89 c1                	mov    ecx,eax
c00255a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00255aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00255ae:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00255b4:	8d 42 02             	lea    eax,[edx+0x2]
c00255b7:	c1 e0 07             	shl    eax,0x7
c00255ba:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00255be:	8b 00                	mov    eax,DWORD PTR [eax]
c00255c0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00255c6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00255cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00255d0:	c1 e1 05             	shl    ecx,0x5
c00255d3:	01 c8                	add    eax,ecx
c00255d5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00255d9:	83 e1 01             	and    ecx,0x1
c00255dc:	89 ce                	mov    esi,ecx
c00255de:	8a 08                	mov    cl,BYTE PTR [eax]
c00255e0:	c1 e6 06             	shl    esi,0x6
c00255e3:	83 e1 bf             	and    ecx,0xffffffbf
c00255e6:	09 f1                	or     ecx,esi
c00255e8:	88 08                	mov    BYTE PTR [eax],cl
c00255ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c00255ec:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00255f2:	81 c9 05 00 01 00    	or     ecx,0x10005
c00255f8:	89 08                	mov    DWORD PTR [eax],ecx
c00255fa:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025600:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0025606:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002560c:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002560f:	50                   	push   eax
c0025610:	68 90 00 00 00       	push   0x90
c0025615:	6a 00                	push   0x0
c0025617:	56                   	push   esi
c0025618:	e8 33 b1 fd ff       	call   c0000750 <memset>
c002561d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025623:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0025627:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002562d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0025631:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025635:	83 c4 10             	add    esp,0x10
c0025638:	48                   	dec    eax
c0025639:	25 ff ff 3f 00       	and    eax,0x3fffff
c002563e:	89 c1                	mov    ecx,eax
c0025640:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025646:	25 00 00 c0 ff       	and    eax,0xffc00000
c002564b:	09 c8                	or     eax,ecx
c002564d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025653:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025656:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c002565d:	66 25 00 7f          	and    ax,0x7f00
c0025661:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025665:	66 0d 27 80          	or     ax,0x8027
c0025669:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c002566e:	66 89 06             	mov    WORD PTR [esi],ax
c0025671:	19 c0                	sbb    eax,eax
c0025673:	83 e0 f0             	and    eax,0xfffffff0
c0025676:	83 c0 35             	add    eax,0x35
c0025679:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002567c:	89 e8                	mov    eax,ebp
c002567e:	c1 e8 10             	shr    eax,0x10
c0025681:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025684:	89 e8                	mov    eax,ebp
c0025686:	c1 e8 18             	shr    eax,0x18
c0025689:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002568c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025690:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025693:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025697:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002569a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002569e:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00256a2:	89 d6                	mov    esi,edx
c00256a4:	31 c0                	xor    eax,eax
c00256a6:	c1 e6 07             	shl    esi,0x7
c00256a9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00256ad:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00256b3:	80 e1 88             	and    cl,0x88
c00256b6:	74 0a                	je     c00256c2 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c00256b8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00256bd:	74 0a                	je     c00256c9 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c00256bf:	40                   	inc    eax
c00256c0:	eb eb                	jmp    c00256ad <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c00256c2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00256c7:	75 0a                	jne    c00256d3 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00256c9:	83 ec 0c             	sub    esp,0xc
c00256cc:	68 45 d9 02 c0       	push   0xc002d945
c00256d1:	eb 56                	jmp    c0025729 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c00256d3:	b8 01 00 00 00       	mov    eax,0x1
c00256d8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00256dc:	c1 e2 07             	shl    edx,0x7
c00256df:	d3 e0                	shl    eax,cl
c00256e1:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00256e5:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00256eb:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00256f1:	85 c8                	test   eax,ecx
c00256f3:	74 20                	je     c0025715 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c00256f5:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c00256fb:	0f ba e1 1e          	bt     ecx,0x1e
c00256ff:	73 ea                	jae    c00256eb <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0025701:	83 ec 0c             	sub    esp,0xc
c0025704:	68 53 d9 02 c0       	push   0xc002d953
c0025709:	e8 f1 4b ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c002570e:	83 c4 10             	add    esp,0x10
c0025711:	31 c0                	xor    eax,eax
c0025713:	eb 3c                	jmp    c0025751 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025715:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002571b:	0f ba e0 1e          	bt     eax,0x1e
c002571f:	73 17                	jae    c0025738 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0025721:	83 ec 0c             	sub    esp,0xc
c0025724:	68 53 d9 02 c0       	push   0xc002d953
c0025729:	e8 d1 4b ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c002572e:	83 c4 10             	add    esp,0x10
c0025731:	b8 01 00 00 00       	mov    eax,0x1
c0025736:	eb 19                	jmp    c0025751 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025738:	31 c0                	xor    eax,eax
c002573a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002573f:	75 10                	jne    c0025751 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025741:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025747:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002574b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002574f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025751:	83 c4 2c             	add    esp,0x2c
c0025754:	5b                   	pop    ebx
c0025755:	5e                   	pop    esi
c0025756:	5f                   	pop    edi
c0025757:	5d                   	pop    ebp
c0025758:	c3                   	ret    
c0025759:	90                   	nop

c002575a <SATA::read(unsigned long long, int, void*)>:
c002575a:	57                   	push   edi
c002575b:	b8 04 00 00 00       	mov    eax,0x4
c0025760:	56                   	push   esi
c0025761:	53                   	push   ebx
c0025762:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025766:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002576a:	8d 7a ff             	lea    edi,[edx-0x1]
c002576d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025771:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025775:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002577b:	77 25                	ja     c00257a2 <SATA::read(unsigned long long, int, void*)+0x48>
c002577d:	b8 06 00 00 00       	mov    eax,0x6
c0025782:	85 f6                	test   esi,esi
c0025784:	74 1c                	je     c00257a2 <SATA::read(unsigned long long, int, void*)+0x48>
c0025786:	50                   	push   eax
c0025787:	50                   	push   eax
c0025788:	6a 00                	push   0x0
c002578a:	56                   	push   esi
c002578b:	52                   	push   edx
c002578c:	53                   	push   ebx
c002578d:	51                   	push   ecx
c002578e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025792:	e8 5d fd ff ff       	call   c00254f4 <SATA::access(unsigned long long, int, void*, bool)>
c0025797:	83 c4 20             	add    esp,0x20
c002579a:	85 c0                	test   eax,eax
c002579c:	0f 95 c0             	setne  al
c002579f:	0f b6 c0             	movzx  eax,al
c00257a2:	5b                   	pop    ebx
c00257a3:	5e                   	pop    esi
c00257a4:	5f                   	pop    edi
c00257a5:	c3                   	ret    

c00257a6 <SATA::write(unsigned long long, int, void*)>:
c00257a6:	55                   	push   ebp
c00257a7:	b8 04 00 00 00       	mov    eax,0x4
c00257ac:	57                   	push   edi
c00257ad:	56                   	push   esi
c00257ae:	53                   	push   ebx
c00257af:	83 ec 0c             	sub    esp,0xc
c00257b2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00257b6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00257ba:	8d 73 ff             	lea    esi,[ebx-0x1]
c00257bd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00257c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00257c5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00257cb:	77 3d                	ja     c002580a <SATA::write(unsigned long long, int, void*)+0x64>
c00257cd:	b8 06 00 00 00       	mov    eax,0x6
c00257d2:	85 ed                	test   ebp,ebp
c00257d4:	74 34                	je     c002580a <SATA::write(unsigned long long, int, void*)+0x64>
c00257d6:	c1 e3 09             	shl    ebx,0x9
c00257d9:	01 eb                	add    ebx,ebp
c00257db:	89 d6                	mov    esi,edx
c00257dd:	89 cf                	mov    edi,ecx
c00257df:	83 c6 01             	add    esi,0x1
c00257e2:	83 d7 00             	adc    edi,0x0
c00257e5:	50                   	push   eax
c00257e6:	50                   	push   eax
c00257e7:	6a 01                	push   0x1
c00257e9:	55                   	push   ebp
c00257ea:	81 c5 00 02 00 00    	add    ebp,0x200
c00257f0:	6a 01                	push   0x1
c00257f2:	51                   	push   ecx
c00257f3:	52                   	push   edx
c00257f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00257f8:	e8 f7 fc ff ff       	call   c00254f4 <SATA::access(unsigned long long, int, void*, bool)>
c00257fd:	83 c4 20             	add    esp,0x20
c0025800:	89 f2                	mov    edx,esi
c0025802:	89 f9                	mov    ecx,edi
c0025804:	39 dd                	cmp    ebp,ebx
c0025806:	75 d3                	jne    c00257db <SATA::write(unsigned long long, int, void*)+0x35>
c0025808:	31 c0                	xor    eax,eax
c002580a:	83 c4 0c             	add    esp,0xc
c002580d:	5b                   	pop    ebx
c002580e:	5e                   	pop    esi
c002580f:	5f                   	pop    edi
c0025810:	5d                   	pop    ebp
c0025811:	c3                   	ret    

c0025812 <SATAPI::write(unsigned long long, int, void*)>:
c0025812:	b8 03 00 00 00       	mov    eax,0x3
c0025817:	c3                   	ret    

c0025818 <SATAPI::close(int, int, void*)>:
c0025818:	83 ec 0c             	sub    esp,0xc
c002581b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002581f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025825:	85 c0                	test   eax,eax
c0025827:	74 0c                	je     c0025835 <SATAPI::close(int, int, void*)+0x1d>
c0025829:	83 ec 0c             	sub    esp,0xc
c002582c:	8b 10                	mov    edx,DWORD PTR [eax]
c002582e:	50                   	push   eax
c002582f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025832:	83 c4 10             	add    esp,0x10
c0025835:	31 c0                	xor    eax,eax
c0025837:	83 c4 0c             	add    esp,0xc
c002583a:	c3                   	ret    
c002583b:	90                   	nop

c002583c <SATAPI::SATAPI()>:
c002583c:	83 ec 0c             	sub    esp,0xc
c002583f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025843:	83 ec 04             	sub    esp,0x4
c0025846:	68 00 08 00 00       	push   0x800
c002584b:	68 9c d9 02 c0       	push   0xc002d99c
c0025850:	50                   	push   eax
c0025851:	e8 f2 e8 fe ff       	call   c0014148 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025856:	83 c4 10             	add    esp,0x10
c0025859:	ba 48 da 02 c0       	mov    edx,0xc002da48
c002585e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025862:	89 10                	mov    DWORD PTR [eax],edx
c0025864:	90                   	nop
c0025865:	83 c4 0c             	add    esp,0xc
c0025868:	c3                   	ret    
c0025869:	90                   	nop

c002586a <SATAPI::diskRemoved()>:
c002586a:	83 ec 18             	sub    esp,0x18
c002586d:	68 a8 d9 02 c0       	push   0xc002d9a8
c0025872:	e8 52 d0 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0025877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002587b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025882:	83 c4 1c             	add    esp,0x1c
c0025885:	c3                   	ret    

c0025886 <SATAPI::diskInserted()>:
c0025886:	53                   	push   ebx
c0025887:	83 ec 14             	sub    esp,0x14
c002588a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002588e:	68 bf d9 02 c0       	push   0xc002d9bf
c0025893:	e8 31 d0 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0025898:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002589f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00258a2:	e8 09 e9 fe ff       	call   c00141b0 <PhysicalDisk::startCache()>
c00258a7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00258ab:	83 c4 18             	add    esp,0x18
c00258ae:	5b                   	pop    ebx
c00258af:	e9 b6 0b ff ff       	jmp    c001646a <createPartitionsForDisk(PhysicalDisk*)>

c00258b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00258b4:	55                   	push   ebp
c00258b5:	57                   	push   edi
c00258b6:	56                   	push   esi
c00258b7:	53                   	push   ebx
c00258b8:	83 ec 34             	sub    esp,0x34
c00258bb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00258bf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00258c3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00258c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00258cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00258cf:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00258d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00258db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00258df:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00258e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00258e9:	c1 e0 07             	shl    eax,0x7
c00258ec:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00258f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00258f4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00258fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025902:	8d 58 02             	lea    ebx,[eax+0x2]
c0025905:	c1 e3 07             	shl    ebx,0x7
c0025908:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c002590c:	53                   	push   ebx
c002590d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025913:	e8 3e ec ff ff       	call   c0024556 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025918:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002591c:	83 c4 10             	add    esp,0x10
c002591f:	b8 01 00 00 00       	mov    eax,0x1
c0025924:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025929:	0f 84 85 01 00 00    	je     c0025ab4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c002592f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025935:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025937:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002593d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025943:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025947:	c1 e1 05             	shl    ecx,0x5
c002594a:	01 c8                	add    eax,ecx
c002594c:	8b 08                	mov    ecx,DWORD PTR [eax]
c002594e:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025954:	81 c9 25 00 01 00    	or     ecx,0x10025
c002595a:	89 08                	mov    DWORD PTR [eax],ecx
c002595c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025962:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025968:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002596e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025971:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025974:	50                   	push   eax
c0025975:	68 90 00 00 00       	push   0x90
c002597a:	6a 00                	push   0x0
c002597c:	53                   	push   ebx
c002597d:	e8 ce ad fd ff       	call   c0000750 <memset>
c0025982:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025986:	b9 0c 00 00 00       	mov    ecx,0xc
c002598b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002598d:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025993:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025997:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002599d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00259a1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00259a5:	48                   	dec    eax
c00259a6:	25 ff ff 3f 00       	and    eax,0x3fffff
c00259ab:	89 c1                	mov    ecx,eax
c00259ad:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00259b3:	25 00 00 c0 ff       	and    eax,0xffc00000
c00259b8:	09 c8                	or     eax,ecx
c00259ba:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00259c0:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00259c3:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00259ca:	66 25 00 7f          	and    ax,0x7f00
c00259ce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00259d2:	66 0d 27 80          	or     ax,0x8027
c00259d6:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00259da:	66 89 03             	mov    WORD PTR [ebx],ax
c00259dd:	89 d0                	mov    eax,edx
c00259df:	c1 ea 18             	shr    edx,0x18
c00259e2:	c1 e8 10             	shr    eax,0x10
c00259e5:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00259e8:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00259eb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00259ef:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00259f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00259f6:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00259f9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00259fd:	83 c4 10             	add    esp,0x10
c0025a00:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025a04:	31 c0                	xor    eax,eax
c0025a06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025a0a:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025a10:	80 e2 88             	and    dl,0x88
c0025a13:	74 0a                	je     c0025a1f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025a15:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a1a:	74 0a                	je     c0025a26 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025a1c:	40                   	inc    eax
c0025a1d:	eb eb                	jmp    c0025a0a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025a1f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a24:	75 0f                	jne    c0025a35 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025a26:	83 ec 0c             	sub    esp,0xc
c0025a29:	68 45 d9 02 c0       	push   0xc002d945
c0025a2e:	e8 cc 48 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0025a33:	eb 3f                	jmp    c0025a74 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025a35:	ba 01 00 00 00       	mov    edx,0x1
c0025a3a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025a3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025a42:	d3 e2                	shl    edx,cl
c0025a44:	c1 e0 07             	shl    eax,0x7
c0025a47:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025a4d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025a51:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025a57:	85 ca                	test   edx,ecx
c0025a59:	74 23                	je     c0025a7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025a5b:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025a61:	0f ba e1 1e          	bt     ecx,0x1e
c0025a65:	73 ea                	jae    c0025a51 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025a67:	83 ec 0c             	sub    esp,0xc
c0025a6a:	68 d7 d9 02 c0       	push   0xc002d9d7
c0025a6f:	e8 55 ce fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0025a74:	83 c4 10             	add    esp,0x10
c0025a77:	b8 01 00 00 00       	mov    eax,0x1
c0025a7c:	eb 36                	jmp    c0025ab4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025a7e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025a84:	0f ba e0 1e          	bt     eax,0x1e
c0025a88:	73 0a                	jae    c0025a94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025a8a:	83 ec 0c             	sub    esp,0xc
c0025a8d:	68 ea d9 02 c0       	push   0xc002d9ea
c0025a92:	eb db                	jmp    c0025a6f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025a94:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025a99:	74 17                	je     c0025ab2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025a9b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025aa0:	74 10                	je     c0025ab2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025aa2:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025aa8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025aac:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025ab0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025ab2:	31 c0                	xor    eax,eax
c0025ab4:	83 c4 2c             	add    esp,0x2c
c0025ab7:	5b                   	pop    ebx
c0025ab8:	5e                   	pop    esi
c0025ab9:	5f                   	pop    edi
c0025aba:	5d                   	pop    ebp
c0025abb:	c3                   	ret    

c0025abc <SATAPI::eject()>:
c0025abc:	57                   	push   edi
c0025abd:	b9 03 00 00 00       	mov    ecx,0x3
c0025ac2:	53                   	push   ebx
c0025ac3:	83 ec 14             	sub    esp,0x14
c0025ac6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025aca:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025ace:	fc                   	cld    
c0025acf:	31 c0                	xor    eax,eax
c0025ad1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025ad3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025ad8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025add:	50                   	push   eax
c0025ade:	6a 00                	push   0x0
c0025ae0:	6a 00                	push   0x0
c0025ae2:	6a 00                	push   0x0
c0025ae4:	6a 00                	push   0x0
c0025ae6:	6a 02                	push   0x2
c0025ae8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025aec:	50                   	push   eax
c0025aed:	53                   	push   ebx
c0025aee:	e8 c1 fd ff ff       	call   c00258b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025af3:	83 c4 14             	add    esp,0x14
c0025af6:	53                   	push   ebx
c0025af7:	e8 6e fd ff ff       	call   c002586a <SATAPI::diskRemoved()>
c0025afc:	83 c4 24             	add    esp,0x24
c0025aff:	31 c0                	xor    eax,eax
c0025b01:	5b                   	pop    ebx
c0025b02:	5f                   	pop    edi
c0025b03:	c3                   	ret    

c0025b04 <SATAPI::detectMedia()>:
c0025b04:	56                   	push   esi
c0025b05:	53                   	push   ebx
c0025b06:	83 ec 28             	sub    esp,0x28
c0025b09:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025b0d:	6a 0c                	push   0xc
c0025b0f:	6a 00                	push   0x0
c0025b11:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025b15:	56                   	push   esi
c0025b16:	e8 35 ac fd ff       	call   c0000750 <memset>
c0025b1b:	83 c4 0c             	add    esp,0xc
c0025b1e:	6a 00                	push   0x0
c0025b20:	6a 00                	push   0x0
c0025b22:	6a 00                	push   0x0
c0025b24:	6a 00                	push   0x0
c0025b26:	6a 00                	push   0x0
c0025b28:	56                   	push   esi
c0025b29:	53                   	push   ebx
c0025b2a:	e8 85 fd ff ff       	call   c00258b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b2f:	83 c4 1c             	add    esp,0x1c
c0025b32:	6a 0c                	push   0xc
c0025b34:	6a 00                	push   0x0
c0025b36:	56                   	push   esi
c0025b37:	e8 14 ac fd ff       	call   c0000750 <memset>
c0025b3c:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025b41:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025b46:	83 c4 0c             	add    esp,0xc
c0025b49:	6a 01                	push   0x1
c0025b4b:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025b4f:	50                   	push   eax
c0025b50:	6a 00                	push   0x0
c0025b52:	6a 00                	push   0x0
c0025b54:	6a 12                	push   0x12
c0025b56:	56                   	push   esi
c0025b57:	53                   	push   ebx
c0025b58:	e8 57 fd ff ff       	call   c00258b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b5d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025b61:	83 c4 20             	add    esp,0x20
c0025b64:	83 e0 7f             	and    eax,0x7f
c0025b67:	3c 70                	cmp    al,0x70
c0025b69:	74 15                	je     c0025b80 <SATAPI::detectMedia()+0x7c>
c0025b6b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b72:	75 0c                	jne    c0025b80 <SATAPI::detectMedia()+0x7c>
c0025b74:	83 ec 0c             	sub    esp,0xc
c0025b77:	53                   	push   ebx
c0025b78:	e8 09 fd ff ff       	call   c0025886 <SATAPI::diskInserted()>
c0025b7d:	83 c4 10             	add    esp,0x10
c0025b80:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025b84:	83 e0 0f             	and    eax,0xf
c0025b87:	3c 02                	cmp    al,0x2
c0025b89:	75 1b                	jne    c0025ba6 <SATAPI::detectMedia()+0xa2>
c0025b8b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025b90:	75 2d                	jne    c0025bbf <SATAPI::detectMedia()+0xbb>
c0025b92:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b99:	74 24                	je     c0025bbf <SATAPI::detectMedia()+0xbb>
c0025b9b:	83 ec 0c             	sub    esp,0xc
c0025b9e:	53                   	push   ebx
c0025b9f:	e8 c6 fc ff ff       	call   c002586a <SATAPI::diskRemoved()>
c0025ba4:	eb 16                	jmp    c0025bbc <SATAPI::detectMedia()+0xb8>
c0025ba6:	84 c0                	test   al,al
c0025ba8:	75 15                	jne    c0025bbf <SATAPI::detectMedia()+0xbb>
c0025baa:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025bb1:	75 0c                	jne    c0025bbf <SATAPI::detectMedia()+0xbb>
c0025bb3:	83 ec 0c             	sub    esp,0xc
c0025bb6:	53                   	push   ebx
c0025bb7:	e8 ca fc ff ff       	call   c0025886 <SATAPI::diskInserted()>
c0025bbc:	83 c4 10             	add    esp,0x10
c0025bbf:	83 c4 24             	add    esp,0x24
c0025bc2:	5b                   	pop    ebx
c0025bc3:	5e                   	pop    esi
c0025bc4:	c3                   	ret    
c0025bc5:	90                   	nop

c0025bc6 <SATAPI::open(int, int, void*)>:
c0025bc6:	56                   	push   esi
c0025bc7:	53                   	push   ebx
c0025bc8:	50                   	push   eax
c0025bc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025bcd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025bd1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025bdb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025be1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025beb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025bef:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025bf9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025bff:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025c06:	e8 7f 9f fe ff       	call   c000fb8a <Phys::allocatePage()>
c0025c0b:	89 c6                	mov    esi,eax
c0025c0d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025c13:	81 c6 00 10 00 00    	add    esi,0x1000
c0025c19:	e8 6c 9f fe ff       	call   c000fb8a <Phys::allocatePage()>
c0025c1e:	39 c6                	cmp    esi,eax
c0025c20:	74 10                	je     c0025c32 <SATAPI::open(int, int, void*)+0x6c>
c0025c22:	83 ec 0c             	sub    esp,0xc
c0025c25:	68 ff d9 02 c0       	push   0xc002d9ff
c0025c2a:	e8 d0 46 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0025c2f:	83 c4 10             	add    esp,0x10
c0025c32:	83 ec 0c             	sub    esp,0xc
c0025c35:	6a 02                	push   0x2
c0025c37:	e8 87 b8 fe ff       	call   c00114c3 <Virt::allocateKernelVirtualPages(int)>
c0025c3c:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025c42:	6a 03                	push   0x3
c0025c44:	50                   	push   eax
c0025c45:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025c4b:	ff 35 30 f4 02 c0    	push   DWORD PTR ds:0xc002f430
c0025c51:	e8 a4 c0 fe ff       	call   c0011cfa <VAS::mapPage(unsigned long, unsigned long, int)>
c0025c56:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025c5d:	83 c4 14             	add    esp,0x14
c0025c60:	53                   	push   ebx
c0025c61:	e8 9e fe ff ff       	call   c0025b04 <SATAPI::detectMedia()>
c0025c66:	83 c4 14             	add    esp,0x14
c0025c69:	31 c0                	xor    eax,eax
c0025c6b:	5b                   	pop    ebx
c0025c6c:	5e                   	pop    esi
c0025c6d:	c3                   	ret    

c0025c6e <SATAPI::read(unsigned long long, int, void*)>:
c0025c6e:	55                   	push   ebp
c0025c6f:	57                   	push   edi
c0025c70:	56                   	push   esi
c0025c71:	53                   	push   ebx
c0025c72:	83 ec 1c             	sub    esp,0x1c
c0025c75:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025c79:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c7d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025c81:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025c88:	74 19                	je     c0025ca3 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025c8a:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025c8f:	7e 2e                	jle    c0025cbf <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c91:	83 ec 0c             	sub    esp,0xc
c0025c94:	68 15 da 02 c0       	push   0xc002da15
c0025c99:	e8 61 46 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0025c9e:	83 c4 10             	add    esp,0x10
c0025ca1:	eb 1c                	jmp    c0025cbf <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025ca3:	83 ec 0c             	sub    esp,0xc
c0025ca6:	55                   	push   ebp
c0025ca7:	e8 58 fe ff ff       	call   c0025b04 <SATAPI::detectMedia()>
c0025cac:	83 c4 10             	add    esp,0x10
c0025caf:	b8 02 00 00 00       	mov    eax,0x2
c0025cb4:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025cbb:	75 cd                	jne    c0025c8a <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025cbd:	eb 49                	jmp    c0025d08 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025cbf:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025cc3:	b9 03 00 00 00       	mov    ecx,0x3
c0025cc8:	fc                   	cld    
c0025cc9:	31 c0                	xor    eax,eax
c0025ccb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025ccd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025cd2:	89 d8                	mov    eax,ebx
c0025cd4:	86 e0                	xchg   al,ah
c0025cd6:	c1 c0 10             	rol    eax,0x10
c0025cd9:	86 e0                	xchg   al,ah
c0025cdb:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025cdf:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025ce3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025ce7:	50                   	push   eax
c0025ce8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025cec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025cf0:	56                   	push   esi
c0025cf1:	53                   	push   ebx
c0025cf2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025cf6:	c1 e0 0b             	shl    eax,0xb
c0025cf9:	50                   	push   eax
c0025cfa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025cfe:	50                   	push   eax
c0025cff:	55                   	push   ebp
c0025d00:	e8 af fb ff ff       	call   c00258b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025d05:	83 c4 20             	add    esp,0x20
c0025d08:	83 c4 1c             	add    esp,0x1c
c0025d0b:	5b                   	pop    ebx
c0025d0c:	5e                   	pop    esi
c0025d0d:	5f                   	pop    edi
c0025d0e:	5d                   	pop    ebp
c0025d0f:	c3                   	ret    

c0025d10 <AVX::open(int, int, void*)>:
c0025d10:	83 ec 0c             	sub    esp,0xc
c0025d13:	e8 40 11 00 00       	call   c0026e58 <avxInit>
c0025d18:	b8 00 00 00 00       	mov    eax,0x0
c0025d1d:	83 c4 0c             	add    esp,0xc
c0025d20:	c3                   	ret    
c0025d21:	90                   	nop

c0025d22 <AVX::close(int, int, void*)>:
c0025d22:	83 ec 0c             	sub    esp,0xc
c0025d25:	e8 2f 11 00 00       	call   c0026e59 <avxClose>
c0025d2a:	b8 00 00 00 00       	mov    eax,0x0
c0025d2f:	83 c4 0c             	add    esp,0xc
c0025d32:	c3                   	ret    
c0025d33:	90                   	nop

c0025d34 <AVX::available()>:
c0025d34:	83 ec 0c             	sub    esp,0xc
c0025d37:	e8 14 11 00 00       	call   c0026e50 <avxDetect>
c0025d3c:	85 c0                	test   eax,eax
c0025d3e:	0f 95 c0             	setne  al
c0025d41:	83 c4 0c             	add    esp,0xc
c0025d44:	c3                   	ret    
c0025d45:	90                   	nop

c0025d46 <AVX::save(void*)>:
c0025d46:	83 ec 0c             	sub    esp,0xc
c0025d49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d4d:	83 ec 0c             	sub    esp,0xc
c0025d50:	50                   	push   eax
c0025d51:	e8 00 11 00 00       	call   c0026e56 <avxSave>
c0025d56:	83 c4 10             	add    esp,0x10
c0025d59:	90                   	nop
c0025d5a:	83 c4 0c             	add    esp,0xc
c0025d5d:	c3                   	ret    

c0025d5e <AVX::load(void*)>:
c0025d5e:	83 ec 0c             	sub    esp,0xc
c0025d61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d65:	83 ec 0c             	sub    esp,0xc
c0025d68:	50                   	push   eax
c0025d69:	e8 e9 10 00 00       	call   c0026e57 <avxLoad>
c0025d6e:	83 c4 10             	add    esp,0x10
c0025d71:	90                   	nop
c0025d72:	83 c4 0c             	add    esp,0xc
c0025d75:	c3                   	ret    

c0025d76 <AVX::AVX()>:
c0025d76:	83 ec 0c             	sub    esp,0xc
c0025d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d7d:	83 ec 08             	sub    esp,0x8
c0025d80:	68 78 da 02 c0       	push   0xc002da78
c0025d85:	50                   	push   eax
c0025d86:	e8 9b e4 fe ff       	call   c0014226 <FPU::FPU(char const*)>
c0025d8b:	83 c4 10             	add    esp,0x10
c0025d8e:	ba 88 da 02 c0       	mov    edx,0xc002da88
c0025d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d97:	89 10                	mov    DWORD PTR [eax],edx
c0025d99:	90                   	nop
c0025d9a:	83 c4 0c             	add    esp,0xc
c0025d9d:	c3                   	ret    

c0025d9e <MMX::available()>:
c0025d9e:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0025da3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025da9:	83 e0 20             	and    eax,0x20
c0025dac:	84 c0                	test   al,al
c0025dae:	0f 95 c0             	setne  al
c0025db1:	c3                   	ret    

c0025db2 <MMX::open(int, int, void*)>:
c0025db2:	83 ec 0c             	sub    esp,0xc
c0025db5:	e8 28 11 00 00       	call   c0026ee2 <x87Init>
c0025dba:	b8 00 00 00 00       	mov    eax,0x0
c0025dbf:	83 c4 0c             	add    esp,0xc
c0025dc2:	c3                   	ret    
c0025dc3:	90                   	nop

c0025dc4 <MMX::close(int, int, void*)>:
c0025dc4:	83 ec 0c             	sub    esp,0xc
c0025dc7:	e8 30 11 00 00       	call   c0026efc <x87Close>
c0025dcc:	b8 00 00 00 00       	mov    eax,0x0
c0025dd1:	83 c4 0c             	add    esp,0xc
c0025dd4:	c3                   	ret    
c0025dd5:	90                   	nop

c0025dd6 <MMX::save(void*)>:
c0025dd6:	83 ec 0c             	sub    esp,0xc
c0025dd9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ddd:	83 ec 0c             	sub    esp,0xc
c0025de0:	50                   	push   eax
c0025de1:	e8 eb 10 00 00       	call   c0026ed1 <x87Save>
c0025de6:	83 c4 10             	add    esp,0x10
c0025de9:	90                   	nop
c0025dea:	83 c4 0c             	add    esp,0xc
c0025ded:	c3                   	ret    

c0025dee <MMX::load(void*)>:
c0025dee:	83 ec 0c             	sub    esp,0xc
c0025df1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025df5:	83 ec 0c             	sub    esp,0xc
c0025df8:	50                   	push   eax
c0025df9:	e8 dc 10 00 00       	call   c0026eda <x87Load>
c0025dfe:	83 c4 10             	add    esp,0x10
c0025e01:	90                   	nop
c0025e02:	83 c4 0c             	add    esp,0xc
c0025e05:	c3                   	ret    

c0025e06 <MMX::MMX()>:
c0025e06:	83 ec 0c             	sub    esp,0xc
c0025e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e0d:	83 ec 08             	sub    esp,0x8
c0025e10:	68 b8 da 02 c0       	push   0xc002dab8
c0025e15:	50                   	push   eax
c0025e16:	e8 0b e4 fe ff       	call   c0014226 <FPU::FPU(char const*)>
c0025e1b:	83 c4 10             	add    esp,0x10
c0025e1e:	ba c8 da 02 c0       	mov    edx,0xc002dac8
c0025e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e27:	89 10                	mov    DWORD PTR [eax],edx
c0025e29:	90                   	nop
c0025e2a:	83 c4 0c             	add    esp,0xc
c0025e2d:	c3                   	ret    

c0025e2e <SSE::open(int, int, void*)>:
c0025e2e:	83 ec 0c             	sub    esp,0xc
c0025e31:	e8 5e 10 00 00       	call   c0026e94 <sseInit>
c0025e36:	b8 00 00 00 00       	mov    eax,0x0
c0025e3b:	83 c4 0c             	add    esp,0xc
c0025e3e:	c3                   	ret    
c0025e3f:	90                   	nop

c0025e40 <SSE::close(int, int, void*)>:
c0025e40:	83 ec 0c             	sub    esp,0xc
c0025e43:	e8 5c 10 00 00       	call   c0026ea4 <sseClose>
c0025e48:	b8 00 00 00 00       	mov    eax,0x0
c0025e4d:	83 c4 0c             	add    esp,0xc
c0025e50:	c3                   	ret    
c0025e51:	90                   	nop

c0025e52 <SSE::available()>:
c0025e52:	83 ec 1c             	sub    esp,0x1c
c0025e55:	e8 16 10 00 00       	call   c0026e70 <absolutelyNoChanceInHell>
c0025e5a:	85 c0                	test   eax,eax
c0025e5c:	0f 95 c0             	setne  al
c0025e5f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025e63:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025e67:	83 c4 1c             	add    esp,0x1c
c0025e6a:	c3                   	ret    
c0025e6b:	90                   	nop

c0025e6c <SSE::save(void*)>:
c0025e6c:	83 ec 0c             	sub    esp,0xc
c0025e6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e73:	83 ec 0c             	sub    esp,0xc
c0025e76:	50                   	push   eax
c0025e77:	e8 0c 10 00 00       	call   c0026e88 <sseSave>
c0025e7c:	83 c4 10             	add    esp,0x10
c0025e7f:	90                   	nop
c0025e80:	83 c4 0c             	add    esp,0xc
c0025e83:	c3                   	ret    

c0025e84 <SSE::load(void*)>:
c0025e84:	83 ec 0c             	sub    esp,0xc
c0025e87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e8b:	83 ec 0c             	sub    esp,0xc
c0025e8e:	50                   	push   eax
c0025e8f:	e8 fa 0f 00 00       	call   c0026e8e <sseLoad>
c0025e94:	83 c4 10             	add    esp,0x10
c0025e97:	90                   	nop
c0025e98:	83 c4 0c             	add    esp,0xc
c0025e9b:	c3                   	ret    

c0025e9c <SSE::SSE()>:
c0025e9c:	83 ec 0c             	sub    esp,0xc
c0025e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea3:	83 ec 08             	sub    esp,0x8
c0025ea6:	68 f8 da 02 c0       	push   0xc002daf8
c0025eab:	50                   	push   eax
c0025eac:	e8 75 e3 fe ff       	call   c0014226 <FPU::FPU(char const*)>
c0025eb1:	83 c4 10             	add    esp,0x10
c0025eb4:	ba 08 db 02 c0       	mov    edx,0xc002db08
c0025eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ebd:	89 10                	mov    DWORD PTR [eax],edx
c0025ebf:	90                   	nop
c0025ec0:	83 c4 0c             	add    esp,0xc
c0025ec3:	c3                   	ret    

c0025ec4 <x87::open(int, int, void*)>:
c0025ec4:	83 ec 0c             	sub    esp,0xc
c0025ec7:	e8 16 10 00 00       	call   c0026ee2 <x87Init>
c0025ecc:	b8 00 00 00 00       	mov    eax,0x0
c0025ed1:	83 c4 0c             	add    esp,0xc
c0025ed4:	c3                   	ret    
c0025ed5:	90                   	nop

c0025ed6 <x87::close(int, int, void*)>:
c0025ed6:	83 ec 0c             	sub    esp,0xc
c0025ed9:	e8 1e 10 00 00       	call   c0026efc <x87Close>
c0025ede:	b8 00 00 00 00       	mov    eax,0x0
c0025ee3:	83 c4 0c             	add    esp,0xc
c0025ee6:	c3                   	ret    
c0025ee7:	90                   	nop

c0025ee8 <x87::available()>:
c0025ee8:	83 ec 0c             	sub    esp,0xc
c0025eeb:	e8 c6 0f 00 00       	call   c0026eb6 <x87Detect>
c0025ef0:	85 c0                	test   eax,eax
c0025ef2:	0f 95 c0             	setne  al
c0025ef5:	83 c4 0c             	add    esp,0xc
c0025ef8:	c3                   	ret    
c0025ef9:	90                   	nop

c0025efa <x87::save(void*)>:
c0025efa:	83 ec 0c             	sub    esp,0xc
c0025efd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f01:	83 ec 0c             	sub    esp,0xc
c0025f04:	50                   	push   eax
c0025f05:	e8 c7 0f 00 00       	call   c0026ed1 <x87Save>
c0025f0a:	83 c4 10             	add    esp,0x10
c0025f0d:	90                   	nop
c0025f0e:	83 c4 0c             	add    esp,0xc
c0025f11:	c3                   	ret    

c0025f12 <x87::load(void*)>:
c0025f12:	83 ec 0c             	sub    esp,0xc
c0025f15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f19:	83 ec 0c             	sub    esp,0xc
c0025f1c:	50                   	push   eax
c0025f1d:	e8 b8 0f 00 00       	call   c0026eda <x87Load>
c0025f22:	83 c4 10             	add    esp,0x10
c0025f25:	90                   	nop
c0025f26:	83 c4 0c             	add    esp,0xc
c0025f29:	c3                   	ret    

c0025f2a <x87::x87()>:
c0025f2a:	83 ec 0c             	sub    esp,0xc
c0025f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f31:	83 ec 08             	sub    esp,0x8
c0025f34:	68 38 db 02 c0       	push   0xc002db38
c0025f39:	50                   	push   eax
c0025f3a:	e8 e7 e2 fe ff       	call   c0014226 <FPU::FPU(char const*)>
c0025f3f:	83 c4 10             	add    esp,0x10
c0025f42:	ba 48 db 02 c0       	mov    edx,0xc002db48
c0025f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f4b:	89 10                	mov    DWORD PTR [eax],edx
c0025f4d:	90                   	nop
c0025f4e:	83 c4 0c             	add    esp,0xc
c0025f51:	c3                   	ret    

c0025f52 <APIC::disable()>:
c0025f52:	90                   	nop
c0025f53:	c3                   	ret    

c0025f54 <APIC::close(int, int, void*)>:
c0025f54:	55                   	push   ebp
c0025f55:	89 e5                	mov    ebp,esp
c0025f57:	83 ec 08             	sub    esp,0x8
c0025f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f5f:	83 c0 3c             	add    eax,0x3c
c0025f62:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f64:	83 ec 0c             	sub    esp,0xc
c0025f67:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f6a:	ff d0                	call   eax
c0025f6c:	83 c4 10             	add    esp,0x10
c0025f6f:	b8 00 00 00 00       	mov    eax,0x0
c0025f74:	c9                   	leave  
c0025f75:	c3                   	ret    

c0025f76 <IOAPIC::close(int, int, void*)>:
c0025f76:	b8 00 00 00 00       	mov    eax,0x0
c0025f7b:	c3                   	ret    

c0025f7c <APIC::io_wait()>:
c0025f7c:	eb 00                	jmp    c0025f7e <APIC::io_wait()+0x2>
c0025f7e:	eb 00                	jmp    c0025f80 <APIC::io_wait()+0x4>
c0025f80:	90                   	nop
c0025f81:	c3                   	ret    

c0025f82 <APIC::getBase()>:
c0025f82:	55                   	push   ebp
c0025f83:	89 e5                	mov    ebp,esp
c0025f85:	83 ec 18             	sub    esp,0x18
c0025f88:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0025f8d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025f93:	83 e0 08             	and    eax,0x8
c0025f96:	84 c0                	test   al,al
c0025f98:	75 07                	jne    c0025fa1 <APIC::getBase()+0x1f>
c0025f9a:	b8 00 00 00 00       	mov    eax,0x0
c0025f9f:	eb 21                	jmp    c0025fc2 <APIC::getBase()+0x40>
c0025fa1:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0025fa6:	83 ec 08             	sub    esp,0x8
c0025fa9:	6a 1b                	push   0x1b
c0025fab:	50                   	push   eax
c0025fac:	e8 81 8e fe ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0025fb1:	83 c4 10             	add    esp,0x10
c0025fb4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025fb7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025fba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025fbd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025fc2:	c9                   	leave  
c0025fc3:	c3                   	ret    

c0025fc4 <APIC::eoi(unsigned char)>:
c0025fc4:	55                   	push   ebp
c0025fc5:	89 e5                	mov    ebp,esp
c0025fc7:	83 ec 28             	sub    esp,0x28
c0025fca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fcd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025fd0:	83 ec 0c             	sub    esp,0xc
c0025fd3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fd6:	e8 a7 ff ff ff       	call   c0025f82 <APIC::getBase()>
c0025fdb:	83 c4 10             	add    esp,0x10
c0025fde:	05 b0 00 00 00       	add    eax,0xb0
c0025fe3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025fe6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025fe9:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025fef:	90                   	nop
c0025ff0:	c9                   	leave  
c0025ff1:	c3                   	ret    

c0025ff2 <APIC::open(int, int, void*)>:
c0025ff2:	55                   	push   ebp
c0025ff3:	89 e5                	mov    ebp,esp
c0025ff5:	57                   	push   edi
c0025ff6:	56                   	push   esi
c0025ff7:	53                   	push   ebx
c0025ff8:	83 ec 2c             	sub    esp,0x2c
c0025ffb:	83 ec 0c             	sub    esp,0xc
c0025ffe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026001:	e8 7c ff ff ff       	call   c0025f82 <APIC::getBase()>
c0026006:	83 c4 10             	add    esp,0x10
c0026009:	89 c2                	mov    edx,eax
c002600b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002600e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026014:	0f b6 f8             	movzx  edi,al
c0026017:	89 d0                	mov    eax,edx
c0026019:	ba 00 00 00 00       	mov    edx,0x0
c002601e:	89 c1                	mov    ecx,eax
c0026020:	80 e5 ff             	and    ch,0xff
c0026023:	89 cb                	mov    ebx,ecx
c0026025:	0f b6 f2             	movzx  esi,dl
c0026028:	89 d8                	mov    eax,ebx
c002602a:	89 f2                	mov    edx,esi
c002602c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002602f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026032:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026036:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002603a:	83 e0 00             	and    eax,0x0
c002603d:	09 d0                	or     eax,edx
c002603f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026043:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026046:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002604c:	8d 50 01             	lea    edx,[eax+0x1]
c002604f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026052:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026058:	0f b6 d0             	movzx  edx,al
c002605b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002605e:	83 c2 08             	add    edx,0x8
c0026061:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026065:	0f b6 c9             	movzx  ecx,cl
c0026068:	81 c9 00 00 01 00    	or     ecx,0x10000
c002606e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026072:	83 ec 0c             	sub    esp,0xc
c0026075:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026078:	e8 05 ff ff ff       	call   c0025f82 <APIC::getBase()>
c002607d:	83 c4 10             	add    esp,0x10
c0026080:	05 f0 00 00 00       	add    eax,0xf0
c0026085:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026088:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002608b:	8b 00                	mov    eax,DWORD PTR [eax]
c002608d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026090:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0026097:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002609e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00260a1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00260a4:	89 10                	mov    DWORD PTR [eax],edx
c00260a6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00260ad:	a1 90 1b 03 c0       	mov    eax,ds:0xc0031b90
c00260b2:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00260b5:	7d 7c                	jge    c0026133 <APIC::open(int, int, void*)+0x141>
c00260b7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260ba:	8b 04 85 a0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce460]
c00260c1:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00260c4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260c7:	8b 04 85 a0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce460]
c00260ce:	c1 e8 08             	shr    eax,0x8
c00260d1:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00260d5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260d8:	8b 04 85 a0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce460]
c00260df:	c1 e8 18             	shr    eax,0x18
c00260e2:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00260e5:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00260e9:	75 40                	jne    c002612b <APIC::open(int, int, void*)+0x139>
c00260eb:	83 ec 0c             	sub    esp,0xc
c00260ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260f1:	e8 8c fe ff ff       	call   c0025f82 <APIC::getBase()>
c00260f6:	83 c4 10             	add    esp,0x10
c00260f9:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00260fd:	75 07                	jne    c0026106 <APIC::open(int, int, void*)+0x114>
c00260ff:	ba 60 03 00 00       	mov    edx,0x360
c0026104:	eb 05                	jmp    c002610b <APIC::open(int, int, void*)+0x119>
c0026106:	ba 50 03 00 00       	mov    edx,0x350
c002610b:	01 d0                	add    eax,edx
c002610d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026110:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026113:	8b 00                	mov    eax,DWORD PTR [eax]
c0026115:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026118:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002611f:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0026123:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026126:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026129:	89 10                	mov    DWORD PTR [eax],edx
c002612b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002612e:	e9 7a ff ff ff       	jmp    c00260ad <APIC::open(int, int, void*)+0xbb>
c0026133:	b8 00 00 00 00       	mov    eax,0x0
c0026138:	8d 65 f4             	lea    esp,[ebp-0xc]
c002613b:	5b                   	pop    ebx
c002613c:	5e                   	pop    esi
c002613d:	5f                   	pop    edi
c002613e:	5d                   	pop    ebp
c002613f:	c3                   	ret    

c0026140 <IOAPIC::IOAPIC()>:
c0026140:	83 ec 0c             	sub    esp,0xc
c0026143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026147:	83 ec 08             	sub    esp,0x8
c002614a:	68 78 db 02 c0       	push   0xc002db78
c002614f:	50                   	push   eax
c0026150:	e8 b1 dd fe ff       	call   c0013f06 <Device::Device(char const*)>
c0026155:	83 c4 10             	add    esp,0x10
c0026158:	ba a0 dc 02 c0       	mov    edx,0xc002dca0
c002615d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026161:	89 10                	mov    DWORD PTR [eax],edx
c0026163:	90                   	nop
c0026164:	83 c4 0c             	add    esp,0xc
c0026167:	c3                   	ret    

c0026168 <APIC::APIC()>:
c0026168:	53                   	push   ebx
c0026169:	83 ec 18             	sub    esp,0x18
c002616c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026170:	83 ec 08             	sub    esp,0x8
c0026173:	68 80 db 02 c0       	push   0xc002db80
c0026178:	50                   	push   eax
c0026179:	e8 02 e5 fe ff       	call   c0014680 <InterruptController::InterruptController(char const*)>
c002617e:	83 c4 10             	add    esp,0x10
c0026181:	ba 58 dc 02 c0       	mov    edx,0xc002dc58
c0026186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002618a:	89 10                	mov    DWORD PTR [eax],edx
c002618c:	a0 60 36 03 c0       	mov    al,ds:0xc0033660
c0026191:	83 f0 01             	xor    eax,0x1
c0026194:	84 c0                	test   al,al
c0026196:	0f 84 a1 00 00 00    	je     c002623d <APIC::APIC()+0xd5>
c002619c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00261a1:	a0 40 1c 03 c0       	mov    al,ds:0xc0031c40
c00261a6:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00261aa:	0f 83 86 00 00 00    	jae    c0026236 <APIC::APIC()+0xce>
c00261b0:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00261b8:	83 ec 0c             	sub    esp,0xc
c00261bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00261bf:	e8 c8 96 fe ff       	call   c000f88c <malloc>
c00261c4:	83 c4 10             	add    esp,0x10
c00261c7:	89 c3                	mov    ebx,eax
c00261c9:	83 ec 0c             	sub    esp,0xc
c00261cc:	53                   	push   ebx
c00261cd:	e8 6e ff ff ff       	call   c0026140 <IOAPIC::IOAPIC()>
c00261d2:	83 c4 10             	add    esp,0x10
c00261d5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00261d9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00261de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00261e2:	89 14 85 40 36 03 c0 	mov    DWORD PTR [eax*4-0x3ffcc9c0],edx
c00261e9:	a1 20 36 03 c0       	mov    eax,ds:0xc0033620
c00261ee:	40                   	inc    eax
c00261ef:	a3 20 36 03 c0       	mov    ds:0xc0033620,eax
c00261f4:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00261f9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00261ff:	83 ec 08             	sub    esp,0x8
c0026202:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026206:	50                   	push   eax
c0026207:	e8 f6 da fe ff       	call   c0013d02 <Device::addChild(Device*)>
c002620c:	83 c4 10             	add    esp,0x10
c002620f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026213:	8b 00                	mov    eax,DWORD PTR [eax]
c0026215:	83 c0 08             	add    eax,0x8
c0026218:	8b 00                	mov    eax,DWORD PTR [eax]
c002621a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002621f:	6a 00                	push   0x0
c0026221:	6a 00                	push   0x0
c0026223:	52                   	push   edx
c0026224:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026228:	ff d0                	call   eax
c002622a:	83 c4 10             	add    esp,0x10
c002622d:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0026231:	e9 6b ff ff ff       	jmp    c00261a1 <APIC::APIC()+0x39>
c0026236:	c6 05 60 36 03 c0 01 	mov    BYTE PTR ds:0xc0033660,0x1
c002623d:	90                   	nop
c002623e:	83 c4 18             	add    esp,0x18
c0026241:	5b                   	pop    ebx
c0026242:	c3                   	ret    
c0026243:	90                   	nop

c0026244 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0026244:	55                   	push   ebp
c0026245:	89 e5                	mov    ebp,esp
c0026247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002624a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026250:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026253:	72 1d                	jb     c0026272 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026258:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002625e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026261:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0026267:	01 d0                	add    eax,edx
c0026269:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002626c:	73 04                	jae    c0026272 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002626e:	b0 01                	mov    al,0x1
c0026270:	eb 02                	jmp    c0026274 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026272:	b0 00                	mov    al,0x0
c0026274:	5d                   	pop    ebp
c0026275:	c3                   	ret    

c0026276 <IOAPIC::read(int)>:
c0026276:	55                   	push   ebp
c0026277:	89 e5                	mov    ebp,esp
c0026279:	83 ec 10             	sub    esp,0x10
c002627c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002627f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026285:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026288:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002628b:	0f b6 d0             	movzx  edx,al
c002628e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026291:	89 10                	mov    DWORD PTR [eax],edx
c0026293:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026296:	83 c0 10             	add    eax,0x10
c0026299:	8b 00                	mov    eax,DWORD PTR [eax]
c002629b:	c9                   	leave  
c002629c:	c3                   	ret    
c002629d:	90                   	nop

c002629e <IOAPIC::open(int, int, void*)>:
c002629e:	55                   	push   ebp
c002629f:	89 e5                	mov    ebp,esp
c00262a1:	57                   	push   edi
c00262a2:	56                   	push   esi
c00262a3:	53                   	push   ebx
c00262a4:	83 ec 0c             	sub    esp,0xc
c00262a7:	83 ec 0c             	sub    esp,0xc
c00262aa:	68 ab db 02 c0       	push   0xc002dbab
c00262af:	e8 15 c6 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c00262b4:	83 c4 10             	add    esp,0x10
c00262b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262ba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00262bd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00262c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00262cc:	8b 14 85 80 1c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce380]
c00262d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262d6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00262dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00262e5:	8b 14 85 00 1d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce300]
c00262ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262ef:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00262f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262f8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00262fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026301:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026307:	0f b6 f8             	movzx  edi,al
c002630a:	89 d0                	mov    eax,edx
c002630c:	ba 00 00 00 00       	mov    edx,0x0
c0026311:	89 c1                	mov    ecx,eax
c0026313:	80 e5 ff             	and    ch,0xff
c0026316:	89 cb                	mov    ebx,ecx
c0026318:	0f b6 f2             	movzx  esi,dl
c002631b:	89 d8                	mov    eax,ebx
c002631d:	89 f2                	mov    edx,esi
c002631f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026322:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026325:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026329:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002632d:	83 e0 00             	and    eax,0x0
c0026330:	09 d0                	or     eax,edx
c0026332:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026339:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002633f:	8d 50 01             	lea    edx,[eax+0x1]
c0026342:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026345:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002634b:	0f b6 d0             	movzx  edx,al
c002634e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026351:	83 c2 08             	add    edx,0x8
c0026354:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026358:	0f b6 c9             	movzx  ecx,cl
c002635b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026361:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026365:	83 ec 08             	sub    esp,0x8
c0026368:	6a 01                	push   0x1
c002636a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002636d:	e8 04 ff ff ff       	call   c0026276 <IOAPIC::read(int)>
c0026372:	83 c4 10             	add    esp,0x10
c0026375:	c1 f8 10             	sar    eax,0x10
c0026378:	0f b6 c0             	movzx  eax,al
c002637b:	8d 50 01             	lea    edx,[eax+0x1]
c002637e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026381:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0026387:	b8 00 00 00 00       	mov    eax,0x0
c002638c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002638f:	5b                   	pop    ebx
c0026390:	5e                   	pop    esi
c0026391:	5f                   	pop    edi
c0026392:	5d                   	pop    ebp
c0026393:	c3                   	ret    

c0026394 <IOAPIC::write(int, int)>:
c0026394:	55                   	push   ebp
c0026395:	89 e5                	mov    ebp,esp
c0026397:	83 ec 10             	sub    esp,0x10
c002639a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002639d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00263a3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00263a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263a9:	0f b6 d0             	movzx  edx,al
c00263ac:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00263af:	89 10                	mov    DWORD PTR [eax],edx
c00263b1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00263b4:	8d 50 10             	lea    edx,[eax+0x10]
c00263b7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00263ba:	89 02                	mov    DWORD PTR [edx],eax
c00263bc:	90                   	nop
c00263bd:	c9                   	leave  
c00263be:	c3                   	ret    
c00263bf:	90                   	nop

c00263c0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00263c0:	55                   	push   ebp
c00263c1:	89 e5                	mov    ebp,esp
c00263c3:	53                   	push   ebx
c00263c4:	83 ec 2c             	sub    esp,0x2c
c00263c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263ca:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00263cd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00263d0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00263d3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00263d6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00263d9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00263dc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00263df:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00263e2:	88 d8                	mov    al,bl
c00263e4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00263e7:	88 c8                	mov    al,cl
c00263e9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00263ec:	88 d0                	mov    al,dl
c00263ee:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00263f1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263f5:	83 c0 08             	add    eax,0x8
c00263f8:	01 c0                	add    eax,eax
c00263fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00263fd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026401:	83 c0 08             	add    eax,0x8
c0026404:	01 c0                	add    eax,eax
c0026406:	40                   	inc    eax
c0026407:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002640a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002640d:	50                   	push   eax
c002640e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026411:	e8 60 fe ff ff       	call   c0026276 <IOAPIC::read(int)>
c0026416:	83 c4 08             	add    esp,0x8
c0026419:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002641c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0026423:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026426:	c1 e0 18             	shl    eax,0x18
c0026429:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002642c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002642f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026432:	52                   	push   edx
c0026433:	50                   	push   eax
c0026434:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026437:	e8 58 ff ff ff       	call   c0026394 <IOAPIC::write(int, int)>
c002643c:	83 c4 0c             	add    esp,0xc
c002643f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026442:	50                   	push   eax
c0026443:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026446:	e8 2b fe ff ff       	call   c0026276 <IOAPIC::read(int)>
c002644b:	83 c4 08             	add    esp,0x8
c002644e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026451:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0026458:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002645f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026466:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002646a:	74 09                	je     c0026475 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002646c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026473:	eb 07                	jmp    c002647c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026475:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002647c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026480:	74 09                	je     c002648b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026482:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026489:	eb 07                	jmp    c0026492 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002648b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026492:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026499:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002649d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00264a0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00264a3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00264a6:	52                   	push   edx
c00264a7:	50                   	push   eax
c00264a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264ab:	e8 e4 fe ff ff       	call   c0026394 <IOAPIC::write(int, int)>
c00264b0:	83 c4 0c             	add    esp,0xc
c00264b3:	90                   	nop
c00264b4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00264b7:	c9                   	leave  
c00264b8:	c3                   	ret    
c00264b9:	90                   	nop

c00264ba <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00264ba:	55                   	push   ebp
c00264bb:	89 e5                	mov    ebp,esp
c00264bd:	57                   	push   edi
c00264be:	56                   	push   esi
c00264bf:	53                   	push   ebx
c00264c0:	83 ec 2c             	sub    esp,0x2c
c00264c3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00264c6:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00264c9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00264cd:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00264d1:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00264d5:	74 5a                	je     c0026531 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264d7:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00264db:	7f 44                	jg     c0026521 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00264dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264e0:	05 20 e5 02 c0       	add    eax,0xc002e520
c00264e5:	8a 00                	mov    al,BYTE PTR [eax]
c00264e7:	0f b6 c0             	movzx  eax,al
c00264ea:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00264ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264f0:	66 8b 84 00 20 1c 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce3e0]
c00264f8:	0f b7 c0             	movzx  eax,ax
c00264fb:	83 e0 02             	and    eax,0x2
c00264fe:	85 c0                	test   eax,eax
c0026500:	74 04                	je     c0026506 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0026502:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026506:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026509:	66 8b 84 00 20 1c 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce3e0]
c0026511:	0f b7 c0             	movzx  eax,ax
c0026514:	83 e0 08             	and    eax,0x8
c0026517:	85 c0                	test   eax,eax
c0026519:	74 16                	je     c0026531 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002651b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002651f:	eb 10                	jmp    c0026531 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026521:	83 ec 0c             	sub    esp,0xc
c0026524:	68 bc db 02 c0       	push   0xc002dbbc
c0026529:	e8 d1 3d ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c002652e:	83 c4 10             	add    esp,0x10
c0026531:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0026535:	a1 20 36 03 c0       	mov    eax,ds:0xc0033620
c002653a:	83 ec 08             	sub    esp,0x8
c002653d:	50                   	push   eax
c002653e:	68 f4 db 02 c0       	push   0xc002dbf4
c0026543:	e8 81 c3 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0026548:	83 c4 10             	add    esp,0x10
c002654b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026552:	a1 20 36 03 c0       	mov    eax,ds:0xc0033620
c0026557:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002655a:	7d 67                	jge    c00265c3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002655c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002655f:	8b 04 85 40 36 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc9c0]
c0026566:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026569:	83 ec 08             	sub    esp,0x8
c002656c:	52                   	push   edx
c002656d:	50                   	push   eax
c002656e:	e8 d1 fc ff ff       	call   c0026244 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026573:	83 c4 10             	add    esp,0x10
c0026576:	84 c0                	test   al,al
c0026578:	74 44                	je     c00265be <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002657a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002657d:	8b 1c 85 40 36 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcc9c0]
c0026584:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026588:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002658b:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002658f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026592:	83 c0 20             	add    eax,0x20
c0026595:	0f b6 f0             	movzx  esi,al
c0026598:	b8 00 00 00 00       	mov    eax,0x0
c002659d:	99                   	cdq    
c002659e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00265a1:	0f b6 c9             	movzx  ecx,cl
c00265a4:	83 ec 04             	sub    esp,0x4
c00265a7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00265aa:	57                   	push   edi
c00265ab:	56                   	push   esi
c00265ac:	52                   	push   edx
c00265ad:	50                   	push   eax
c00265ae:	51                   	push   ecx
c00265af:	53                   	push   ebx
c00265b0:	e8 0b fe ff ff       	call   c00263c0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00265b5:	83 c4 20             	add    esp,0x20
c00265b8:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00265bc:	eb 05                	jmp    c00265c3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00265be:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00265c1:	eb 8f                	jmp    c0026552 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00265c3:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00265c6:	83 f0 01             	xor    eax,0x1
c00265c9:	84 c0                	test   al,al
c00265cb:	74 10                	je     c00265dd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00265cd:	83 ec 0c             	sub    esp,0xc
c00265d0:	68 0b dc 02 c0       	push   0xc002dc0b
c00265d5:	e8 25 3d ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c00265da:	83 c4 10             	add    esp,0x10
c00265dd:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00265e1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00265e8:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00265ec:	7f 65                	jg     c0026653 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00265ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265f1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265f4:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265fb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265fe:	01 ca                	add    edx,ecx
c0026600:	83 c2 54             	add    edx,0x54
c0026603:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026607:	85 c0                	test   eax,eax
c0026609:	75 43                	jne    c002664e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002660b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002660e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026611:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026618:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002661b:	01 ca                	add    edx,ecx
c002661d:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026620:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026623:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002662a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002662d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026634:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026637:	01 ca                	add    edx,ecx
c0026639:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002663f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026642:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026646:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026649:	83 e8 20             	sub    eax,0x20
c002664c:	eb 1a                	jmp    c0026668 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002664e:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026651:	eb 95                	jmp    c00265e8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026653:	83 ec 0c             	sub    esp,0xc
c0026656:	68 18 dc 02 c0       	push   0xc002dc18
c002665b:	e8 9f 3c ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0026660:	83 c4 10             	add    esp,0x10
c0026663:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026668:	8d 65 f4             	lea    esp,[ebp-0xc]
c002666b:	5b                   	pop    ebx
c002666c:	5e                   	pop    esi
c002666d:	5f                   	pop    edi
c002666e:	5d                   	pop    ebp
c002666f:	c3                   	ret    

c0026670 <PIC::disable()>:
c0026670:	55                   	push   ebp
c0026671:	89 e5                	mov    ebp,esp
c0026673:	83 ec 10             	sub    esp,0x10
c0026676:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002667c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026680:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026683:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026687:	ee                   	out    dx,al
c0026688:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002668e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026692:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026695:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026699:	ee                   	out    dx,al
c002669a:	90                   	nop
c002669b:	c9                   	leave  
c002669c:	c3                   	ret    
c002669d:	90                   	nop

c002669e <PIC::close(int, int, void*)>:
c002669e:	55                   	push   ebp
c002669f:	89 e5                	mov    ebp,esp
c00266a1:	83 ec 08             	sub    esp,0x8
c00266a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00266a9:	83 c0 3c             	add    eax,0x3c
c00266ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00266ae:	83 ec 0c             	sub    esp,0xc
c00266b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266b4:	ff d0                	call   eax
c00266b6:	83 c4 10             	add    esp,0x10
c00266b9:	b8 00 00 00 00       	mov    eax,0x0
c00266be:	c9                   	leave  
c00266bf:	c3                   	ret    

c00266c0 <PIC::PIC()>:
c00266c0:	83 ec 0c             	sub    esp,0xc
c00266c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c7:	83 ec 08             	sub    esp,0x8
c00266ca:	68 c4 dc 02 c0       	push   0xc002dcc4
c00266cf:	50                   	push   eax
c00266d0:	e8 ab df fe ff       	call   c0014680 <InterruptController::InterruptController(char const*)>
c00266d5:	83 c4 10             	add    esp,0x10
c00266d8:	ba f0 dc 02 c0       	mov    edx,0xc002dcf0
c00266dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e1:	89 10                	mov    DWORD PTR [eax],edx
c00266e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266ed:	0f b6 d0             	movzx  edx,al
c00266f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266f4:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00266fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026705:	0f b6 d0             	movzx  edx,al
c0026708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002670c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026715:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002671b:	8d 50 01             	lea    edx,[eax+0x1]
c002671e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026722:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026728:	0f b6 d0             	movzx  edx,al
c002672b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002672f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026733:	83 e1 3f             	and    ecx,0x3f
c0026736:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002673a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002673e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026744:	0f b6 d0             	movzx  edx,al
c0026747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002674b:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026756:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002675c:	0f b6 d0             	movzx  edx,al
c002675f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026763:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002676c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026772:	8d 50 01             	lea    edx,[eax+0x1]
c0026775:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026779:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002677f:	0f b6 d0             	movzx  edx,al
c0026782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026786:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002678a:	83 e1 3f             	and    ecx,0x3f
c002678d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026791:	90                   	nop
c0026792:	83 c4 0c             	add    esp,0xc
c0026795:	c3                   	ret    

c0026796 <PIC::ioWait()>:
c0026796:	eb 00                	jmp    c0026798 <PIC::ioWait()+0x2>
c0026798:	eb 00                	jmp    c002679a <PIC::ioWait()+0x4>
c002679a:	90                   	nop
c002679b:	c3                   	ret    

c002679c <PIC::getIRQReg(int)>:
c002679c:	55                   	push   ebp
c002679d:	89 e5                	mov    ebp,esp
c002679f:	83 ec 10             	sub    esp,0x10
c00267a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267a5:	0f b6 c0             	movzx  eax,al
c00267a8:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00267ae:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00267b1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00267b4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00267b8:	ee                   	out    dx,al
c00267b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267bc:	0f b6 c0             	movzx  eax,al
c00267bf:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00267c5:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00267c8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00267cb:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00267cf:	ee                   	out    dx,al
c00267d0:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00267d6:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00267da:	89 c2                	mov    edx,eax
c00267dc:	ec                   	in     al,dx
c00267dd:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00267e0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00267e3:	0f b6 c0             	movzx  eax,al
c00267e6:	c1 e0 08             	shl    eax,0x8
c00267e9:	89 c1                	mov    ecx,eax
c00267eb:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00267f1:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00267f5:	89 c2                	mov    edx,eax
c00267f7:	ec                   	in     al,dx
c00267f8:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00267fb:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00267fe:	0f b6 c0             	movzx  eax,al
c0026801:	09 c8                	or     eax,ecx
c0026803:	c9                   	leave  
c0026804:	c3                   	ret    
c0026805:	90                   	nop

c0026806 <PIC::eoi(unsigned char)>:
c0026806:	55                   	push   ebp
c0026807:	89 e5                	mov    ebp,esp
c0026809:	83 ec 14             	sub    esp,0x14
c002680c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002680f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026812:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026816:	75 1e                	jne    c0026836 <PIC::eoi(unsigned char)+0x30>
c0026818:	6a 0b                	push   0xb
c002681a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002681d:	e8 7a ff ff ff       	call   c002679c <PIC::getIRQReg(int)>
c0026822:	83 c4 08             	add    esp,0x8
c0026825:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026829:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002682d:	25 80 00 00 00       	and    eax,0x80
c0026832:	85 c0                	test   eax,eax
c0026834:	74 5f                	je     c0026895 <PIC::eoi(unsigned char)+0x8f>
c0026836:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002683a:	75 2d                	jne    c0026869 <PIC::eoi(unsigned char)+0x63>
c002683c:	6a 0b                	push   0xb
c002683e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026841:	e8 56 ff ff ff       	call   c002679c <PIC::getIRQReg(int)>
c0026846:	83 c4 08             	add    esp,0x8
c0026849:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002684d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026850:	66 85 c0             	test   ax,ax
c0026853:	78 14                	js     c0026869 <PIC::eoi(unsigned char)+0x63>
c0026855:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002685b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002685f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026862:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026866:	ee                   	out    dx,al
c0026867:	eb 2d                	jmp    c0026896 <PIC::eoi(unsigned char)+0x90>
c0026869:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002686d:	76 12                	jbe    c0026881 <PIC::eoi(unsigned char)+0x7b>
c002686f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026875:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026879:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002687c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026880:	ee                   	out    dx,al
c0026881:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026887:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002688b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002688e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026892:	ee                   	out    dx,al
c0026893:	eb 01                	jmp    c0026896 <PIC::eoi(unsigned char)+0x90>
c0026895:	90                   	nop
c0026896:	c9                   	leave  
c0026897:	c3                   	ret    

c0026898 <PIC::remap()>:
c0026898:	55                   	push   ebp
c0026899:	89 e5                	mov    ebp,esp
c002689b:	83 ec 48             	sub    esp,0x48
c002689e:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00268a5:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00268ac:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00268b2:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00268b5:	89 c2                	mov    edx,eax
c00268b7:	ec                   	in     al,dx
c00268b8:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00268bb:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00268be:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00268c1:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00268c7:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00268ca:	89 c2                	mov    edx,eax
c00268cc:	ec                   	in     al,dx
c00268cd:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00268d0:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00268d3:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00268d6:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00268dc:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00268e0:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00268e3:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00268e6:	ee                   	out    dx,al
c00268e7:	83 ec 0c             	sub    esp,0xc
c00268ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268ed:	e8 a4 fe ff ff       	call   c0026796 <PIC::ioWait()>
c00268f2:	83 c4 10             	add    esp,0x10
c00268f5:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00268fb:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00268ff:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026902:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026905:	ee                   	out    dx,al
c0026906:	83 ec 0c             	sub    esp,0xc
c0026909:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002690c:	e8 85 fe ff ff       	call   c0026796 <PIC::ioWait()>
c0026911:	83 c4 10             	add    esp,0x10
c0026914:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026917:	0f b6 c0             	movzx  eax,al
c002691a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026920:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026923:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026926:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026929:	ee                   	out    dx,al
c002692a:	83 ec 0c             	sub    esp,0xc
c002692d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026930:	e8 61 fe ff ff       	call   c0026796 <PIC::ioWait()>
c0026935:	83 c4 10             	add    esp,0x10
c0026938:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002693b:	0f b6 c0             	movzx  eax,al
c002693e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026944:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026947:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002694a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002694d:	ee                   	out    dx,al
c002694e:	83 ec 0c             	sub    esp,0xc
c0026951:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026954:	e8 3d fe ff ff       	call   c0026796 <PIC::ioWait()>
c0026959:	83 c4 10             	add    esp,0x10
c002695c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026962:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026966:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026969:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002696c:	ee                   	out    dx,al
c002696d:	83 ec 0c             	sub    esp,0xc
c0026970:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026973:	e8 1e fe ff ff       	call   c0026796 <PIC::ioWait()>
c0026978:	83 c4 10             	add    esp,0x10
c002697b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026981:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026985:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026988:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002698b:	ee                   	out    dx,al
c002698c:	83 ec 0c             	sub    esp,0xc
c002698f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026992:	e8 ff fd ff ff       	call   c0026796 <PIC::ioWait()>
c0026997:	83 c4 10             	add    esp,0x10
c002699a:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00269a0:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00269a4:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00269a7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00269aa:	ee                   	out    dx,al
c00269ab:	83 ec 0c             	sub    esp,0xc
c00269ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269b1:	e8 e0 fd ff ff       	call   c0026796 <PIC::ioWait()>
c00269b6:	83 c4 10             	add    esp,0x10
c00269b9:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00269bf:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00269c3:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00269c6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00269c9:	ee                   	out    dx,al
c00269ca:	83 ec 0c             	sub    esp,0xc
c00269cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269d0:	e8 c1 fd ff ff       	call   c0026796 <PIC::ioWait()>
c00269d5:	83 c4 10             	add    esp,0x10
c00269d8:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00269dc:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00269e2:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00269e5:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00269e8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00269eb:	ee                   	out    dx,al
c00269ec:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00269f0:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00269f6:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00269f9:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00269fc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00269ff:	ee                   	out    dx,al
c0026a00:	90                   	nop
c0026a01:	c9                   	leave  
c0026a02:	c3                   	ret    
c0026a03:	90                   	nop

c0026a04 <PIC::open(int, int, void*)>:
c0026a04:	55                   	push   ebp
c0026a05:	89 e5                	mov    ebp,esp
c0026a07:	83 ec 18             	sub    esp,0x18
c0026a0a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026a10:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026a14:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026a17:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026a1b:	ee                   	out    dx,al
c0026a1c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026a22:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026a26:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026a29:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026a2d:	ee                   	out    dx,al
c0026a2e:	83 ec 0c             	sub    esp,0xc
c0026a31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a34:	e8 5f fe ff ff       	call   c0026898 <PIC::remap()>
c0026a39:	83 c4 10             	add    esp,0x10
c0026a3c:	b8 00 00 00 00       	mov    eax,0x0
c0026a41:	c9                   	leave  
c0026a42:	c3                   	ret    
c0026a43:	90                   	nop

c0026a44 <APICTimer::close(int, int, void*)>:
c0026a44:	b8 00 00 00 00       	mov    eax,0x0
c0026a49:	c3                   	ret    

c0026a4a <apicTimerHandler(regs*, void*)>:
c0026a4a:	83 ec 0c             	sub    esp,0xc
c0026a4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a51:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a53:	99                   	cdq    
c0026a54:	52                   	push   edx
c0026a55:	50                   	push   eax
c0026a56:	6a 00                	push   0x0
c0026a58:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026a5d:	e8 92 07 00 00       	call   c00271f4 <__udivdi3>
c0026a62:	83 c4 10             	add    esp,0x10
c0026a65:	83 ec 08             	sub    esp,0x8
c0026a68:	52                   	push   edx
c0026a69:	50                   	push   eax
c0026a6a:	e8 a0 fd fe ff       	call   c001680f <timerHandler(unsigned long long)>
c0026a6f:	83 c4 10             	add    esp,0x10
c0026a72:	90                   	nop
c0026a73:	83 c4 0c             	add    esp,0xc
c0026a76:	c3                   	ret    
c0026a77:	90                   	nop

c0026a78 <APICTimer::write(int)>:
c0026a78:	53                   	push   ebx
c0026a79:	83 ec 28             	sub    esp,0x28
c0026a7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026a80:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026a84:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026a8a:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0026a8f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026a95:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026a9b:	83 ec 0c             	sub    esp,0xc
c0026a9e:	50                   	push   eax
c0026a9f:	e8 de f4 ff ff       	call   c0025f82 <APIC::getBase()>
c0026aa4:	83 c4 10             	add    esp,0x10
c0026aa7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026aab:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0026ab0:	8b 15 34 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f934
c0026ab6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026aba:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026abe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ac2:	05 e0 03 00 00       	add    eax,0x3e0
c0026ac7:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026acd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ad1:	05 80 03 00 00       	add    eax,0x380
c0026ad6:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026adc:	fb                   	sti    
c0026add:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026ae5:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026aea:	83 d2 00             	adc    edx,0x0
c0026aed:	89 c1                	mov    ecx,eax
c0026aef:	89 d3                	mov    ebx,edx
c0026af1:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0026af6:	8b 15 34 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f934
c0026afc:	39 c8                	cmp    eax,ecx
c0026afe:	89 d0                	mov    eax,edx
c0026b00:	19 d8                	sbb    eax,ebx
c0026b02:	73 02                	jae    c0026b06 <APICTimer::write(int)+0x8e>
c0026b04:	eb d7                	jmp    c0026add <APICTimer::write(int)+0x65>
c0026b06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b0a:	05 20 03 00 00       	add    eax,0x320
c0026b0f:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026b15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b19:	05 90 03 00 00       	add    eax,0x390
c0026b1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b20:	f7 d0                	not    eax
c0026b22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026b26:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026b2e:	ba 00 00 00 00       	mov    edx,0x0
c0026b33:	f7 f3                	div    ebx
c0026b35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026b3d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026b43:	0d 00 00 02 00       	or     eax,0x20000
c0026b48:	89 c2                	mov    edx,eax
c0026b4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b4e:	05 20 03 00 00       	add    eax,0x320
c0026b53:	89 10                	mov    DWORD PTR [eax],edx
c0026b55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b59:	05 e0 03 00 00       	add    eax,0x3e0
c0026b5e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026b64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b68:	05 80 03 00 00       	add    eax,0x380
c0026b6d:	89 c2                	mov    edx,eax
c0026b6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026b73:	89 02                	mov    DWORD PTR [edx],eax
c0026b75:	90                   	nop
c0026b76:	83 c4 28             	add    esp,0x28
c0026b79:	5b                   	pop    ebx
c0026b7a:	c3                   	ret    
c0026b7b:	90                   	nop

c0026b7c <APICTimer::open(int, int, void*)>:
c0026b7c:	57                   	push   edi
c0026b7d:	56                   	push   esi
c0026b7e:	53                   	push   ebx
c0026b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b83:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b85:	83 c0 24             	add    eax,0x24
c0026b88:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b8a:	83 ec 08             	sub    esp,0x8
c0026b8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b95:	ff d0                	call   eax
c0026b97:	83 c4 10             	add    esp,0x10
c0026b9a:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0026b9f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026ba5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026bab:	83 ec 0c             	sub    esp,0xc
c0026bae:	50                   	push   eax
c0026baf:	e8 ce f3 ff ff       	call   c0025f82 <APIC::getBase()>
c0026bb4:	83 c4 10             	add    esp,0x10
c0026bb7:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bc1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026bc7:	0f b6 f8             	movzx  edi,al
c0026bca:	89 d0                	mov    eax,edx
c0026bcc:	ba 00 00 00 00       	mov    edx,0x0
c0026bd1:	89 c1                	mov    ecx,eax
c0026bd3:	80 e5 ff             	and    ch,0xff
c0026bd6:	89 cb                	mov    ebx,ecx
c0026bd8:	0f b6 f2             	movzx  esi,dl
c0026bdb:	89 d8                	mov    eax,ebx
c0026bdd:	89 f2                	mov    edx,esi
c0026bdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026be3:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026be6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026bea:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026bee:	83 e0 00             	and    eax,0x0
c0026bf1:	09 d0                	or     eax,edx
c0026bf3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bfb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026c01:	8d 50 01             	lea    edx,[eax+0x1]
c0026c04:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c08:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026c0e:	0f b6 d0             	movzx  edx,al
c0026c11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c15:	83 c2 08             	add    edx,0x8
c0026c18:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026c1c:	0f b6 c9             	movzx  ecx,cl
c0026c1f:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026c25:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c2d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c31:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c3f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026c45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c49:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026c4f:	83 ec 0c             	sub    esp,0xc
c0026c52:	51                   	push   ecx
c0026c53:	6a 01                	push   0x1
c0026c55:	68 4a 6a 02 c0       	push   0xc0026a4a
c0026c5a:	52                   	push   edx
c0026c5b:	50                   	push   eax
c0026c5c:	e8 19 d0 fe ff       	call   c0013c7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026c61:	83 c4 20             	add    esp,0x20
c0026c64:	89 c2                	mov    edx,eax
c0026c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c6a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026c70:	b8 00 00 00 00       	mov    eax,0x0
c0026c75:	5b                   	pop    ebx
c0026c76:	5e                   	pop    esi
c0026c77:	5f                   	pop    edi
c0026c78:	c3                   	ret    
c0026c79:	90                   	nop

c0026c7a <APICTimer::APICTimer()>:
c0026c7a:	83 ec 0c             	sub    esp,0xc
c0026c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c81:	83 ec 08             	sub    esp,0x8
c0026c84:	68 30 dd 02 c0       	push   0xc002dd30
c0026c89:	50                   	push   eax
c0026c8a:	e8 f1 fa fe ff       	call   c0016780 <Timer::Timer(char const*)>
c0026c8f:	83 c4 10             	add    esp,0x10
c0026c92:	ba 44 dd 02 c0       	mov    edx,0xc002dd44
c0026c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c9b:	89 10                	mov    DWORD PTR [eax],edx
c0026c9d:	90                   	nop
c0026c9e:	83 c4 0c             	add    esp,0xc
c0026ca1:	c3                   	ret    

c0026ca2 <PIT::write(int)>:
c0026ca2:	83 ec 10             	sub    esp,0x10
c0026ca5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026ca9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026cad:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026cb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026cb7:	a3 64 36 03 c0       	mov    ds:0xc0033664,eax
c0026cbc:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026cc1:	99                   	cdq    
c0026cc2:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026cc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026cca:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026cd1:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026cd6:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026cda:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026cdf:	ee                   	out    dx,al
c0026ce0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026ce4:	0f b6 c0             	movzx  eax,al
c0026ce7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026cee:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026cf2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026cf6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026cfb:	ee                   	out    dx,al
c0026cfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d00:	c1 f8 08             	sar    eax,0x8
c0026d03:	0f b6 c0             	movzx  eax,al
c0026d06:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026d0d:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026d11:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026d15:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026d1a:	ee                   	out    dx,al
c0026d1b:	90                   	nop
c0026d1c:	83 c4 10             	add    esp,0x10
c0026d1f:	c3                   	ret    

c0026d20 <pitHandler(regs*, void*)>:
c0026d20:	83 ec 0c             	sub    esp,0xc
c0026d23:	a1 64 36 03 c0       	mov    eax,ds:0xc0033664
c0026d28:	99                   	cdq    
c0026d29:	52                   	push   edx
c0026d2a:	50                   	push   eax
c0026d2b:	6a 00                	push   0x0
c0026d2d:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026d32:	e8 bd 04 00 00       	call   c00271f4 <__udivdi3>
c0026d37:	83 c4 10             	add    esp,0x10
c0026d3a:	83 ec 08             	sub    esp,0x8
c0026d3d:	52                   	push   edx
c0026d3e:	50                   	push   eax
c0026d3f:	e8 cb fa fe ff       	call   c001680f <timerHandler(unsigned long long)>
c0026d44:	83 c4 10             	add    esp,0x10
c0026d47:	90                   	nop
c0026d48:	83 c4 0c             	add    esp,0xc
c0026d4b:	c3                   	ret    

c0026d4c <PIT::open(int, int, void*)>:
c0026d4c:	83 ec 0c             	sub    esp,0xc
c0026d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d53:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d55:	83 c0 24             	add    eax,0x24
c0026d58:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d5a:	83 ec 08             	sub    esp,0x8
c0026d5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d65:	ff d0                	call   eax
c0026d67:	83 c4 10             	add    esp,0x10
c0026d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d6e:	83 ec 0c             	sub    esp,0xc
c0026d71:	6a 00                	push   0x0
c0026d73:	6a 01                	push   0x1
c0026d75:	68 20 6d 02 c0       	push   0xc0026d20
c0026d7a:	6a 00                	push   0x0
c0026d7c:	50                   	push   eax
c0026d7d:	e8 f8 ce fe ff       	call   c0013c7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026d82:	83 c4 20             	add    esp,0x20
c0026d85:	89 c2                	mov    edx,eax
c0026d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d8b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026d91:	b8 00 00 00 00       	mov    eax,0x0
c0026d96:	83 c4 0c             	add    esp,0xc
c0026d99:	c3                   	ret    

c0026d9a <PIT::close(int, int, void*)>:
c0026d9a:	83 ec 0c             	sub    esp,0xc
c0026d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026da1:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026daf:	6a 01                	push   0x1
c0026db1:	68 20 6d 02 c0       	push   0xc0026d20
c0026db6:	6a 00                	push   0x0
c0026db8:	50                   	push   eax
c0026db9:	e8 06 cf fe ff       	call   c0013cc4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026dbe:	83 c4 10             	add    esp,0x10
c0026dc1:	b8 00 00 00 00       	mov    eax,0x0
c0026dc6:	83 c4 0c             	add    esp,0xc
c0026dc9:	c3                   	ret    

c0026dca <PIT::PIT()>:
c0026dca:	83 ec 0c             	sub    esp,0xc
c0026dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dd1:	83 ec 08             	sub    esp,0x8
c0026dd4:	68 6c dd 02 c0       	push   0xc002dd6c
c0026dd9:	50                   	push   eax
c0026dda:	e8 a1 f9 fe ff       	call   c0016780 <Timer::Timer(char const*)>
c0026ddf:	83 c4 10             	add    esp,0x10
c0026de2:	ba 94 dd 02 c0       	mov    edx,0xc002dd94
c0026de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026deb:	89 10                	mov    DWORD PTR [eax],edx
c0026ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026df1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026df7:	0f b6 d0             	movzx  edx,al
c0026dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dfe:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e0f:	0f b6 d0             	movzx  edx,al
c0026e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e16:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e25:	8d 50 01             	lea    edx,[eax+0x1]
c0026e28:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e2c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026e32:	0f b6 d0             	movzx  edx,al
c0026e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e39:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026e3d:	83 e1 3f             	and    ecx,0x3f
c0026e40:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026e44:	90                   	nop
c0026e45:	83 c4 0c             	add    esp,0xc
c0026e48:	c3                   	ret    
c0026e49:	66 90                	xchg   ax,ax
c0026e4b:	66 90                	xchg   ax,ax
c0026e4d:	66 90                	xchg   ax,ax
c0026e4f:	90                   	nop

c0026e50 <avxDetect>:
c0026e50:	b8 00 00 00 00       	mov    eax,0x0
c0026e55:	c3                   	ret    

c0026e56 <avxSave>:
c0026e56:	c3                   	ret    

c0026e57 <avxLoad>:
c0026e57:	c3                   	ret    

c0026e58 <avxInit>:
c0026e58:	c3                   	ret    

c0026e59 <avxClose>:
c0026e59:	c3                   	ret    

c0026e5a <wouldSheSayYes>:
c0026e5a:	c3                   	ret    
c0026e5b:	49                   	dec    ecx
c0026e5c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026e60:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026e64:	75 20                	jne    c0026e86 <sseDetect.noSSE+0x1>
c0026e66:	4e                   	dec    esi
c0026e67:	79 61                	jns    c0026eca <x87Detect+0x14>
c0026e69:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026e6e:	66 90                	xchg   ax,ax

c0026e70 <absolutelyNoChanceInHell>:
c0026e70:	b8 01 00 00 00       	mov    eax,0x1
c0026e75:	0f a2                	cpuid  
c0026e77:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026e7d:	74 06                	je     c0026e85 <sseDetect.noSSE>
c0026e7f:	b8 01 00 00 00       	mov    eax,0x1
c0026e84:	c3                   	ret    

c0026e85 <sseDetect.noSSE>:
c0026e85:	31 c0                	xor    eax,eax
c0026e87:	c3                   	ret    

c0026e88 <sseSave>:
c0026e88:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026e8d:	c3                   	ret    

c0026e8e <sseLoad>:
c0026e8e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026e93:	c3                   	ret    

c0026e94 <sseInit>:
c0026e94:	e8 49 00 00 00       	call   c0026ee2 <x87Init>
c0026e99:	0f 20 e0             	mov    eax,cr4
c0026e9c:	66 0d 00 06          	or     ax,0x600
c0026ea0:	0f 22 e0             	mov    cr4,eax
c0026ea3:	c3                   	ret    

c0026ea4 <sseClose>:
c0026ea4:	c3                   	ret    
c0026ea5:	66 90                	xchg   ax,ax
c0026ea7:	66 90                	xchg   ax,ax
c0026ea9:	66 90                	xchg   ax,ax
c0026eab:	66 90                	xchg   ax,ax
c0026ead:	66 90                	xchg   ax,ax
c0026eaf:	90                   	nop

c0026eb0 <value_37F>:
c0026eb0:	7f 03                	jg     c0026eb5 <value_37A+0x1>

c0026eb2 <value_37E>:
c0026eb2:	7e 03                	jle    c0026eb7 <x87Detect+0x1>

c0026eb4 <value_37A>:
c0026eb4:	7a 03                	jp     c0026eb9 <x87Detect+0x3>

c0026eb6 <x87Detect>:
c0026eb6:	b8 01 00 00 00       	mov    eax,0x1
c0026ebb:	0f a2                	cpuid  
c0026ebd:	f7 c2 01 00 00 00    	test   edx,0x1
c0026ec3:	74 06                	je     c0026ecb <x87Detect.nox87>
c0026ec5:	b8 01 00 00 00       	mov    eax,0x1
c0026eca:	c3                   	ret    

c0026ecb <x87Detect.nox87>:
c0026ecb:	b8 00 00 00 00       	mov    eax,0x0
c0026ed0:	c3                   	ret    

c0026ed1 <x87Save>:
c0026ed1:	55                   	push   ebp
c0026ed2:	89 e5                	mov    ebp,esp
c0026ed4:	9b dd 75 08          	fsave  [ebp+0x8]
c0026ed8:	c9                   	leave  
c0026ed9:	c3                   	ret    

c0026eda <x87Load>:
c0026eda:	55                   	push   ebp
c0026edb:	89 e5                	mov    ebp,esp
c0026edd:	dd 65 08             	frstor [ebp+0x8]
c0026ee0:	c9                   	leave  
c0026ee1:	c3                   	ret    

c0026ee2 <x87Init>:
c0026ee2:	9b db e3             	finit  
c0026ee5:	0f 20 c0             	mov    eax,cr0
c0026ee8:	66 25 fb ff          	and    ax,0xfffb
c0026eec:	66 0d 22 00          	or     ax,0x22
c0026ef0:	0f 22 c0             	mov    cr0,eax
c0026ef3:	0f 06                	clts   
c0026ef5:	d9 2d b4 6e 02 c0    	fldcw  WORD PTR ds:0xc0026eb4
c0026efb:	c3                   	ret    

c0026efc <x87Close>:
c0026efc:	c3                   	ret    
c0026efd:	66 90                	xchg   ax,ax
c0026eff:	90                   	nop

c0026f00 <__do_global_ctors_aux>:
c0026f00:	a1 38 9b 02 c0       	mov    eax,ds:0xc0029b38
c0026f05:	83 f8 ff             	cmp    eax,0xffffffff
c0026f08:	74 1a                	je     c0026f24 <__do_global_ctors_aux+0x24>
c0026f0a:	55                   	push   ebp
c0026f0b:	89 e5                	mov    ebp,esp
c0026f0d:	53                   	push   ebx
c0026f0e:	52                   	push   edx
c0026f0f:	bb 38 9b 02 c0       	mov    ebx,0xc0029b38
c0026f14:	ff d0                	call   eax
c0026f16:	83 eb 04             	sub    ebx,0x4
c0026f19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026f1b:	83 f8 ff             	cmp    eax,0xffffffff
c0026f1e:	75 f4                	jne    c0026f14 <__do_global_ctors_aux+0x14>
c0026f20:	58                   	pop    eax
c0026f21:	5b                   	pop    ebx
c0026f22:	5d                   	pop    ebp
c0026f23:	c3                   	ret    
c0026f24:	c3                   	ret    
c0026f25:	66 90                	xchg   ax,ax
c0026f27:	90                   	nop

c0026f28 <__divdi3>:
c0026f28:	55                   	push   ebp
c0026f29:	57                   	push   edi
c0026f2a:	56                   	push   esi
c0026f2b:	53                   	push   ebx
c0026f2c:	83 ec 1c             	sub    esp,0x1c
c0026f2f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026f33:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026f37:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026f3a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026f3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026f42:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026f46:	85 db                	test   ebx,ebx
c0026f48:	0f 88 8e 00 00 00    	js     c0026fdc <__divdi3+0xb4>
c0026f4e:	89 dd                	mov    ebp,ebx
c0026f50:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026f58:	89 d3                	mov    ebx,edx
c0026f5a:	85 d2                	test   edx,edx
c0026f5c:	79 0d                	jns    c0026f6b <__divdi3+0x43>
c0026f5e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026f62:	f7 d8                	neg    eax
c0026f64:	83 d2 00             	adc    edx,0x0
c0026f67:	f7 da                	neg    edx
c0026f69:	89 d3                	mov    ebx,edx
c0026f6b:	89 c7                	mov    edi,eax
c0026f6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f70:	85 db                	test   ebx,ebx
c0026f72:	75 48                	jne    c0026fbc <__divdi3+0x94>
c0026f74:	39 ef                	cmp    edi,ebp
c0026f76:	76 24                	jbe    c0026f9c <__divdi3+0x74>
c0026f78:	89 ea                	mov    edx,ebp
c0026f7a:	f7 f7                	div    edi
c0026f7c:	89 c1                	mov    ecx,eax
c0026f7e:	31 f6                	xor    esi,esi
c0026f80:	89 c8                	mov    eax,ecx
c0026f82:	89 f2                	mov    edx,esi
c0026f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026f88:	85 c9                	test   ecx,ecx
c0026f8a:	74 07                	je     c0026f93 <__divdi3+0x6b>
c0026f8c:	f7 d8                	neg    eax
c0026f8e:	83 d2 00             	adc    edx,0x0
c0026f91:	f7 da                	neg    edx
c0026f93:	83 c4 1c             	add    esp,0x1c
c0026f96:	5b                   	pop    ebx
c0026f97:	5e                   	pop    esi
c0026f98:	5f                   	pop    edi
c0026f99:	5d                   	pop    ebp
c0026f9a:	c3                   	ret    
c0026f9b:	90                   	nop
c0026f9c:	85 ff                	test   edi,edi
c0026f9e:	75 0b                	jne    c0026fab <__divdi3+0x83>
c0026fa0:	b8 01 00 00 00       	mov    eax,0x1
c0026fa5:	31 d2                	xor    edx,edx
c0026fa7:	f7 f3                	div    ebx
c0026fa9:	89 c7                	mov    edi,eax
c0026fab:	31 d2                	xor    edx,edx
c0026fad:	89 e8                	mov    eax,ebp
c0026faf:	f7 f7                	div    edi
c0026fb1:	89 c6                	mov    esi,eax
c0026fb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026fb6:	f7 f7                	div    edi
c0026fb8:	89 c1                	mov    ecx,eax
c0026fba:	eb c4                	jmp    c0026f80 <__divdi3+0x58>
c0026fbc:	39 eb                	cmp    ebx,ebp
c0026fbe:	77 3c                	ja     c0026ffc <__divdi3+0xd4>
c0026fc0:	0f bd f3             	bsr    esi,ebx
c0026fc3:	83 f6 1f             	xor    esi,0x1f
c0026fc6:	75 40                	jne    c0027008 <__divdi3+0xe0>
c0026fc8:	39 eb                	cmp    ebx,ebp
c0026fca:	72 09                	jb     c0026fd5 <__divdi3+0xad>
c0026fcc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026fcf:	0f 87 97 00 00 00    	ja     c002706c <__divdi3+0x144>
c0026fd5:	b9 01 00 00 00       	mov    ecx,0x1
c0026fda:	eb a4                	jmp    c0026f80 <__divdi3+0x58>
c0026fdc:	f7 d9                	neg    ecx
c0026fde:	83 d3 00             	adc    ebx,0x0
c0026fe1:	f7 db                	neg    ebx
c0026fe3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026fe6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026fea:	89 dd                	mov    ebp,ebx
c0026fec:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026ff4:	e9 5f ff ff ff       	jmp    c0026f58 <__divdi3+0x30>
c0026ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0026ffc:	31 f6                	xor    esi,esi
c0026ffe:	31 c9                	xor    ecx,ecx
c0027000:	e9 7b ff ff ff       	jmp    c0026f80 <__divdi3+0x58>
c0027005:	8d 76 00             	lea    esi,[esi+0x0]
c0027008:	b8 20 00 00 00       	mov    eax,0x20
c002700d:	29 f0                	sub    eax,esi
c002700f:	89 f1                	mov    ecx,esi
c0027011:	d3 e3                	shl    ebx,cl
c0027013:	89 fa                	mov    edx,edi
c0027015:	88 c1                	mov    cl,al
c0027017:	d3 ea                	shr    edx,cl
c0027019:	09 da                	or     edx,ebx
c002701b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002701f:	89 f1                	mov    ecx,esi
c0027021:	d3 e7                	shl    edi,cl
c0027023:	89 eb                	mov    ebx,ebp
c0027025:	88 c1                	mov    cl,al
c0027027:	d3 eb                	shr    ebx,cl
c0027029:	89 f1                	mov    ecx,esi
c002702b:	d3 e5                	shl    ebp,cl
c002702d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027030:	88 c1                	mov    cl,al
c0027032:	d3 ea                	shr    edx,cl
c0027034:	09 d5                	or     ebp,edx
c0027036:	89 e8                	mov    eax,ebp
c0027038:	89 da                	mov    edx,ebx
c002703a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002703e:	89 d3                	mov    ebx,edx
c0027040:	89 c5                	mov    ebp,eax
c0027042:	f7 e7                	mul    edi
c0027044:	39 d3                	cmp    ebx,edx
c0027046:	72 18                	jb     c0027060 <__divdi3+0x138>
c0027048:	74 0a                	je     c0027054 <__divdi3+0x12c>
c002704a:	89 e9                	mov    ecx,ebp
c002704c:	31 f6                	xor    esi,esi
c002704e:	e9 2d ff ff ff       	jmp    c0026f80 <__divdi3+0x58>
c0027053:	90                   	nop
c0027054:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027057:	89 f1                	mov    ecx,esi
c0027059:	d3 e7                	shl    edi,cl
c002705b:	39 c7                	cmp    edi,eax
c002705d:	73 eb                	jae    c002704a <__divdi3+0x122>
c002705f:	90                   	nop
c0027060:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027063:	31 f6                	xor    esi,esi
c0027065:	e9 16 ff ff ff       	jmp    c0026f80 <__divdi3+0x58>
c002706a:	66 90                	xchg   ax,ax
c002706c:	31 c9                	xor    ecx,ecx
c002706e:	e9 0d ff ff ff       	jmp    c0026f80 <__divdi3+0x58>
c0027073:	90                   	nop

c0027074 <__moddi3>:
c0027074:	55                   	push   ebp
c0027075:	57                   	push   edi
c0027076:	56                   	push   esi
c0027077:	53                   	push   ebx
c0027078:	83 ec 2c             	sub    esp,0x2c
c002707b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002707f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027083:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027087:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002708b:	85 db                	test   ebx,ebx
c002708d:	0f 88 85 00 00 00    	js     c0027118 <__moddi3+0xa4>
c0027093:	89 de                	mov    esi,ebx
c0027095:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002709d:	89 d7                	mov    edi,edx
c002709f:	85 d2                	test   edx,edx
c00270a1:	79 09                	jns    c00270ac <__moddi3+0x38>
c00270a3:	f7 d8                	neg    eax
c00270a5:	83 d2 00             	adc    edx,0x0
c00270a8:	f7 da                	neg    edx
c00270aa:	89 d7                	mov    edi,edx
c00270ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270b0:	89 cd                	mov    ebp,ecx
c00270b2:	85 ff                	test   edi,edi
c00270b4:	75 52                	jne    c0027108 <__moddi3+0x94>
c00270b6:	89 c3                	mov    ebx,eax
c00270b8:	39 f0                	cmp    eax,esi
c00270ba:	76 24                	jbe    c00270e0 <__moddi3+0x6c>
c00270bc:	89 c8                	mov    eax,ecx
c00270be:	89 f2                	mov    edx,esi
c00270c0:	f7 f3                	div    ebx
c00270c2:	89 d6                	mov    esi,edx
c00270c4:	89 f0                	mov    eax,esi
c00270c6:	31 d2                	xor    edx,edx
c00270c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00270cc:	85 c9                	test   ecx,ecx
c00270ce:	74 07                	je     c00270d7 <__moddi3+0x63>
c00270d0:	f7 d8                	neg    eax
c00270d2:	83 d2 00             	adc    edx,0x0
c00270d5:	f7 da                	neg    edx
c00270d7:	83 c4 2c             	add    esp,0x2c
c00270da:	5b                   	pop    ebx
c00270db:	5e                   	pop    esi
c00270dc:	5f                   	pop    edi
c00270dd:	5d                   	pop    ebp
c00270de:	c3                   	ret    
c00270df:	90                   	nop
c00270e0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00270e4:	85 db                	test   ebx,ebx
c00270e6:	75 0d                	jne    c00270f5 <__moddi3+0x81>
c00270e8:	b8 01 00 00 00       	mov    eax,0x1
c00270ed:	31 d2                	xor    edx,edx
c00270ef:	f7 f7                	div    edi
c00270f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270f5:	89 f0                	mov    eax,esi
c00270f7:	31 d2                	xor    edx,edx
c00270f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00270fd:	f7 f7                	div    edi
c00270ff:	89 e8                	mov    eax,ebp
c0027101:	f7 f7                	div    edi
c0027103:	89 d6                	mov    esi,edx
c0027105:	eb bd                	jmp    c00270c4 <__moddi3+0x50>
c0027107:	90                   	nop
c0027108:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002710c:	39 f7                	cmp    edi,esi
c002710e:	76 20                	jbe    c0027130 <__moddi3+0xbc>
c0027110:	89 c8                	mov    eax,ecx
c0027112:	89 f2                	mov    edx,esi
c0027114:	eb b2                	jmp    c00270c8 <__moddi3+0x54>
c0027116:	66 90                	xchg   ax,ax
c0027118:	f7 d9                	neg    ecx
c002711a:	83 d3 00             	adc    ebx,0x0
c002711d:	f7 db                	neg    ebx
c002711f:	89 de                	mov    esi,ebx
c0027121:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027129:	e9 6f ff ff ff       	jmp    c002709d <__moddi3+0x29>
c002712e:	66 90                	xchg   ax,ax
c0027130:	0f bd c7             	bsr    eax,edi
c0027133:	83 f0 1f             	xor    eax,0x1f
c0027136:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002713a:	75 24                	jne    c0027160 <__moddi3+0xec>
c002713c:	39 f7                	cmp    edi,esi
c002713e:	72 06                	jb     c0027146 <__moddi3+0xd2>
c0027140:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027144:	77 0c                	ja     c0027152 <__moddi3+0xde>
c0027146:	89 e9                	mov    ecx,ebp
c0027148:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002714c:	19 fe                	sbb    esi,edi
c002714e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027152:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027156:	89 f2                	mov    edx,esi
c0027158:	e9 6b ff ff ff       	jmp    c00270c8 <__moddi3+0x54>
c002715d:	8d 76 00             	lea    esi,[esi+0x0]
c0027160:	b8 20 00 00 00       	mov    eax,0x20
c0027165:	89 c2                	mov    edx,eax
c0027167:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002716b:	29 da                	sub    edx,ebx
c002716d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027171:	88 d9                	mov    cl,bl
c0027173:	d3 e7                	shl    edi,cl
c0027175:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027179:	88 d1                	mov    cl,dl
c002717b:	d3 e8                	shr    eax,cl
c002717d:	09 c7                	or     edi,eax
c002717f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027183:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027187:	89 d8                	mov    eax,ebx
c0027189:	88 d9                	mov    cl,bl
c002718b:	d3 e7                	shl    edi,cl
c002718d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027191:	89 f3                	mov    ebx,esi
c0027193:	88 d1                	mov    cl,dl
c0027195:	d3 eb                	shr    ebx,cl
c0027197:	89 c7                	mov    edi,eax
c0027199:	88 c1                	mov    cl,al
c002719b:	d3 e6                	shl    esi,cl
c002719d:	89 e8                	mov    eax,ebp
c002719f:	88 d1                	mov    cl,dl
c00271a1:	d3 e8                	shr    eax,cl
c00271a3:	09 f0                	or     eax,esi
c00271a5:	89 f9                	mov    ecx,edi
c00271a7:	d3 e5                	shl    ebp,cl
c00271a9:	89 da                	mov    edx,ebx
c00271ab:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00271af:	89 d3                	mov    ebx,edx
c00271b1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00271b5:	89 c6                	mov    esi,eax
c00271b7:	89 d1                	mov    ecx,edx
c00271b9:	39 d3                	cmp    ebx,edx
c00271bb:	72 27                	jb     c00271e4 <__moddi3+0x170>
c00271bd:	74 21                	je     c00271e0 <__moddi3+0x16c>
c00271bf:	29 f5                	sub    ebp,esi
c00271c1:	19 cb                	sbb    ebx,ecx
c00271c3:	89 de                	mov    esi,ebx
c00271c5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00271c9:	d3 e6                	shl    esi,cl
c00271cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00271cf:	89 f9                	mov    ecx,edi
c00271d1:	d3 ed                	shr    ebp,cl
c00271d3:	09 ee                	or     esi,ebp
c00271d5:	89 f0                	mov    eax,esi
c00271d7:	d3 eb                	shr    ebx,cl
c00271d9:	89 da                	mov    edx,ebx
c00271db:	e9 e8 fe ff ff       	jmp    c00270c8 <__moddi3+0x54>
c00271e0:	39 c5                	cmp    ebp,eax
c00271e2:	73 db                	jae    c00271bf <__moddi3+0x14b>
c00271e4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00271e8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00271ec:	89 d1                	mov    ecx,edx
c00271ee:	89 c6                	mov    esi,eax
c00271f0:	eb cd                	jmp    c00271bf <__moddi3+0x14b>
c00271f2:	66 90                	xchg   ax,ax

c00271f4 <__udivdi3>:
c00271f4:	55                   	push   ebp
c00271f5:	57                   	push   edi
c00271f6:	56                   	push   esi
c00271f7:	53                   	push   ebx
c00271f8:	83 ec 1c             	sub    esp,0x1c
c00271fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00271ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027203:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027207:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002720b:	85 d2                	test   edx,edx
c002720d:	75 41                	jne    c0027250 <__udivdi3+0x5c>
c002720f:	39 f7                	cmp    edi,esi
c0027211:	76 15                	jbe    c0027228 <__udivdi3+0x34>
c0027213:	89 e8                	mov    eax,ebp
c0027215:	89 f2                	mov    edx,esi
c0027217:	f7 f7                	div    edi
c0027219:	31 db                	xor    ebx,ebx
c002721b:	89 da                	mov    edx,ebx
c002721d:	83 c4 1c             	add    esp,0x1c
c0027220:	5b                   	pop    ebx
c0027221:	5e                   	pop    esi
c0027222:	5f                   	pop    edi
c0027223:	5d                   	pop    ebp
c0027224:	c3                   	ret    
c0027225:	8d 76 00             	lea    esi,[esi+0x0]
c0027228:	89 f9                	mov    ecx,edi
c002722a:	85 ff                	test   edi,edi
c002722c:	75 0b                	jne    c0027239 <__udivdi3+0x45>
c002722e:	b8 01 00 00 00       	mov    eax,0x1
c0027233:	31 d2                	xor    edx,edx
c0027235:	f7 f7                	div    edi
c0027237:	89 c1                	mov    ecx,eax
c0027239:	31 d2                	xor    edx,edx
c002723b:	89 f0                	mov    eax,esi
c002723d:	f7 f1                	div    ecx
c002723f:	89 c3                	mov    ebx,eax
c0027241:	89 e8                	mov    eax,ebp
c0027243:	f7 f1                	div    ecx
c0027245:	89 da                	mov    edx,ebx
c0027247:	83 c4 1c             	add    esp,0x1c
c002724a:	5b                   	pop    ebx
c002724b:	5e                   	pop    esi
c002724c:	5f                   	pop    edi
c002724d:	5d                   	pop    ebp
c002724e:	c3                   	ret    
c002724f:	90                   	nop
c0027250:	39 f2                	cmp    edx,esi
c0027252:	77 1c                	ja     c0027270 <__udivdi3+0x7c>
c0027254:	0f bd da             	bsr    ebx,edx
c0027257:	83 f3 1f             	xor    ebx,0x1f
c002725a:	75 24                	jne    c0027280 <__udivdi3+0x8c>
c002725c:	39 f2                	cmp    edx,esi
c002725e:	72 08                	jb     c0027268 <__udivdi3+0x74>
c0027260:	39 ef                	cmp    edi,ebp
c0027262:	0f 87 84 00 00 00    	ja     c00272ec <__udivdi3+0xf8>
c0027268:	b8 01 00 00 00       	mov    eax,0x1
c002726d:	eb ac                	jmp    c002721b <__udivdi3+0x27>
c002726f:	90                   	nop
c0027270:	31 db                	xor    ebx,ebx
c0027272:	31 c0                	xor    eax,eax
c0027274:	89 da                	mov    edx,ebx
c0027276:	83 c4 1c             	add    esp,0x1c
c0027279:	5b                   	pop    ebx
c002727a:	5e                   	pop    esi
c002727b:	5f                   	pop    edi
c002727c:	5d                   	pop    ebp
c002727d:	c3                   	ret    
c002727e:	66 90                	xchg   ax,ax
c0027280:	b8 20 00 00 00       	mov    eax,0x20
c0027285:	29 d8                	sub    eax,ebx
c0027287:	88 d9                	mov    cl,bl
c0027289:	d3 e2                	shl    edx,cl
c002728b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002728f:	89 fa                	mov    edx,edi
c0027291:	88 c1                	mov    cl,al
c0027293:	d3 ea                	shr    edx,cl
c0027295:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027299:	09 d1                	or     ecx,edx
c002729b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002729f:	88 d9                	mov    cl,bl
c00272a1:	d3 e7                	shl    edi,cl
c00272a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00272a7:	89 f7                	mov    edi,esi
c00272a9:	88 c1                	mov    cl,al
c00272ab:	d3 ef                	shr    edi,cl
c00272ad:	88 d9                	mov    cl,bl
c00272af:	d3 e6                	shl    esi,cl
c00272b1:	89 ea                	mov    edx,ebp
c00272b3:	88 c1                	mov    cl,al
c00272b5:	d3 ea                	shr    edx,cl
c00272b7:	09 d6                	or     esi,edx
c00272b9:	89 f0                	mov    eax,esi
c00272bb:	89 fa                	mov    edx,edi
c00272bd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00272c1:	89 d7                	mov    edi,edx
c00272c3:	89 c6                	mov    esi,eax
c00272c5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00272c9:	39 d7                	cmp    edi,edx
c00272cb:	72 13                	jb     c00272e0 <__udivdi3+0xec>
c00272cd:	74 09                	je     c00272d8 <__udivdi3+0xe4>
c00272cf:	89 f0                	mov    eax,esi
c00272d1:	31 db                	xor    ebx,ebx
c00272d3:	e9 43 ff ff ff       	jmp    c002721b <__udivdi3+0x27>
c00272d8:	88 d9                	mov    cl,bl
c00272da:	d3 e5                	shl    ebp,cl
c00272dc:	39 c5                	cmp    ebp,eax
c00272de:	73 ef                	jae    c00272cf <__udivdi3+0xdb>
c00272e0:	8d 46 ff             	lea    eax,[esi-0x1]
c00272e3:	31 db                	xor    ebx,ebx
c00272e5:	e9 31 ff ff ff       	jmp    c002721b <__udivdi3+0x27>
c00272ea:	66 90                	xchg   ax,ax
c00272ec:	31 c0                	xor    eax,eax
c00272ee:	e9 28 ff ff ff       	jmp    c002721b <__udivdi3+0x27>
c00272f3:	90                   	nop

c00272f4 <__umoddi3>:
c00272f4:	55                   	push   ebp
c00272f5:	57                   	push   edi
c00272f6:	56                   	push   esi
c00272f7:	53                   	push   ebx
c00272f8:	83 ec 1c             	sub    esp,0x1c
c00272fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00272ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027303:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027307:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002730b:	89 da                	mov    edx,ebx
c002730d:	85 c0                	test   eax,eax
c002730f:	75 37                	jne    c0027348 <__umoddi3+0x54>
c0027311:	39 df                	cmp    edi,ebx
c0027313:	76 13                	jbe    c0027328 <__umoddi3+0x34>
c0027315:	89 f0                	mov    eax,esi
c0027317:	f7 f7                	div    edi
c0027319:	89 d0                	mov    eax,edx
c002731b:	31 d2                	xor    edx,edx
c002731d:	83 c4 1c             	add    esp,0x1c
c0027320:	5b                   	pop    ebx
c0027321:	5e                   	pop    esi
c0027322:	5f                   	pop    edi
c0027323:	5d                   	pop    ebp
c0027324:	c3                   	ret    
c0027325:	8d 76 00             	lea    esi,[esi+0x0]
c0027328:	89 fd                	mov    ebp,edi
c002732a:	85 ff                	test   edi,edi
c002732c:	75 0b                	jne    c0027339 <__umoddi3+0x45>
c002732e:	b8 01 00 00 00       	mov    eax,0x1
c0027333:	31 d2                	xor    edx,edx
c0027335:	f7 f7                	div    edi
c0027337:	89 c5                	mov    ebp,eax
c0027339:	89 d8                	mov    eax,ebx
c002733b:	31 d2                	xor    edx,edx
c002733d:	f7 f5                	div    ebp
c002733f:	89 f0                	mov    eax,esi
c0027341:	f7 f5                	div    ebp
c0027343:	89 d0                	mov    eax,edx
c0027345:	eb d4                	jmp    c002731b <__umoddi3+0x27>
c0027347:	90                   	nop
c0027348:	89 f1                	mov    ecx,esi
c002734a:	39 d8                	cmp    eax,ebx
c002734c:	76 0a                	jbe    c0027358 <__umoddi3+0x64>
c002734e:	89 f0                	mov    eax,esi
c0027350:	83 c4 1c             	add    esp,0x1c
c0027353:	5b                   	pop    ebx
c0027354:	5e                   	pop    esi
c0027355:	5f                   	pop    edi
c0027356:	5d                   	pop    ebp
c0027357:	c3                   	ret    
c0027358:	0f bd e8             	bsr    ebp,eax
c002735b:	83 f5 1f             	xor    ebp,0x1f
c002735e:	75 1c                	jne    c002737c <__umoddi3+0x88>
c0027360:	39 d8                	cmp    eax,ebx
c0027362:	72 04                	jb     c0027368 <__umoddi3+0x74>
c0027364:	39 f7                	cmp    edi,esi
c0027366:	77 08                	ja     c0027370 <__umoddi3+0x7c>
c0027368:	89 da                	mov    edx,ebx
c002736a:	29 fe                	sub    esi,edi
c002736c:	19 c2                	sbb    edx,eax
c002736e:	89 f1                	mov    ecx,esi
c0027370:	89 c8                	mov    eax,ecx
c0027372:	83 c4 1c             	add    esp,0x1c
c0027375:	5b                   	pop    ebx
c0027376:	5e                   	pop    esi
c0027377:	5f                   	pop    edi
c0027378:	5d                   	pop    ebp
c0027379:	c3                   	ret    
c002737a:	66 90                	xchg   ax,ax
c002737c:	ba 20 00 00 00       	mov    edx,0x20
c0027381:	29 ea                	sub    edx,ebp
c0027383:	89 e9                	mov    ecx,ebp
c0027385:	d3 e0                	shl    eax,cl
c0027387:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002738b:	89 f8                	mov    eax,edi
c002738d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027391:	88 d1                	mov    cl,dl
c0027393:	d3 e8                	shr    eax,cl
c0027395:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027399:	09 c1                	or     ecx,eax
c002739b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002739f:	89 e9                	mov    ecx,ebp
c00273a1:	d3 e7                	shl    edi,cl
c00273a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00273a7:	89 d8                	mov    eax,ebx
c00273a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00273ad:	88 d1                	mov    cl,dl
c00273af:	d3 e8                	shr    eax,cl
c00273b1:	89 c7                	mov    edi,eax
c00273b3:	89 e9                	mov    ecx,ebp
c00273b5:	d3 e3                	shl    ebx,cl
c00273b7:	89 f0                	mov    eax,esi
c00273b9:	88 d1                	mov    cl,dl
c00273bb:	d3 e8                	shr    eax,cl
c00273bd:	09 d8                	or     eax,ebx
c00273bf:	89 e9                	mov    ecx,ebp
c00273c1:	d3 e6                	shl    esi,cl
c00273c3:	89 f3                	mov    ebx,esi
c00273c5:	89 fa                	mov    edx,edi
c00273c7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00273cb:	89 d1                	mov    ecx,edx
c00273cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00273d1:	89 c6                	mov    esi,eax
c00273d3:	89 d7                	mov    edi,edx
c00273d5:	39 d1                	cmp    ecx,edx
c00273d7:	72 27                	jb     c0027400 <__umoddi3+0x10c>
c00273d9:	74 21                	je     c00273fc <__umoddi3+0x108>
c00273db:	89 ca                	mov    edx,ecx
c00273dd:	29 f3                	sub    ebx,esi
c00273df:	19 fa                	sbb    edx,edi
c00273e1:	89 d0                	mov    eax,edx
c00273e3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00273e7:	d3 e0                	shl    eax,cl
c00273e9:	89 e9                	mov    ecx,ebp
c00273eb:	d3 eb                	shr    ebx,cl
c00273ed:	09 d8                	or     eax,ebx
c00273ef:	d3 ea                	shr    edx,cl
c00273f1:	83 c4 1c             	add    esp,0x1c
c00273f4:	5b                   	pop    ebx
c00273f5:	5e                   	pop    esi
c00273f6:	5f                   	pop    edi
c00273f7:	5d                   	pop    ebp
c00273f8:	c3                   	ret    
c00273f9:	8d 76 00             	lea    esi,[esi+0x0]
c00273fc:	39 c3                	cmp    ebx,eax
c00273fe:	73 db                	jae    c00273db <__umoddi3+0xe7>
c0027400:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027404:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027408:	89 d7                	mov    edi,edx
c002740a:	89 c6                	mov    esi,eax
c002740c:	eb cd                	jmp    c00273db <__umoddi3+0xe7>

c002740e <__addsf3>:
c002740e:	55                   	push   ebp
c002740f:	89 e5                	mov    ebp,esp
c0027411:	57                   	push   edi
c0027412:	56                   	push   esi
c0027413:	53                   	push   ebx
c0027414:	83 ec 08             	sub    esp,0x8
c0027417:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002741a:	89 fa                	mov    edx,edi
c002741c:	89 f8                	mov    eax,edi
c002741e:	c1 f8 17             	sar    eax,0x17
c0027421:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027424:	c1 e2 08             	shl    edx,0x8
c0027427:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002742d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027430:	89 de                	mov    esi,ebx
c0027432:	c1 fe 17             	sar    esi,0x17
c0027435:	c1 e3 08             	shl    ebx,0x8
c0027438:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002743e:	31 f0                	xor    eax,esi
c0027440:	0f 88 3b 01 00 00    	js     c0027581 <__addsf3+0x173>
c0027446:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027449:	29 f1                	sub    ecx,esi
c002744b:	85 c9                	test   ecx,ecx
c002744d:	7e 54                	jle    c00274a3 <__addsf3+0x95>
c002744f:	89 f0                	mov    eax,esi
c0027451:	84 c0                	test   al,al
c0027453:	75 10                	jne    c0027465 <__addsf3+0x57>
c0027455:	85 db                	test   ebx,ebx
c0027457:	0f 84 aa 02 00 00    	je     c0027707 <__addsf3+0x2f9>
c002745d:	49                   	dec    ecx
c002745e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027461:	74 38                	je     c002749b <__addsf3+0x8d>
c0027463:	eb 13                	jmp    c0027478 <__addsf3+0x6a>
c0027465:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027468:	f7 d0                	not    eax
c002746a:	84 c0                	test   al,al
c002746c:	0f 84 95 02 00 00    	je     c0027707 <__addsf3+0x2f9>
c0027472:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027478:	83 f9 1f             	cmp    ecx,0x1f
c002747b:	0f 8f 86 02 00 00    	jg     c0027707 <__addsf3+0x2f9>
c0027481:	89 de                	mov    esi,ebx
c0027483:	d3 ee                	shr    esi,cl
c0027485:	b8 20 00 00 00       	mov    eax,0x20
c002748a:	29 c8                	sub    eax,ecx
c002748c:	89 c1                	mov    ecx,eax
c002748e:	d3 e3                	shl    ebx,cl
c0027490:	31 c0                	xor    eax,eax
c0027492:	85 db                	test   ebx,ebx
c0027494:	0f 95 c0             	setne  al
c0027497:	09 f0                	or     eax,esi
c0027499:	01 d0                	add    eax,edx
c002749b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002749e:	e9 b6 00 00 00       	jmp    c0027559 <__addsf3+0x14b>
c00274a3:	74 5c                	je     c0027501 <__addsf3+0xf3>
c00274a5:	89 f1                	mov    ecx,esi
c00274a7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00274aa:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00274ad:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00274b1:	75 14                	jne    c00274c7 <__addsf3+0xb9>
c00274b3:	85 d2                	test   edx,edx
c00274b5:	0f 84 4c 02 00 00    	je     c0027707 <__addsf3+0x2f9>
c00274bb:	49                   	dec    ecx
c00274bc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00274bf:	0f 84 94 00 00 00    	je     c0027559 <__addsf3+0x14b>
c00274c5:	eb 12                	jmp    c00274d9 <__addsf3+0xcb>
c00274c7:	89 f0                	mov    eax,esi
c00274c9:	f7 d0                	not    eax
c00274cb:	84 c0                	test   al,al
c00274cd:	0f 84 34 02 00 00    	je     c0027707 <__addsf3+0x2f9>
c00274d3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00274d9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00274dc:	83 f9 1f             	cmp    ecx,0x1f
c00274df:	0f 8f 22 02 00 00    	jg     c0027707 <__addsf3+0x2f9>
c00274e5:	89 d7                	mov    edi,edx
c00274e7:	d3 ef                	shr    edi,cl
c00274e9:	b8 20 00 00 00       	mov    eax,0x20
c00274ee:	29 c8                	sub    eax,ecx
c00274f0:	89 c1                	mov    ecx,eax
c00274f2:	d3 e2                	shl    edx,cl
c00274f4:	31 c0                	xor    eax,eax
c00274f6:	85 d2                	test   edx,edx
c00274f8:	0f 95 c0             	setne  al
c00274fb:	09 f8                	or     eax,edi
c00274fd:	01 d8                	add    eax,ebx
c00274ff:	eb 58                	jmp    c0027559 <__addsf3+0x14b>
c0027501:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027504:	8d 70 01             	lea    esi,[eax+0x1]
c0027507:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002750d:	75 32                	jne    c0027541 <__addsf3+0x133>
c002750f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027513:	75 1f                	jne    c0027534 <__addsf3+0x126>
c0027515:	85 d2                	test   edx,edx
c0027517:	0f 84 e0 01 00 00    	je     c00276fd <__addsf3+0x2ef>
c002751d:	85 db                	test   ebx,ebx
c002751f:	0f 84 e2 01 00 00    	je     c0027707 <__addsf3+0x2f9>
c0027525:	89 d0                	mov    eax,edx
c0027527:	01 d8                	add    eax,ebx
c0027529:	0f 89 a9 01 00 00    	jns    c00276d8 <__addsf3+0x2ca>
c002752f:	e9 9d 01 00 00       	jmp    c00276d1 <__addsf3+0x2c3>
c0027534:	85 d2                	test   edx,edx
c0027536:	0f 85 cb 01 00 00    	jne    c0027707 <__addsf3+0x2f9>
c002753c:	e9 bc 01 00 00       	jmp    c00276fd <__addsf3+0x2ef>
c0027541:	31 c0                	xor    eax,eax
c0027543:	89 f1                	mov    ecx,esi
c0027545:	f7 d1                	not    ecx
c0027547:	84 c9                	test   cl,cl
c0027549:	0f 84 90 01 00 00    	je     c00276df <__addsf3+0x2d1>
c002754f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027552:	d1 e8                	shr    eax,1
c0027554:	e9 86 01 00 00       	jmp    c00276df <__addsf3+0x2d1>
c0027559:	85 c0                	test   eax,eax
c002755b:	0f 89 7e 01 00 00    	jns    c00276df <__addsf3+0x2d1>
c0027561:	46                   	inc    esi
c0027562:	89 f2                	mov    edx,esi
c0027564:	f7 d2                	not    edx
c0027566:	84 d2                	test   dl,dl
c0027568:	0f 84 6f 01 00 00    	je     c00276dd <__addsf3+0x2cf>
c002756e:	89 c2                	mov    edx,eax
c0027570:	83 e2 01             	and    edx,0x1
c0027573:	d1 e8                	shr    eax,1
c0027575:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002757a:	09 d0                	or     eax,edx
c002757c:	e9 5e 01 00 00       	jmp    c00276df <__addsf3+0x2d1>
c0027581:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027585:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027588:	89 f0                	mov    eax,esi
c002758a:	0f b6 c0             	movzx  eax,al
c002758d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027590:	29 c1                	sub    ecx,eax
c0027592:	85 c9                	test   ecx,ecx
c0027594:	7e 55                	jle    c00275eb <__addsf3+0x1dd>
c0027596:	85 c0                	test   eax,eax
c0027598:	75 11                	jne    c00275ab <__addsf3+0x19d>
c002759a:	85 db                	test   ebx,ebx
c002759c:	0f 84 65 01 00 00    	je     c0027707 <__addsf3+0x2f9>
c00275a2:	49                   	dec    ecx
c00275a3:	75 19                	jne    c00275be <__addsf3+0x1b0>
c00275a5:	89 d0                	mov    eax,edx
c00275a7:	29 d8                	sub    eax,ebx
c00275a9:	eb 38                	jmp    c00275e3 <__addsf3+0x1d5>
c00275ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00275ae:	f7 d0                	not    eax
c00275b0:	84 c0                	test   al,al
c00275b2:	0f 84 4f 01 00 00    	je     c0027707 <__addsf3+0x2f9>
c00275b8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00275be:	83 f9 1f             	cmp    ecx,0x1f
c00275c1:	0f 8f 40 01 00 00    	jg     c0027707 <__addsf3+0x2f9>
c00275c7:	89 de                	mov    esi,ebx
c00275c9:	d3 ee                	shr    esi,cl
c00275cb:	b8 20 00 00 00       	mov    eax,0x20
c00275d0:	29 c8                	sub    eax,ecx
c00275d2:	89 c1                	mov    ecx,eax
c00275d4:	d3 e3                	shl    ebx,cl
c00275d6:	31 c0                	xor    eax,eax
c00275d8:	85 db                	test   ebx,ebx
c00275da:	0f 95 c0             	setne  al
c00275dd:	09 f0                	or     eax,esi
c00275df:	29 c2                	sub    edx,eax
c00275e1:	89 d0                	mov    eax,edx
c00275e3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00275e6:	e9 af 00 00 00       	jmp    c002769a <__addsf3+0x28c>
c00275eb:	74 5c                	je     c0027649 <__addsf3+0x23b>
c00275ed:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00275f0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275f3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00275f7:	75 14                	jne    c002760d <__addsf3+0x1ff>
c00275f9:	85 d2                	test   edx,edx
c00275fb:	0f 84 06 01 00 00    	je     c0027707 <__addsf3+0x2f9>
c0027601:	48                   	dec    eax
c0027602:	75 1b                	jne    c002761f <__addsf3+0x211>
c0027604:	89 d8                	mov    eax,ebx
c0027606:	29 d0                	sub    eax,edx
c0027608:	e9 8d 00 00 00       	jmp    c002769a <__addsf3+0x28c>
c002760d:	89 f1                	mov    ecx,esi
c002760f:	f7 d1                	not    ecx
c0027611:	84 c9                	test   cl,cl
c0027613:	0f 84 ee 00 00 00    	je     c0027707 <__addsf3+0x2f9>
c0027619:	81 ca 00 00 00 80    	or     edx,0x80000000
c002761f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027622:	83 f8 1f             	cmp    eax,0x1f
c0027625:	0f 8f dc 00 00 00    	jg     c0027707 <__addsf3+0x2f9>
c002762b:	89 d7                	mov    edi,edx
c002762d:	88 c1                	mov    cl,al
c002762f:	d3 ef                	shr    edi,cl
c0027631:	b9 20 00 00 00       	mov    ecx,0x20
c0027636:	29 c1                	sub    ecx,eax
c0027638:	d3 e2                	shl    edx,cl
c002763a:	31 c0                	xor    eax,eax
c002763c:	85 d2                	test   edx,edx
c002763e:	0f 95 c0             	setne  al
c0027641:	09 f8                	or     eax,edi
c0027643:	29 c3                	sub    ebx,eax
c0027645:	89 d8                	mov    eax,ebx
c0027647:	eb 51                	jmp    c002769a <__addsf3+0x28c>
c0027649:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002764c:	40                   	inc    eax
c002764d:	a8 fe                	test   al,0xfe
c002764f:	75 3d                	jne    c002768e <__addsf3+0x280>
c0027651:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027655:	0f 85 a7 00 00 00    	jne    c0027702 <__addsf3+0x2f4>
c002765b:	85 d2                	test   edx,edx
c002765d:	75 12                	jne    c0027671 <__addsf3+0x263>
c002765f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027662:	85 db                	test   ebx,ebx
c0027664:	0f 85 9d 00 00 00    	jne    c0027707 <__addsf3+0x2f9>
c002766a:	31 ff                	xor    edi,edi
c002766c:	e9 96 00 00 00       	jmp    c0027707 <__addsf3+0x2f9>
c0027671:	85 db                	test   ebx,ebx
c0027673:	0f 84 8e 00 00 00    	je     c0027707 <__addsf3+0x2f9>
c0027679:	89 d0                	mov    eax,edx
c002767b:	29 d8                	sub    eax,ebx
c002767d:	79 06                	jns    c0027685 <__addsf3+0x277>
c002767f:	89 d8                	mov    eax,ebx
c0027681:	29 d0                	sub    eax,edx
c0027683:	eb 5a                	jmp    c00276df <__addsf3+0x2d1>
c0027685:	bf 00 00 00 00       	mov    edi,0x0
c002768a:	74 7b                	je     c0027707 <__addsf3+0x2f9>
c002768c:	eb 4a                	jmp    c00276d8 <__addsf3+0x2ca>
c002768e:	89 d0                	mov    eax,edx
c0027690:	29 d8                	sub    eax,ebx
c0027692:	79 12                	jns    c00276a6 <__addsf3+0x298>
c0027694:	89 d8                	mov    eax,ebx
c0027696:	29 d0                	sub    eax,edx
c0027698:	eb 09                	jmp    c00276a3 <__addsf3+0x295>
c002769a:	85 c0                	test   eax,eax
c002769c:	79 41                	jns    c00276df <__addsf3+0x2d1>
c002769e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276a3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00276a6:	31 f6                	xor    esi,esi
c00276a8:	85 c0                	test   eax,eax
c00276aa:	74 33                	je     c00276df <__addsf3+0x2d1>
c00276ac:	0f bd c8             	bsr    ecx,eax
c00276af:	83 f1 1f             	xor    ecx,0x1f
c00276b2:	d3 e0                	shl    eax,cl
c00276b4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00276b8:	39 ca                	cmp    edx,ecx
c00276ba:	7f 10                	jg     c00276cc <__addsf3+0x2be>
c00276bc:	29 d1                	sub    ecx,edx
c00276be:	41                   	inc    ecx
c00276bf:	d3 e8                	shr    eax,cl
c00276c1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276c4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00276ca:	eb 13                	jmp    c00276df <__addsf3+0x2d1>
c00276cc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276cf:	29 ce                	sub    esi,ecx
c00276d1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276d6:	eb 07                	jmp    c00276df <__addsf3+0x2d1>
c00276d8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276db:	eb 02                	jmp    c00276df <__addsf3+0x2d1>
c00276dd:	31 c0                	xor    eax,eax
c00276df:	89 c2                	mov    edx,eax
c00276e1:	c1 ea 08             	shr    edx,0x8
c00276e4:	a8 7f                	test   al,0x7f
c00276e6:	0f 95 c1             	setne  cl
c00276e9:	09 d1                	or     ecx,edx
c00276eb:	83 e1 01             	and    ecx,0x1
c00276ee:	c1 e8 07             	shr    eax,0x7
c00276f1:	21 c8                	and    eax,ecx
c00276f3:	c1 e6 17             	shl    esi,0x17
c00276f6:	09 d6                	or     esi,edx
c00276f8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00276fb:	eb 0a                	jmp    c0027707 <__addsf3+0x2f9>
c00276fd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027700:	eb 05                	jmp    c0027707 <__addsf3+0x2f9>
c0027702:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027707:	89 f8                	mov    eax,edi
c0027709:	5a                   	pop    edx
c002770a:	59                   	pop    ecx
c002770b:	5b                   	pop    ebx
c002770c:	5e                   	pop    esi
c002770d:	5f                   	pop    edi
c002770e:	5d                   	pop    ebp
c002770f:	c3                   	ret    

c0027710 <__subsf3>:
c0027710:	55                   	push   ebp
c0027711:	89 e5                	mov    ebp,esp
c0027713:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027716:	05 00 00 00 80       	add    eax,0x80000000
c002771b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002771e:	5d                   	pop    ebp
c002771f:	e9 ea fc ff ff       	jmp    c002740e <__addsf3>

c0027724 <__negsf2>:
c0027724:	55                   	push   ebp
c0027725:	89 e5                	mov    ebp,esp
c0027727:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002772a:	05 00 00 00 80       	add    eax,0x80000000
c002772f:	5d                   	pop    ebp
c0027730:	c3                   	ret    

c0027731 <__mulsf3>:
c0027731:	55                   	push   ebp
c0027732:	89 e5                	mov    ebp,esp
c0027734:	57                   	push   edi
c0027735:	56                   	push   esi
c0027736:	53                   	push   ebx
c0027737:	83 ec 1c             	sub    esp,0x1c
c002773a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002773d:	89 f0                	mov    eax,esi
c002773f:	89 f1                	mov    ecx,esi
c0027741:	c1 f9 17             	sar    ecx,0x17
c0027744:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027747:	c1 e0 08             	shl    eax,0x8
c002774a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002774f:	89 c1                	mov    ecx,eax
c0027751:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027754:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027757:	89 c7                	mov    edi,eax
c0027759:	c1 ff 17             	sar    edi,0x17
c002775c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027760:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027763:	89 f8                	mov    eax,edi
c0027765:	0f b6 c0             	movzx  eax,al
c0027768:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002776b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002776f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027772:	42                   	inc    edx
c0027773:	80 e2 fe             	and    dl,0xfe
c0027776:	75 7b                	jne    c00277f3 <__mulsf3+0xc2>
c0027778:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002777c:	74 54                	je     c00277d2 <__mulsf3+0xa1>
c002777e:	85 c9                	test   ecx,ecx
c0027780:	0f 85 64 01 00 00    	jne    c00278ea <__mulsf3+0x1b9>
c0027786:	8d 57 01             	lea    edx,[edi+0x1]
c0027789:	80 e2 fe             	and    dl,0xfe
c002778c:	75 1f                	jne    c00277ad <__mulsf3+0x7c>
c002778e:	85 c0                	test   eax,eax
c0027790:	b8 00 00 00 00       	mov    eax,0x0
c0027795:	74 29                	je     c00277c0 <__mulsf3+0x8f>
c0027797:	53                   	push   ebx
c0027798:	53                   	push   ebx
c0027799:	50                   	push   eax
c002779a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002779d:	e8 96 05 00 00       	call   c0027d38 <__nesf2>
c00277a2:	83 c4 10             	add    esp,0x10
c00277a5:	85 c0                	test   eax,eax
c00277a7:	0f 85 3a 01 00 00    	jne    c00278e7 <__mulsf3+0x1b6>
c00277ad:	85 ff                	test   edi,edi
c00277af:	0f 89 35 01 00 00    	jns    c00278ea <__mulsf3+0x1b9>
c00277b5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00277bb:	e9 2a 01 00 00       	jmp    c00278ea <__mulsf3+0x1b9>
c00277c0:	51                   	push   ecx
c00277c1:	51                   	push   ecx
c00277c2:	50                   	push   eax
c00277c3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277c6:	e8 6d 05 00 00       	call   c0027d38 <__nesf2>
c00277cb:	83 c4 10             	add    esp,0x10
c00277ce:	85 c0                	test   eax,eax
c00277d0:	eb 15                	jmp    c00277e7 <__mulsf3+0xb6>
c00277d2:	85 c9                	test   ecx,ecx
c00277d4:	74 0b                	je     c00277e1 <__mulsf3+0xb0>
c00277d6:	8d 53 ff             	lea    edx,[ebx-0x1]
c00277d9:	01 c9                	add    ecx,ecx
c00277db:	78 16                	js     c00277f3 <__mulsf3+0xc2>
c00277dd:	89 d3                	mov    ebx,edx
c00277df:	eb f5                	jmp    c00277d6 <__mulsf3+0xa5>
c00277e1:	89 f8                	mov    eax,edi
c00277e3:	f7 d0                	not    eax
c00277e5:	84 c0                	test   al,al
c00277e7:	75 c4                	jne    c00277ad <__mulsf3+0x7c>
c00277e9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00277ee:	e9 f7 00 00 00       	jmp    c00278ea <__mulsf3+0x1b9>
c00277f3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00277f6:	c1 e6 08             	shl    esi,0x8
c00277f9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00277ff:	8d 57 01             	lea    edx,[edi+0x1]
c0027802:	80 e2 fe             	and    dl,0xfe
c0027805:	75 63                	jne    c002786a <__mulsf3+0x139>
c0027807:	85 c0                	test   eax,eax
c0027809:	74 2f                	je     c002783a <__mulsf3+0x109>
c002780b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002780f:	0f 89 d2 00 00 00    	jns    c00278e7 <__mulsf3+0x1b6>
c0027815:	52                   	push   edx
c0027816:	52                   	push   edx
c0027817:	6a 00                	push   0x0
c0027819:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002781c:	e8 dc 04 00 00       	call   c0027cfd <__eqsf2>
c0027821:	83 c4 10             	add    esp,0x10
c0027824:	85 c0                	test   eax,eax
c0027826:	0f 85 bb 00 00 00    	jne    c00278e7 <__mulsf3+0x1b6>
c002782c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002782f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027835:	e9 b0 00 00 00       	jmp    c00278ea <__mulsf3+0x1b9>
c002783a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002783d:	50                   	push   eax
c002783e:	50                   	push   eax
c002783f:	6a 00                	push   0x0
c0027841:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027844:	e8 b4 04 00 00       	call   c0027cfd <__eqsf2>
c0027849:	83 c4 10             	add    esp,0x10
c002784c:	85 c0                	test   eax,eax
c002784e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027851:	75 0c                	jne    c002785f <__mulsf3+0x12e>
c0027853:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027857:	0f 89 8a 00 00 00    	jns    c00278e7 <__mulsf3+0x1b6>
c002785d:	eb cd                	jmp    c002782c <__mulsf3+0xfb>
c002785f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027862:	01 f6                	add    esi,esi
c0027864:	78 04                	js     c002786a <__mulsf3+0x139>
c0027866:	89 c3                	mov    ebx,eax
c0027868:	eb f5                	jmp    c002785f <__mulsf3+0x12e>
c002786a:	89 c8                	mov    eax,ecx
c002786c:	0d 00 00 00 80       	or     eax,0x80000000
c0027871:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027877:	f7 e6                	mul    esi
c0027879:	85 c0                	test   eax,eax
c002787b:	0f 95 c0             	setne  al
c002787e:	0f b6 c0             	movzx  eax,al
c0027881:	09 c2                	or     edx,eax
c0027883:	78 03                	js     c0027888 <__mulsf3+0x157>
c0027885:	01 d2                	add    edx,edx
c0027887:	4b                   	dec    ebx
c0027888:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002788e:	7f 22                	jg     c00278b2 <__mulsf3+0x181>
c0027890:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027896:	85 db                	test   ebx,ebx
c0027898:	7f 23                	jg     c00278bd <__mulsf3+0x18c>
c002789a:	83 fb e9             	cmp    ebx,0xffffffe9
c002789d:	7c 1a                	jl     c00278b9 <__mulsf3+0x188>
c002789f:	81 ca 00 00 00 80    	or     edx,0x80000000
c00278a5:	b9 01 00 00 00       	mov    ecx,0x1
c00278aa:	29 d9                	sub    ecx,ebx
c00278ac:	d3 ea                	shr    edx,cl
c00278ae:	31 db                	xor    ebx,ebx
c00278b0:	eb 0b                	jmp    c00278bd <__mulsf3+0x18c>
c00278b2:	bb ff 00 00 00       	mov    ebx,0xff
c00278b7:	eb 02                	jmp    c00278bb <__mulsf3+0x18a>
c00278b9:	31 db                	xor    ebx,ebx
c00278bb:	31 d2                	xor    edx,edx
c00278bd:	89 d0                	mov    eax,edx
c00278bf:	c1 e8 08             	shr    eax,0x8
c00278c2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00278c5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00278cb:	09 fb                	or     ebx,edi
c00278cd:	c1 e3 17             	shl    ebx,0x17
c00278d0:	09 c3                	or     ebx,eax
c00278d2:	f6 c2 7f             	test   dl,0x7f
c00278d5:	0f 95 c1             	setne  cl
c00278d8:	09 c8                	or     eax,ecx
c00278da:	83 e0 01             	and    eax,0x1
c00278dd:	c1 ea 07             	shr    edx,0x7
c00278e0:	21 c2                	and    edx,eax
c00278e2:	8d 34 13             	lea    esi,[ebx+edx*1]
c00278e5:	eb 03                	jmp    c00278ea <__mulsf3+0x1b9>
c00278e7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00278ea:	89 f0                	mov    eax,esi
c00278ec:	8d 65 f4             	lea    esp,[ebp-0xc]
c00278ef:	5b                   	pop    ebx
c00278f0:	5e                   	pop    esi
c00278f1:	5f                   	pop    edi
c00278f2:	5d                   	pop    ebp
c00278f3:	c3                   	ret    

c00278f4 <__divsf3>:
c00278f4:	55                   	push   ebp
c00278f5:	89 e5                	mov    ebp,esp
c00278f7:	57                   	push   edi
c00278f8:	56                   	push   esi
c00278f9:	53                   	push   ebx
c00278fa:	83 ec 1c             	sub    esp,0x1c
c00278fd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027900:	89 d8                	mov    eax,ebx
c0027902:	89 d9                	mov    ecx,ebx
c0027904:	c1 f9 17             	sar    ecx,0x17
c0027907:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002790a:	c1 e0 08             	shl    eax,0x8
c002790d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027912:	89 c1                	mov    ecx,eax
c0027914:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027917:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002791a:	89 c7                	mov    edi,eax
c002791c:	c1 ff 17             	sar    edi,0x17
c002791f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027923:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027926:	89 f8                	mov    eax,edi
c0027928:	0f b6 c0             	movzx  eax,al
c002792b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002792e:	29 c6                	sub    esi,eax
c0027930:	83 c6 7f             	add    esi,0x7f
c0027933:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027936:	42                   	inc    edx
c0027937:	80 e2 fe             	and    dl,0xfe
c002793a:	0f 85 9c 00 00 00    	jne    c00279dc <__divsf3+0xe8>
c0027940:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027944:	74 33                	je     c0027979 <__divsf3+0x85>
c0027946:	85 c9                	test   ecx,ecx
c0027948:	0f 85 c7 01 00 00    	jne    c0027b15 <__divsf3+0x221>
c002794e:	8d 57 01             	lea    edx,[edi+0x1]
c0027951:	80 e2 fe             	and    dl,0xfe
c0027954:	75 2f                	jne    c0027985 <__divsf3+0x91>
c0027956:	85 c0                	test   eax,eax
c0027958:	74 2b                	je     c0027985 <__divsf3+0x91>
c002795a:	51                   	push   ecx
c002795b:	51                   	push   ecx
c002795c:	6a 00                	push   0x0
c002795e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027961:	e8 d2 03 00 00       	call   c0027d38 <__nesf2>
c0027966:	83 c4 10             	add    esp,0x10
c0027969:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002796c:	85 c0                	test   eax,eax
c002796e:	0f 85 a1 01 00 00    	jne    c0027b15 <__divsf3+0x221>
c0027974:	e9 92 01 00 00       	jmp    c0027b0b <__divsf3+0x217>
c0027979:	85 c9                	test   ecx,ecx
c002797b:	75 1b                	jne    c0027998 <__divsf3+0xa4>
c002797d:	8d 57 01             	lea    edx,[edi+0x1]
c0027980:	80 e2 fe             	and    dl,0xfe
c0027983:	74 1e                	je     c00279a3 <__divsf3+0xaf>
c0027985:	85 ff                	test   edi,edi
c0027987:	0f 89 88 01 00 00    	jns    c0027b15 <__divsf3+0x221>
c002798d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027993:	e9 7d 01 00 00       	jmp    c0027b15 <__divsf3+0x221>
c0027998:	8d 56 ff             	lea    edx,[esi-0x1]
c002799b:	01 c9                	add    ecx,ecx
c002799d:	78 3d                	js     c00279dc <__divsf3+0xe8>
c002799f:	89 d6                	mov    esi,edx
c00279a1:	eb f5                	jmp    c0027998 <__divsf3+0xa4>
c00279a3:	85 c0                	test   eax,eax
c00279a5:	b8 00 00 00 00       	mov    eax,0x0
c00279aa:	74 18                	je     c00279c4 <__divsf3+0xd0>
c00279ac:	52                   	push   edx
c00279ad:	52                   	push   edx
c00279ae:	50                   	push   eax
c00279af:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279b2:	e8 81 03 00 00       	call   c0027d38 <__nesf2>
c00279b7:	83 c4 10             	add    esp,0x10
c00279ba:	85 c0                	test   eax,eax
c00279bc:	0f 85 50 01 00 00    	jne    c0027b12 <__divsf3+0x21e>
c00279c2:	eb c1                	jmp    c0027985 <__divsf3+0x91>
c00279c4:	56                   	push   esi
c00279c5:	56                   	push   esi
c00279c6:	50                   	push   eax
c00279c7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279ca:	e8 69 03 00 00       	call   c0027d38 <__nesf2>
c00279cf:	83 c4 10             	add    esp,0x10
c00279d2:	85 c0                	test   eax,eax
c00279d4:	0f 84 31 01 00 00    	je     c0027b0b <__divsf3+0x217>
c00279da:	eb a9                	jmp    c0027985 <__divsf3+0x91>
c00279dc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00279df:	c1 e3 08             	shl    ebx,0x8
c00279e2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00279e8:	8d 57 01             	lea    edx,[edi+0x1]
c00279eb:	80 e2 fe             	and    dl,0xfe
c00279ee:	75 71                	jne    c0027a61 <__divsf3+0x16d>
c00279f0:	85 c0                	test   eax,eax
c00279f2:	ba 00 00 00 00       	mov    edx,0x0
c00279f7:	74 2f                	je     c0027a28 <__divsf3+0x134>
c00279f9:	51                   	push   ecx
c00279fa:	51                   	push   ecx
c00279fb:	52                   	push   edx
c00279fc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279ff:	e8 f9 02 00 00       	call   c0027cfd <__eqsf2>
c0027a04:	83 c4 10             	add    esp,0x10
c0027a07:	85 c0                	test   eax,eax
c0027a09:	0f 85 03 01 00 00    	jne    c0027b12 <__divsf3+0x21e>
c0027a0f:	31 d2                	xor    edx,edx
c0027a11:	89 d3                	mov    ebx,edx
c0027a13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a16:	31 f8                	xor    eax,edi
c0027a18:	0f 89 f7 00 00 00    	jns    c0027b15 <__divsf3+0x221>
c0027a1e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027a23:	e9 ed 00 00 00       	jmp    c0027b15 <__divsf3+0x221>
c0027a28:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027a2b:	50                   	push   eax
c0027a2c:	50                   	push   eax
c0027a2d:	52                   	push   edx
c0027a2e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a31:	e8 c7 02 00 00       	call   c0027cfd <__eqsf2>
c0027a36:	83 c4 10             	add    esp,0x10
c0027a39:	85 c0                	test   eax,eax
c0027a3b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a3e:	75 16                	jne    c0027a56 <__divsf3+0x162>
c0027a40:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a43:	31 fb                	xor    ebx,edi
c0027a45:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027a4b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027a51:	e9 bf 00 00 00       	jmp    c0027b15 <__divsf3+0x221>
c0027a56:	8d 46 01             	lea    eax,[esi+0x1]
c0027a59:	01 db                	add    ebx,ebx
c0027a5b:	78 04                	js     c0027a61 <__divsf3+0x16d>
c0027a5d:	89 c6                	mov    esi,eax
c0027a5f:	eb f5                	jmp    c0027a56 <__divsf3+0x162>
c0027a61:	89 c8                	mov    eax,ecx
c0027a63:	0d 00 00 00 80       	or     eax,0x80000000
c0027a68:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027a6e:	31 d2                	xor    edx,edx
c0027a70:	39 d8                	cmp    eax,ebx
c0027a72:	72 07                	jb     c0027a7b <__divsf3+0x187>
c0027a74:	29 d8                	sub    eax,ebx
c0027a76:	ba 01 00 00 00       	mov    edx,0x1
c0027a7b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027a82:	01 d2                	add    edx,edx
c0027a84:	89 c1                	mov    ecx,eax
c0027a86:	01 c0                	add    eax,eax
c0027a88:	85 c9                	test   ecx,ecx
c0027a8a:	78 04                	js     c0027a90 <__divsf3+0x19c>
c0027a8c:	39 c3                	cmp    ebx,eax
c0027a8e:	77 05                	ja     c0027a95 <__divsf3+0x1a1>
c0027a90:	29 d8                	sub    eax,ebx
c0027a92:	83 ca 01             	or     edx,0x1
c0027a95:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027a98:	75 e8                	jne    c0027a82 <__divsf3+0x18e>
c0027a9a:	85 c0                	test   eax,eax
c0027a9c:	0f 95 c0             	setne  al
c0027a9f:	0f b6 c0             	movzx  eax,al
c0027aa2:	c1 e2 06             	shl    edx,0x6
c0027aa5:	09 c2                	or     edx,eax
c0027aa7:	78 03                	js     c0027aac <__divsf3+0x1b8>
c0027aa9:	01 d2                	add    edx,edx
c0027aab:	4e                   	dec    esi
c0027aac:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027ab2:	7f 22                	jg     c0027ad6 <__divsf3+0x1e2>
c0027ab4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027aba:	85 f6                	test   esi,esi
c0027abc:	7f 23                	jg     c0027ae1 <__divsf3+0x1ed>
c0027abe:	83 fe e9             	cmp    esi,0xffffffe9
c0027ac1:	7c 1a                	jl     c0027add <__divsf3+0x1e9>
c0027ac3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ac9:	b9 01 00 00 00       	mov    ecx,0x1
c0027ace:	29 f1                	sub    ecx,esi
c0027ad0:	d3 ea                	shr    edx,cl
c0027ad2:	31 f6                	xor    esi,esi
c0027ad4:	eb 0b                	jmp    c0027ae1 <__divsf3+0x1ed>
c0027ad6:	be ff 00 00 00       	mov    esi,0xff
c0027adb:	eb 02                	jmp    c0027adf <__divsf3+0x1eb>
c0027add:	31 f6                	xor    esi,esi
c0027adf:	31 d2                	xor    edx,edx
c0027ae1:	89 d0                	mov    eax,edx
c0027ae3:	c1 e8 08             	shr    eax,0x8
c0027ae6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027ae9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027aef:	09 fe                	or     esi,edi
c0027af1:	c1 e6 17             	shl    esi,0x17
c0027af4:	09 c6                	or     esi,eax
c0027af6:	f6 c2 7f             	test   dl,0x7f
c0027af9:	0f 95 c1             	setne  cl
c0027afc:	09 c8                	or     eax,ecx
c0027afe:	83 e0 01             	and    eax,0x1
c0027b01:	c1 ea 07             	shr    edx,0x7
c0027b04:	21 c2                	and    edx,eax
c0027b06:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027b09:	eb 0a                	jmp    c0027b15 <__divsf3+0x221>
c0027b0b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027b10:	eb 03                	jmp    c0027b15 <__divsf3+0x221>
c0027b12:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027b15:	89 d8                	mov    eax,ebx
c0027b17:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027b1a:	5b                   	pop    ebx
c0027b1b:	5e                   	pop    esi
c0027b1c:	5f                   	pop    edi
c0027b1d:	5d                   	pop    ebp
c0027b1e:	c3                   	ret    

c0027b1f <__floatsisf>:
c0027b1f:	55                   	push   ebp
c0027b20:	89 e5                	mov    ebp,esp
c0027b22:	53                   	push   ebx
c0027b23:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b26:	85 d2                	test   edx,edx
c0027b28:	7e 2b                	jle    c0027b55 <__floatsisf+0x36>
c0027b2a:	0f bd ca             	bsr    ecx,edx
c0027b2d:	83 f1 1f             	xor    ecx,0x1f
c0027b30:	d3 e2                	shl    edx,cl
c0027b32:	89 d0                	mov    eax,edx
c0027b34:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b39:	89 c3                	mov    ebx,eax
c0027b3b:	c1 eb 08             	shr    ebx,0x8
c0027b3e:	80 e2 7f             	and    dl,0x7f
c0027b41:	0f 95 c2             	setne  dl
c0027b44:	09 da                	or     edx,ebx
c0027b46:	83 e2 01             	and    edx,0x1
c0027b49:	c1 e8 07             	shr    eax,0x7
c0027b4c:	21 c2                	and    edx,eax
c0027b4e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b53:	eb 32                	jmp    c0027b87 <__floatsisf+0x68>
c0027b55:	b8 00 00 00 00       	mov    eax,0x0
c0027b5a:	74 34                	je     c0027b90 <__floatsisf+0x71>
c0027b5c:	f7 da                	neg    edx
c0027b5e:	0f bd ca             	bsr    ecx,edx
c0027b61:	83 f1 1f             	xor    ecx,0x1f
c0027b64:	d3 e2                	shl    edx,cl
c0027b66:	89 d0                	mov    eax,edx
c0027b68:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b6d:	89 c3                	mov    ebx,eax
c0027b6f:	c1 eb 08             	shr    ebx,0x8
c0027b72:	80 e2 7f             	and    dl,0x7f
c0027b75:	0f 95 c2             	setne  dl
c0027b78:	09 da                	or     edx,ebx
c0027b7a:	83 e2 01             	and    edx,0x1
c0027b7d:	c1 e8 07             	shr    eax,0x7
c0027b80:	21 c2                	and    edx,eax
c0027b82:	b8 9e 01 00 00       	mov    eax,0x19e
c0027b87:	29 c8                	sub    eax,ecx
c0027b89:	c1 e0 17             	shl    eax,0x17
c0027b8c:	09 d8                	or     eax,ebx
c0027b8e:	01 d0                	add    eax,edx
c0027b90:	5b                   	pop    ebx
c0027b91:	5d                   	pop    ebp
c0027b92:	c3                   	ret    

c0027b93 <__floatunsisf>:
c0027b93:	55                   	push   ebp
c0027b94:	89 e5                	mov    ebp,esp
c0027b96:	53                   	push   ebx
c0027b97:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b9a:	31 c0                	xor    eax,eax
c0027b9c:	85 d2                	test   edx,edx
c0027b9e:	74 32                	je     c0027bd2 <__floatunsisf+0x3f>
c0027ba0:	0f bd ca             	bsr    ecx,edx
c0027ba3:	83 f1 1f             	xor    ecx,0x1f
c0027ba6:	d3 e2                	shl    edx,cl
c0027ba8:	89 d0                	mov    eax,edx
c0027baa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027baf:	89 c3                	mov    ebx,eax
c0027bb1:	c1 eb 08             	shr    ebx,0x8
c0027bb4:	80 e2 7f             	and    dl,0x7f
c0027bb7:	0f 95 c2             	setne  dl
c0027bba:	09 da                	or     edx,ebx
c0027bbc:	83 e2 01             	and    edx,0x1
c0027bbf:	c1 e8 07             	shr    eax,0x7
c0027bc2:	21 c2                	and    edx,eax
c0027bc4:	b8 9e 00 00 00       	mov    eax,0x9e
c0027bc9:	29 c8                	sub    eax,ecx
c0027bcb:	c1 e0 17             	shl    eax,0x17
c0027bce:	09 d8                	or     eax,ebx
c0027bd0:	01 d0                	add    eax,edx
c0027bd2:	5b                   	pop    ebx
c0027bd3:	5d                   	pop    ebp
c0027bd4:	c3                   	ret    

c0027bd5 <__fixsfsi>:
c0027bd5:	55                   	push   ebp
c0027bd6:	89 e5                	mov    ebp,esp
c0027bd8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027bdb:	89 d1                	mov    ecx,edx
c0027bdd:	c1 e1 08             	shl    ecx,0x8
c0027be0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027be6:	c1 fa 17             	sar    edx,0x17
c0027be9:	78 1c                	js     c0027c07 <__fixsfsi+0x32>
c0027beb:	83 ea 7f             	sub    edx,0x7f
c0027bee:	31 c0                	xor    eax,eax
c0027bf0:	83 fa 1e             	cmp    edx,0x1e
c0027bf3:	77 40                	ja     c0027c35 <__fixsfsi+0x60>
c0027bf5:	89 c8                	mov    eax,ecx
c0027bf7:	0d 00 00 00 80       	or     eax,0x80000000
c0027bfc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c01:	29 d1                	sub    ecx,edx
c0027c03:	d3 e8                	shr    eax,cl
c0027c05:	eb 2e                	jmp    c0027c35 <__fixsfsi+0x60>
c0027c07:	31 c0                	xor    eax,eax
c0027c09:	81 c2 81 00 00 00    	add    edx,0x81
c0027c0f:	78 24                	js     c0027c35 <__fixsfsi+0x60>
c0027c11:	83 fa 1e             	cmp    edx,0x1e
c0027c14:	7e 09                	jle    c0027c1f <__fixsfsi+0x4a>
c0027c16:	83 fa 1f             	cmp    edx,0x1f
c0027c19:	75 18                	jne    c0027c33 <__fixsfsi+0x5e>
c0027c1b:	85 c9                	test   ecx,ecx
c0027c1d:	75 14                	jne    c0027c33 <__fixsfsi+0x5e>
c0027c1f:	89 c8                	mov    eax,ecx
c0027c21:	0d 00 00 00 80       	or     eax,0x80000000
c0027c26:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c2b:	29 d1                	sub    ecx,edx
c0027c2d:	d3 e8                	shr    eax,cl
c0027c2f:	f7 d8                	neg    eax
c0027c31:	eb 02                	jmp    c0027c35 <__fixsfsi+0x60>
c0027c33:	31 c0                	xor    eax,eax
c0027c35:	5d                   	pop    ebp
c0027c36:	c3                   	ret    

c0027c37 <__fixunssfsi>:
c0027c37:	55                   	push   ebp
c0027c38:	89 e5                	mov    ebp,esp
c0027c3a:	53                   	push   ebx
c0027c3b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c3e:	89 d3                	mov    ebx,edx
c0027c40:	c1 fb 17             	sar    ebx,0x17
c0027c43:	83 eb 7f             	sub    ebx,0x7f
c0027c46:	31 c0                	xor    eax,eax
c0027c48:	83 fb 1f             	cmp    ebx,0x1f
c0027c4b:	77 18                	ja     c0027c65 <__fixunssfsi+0x2e>
c0027c4d:	89 d0                	mov    eax,edx
c0027c4f:	c1 e0 08             	shl    eax,0x8
c0027c52:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c57:	0d 00 00 00 80       	or     eax,0x80000000
c0027c5c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c61:	29 d9                	sub    ecx,ebx
c0027c63:	d3 e8                	shr    eax,cl
c0027c65:	5b                   	pop    ebx
c0027c66:	5d                   	pop    ebp
c0027c67:	c3                   	ret    

c0027c68 <__cmpsf2>:
c0027c68:	55                   	push   ebp
c0027c69:	89 e5                	mov    ebp,esp
c0027c6b:	57                   	push   edi
c0027c6c:	56                   	push   esi
c0027c6d:	53                   	push   ebx
c0027c6e:	83 ec 24             	sub    esp,0x24
c0027c71:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027c77:	e8 4f 10 00 00       	call   c0028ccb <__truncdfsf2>
c0027c7c:	5a                   	pop    edx
c0027c7d:	59                   	pop    ecx
c0027c7e:	89 c3                	mov    ebx,eax
c0027c80:	c1 e8 17             	shr    eax,0x17
c0027c83:	0f b6 f0             	movzx  esi,al
c0027c86:	89 d8                	mov    eax,ebx
c0027c88:	c1 e8 1f             	shr    eax,0x1f
c0027c8b:	31 c6                	xor    esi,eax
c0027c8d:	c1 e3 08             	shl    ebx,0x8
c0027c90:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027c93:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027c96:	e8 30 10 00 00       	call   c0028ccb <__truncdfsf2>
c0027c9b:	83 c4 10             	add    esp,0x10
c0027c9e:	89 c1                	mov    ecx,eax
c0027ca0:	c1 e9 17             	shr    ecx,0x17
c0027ca3:	0f b6 c9             	movzx  ecx,cl
c0027ca6:	89 c7                	mov    edi,eax
c0027ca8:	c1 ef 1f             	shr    edi,0x1f
c0027cab:	89 ca                	mov    edx,ecx
c0027cad:	31 fa                	xor    edx,edi
c0027caf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027cb2:	c1 e0 08             	shl    eax,0x8
c0027cb5:	89 c2                	mov    edx,eax
c0027cb7:	89 d8                	mov    eax,ebx
c0027cb9:	09 d0                	or     eax,edx
c0027cbb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027cc0:	09 f0                	or     eax,esi
c0027cc2:	75 08                	jne    c0027ccc <__cmpsf2+0x64>
c0027cc4:	31 c0                	xor    eax,eax
c0027cc6:	39 f9                	cmp    ecx,edi
c0027cc8:	75 0c                	jne    c0027cd6 <__cmpsf2+0x6e>
c0027cca:	eb 29                	jmp    c0027cf5 <__cmpsf2+0x8d>
c0027ccc:	b8 01 00 00 00       	mov    eax,0x1
c0027cd1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027cd4:	7f 1f                	jg     c0027cf5 <__cmpsf2+0x8d>
c0027cd6:	83 c8 ff             	or     eax,0xffffffff
c0027cd9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027cdc:	7c 17                	jl     c0027cf5 <__cmpsf2+0x8d>
c0027cde:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027ce4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027cea:	b8 01 00 00 00       	mov    eax,0x1
c0027cef:	39 d3                	cmp    ebx,edx
c0027cf1:	77 02                	ja     c0027cf5 <__cmpsf2+0x8d>
c0027cf3:	19 c0                	sbb    eax,eax
c0027cf5:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027cf8:	5b                   	pop    ebx
c0027cf9:	5e                   	pop    esi
c0027cfa:	5f                   	pop    edi
c0027cfb:	5d                   	pop    ebp
c0027cfc:	c3                   	ret    

c0027cfd <__eqsf2>:
c0027cfd:	55                   	push   ebp
c0027cfe:	89 e5                	mov    ebp,esp
c0027d00:	83 ec 24             	sub    esp,0x24
c0027d03:	6a 01                	push   0x1
c0027d05:	83 ec 0c             	sub    esp,0xc
c0027d08:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d0b:	e8 df 10 00 00       	call   c0028def <__extendsfdf2>
c0027d10:	83 c4 10             	add    esp,0x10
c0027d13:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d16:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d19:	52                   	push   edx
c0027d1a:	50                   	push   eax
c0027d1b:	50                   	push   eax
c0027d1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d1f:	e8 cb 10 00 00       	call   c0028def <__extendsfdf2>
c0027d24:	59                   	pop    ecx
c0027d25:	59                   	pop    ecx
c0027d26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d29:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d2c:	52                   	push   edx
c0027d2d:	50                   	push   eax
c0027d2e:	e8 35 ff ff ff       	call   c0027c68 <__cmpsf2>
c0027d33:	83 c4 20             	add    esp,0x20
c0027d36:	c9                   	leave  
c0027d37:	c3                   	ret    

c0027d38 <__nesf2>:
c0027d38:	eb c3                	jmp    c0027cfd <__eqsf2>

c0027d3a <__gtsf2>:
c0027d3a:	55                   	push   ebp
c0027d3b:	89 e5                	mov    ebp,esp
c0027d3d:	83 ec 24             	sub    esp,0x24
c0027d40:	6a ff                	push   0xffffffff
c0027d42:	83 ec 0c             	sub    esp,0xc
c0027d45:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d48:	e8 a2 10 00 00       	call   c0028def <__extendsfdf2>
c0027d4d:	83 c4 10             	add    esp,0x10
c0027d50:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d53:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d56:	52                   	push   edx
c0027d57:	50                   	push   eax
c0027d58:	50                   	push   eax
c0027d59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d5c:	e8 8e 10 00 00       	call   c0028def <__extendsfdf2>
c0027d61:	59                   	pop    ecx
c0027d62:	59                   	pop    ecx
c0027d63:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d66:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d69:	52                   	push   edx
c0027d6a:	50                   	push   eax
c0027d6b:	e8 f8 fe ff ff       	call   c0027c68 <__cmpsf2>
c0027d70:	83 c4 20             	add    esp,0x20
c0027d73:	c9                   	leave  
c0027d74:	c3                   	ret    

c0027d75 <__gesf2>:
c0027d75:	eb c3                	jmp    c0027d3a <__gtsf2>

c0027d77 <__ltsf2>:
c0027d77:	eb 84                	jmp    c0027cfd <__eqsf2>

c0027d79 <__lesf2>:
c0027d79:	eb 82                	jmp    c0027cfd <__eqsf2>

c0027d7b <__adddf3>:
c0027d7b:	55                   	push   ebp
c0027d7c:	89 e5                	mov    ebp,esp
c0027d7e:	57                   	push   edi
c0027d7f:	56                   	push   esi
c0027d80:	53                   	push   ebx
c0027d81:	83 ec 24             	sub    esp,0x24
c0027d84:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d87:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d8a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d8d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d90:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027d93:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027d96:	89 c8                	mov    eax,ecx
c0027d98:	89 ce                	mov    esi,ecx
c0027d9a:	c1 fe 14             	sar    esi,0x14
c0027d9d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027da0:	89 fb                	mov    ebx,edi
c0027da2:	89 fa                	mov    edx,edi
c0027da4:	c1 e2 0b             	shl    edx,0xb
c0027da7:	c1 e0 0b             	shl    eax,0xb
c0027daa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027daf:	c1 eb 15             	shr    ebx,0x15
c0027db2:	09 d8                	or     eax,ebx
c0027db4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027db7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027dba:	c1 fe 14             	sar    esi,0x14
c0027dbd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027dc0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027dc3:	89 f3                	mov    ebx,esi
c0027dc5:	c1 e3 0b             	shl    ebx,0xb
c0027dc8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027dcb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027dce:	c1 e3 0b             	shl    ebx,0xb
c0027dd1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027dd7:	c1 ee 15             	shr    esi,0x15
c0027dda:	09 f3                	or     ebx,esi
c0027ddc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027ddf:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027de2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027de5:	0f 88 5f 02 00 00    	js     c002804a <__adddf3+0x2cf>
c0027deb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027dee:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027df1:	85 db                	test   ebx,ebx
c0027df3:	0f 8e c7 00 00 00    	jle    c0027ec0 <__adddf3+0x145>
c0027df9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027e00:	75 1a                	jne    c0027e1c <__adddf3+0xa1>
c0027e02:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e05:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027e08:	0f 84 b2 05 00 00    	je     c00283c0 <__adddf3+0x645>
c0027e0e:	4b                   	dec    ebx
c0027e0f:	75 23                	jne    c0027e34 <__adddf3+0xb9>
c0027e11:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027e14:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027e17:	e9 99 00 00 00       	jmp    c0027eb5 <__adddf3+0x13a>
c0027e1c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027e1f:	f7 d6                	not    esi
c0027e21:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027e27:	0f 84 93 05 00 00    	je     c00283c0 <__adddf3+0x645>
c0027e2d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027e34:	83 fb 1f             	cmp    ebx,0x1f
c0027e37:	7e 42                	jle    c0027e7b <__adddf3+0x100>
c0027e39:	83 fb 3f             	cmp    ebx,0x3f
c0027e3c:	0f 8f 7e 05 00 00    	jg     c00283c0 <__adddf3+0x645>
c0027e42:	83 e3 1f             	and    ebx,0x1f
c0027e45:	89 d9                	mov    ecx,ebx
c0027e47:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e4a:	d3 ef                	shr    edi,cl
c0027e4c:	31 db                	xor    ebx,ebx
c0027e4e:	85 c9                	test   ecx,ecx
c0027e50:	74 15                	je     c0027e67 <__adddf3+0xec>
c0027e52:	be 20 00 00 00       	mov    esi,0x20
c0027e57:	29 ce                	sub    esi,ecx
c0027e59:	89 f1                	mov    ecx,esi
c0027e5b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e5e:	d3 e6                	shl    esi,cl
c0027e60:	31 db                	xor    ebx,ebx
c0027e62:	85 f6                	test   esi,esi
c0027e64:	0f 95 c3             	setne  bl
c0027e67:	31 c9                	xor    ecx,ecx
c0027e69:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027e6d:	0f 95 c1             	setne  cl
c0027e70:	09 cf                	or     edi,ecx
c0027e72:	09 fb                	or     ebx,edi
c0027e74:	01 da                	add    edx,ebx
c0027e76:	83 d0 00             	adc    eax,0x0
c0027e79:	eb 3a                	jmp    c0027eb5 <__adddf3+0x13a>
c0027e7b:	bf 20 00 00 00       	mov    edi,0x20
c0027e80:	29 df                	sub    edi,ebx
c0027e82:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e85:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e88:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e8b:	d3 e6                	shl    esi,cl
c0027e8d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e90:	88 d9                	mov    cl,bl
c0027e92:	d3 ef                	shr    edi,cl
c0027e94:	09 fe                	or     esi,edi
c0027e96:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e99:	88 d9                	mov    cl,bl
c0027e9b:	d3 ef                	shr    edi,cl
c0027e9d:	89 fb                	mov    ebx,edi
c0027e9f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027ea2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027ea5:	d3 e7                	shl    edi,cl
c0027ea7:	85 ff                	test   edi,edi
c0027ea9:	0f 95 c1             	setne  cl
c0027eac:	0f b6 c9             	movzx  ecx,cl
c0027eaf:	09 ce                	or     esi,ecx
c0027eb1:	01 f2                	add    edx,esi
c0027eb3:	11 d8                	adc    eax,ebx
c0027eb5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027eb8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ebb:	e9 52 01 00 00       	jmp    c0028012 <__adddf3+0x297>
c0027ec0:	0f 84 d5 00 00 00    	je     c0027f9b <__adddf3+0x220>
c0027ec6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ec9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027ecc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ecf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ed2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027ed9:	75 20                	jne    c0027efb <__adddf3+0x180>
c0027edb:	89 d6                	mov    esi,edx
c0027edd:	09 c6                	or     esi,eax
c0027edf:	0f 84 db 04 00 00    	je     c00283c0 <__adddf3+0x645>
c0027ee5:	4b                   	dec    ebx
c0027ee6:	75 29                	jne    c0027f11 <__adddf3+0x196>
c0027ee8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027eeb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027eee:	01 d1                	add    ecx,edx
c0027ef0:	11 c6                	adc    esi,eax
c0027ef2:	89 f0                	mov    eax,esi
c0027ef4:	89 ca                	mov    edx,ecx
c0027ef6:	e9 17 01 00 00       	jmp    c0028012 <__adddf3+0x297>
c0027efb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027efe:	f7 d6                	not    esi
c0027f00:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f06:	0f 84 b4 04 00 00    	je     c00283c0 <__adddf3+0x645>
c0027f0c:	0d 00 00 00 80       	or     eax,0x80000000
c0027f11:	83 fb 1f             	cmp    ebx,0x1f
c0027f14:	7e 48                	jle    c0027f5e <__adddf3+0x1e3>
c0027f16:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027f19:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027f1c:	83 fb 3f             	cmp    ebx,0x3f
c0027f1f:	0f 8f 9b 04 00 00    	jg     c00283c0 <__adddf3+0x645>
c0027f25:	83 e3 1f             	and    ebx,0x1f
c0027f28:	89 d9                	mov    ecx,ebx
c0027f2a:	89 c7                	mov    edi,eax
c0027f2c:	d3 ef                	shr    edi,cl
c0027f2e:	31 db                	xor    ebx,ebx
c0027f30:	85 c9                	test   ecx,ecx
c0027f32:	74 12                	je     c0027f46 <__adddf3+0x1cb>
c0027f34:	be 20 00 00 00       	mov    esi,0x20
c0027f39:	29 ce                	sub    esi,ecx
c0027f3b:	89 f1                	mov    ecx,esi
c0027f3d:	d3 e0                	shl    eax,cl
c0027f3f:	31 db                	xor    ebx,ebx
c0027f41:	85 c0                	test   eax,eax
c0027f43:	0f 95 c3             	setne  bl
c0027f46:	31 c0                	xor    eax,eax
c0027f48:	85 d2                	test   edx,edx
c0027f4a:	0f 95 c0             	setne  al
c0027f4d:	09 c7                	or     edi,eax
c0027f4f:	09 fb                	or     ebx,edi
c0027f51:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f54:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f57:	01 da                	add    edx,ebx
c0027f59:	83 d6 00             	adc    esi,0x0
c0027f5c:	eb 39                	jmp    c0027f97 <__adddf3+0x21c>
c0027f5e:	be 20 00 00 00       	mov    esi,0x20
c0027f63:	29 de                	sub    esi,ebx
c0027f65:	89 c7                	mov    edi,eax
c0027f67:	89 f1                	mov    ecx,esi
c0027f69:	d3 e7                	shl    edi,cl
c0027f6b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027f6e:	89 d7                	mov    edi,edx
c0027f70:	88 d9                	mov    cl,bl
c0027f72:	d3 ef                	shr    edi,cl
c0027f74:	89 f9                	mov    ecx,edi
c0027f76:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f79:	09 cf                	or     edi,ecx
c0027f7b:	88 d9                	mov    cl,bl
c0027f7d:	d3 e8                	shr    eax,cl
c0027f7f:	89 f1                	mov    ecx,esi
c0027f81:	d3 e2                	shl    edx,cl
c0027f83:	85 d2                	test   edx,edx
c0027f85:	0f 95 c2             	setne  dl
c0027f88:	0f b6 d2             	movzx  edx,dl
c0027f8b:	09 d7                	or     edi,edx
c0027f8d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f90:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f93:	01 fa                	add    edx,edi
c0027f95:	11 c6                	adc    esi,eax
c0027f97:	89 f0                	mov    eax,esi
c0027f99:	eb 77                	jmp    c0028012 <__adddf3+0x297>
c0027f9b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027f9e:	46                   	inc    esi
c0027f9f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027fa2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027fa8:	75 41                	jne    c0027feb <__adddf3+0x270>
c0027faa:	89 d3                	mov    ebx,edx
c0027fac:	09 c3                	or     ebx,eax
c0027fae:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027fb5:	75 27                	jne    c0027fde <__adddf3+0x263>
c0027fb7:	85 db                	test   ebx,ebx
c0027fb9:	0f 84 fb 03 00 00    	je     c00283ba <__adddf3+0x63f>
c0027fbf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fc2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027fc5:	0f 84 f5 03 00 00    	je     c00283c0 <__adddf3+0x645>
c0027fcb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027fce:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027fd1:	85 c0                	test   eax,eax
c0027fd3:	0f 89 91 03 00 00    	jns    c002836a <__adddf3+0x5ef>
c0027fd9:	e9 85 03 00 00       	jmp    c0028363 <__adddf3+0x5e8>
c0027fde:	85 db                	test   ebx,ebx
c0027fe0:	0f 85 da 03 00 00    	jne    c00283c0 <__adddf3+0x645>
c0027fe6:	e9 cf 03 00 00       	jmp    c00283ba <__adddf3+0x63f>
c0027feb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027fee:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027ff1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ff4:	f7 d1                	not    ecx
c0027ff6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027ffc:	0f 84 70 03 00 00    	je     c0028372 <__adddf3+0x5f7>
c0028002:	d1 ea                	shr    edx,1
c0028004:	89 c1                	mov    ecx,eax
c0028006:	c1 e1 1f             	shl    ecx,0x1f
c0028009:	09 ca                	or     edx,ecx
c002800b:	d1 e8                	shr    eax,1
c002800d:	e9 6f 03 00 00       	jmp    c0028381 <__adddf3+0x606>
c0028012:	85 c0                	test   eax,eax
c0028014:	0f 89 67 03 00 00    	jns    c0028381 <__adddf3+0x606>
c002801a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002801d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028020:	f7 d1                	not    ecx
c0028022:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028028:	0f 84 44 03 00 00    	je     c0028372 <__adddf3+0x5f7>
c002802e:	89 d1                	mov    ecx,edx
c0028030:	d1 e9                	shr    ecx,1
c0028032:	83 e2 01             	and    edx,0x1
c0028035:	09 ca                	or     edx,ecx
c0028037:	89 c1                	mov    ecx,eax
c0028039:	c1 e1 1f             	shl    ecx,0x1f
c002803c:	09 ca                	or     edx,ecx
c002803e:	d1 e8                	shr    eax,1
c0028040:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028045:	e9 37 03 00 00       	jmp    c0028381 <__adddf3+0x606>
c002804a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002804d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028053:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028056:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028059:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002805f:	29 de                	sub    esi,ebx
c0028061:	85 f6                	test   esi,esi
c0028063:	0f 8e bd 00 00 00    	jle    c0028126 <__adddf3+0x3ab>
c0028069:	85 db                	test   ebx,ebx
c002806b:	75 17                	jne    c0028084 <__adddf3+0x309>
c002806d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028070:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028073:	0f 84 47 03 00 00    	je     c00283c0 <__adddf3+0x645>
c0028079:	4e                   	dec    esi
c002807a:	75 20                	jne    c002809c <__adddf3+0x321>
c002807c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002807f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028082:	eb 5b                	jmp    c00280df <__adddf3+0x364>
c0028084:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028087:	f7 d3                	not    ebx
c0028089:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002808f:	0f 84 2b 03 00 00    	je     c00283c0 <__adddf3+0x645>
c0028095:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002809c:	83 fe 1f             	cmp    esi,0x1f
c002809f:	7e 49                	jle    c00280ea <__adddf3+0x36f>
c00280a1:	83 fe 3f             	cmp    esi,0x3f
c00280a4:	0f 8f 16 03 00 00    	jg     c00283c0 <__adddf3+0x645>
c00280aa:	83 e6 1f             	and    esi,0x1f
c00280ad:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280b0:	89 f1                	mov    ecx,esi
c00280b2:	d3 ef                	shr    edi,cl
c00280b4:	31 db                	xor    ebx,ebx
c00280b6:	85 f6                	test   esi,esi
c00280b8:	74 13                	je     c00280cd <__adddf3+0x352>
c00280ba:	b9 20 00 00 00       	mov    ecx,0x20
c00280bf:	29 f1                	sub    ecx,esi
c00280c1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280c4:	d3 e6                	shl    esi,cl
c00280c6:	31 db                	xor    ebx,ebx
c00280c8:	85 f6                	test   esi,esi
c00280ca:	0f 95 c3             	setne  bl
c00280cd:	31 c9                	xor    ecx,ecx
c00280cf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00280d3:	0f 95 c1             	setne  cl
c00280d6:	09 cf                	or     edi,ecx
c00280d8:	09 fb                	or     ebx,edi
c00280da:	29 da                	sub    edx,ebx
c00280dc:	83 d8 00             	sbb    eax,0x0
c00280df:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280e2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280e5:	e9 aa 01 00 00       	jmp    c0028294 <__adddf3+0x519>
c00280ea:	bf 20 00 00 00       	mov    edi,0x20
c00280ef:	29 f7                	sub    edi,esi
c00280f1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280f4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280f7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280fa:	d3 e3                	shl    ebx,cl
c00280fc:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280ff:	89 f1                	mov    ecx,esi
c0028101:	d3 ef                	shr    edi,cl
c0028103:	09 fb                	or     ebx,edi
c0028105:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028108:	89 f1                	mov    ecx,esi
c002810a:	d3 ef                	shr    edi,cl
c002810c:	89 fe                	mov    esi,edi
c002810e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028111:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028114:	d3 e7                	shl    edi,cl
c0028116:	85 ff                	test   edi,edi
c0028118:	0f 95 c1             	setne  cl
c002811b:	0f b6 c9             	movzx  ecx,cl
c002811e:	09 cb                	or     ebx,ecx
c0028120:	29 da                	sub    edx,ebx
c0028122:	19 f0                	sbb    eax,esi
c0028124:	eb b9                	jmp    c00280df <__adddf3+0x364>
c0028126:	0f 84 cd 00 00 00    	je     c00281f9 <__adddf3+0x47e>
c002812c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002812f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028132:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028135:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028139:	75 1b                	jne    c0028156 <__adddf3+0x3db>
c002813b:	89 d6                	mov    esi,edx
c002813d:	09 c6                	or     esi,eax
c002813f:	0f 84 7b 02 00 00    	je     c00283c0 <__adddf3+0x645>
c0028145:	4b                   	dec    ebx
c0028146:	75 24                	jne    c002816c <__adddf3+0x3f1>
c0028148:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002814b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002814e:	29 d1                	sub    ecx,edx
c0028150:	19 c6                	sbb    esi,eax
c0028152:	89 ca                	mov    edx,ecx
c0028154:	eb 61                	jmp    c00281b7 <__adddf3+0x43c>
c0028156:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028159:	f7 d6                	not    esi
c002815b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028161:	0f 84 59 02 00 00    	je     c00283c0 <__adddf3+0x645>
c0028167:	0d 00 00 00 80       	or     eax,0x80000000
c002816c:	83 fb 1f             	cmp    ebx,0x1f
c002816f:	7e 4d                	jle    c00281be <__adddf3+0x443>
c0028171:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028174:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028177:	83 fb 3f             	cmp    ebx,0x3f
c002817a:	0f 8f 40 02 00 00    	jg     c00283c0 <__adddf3+0x645>
c0028180:	83 e3 1f             	and    ebx,0x1f
c0028183:	89 d9                	mov    ecx,ebx
c0028185:	89 c7                	mov    edi,eax
c0028187:	d3 ef                	shr    edi,cl
c0028189:	31 db                	xor    ebx,ebx
c002818b:	85 c9                	test   ecx,ecx
c002818d:	74 12                	je     c00281a1 <__adddf3+0x426>
c002818f:	be 20 00 00 00       	mov    esi,0x20
c0028194:	29 ce                	sub    esi,ecx
c0028196:	89 f1                	mov    ecx,esi
c0028198:	d3 e0                	shl    eax,cl
c002819a:	31 db                	xor    ebx,ebx
c002819c:	85 c0                	test   eax,eax
c002819e:	0f 95 c3             	setne  bl
c00281a1:	31 c0                	xor    eax,eax
c00281a3:	85 d2                	test   edx,edx
c00281a5:	0f 95 c0             	setne  al
c00281a8:	09 c7                	or     edi,eax
c00281aa:	09 fb                	or     ebx,edi
c00281ac:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281af:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281b2:	29 da                	sub    edx,ebx
c00281b4:	83 de 00             	sbb    esi,0x0
c00281b7:	89 f0                	mov    eax,esi
c00281b9:	e9 d6 00 00 00       	jmp    c0028294 <__adddf3+0x519>
c00281be:	be 20 00 00 00       	mov    esi,0x20
c00281c3:	29 de                	sub    esi,ebx
c00281c5:	89 c7                	mov    edi,eax
c00281c7:	89 f1                	mov    ecx,esi
c00281c9:	d3 e7                	shl    edi,cl
c00281cb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00281ce:	89 d7                	mov    edi,edx
c00281d0:	88 d9                	mov    cl,bl
c00281d2:	d3 ef                	shr    edi,cl
c00281d4:	89 f9                	mov    ecx,edi
c00281d6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00281d9:	09 cf                	or     edi,ecx
c00281db:	88 d9                	mov    cl,bl
c00281dd:	d3 e8                	shr    eax,cl
c00281df:	89 f1                	mov    ecx,esi
c00281e1:	d3 e2                	shl    edx,cl
c00281e3:	85 d2                	test   edx,edx
c00281e5:	0f 95 c2             	setne  dl
c00281e8:	0f b6 d2             	movzx  edx,dl
c00281eb:	09 d7                	or     edi,edx
c00281ed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281f0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281f3:	29 fa                	sub    edx,edi
c00281f5:	19 c6                	sbb    esi,eax
c00281f7:	eb be                	jmp    c00281b7 <__adddf3+0x43c>
c00281f9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00281fc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00281ff:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028205:	75 6a                	jne    c0028271 <__adddf3+0x4f6>
c0028207:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002820b:	75 58                	jne    c0028265 <__adddf3+0x4ea>
c002820d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028210:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028213:	89 d6                	mov    esi,edx
c0028215:	09 c6                	or     esi,eax
c0028217:	75 17                	jne    c0028230 <__adddf3+0x4b5>
c0028219:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002821c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002821f:	85 db                	test   ebx,ebx
c0028221:	0f 85 99 01 00 00    	jne    c00283c0 <__adddf3+0x645>
c0028227:	31 ff                	xor    edi,edi
c0028229:	31 c9                	xor    ecx,ecx
c002822b:	e9 90 01 00 00       	jmp    c00283c0 <__adddf3+0x645>
c0028230:	85 db                	test   ebx,ebx
c0028232:	0f 84 88 01 00 00    	je     c00283c0 <__adddf3+0x645>
c0028238:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002823b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002823e:	85 c0                	test   eax,eax
c0028240:	79 10                	jns    c0028252 <__adddf3+0x4d7>
c0028242:	31 c9                	xor    ecx,ecx
c0028244:	f7 da                	neg    edx
c0028246:	0f 95 c1             	setne  cl
c0028249:	01 c8                	add    eax,ecx
c002824b:	f7 d8                	neg    eax
c002824d:	e9 2f 01 00 00       	jmp    c0028381 <__adddf3+0x606>
c0028252:	31 ff                	xor    edi,edi
c0028254:	31 c9                	xor    ecx,ecx
c0028256:	89 c3                	mov    ebx,eax
c0028258:	09 d3                	or     ebx,edx
c002825a:	0f 84 60 01 00 00    	je     c00283c0 <__adddf3+0x645>
c0028260:	e9 05 01 00 00       	jmp    c002836a <__adddf3+0x5ef>
c0028265:	31 ff                	xor    edi,edi
c0028267:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002826c:	e9 4f 01 00 00       	jmp    c00283c0 <__adddf3+0x645>
c0028271:	89 c1                	mov    ecx,eax
c0028273:	89 d0                	mov    eax,edx
c0028275:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028278:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002827b:	89 ca                	mov    edx,ecx
c002827d:	85 c9                	test   ecx,ecx
c002827f:	79 2c                	jns    c00282ad <__adddf3+0x532>
c0028281:	31 c9                	xor    ecx,ecx
c0028283:	f7 d8                	neg    eax
c0028285:	0f 95 c1             	setne  cl
c0028288:	01 ca                	add    edx,ecx
c002828a:	f7 da                	neg    edx
c002828c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002828f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028292:	eb 19                	jmp    c00282ad <__adddf3+0x532>
c0028294:	85 c0                	test   eax,eax
c0028296:	0f 89 e5 00 00 00    	jns    c0028381 <__adddf3+0x606>
c002829c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00282a1:	89 c1                	mov    ecx,eax
c00282a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00282a6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00282a9:	89 d0                	mov    eax,edx
c00282ab:	89 ca                	mov    edx,ecx
c00282ad:	85 d2                	test   edx,edx
c00282af:	74 59                	je     c002830a <__adddf3+0x58f>
c00282b1:	0f bd da             	bsr    ebx,edx
c00282b4:	83 f3 1f             	xor    ebx,0x1f
c00282b7:	88 d9                	mov    cl,bl
c00282b9:	d3 e2                	shl    edx,cl
c00282bb:	bf 20 00 00 00       	mov    edi,0x20
c00282c0:	89 f9                	mov    ecx,edi
c00282c2:	29 d9                	sub    ecx,ebx
c00282c4:	89 c6                	mov    esi,eax
c00282c6:	d3 ee                	shr    esi,cl
c00282c8:	09 d6                	or     esi,edx
c00282ca:	88 d9                	mov    cl,bl
c00282cc:	d3 e0                	shl    eax,cl
c00282ce:	89 c2                	mov    edx,eax
c00282d0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282d3:	25 ff 07 00 00       	and    eax,0x7ff
c00282d8:	39 d8                	cmp    eax,ebx
c00282da:	7f 22                	jg     c00282fe <__adddf3+0x583>
c00282dc:	29 c3                	sub    ebx,eax
c00282de:	43                   	inc    ebx
c00282df:	88 d9                	mov    cl,bl
c00282e1:	d3 ea                	shr    edx,cl
c00282e3:	29 df                	sub    edi,ebx
c00282e5:	89 f9                	mov    ecx,edi
c00282e7:	89 f0                	mov    eax,esi
c00282e9:	d3 e0                	shl    eax,cl
c00282eb:	09 c2                	or     edx,eax
c00282ed:	89 f0                	mov    eax,esi
c00282ef:	88 d9                	mov    cl,bl
c00282f1:	d3 e8                	shr    eax,cl
c00282f3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282f6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00282fc:	eb 6f                	jmp    c002836d <__adddf3+0x5f2>
c00282fe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028301:	29 d8                	sub    eax,ebx
c0028303:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028306:	89 f0                	mov    eax,esi
c0028308:	eb 59                	jmp    c0028363 <__adddf3+0x5e8>
c002830a:	85 c0                	test   eax,eax
c002830c:	74 6a                	je     c0028378 <__adddf3+0x5fd>
c002830e:	0f bd c8             	bsr    ecx,eax
c0028311:	83 f1 1f             	xor    ecx,0x1f
c0028314:	d3 e0                	shl    eax,cl
c0028316:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028319:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002831f:	83 c1 20             	add    ecx,0x20
c0028322:	39 cb                	cmp    ebx,ecx
c0028324:	7f 35                	jg     c002835b <__adddf3+0x5e0>
c0028326:	29 d9                	sub    ecx,ebx
c0028328:	8d 71 01             	lea    esi,[ecx+0x1]
c002832b:	83 fe 1f             	cmp    esi,0x1f
c002832e:	7e 09                	jle    c0028339 <__adddf3+0x5be>
c0028330:	83 e9 1f             	sub    ecx,0x1f
c0028333:	d3 e8                	shr    eax,cl
c0028335:	89 c3                	mov    ebx,eax
c0028337:	eb 11                	jmp    c002834a <__adddf3+0x5cf>
c0028339:	b9 20 00 00 00       	mov    ecx,0x20
c002833e:	29 f1                	sub    ecx,esi
c0028340:	89 c3                	mov    ebx,eax
c0028342:	d3 e3                	shl    ebx,cl
c0028344:	89 f1                	mov    ecx,esi
c0028346:	d3 e8                	shr    eax,cl
c0028348:	89 c2                	mov    edx,eax
c002834a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002834d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028352:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028355:	89 d0                	mov    eax,edx
c0028357:	89 da                	mov    edx,ebx
c0028359:	eb 26                	jmp    c0028381 <__adddf3+0x606>
c002835b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002835e:	29 cf                	sub    edi,ecx
c0028360:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028363:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028368:	eb 17                	jmp    c0028381 <__adddf3+0x606>
c002836a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002836d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028370:	eb 0f                	jmp    c0028381 <__adddf3+0x606>
c0028372:	31 d2                	xor    edx,edx
c0028374:	31 c0                	xor    eax,eax
c0028376:	eb 09                	jmp    c0028381 <__adddf3+0x606>
c0028378:	89 c2                	mov    edx,eax
c002837a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028381:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028384:	c1 e1 14             	shl    ecx,0x14
c0028387:	89 c3                	mov    ebx,eax
c0028389:	c1 eb 0b             	shr    ebx,0xb
c002838c:	09 d9                	or     ecx,ebx
c002838e:	89 d3                	mov    ebx,edx
c0028390:	c1 eb 0b             	shr    ebx,0xb
c0028393:	c1 e0 15             	shl    eax,0x15
c0028396:	09 d8                	or     eax,ebx
c0028398:	89 c7                	mov    edi,eax
c002839a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00283a0:	0f 95 c0             	setne  al
c00283a3:	89 c6                	mov    esi,eax
c00283a5:	09 f3                	or     ebx,esi
c00283a7:	83 e3 01             	and    ebx,0x1
c00283aa:	c1 ea 0a             	shr    edx,0xa
c00283ad:	21 da                	and    edx,ebx
c00283af:	89 f8                	mov    eax,edi
c00283b1:	01 d0                	add    eax,edx
c00283b3:	83 d1 00             	adc    ecx,0x0
c00283b6:	89 c7                	mov    edi,eax
c00283b8:	eb 06                	jmp    c00283c0 <__adddf3+0x645>
c00283ba:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00283bd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00283c0:	89 f8                	mov    eax,edi
c00283c2:	89 ca                	mov    edx,ecx
c00283c4:	83 c4 24             	add    esp,0x24
c00283c7:	5b                   	pop    ebx
c00283c8:	5e                   	pop    esi
c00283c9:	5f                   	pop    edi
c00283ca:	5d                   	pop    ebp
c00283cb:	c3                   	ret    

c00283cc <__subdf3>:
c00283cc:	55                   	push   ebp
c00283cd:	89 e5                	mov    ebp,esp
c00283cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00283d2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283d5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283db:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00283de:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00283e1:	5d                   	pop    ebp
c00283e2:	e9 94 f9 ff ff       	jmp    c0027d7b <__adddf3>

c00283e7 <__negdf2>:
c00283e7:	55                   	push   ebp
c00283e8:	89 e5                	mov    ebp,esp
c00283ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00283ed:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283f0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283f6:	5d                   	pop    ebp
c00283f7:	c3                   	ret    

c00283f8 <__muldf3>:
c00283f8:	55                   	push   ebp
c00283f9:	89 e5                	mov    ebp,esp
c00283fb:	57                   	push   edi
c00283fc:	56                   	push   esi
c00283fd:	53                   	push   ebx
c00283fe:	83 ec 24             	sub    esp,0x24
c0028401:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028404:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028407:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002840a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002840d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028410:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028413:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028416:	89 c8                	mov    eax,ecx
c0028418:	c1 f8 14             	sar    eax,0x14
c002841b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002841e:	89 f8                	mov    eax,edi
c0028420:	89 fb                	mov    ebx,edi
c0028422:	c1 e3 0b             	shl    ebx,0xb
c0028425:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028428:	c1 e1 0b             	shl    ecx,0xb
c002842b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028431:	c1 e8 15             	shr    eax,0x15
c0028434:	09 c1                	or     ecx,eax
c0028436:	89 d6                	mov    esi,edx
c0028438:	89 d0                	mov    eax,edx
c002843a:	c1 f8 14             	sar    eax,0x14
c002843d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028440:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028443:	89 c3                	mov    ebx,eax
c0028445:	c1 e3 0b             	shl    ebx,0xb
c0028448:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002844b:	c1 e6 0b             	shl    esi,0xb
c002844e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028454:	c1 e8 15             	shr    eax,0x15
c0028457:	09 c6                	or     esi,eax
c0028459:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002845c:	25 ff 07 00 00       	and    eax,0x7ff
c0028461:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028464:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028467:	25 ff 07 00 00       	and    eax,0x7ff
c002846c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002846f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028472:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028475:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002847c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002847f:	40                   	inc    eax
c0028480:	a9 fe 07 00 00       	test   eax,0x7fe
c0028485:	0f 85 8d 00 00 00    	jne    c0028518 <__muldf3+0x120>
c002848b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002848e:	09 c8                	or     eax,ecx
c0028490:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028494:	74 44                	je     c00284da <__muldf3+0xe2>
c0028496:	85 c0                	test   eax,eax
c0028498:	0f 85 31 02 00 00    	jne    c00286cf <__muldf3+0x2d7>
c002849e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284a1:	40                   	inc    eax
c00284a2:	a9 fe 07 00 00       	test   eax,0x7fe
c00284a7:	75 13                	jne    c00284bc <__muldf3+0xc4>
c00284a9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00284ac:	09 f1                	or     ecx,esi
c00284ae:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00284b2:	74 22                	je     c00284d6 <__muldf3+0xde>
c00284b4:	85 c9                	test   ecx,ecx
c00284b6:	0f 85 0d 02 00 00    	jne    c00286c9 <__muldf3+0x2d1>
c00284bc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00284c0:	0f 89 09 02 00 00    	jns    c00286cf <__muldf3+0x2d7>
c00284c6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284c9:	05 00 00 00 80       	add    eax,0x80000000
c00284ce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284d1:	e9 f9 01 00 00       	jmp    c00286cf <__muldf3+0x2d7>
c00284d6:	85 c9                	test   ecx,ecx
c00284d8:	eb 2e                	jmp    c0028508 <__muldf3+0x110>
c00284da:	85 c0                	test   eax,eax
c00284dc:	74 20                	je     c00284fe <__muldf3+0x106>
c00284de:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00284e1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284e4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00284e7:	c1 ef 1f             	shr    edi,0x1f
c00284ea:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00284ed:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00284f0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00284f3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284f6:	09 f9                	or     ecx,edi
c00284f8:	78 1e                	js     c0028518 <__muldf3+0x120>
c00284fa:	89 c3                	mov    ebx,eax
c00284fc:	eb e0                	jmp    c00284de <__muldf3+0xe6>
c00284fe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028501:	f7 d0                	not    eax
c0028503:	a9 ff 07 00 00       	test   eax,0x7ff
c0028508:	75 b2                	jne    c00284bc <__muldf3+0xc4>
c002850a:	31 ff                	xor    edi,edi
c002850c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028513:	e9 b7 01 00 00       	jmp    c00286cf <__muldf3+0x2d7>
c0028518:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002851b:	40                   	inc    eax
c002851c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028521:	75 57                	jne    c002857a <__muldf3+0x182>
c0028523:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028526:	09 f0                	or     eax,esi
c0028528:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002852c:	74 23                	je     c0028551 <__muldf3+0x159>
c002852e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028532:	0f 89 91 01 00 00    	jns    c00286c9 <__muldf3+0x2d1>
c0028538:	85 c0                	test   eax,eax
c002853a:	0f 85 89 01 00 00    	jne    c00286c9 <__muldf3+0x2d1>
c0028540:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028543:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028549:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002854c:	e9 7e 01 00 00       	jmp    c00286cf <__muldf3+0x2d7>
c0028551:	85 c0                	test   eax,eax
c0028553:	75 0c                	jne    c0028561 <__muldf3+0x169>
c0028555:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028559:	0f 89 6a 01 00 00    	jns    c00286c9 <__muldf3+0x2d1>
c002855f:	eb df                	jmp    c0028540 <__muldf3+0x148>
c0028561:	01 f6                	add    esi,esi
c0028563:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028566:	c1 ea 1f             	shr    edx,0x1f
c0028569:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002856c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002856f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028572:	09 d6                	or     esi,edx
c0028574:	78 04                	js     c002857a <__muldf3+0x182>
c0028576:	89 c3                	mov    ebx,eax
c0028578:	eb e7                	jmp    c0028561 <__muldf3+0x169>
c002857a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028580:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028586:	89 c8                	mov    eax,ecx
c0028588:	f7 e6                	mul    esi
c002858a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002858d:	89 c7                	mov    edi,eax
c002858f:	89 c8                	mov    eax,ecx
c0028591:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028594:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028597:	89 c1                	mov    ecx,eax
c0028599:	89 f0                	mov    eax,esi
c002859b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002859e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00285a1:	89 c6                	mov    esi,eax
c00285a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00285a6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00285a9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00285ac:	31 c0                	xor    eax,eax
c00285ae:	01 f1                	add    ecx,esi
c00285b0:	0f 92 c0             	setb   al
c00285b3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00285b6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00285b9:	83 d6 00             	adc    esi,0x0
c00285bc:	01 c7                	add    edi,eax
c00285be:	83 d6 00             	adc    esi,0x0
c00285c1:	01 ca                	add    edx,ecx
c00285c3:	0f 92 c1             	setb   cl
c00285c6:	0f b6 c9             	movzx  ecx,cl
c00285c9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00285cc:	83 d6 00             	adc    esi,0x0
c00285cf:	01 cf                	add    edi,ecx
c00285d1:	83 d6 00             	adc    esi,0x0
c00285d4:	31 c9                	xor    ecx,ecx
c00285d6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00285d9:	0f 95 c1             	setne  cl
c00285dc:	09 cf                	or     edi,ecx
c00285de:	85 f6                	test   esi,esi
c00285e0:	78 0c                	js     c00285ee <__muldf3+0x1f6>
c00285e2:	01 f6                	add    esi,esi
c00285e4:	89 f8                	mov    eax,edi
c00285e6:	c1 e8 1f             	shr    eax,0x1f
c00285e9:	09 c6                	or     esi,eax
c00285eb:	01 ff                	add    edi,edi
c00285ed:	4b                   	dec    ebx
c00285ee:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00285f4:	0f 8f 85 00 00 00    	jg     c002867f <__muldf3+0x287>
c00285fa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028600:	85 db                	test   ebx,ebx
c0028602:	0f 8f 84 00 00 00    	jg     c002868c <__muldf3+0x294>
c0028608:	83 fb cc             	cmp    ebx,0xffffffcc
c002860b:	7c 79                	jl     c0028686 <__muldf3+0x28e>
c002860d:	ba 01 00 00 00       	mov    edx,0x1
c0028612:	29 da                	sub    edx,ebx
c0028614:	81 ce 00 00 00 80    	or     esi,0x80000000
c002861a:	83 fa 1f             	cmp    edx,0x1f
c002861d:	7e 30                	jle    c002864f <__muldf3+0x257>
c002861f:	83 fa 20             	cmp    edx,0x20
c0028622:	75 0b                	jne    c002862f <__muldf3+0x237>
c0028624:	31 c0                	xor    eax,eax
c0028626:	85 ff                	test   edi,edi
c0028628:	0f 95 c0             	setne  al
c002862b:	89 c7                	mov    edi,eax
c002862d:	eb 1a                	jmp    c0028649 <__muldf3+0x251>
c002862f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028632:	89 f0                	mov    eax,esi
c0028634:	d3 e0                	shl    eax,cl
c0028636:	09 f8                	or     eax,edi
c0028638:	0f 95 c0             	setne  al
c002863b:	0f b6 c0             	movzx  eax,al
c002863e:	89 c7                	mov    edi,eax
c0028640:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028645:	29 d9                	sub    ecx,ebx
c0028647:	d3 ee                	shr    esi,cl
c0028649:	09 f7                	or     edi,esi
c002864b:	31 db                	xor    ebx,ebx
c002864d:	eb 3b                	jmp    c002868a <__muldf3+0x292>
c002864f:	83 c3 1f             	add    ebx,0x1f
c0028652:	89 f0                	mov    eax,esi
c0028654:	88 d9                	mov    cl,bl
c0028656:	d3 e0                	shl    eax,cl
c0028658:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002865b:	89 f8                	mov    eax,edi
c002865d:	88 d1                	mov    cl,dl
c002865f:	d3 e8                	shr    eax,cl
c0028661:	89 c1                	mov    ecx,eax
c0028663:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028666:	09 c8                	or     eax,ecx
c0028668:	88 d9                	mov    cl,bl
c002866a:	d3 e7                	shl    edi,cl
c002866c:	31 db                	xor    ebx,ebx
c002866e:	85 ff                	test   edi,edi
c0028670:	0f 95 c3             	setne  bl
c0028673:	89 df                	mov    edi,ebx
c0028675:	09 c7                	or     edi,eax
c0028677:	88 d1                	mov    cl,dl
c0028679:	d3 ee                	shr    esi,cl
c002867b:	31 db                	xor    ebx,ebx
c002867d:	eb 0d                	jmp    c002868c <__muldf3+0x294>
c002867f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028684:	eb 02                	jmp    c0028688 <__muldf3+0x290>
c0028686:	31 db                	xor    ebx,ebx
c0028688:	31 ff                	xor    edi,edi
c002868a:	31 f6                	xor    esi,esi
c002868c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002868f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028692:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028697:	09 c3                	or     ebx,eax
c0028699:	c1 e3 14             	shl    ebx,0x14
c002869c:	89 f0                	mov    eax,esi
c002869e:	c1 e8 0b             	shr    eax,0xb
c00286a1:	09 c3                	or     ebx,eax
c00286a3:	89 f8                	mov    eax,edi
c00286a5:	c1 e8 0b             	shr    eax,0xb
c00286a8:	c1 e6 15             	shl    esi,0x15
c00286ab:	09 c6                	or     esi,eax
c00286ad:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00286b3:	0f 95 c1             	setne  cl
c00286b6:	09 c8                	or     eax,ecx
c00286b8:	83 e0 01             	and    eax,0x1
c00286bb:	c1 ef 0a             	shr    edi,0xa
c00286be:	21 c7                	and    edi,eax
c00286c0:	01 f7                	add    edi,esi
c00286c2:	83 d3 00             	adc    ebx,0x0
c00286c5:	89 da                	mov    edx,ebx
c00286c7:	eb 03                	jmp    c00286cc <__muldf3+0x2d4>
c00286c9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00286cc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00286cf:	89 f8                	mov    eax,edi
c00286d1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00286d4:	83 c4 24             	add    esp,0x24
c00286d7:	5b                   	pop    ebx
c00286d8:	5e                   	pop    esi
c00286d9:	5f                   	pop    edi
c00286da:	5d                   	pop    ebp
c00286db:	c3                   	ret    

c00286dc <__divdf3>:
c00286dc:	55                   	push   ebp
c00286dd:	89 e5                	mov    ebp,esp
c00286df:	57                   	push   edi
c00286e0:	56                   	push   esi
c00286e1:	53                   	push   ebx
c00286e2:	83 ec 2c             	sub    esp,0x2c
c00286e5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00286e8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00286eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00286ee:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00286f1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00286f4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00286f7:	89 ce                	mov    esi,ecx
c00286f9:	89 c8                	mov    eax,ecx
c00286fb:	c1 f8 14             	sar    eax,0x14
c00286fe:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028701:	89 f8                	mov    eax,edi
c0028703:	89 fb                	mov    ebx,edi
c0028705:	c1 e3 0b             	shl    ebx,0xb
c0028708:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002870b:	c1 e6 0b             	shl    esi,0xb
c002870e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028714:	c1 e8 15             	shr    eax,0x15
c0028717:	09 c6                	or     esi,eax
c0028719:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002871c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002871f:	89 c2                	mov    edx,eax
c0028721:	c1 fa 14             	sar    edx,0x14
c0028724:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028727:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002872a:	89 de                	mov    esi,ebx
c002872c:	c1 e6 0b             	shl    esi,0xb
c002872f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028732:	c1 e0 0b             	shl    eax,0xb
c0028735:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002873a:	c1 eb 15             	shr    ebx,0x15
c002873d:	09 d8                	or     eax,ebx
c002873f:	89 c2                	mov    edx,eax
c0028741:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028744:	25 ff 07 00 00       	and    eax,0x7ff
c0028749:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002874c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002874f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028755:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028758:	29 d8                	sub    eax,ebx
c002875a:	05 ff 03 00 00       	add    eax,0x3ff
c002875f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028762:	46                   	inc    esi
c0028763:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028769:	0f 85 a5 00 00 00    	jne    c0028814 <__divdf3+0x138>
c002876f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028772:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028775:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028779:	74 2a                	je     c00287a5 <__divdf3+0xc9>
c002877b:	85 f6                	test   esi,esi
c002877d:	0f 85 cc 02 00 00    	jne    c0028a4f <__divdf3+0x373>
c0028783:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028786:	40                   	inc    eax
c0028787:	a9 fe 07 00 00       	test   eax,0x7fe
c002878c:	75 26                	jne    c00287b4 <__divdf3+0xd8>
c002878e:	85 db                	test   ebx,ebx
c0028790:	74 22                	je     c00287b4 <__divdf3+0xd8>
c0028792:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028795:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028798:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002879b:	09 d0                	or     eax,edx
c002879d:	0f 85 ac 02 00 00    	jne    c0028a4f <__divdf3+0x373>
c00287a3:	eb 63                	jmp    c0028808 <__divdf3+0x12c>
c00287a5:	85 f6                	test   esi,esi
c00287a7:	75 22                	jne    c00287cb <__divdf3+0xef>
c00287a9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00287ac:	40                   	inc    eax
c00287ad:	a9 fe 07 00 00       	test   eax,0x7fe
c00287b2:	74 36                	je     c00287ea <__divdf3+0x10e>
c00287b4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00287b8:	0f 89 91 02 00 00    	jns    c0028a4f <__divdf3+0x373>
c00287be:	89 f8                	mov    eax,edi
c00287c0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00287c6:	e9 80 02 00 00       	jmp    c0028a4b <__divdf3+0x36f>
c00287cb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00287ce:	01 f6                	add    esi,esi
c00287d0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00287d3:	c1 ef 1f             	shr    edi,0x1f
c00287d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00287d9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00287dc:	8d 48 ff             	lea    ecx,[eax-0x1]
c00287df:	09 f7                	or     edi,esi
c00287e1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00287e4:	78 2e                	js     c0028814 <__divdf3+0x138>
c00287e6:	89 c8                	mov    eax,ecx
c00287e8:	eb e1                	jmp    c00287cb <__divdf3+0xef>
c00287ea:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00287ed:	09 d0                	or     eax,edx
c00287ef:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00287f3:	74 0f                	je     c0028804 <__divdf3+0x128>
c00287f5:	85 c0                	test   eax,eax
c00287f7:	74 bb                	je     c00287b4 <__divdf3+0xd8>
c00287f9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287fc:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287ff:	e9 4b 02 00 00       	jmp    c0028a4f <__divdf3+0x373>
c0028804:	85 c0                	test   eax,eax
c0028806:	75 ac                	jne    c00287b4 <__divdf3+0xd8>
c0028808:	31 ff                	xor    edi,edi
c002880a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002880f:	e9 3b 02 00 00       	jmp    c0028a4f <__divdf3+0x373>
c0028814:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028817:	8d 4f 01             	lea    ecx,[edi+0x1]
c002881a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028820:	75 6b                	jne    c002888d <__divdf3+0x1b1>
c0028822:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028825:	09 d6                	or     esi,edx
c0028827:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002882b:	74 28                	je     c0028855 <__divdf3+0x179>
c002882d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028830:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028833:	85 f6                	test   esi,esi
c0028835:	0f 85 14 02 00 00    	jne    c0028a4f <__divdf3+0x373>
c002883b:	31 ff                	xor    edi,edi
c002883d:	31 c9                	xor    ecx,ecx
c002883f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028842:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028845:	0f 89 04 02 00 00    	jns    c0028a4f <__divdf3+0x373>
c002884b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028850:	e9 fa 01 00 00       	jmp    c0028a4f <__divdf3+0x373>
c0028855:	85 f6                	test   esi,esi
c0028857:	75 1b                	jne    c0028874 <__divdf3+0x198>
c0028859:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002885c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002885f:	25 00 00 00 80       	and    eax,0x80000000
c0028864:	31 c9                	xor    ecx,ecx
c0028866:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002886b:	89 cf                	mov    edi,ecx
c002886d:	89 c1                	mov    ecx,eax
c002886f:	e9 db 01 00 00       	jmp    c0028a4f <__divdf3+0x373>
c0028874:	01 d2                	add    edx,edx
c0028876:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028879:	c1 eb 1f             	shr    ebx,0x1f
c002887c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002887f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028882:	8d 48 01             	lea    ecx,[eax+0x1]
c0028885:	09 da                	or     edx,ebx
c0028887:	78 04                	js     c002888d <__divdf3+0x1b1>
c0028889:	89 c8                	mov    eax,ecx
c002888b:	eb e7                	jmp    c0028874 <__divdf3+0x198>
c002888d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028890:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028896:	81 ca 00 00 00 80    	or     edx,0x80000000
c002889c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002889f:	39 d6                	cmp    esi,edx
c00288a1:	77 0d                	ja     c00288b0 <__divdf3+0x1d4>
c00288a3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00288a6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00288a9:	72 1b                	jb     c00288c6 <__divdf3+0x1ea>
c00288ab:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00288ae:	75 16                	jne    c00288c6 <__divdf3+0x1ea>
c00288b0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288b3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00288b6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00288b9:	83 de 00             	sbb    esi,0x0
c00288bc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00288bf:	ba 01 00 00 00       	mov    edx,0x1
c00288c4:	eb 02                	jmp    c00288c8 <__divdf3+0x1ec>
c00288c6:	31 d2                	xor    edx,edx
c00288c8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00288cf:	31 ff                	xor    edi,edi
c00288d1:	01 ff                	add    edi,edi
c00288d3:	89 d1                	mov    ecx,edx
c00288d5:	c1 e9 1f             	shr    ecx,0x1f
c00288d8:	09 cf                	or     edi,ecx
c00288da:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00288dd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00288e0:	89 da                	mov    edx,ebx
c00288e2:	89 f3                	mov    ebx,esi
c00288e4:	8d 34 36             	lea    esi,[esi+esi*1]
c00288e7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288ea:	c1 e9 1f             	shr    ecx,0x1f
c00288ed:	09 ce                	or     esi,ecx
c00288ef:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288f2:	01 c9                	add    ecx,ecx
c00288f4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00288f7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00288fa:	85 db                	test   ebx,ebx
c00288fc:	78 29                	js     c0028927 <__divdf3+0x24b>
c00288fe:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028901:	72 07                	jb     c002890a <__divdf3+0x22e>
c0028903:	75 3c                	jne    c0028941 <__divdf3+0x265>
c0028905:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028908:	77 37                	ja     c0028941 <__divdf3+0x265>
c002890a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002890d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028910:	31 d2                	xor    edx,edx
c0028912:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028915:	0f 97 c2             	seta   dl
c0028918:	29 d6                	sub    esi,edx
c002891a:	89 d9                	mov    ecx,ebx
c002891c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002891f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028922:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028925:	eb 17                	jmp    c002893e <__divdf3+0x262>
c0028927:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002892a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002892d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028930:	0f 97 c1             	seta   cl
c0028933:	0f b6 c9             	movzx  ecx,cl
c0028936:	29 ce                	sub    esi,ecx
c0028938:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002893b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002893e:	83 ca 01             	or     edx,0x1
c0028941:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028944:	75 8b                	jne    c00288d1 <__divdf3+0x1f5>
c0028946:	c1 e7 09             	shl    edi,0x9
c0028949:	89 d1                	mov    ecx,edx
c002894b:	c1 e9 17             	shr    ecx,0x17
c002894e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028951:	09 f3                	or     ebx,esi
c0028953:	0f 95 c3             	setne  bl
c0028956:	0f b6 db             	movzx  ebx,bl
c0028959:	c1 e2 09             	shl    edx,0x9
c002895c:	09 d3                	or     ebx,edx
c002895e:	89 ca                	mov    edx,ecx
c0028960:	09 fa                	or     edx,edi
c0028962:	78 0c                	js     c0028970 <__divdf3+0x294>
c0028964:	01 d2                	add    edx,edx
c0028966:	89 d9                	mov    ecx,ebx
c0028968:	c1 e9 1f             	shr    ecx,0x1f
c002896b:	09 ca                	or     edx,ecx
c002896d:	01 db                	add    ebx,ebx
c002896f:	48                   	dec    eax
c0028970:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028975:	0f 8f 83 00 00 00    	jg     c00289fe <__divdf3+0x322>
c002897b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028981:	85 c0                	test   eax,eax
c0028983:	0f 8f 82 00 00 00    	jg     c0028a0b <__divdf3+0x32f>
c0028989:	83 f8 cc             	cmp    eax,0xffffffcc
c002898c:	7c 77                	jl     c0028a05 <__divdf3+0x329>
c002898e:	be 01 00 00 00       	mov    esi,0x1
c0028993:	29 c6                	sub    esi,eax
c0028995:	81 ca 00 00 00 80    	or     edx,0x80000000
c002899b:	83 fe 1f             	cmp    esi,0x1f
c002899e:	7e 2f                	jle    c00289cf <__divdf3+0x2f3>
c00289a0:	83 fe 20             	cmp    esi,0x20
c00289a3:	75 0a                	jne    c00289af <__divdf3+0x2d3>
c00289a5:	85 db                	test   ebx,ebx
c00289a7:	0f 95 c3             	setne  bl
c00289aa:	0f b6 db             	movzx  ebx,bl
c00289ad:	eb 1a                	jmp    c00289c9 <__divdf3+0x2ed>
c00289af:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00289b2:	89 d7                	mov    edi,edx
c00289b4:	d3 e7                	shl    edi,cl
c00289b6:	89 f9                	mov    ecx,edi
c00289b8:	09 d9                	or     ecx,ebx
c00289ba:	0f 95 c3             	setne  bl
c00289bd:	0f b6 db             	movzx  ebx,bl
c00289c0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00289c5:	29 c1                	sub    ecx,eax
c00289c7:	d3 ea                	shr    edx,cl
c00289c9:	09 d3                	or     ebx,edx
c00289cb:	31 c0                	xor    eax,eax
c00289cd:	eb 3a                	jmp    c0028a09 <__divdf3+0x32d>
c00289cf:	83 c0 1f             	add    eax,0x1f
c00289d2:	89 d7                	mov    edi,edx
c00289d4:	88 c1                	mov    cl,al
c00289d6:	d3 e7                	shl    edi,cl
c00289d8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00289db:	89 df                	mov    edi,ebx
c00289dd:	89 f1                	mov    ecx,esi
c00289df:	d3 ef                	shr    edi,cl
c00289e1:	89 f9                	mov    ecx,edi
c00289e3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00289e6:	09 cf                	or     edi,ecx
c00289e8:	88 c1                	mov    cl,al
c00289ea:	d3 e3                	shl    ebx,cl
c00289ec:	85 db                	test   ebx,ebx
c00289ee:	0f 95 c3             	setne  bl
c00289f1:	0f b6 db             	movzx  ebx,bl
c00289f4:	09 fb                	or     ebx,edi
c00289f6:	89 f1                	mov    ecx,esi
c00289f8:	d3 ea                	shr    edx,cl
c00289fa:	31 c0                	xor    eax,eax
c00289fc:	eb 0d                	jmp    c0028a0b <__divdf3+0x32f>
c00289fe:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028a03:	eb 02                	jmp    c0028a07 <__divdf3+0x32b>
c0028a05:	31 c0                	xor    eax,eax
c0028a07:	31 db                	xor    ebx,ebx
c0028a09:	31 d2                	xor    edx,edx
c0028a0b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028a0e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028a11:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028a17:	09 c8                	or     eax,ecx
c0028a19:	c1 e0 14             	shl    eax,0x14
c0028a1c:	89 d1                	mov    ecx,edx
c0028a1e:	c1 e9 0b             	shr    ecx,0xb
c0028a21:	09 c8                	or     eax,ecx
c0028a23:	89 c6                	mov    esi,eax
c0028a25:	89 d9                	mov    ecx,ebx
c0028a27:	c1 e9 0b             	shr    ecx,0xb
c0028a2a:	c1 e2 15             	shl    edx,0x15
c0028a2d:	09 ca                	or     edx,ecx
c0028a2f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028a35:	0f 95 c0             	setne  al
c0028a38:	09 c1                	or     ecx,eax
c0028a3a:	83 e1 01             	and    ecx,0x1
c0028a3d:	c1 eb 0a             	shr    ebx,0xa
c0028a40:	21 cb                	and    ebx,ecx
c0028a42:	01 d3                	add    ebx,edx
c0028a44:	89 d8                	mov    eax,ebx
c0028a46:	83 d6 00             	adc    esi,0x0
c0028a49:	89 f2                	mov    edx,esi
c0028a4b:	89 c7                	mov    edi,eax
c0028a4d:	89 d1                	mov    ecx,edx
c0028a4f:	89 f8                	mov    eax,edi
c0028a51:	89 ca                	mov    edx,ecx
c0028a53:	83 c4 2c             	add    esp,0x2c
c0028a56:	5b                   	pop    ebx
c0028a57:	5e                   	pop    esi
c0028a58:	5f                   	pop    edi
c0028a59:	5d                   	pop    ebp
c0028a5a:	c3                   	ret    

c0028a5b <__floatsidf>:
c0028a5b:	55                   	push   ebp
c0028a5c:	89 e5                	mov    ebp,esp
c0028a5e:	56                   	push   esi
c0028a5f:	53                   	push   ebx
c0028a60:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a63:	85 db                	test   ebx,ebx
c0028a65:	7e 15                	jle    c0028a7c <__floatsidf+0x21>
c0028a67:	0f bd cb             	bsr    ecx,ebx
c0028a6a:	83 f1 1f             	xor    ecx,0x1f
c0028a6d:	d3 e3                	shl    ebx,cl
c0028a6f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a75:	b8 1e 04 00 00       	mov    eax,0x41e
c0028a7a:	eb 21                	jmp    c0028a9d <__floatsidf+0x42>
c0028a7c:	b8 00 00 00 00       	mov    eax,0x0
c0028a81:	ba 00 00 00 00       	mov    edx,0x0
c0028a86:	74 2a                	je     c0028ab2 <__floatsidf+0x57>
c0028a88:	f7 db                	neg    ebx
c0028a8a:	0f bd cb             	bsr    ecx,ebx
c0028a8d:	83 f1 1f             	xor    ecx,0x1f
c0028a90:	d3 e3                	shl    ebx,cl
c0028a92:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a98:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028a9d:	29 c8                	sub    eax,ecx
c0028a9f:	c1 e0 14             	shl    eax,0x14
c0028aa2:	89 c1                	mov    ecx,eax
c0028aa4:	89 de                	mov    esi,ebx
c0028aa6:	c1 ee 0b             	shr    esi,0xb
c0028aa9:	09 f1                	or     ecx,esi
c0028aab:	89 ca                	mov    edx,ecx
c0028aad:	c1 e3 15             	shl    ebx,0x15
c0028ab0:	89 d8                	mov    eax,ebx
c0028ab2:	5b                   	pop    ebx
c0028ab3:	5e                   	pop    esi
c0028ab4:	5d                   	pop    ebp
c0028ab5:	c3                   	ret    

c0028ab6 <__floatunsidf>:
c0028ab6:	55                   	push   ebp
c0028ab7:	89 e5                	mov    ebp,esp
c0028ab9:	56                   	push   esi
c0028aba:	53                   	push   ebx
c0028abb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028abe:	85 db                	test   ebx,ebx
c0028ac0:	74 2a                	je     c0028aec <__floatunsidf+0x36>
c0028ac2:	0f bd cb             	bsr    ecx,ebx
c0028ac5:	83 f1 1f             	xor    ecx,0x1f
c0028ac8:	d3 e3                	shl    ebx,cl
c0028aca:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028ad0:	b8 1e 04 00 00       	mov    eax,0x41e
c0028ad5:	29 c8                	sub    eax,ecx
c0028ad7:	c1 e0 14             	shl    eax,0x14
c0028ada:	89 c1                	mov    ecx,eax
c0028adc:	89 de                	mov    esi,ebx
c0028ade:	c1 ee 0b             	shr    esi,0xb
c0028ae1:	09 f1                	or     ecx,esi
c0028ae3:	89 ca                	mov    edx,ecx
c0028ae5:	c1 e3 15             	shl    ebx,0x15
c0028ae8:	89 d8                	mov    eax,ebx
c0028aea:	eb 04                	jmp    c0028af0 <__floatunsidf+0x3a>
c0028aec:	31 c0                	xor    eax,eax
c0028aee:	31 d2                	xor    edx,edx
c0028af0:	5b                   	pop    ebx
c0028af1:	5e                   	pop    esi
c0028af2:	5d                   	pop    ebp
c0028af3:	c3                   	ret    

c0028af4 <__fixdfsi>:
c0028af4:	55                   	push   ebp
c0028af5:	89 e5                	mov    ebp,esp
c0028af7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028afa:	89 d1                	mov    ecx,edx
c0028afc:	c1 e1 0b             	shl    ecx,0xb
c0028aff:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028b08:	c1 e8 15             	shr    eax,0x15
c0028b0b:	09 c1                	or     ecx,eax
c0028b0d:	c1 fa 14             	sar    edx,0x14
c0028b10:	78 1f                	js     c0028b31 <__fixdfsi+0x3d>
c0028b12:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028b18:	31 c0                	xor    eax,eax
c0028b1a:	83 fa 1e             	cmp    edx,0x1e
c0028b1d:	77 40                	ja     c0028b5f <__fixdfsi+0x6b>
c0028b1f:	89 c8                	mov    eax,ecx
c0028b21:	0d 00 00 00 80       	or     eax,0x80000000
c0028b26:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b2b:	29 d1                	sub    ecx,edx
c0028b2d:	d3 e8                	shr    eax,cl
c0028b2f:	eb 2e                	jmp    c0028b5f <__fixdfsi+0x6b>
c0028b31:	31 c0                	xor    eax,eax
c0028b33:	81 c2 01 04 00 00    	add    edx,0x401
c0028b39:	78 24                	js     c0028b5f <__fixdfsi+0x6b>
c0028b3b:	83 fa 1e             	cmp    edx,0x1e
c0028b3e:	7e 09                	jle    c0028b49 <__fixdfsi+0x55>
c0028b40:	83 fa 1f             	cmp    edx,0x1f
c0028b43:	75 18                	jne    c0028b5d <__fixdfsi+0x69>
c0028b45:	85 c9                	test   ecx,ecx
c0028b47:	75 14                	jne    c0028b5d <__fixdfsi+0x69>
c0028b49:	89 c8                	mov    eax,ecx
c0028b4b:	0d 00 00 00 80       	or     eax,0x80000000
c0028b50:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b55:	29 d1                	sub    ecx,edx
c0028b57:	d3 e8                	shr    eax,cl
c0028b59:	f7 d8                	neg    eax
c0028b5b:	eb 02                	jmp    c0028b5f <__fixdfsi+0x6b>
c0028b5d:	31 c0                	xor    eax,eax
c0028b5f:	5d                   	pop    ebp
c0028b60:	c3                   	ret    

c0028b61 <__fixunsdfsi>:
c0028b61:	55                   	push   ebp
c0028b62:	89 e5                	mov    ebp,esp
c0028b64:	53                   	push   ebx
c0028b65:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028b68:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b6b:	89 d3                	mov    ebx,edx
c0028b6d:	c1 fb 14             	sar    ebx,0x14
c0028b70:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028b76:	31 c0                	xor    eax,eax
c0028b78:	83 fb 1f             	cmp    ebx,0x1f
c0028b7b:	77 1d                	ja     c0028b9a <__fixunsdfsi+0x39>
c0028b7d:	89 d0                	mov    eax,edx
c0028b7f:	c1 e0 0b             	shl    eax,0xb
c0028b82:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028b87:	c1 e9 15             	shr    ecx,0x15
c0028b8a:	09 c8                	or     eax,ecx
c0028b8c:	0d 00 00 00 80       	or     eax,0x80000000
c0028b91:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b96:	29 d9                	sub    ecx,ebx
c0028b98:	d3 e8                	shr    eax,cl
c0028b9a:	5b                   	pop    ebx
c0028b9b:	5d                   	pop    ebp
c0028b9c:	c3                   	ret    

c0028b9d <__cmpdf2>:
c0028b9d:	55                   	push   ebp
c0028b9e:	89 e5                	mov    ebp,esp
c0028ba0:	57                   	push   edi
c0028ba1:	56                   	push   esi
c0028ba2:	53                   	push   ebx
c0028ba3:	83 ec 0c             	sub    esp,0xc
c0028ba6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028ba9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028bac:	89 ca                	mov    edx,ecx
c0028bae:	c1 ea 14             	shr    edx,0x14
c0028bb1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028bb7:	89 cb                	mov    ebx,ecx
c0028bb9:	c1 fb 1f             	sar    ebx,0x1f
c0028bbc:	31 da                	xor    edx,ebx
c0028bbe:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028bc1:	89 df                	mov    edi,ebx
c0028bc3:	c1 e7 0b             	shl    edi,0xb
c0028bc6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028bc9:	c1 e1 0b             	shl    ecx,0xb
c0028bcc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028bd2:	c1 eb 15             	shr    ebx,0x15
c0028bd5:	09 d9                	or     ecx,ebx
c0028bd7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028bda:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028bdd:	89 ce                	mov    esi,ecx
c0028bdf:	c1 ee 14             	shr    esi,0x14
c0028be2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028be8:	89 cb                	mov    ebx,ecx
c0028bea:	c1 fb 1f             	sar    ebx,0x1f
c0028bed:	31 de                	xor    esi,ebx
c0028bef:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028bf2:	89 df                	mov    edi,ebx
c0028bf4:	c1 e7 0b             	shl    edi,0xb
c0028bf7:	c1 e1 0b             	shl    ecx,0xb
c0028bfa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028c00:	c1 eb 15             	shr    ebx,0x15
c0028c03:	09 d9                	or     ecx,ebx
c0028c05:	89 d3                	mov    ebx,edx
c0028c07:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028c0d:	43                   	inc    ebx
c0028c0e:	83 fb 01             	cmp    ebx,0x1
c0028c11:	77 08                	ja     c0028c1b <__cmpdf2+0x7e>
c0028c13:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028c16:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028c19:	75 68                	jne    c0028c83 <__cmpdf2+0xe6>
c0028c1b:	89 f3                	mov    ebx,esi
c0028c1d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028c23:	43                   	inc    ebx
c0028c24:	83 fb 01             	cmp    ebx,0x1
c0028c27:	77 06                	ja     c0028c2f <__cmpdf2+0x92>
c0028c29:	89 fb                	mov    ebx,edi
c0028c2b:	09 cb                	or     ebx,ecx
c0028c2d:	75 54                	jne    c0028c83 <__cmpdf2+0xe6>
c0028c2f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028c32:	09 f8                	or     eax,edi
c0028c34:	09 c8                	or     eax,ecx
c0028c36:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028c39:	75 12                	jne    c0028c4d <__cmpdf2+0xb0>
c0028c3b:	8d 42 01             	lea    eax,[edx+0x1]
c0028c3e:	83 f8 01             	cmp    eax,0x1
c0028c41:	77 0a                	ja     c0028c4d <__cmpdf2+0xb0>
c0028c43:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028c46:	31 c0                	xor    eax,eax
c0028c48:	83 fb 01             	cmp    ebx,0x1
c0028c4b:	76 36                	jbe    c0028c83 <__cmpdf2+0xe6>
c0028c4d:	b8 01 00 00 00       	mov    eax,0x1
c0028c52:	39 f2                	cmp    edx,esi
c0028c54:	7f 2d                	jg     c0028c83 <__cmpdf2+0xe6>
c0028c56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028c5b:	7c 26                	jl     c0028c83 <__cmpdf2+0xe6>
c0028c5d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028c60:	77 07                	ja     c0028c69 <__cmpdf2+0xcc>
c0028c62:	72 16                	jb     c0028c7a <__cmpdf2+0xdd>
c0028c64:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028c67:	76 0a                	jbe    c0028c73 <__cmpdf2+0xd6>
c0028c69:	89 d0                	mov    eax,edx
c0028c6b:	c1 f8 1f             	sar    eax,0x1f
c0028c6e:	83 c8 01             	or     eax,0x1
c0028c71:	eb 10                	jmp    c0028c83 <__cmpdf2+0xe6>
c0028c73:	b8 00 00 00 00       	mov    eax,0x0
c0028c78:	73 09                	jae    c0028c83 <__cmpdf2+0xe6>
c0028c7a:	89 d0                	mov    eax,edx
c0028c7c:	c1 f8 1f             	sar    eax,0x1f
c0028c7f:	83 e0 02             	and    eax,0x2
c0028c82:	48                   	dec    eax
c0028c83:	83 c4 0c             	add    esp,0xc
c0028c86:	5b                   	pop    ebx
c0028c87:	5e                   	pop    esi
c0028c88:	5f                   	pop    edi
c0028c89:	5d                   	pop    ebp
c0028c8a:	c3                   	ret    

c0028c8b <__eqdf2>:
c0028c8b:	55                   	push   ebp
c0028c8c:	89 e5                	mov    ebp,esp
c0028c8e:	50                   	push   eax
c0028c8f:	6a 01                	push   0x1
c0028c91:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028c94:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028c97:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028c9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028c9d:	e8 fb fe ff ff       	call   c0028b9d <__cmpdf2>
c0028ca2:	83 c4 18             	add    esp,0x18
c0028ca5:	c9                   	leave  
c0028ca6:	c3                   	ret    

c0028ca7 <__nedf2>:
c0028ca7:	eb e2                	jmp    c0028c8b <__eqdf2>

c0028ca9 <__gtdf2>:
c0028ca9:	55                   	push   ebp
c0028caa:	89 e5                	mov    ebp,esp
c0028cac:	50                   	push   eax
c0028cad:	6a ff                	push   0xffffffff
c0028caf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028cb2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028cb5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028cb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028cbb:	e8 dd fe ff ff       	call   c0028b9d <__cmpdf2>
c0028cc0:	83 c4 18             	add    esp,0x18
c0028cc3:	c9                   	leave  
c0028cc4:	c3                   	ret    

c0028cc5 <__gedf2>:
c0028cc5:	eb e2                	jmp    c0028ca9 <__gtdf2>

c0028cc7 <__ltdf2>:
c0028cc7:	eb c2                	jmp    c0028c8b <__eqdf2>

c0028cc9 <__ledf2>:
c0028cc9:	eb c0                	jmp    c0028c8b <__eqdf2>

c0028ccb <__truncdfsf2>:
c0028ccb:	55                   	push   ebp
c0028ccc:	89 e5                	mov    ebp,esp
c0028cce:	57                   	push   edi
c0028ccf:	56                   	push   esi
c0028cd0:	53                   	push   ebx
c0028cd1:	83 ec 0c             	sub    esp,0xc
c0028cd4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028cd7:	89 d1                	mov    ecx,edx
c0028cd9:	c1 f9 14             	sar    ecx,0x14
c0028cdc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028cdf:	89 df                	mov    edi,ebx
c0028ce1:	c1 e7 0b             	shl    edi,0xb
c0028ce4:	89 d0                	mov    eax,edx
c0028ce6:	c1 e0 0b             	shl    eax,0xb
c0028ce9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028cee:	c1 eb 15             	shr    ebx,0x15
c0028cf1:	09 d8                	or     eax,ebx
c0028cf3:	89 cb                	mov    ebx,ecx
c0028cf5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028cfb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028d01:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028d07:	0f 86 9e 00 00 00    	jbe    c0028dab <__truncdfsf2+0xe0>
c0028d0d:	85 db                	test   ebx,ebx
c0028d0f:	75 0a                	jne    c0028d1b <__truncdfsf2+0x50>
c0028d11:	c1 fa 17             	sar    edx,0x17
c0028d14:	30 d2                	xor    dl,dl
c0028d16:	e9 84 00 00 00       	jmp    c0028d9f <__truncdfsf2+0xd4>
c0028d1b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028d21:	83 fe 83             	cmp    esi,0xffffff83
c0028d24:	7d 4b                	jge    c0028d71 <__truncdfsf2+0xa6>
c0028d26:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028d2b:	29 f1                	sub    ecx,esi
c0028d2d:	83 f9 1f             	cmp    ecx,0x1f
c0028d30:	7f 6b                	jg     c0028d9d <__truncdfsf2+0xd2>
c0028d32:	0d 00 00 00 80       	or     eax,0x80000000
c0028d37:	89 c3                	mov    ebx,eax
c0028d39:	d3 eb                	shr    ebx,cl
c0028d3b:	be 01 00 00 00       	mov    esi,0x1
c0028d40:	d3 e6                	shl    esi,cl
c0028d42:	4e                   	dec    esi
c0028d43:	21 f0                	and    eax,esi
c0028d45:	09 f8                	or     eax,edi
c0028d47:	0f 95 c0             	setne  al
c0028d4a:	0f b6 c0             	movzx  eax,al
c0028d4d:	09 c3                	or     ebx,eax
c0028d4f:	89 d9                	mov    ecx,ebx
c0028d51:	c1 e9 08             	shr    ecx,0x8
c0028d54:	f6 c3 7f             	test   bl,0x7f
c0028d57:	0f 95 c0             	setne  al
c0028d5a:	09 c8                	or     eax,ecx
c0028d5c:	83 e0 01             	and    eax,0x1
c0028d5f:	c1 eb 07             	shr    ebx,0x7
c0028d62:	21 c3                	and    ebx,eax
c0028d64:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028d6a:	09 d1                	or     ecx,edx
c0028d6c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028d6f:	eb 76                	jmp    c0028de7 <__truncdfsf2+0x11c>
c0028d71:	83 c6 80             	add    esi,0xffffff80
c0028d74:	7e 1d                	jle    c0028d93 <__truncdfsf2+0xc8>
c0028d76:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028d7c:	75 0b                	jne    c0028d89 <__truncdfsf2+0xbe>
c0028d7e:	09 f8                	or     eax,edi
c0028d80:	74 09                	je     c0028d8b <__truncdfsf2+0xc0>
c0028d82:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028d87:	eb 02                	jmp    c0028d8b <__truncdfsf2+0xc0>
c0028d89:	31 c0                	xor    eax,eax
c0028d8b:	c1 fa 17             	sar    edx,0x17
c0028d8e:	80 ca ff             	or     dl,0xff
c0028d91:	eb 0e                	jmp    c0028da1 <__truncdfsf2+0xd6>
c0028d93:	c1 fa 1f             	sar    edx,0x1f
c0028d96:	c1 e2 08             	shl    edx,0x8
c0028d99:	09 ca                	or     edx,ecx
c0028d9b:	eb 04                	jmp    c0028da1 <__truncdfsf2+0xd6>
c0028d9d:	31 d2                	xor    edx,edx
c0028d9f:	31 c0                	xor    eax,eax
c0028da1:	c1 e2 17             	shl    edx,0x17
c0028da4:	c1 e8 08             	shr    eax,0x8
c0028da7:	09 d0                	or     eax,edx
c0028da9:	eb 3c                	jmp    c0028de7 <__truncdfsf2+0x11c>
c0028dab:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028db1:	89 ca                	mov    edx,ecx
c0028db3:	c1 fa 0b             	sar    edx,0xb
c0028db6:	c1 e2 08             	shl    edx,0x8
c0028db9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028dbc:	31 db                	xor    ebx,ebx
c0028dbe:	85 ff                	test   edi,edi
c0028dc0:	0f 95 c3             	setne  bl
c0028dc3:	09 d8                	or     eax,ebx
c0028dc5:	89 c3                	mov    ebx,eax
c0028dc7:	c1 eb 08             	shr    ebx,0x8
c0028dca:	a8 7f                	test   al,0x7f
c0028dcc:	0f 95 c2             	setne  dl
c0028dcf:	89 d6                	mov    esi,edx
c0028dd1:	09 de                	or     esi,ebx
c0028dd3:	83 e6 01             	and    esi,0x1
c0028dd6:	c1 e8 07             	shr    eax,0x7
c0028dd9:	21 f0                	and    eax,esi
c0028ddb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028dde:	09 ca                	or     edx,ecx
c0028de0:	c1 e2 17             	shl    edx,0x17
c0028de3:	09 da                	or     edx,ebx
c0028de5:	01 d0                	add    eax,edx
c0028de7:	83 c4 0c             	add    esp,0xc
c0028dea:	5b                   	pop    ebx
c0028deb:	5e                   	pop    esi
c0028dec:	5f                   	pop    edi
c0028ded:	5d                   	pop    ebp
c0028dee:	c3                   	ret    

c0028def <__extendsfdf2>:
c0028def:	55                   	push   ebp
c0028df0:	89 e5                	mov    ebp,esp
c0028df2:	57                   	push   edi
c0028df3:	56                   	push   esi
c0028df4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028df7:	89 d1                	mov    ecx,edx
c0028df9:	c1 f9 17             	sar    ecx,0x17
c0028dfc:	c1 e2 08             	shl    edx,0x8
c0028dff:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028e05:	89 c8                	mov    eax,ecx
c0028e07:	80 e4 f8             	and    ah,0xf8
c0028e0a:	8d 71 01             	lea    esi,[ecx+0x1]
c0028e0d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028e13:	75 27                	jne    c0028e3c <__extendsfdf2+0x4d>
c0028e15:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028e1b:	75 18                	jne    c0028e35 <__extendsfdf2+0x46>
c0028e1d:	85 d2                	test   edx,edx
c0028e1f:	74 20                	je     c0028e41 <__extendsfdf2+0x52>
c0028e21:	41                   	inc    ecx
c0028e22:	01 d2                	add    edx,edx
c0028e24:	79 fb                	jns    c0028e21 <__extendsfdf2+0x32>
c0028e26:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028e2c:	29 c8                	sub    eax,ecx
c0028e2e:	05 81 03 00 00       	add    eax,0x381
c0028e33:	eb 0c                	jmp    c0028e41 <__extendsfdf2+0x52>
c0028e35:	05 00 07 00 00       	add    eax,0x700
c0028e3a:	eb 05                	jmp    c0028e41 <__extendsfdf2+0x52>
c0028e3c:	05 80 03 00 00       	add    eax,0x380
c0028e41:	c1 e0 14             	shl    eax,0x14
c0028e44:	89 c1                	mov    ecx,eax
c0028e46:	89 d0                	mov    eax,edx
c0028e48:	c1 e8 0b             	shr    eax,0xb
c0028e4b:	09 c1                	or     ecx,eax
c0028e4d:	c1 e2 15             	shl    edx,0x15
c0028e50:	89 d0                	mov    eax,edx
c0028e52:	89 ca                	mov    edx,ecx
c0028e54:	5e                   	pop    esi
c0028e55:	5f                   	pop    edi
c0028e56:	5d                   	pop    ebp
c0028e57:	c3                   	ret    
c0028e58:	66 90                	xchg   ax,ax
c0028e5a:	66 90                	xchg   ax,ax
c0028e5c:	66 90                	xchg   ax,ax
c0028e5e:	66 90                	xchg   ax,ax

c0028e60 <fabs>:
c0028e60:	83 ec 0c             	sub    esp,0xc
c0028e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e67:	89 04 24             	mov    DWORD PTR [esp],eax
c0028e6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028e6e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028e73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028e77:	dd 04 24             	fld    QWORD PTR [esp]
c0028e7a:	83 c4 0c             	add    esp,0xc
c0028e7d:	c3                   	ret    
c0028e7e:	66 90                	xchg   ax,ax

c0028e80 <lrint>:
c0028e80:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028e84:	83 ec 04             	sub    esp,0x4
c0028e87:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e8a:	58                   	pop    eax
c0028e8b:	c3                   	ret    

c0028e8c <lrintf>:
c0028e8c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028e90:	83 ec 04             	sub    esp,0x4
c0028e93:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e96:	58                   	pop    eax
c0028e97:	c3                   	ret    

Disassembly of section .init:

c0028e98 <_init>:
c0028e98:	55                   	push   ebp
c0028e99:	89 e5                	mov    ebp,esp
c0028e9b:	e8 78 72 fd ff       	call   c0000118 <frame_dummy>
c0028ea0:	e8 5b e0 ff ff       	call   c0026f00 <__do_global_ctors_aux>
c0028ea5:	5d                   	pop    ebp
c0028ea6:	c3                   	ret    

Disassembly of section .fini:

c0028ea7 <_fini>:
c0028ea7:	55                   	push   ebp
c0028ea8:	89 e5                	mov    ebp,esp
c0028eaa:	e8 f9 71 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028eaf:	5d                   	pop    ebp
c0028eb0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028eb2 <Computer::~Computer()>:
c0028eb2:	83 ec 0c             	sub    esp,0xc
c0028eb5:	ba e8 aa 02 c0       	mov    edx,0xc002aae8
c0028eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ebe:	89 10                	mov    DWORD PTR [eax],edx
c0028ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec4:	83 ec 0c             	sub    esp,0xc
c0028ec7:	50                   	push   eax
c0028ec8:	e8 03 ad fe ff       	call   c0013bd0 <Device::~Device()>
c0028ecd:	83 c4 10             	add    esp,0x10
c0028ed0:	90                   	nop
c0028ed1:	83 c4 0c             	add    esp,0xc
c0028ed4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028ed6 <Computer::~Computer()>:
c0028ed6:	83 ec 0c             	sub    esp,0xc
c0028ed9:	83 ec 0c             	sub    esp,0xc
c0028edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee0:	e8 cd ff ff ff       	call   c0028eb2 <Computer::~Computer()>
c0028ee5:	83 c4 10             	add    esp,0x10
c0028ee8:	83 ec 08             	sub    esp,0x8
c0028eeb:	68 ec 01 00 00       	push   0x1ec
c0028ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef4:	e8 f0 98 fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0028ef9:	83 c4 10             	add    esp,0x10
c0028efc:	83 c4 0c             	add    esp,0xc
c0028eff:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028f00 <idleCommon()>:
c0028f00:	83 ec 0c             	sub    esp,0xc
c0028f03:	fa                   	cli    
c0028f04:	ff 05 e8 27 03 c0    	inc    DWORD PTR ds:0xc00327e8
c0028f0a:	e8 a3 51 ff ff       	call   c001e0b2 <schedule()>
c0028f0f:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c0028f14:	48                   	dec    eax
c0028f15:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c0028f1a:	75 01                	jne    c0028f1d <idleCommon()+0x1d>
c0028f1c:	fb                   	sti    
c0028f1d:	83 c4 0c             	add    esp,0xc
c0028f20:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028f22 <LinkedList<UnixFile>::~LinkedList()>:
c0028f22:	90                   	nop
c0028f23:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028f24 <LinkedList<UnixFile>::LinkedList()>:
c0028f24:	83 ec 0c             	sub    esp,0xc
c0028f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f35:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f40:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f60:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f67:	83 ec 0c             	sub    esp,0xc
c0028f6a:	68 5a ad 02 c0       	push   0xc002ad5a
c0028f6f:	e8 55 99 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0028f74:	83 c4 10             	add    esp,0x10
c0028f77:	90                   	nop
c0028f78:	83 c4 0c             	add    esp,0xc
c0028f7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028f7c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028f7c:	83 ec 0c             	sub    esp,0xc
c0028f7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028f84:	75 10                	jne    c0028f96 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028f86:	83 ec 0c             	sub    esp,0xc
c0028f89:	68 74 ad 02 c0       	push   0xc002ad74
c0028f8e:	e8 6c 13 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0028f93:	83 c4 10             	add    esp,0x10
c0028f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f9c:	85 c0                	test   eax,eax
c0028f9e:	74 34                	je     c0028fd4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fa7:	85 c0                	test   eax,eax
c0028fa9:	74 29                	je     c0028fd4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028faf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fb6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fbd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fc1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fcb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fd2:	eb 65                	jmp    c0029039 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fda:	85 c0                	test   eax,eax
c0028fdc:	75 4b                	jne    c0029029 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028fde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fe5:	85 c0                	test   eax,eax
c0028fe7:	75 40                	jne    c0029029 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ff1:	89 10                	mov    DWORD PTR [eax],edx
c0028ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ffb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029002:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029005:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002900c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029010:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029013:	85 c0                	test   eax,eax
c0029015:	74 22                	je     c0029039 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029017:	83 ec 0c             	sub    esp,0xc
c002901a:	68 96 ad 02 c0       	push   0xc002ad96
c002901f:	e8 db 12 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0029024:	83 c4 10             	add    esp,0x10
c0029027:	eb 10                	jmp    c0029039 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029029:	83 ec 0c             	sub    esp,0xc
c002902c:	68 a0 ad 02 c0       	push   0xc002ada0
c0029031:	e8 c9 12 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0029036:	83 c4 10             	add    esp,0x10
c0029039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029040:	8d 50 01             	lea    edx,[eax+0x1]
c0029043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029047:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002904a:	90                   	nop
c002904b:	83 c4 0c             	add    esp,0xc
c002904e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029050 <LinkedList<UnixFile>::getFirstElement()>:
c0029050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029054:	8b 00                	mov    eax,DWORD PTR [eax]
c0029056:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029058 <LinkedList<UnixFile>::removeFirst()>:
c0029058:	83 ec 0c             	sub    esp,0xc
c002905b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029061:	85 c0                	test   eax,eax
c0029063:	75 12                	jne    c0029077 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029065:	83 ec 0c             	sub    esp,0xc
c0029068:	68 ac ad 02 c0       	push   0xc002adac
c002906d:	e8 8d 12 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0029072:	83 c4 10             	add    esp,0x10
c0029075:	eb 7e                	jmp    c00290f5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002907e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029081:	85 c0                	test   eax,eax
c0029083:	74 10                	je     c0029095 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029085:	83 ec 0c             	sub    esp,0xc
c0029088:	68 f7 ad 02 c0       	push   0xc002adf7
c002908d:	e8 6d 12 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0029092:	83 c4 10             	add    esp,0x10
c0029095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029099:	8b 00                	mov    eax,DWORD PTR [eax]
c002909b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002909e:	85 c0                	test   eax,eax
c00290a0:	75 33                	jne    c00290d5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00290a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00290ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00290b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290be:	83 f8 01             	cmp    eax,0x1
c00290c1:	74 21                	je     c00290e4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00290c3:	83 ec 0c             	sub    esp,0xc
c00290c6:	68 d0 ad 02 c0       	push   0xc002add0
c00290cb:	e8 2f 12 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c00290d0:	83 c4 10             	add    esp,0x10
c00290d3:	eb 0f                	jmp    c00290e4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00290d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00290db:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00290de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e2:	89 10                	mov    DWORD PTR [eax],edx
c00290e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290eb:	8d 50 ff             	lea    edx,[eax-0x1]
c00290ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290f5:	83 c4 0c             	add    esp,0xc
c00290f8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00290fa <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00290fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00290fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029101:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029102 <DriverlessDevice::~DriverlessDevice()>:
c0029102:	ba 9c b5 02 c0       	mov    edx,0xc002b59c
c0029107:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002910b:	89 10                	mov    DWORD PTR [eax],edx
c002910d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029111:	50                   	push   eax
c0029112:	e8 b9 aa fe ff       	call   c0013bd0 <Device::~Device()>
c0029117:	83 c4 04             	add    esp,0x4
c002911a:	90                   	nop
c002911b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002911c <DriverlessDevice::~DriverlessDevice()>:
c002911c:	83 ec 0c             	sub    esp,0xc
c002911f:	83 ec 0c             	sub    esp,0xc
c0029122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029126:	e8 d7 ff ff ff       	call   c0029102 <DriverlessDevice::~DriverlessDevice()>
c002912b:	83 c4 10             	add    esp,0x10
c002912e:	83 ec 08             	sub    esp,0x8
c0029131:	68 58 01 00 00       	push   0x158
c0029136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002913a:	e8 aa 96 fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c002913f:	83 c4 10             	add    esp,0x10
c0029142:	83 c4 0c             	add    esp,0xc
c0029145:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029146 <LinkedList<Device>::addElement(Device*)>:
c0029146:	83 ec 0c             	sub    esp,0xc
c0029149:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002914e:	75 10                	jne    c0029160 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029150:	83 ec 0c             	sub    esp,0xc
c0029153:	68 74 ad 02 c0       	push   0xc002ad74
c0029158:	e8 a2 11 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c002915d:	83 c4 10             	add    esp,0x10
c0029160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029164:	8b 00                	mov    eax,DWORD PTR [eax]
c0029166:	85 c0                	test   eax,eax
c0029168:	74 3a                	je     c00291a4 <LinkedList<Device>::addElement(Device*)+0x5e>
c002916a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029171:	85 c0                	test   eax,eax
c0029173:	74 2f                	je     c00291a4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029179:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002917c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029180:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002918a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002918e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029195:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029198:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00291a2:	eb 68                	jmp    c002920c <LinkedList<Device>::addElement(Device*)+0xc6>
c00291a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00291aa:	85 c0                	test   eax,eax
c00291ac:	75 4e                	jne    c00291fc <LinkedList<Device>::addElement(Device*)+0xb6>
c00291ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291b5:	85 c0                	test   eax,eax
c00291b7:	75 43                	jne    c00291fc <LinkedList<Device>::addElement(Device*)+0xb6>
c00291b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291c1:	89 10                	mov    DWORD PTR [eax],edx
c00291c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00291ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291d5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00291df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291e6:	85 c0                	test   eax,eax
c00291e8:	74 22                	je     c002920c <LinkedList<Device>::addElement(Device*)+0xc6>
c00291ea:	83 ec 0c             	sub    esp,0xc
c00291ed:	68 96 ad 02 c0       	push   0xc002ad96
c00291f2:	e8 08 11 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c00291f7:	83 c4 10             	add    esp,0x10
c00291fa:	eb 10                	jmp    c002920c <LinkedList<Device>::addElement(Device*)+0xc6>
c00291fc:	83 ec 0c             	sub    esp,0xc
c00291ff:	68 a0 ad 02 c0       	push   0xc002ada0
c0029204:	e8 f6 10 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0029209:	83 c4 10             	add    esp,0x10
c002920c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029210:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029213:	8d 50 01             	lea    edx,[eax+0x1]
c0029216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002921a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002921d:	90                   	nop
c002921e:	83 c4 0c             	add    esp,0xc
c0029221:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029222 <LinkedList<Device>::LinkedList()>:
c0029222:	83 ec 0c             	sub    esp,0xc
c0029225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029229:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002922f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029233:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002923a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002923e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029249:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002924f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029253:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002925a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002925e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029265:	83 ec 0c             	sub    esp,0xc
c0029268:	68 5a ad 02 c0       	push   0xc002ad5a
c002926d:	e8 57 96 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c0029272:	83 c4 10             	add    esp,0x10
c0029275:	90                   	nop
c0029276:	83 c4 0c             	add    esp,0xc
c0029279:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002927a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002927a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002927e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029280:	85 c0                	test   eax,eax
c0029282:	75 0e                	jne    c0029292 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029284:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029288:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002928b:	85 c0                	test   eax,eax
c002928d:	75 03                	jne    c0029292 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002928f:	b0 01                	mov    al,0x1
c0029291:	c3                   	ret    
c0029292:	b0 00                	mov    al,0x0
c0029294:	90                   	nop
c0029295:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002929a:	8b 00                	mov    eax,DWORD PTR [eax]
c002929c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002929e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002929e:	83 ec 0c             	sub    esp,0xc
c00292a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00292a7:	85 c0                	test   eax,eax
c00292a9:	75 15                	jne    c00292c0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00292ab:	83 ec 0c             	sub    esp,0xc
c00292ae:	68 ac ad 02 c0       	push   0xc002adac
c00292b3:	e8 47 10 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c00292b8:	83 c4 10             	add    esp,0x10
c00292bb:	e9 88 00 00 00       	jmp    c0029348 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00292c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00292ca:	85 c0                	test   eax,eax
c00292cc:	0f 95 c0             	setne  al
c00292cf:	84 c0                	test   al,al
c00292d1:	74 10                	je     c00292e3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00292d3:	83 ec 0c             	sub    esp,0xc
c00292d6:	68 f7 ad 02 c0       	push   0xc002adf7
c00292db:	e8 1f 10 ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c00292e0:	83 c4 10             	add    esp,0x10
c00292e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00292e9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00292ec:	85 c0                	test   eax,eax
c00292ee:	0f 94 c0             	sete   al
c00292f1:	84 c0                	test   al,al
c00292f3:	74 33                	je     c0029328 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00292f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00292ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029303:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002930a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002930e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029311:	83 f8 01             	cmp    eax,0x1
c0029314:	74 21                	je     c0029337 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029316:	83 ec 0c             	sub    esp,0xc
c0029319:	68 d0 ad 02 c0       	push   0xc002add0
c002931e:	e8 dc 0f ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0029323:	83 c4 10             	add    esp,0x10
c0029326:	eb 0f                	jmp    c0029337 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002932c:	8b 00                	mov    eax,DWORD PTR [eax]
c002932e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029335:	89 10                	mov    DWORD PTR [eax],edx
c0029337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002933e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029345:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029348:	83 c4 0c             	add    esp,0xc
c002934b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002934c:	83 ec 0c             	sub    esp,0xc
c002934f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029354:	75 10                	jne    c0029366 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029356:	83 ec 0c             	sub    esp,0xc
c0029359:	68 74 ad 02 c0       	push   0xc002ad74
c002935e:	e8 9c 0f ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0029363:	83 c4 10             	add    esp,0x10
c0029366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002936a:	8b 00                	mov    eax,DWORD PTR [eax]
c002936c:	85 c0                	test   eax,eax
c002936e:	74 34                	je     c00293a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029374:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029377:	85 c0                	test   eax,eax
c0029379:	74 29                	je     c00293a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002937b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002937f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029382:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029386:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029389:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002938d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029391:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029398:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002939b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00293a2:	eb 65                	jmp    c0029409 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00293aa:	85 c0                	test   eax,eax
c00293ac:	75 4b                	jne    c00293f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00293ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293b5:	85 c0                	test   eax,eax
c00293b7:	75 40                	jne    c00293f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00293b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293c1:	89 10                	mov    DWORD PTR [eax],edx
c00293c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293d5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00293dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293e3:	85 c0                	test   eax,eax
c00293e5:	74 22                	je     c0029409 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293e7:	83 ec 0c             	sub    esp,0xc
c00293ea:	68 96 ad 02 c0       	push   0xc002ad96
c00293ef:	e8 0b 0f ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c00293f4:	83 c4 10             	add    esp,0x10
c00293f7:	eb 10                	jmp    c0029409 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293f9:	83 ec 0c             	sub    esp,0xc
c00293fc:	68 a0 ad 02 c0       	push   0xc002ada0
c0029401:	e8 f9 0e ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0029406:	83 c4 10             	add    esp,0x10
c0029409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002940d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029410:	8d 50 01             	lea    edx,[eax+0x1]
c0029413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029417:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002941a:	90                   	nop
c002941b:	83 c4 0c             	add    esp,0xc
c002941e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029420 <ACPI::~ACPI()>:
c0029420:	83 ec 0c             	sub    esp,0xc
c0029423:	ba 6c bf 02 c0       	mov    edx,0xc002bf6c
c0029428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002942c:	89 10                	mov    DWORD PTR [eax],edx
c002942e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029432:	83 ec 0c             	sub    esp,0xc
c0029435:	50                   	push   eax
c0029436:	e8 95 a7 fe ff       	call   c0013bd0 <Device::~Device()>
c002943b:	83 c4 10             	add    esp,0x10
c002943e:	90                   	nop
c002943f:	83 c4 0c             	add    esp,0xc
c0029442:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029444 <ACPI::~ACPI()>:
c0029444:	83 ec 0c             	sub    esp,0xc
c0029447:	83 ec 0c             	sub    esp,0xc
c002944a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002944e:	e8 cd ff ff ff       	call   c0029420 <ACPI::~ACPI()>
c0029453:	83 c4 10             	add    esp,0x10
c0029456:	83 ec 08             	sub    esp,0x8
c0029459:	68 64 12 00 00       	push   0x1264
c002945e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029462:	e8 82 93 fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0029467:	83 c4 10             	add    esp,0x10
c002946a:	83 c4 0c             	add    esp,0xc
c002946d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002946e <LinkedList<Device>::~LinkedList()>:
c002946e:	90                   	nop
c002946f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029470 <LinkedList<Device>::isEmpty()>:
c0029470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029474:	8b 00                	mov    eax,DWORD PTR [eax]
c0029476:	85 c0                	test   eax,eax
c0029478:	75 0e                	jne    c0029488 <LinkedList<Device>::isEmpty()+0x18>
c002947a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002947e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029481:	85 c0                	test   eax,eax
c0029483:	75 03                	jne    c0029488 <LinkedList<Device>::isEmpty()+0x18>
c0029485:	b0 01                	mov    al,0x1
c0029487:	c3                   	ret    
c0029488:	b0 00                	mov    al,0x0
c002948a:	90                   	nop
c002948b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002948c <LinkedList<Device>::getFirstElement()>:
c002948c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029490:	8b 00                	mov    eax,DWORD PTR [eax]
c0029492:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029494 <LinkedList<Device>::removeFirst()>:
c0029494:	83 ec 0c             	sub    esp,0xc
c0029497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002949b:	8b 00                	mov    eax,DWORD PTR [eax]
c002949d:	85 c0                	test   eax,eax
c002949f:	75 15                	jne    c00294b6 <LinkedList<Device>::removeFirst()+0x22>
c00294a1:	83 ec 0c             	sub    esp,0xc
c00294a4:	68 ac ad 02 c0       	push   0xc002adac
c00294a9:	e8 51 0e ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c00294ae:	83 c4 10             	add    esp,0x10
c00294b1:	e9 87 00 00 00       	jmp    c002953d <LinkedList<Device>::removeFirst()+0xa9>
c00294b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294bd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00294c3:	85 c0                	test   eax,eax
c00294c5:	74 10                	je     c00294d7 <LinkedList<Device>::removeFirst()+0x43>
c00294c7:	83 ec 0c             	sub    esp,0xc
c00294ca:	68 f7 ad 02 c0       	push   0xc002adf7
c00294cf:	e8 2b 0e ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c00294d4:	83 c4 10             	add    esp,0x10
c00294d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294db:	8b 00                	mov    eax,DWORD PTR [eax]
c00294dd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00294e3:	85 c0                	test   eax,eax
c00294e5:	75 33                	jne    c002951a <LinkedList<Device>::removeFirst()+0x86>
c00294e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029500:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029503:	83 f8 01             	cmp    eax,0x1
c0029506:	74 24                	je     c002952c <LinkedList<Device>::removeFirst()+0x98>
c0029508:	83 ec 0c             	sub    esp,0xc
c002950b:	68 d0 ad 02 c0       	push   0xc002add0
c0029510:	e8 ea 0d ff ff       	call   c001a2ff <Krnl::panic(char const*)>
c0029515:	83 c4 10             	add    esp,0x10
c0029518:	eb 12                	jmp    c002952c <LinkedList<Device>::removeFirst()+0x98>
c002951a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002951e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029520:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002952a:	89 10                	mov    DWORD PTR [eax],edx
c002952c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029530:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029533:	8d 50 ff             	lea    edx,[eax-0x1]
c0029536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002953a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002953d:	83 c4 0c             	add    esp,0xc
c0029540:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029542 <CPU::~CPU()>:
c0029542:	83 ec 0c             	sub    esp,0xc
c0029545:	ba 5c c3 02 c0       	mov    edx,0xc002c35c
c002954a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002954e:	89 10                	mov    DWORD PTR [eax],edx
c0029550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029554:	83 ec 0c             	sub    esp,0xc
c0029557:	50                   	push   eax
c0029558:	e8 73 a6 fe ff       	call   c0013bd0 <Device::~Device()>
c002955d:	83 c4 10             	add    esp,0x10
c0029560:	90                   	nop
c0029561:	83 c4 0c             	add    esp,0xc
c0029564:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029566 <CPU::~CPU()>:
c0029566:	83 ec 0c             	sub    esp,0xc
c0029569:	83 ec 0c             	sub    esp,0xc
c002956c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029570:	e8 cd ff ff ff       	call   c0029542 <CPU::~CPU()>
c0029575:	83 c4 10             	add    esp,0x10
c0029578:	83 ec 08             	sub    esp,0x8
c002957b:	68 98 11 00 00       	push   0x1198
c0029580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029584:	e8 60 92 fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0029589:	83 c4 10             	add    esp,0x10
c002958c:	83 c4 0c             	add    esp,0xc
c002958f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029590 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029590:	90                   	nop
c0029591:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029592 <ThreadControlBlock::ThreadControlBlock()>:
c0029592:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029596:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002959d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295a1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00295a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295ac:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00295b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295b7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00295be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295c2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00295c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295cd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00295d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295d5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00295d9:	90                   	nop
c00295da:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00295dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00295dc:	83 ec 0c             	sub    esp,0xc
c00295df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029603:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002960d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029618:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002961f:	83 ec 0c             	sub    esp,0xc
c0029622:	68 5a ad 02 c0       	push   0xc002ad5a
c0029627:	e8 9d 92 fe ff       	call   c00128c9 <Dbg::kprintf(char const*, ...)>
c002962c:	83 c4 10             	add    esp,0x10
c002962f:	90                   	nop
c0029630:	83 c4 0c             	add    esp,0xc
c0029633:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029634 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029634:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029638:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002963b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002963c <Vm::_FPUState::_FPUState()>:
c002963c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029640:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029647:	90                   	nop
c0029648:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002964a <PCI::~PCI()>:
c002964a:	83 ec 0c             	sub    esp,0xc
c002964d:	ba f0 d4 02 c0       	mov    edx,0xc002d4f0
c0029652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029656:	89 10                	mov    DWORD PTR [eax],edx
c0029658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002965c:	83 ec 0c             	sub    esp,0xc
c002965f:	50                   	push   eax
c0029660:	e8 3b 9f fe ff       	call   c00135a0 <Bus::~Bus()>
c0029665:	83 c4 10             	add    esp,0x10
c0029668:	90                   	nop
c0029669:	83 c4 0c             	add    esp,0xc
c002966c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002966e <PCI::~PCI()>:
c002966e:	83 ec 0c             	sub    esp,0xc
c0029671:	83 ec 0c             	sub    esp,0xc
c0029674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029678:	e8 cd ff ff ff       	call   c002964a <PCI::~PCI()>
c002967d:	83 c4 10             	add    esp,0x10
c0029680:	83 ec 08             	sub    esp,0x8
c0029683:	68 5c 01 00 00       	push   0x15c
c0029688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002968c:	e8 58 91 fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0029691:	83 c4 10             	add    esp,0x10
c0029694:	83 c4 0c             	add    esp,0xc
c0029697:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029698 <IDE::~IDE()>:
c0029698:	83 ec 0c             	sub    esp,0xc
c002969b:	ba 54 d7 02 c0       	mov    edx,0xc002d754
c00296a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296a4:	89 10                	mov    DWORD PTR [eax],edx
c00296a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296aa:	83 ec 0c             	sub    esp,0xc
c00296ad:	50                   	push   eax
c00296ae:	e8 33 aa fe ff       	call   c00140e6 <HardDiskController::~HardDiskController()>
c00296b3:	83 c4 10             	add    esp,0x10
c00296b6:	90                   	nop
c00296b7:	83 c4 0c             	add    esp,0xc
c00296ba:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00296bc <IDE::~IDE()>:
c00296bc:	83 ec 0c             	sub    esp,0xc
c00296bf:	83 ec 0c             	sub    esp,0xc
c00296c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296c6:	e8 cd ff ff ff       	call   c0029698 <IDE::~IDE()>
c00296cb:	83 c4 10             	add    esp,0x10
c00296ce:	83 ec 08             	sub    esp,0x8
c00296d1:	68 70 02 00 00       	push   0x270
c00296d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296da:	e8 0a 91 fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c00296df:	83 c4 10             	add    esp,0x10
c00296e2:	83 c4 0c             	add    esp,0xc
c00296e5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00296e6 <SATABus::~SATABus()>:
c00296e6:	83 ec 0c             	sub    esp,0xc
c00296e9:	ba 34 d8 02 c0       	mov    edx,0xc002d834
c00296ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f2:	89 10                	mov    DWORD PTR [eax],edx
c00296f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f8:	83 ec 0c             	sub    esp,0xc
c00296fb:	50                   	push   eax
c00296fc:	e8 e5 a9 fe ff       	call   c00140e6 <HardDiskController::~HardDiskController()>
c0029701:	83 c4 10             	add    esp,0x10
c0029704:	90                   	nop
c0029705:	83 c4 0c             	add    esp,0xc
c0029708:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002970a <SATABus::~SATABus()>:
c002970a:	83 ec 0c             	sub    esp,0xc
c002970d:	83 ec 0c             	sub    esp,0xc
c0029710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029714:	e8 cd ff ff ff       	call   c00296e6 <SATABus::~SATABus()>
c0029719:	83 c4 10             	add    esp,0x10
c002971c:	83 ec 08             	sub    esp,0x8
c002971f:	68 64 01 00 00       	push   0x164
c0029724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029728:	e8 bc 90 fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c002972d:	83 c4 10             	add    esp,0x10
c0029730:	83 c4 0c             	add    esp,0xc
c0029733:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029734 <ATA::~ATA()>:
c0029734:	83 ec 0c             	sub    esp,0xc
c0029737:	ba 80 d8 02 c0       	mov    edx,0xc002d880
c002973c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029740:	89 10                	mov    DWORD PTR [eax],edx
c0029742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029746:	83 ec 0c             	sub    esp,0xc
c0029749:	50                   	push   eax
c002974a:	e8 89 aa fe ff       	call   c00141d8 <PhysicalDisk::~PhysicalDisk()>
c002974f:	83 c4 10             	add    esp,0x10
c0029752:	90                   	nop
c0029753:	83 c4 0c             	add    esp,0xc
c0029756:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029758 <ATA::~ATA()>:
c0029758:	83 ec 0c             	sub    esp,0xc
c002975b:	83 ec 0c             	sub    esp,0xc
c002975e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029762:	e8 cd ff ff ff       	call   c0029734 <ATA::~ATA()>
c0029767:	83 c4 10             	add    esp,0x10
c002976a:	83 ec 08             	sub    esp,0x8
c002976d:	68 7c 01 00 00       	push   0x17c
c0029772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029776:	e8 6e 90 fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c002977b:	83 c4 10             	add    esp,0x10
c002977e:	83 c4 0c             	add    esp,0xc
c0029781:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029782 <ATAPI::~ATAPI()>:
c0029782:	83 ec 0c             	sub    esp,0xc
c0029785:	ba b8 d8 02 c0       	mov    edx,0xc002d8b8
c002978a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002978e:	89 10                	mov    DWORD PTR [eax],edx
c0029790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029794:	83 ec 0c             	sub    esp,0xc
c0029797:	50                   	push   eax
c0029798:	e8 3b aa fe ff       	call   c00141d8 <PhysicalDisk::~PhysicalDisk()>
c002979d:	83 c4 10             	add    esp,0x10
c00297a0:	90                   	nop
c00297a1:	83 c4 0c             	add    esp,0xc
c00297a4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00297a6 <ATAPI::~ATAPI()>:
c00297a6:	83 ec 0c             	sub    esp,0xc
c00297a9:	83 ec 0c             	sub    esp,0xc
c00297ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297b0:	e8 cd ff ff ff       	call   c0029782 <ATAPI::~ATAPI()>
c00297b5:	83 c4 10             	add    esp,0x10
c00297b8:	83 ec 08             	sub    esp,0x8
c00297bb:	68 80 01 00 00       	push   0x180
c00297c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297c4:	e8 20 90 fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c00297c9:	83 c4 10             	add    esp,0x10
c00297cc:	83 c4 0c             	add    esp,0xc
c00297cf:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00297d0 <SATA::~SATA()>:
c00297d0:	83 ec 0c             	sub    esp,0xc
c00297d3:	ba 6c d9 02 c0       	mov    edx,0xc002d96c
c00297d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297dc:	89 10                	mov    DWORD PTR [eax],edx
c00297de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297e2:	83 ec 0c             	sub    esp,0xc
c00297e5:	50                   	push   eax
c00297e6:	e8 ed a9 fe ff       	call   c00141d8 <PhysicalDisk::~PhysicalDisk()>
c00297eb:	83 c4 10             	add    esp,0x10
c00297ee:	90                   	nop
c00297ef:	83 c4 0c             	add    esp,0xc
c00297f2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00297f4 <SATA::~SATA()>:
c00297f4:	83 ec 0c             	sub    esp,0xc
c00297f7:	83 ec 0c             	sub    esp,0xc
c00297fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297fe:	e8 cd ff ff ff       	call   c00297d0 <SATA::~SATA()>
c0029803:	83 c4 10             	add    esp,0x10
c0029806:	83 ec 08             	sub    esp,0x8
c0029809:	68 7c 01 00 00       	push   0x17c
c002980e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029812:	e8 d2 8f fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0029817:	83 c4 10             	add    esp,0x10
c002981a:	83 c4 0c             	add    esp,0xc
c002981d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002981e <SATAPI::~SATAPI()>:
c002981e:	83 ec 0c             	sub    esp,0xc
c0029821:	ba 48 da 02 c0       	mov    edx,0xc002da48
c0029826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002982a:	89 10                	mov    DWORD PTR [eax],edx
c002982c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029830:	83 ec 0c             	sub    esp,0xc
c0029833:	50                   	push   eax
c0029834:	e8 9f a9 fe ff       	call   c00141d8 <PhysicalDisk::~PhysicalDisk()>
c0029839:	83 c4 10             	add    esp,0x10
c002983c:	90                   	nop
c002983d:	83 c4 0c             	add    esp,0xc
c0029840:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029842 <SATAPI::~SATAPI()>:
c0029842:	83 ec 0c             	sub    esp,0xc
c0029845:	83 ec 0c             	sub    esp,0xc
c0029848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002984c:	e8 cd ff ff ff       	call   c002981e <SATAPI::~SATAPI()>
c0029851:	83 c4 10             	add    esp,0x10
c0029854:	83 ec 08             	sub    esp,0x8
c0029857:	68 80 01 00 00       	push   0x180
c002985c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029860:	e8 84 8f fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0029865:	83 c4 10             	add    esp,0x10
c0029868:	83 c4 0c             	add    esp,0xc
c002986b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002986c <AVX::~AVX()>:
c002986c:	83 ec 0c             	sub    esp,0xc
c002986f:	ba 88 da 02 c0       	mov    edx,0xc002da88
c0029874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029878:	89 10                	mov    DWORD PTR [eax],edx
c002987a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002987e:	83 ec 0c             	sub    esp,0xc
c0029881:	50                   	push   eax
c0029882:	e8 d5 a9 fe ff       	call   c001425c <FPU::~FPU()>
c0029887:	83 c4 10             	add    esp,0x10
c002988a:	90                   	nop
c002988b:	83 c4 0c             	add    esp,0xc
c002988e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029890 <AVX::~AVX()>:
c0029890:	83 ec 0c             	sub    esp,0xc
c0029893:	83 ec 0c             	sub    esp,0xc
c0029896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002989a:	e8 cd ff ff ff       	call   c002986c <AVX::~AVX()>
c002989f:	83 c4 10             	add    esp,0x10
c00298a2:	83 ec 08             	sub    esp,0x8
c00298a5:	68 58 01 00 00       	push   0x158
c00298aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298ae:	e8 36 8f fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c00298b3:	83 c4 10             	add    esp,0x10
c00298b6:	83 c4 0c             	add    esp,0xc
c00298b9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00298ba <MMX::~MMX()>:
c00298ba:	83 ec 0c             	sub    esp,0xc
c00298bd:	ba c8 da 02 c0       	mov    edx,0xc002dac8
c00298c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298c6:	89 10                	mov    DWORD PTR [eax],edx
c00298c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298cc:	83 ec 0c             	sub    esp,0xc
c00298cf:	50                   	push   eax
c00298d0:	e8 87 a9 fe ff       	call   c001425c <FPU::~FPU()>
c00298d5:	83 c4 10             	add    esp,0x10
c00298d8:	90                   	nop
c00298d9:	83 c4 0c             	add    esp,0xc
c00298dc:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00298de <MMX::~MMX()>:
c00298de:	83 ec 0c             	sub    esp,0xc
c00298e1:	83 ec 0c             	sub    esp,0xc
c00298e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298e8:	e8 cd ff ff ff       	call   c00298ba <MMX::~MMX()>
c00298ed:	83 c4 10             	add    esp,0x10
c00298f0:	83 ec 08             	sub    esp,0x8
c00298f3:	68 58 01 00 00       	push   0x158
c00298f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298fc:	e8 e8 8e fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0029901:	83 c4 10             	add    esp,0x10
c0029904:	83 c4 0c             	add    esp,0xc
c0029907:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029908 <SSE::~SSE()>:
c0029908:	83 ec 0c             	sub    esp,0xc
c002990b:	ba 08 db 02 c0       	mov    edx,0xc002db08
c0029910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029914:	89 10                	mov    DWORD PTR [eax],edx
c0029916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002991a:	83 ec 0c             	sub    esp,0xc
c002991d:	50                   	push   eax
c002991e:	e8 39 a9 fe ff       	call   c001425c <FPU::~FPU()>
c0029923:	83 c4 10             	add    esp,0x10
c0029926:	90                   	nop
c0029927:	83 c4 0c             	add    esp,0xc
c002992a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002992c <SSE::~SSE()>:
c002992c:	83 ec 0c             	sub    esp,0xc
c002992f:	83 ec 0c             	sub    esp,0xc
c0029932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029936:	e8 cd ff ff ff       	call   c0029908 <SSE::~SSE()>
c002993b:	83 c4 10             	add    esp,0x10
c002993e:	83 ec 08             	sub    esp,0x8
c0029941:	68 58 01 00 00       	push   0x158
c0029946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002994a:	e8 9a 8e fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c002994f:	83 c4 10             	add    esp,0x10
c0029952:	83 c4 0c             	add    esp,0xc
c0029955:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029956 <x87::~x87()>:
c0029956:	83 ec 0c             	sub    esp,0xc
c0029959:	ba 48 db 02 c0       	mov    edx,0xc002db48
c002995e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029962:	89 10                	mov    DWORD PTR [eax],edx
c0029964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029968:	83 ec 0c             	sub    esp,0xc
c002996b:	50                   	push   eax
c002996c:	e8 eb a8 fe ff       	call   c001425c <FPU::~FPU()>
c0029971:	83 c4 10             	add    esp,0x10
c0029974:	90                   	nop
c0029975:	83 c4 0c             	add    esp,0xc
c0029978:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002997a <x87::~x87()>:
c002997a:	83 ec 0c             	sub    esp,0xc
c002997d:	83 ec 0c             	sub    esp,0xc
c0029980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029984:	e8 cd ff ff ff       	call   c0029956 <x87::~x87()>
c0029989:	83 c4 10             	add    esp,0x10
c002998c:	83 ec 08             	sub    esp,0x8
c002998f:	68 58 01 00 00       	push   0x158
c0029994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029998:	e8 4c 8e fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c002999d:	83 c4 10             	add    esp,0x10
c00299a0:	83 c4 0c             	add    esp,0xc
c00299a3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00299a4 <IOAPIC::~IOAPIC()>:
c00299a4:	83 ec 0c             	sub    esp,0xc
c00299a7:	ba a0 dc 02 c0       	mov    edx,0xc002dca0
c00299ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299b0:	89 10                	mov    DWORD PTR [eax],edx
c00299b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299b6:	83 ec 0c             	sub    esp,0xc
c00299b9:	50                   	push   eax
c00299ba:	e8 11 a2 fe ff       	call   c0013bd0 <Device::~Device()>
c00299bf:	83 c4 10             	add    esp,0x10
c00299c2:	90                   	nop
c00299c3:	83 c4 0c             	add    esp,0xc
c00299c6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00299c8 <IOAPIC::~IOAPIC()>:
c00299c8:	83 ec 0c             	sub    esp,0xc
c00299cb:	83 ec 0c             	sub    esp,0xc
c00299ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299d2:	e8 cd ff ff ff       	call   c00299a4 <IOAPIC::~IOAPIC()>
c00299d7:	83 c4 10             	add    esp,0x10
c00299da:	83 ec 08             	sub    esp,0x8
c00299dd:	68 68 01 00 00       	push   0x168
c00299e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299e6:	e8 fe 8d fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c00299eb:	83 c4 10             	add    esp,0x10
c00299ee:	83 c4 0c             	add    esp,0xc
c00299f1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00299f2 <APIC::~APIC()>:
c00299f2:	83 ec 0c             	sub    esp,0xc
c00299f5:	ba 58 dc 02 c0       	mov    edx,0xc002dc58
c00299fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299fe:	89 10                	mov    DWORD PTR [eax],edx
c0029a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a04:	83 ec 0c             	sub    esp,0xc
c0029a07:	50                   	push   eax
c0029a08:	e8 19 ad fe ff       	call   c0014726 <InterruptController::~InterruptController()>
c0029a0d:	83 c4 10             	add    esp,0x10
c0029a10:	90                   	nop
c0029a11:	83 c4 0c             	add    esp,0xc
c0029a14:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029a16 <APIC::~APIC()>:
c0029a16:	83 ec 0c             	sub    esp,0xc
c0029a19:	83 ec 0c             	sub    esp,0xc
c0029a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a20:	e8 cd ff ff ff       	call   c00299f2 <APIC::~APIC()>
c0029a25:	83 c4 10             	add    esp,0x10
c0029a28:	83 ec 08             	sub    esp,0x8
c0029a2b:	68 58 21 00 00       	push   0x2158
c0029a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a34:	e8 b0 8d fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0029a39:	83 c4 10             	add    esp,0x10
c0029a3c:	83 c4 0c             	add    esp,0xc
c0029a3f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029a40 <PIC::~PIC()>:
c0029a40:	83 ec 0c             	sub    esp,0xc
c0029a43:	ba f0 dc 02 c0       	mov    edx,0xc002dcf0
c0029a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a4c:	89 10                	mov    DWORD PTR [eax],edx
c0029a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a52:	83 ec 0c             	sub    esp,0xc
c0029a55:	50                   	push   eax
c0029a56:	e8 cb ac fe ff       	call   c0014726 <InterruptController::~InterruptController()>
c0029a5b:	83 c4 10             	add    esp,0x10
c0029a5e:	90                   	nop
c0029a5f:	83 c4 0c             	add    esp,0xc
c0029a62:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029a64 <PIC::~PIC()>:
c0029a64:	83 ec 0c             	sub    esp,0xc
c0029a67:	83 ec 0c             	sub    esp,0xc
c0029a6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a6e:	e8 cd ff ff ff       	call   c0029a40 <PIC::~PIC()>
c0029a73:	83 c4 10             	add    esp,0x10
c0029a76:	83 ec 08             	sub    esp,0x8
c0029a79:	68 58 21 00 00       	push   0x2158
c0029a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a82:	e8 62 8d fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0029a87:	83 c4 10             	add    esp,0x10
c0029a8a:	83 c4 0c             	add    esp,0xc
c0029a8d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029a8e <APICTimer::~APICTimer()>:
c0029a8e:	83 ec 0c             	sub    esp,0xc
c0029a91:	ba 44 dd 02 c0       	mov    edx,0xc002dd44
c0029a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a9a:	89 10                	mov    DWORD PTR [eax],edx
c0029a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aa0:	83 ec 0c             	sub    esp,0xc
c0029aa3:	50                   	push   eax
c0029aa4:	e8 0d cd fe ff       	call   c00167b6 <Timer::~Timer()>
c0029aa9:	83 c4 10             	add    esp,0x10
c0029aac:	90                   	nop
c0029aad:	83 c4 0c             	add    esp,0xc
c0029ab0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029ab2 <APICTimer::~APICTimer()>:
c0029ab2:	83 ec 0c             	sub    esp,0xc
c0029ab5:	83 ec 0c             	sub    esp,0xc
c0029ab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029abc:	e8 cd ff ff ff       	call   c0029a8e <APICTimer::~APICTimer()>
c0029ac1:	83 c4 10             	add    esp,0x10
c0029ac4:	83 ec 08             	sub    esp,0x8
c0029ac7:	68 60 01 00 00       	push   0x160
c0029acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ad0:	e8 14 8d fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0029ad5:	83 c4 10             	add    esp,0x10
c0029ad8:	83 c4 0c             	add    esp,0xc
c0029adb:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029adc <PIT::~PIT()>:
c0029adc:	83 ec 0c             	sub    esp,0xc
c0029adf:	ba 94 dd 02 c0       	mov    edx,0xc002dd94
c0029ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ae8:	89 10                	mov    DWORD PTR [eax],edx
c0029aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aee:	83 ec 0c             	sub    esp,0xc
c0029af1:	50                   	push   eax
c0029af2:	e8 bf cc fe ff       	call   c00167b6 <Timer::~Timer()>
c0029af7:	83 c4 10             	add    esp,0x10
c0029afa:	90                   	nop
c0029afb:	83 c4 0c             	add    esp,0xc
c0029afe:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029b00 <PIT::~PIT()>:
c0029b00:	83 ec 0c             	sub    esp,0xc
c0029b03:	83 ec 0c             	sub    esp,0xc
c0029b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b0a:	e8 cd ff ff ff       	call   c0029adc <PIT::~PIT()>
c0029b0f:	83 c4 10             	add    esp,0x10
c0029b12:	83 ec 08             	sub    esp,0x8
c0029b15:	68 5c 01 00 00       	push   0x15c
c0029b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b1e:	e8 c6 8c fe ff       	call   c00127e9 <operator delete(void*, unsigned long)>
c0029b23:	83 c4 10             	add    esp,0x10
c0029b26:	83 c4 0c             	add    esp,0xc
c0029b29:	c3                   	ret    
