
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ed f3 00 00       	call   c000f40d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d3 50 02 00       	call   c00250f8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb b8 5b 02 c0       	mov    ebx,0xc0025bb8
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb c4 5b 02 c0    	cmp    ebx,0xc0025bc4
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 0c 9a 02 c0       	mov    eax,0xc0029a0c
c0000049:	3d 0c 9a 02 c0       	cmp    eax,0xc0029a0c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 0c 9a 02 c0       	push   0xc0029a0c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 0c 9a 02 c0       	mov    eax,0xc0029a0c
c0000075:	2d 0c 9a 02 c0       	sub    eax,0xc0029a0c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 0c 9a 02 c0       	push   0xc0029a0c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 3c a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a03c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb cc 5b 02 c0       	mov    ebx,0xc0025bcc
c00000bb:	81 eb c8 5b 02 c0    	sub    ebx,0xc0025bc8
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c8 5b 02 c0       	mov    esi,0xc0025bc8
c00000ca:	a1 40 a0 02 c0       	mov    eax,ds:0xc002a040
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 40 a0 02 c0       	mov    ds:0xc002a040,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 40 a0 02 c0       	mov    eax,ds:0xc002a040
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 0c 9a 02 c0       	push   0xc0029a0c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 3c a0 02 c0 01 	mov    BYTE PTR ds:0xc002a03c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 44 a0 02 c0       	push   0xc002a044
c000012c:	68 0c 9a 02 c0       	push   0xc0029a0c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	fa                   	cli    
c00002b0:	55                   	push   ebp
c00002b1:	89 e5                	mov    ebp,esp
c00002b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b6:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b9:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bc:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002bf:	25 ff ff 00 00       	and    eax,0xffff
c00002c4:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002ca:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002d0:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d6:	52                   	push   edx
c00002d7:	51                   	push   ecx
c00002d8:	68 02 02 02 00       	push   0x20202
c00002dd:	53                   	push   ebx
c00002de:	50                   	push   eax
c00002df:	cf                   	iret   

c00002e0 <goToUsermode>:
c00002e0:	fa                   	cli    
c00002e1:	55                   	push   ebp
c00002e2:	89 e5                	mov    ebp,esp
c00002e4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e7:	66 b8 23 00          	mov    ax,0x23
c00002eb:	66 8e d8             	mov    ds,ax
c00002ee:	66 8e c0             	mov    es,ax
c00002f1:	66 8e e0             	mov    fs,ax
c00002f4:	66 8e e8             	mov    gs,ax
c00002f7:	89 e0                	mov    eax,esp
c00002f9:	68 23 00 00 00       	push   0x23
c00002fe:	50                   	push   eax
c00002ff:	68 02 02 00 00       	push   0x202
c0000304:	68 1b 00 00 00       	push   0x1b
c0000309:	53                   	push   ebx
c000030a:	cf                   	iret   

c000030b <switchToThreadASMFirstTime>:
c000030b:	9c                   	pushf  
c000030c:	fa                   	cli    
c000030d:	50                   	push   eax
c000030e:	53                   	push   ebx
c000030f:	51                   	push   ecx
c0000310:	52                   	push   edx
c0000311:	56                   	push   esi
c0000312:	57                   	push   edi
c0000313:	55                   	push   ebp
c0000314:	e9 11 00 00 00       	jmp    c000032a <commonThreadSwitch>

c0000319 <switchToThreadASM>:
c0000319:	9c                   	pushf  
c000031a:	50                   	push   eax
c000031b:	53                   	push   ebx
c000031c:	51                   	push   ecx
c000031d:	52                   	push   edx
c000031e:	56                   	push   esi
c000031f:	57                   	push   edi
c0000320:	55                   	push   ebp
c0000321:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000327:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c000032a <commonThreadSwitch>:
c000032a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000334:	8b 06                	mov    eax,DWORD PTR [esi]
c0000336:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000339:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033c:	0f 20 d9             	mov    ecx,cr3
c000033f:	39 c8                	cmp    eax,ecx
c0000341:	74 03                	je     c0000346 <commonThreadSwitch.doneVAS>
c0000343:	0f 22 d8             	mov    cr3,eax

c0000346 <commonThreadSwitch.doneVAS>:
c0000346:	85 d2                	test   edx,edx
c0000348:	75 11                	jne    c000035b <commonThreadSwitch.firstTime>
c000034a:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034d:	e8 d8 b1 01 00       	call   c001b52a <changeTSS>
c0000352:	5d                   	pop    ebp
c0000353:	5f                   	pop    edi
c0000354:	5e                   	pop    esi
c0000355:	5a                   	pop    edx
c0000356:	59                   	pop    ecx
c0000357:	5b                   	pop    ebx
c0000358:	58                   	pop    eax
c0000359:	9d                   	popf   
c000035a:	c3                   	ret    

c000035b <commonThreadSwitch.firstTime>:
c000035b:	fa                   	cli    
c000035c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035f:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000364:	60                   	pusha  
c0000365:	e8 bb 1c 01 00       	call   c0012025 <mapVASFirstTime>
c000036a:	61                   	popa   
c000036b:	89 c4                	mov    esp,eax
c000036d:	56                   	push   esi
c000036e:	52                   	push   edx
c000036f:	e8 b6 b1 01 00       	call   c001b52a <changeTSS>
c0000374:	5a                   	pop    edx
c0000375:	5e                   	pop    esi
c0000376:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037d:	5d                   	pop    ebp
c000037e:	5f                   	pop    edi
c000037f:	5e                   	pop    esi
c0000380:	59                   	pop    ecx
c0000381:	59                   	pop    ecx
c0000382:	5b                   	pop    ebx
c0000383:	58                   	pop    eax
c0000384:	81 c4 04 00 00 00    	add    esp,0x4
c000038a:	6a 02                	push   0x2
c000038c:	9d                   	popf   
c000038d:	52                   	push   edx
c000038e:	e8 ac b5 01 00       	call   c001b93f <taskStartupFunction>
c0000393:	5a                   	pop    edx
c0000394:	50                   	push   eax
c0000395:	ff d2                	call   edx
c0000397:	e8 5a bb 01 00       	call   c001bef6 <taskReturned>
c000039c:	e9 fb ff ff ff       	jmp    c000039c <commonThreadSwitch.firstTime+0x41>

c00003a1 <asmQuickAcquireLock>:
c00003a1:	55                   	push   ebp
c00003a2:	89 e5                	mov    ebp,esp
c00003a4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a7 <asmQuickAcquireLock.retry>:
c00003a7:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003ac:	72 02                	jb     c00003b0 <asmQuickAcquireLock.spin_with_pause>
c00003ae:	fa                   	cli    
c00003af:	c3                   	ret    

c00003b0 <asmQuickAcquireLock.spin_with_pause>:
c00003b0:	f3 90                	pause  
c00003b2:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b8:	75 f6                	jne    c00003b0 <asmQuickAcquireLock.spin_with_pause>
c00003ba:	e9 e8 ff ff ff       	jmp    c00003a7 <asmQuickAcquireLock.retry>

c00003bf <asmQuickReleaseLock>:
c00003bf:	55                   	push   ebp
c00003c0:	89 e5                	mov    ebp,esp
c00003c2:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c9:	5d                   	pop    ebp
c00003ca:	c3                   	ret    

c00003cb <asmAcquireLock>:
c00003cb:	55                   	push   ebp
c00003cc:	89 e5                	mov    ebp,esp
c00003ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003d1 <asmAcquireLock.retry>:
c00003d1:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d6:	72 05                	jb     c00003dd <asmAcquireLock.spin_with_pause>
c00003d8:	9c                   	pushf  
c00003d9:	58                   	pop    eax
c00003da:	fa                   	cli    
c00003db:	5d                   	pop    ebp
c00003dc:	c3                   	ret    

c00003dd <asmAcquireLock.spin_with_pause>:
c00003dd:	f3 90                	pause  
c00003df:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e5:	75 f6                	jne    c00003dd <asmAcquireLock.spin_with_pause>
c00003e7:	e9 e5 ff ff ff       	jmp    c00003d1 <asmAcquireLock.retry>

c00003ec <asmReleaseLock>:
c00003ec:	55                   	push   ebp
c00003ed:	89 e5                	mov    ebp,esp
c00003ef:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003fb:	52                   	push   edx
c00003fc:	9d                   	popf   
c00003fd:	5d                   	pop    ebp
c00003fe:	c3                   	ret    

c00003ff <loadGDT>:
c00003ff:	0f 01 15 70 a4 02 c0 	lgdtd  ds:0xc002a470
c0000406:	66 b8 10 00          	mov    ax,0x10
c000040a:	66 8e d8             	mov    ds,ax
c000040d:	66 8e c0             	mov    es,ax
c0000410:	66 8e e0             	mov    fs,ax
c0000413:	66 8e e8             	mov    gs,ax
c0000416:	66 8e d0             	mov    ss,ax
c0000419:	e9 00 00 00 00       	jmp    c000041e <flush2>

c000041e <flush2>:
c000041e:	c3                   	ret    

c000041f <isr0>:
c000041f:	fa                   	cli    
c0000420:	68 00 00 00 00       	push   0x0
c0000425:	68 00 00 00 00       	push   0x0
c000042a:	e9 44 01 00 00       	jmp    c0000573 <int_common_stub>

c000042f <isr1>:
c000042f:	fa                   	cli    
c0000430:	6a 00                	push   0x0
c0000432:	6a 01                	push   0x1
c0000434:	e9 3a 01 00 00       	jmp    c0000573 <int_common_stub>

c0000439 <isr2>:
c0000439:	fa                   	cli    
c000043a:	6a 00                	push   0x0
c000043c:	6a 02                	push   0x2
c000043e:	e9 30 01 00 00       	jmp    c0000573 <int_common_stub>

c0000443 <isr3>:
c0000443:	fa                   	cli    
c0000444:	6a 00                	push   0x0
c0000446:	6a 03                	push   0x3
c0000448:	e9 26 01 00 00       	jmp    c0000573 <int_common_stub>

c000044d <isr4>:
c000044d:	fa                   	cli    
c000044e:	6a 00                	push   0x0
c0000450:	6a 04                	push   0x4
c0000452:	e9 1c 01 00 00       	jmp    c0000573 <int_common_stub>

c0000457 <isr5>:
c0000457:	fa                   	cli    
c0000458:	6a 00                	push   0x0
c000045a:	6a 05                	push   0x5
c000045c:	e9 12 01 00 00       	jmp    c0000573 <int_common_stub>

c0000461 <isr6>:
c0000461:	fa                   	cli    
c0000462:	6a 00                	push   0x0
c0000464:	6a 06                	push   0x6
c0000466:	e9 08 01 00 00       	jmp    c0000573 <int_common_stub>

c000046b <isr7>:
c000046b:	fa                   	cli    
c000046c:	6a 00                	push   0x0
c000046e:	6a 07                	push   0x7
c0000470:	e9 fe 00 00 00       	jmp    c0000573 <int_common_stub>

c0000475 <isr8>:
c0000475:	fa                   	cli    
c0000476:	6a 08                	push   0x8
c0000478:	e9 f6 00 00 00       	jmp    c0000573 <int_common_stub>

c000047d <isr9>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 09                	push   0x9
c0000482:	e9 ec 00 00 00       	jmp    c0000573 <int_common_stub>

c0000487 <isr10>:
c0000487:	fa                   	cli    
c0000488:	6a 0a                	push   0xa
c000048a:	e9 e4 00 00 00       	jmp    c0000573 <int_common_stub>

c000048f <isr11>:
c000048f:	fa                   	cli    
c0000490:	6a 0b                	push   0xb
c0000492:	e9 dc 00 00 00       	jmp    c0000573 <int_common_stub>

c0000497 <isr12>:
c0000497:	fa                   	cli    
c0000498:	6a 0c                	push   0xc
c000049a:	e9 d4 00 00 00       	jmp    c0000573 <int_common_stub>

c000049f <isr13>:
c000049f:	fa                   	cli    
c00004a0:	6a 0d                	push   0xd
c00004a2:	e9 cc 00 00 00       	jmp    c0000573 <int_common_stub>

c00004a7 <isr14>:
c00004a7:	fa                   	cli    
c00004a8:	6a 0e                	push   0xe
c00004aa:	e9 c4 00 00 00       	jmp    c0000573 <int_common_stub>

c00004af <isr15>:
c00004af:	fa                   	cli    
c00004b0:	6a 00                	push   0x0
c00004b2:	6a 0f                	push   0xf
c00004b4:	e9 ba 00 00 00       	jmp    c0000573 <int_common_stub>

c00004b9 <isr16>:
c00004b9:	fa                   	cli    
c00004ba:	6a 00                	push   0x0
c00004bc:	6a 10                	push   0x10
c00004be:	e9 b0 00 00 00       	jmp    c0000573 <int_common_stub>

c00004c3 <isr17>:
c00004c3:	fa                   	cli    
c00004c4:	6a 00                	push   0x0
c00004c6:	6a 11                	push   0x11
c00004c8:	e9 a6 00 00 00       	jmp    c0000573 <int_common_stub>

c00004cd <isr18>:
c00004cd:	fa                   	cli    
c00004ce:	6a 00                	push   0x0
c00004d0:	6a 12                	push   0x12
c00004d2:	e9 9c 00 00 00       	jmp    c0000573 <int_common_stub>

c00004d7 <irq3>:
c00004d7:	fa                   	cli    
c00004d8:	6a 00                	push   0x0
c00004da:	6a 23                	push   0x23
c00004dc:	e9 92 00 00 00       	jmp    c0000573 <int_common_stub>

c00004e1 <irq4>:
c00004e1:	fa                   	cli    
c00004e2:	6a 00                	push   0x0
c00004e4:	6a 24                	push   0x24
c00004e6:	e9 88 00 00 00       	jmp    c0000573 <int_common_stub>

c00004eb <irq5>:
c00004eb:	fa                   	cli    
c00004ec:	6a 00                	push   0x0
c00004ee:	6a 25                	push   0x25
c00004f0:	e9 7e 00 00 00       	jmp    c0000573 <int_common_stub>

c00004f5 <irq6>:
c00004f5:	fa                   	cli    
c00004f6:	6a 00                	push   0x0
c00004f8:	6a 26                	push   0x26
c00004fa:	e9 74 00 00 00       	jmp    c0000573 <int_common_stub>

c00004ff <irq7>:
c00004ff:	fa                   	cli    
c0000500:	6a 00                	push   0x0
c0000502:	6a 27                	push   0x27
c0000504:	e9 6a 00 00 00       	jmp    c0000573 <int_common_stub>

c0000509 <irq8>:
c0000509:	fa                   	cli    
c000050a:	6a 00                	push   0x0
c000050c:	6a 28                	push   0x28
c000050e:	e9 60 00 00 00       	jmp    c0000573 <int_common_stub>

c0000513 <irq9>:
c0000513:	fa                   	cli    
c0000514:	6a 00                	push   0x0
c0000516:	6a 29                	push   0x29
c0000518:	e9 56 00 00 00       	jmp    c0000573 <int_common_stub>

c000051d <irq10>:
c000051d:	fa                   	cli    
c000051e:	6a 00                	push   0x0
c0000520:	6a 2a                	push   0x2a
c0000522:	e9 4c 00 00 00       	jmp    c0000573 <int_common_stub>

c0000527 <irq11>:
c0000527:	fa                   	cli    
c0000528:	6a 00                	push   0x0
c000052a:	6a 2b                	push   0x2b
c000052c:	e9 42 00 00 00       	jmp    c0000573 <int_common_stub>

c0000531 <irq12>:
c0000531:	fa                   	cli    
c0000532:	6a 00                	push   0x0
c0000534:	6a 2c                	push   0x2c
c0000536:	e9 38 00 00 00       	jmp    c0000573 <int_common_stub>

c000053b <irq13>:
c000053b:	fa                   	cli    
c000053c:	6a 00                	push   0x0
c000053e:	6a 2d                	push   0x2d
c0000540:	e9 2e 00 00 00       	jmp    c0000573 <int_common_stub>

c0000545 <irq14>:
c0000545:	fa                   	cli    
c0000546:	6a 00                	push   0x0
c0000548:	6a 2e                	push   0x2e
c000054a:	e9 24 00 00 00       	jmp    c0000573 <int_common_stub>

c000054f <irq15>:
c000054f:	fa                   	cli    
c0000550:	6a 00                	push   0x0
c0000552:	6a 2f                	push   0x2f
c0000554:	e9 1a 00 00 00       	jmp    c0000573 <int_common_stub>

c0000559 <irq1>:
c0000559:	fa                   	cli    
c000055a:	6a 00                	push   0x0
c000055c:	6a 21                	push   0x21
c000055e:	eb 13                	jmp    c0000573 <int_common_stub>

c0000560 <irq2>:
c0000560:	fa                   	cli    
c0000561:	6a 00                	push   0x0
c0000563:	6a 22                	push   0x22
c0000565:	eb 0c                	jmp    c0000573 <int_common_stub>

c0000567 <isr96>:
c0000567:	6a 00                	push   0x0
c0000569:	6a 60                	push   0x60
c000056b:	fb                   	sti    
c000056c:	eb 05                	jmp    c0000573 <int_common_stub>

c000056e <irq0>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 20                	push   0x20

c0000573 <int_common_stub>:
c0000573:	60                   	pusha  
c0000574:	1e                   	push   ds
c0000575:	06                   	push   es
c0000576:	0f a0                	push   fs
c0000578:	0f a8                	push   gs
c000057a:	54                   	push   esp
c000057b:	e8 3d 39 01 00       	call   c0013ebd <int_handler>
c0000580:	81 c4 04 00 00 00    	add    esp,0x4
c0000586:	0f a9                	pop    gs
c0000588:	0f a1                	pop    fs
c000058a:	07                   	pop    es
c000058b:	1f                   	pop    ds
c000058c:	61                   	popa   
c000058d:	81 c4 08 00 00 00    	add    esp,0x8
c0000593:	cf                   	iret   

c0000594 <irq16>:
c0000594:	fa                   	cli    
c0000595:	6a 00                	push   0x0
c0000597:	6a 30                	push   0x30
c0000599:	e9 d5 ff ff ff       	jmp    c0000573 <int_common_stub>

c000059e <irq17>:
c000059e:	fa                   	cli    
c000059f:	6a 00                	push   0x0
c00005a1:	6a 31                	push   0x31
c00005a3:	e9 cb ff ff ff       	jmp    c0000573 <int_common_stub>

c00005a8 <irq18>:
c00005a8:	fa                   	cli    
c00005a9:	6a 00                	push   0x0
c00005ab:	6a 32                	push   0x32
c00005ad:	e9 c1 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005b2 <irq19>:
c00005b2:	fa                   	cli    
c00005b3:	6a 00                	push   0x0
c00005b5:	6a 33                	push   0x33
c00005b7:	e9 b7 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005bc <irq20>:
c00005bc:	fa                   	cli    
c00005bd:	6a 00                	push   0x0
c00005bf:	6a 34                	push   0x34
c00005c1:	e9 ad ff ff ff       	jmp    c0000573 <int_common_stub>

c00005c6 <irq21>:
c00005c6:	fa                   	cli    
c00005c7:	6a 00                	push   0x0
c00005c9:	6a 35                	push   0x35
c00005cb:	e9 a3 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005d0 <irq22>:
c00005d0:	fa                   	cli    
c00005d1:	6a 00                	push   0x0
c00005d3:	6a 36                	push   0x36
c00005d5:	e9 99 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005da <irq23>:
c00005da:	fa                   	cli    
c00005db:	6a 00                	push   0x0
c00005dd:	6a 37                	push   0x37
c00005df:	e9 8f ff ff ff       	jmp    c0000573 <int_common_stub>

c00005e4 <memcmp>:
c00005e4:	56                   	push   esi
c00005e5:	53                   	push   ebx
c00005e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005f2:	01 d6                	add    esi,edx
c00005f4:	39 f2                	cmp    edx,esi
c00005f6:	74 0e                	je     c0000606 <memcmp+0x22>
c00005f8:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00005fb:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005fe:	38 c8                	cmp    al,cl
c0000600:	75 08                	jne    c000060a <memcmp+0x26>
c0000602:	42                   	inc    edx
c0000603:	43                   	inc    ebx
c0000604:	eb ee                	jmp    c00005f4 <memcmp+0x10>
c0000606:	31 c0                	xor    eax,eax
c0000608:	eb 02                	jmp    c000060c <memcmp+0x28>
c000060a:	29 c8                	sub    eax,ecx
c000060c:	5b                   	pop    ebx
c000060d:	5e                   	pop    esi
c000060e:	c3                   	ret    

c000060f <memmove>:
c000060f:	56                   	push   esi
c0000610:	53                   	push   ebx
c0000611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000615:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000619:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000061d:	39 c8                	cmp    eax,ecx
c000061f:	73 12                	jae    c0000633 <memmove+0x24>
c0000621:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000624:	89 c3                	mov    ebx,eax
c0000626:	39 f1                	cmp    ecx,esi
c0000628:	74 1a                	je     c0000644 <memmove+0x35>
c000062a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062c:	43                   	inc    ebx
c000062d:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000630:	41                   	inc    ecx
c0000631:	eb f3                	jmp    c0000626 <memmove+0x17>
c0000633:	76 0f                	jbe    c0000644 <memmove+0x35>
c0000635:	85 d2                	test   edx,edx
c0000637:	74 0b                	je     c0000644 <memmove+0x35>
c0000639:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000063d:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000641:	4a                   	dec    edx
c0000642:	eb f1                	jmp    c0000635 <memmove+0x26>
c0000644:	5b                   	pop    ebx
c0000645:	5e                   	pop    esi
c0000646:	c3                   	ret    

c0000647 <memcpy>:
c0000647:	57                   	push   edi
c0000648:	56                   	push   esi
c0000649:	53                   	push   ebx
c000064a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000064e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000652:	89 da                	mov    edx,ebx
c0000654:	89 d9                	mov    ecx,ebx
c0000656:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065a:	83 e2 fc             	and    edx,0xfffffffc
c000065d:	c1 e9 02             	shr    ecx,0x2
c0000660:	89 c7                	mov    edi,eax
c0000662:	fc                   	cld    
c0000663:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000665:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000668:	01 c2                	add    edx,eax
c000066a:	01 de                	add    esi,ebx
c000066c:	39 f1                	cmp    ecx,esi
c000066e:	74 09                	je     c0000679 <memcpy+0x32>
c0000670:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000672:	42                   	inc    edx
c0000673:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000676:	41                   	inc    ecx
c0000677:	eb f3                	jmp    c000066c <memcpy+0x25>
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	5f                   	pop    edi
c000067c:	c3                   	ret    

c000067d <memset>:
c000067d:	53                   	push   ebx
c000067e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000682:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000686:	89 c2                	mov    edx,eax
c0000688:	01 c1                	add    ecx,eax
c000068a:	39 ca                	cmp    edx,ecx
c000068c:	74 0a                	je     c0000698 <memset+0x1b>
c000068e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0000692:	42                   	inc    edx
c0000693:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000696:	eb f2                	jmp    c000068a <memset+0xd>
c0000698:	5b                   	pop    ebx
c0000699:	c3                   	ret    

c000069a <strlen>:
c000069a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069e:	31 c0                	xor    eax,eax
c00006a0:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a4:	74 03                	je     c00006a9 <strlen+0xf>
c00006a6:	40                   	inc    eax
c00006a7:	eb f7                	jmp    c00006a0 <strlen+0x6>
c00006a9:	c3                   	ret    

c00006aa <strpbrk>:
c00006aa:	53                   	push   ebx
c00006ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006af:	8a 08                	mov    cl,BYTE PTR [eax]
c00006b1:	84 c9                	test   cl,cl
c00006b3:	74 14                	je     c00006c9 <strpbrk+0x1f>
c00006b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006b9:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006bb:	84 db                	test   bl,bl
c00006bd:	74 07                	je     c00006c6 <strpbrk+0x1c>
c00006bf:	38 cb                	cmp    bl,cl
c00006c1:	74 08                	je     c00006cb <strpbrk+0x21>
c00006c3:	42                   	inc    edx
c00006c4:	eb f3                	jmp    c00006b9 <strpbrk+0xf>
c00006c6:	40                   	inc    eax
c00006c7:	eb e6                	jmp    c00006af <strpbrk+0x5>
c00006c9:	31 c0                	xor    eax,eax
c00006cb:	5b                   	pop    ebx
c00006cc:	c3                   	ret    

c00006cd <strtok>:
c00006cd:	56                   	push   esi
c00006ce:	53                   	push   ebx
c00006cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d7:	85 db                	test   ebx,ebx
c00006d9:	75 0e                	jne    c00006e9 <strtok+0x1c>
c00006db:	8b 1d 5c a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a05c
c00006e1:	85 db                	test   ebx,ebx
c00006e3:	75 04                	jne    c00006e9 <strtok+0x1c>
c00006e5:	31 db                	xor    ebx,ebx
c00006e7:	eb 2e                	jmp    c0000717 <strtok+0x4a>
c00006e9:	56                   	push   esi
c00006ea:	53                   	push   ebx
c00006eb:	e8 ba ff ff ff       	call   c00006aa <strpbrk>
c00006f0:	5a                   	pop    edx
c00006f1:	a3 5c a0 02 c0       	mov    ds:0xc002a05c,eax
c00006f6:	59                   	pop    ecx
c00006f7:	a1 5c a0 02 c0       	mov    eax,ds:0xc002a05c
c00006fc:	39 d8                	cmp    eax,ebx
c00006fe:	75 07                	jne    c0000707 <strtok+0x3a>
c0000700:	43                   	inc    ebx
c0000701:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000705:	eb e2                	jmp    c00006e9 <strtok+0x1c>
c0000707:	85 c0                	test   eax,eax
c0000709:	74 da                	je     c00006e5 <strtok+0x18>
c000070b:	8d 50 01             	lea    edx,[eax+0x1]
c000070e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000711:	89 15 5c a0 02 c0    	mov    DWORD PTR ds:0xc002a05c,edx
c0000717:	89 d8                	mov    eax,ebx
c0000719:	5b                   	pop    ebx
c000071a:	5e                   	pop    esi
c000071b:	c3                   	ret    

c000071c <strcpy>:
c000071c:	53                   	push   ebx
c000071d:	31 d2                	xor    edx,edx
c000071f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000723:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000727:	8d 1c 10             	lea    ebx,[eax+edx*1]
c000072a:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000072d:	84 c9                	test   cl,cl
c000072f:	74 06                	je     c0000737 <strcpy+0x1b>
c0000731:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000734:	42                   	inc    edx
c0000735:	eb ec                	jmp    c0000723 <strcpy+0x7>
c0000737:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000073a:	5b                   	pop    ebx
c000073b:	c3                   	ret    

c000073c <strncpy>:
c000073c:	56                   	push   esi
c000073d:	53                   	push   ebx
c000073e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000742:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000746:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000074a:	89 c3                	mov    ebx,eax
c000074c:	85 c9                	test   ecx,ecx
c000074e:	74 1a                	je     c000076a <strncpy+0x2e>
c0000750:	46                   	inc    esi
c0000751:	43                   	inc    ebx
c0000752:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000755:	49                   	dec    ecx
c0000756:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000759:	84 d2                	test   dl,dl
c000075b:	75 ef                	jne    c000074c <strncpy+0x10>
c000075d:	31 d2                	xor    edx,edx
c000075f:	39 d1                	cmp    ecx,edx
c0000761:	74 07                	je     c000076a <strncpy+0x2e>
c0000763:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000767:	42                   	inc    edx
c0000768:	eb f5                	jmp    c000075f <strncpy+0x23>
c000076a:	5b                   	pop    ebx
c000076b:	5e                   	pop    esi
c000076c:	c3                   	ret    

c000076d <strcmp>:
c000076d:	31 c9                	xor    ecx,ecx
c000076f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000773:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000777:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000077b:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000077f:	38 d0                	cmp    al,dl
c0000781:	75 08                	jne    c000078b <strcmp+0x1e>
c0000783:	41                   	inc    ecx
c0000784:	84 c0                	test   al,al
c0000786:	75 e7                	jne    c000076f <strcmp+0x2>
c0000788:	31 c0                	xor    eax,eax
c000078a:	c3                   	ret    
c000078b:	29 d0                	sub    eax,edx
c000078d:	c3                   	ret    

c000078e <strchr>:
c000078e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000792:	8a 10                	mov    dl,BYTE PTR [eax]
c0000794:	84 d2                	test   dl,dl
c0000796:	74 09                	je     c00007a1 <strchr+0x13>
c0000798:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c000079c:	74 05                	je     c00007a3 <strchr+0x15>
c000079e:	40                   	inc    eax
c000079f:	eb f1                	jmp    c0000792 <strchr+0x4>
c00007a1:	31 c0                	xor    eax,eax
c00007a3:	c3                   	ret    

c00007a4 <strncmp>:
c00007a4:	56                   	push   esi
c00007a5:	53                   	push   ebx
c00007a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007b2:	01 d6                	add    esi,edx
c00007b4:	39 f2                	cmp    edx,esi
c00007b6:	74 12                	je     c00007ca <strncmp+0x26>
c00007b8:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007bb:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007be:	38 c8                	cmp    al,cl
c00007c0:	75 0c                	jne    c00007ce <strncmp+0x2a>
c00007c2:	42                   	inc    edx
c00007c3:	84 c0                	test   al,al
c00007c5:	74 03                	je     c00007ca <strncmp+0x26>
c00007c7:	43                   	inc    ebx
c00007c8:	eb ea                	jmp    c00007b4 <strncmp+0x10>
c00007ca:	31 c0                	xor    eax,eax
c00007cc:	eb 02                	jmp    c00007d0 <strncmp+0x2c>
c00007ce:	29 c8                	sub    eax,ecx
c00007d0:	5b                   	pop    ebx
c00007d1:	5e                   	pop    esi
c00007d2:	c3                   	ret    

c00007d3 <strcat>:
c00007d3:	53                   	push   ebx
c00007d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d8:	89 c1                	mov    ecx,eax
c00007da:	8d 51 01             	lea    edx,[ecx+0x1]
c00007dd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007e1:	74 04                	je     c00007e7 <strcat+0x14>
c00007e3:	89 d1                	mov    ecx,edx
c00007e5:	eb f3                	jmp    c00007da <strcat+0x7>
c00007e7:	31 d2                	xor    edx,edx
c00007e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ed:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007f0:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c00007f3:	42                   	inc    edx
c00007f4:	84 db                	test   bl,bl
c00007f6:	75 f1                	jne    c00007e9 <strcat+0x16>
c00007f8:	5b                   	pop    ebx
c00007f9:	c3                   	ret    

c00007fa <strncat>:
c00007fa:	56                   	push   esi
c00007fb:	53                   	push   ebx
c00007fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000800:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000804:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000808:	89 c2                	mov    edx,eax
c000080a:	85 db                	test   ebx,ebx
c000080c:	74 23                	je     c0000831 <strncat+0x37>
c000080e:	8d 72 01             	lea    esi,[edx+0x1]
c0000811:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000815:	74 04                	je     c000081b <strncat+0x21>
c0000817:	89 f2                	mov    edx,esi
c0000819:	eb f3                	jmp    c000080e <strncat+0x14>
c000081b:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000081e:	41                   	inc    ecx
c000081f:	42                   	inc    edx
c0000820:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000823:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000826:	84 db                	test   bl,bl
c0000828:	74 07                	je     c0000831 <strncat+0x37>
c000082a:	39 f1                	cmp    ecx,esi
c000082c:	75 f0                	jne    c000081e <strncat+0x24>
c000082e:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000831:	5b                   	pop    ebx
c0000832:	5e                   	pop    esi
c0000833:	c3                   	ret    

c0000834 <strstr>:
c0000834:	57                   	push   edi
c0000835:	56                   	push   esi
c0000836:	53                   	push   ebx
c0000837:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000083b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000083f:	57                   	push   edi
c0000840:	e8 55 fe ff ff       	call   c000069a <strlen>
c0000845:	59                   	pop    ecx
c0000846:	89 c6                	mov    esi,eax
c0000848:	85 c0                	test   eax,eax
c000084a:	74 1f                	je     c000086b <strstr+0x37>
c000084c:	53                   	push   ebx
c000084d:	e8 48 fe ff ff       	call   c000069a <strlen>
c0000852:	5a                   	pop    edx
c0000853:	39 f0                	cmp    eax,esi
c0000855:	72 12                	jb     c0000869 <strstr+0x35>
c0000857:	56                   	push   esi
c0000858:	57                   	push   edi
c0000859:	53                   	push   ebx
c000085a:	e8 85 fd ff ff       	call   c00005e4 <memcmp>
c000085f:	83 c4 0c             	add    esp,0xc
c0000862:	85 c0                	test   eax,eax
c0000864:	74 05                	je     c000086b <strstr+0x37>
c0000866:	43                   	inc    ebx
c0000867:	eb e3                	jmp    c000084c <strstr+0x18>
c0000869:	31 db                	xor    ebx,ebx
c000086b:	89 d8                	mov    eax,ebx
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    

c0000871 <toupper>:
c0000871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000875:	0f b6 d0             	movzx  edx,al
c0000878:	f6 82 e0 5b 02 c0 02 	test   BYTE PTR [edx-0x3ffda420],0x2
c000087f:	74 03                	je     c0000884 <toupper+0x13>
c0000881:	83 e8 20             	sub    eax,0x20
c0000884:	c3                   	ret    

c0000885 <tolower>:
c0000885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000889:	0f b6 d0             	movzx  edx,al
c000088c:	f6 82 e0 5b 02 c0 01 	test   BYTE PTR [edx-0x3ffda420],0x1
c0000893:	74 03                	je     c0000898 <tolower+0x13>
c0000895:	83 c0 20             	add    eax,0x20
c0000898:	c3                   	ret    

c0000899 <simple_strtoul>:
c0000899:	55                   	push   ebp
c000089a:	57                   	push   edi
c000089b:	56                   	push   esi
c000089c:	53                   	push   ebx
c000089d:	83 ec 08             	sub    esp,0x8
c00008a0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008a4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008a8:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008ab:	f6 82 e0 5b 02 c0 08 	test   BYTE PTR [edx-0x3ffda420],0x8
c00008b2:	74 03                	je     c00008b7 <simple_strtoul+0x1e>
c00008b4:	41                   	inc    ecx
c00008b5:	eb f1                	jmp    c00008a8 <simple_strtoul+0xf>
c00008b7:	80 fa 09             	cmp    dl,0x9
c00008ba:	74 f8                	je     c00008b4 <simple_strtoul+0x1b>
c00008bc:	80 fa 2d             	cmp    dl,0x2d
c00008bf:	75 0b                	jne    c00008cc <simple_strtoul+0x33>
c00008c1:	41                   	inc    ecx
c00008c2:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008ca:	eb 0e                	jmp    c00008da <simple_strtoul+0x41>
c00008cc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008d4:	80 fa 2b             	cmp    dl,0x2b
c00008d7:	75 01                	jne    c00008da <simple_strtoul+0x41>
c00008d9:	41                   	inc    ecx
c00008da:	85 f6                	test   esi,esi
c00008dc:	75 22                	jne    c0000900 <simple_strtoul+0x67>
c00008de:	be 0a 00 00 00       	mov    esi,0xa
c00008e3:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008e6:	75 5a                	jne    c0000942 <simple_strtoul+0xa9>
c00008e8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008ec:	50                   	push   eax
c00008ed:	e8 93 ff ff ff       	call   c0000885 <tolower>
c00008f2:	5a                   	pop    edx
c00008f3:	83 f8 78             	cmp    eax,0x78
c00008f6:	74 03                	je     c00008fb <simple_strtoul+0x62>
c00008f8:	41                   	inc    ecx
c00008f9:	eb 16                	jmp    c0000911 <simple_strtoul+0x78>
c00008fb:	83 c1 02             	add    ecx,0x2
c00008fe:	eb 22                	jmp    c0000922 <simple_strtoul+0x89>
c0000900:	8d 46 fe             	lea    eax,[esi-0x2]
c0000903:	83 f8 22             	cmp    eax,0x22
c0000906:	0f 87 b7 00 00 00    	ja     c00009c3 <simple_strtoul+0x12a>
c000090c:	83 fe 08             	cmp    esi,0x8
c000090f:	75 0c                	jne    c000091d <simple_strtoul+0x84>
c0000911:	be 08 00 00 00       	mov    esi,0x8
c0000916:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000919:	75 27                	jne    c0000942 <simple_strtoul+0xa9>
c000091b:	eb 1f                	jmp    c000093c <simple_strtoul+0xa3>
c000091d:	83 fe 10             	cmp    esi,0x10
c0000920:	75 20                	jne    c0000942 <simple_strtoul+0xa9>
c0000922:	be 10 00 00 00       	mov    esi,0x10
c0000927:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092a:	75 16                	jne    c0000942 <simple_strtoul+0xa9>
c000092c:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000930:	50                   	push   eax
c0000931:	e8 4f ff ff ff       	call   c0000885 <tolower>
c0000936:	5d                   	pop    ebp
c0000937:	83 f8 78             	cmp    eax,0x78
c000093a:	74 03                	je     c000093f <simple_strtoul+0xa6>
c000093c:	41                   	inc    ecx
c000093d:	eb 03                	jmp    c0000942 <simple_strtoul+0xa9>
c000093f:	83 c1 02             	add    ecx,0x2
c0000942:	31 ed                	xor    ebp,ebp
c0000944:	31 db                	xor    ebx,ebx
c0000946:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000094d:	8a 11                	mov    dl,BYTE PTR [ecx]
c000094f:	84 d2                	test   dl,dl
c0000951:	74 27                	je     c000097a <simple_strtoul+0xe1>
c0000953:	0f b6 fa             	movzx  edi,dl
c0000956:	f6 87 e0 5b 02 c0 04 	test   BYTE PTR [edi-0x3ffda420],0x4
c000095d:	74 05                	je     c0000964 <simple_strtoul+0xcb>
c000095f:	83 ef 30             	sub    edi,0x30
c0000962:	eb 22                	jmp    c0000986 <simple_strtoul+0xed>
c0000964:	0f be d2             	movsx  edx,dl
c0000967:	52                   	push   edx
c0000968:	e8 04 ff ff ff       	call   c0000871 <toupper>
c000096d:	5f                   	pop    edi
c000096e:	0f b6 d0             	movzx  edx,al
c0000971:	f6 82 e0 5b 02 c0 01 	test   BYTE PTR [edx-0x3ffda420],0x1
c0000978:	75 09                	jne    c0000983 <simple_strtoul+0xea>
c000097a:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000097f:	75 2d                	jne    c00009ae <simple_strtoul+0x115>
c0000981:	eb 57                	jmp    c00009da <simple_strtoul+0x141>
c0000983:	8d 78 c9             	lea    edi,[eax-0x37]
c0000986:	39 f7                	cmp    edi,esi
c0000988:	73 f0                	jae    c000097a <simple_strtoul+0xe1>
c000098a:	31 d2                	xor    edx,edx
c000098c:	89 f8                	mov    eax,edi
c000098e:	f7 d0                	not    eax
c0000990:	f7 f6                	div    esi
c0000992:	39 d8                	cmp    eax,ebx
c0000994:	72 0e                	jb     c00009a4 <simple_strtoul+0x10b>
c0000996:	0f af de             	imul   ebx,esi
c0000999:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009a0:	01 fb                	add    ebx,edi
c00009a2:	eb 07                	jmp    c00009ab <simple_strtoul+0x112>
c00009a4:	bd 01 00 00 00       	mov    ebp,0x1
c00009a9:	31 db                	xor    ebx,ebx
c00009ab:	41                   	inc    ecx
c00009ac:	eb 9f                	jmp    c000094d <simple_strtoul+0xb4>
c00009ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009b1:	09 d8                	or     eax,ebx
c00009b3:	75 1f                	jne    c00009d4 <simple_strtoul+0x13b>
c00009b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009b9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009bd:	31 db                	xor    ebx,ebx
c00009bf:	89 38                	mov    DWORD PTR [eax],edi
c00009c1:	eb 17                	jmp    c00009da <simple_strtoul+0x141>
c00009c3:	31 db                	xor    ebx,ebx
c00009c5:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009ca:	74 14                	je     c00009e0 <simple_strtoul+0x147>
c00009cc:	31 ed                	xor    ebp,ebp
c00009ce:	85 c9                	test   ecx,ecx
c00009d0:	75 e3                	jne    c00009b5 <simple_strtoul+0x11c>
c00009d2:	31 db                	xor    ebx,ebx
c00009d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d8:	89 08                	mov    DWORD PTR [eax],ecx
c00009da:	4d                   	dec    ebp
c00009db:	75 03                	jne    c00009e0 <simple_strtoul+0x147>
c00009dd:	83 cb ff             	or     ebx,0xffffffff
c00009e0:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009e5:	75 02                	jne    c00009e9 <simple_strtoul+0x150>
c00009e7:	f7 db                	neg    ebx
c00009e9:	83 c4 08             	add    esp,0x8
c00009ec:	89 d8                	mov    eax,ebx
c00009ee:	5b                   	pop    ebx
c00009ef:	5e                   	pop    esi
c00009f0:	5f                   	pop    edi
c00009f1:	5d                   	pop    ebp
c00009f2:	c3                   	ret    

c00009f3 <largebin_index>:
c00009f3:	89 c2                	mov    edx,eax
c00009f5:	c1 ea 08             	shr    edx,0x8
c00009f8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00009fe:	77 10                	ja     c0000a10 <largebin_index+0x1d>
c0000a00:	0f bd d2             	bsr    edx,edx
c0000a03:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a06:	d3 e8                	shr    eax,cl
c0000a08:	83 e0 03             	and    eax,0x3
c0000a0b:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a0f:	c3                   	ret    
c0000a10:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a15:	c3                   	ret    

c0000a16 <malloc_init_state>:
c0000a16:	53                   	push   ebx
c0000a17:	8d 50 34             	lea    edx,[eax+0x34]
c0000a1a:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a20:	89 d1                	mov    ecx,edx
c0000a22:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a25:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a28:	83 c2 08             	add    edx,0x8
c0000a2b:	39 da                	cmp    edx,ebx
c0000a2d:	75 f3                	jne    c0000a22 <malloc_init_state+0xc>
c0000a2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a31:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a3b:	83 e2 03             	and    edx,0x3
c0000a3e:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a48:	83 ca 48             	or     edx,0x48
c0000a4b:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a55:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a5f:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a66:	89 10                	mov    DWORD PTR [eax],edx
c0000a68:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a6b:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a75:	5b                   	pop    ebx
c0000a76:	c3                   	ret    

c0000a77 <malloc_consolidate>:
c0000a77:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a79:	85 d2                	test   edx,edx
c0000a7b:	0f 84 d8 00 00 00    	je     c0000b59 <malloc_consolidate+0xe2>
c0000a81:	55                   	push   ebp
c0000a82:	83 e2 fd             	and    edx,0xfffffffd
c0000a85:	57                   	push   edi
c0000a86:	89 c5                	mov    ebp,eax
c0000a88:	56                   	push   esi
c0000a89:	8d 78 34             	lea    edi,[eax+0x34]
c0000a8c:	53                   	push   ebx
c0000a8d:	83 ec 10             	sub    esp,0x10
c0000a90:	89 10                	mov    DWORD PTR [eax],edx
c0000a92:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a96:	c1 ea 03             	shr    edx,0x3
c0000a99:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a9d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aa1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	0f 84 98 00 00 00    	je     c0000b44 <malloc_consolidate+0xcd>
c0000aac:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ab3:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ab6:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ab9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000abd:	89 f9                	mov    ecx,edi
c0000abf:	83 e1 fe             	and    ecx,0xfffffffe
c0000ac2:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ac5:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ac8:	83 e3 fc             	and    ebx,0xfffffffc
c0000acb:	83 e7 01             	and    edi,0x1
c0000ace:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000ad1:	75 14                	jne    c0000ae7 <malloc_consolidate+0x70>
c0000ad3:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ad5:	29 fa                	sub    edx,edi
c0000ad7:	01 f9                	add    ecx,edi
c0000ad9:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000adc:	89 fb                	mov    ebx,edi
c0000ade:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000ae1:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000ae4:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000ae7:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000aea:	74 40                	je     c0000b2c <malloc_consolidate+0xb5>
c0000aec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000aef:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000af2:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000af6:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000af9:	83 e7 01             	and    edi,0x1
c0000afc:	75 0e                	jne    c0000b0c <malloc_consolidate+0x95>
c0000afe:	01 d9                	add    ecx,ebx
c0000b00:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b03:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b06:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b09:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b0c:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b0f:	89 ce                	mov    esi,ecx
c0000b11:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b14:	83 ce 01             	or     esi,0x1
c0000b17:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b1a:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b1d:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b20:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b24:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b27:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b2a:	eb 0c                	jmp    c0000b38 <malloc_consolidate+0xc1>
c0000b2c:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b2f:	83 c9 01             	or     ecx,0x1
c0000b32:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b35:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b3c:	85 d2                	test   edx,edx
c0000b3e:	0f 85 6f ff ff ff    	jne    c0000ab3 <malloc_consolidate+0x3c>
c0000b44:	83 c5 04             	add    ebp,0x4
c0000b47:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b4b:	0f 85 50 ff ff ff    	jne    c0000aa1 <malloc_consolidate+0x2a>
c0000b51:	83 c4 10             	add    esp,0x10
c0000b54:	5b                   	pop    ebx
c0000b55:	5e                   	pop    esi
c0000b56:	5f                   	pop    edi
c0000b57:	5d                   	pop    ebp
c0000b58:	c3                   	ret    
c0000b59:	e9 b8 fe ff ff       	jmp    c0000a16 <malloc_init_state>

c0000b5e <dlfree>:
c0000b5e:	57                   	push   edi
c0000b5f:	56                   	push   esi
c0000b60:	53                   	push   ebx
c0000b61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b65:	85 db                	test   ebx,ebx
c0000b67:	0f 84 e2 00 00 00    	je     c0000c4f <dlfree+0xf1>
c0000b6d:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b70:	8b 0d 60 a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a060
c0000b76:	89 f0                	mov    eax,esi
c0000b78:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b7b:	83 e0 fc             	and    eax,0xfffffffc
c0000b7e:	39 c1                	cmp    ecx,eax
c0000b80:	72 24                	jb     c0000ba6 <dlfree+0x48>
c0000b82:	83 c9 03             	or     ecx,0x3
c0000b85:	c1 e8 03             	shr    eax,0x3
c0000b88:	89 0d 60 a0 02 c0    	mov    DWORD PTR ds:0xc002a060,ecx
c0000b8e:	83 e8 02             	sub    eax,0x2
c0000b91:	8b 0c 85 64 a0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5f9c]
c0000b98:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b9a:	89 14 85 64 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f9c],edx
c0000ba1:	e9 a9 00 00 00       	jmp    c0000c4f <dlfree+0xf1>
c0000ba6:	83 e6 02             	and    esi,0x2
c0000ba9:	0f 85 a0 00 00 00    	jne    c0000c4f <dlfree+0xf1>
c0000baf:	83 c9 01             	or     ecx,0x1
c0000bb2:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bb5:	89 0d 60 a0 02 c0    	mov    DWORD PTR ds:0xc002a060,ecx
c0000bbb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bbe:	83 e1 fc             	and    ecx,0xfffffffc
c0000bc1:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bc5:	75 13                	jne    c0000bda <dlfree+0x7c>
c0000bc7:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bca:	29 da                	sub    edx,ebx
c0000bcc:	01 d8                	add    eax,ebx
c0000bce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bd1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000bd4:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bd7:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bda:	39 35 8c a0 02 c0    	cmp    DWORD PTR ds:0xc002a08c,esi
c0000be0:	74 40                	je     c0000c22 <dlfree+0xc4>
c0000be2:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000be6:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000be9:	80 e3 01             	and    bl,0x1
c0000bec:	75 0e                	jne    c0000bfc <dlfree+0x9e>
c0000bee:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bf1:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000bf4:	01 c8                	add    eax,ecx
c0000bf6:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bf9:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bfc:	8b 0d 9c a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a09c
c0000c02:	c7 42 0c 94 a0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002a094
c0000c09:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c0c:	89 15 9c a0 02 c0    	mov    DWORD PTR ds:0xc002a09c,edx
c0000c12:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c15:	89 c1                	mov    ecx,eax
c0000c17:	83 c9 01             	or     ecx,0x1
c0000c1a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c1d:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c20:	eb 10                	jmp    c0000c32 <dlfree+0xd4>
c0000c22:	01 c8                	add    eax,ecx
c0000c24:	89 c1                	mov    ecx,eax
c0000c26:	83 c9 01             	or     ecx,0x1
c0000c29:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2c:	89 15 8c a0 02 c0    	mov    DWORD PTR ds:0xc002a08c,edx
c0000c32:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c37:	76 16                	jbe    c0000c4f <dlfree+0xf1>
c0000c39:	f6 05 60 a0 02 c0 02 	test   BYTE PTR ds:0xc002a060,0x2
c0000c40:	74 0d                	je     c0000c4f <dlfree+0xf1>
c0000c42:	5b                   	pop    ebx
c0000c43:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c0000c48:	5e                   	pop    esi
c0000c49:	5f                   	pop    edi
c0000c4a:	e9 28 fe ff ff       	jmp    c0000a77 <malloc_consolidate>
c0000c4f:	5b                   	pop    ebx
c0000c50:	5e                   	pop    esi
c0000c51:	5f                   	pop    edi
c0000c52:	c3                   	ret    

c0000c53 <sYSMALLOc>:
c0000c53:	55                   	push   ebp
c0000c54:	57                   	push   edi
c0000c55:	56                   	push   esi
c0000c56:	53                   	push   ebx
c0000c57:	89 d3                	mov    ebx,edx
c0000c59:	83 ec 2c             	sub    esp,0x2c
c0000c5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c60:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c66:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c69:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c70:	74 1f                	je     c0000c91 <sYSMALLOc+0x3e>
c0000c72:	89 d8                	mov    eax,ebx
c0000c74:	e8 fe fd ff ff       	call   c0000a77 <malloc_consolidate>
c0000c79:	83 ec 0c             	sub    esp,0xc
c0000c7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c80:	83 e8 07             	sub    eax,0x7
c0000c83:	50                   	push   eax
c0000c84:	e8 30 02 00 00       	call   c0000eb9 <dlmalloc>
c0000c89:	83 c4 10             	add    esp,0x10
c0000c8c:	e9 20 02 00 00       	jmp    c0000eb1 <sYSMALLOc+0x25e>
c0000c91:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c94:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c9a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c9d:	83 e0 fc             	and    eax,0xfffffffc
c0000ca0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ca4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ca8:	83 c0 10             	add    eax,0x10
c0000cab:	01 c1                	add    ecx,eax
c0000cad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cb1:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cb8:	74 04                	je     c0000cbe <sYSMALLOc+0x6b>
c0000cba:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000cbe:	f7 da                	neg    edx
c0000cc0:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cc4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cc8:	21 d1                	and    ecx,edx
c0000cca:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cce:	7f 07                	jg     c0000cd7 <sYSMALLOc+0x84>
c0000cd0:	31 c0                	xor    eax,eax
c0000cd2:	e9 da 01 00 00       	jmp    c0000eb1 <sYSMALLOc+0x25e>
c0000cd7:	83 ec 0c             	sub    esp,0xc
c0000cda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cde:	e8 92 e2 00 00       	call   c000ef75 <sbrk>
c0000ce3:	83 c4 10             	add    esp,0x10
c0000ce6:	89 c6                	mov    esi,eax
c0000ce8:	83 f8 ff             	cmp    eax,0xffffffff
c0000ceb:	74 e3                	je     c0000cd0 <sYSMALLOc+0x7d>
c0000ced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cf1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000cf5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000cf8:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000cfe:	39 f1                	cmp    ecx,esi
c0000d00:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d06:	75 13                	jne    c0000d1b <sYSMALLOc+0xc8>
c0000d08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d0c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d10:	83 c8 01             	or     eax,0x1
c0000d13:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d16:	e9 3e 01 00 00       	jmp    c0000e59 <sYSMALLOc+0x206>
c0000d1b:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d21:	88 d0                	mov    al,dl
c0000d23:	83 e0 01             	and    eax,0x1
c0000d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d2b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d2f:	0f 95 c0             	setne  al
c0000d32:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d36:	39 f1                	cmp    ecx,esi
c0000d38:	76 12                	jbe    c0000d4c <sYSMALLOc+0xf9>
c0000d3a:	84 c0                	test   al,al
c0000d3c:	74 0e                	je     c0000d4c <sYSMALLOc+0xf9>
c0000d3e:	83 e2 fe             	and    edx,0xfffffffe
c0000d41:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d47:	e9 83 00 00 00       	jmp    c0000dcf <sYSMALLOc+0x17c>
c0000d4c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d51:	74 7c                	je     c0000dcf <sYSMALLOc+0x17c>
c0000d53:	84 c0                	test   al,al
c0000d55:	74 0c                	je     c0000d63 <sYSMALLOc+0x110>
c0000d57:	89 f0                	mov    eax,esi
c0000d59:	29 c8                	sub    eax,ecx
c0000d5b:	01 e8                	add    eax,ebp
c0000d5d:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d63:	89 f2                	mov    edx,esi
c0000d65:	83 e2 07             	and    edx,0x7
c0000d68:	74 0c                	je     c0000d76 <sYSMALLOc+0x123>
c0000d6a:	b8 08 00 00 00       	mov    eax,0x8
c0000d6f:	29 d0                	sub    eax,edx
c0000d71:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d74:	eb 04                	jmp    c0000d7a <sYSMALLOc+0x127>
c0000d76:	89 f5                	mov    ebp,esi
c0000d78:	31 c0                	xor    eax,eax
c0000d7a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d86:	01 c1                	add    ecx,eax
c0000d88:	83 ec 0c             	sub    esp,0xc
c0000d8b:	01 f1                	add    ecx,esi
c0000d8d:	01 ca                	add    edx,ecx
c0000d8f:	29 c8                	sub    eax,ecx
c0000d91:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d95:	01 c2                	add    edx,eax
c0000d97:	52                   	push   edx
c0000d98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d9c:	e8 d4 e1 00 00       	call   c000ef75 <sbrk>
c0000da1:	83 c4 10             	add    esp,0x10
c0000da4:	83 f8 ff             	cmp    eax,0xffffffff
c0000da7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dab:	75 0f                	jne    c0000dbc <sYSMALLOc+0x169>
c0000dad:	83 ec 0c             	sub    esp,0xc
c0000db0:	6a 00                	push   0x0
c0000db2:	e8 be e1 00 00       	call   c000ef75 <sbrk>
c0000db7:	83 c4 10             	add    esp,0x10
c0000dba:	eb 30                	jmp    c0000dec <sYSMALLOc+0x199>
c0000dbc:	39 c6                	cmp    esi,eax
c0000dbe:	76 33                	jbe    c0000df3 <sYSMALLOc+0x1a0>
c0000dc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dc4:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dcb:	01 f0                	add    eax,esi
c0000dcd:	eb 1d                	jmp    c0000dec <sYSMALLOc+0x199>
c0000dcf:	83 ec 0c             	sub    esp,0xc
c0000dd2:	89 f5                	mov    ebp,esi
c0000dd4:	6a 00                	push   0x0
c0000dd6:	e8 9a e1 00 00       	call   c000ef75 <sbrk>
c0000ddb:	89 c2                	mov    edx,eax
c0000ddd:	29 f2                	sub    edx,esi
c0000ddf:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000de3:	83 c4 10             	add    esp,0x10
c0000de6:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dec:	31 d2                	xor    edx,edx
c0000dee:	83 f8 ff             	cmp    eax,0xffffffff
c0000df1:	74 66                	je     c0000e59 <sYSMALLOc+0x206>
c0000df3:	29 e8                	sub    eax,ebp
c0000df5:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000df8:	01 d0                	add    eax,edx
c0000dfa:	83 c8 01             	or     eax,0x1
c0000dfd:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e00:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e06:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e0b:	74 4c                	je     c0000e59 <sYSMALLOc+0x206>
c0000e0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e11:	83 e8 0c             	sub    eax,0xc
c0000e14:	83 e0 f8             	and    eax,0xfffffff8
c0000e17:	89 c2                	mov    edx,eax
c0000e19:	83 ca 01             	or     edx,0x1
c0000e1c:	83 f8 0f             	cmp    eax,0xf
c0000e1f:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e22:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e2a:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e32:	76 25                	jbe    c0000e59 <sYSMALLOc+0x206>
c0000e34:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e3a:	83 ec 0c             	sub    esp,0xc
c0000e3d:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e47:	83 c7 08             	add    edi,0x8
c0000e4a:	57                   	push   edi
c0000e4b:	e8 0e fd ff ff       	call   c0000b5e <dlfree>
c0000e50:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e56:	83 c4 10             	add    esp,0x10
c0000e59:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e5f:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e65:	73 06                	jae    c0000e6d <sYSMALLOc+0x21a>
c0000e67:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e6d:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e73:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e79:	73 06                	jae    c0000e81 <sYSMALLOc+0x22e>
c0000e7b:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e81:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e84:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e87:	83 e2 fc             	and    edx,0xfffffffc
c0000e8a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e8e:	0f 82 3c fe ff ff    	jb     c0000cd0 <sYSMALLOc+0x7d>
c0000e94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e98:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e9b:	29 fa                	sub    edx,edi
c0000e9d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ea0:	83 ca 01             	or     edx,0x1
c0000ea3:	89 fb                	mov    ebx,edi
c0000ea5:	83 c0 08             	add    eax,0x8
c0000ea8:	83 cb 01             	or     ebx,0x1
c0000eab:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000eae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000eb1:	83 c4 2c             	add    esp,0x2c
c0000eb4:	5b                   	pop    ebx
c0000eb5:	5e                   	pop    esi
c0000eb6:	5f                   	pop    edi
c0000eb7:	5d                   	pop    ebp
c0000eb8:	c3                   	ret    

c0000eb9 <dlmalloc>:
c0000eb9:	55                   	push   ebp
c0000eba:	57                   	push   edi
c0000ebb:	56                   	push   esi
c0000ebc:	53                   	push   ebx
c0000ebd:	83 ec 1c             	sub    esp,0x1c
c0000ec0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ec4:	83 f8 df             	cmp    eax,0xffffffdf
c0000ec7:	0f 87 70 03 00 00    	ja     c000123d <dlmalloc+0x384>
c0000ecd:	83 c0 0b             	add    eax,0xb
c0000ed0:	be 10 00 00 00       	mov    esi,0x10
c0000ed5:	83 f8 0f             	cmp    eax,0xf
c0000ed8:	76 05                	jbe    c0000edf <dlmalloc+0x26>
c0000eda:	83 e0 f8             	and    eax,0xfffffff8
c0000edd:	89 c6                	mov    esi,eax
c0000edf:	8b 3d 60 a0 02 c0    	mov    edi,DWORD PTR ds:0xc002a060
c0000ee5:	f7 c7 01 00 00 00    	test   edi,0x1
c0000eeb:	75 17                	jne    c0000f04 <dlmalloc+0x4b>
c0000eed:	85 ff                	test   edi,edi
c0000eef:	0f 85 05 03 00 00    	jne    c00011fa <dlmalloc+0x341>
c0000ef5:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c0000efa:	e8 78 fb ff ff       	call   c0000a77 <malloc_consolidate>
c0000eff:	e9 f6 02 00 00       	jmp    c00011fa <dlmalloc+0x341>
c0000f04:	39 f7                	cmp    edi,esi
c0000f06:	72 1f                	jb     c0000f27 <dlmalloc+0x6e>
c0000f08:	89 f2                	mov    edx,esi
c0000f0a:	c1 ea 03             	shr    edx,0x3
c0000f0d:	83 ea 02             	sub    edx,0x2
c0000f10:	8b 04 95 64 a0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5f9c]
c0000f17:	85 c0                	test   eax,eax
c0000f19:	74 0c                	je     c0000f27 <dlmalloc+0x6e>
c0000f1b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f1e:	89 0c 95 64 a0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5f9c],ecx
c0000f25:	eb 30                	jmp    c0000f57 <dlmalloc+0x9e>
c0000f27:	89 f0                	mov    eax,esi
c0000f29:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2f:	77 2e                	ja     c0000f5f <dlmalloc+0xa6>
c0000f31:	c1 e8 03             	shr    eax,0x3
c0000f34:	8d 14 c5 94 a0 02 c0 	lea    edx,[eax*8-0x3ffd5f6c]
c0000f3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f3f:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f42:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f45:	39 c3                	cmp    ebx,eax
c0000f47:	74 2e                	je     c0000f77 <dlmalloc+0xbe>
c0000f49:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f4c:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f54:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f57:	83 c0 08             	add    eax,0x8
c0000f5a:	e9 e0 02 00 00       	jmp    c000123f <dlmalloc+0x386>
c0000f5f:	e8 8f fa ff ff       	call   c00009f3 <largebin_index>
c0000f64:	83 e7 02             	and    edi,0x2
c0000f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f6b:	74 0a                	je     c0000f77 <dlmalloc+0xbe>
c0000f6d:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c0000f72:	e8 00 fb ff ff       	call   c0000a77 <malloc_consolidate>
c0000f77:	8d 46 10             	lea    eax,[esi+0x10]
c0000f7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f7e:	8b 1d a0 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a0a0
c0000f84:	81 fb 94 a0 02 c0    	cmp    ebx,0xc002a094
c0000f8a:	0f 84 13 01 00 00    	je     c00010a3 <dlmalloc+0x1ea>
c0000f90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f93:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f96:	83 e7 fc             	and    edi,0xfffffffc
c0000f99:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f9f:	77 4c                	ja     c0000fed <dlmalloc+0x134>
c0000fa1:	3d 94 a0 02 c0       	cmp    eax,0xc002a094
c0000fa6:	75 45                	jne    c0000fed <dlmalloc+0x134>
c0000fa8:	39 1d 90 a0 02 c0    	cmp    DWORD PTR ds:0xc002a090,ebx
c0000fae:	75 3d                	jne    c0000fed <dlmalloc+0x134>
c0000fb0:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fb4:	73 37                	jae    c0000fed <dlmalloc+0x134>
c0000fb6:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fb9:	89 fa                	mov    edx,edi
c0000fbb:	a3 9c a0 02 c0       	mov    ds:0xc002a09c,eax
c0000fc0:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c0000fc5:	a3 90 a0 02 c0       	mov    ds:0xc002a090,eax
c0000fca:	29 f2                	sub    edx,esi
c0000fcc:	c7 40 08 94 a0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a094
c0000fd3:	c7 40 0c 94 a0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002a094
c0000fda:	83 ce 01             	or     esi,0x1
c0000fdd:	89 d1                	mov    ecx,edx
c0000fdf:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000fe2:	83 c9 01             	or     ecx,0x1
c0000fe5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000fe8:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000feb:	eb 15                	jmp    c0001002 <dlmalloc+0x149>
c0000fed:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c0000ff2:	39 fe                	cmp    esi,edi
c0000ff4:	c7 40 08 94 a0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a094
c0000ffb:	75 0d                	jne    c000100a <dlmalloc+0x151>
c0000ffd:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001002:	8d 43 08             	lea    eax,[ebx+0x8]
c0001005:	e9 35 02 00 00       	jmp    c000123f <dlmalloc+0x386>
c000100a:	89 f8                	mov    eax,edi
c000100c:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001012:	77 19                	ja     c000102d <dlmalloc+0x174>
c0001014:	c1 e8 03             	shr    eax,0x3
c0001017:	8d 14 00             	lea    edx,[eax+eax*1]
c000101a:	83 c2 0d             	add    edx,0xd
c000101d:	8d 2c 95 58 a0 02 c0 	lea    ebp,[edx*4-0x3ffd5fa8]
c0001024:	8b 14 95 60 a0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5fa0]
c000102b:	eb 46                	jmp    c0001073 <dlmalloc+0x1ba>
c000102d:	e8 c1 f9 ff ff       	call   c00009f3 <largebin_index>
c0001032:	8d 14 00             	lea    edx,[eax+eax*1]
c0001035:	83 c2 0d             	add    edx,0xd
c0001038:	8d 0c 95 60 a0 02 c0 	lea    ecx,[edx*4-0x3ffd5fa0]
c000103f:	8b 14 95 60 a0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5fa0]
c0001046:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001049:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000104d:	89 d5                	mov    ebp,edx
c000104f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001053:	74 1e                	je     c0001073 <dlmalloc+0x1ba>
c0001055:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001058:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000105b:	77 12                	ja     c000106f <dlmalloc+0x1b6>
c000105d:	83 cf 01             	or     edi,0x1
c0001060:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001063:	76 05                	jbe    c000106a <dlmalloc+0x1b1>
c0001065:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001068:	eb f6                	jmp    c0001060 <dlmalloc+0x1a7>
c000106a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000106d:	eb 04                	jmp    c0001073 <dlmalloc+0x1ba>
c000106f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001073:	89 c7                	mov    edi,eax
c0001075:	88 c1                	mov    cl,al
c0001077:	c1 ff 05             	sar    edi,0x5
c000107a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000107e:	bf 01 00 00 00       	mov    edi,0x1
c0001083:	d3 e7                	shl    edi,cl
c0001085:	89 f8                	mov    eax,edi
c0001087:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000108b:	09 04 bd 94 a3 02 c0 	or     DWORD PTR [edi*4-0x3ffd5c6c],eax
c0001092:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001095:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001098:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000109b:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000109e:	e9 db fe ff ff       	jmp    c0000f7e <dlmalloc+0xc5>
c00010a3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010a9:	76 78                	jbe    c0001123 <dlmalloc+0x26a>
c00010ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010af:	8d 04 c5 94 a0 02 c0 	lea    eax,[eax*8-0x3ffd5f6c]
c00010b6:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010b9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bc:	39 ca                	cmp    edx,ecx
c00010be:	74 63                	je     c0001123 <dlmalloc+0x26a>
c00010c0:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010c3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010c6:	83 e3 fc             	and    ebx,0xfffffffc
c00010c9:	39 de                	cmp    esi,ebx
c00010cb:	77 52                	ja     c000111f <dlmalloc+0x266>
c00010cd:	89 df                	mov    edi,ebx
c00010cf:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010d2:	29 f7                	sub    edi,esi
c00010d4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010d7:	01 d3                	add    ebx,edx
c00010d9:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010dc:	83 ff 0f             	cmp    edi,0xf
c00010df:	8d 42 08             	lea    eax,[edx+0x8]
c00010e2:	77 09                	ja     c00010ed <dlmalloc+0x234>
c00010e4:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010e8:	e9 52 01 00 00       	jmp    c000123f <dlmalloc+0x386>
c00010ed:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010f0:	83 ce 01             	or     esi,0x1
c00010f3:	89 0d 9c a0 02 c0    	mov    DWORD PTR ds:0xc002a09c,ecx
c00010f9:	89 0d a0 a0 02 c0    	mov    DWORD PTR ds:0xc002a0a0,ecx
c00010ff:	c7 41 08 94 a0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002a094
c0001106:	c7 41 0c 94 a0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002a094
c000110d:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001110:	89 fa                	mov    edx,edi
c0001112:	83 ca 01             	or     edx,0x1
c0001115:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001118:	89 3b                	mov    DWORD PTR [ebx],edi
c000111a:	e9 20 01 00 00       	jmp    c000123f <dlmalloc+0x386>
c000111f:	89 c2                	mov    edx,eax
c0001121:	eb 99                	jmp    c00010bc <dlmalloc+0x203>
c0001123:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001127:	b8 01 00 00 00       	mov    eax,0x1
c000112c:	41                   	inc    ecx
c000112d:	89 cb                	mov    ebx,ecx
c000112f:	8d 14 cd 8c a0 02 c0 	lea    edx,[ecx*8-0x3ffd5f74]
c0001136:	c1 eb 05             	shr    ebx,0x5
c0001139:	d3 e0                	shl    eax,cl
c000113b:	8b 3c 9d 94 a3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5c6c]
c0001142:	39 f8                	cmp    eax,edi
c0001144:	77 04                	ja     c000114a <dlmalloc+0x291>
c0001146:	85 c0                	test   eax,eax
c0001148:	75 26                	jne    c0001170 <dlmalloc+0x2b7>
c000114a:	43                   	inc    ebx
c000114b:	83 fb 02             	cmp    ebx,0x2
c000114e:	0f 87 a6 00 00 00    	ja     c00011fa <dlmalloc+0x341>
c0001154:	8b 3c 9d 94 a3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5c6c]
c000115b:	85 ff                	test   edi,edi
c000115d:	74 eb                	je     c000114a <dlmalloc+0x291>
c000115f:	89 d8                	mov    eax,ebx
c0001161:	c1 e0 06             	shl    eax,0x6
c0001164:	8d 14 85 8c a0 02 c0 	lea    edx,[eax*4-0x3ffd5f74]
c000116b:	b8 01 00 00 00       	mov    eax,0x1
c0001170:	85 f8                	test   eax,edi
c0001172:	75 07                	jne    c000117b <dlmalloc+0x2c2>
c0001174:	83 c2 08             	add    edx,0x8
c0001177:	01 c0                	add    eax,eax
c0001179:	eb f5                	jmp    c0001170 <dlmalloc+0x2b7>
c000117b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000117e:	39 ca                	cmp    edx,ecx
c0001180:	75 14                	jne    c0001196 <dlmalloc+0x2dd>
c0001182:	89 c1                	mov    ecx,eax
c0001184:	83 c2 08             	add    edx,0x8
c0001187:	f7 d1                	not    ecx
c0001189:	01 c0                	add    eax,eax
c000118b:	21 cf                	and    edi,ecx
c000118d:	89 3c 9d 94 a3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd5c6c],edi
c0001194:	eb ac                	jmp    c0001142 <dlmalloc+0x289>
c0001196:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001199:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000119c:	83 e0 fc             	and    eax,0xfffffffc
c000119f:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011a2:	89 c3                	mov    ebx,eax
c00011a4:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011a7:	29 f3                	sub    ebx,esi
c00011a9:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ac:	83 fb 0f             	cmp    ebx,0xf
c00011af:	8d 41 08             	lea    eax,[ecx+0x8]
c00011b2:	77 09                	ja     c00011bd <dlmalloc+0x304>
c00011b4:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011b8:	e9 82 00 00 00       	jmp    c000123f <dlmalloc+0x386>
c00011bd:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011c0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011c6:	89 3d 9c a0 02 c0    	mov    DWORD PTR ds:0xc002a09c,edi
c00011cc:	89 3d a0 a0 02 c0    	mov    DWORD PTR ds:0xc002a0a0,edi
c00011d2:	c7 47 08 94 a0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002a094
c00011d9:	c7 47 0c 94 a0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002a094
c00011e0:	77 06                	ja     c00011e8 <dlmalloc+0x32f>
c00011e2:	89 3d 90 a0 02 c0    	mov    DWORD PTR ds:0xc002a090,edi
c00011e8:	83 ce 01             	or     esi,0x1
c00011eb:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011ee:	89 d9                	mov    ecx,ebx
c00011f0:	83 c9 01             	or     ecx,0x1
c00011f3:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00011f6:	89 1a                	mov    DWORD PTR [edx],ebx
c00011f8:	eb 45                	jmp    c000123f <dlmalloc+0x386>
c00011fa:	a1 8c a0 02 c0       	mov    eax,ds:0xc002a08c
c00011ff:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001202:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001205:	83 e2 fc             	and    edx,0xfffffffc
c0001208:	39 d1                	cmp    ecx,edx
c000120a:	77 1e                	ja     c000122a <dlmalloc+0x371>
c000120c:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000120f:	89 f3                	mov    ebx,esi
c0001211:	89 0d 8c a0 02 c0    	mov    DWORD PTR ds:0xc002a08c,ecx
c0001217:	83 cb 01             	or     ebx,0x1
c000121a:	29 f2                	sub    edx,esi
c000121c:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000121f:	83 ca 01             	or     edx,0x1
c0001222:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001225:	e9 2d fd ff ff       	jmp    c0000f57 <dlmalloc+0x9e>
c000122a:	83 c4 1c             	add    esp,0x1c
c000122d:	89 f0                	mov    eax,esi
c000122f:	5b                   	pop    ebx
c0001230:	ba 60 a0 02 c0       	mov    edx,0xc002a060
c0001235:	5e                   	pop    esi
c0001236:	5f                   	pop    edi
c0001237:	5d                   	pop    ebp
c0001238:	e9 16 fa ff ff       	jmp    c0000c53 <sYSMALLOc>
c000123d:	31 c0                	xor    eax,eax
c000123f:	83 c4 1c             	add    esp,0x1c
c0001242:	5b                   	pop    ebx
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	c3                   	ret    

c0001247 <iALLOc>:
c0001247:	55                   	push   ebp
c0001248:	89 c5                	mov    ebp,eax
c000124a:	57                   	push   edi
c000124b:	56                   	push   esi
c000124c:	53                   	push   ebx
c000124d:	83 ec 2c             	sub    esp,0x2c
c0001250:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001254:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001258:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000125c:	83 3d 60 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a060,0x0
c0001263:	75 12                	jne    c0001277 <iALLOc+0x30>
c0001265:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001269:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c000126e:	e8 04 f8 ff ff       	call   c0000a77 <malloc_consolidate>
c0001273:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001277:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000127c:	74 12                	je     c0001290 <iALLOc+0x49>
c000127e:	85 ed                	test   ebp,ebp
c0001280:	0f 84 64 01 00 00    	je     c00013ea <iALLOc+0x1a3>
c0001286:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000128e:	eb 33                	jmp    c00012c3 <iALLOc+0x7c>
c0001290:	85 ed                	test   ebp,ebp
c0001292:	75 14                	jne    c00012a8 <iALLOc+0x61>
c0001294:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000129c:	83 c4 2c             	add    esp,0x2c
c000129f:	5b                   	pop    ebx
c00012a0:	5e                   	pop    esi
c00012a1:	5f                   	pop    edi
c00012a2:	5d                   	pop    ebp
c00012a3:	e9 11 fc ff ff       	jmp    c0000eb9 <dlmalloc>
c00012a8:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012af:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012b7:	83 f8 0f             	cmp    eax,0xf
c00012ba:	76 07                	jbe    c00012c3 <iALLOc+0x7c>
c00012bc:	83 e0 f8             	and    eax,0xfffffff8
c00012bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012c3:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012c8:	75 09                	jne    c00012d3 <iALLOc+0x8c>
c00012ca:	89 d0                	mov    eax,edx
c00012cc:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012cf:	31 f6                	xor    esi,esi
c00012d1:	eb 3b                	jmp    c000130e <iALLOc+0xc7>
c00012d3:	8b 02                	mov    eax,DWORD PTR [edx]
c00012d5:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012dd:	83 c0 0b             	add    eax,0xb
c00012e0:	83 f8 0f             	cmp    eax,0xf
c00012e3:	76 07                	jbe    c00012ec <iALLOc+0xa5>
c00012e5:	83 e0 f8             	and    eax,0xfffffff8
c00012e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012f0:	0f af f5             	imul   esi,ebp
c00012f3:	eb 25                	jmp    c000131a <iALLOc+0xd3>
c00012f5:	8b 18                	mov    ebx,DWORD PTR [eax]
c00012f7:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00012fa:	bb 10 00 00 00       	mov    ebx,0x10
c00012ff:	83 f9 0f             	cmp    ecx,0xf
c0001302:	76 05                	jbe    c0001309 <iALLOc+0xc2>
c0001304:	83 e1 f8             	and    ecx,0xfffffff8
c0001307:	89 cb                	mov    ebx,ecx
c0001309:	01 de                	add    esi,ebx
c000130b:	83 c0 04             	add    eax,0x4
c000130e:	39 c7                	cmp    edi,eax
c0001310:	75 e3                	jne    c00012f5 <iALLOc+0xae>
c0001312:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000131a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000131e:	8b 1d b4 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a3b4
c0001324:	83 ec 0c             	sub    esp,0xc
c0001327:	c7 05 b4 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a3b4,0x0
c0001331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001335:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001339:	50                   	push   eax
c000133a:	e8 7a fb ff ff       	call   c0000eb9 <dlmalloc>
c000133f:	83 c4 10             	add    esp,0x10
c0001342:	89 1d b4 a3 02 c0    	mov    DWORD PTR ds:0xc002a3b4,ebx
c0001348:	85 c0                	test   eax,eax
c000134a:	0f 84 92 00 00 00    	je     c00013e2 <iALLOc+0x19b>
c0001350:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001353:	8d 78 f8             	lea    edi,[eax-0x8]
c0001356:	83 e3 fc             	and    ebx,0xfffffffc
c0001359:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000135d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001362:	74 1e                	je     c0001382 <iALLOc+0x13b>
c0001364:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001368:	89 d9                	mov    ecx,ebx
c000136a:	52                   	push   edx
c000136b:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000136f:	83 e9 04             	sub    ecx,0x4
c0001372:	51                   	push   ecx
c0001373:	6a 00                	push   0x0
c0001375:	50                   	push   eax
c0001376:	e8 02 f3 ff ff       	call   c000067d <memset>
c000137b:	83 c4 10             	add    esp,0x10
c000137e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001382:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001387:	75 14                	jne    c000139d <iALLOc+0x156>
c0001389:	8d 04 37             	lea    eax,[edi+esi*1]
c000138c:	29 f3                	sub    ebx,esi
c000138e:	8d 48 08             	lea    ecx,[eax+0x8]
c0001391:	83 cb 01             	or     ebx,0x1
c0001394:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001398:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000139b:	89 f3                	mov    ebx,esi
c000139d:	31 c0                	xor    eax,eax
c000139f:	4d                   	dec    ebp
c00013a0:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013a3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013a7:	39 c5                	cmp    ebp,eax
c00013a9:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ac:	74 2c                	je     c00013da <iALLOc+0x193>
c00013ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013b2:	85 c9                	test   ecx,ecx
c00013b4:	75 15                	jne    c00013cb <iALLOc+0x184>
c00013b6:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013b9:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013bc:	b9 10 00 00 00       	mov    ecx,0x10
c00013c1:	83 fe 0f             	cmp    esi,0xf
c00013c4:	76 05                	jbe    c00013cb <iALLOc+0x184>
c00013c6:	83 e6 f8             	and    esi,0xfffffff8
c00013c9:	89 f1                	mov    ecx,esi
c00013cb:	89 ce                	mov    esi,ecx
c00013cd:	29 cb                	sub    ebx,ecx
c00013cf:	83 ce 01             	or     esi,0x1
c00013d2:	40                   	inc    eax
c00013d3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013d6:	01 cf                	add    edi,ecx
c00013d8:	eb c6                	jmp    c00013a0 <iALLOc+0x159>
c00013da:	83 cb 01             	or     ebx,0x1
c00013dd:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013e0:	eb 08                	jmp    c00013ea <iALLOc+0x1a3>
c00013e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013ee:	83 c4 2c             	add    esp,0x2c
c00013f1:	5b                   	pop    ebx
c00013f2:	5e                   	pop    esi
c00013f3:	5f                   	pop    edi
c00013f4:	5d                   	pop    ebp
c00013f5:	c3                   	ret    

c00013f6 <dlrealloc>:
c00013f6:	55                   	push   ebp
c00013f7:	57                   	push   edi
c00013f8:	56                   	push   esi
c00013f9:	53                   	push   ebx
c00013fa:	83 ec 1c             	sub    esp,0x1c
c00013fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001401:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001405:	85 db                	test   ebx,ebx
c0001407:	75 10                	jne    c0001419 <dlrealloc+0x23>
c0001409:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000140d:	83 c4 1c             	add    esp,0x1c
c0001410:	5b                   	pop    ebx
c0001411:	5e                   	pop    esi
c0001412:	5f                   	pop    edi
c0001413:	5d                   	pop    ebp
c0001414:	e9 a0 fa ff ff       	jmp    c0000eb9 <dlmalloc>
c0001419:	83 f8 df             	cmp    eax,0xffffffdf
c000141c:	76 07                	jbe    c0001425 <dlrealloc+0x2f>
c000141e:	31 db                	xor    ebx,ebx
c0001420:	e9 7c 01 00 00       	jmp    c00015a1 <dlrealloc+0x1ab>
c0001425:	83 c0 0b             	add    eax,0xb
c0001428:	bf 10 00 00 00       	mov    edi,0x10
c000142d:	83 f8 0f             	cmp    eax,0xf
c0001430:	76 05                	jbe    c0001437 <dlrealloc+0x41>
c0001432:	83 e0 f8             	and    eax,0xfffffff8
c0001435:	89 c7                	mov    edi,eax
c0001437:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000143a:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000143d:	89 c6                	mov    esi,eax
c000143f:	83 e6 fc             	and    esi,0xfffffffc
c0001442:	a8 02                	test   al,0x2
c0001444:	75 d8                	jne    c000141e <dlrealloc+0x28>
c0001446:	39 f7                	cmp    edi,esi
c0001448:	0f 86 15 01 00 00    	jbe    c0001563 <dlrealloc+0x16d>
c000144e:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001452:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001455:	39 15 8c a0 02 c0    	cmp    DWORD PTR ds:0xc002a08c,edx
c000145b:	75 33                	jne    c0001490 <dlrealloc+0x9a>
c000145d:	83 e1 fc             	and    ecx,0xfffffffc
c0001460:	01 f1                	add    ecx,esi
c0001462:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001466:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001469:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000146d:	77 49                	ja     c00014b8 <dlrealloc+0xc2>
c000146f:	01 fd                	add    ebp,edi
c0001471:	83 e0 01             	and    eax,0x1
c0001474:	09 f8                	or     eax,edi
c0001476:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001479:	89 2d 8c a0 02 c0    	mov    DWORD PTR ds:0xc002a08c,ebp
c000147f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001483:	29 f8                	sub    eax,edi
c0001485:	83 c8 01             	or     eax,0x1
c0001488:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000148b:	e9 11 01 00 00       	jmp    c00015a1 <dlrealloc+0x1ab>
c0001490:	89 c8                	mov    eax,ecx
c0001492:	83 e0 fe             	and    eax,0xfffffffe
c0001495:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000149a:	75 1c                	jne    c00014b8 <dlrealloc+0xc2>
c000149c:	83 e1 fc             	and    ecx,0xfffffffc
c000149f:	01 f1                	add    ecx,esi
c00014a1:	39 cf                	cmp    edi,ecx
c00014a3:	77 13                	ja     c00014b8 <dlrealloc+0xc2>
c00014a5:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014a8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014ab:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014ae:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014b1:	89 ce                	mov    esi,ecx
c00014b3:	e9 ab 00 00 00       	jmp    c0001563 <dlrealloc+0x16d>
c00014b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014bc:	8d 47 f9             	lea    eax,[edi-0x7]
c00014bf:	83 ec 0c             	sub    esp,0xc
c00014c2:	50                   	push   eax
c00014c3:	e8 f1 f9 ff ff       	call   c0000eb9 <dlmalloc>
c00014c8:	83 c4 10             	add    esp,0x10
c00014cb:	89 c1                	mov    ecx,eax
c00014cd:	85 c0                	test   eax,eax
c00014cf:	0f 84 49 ff ff ff    	je     c000141e <dlrealloc+0x28>
c00014d5:	8d 40 f8             	lea    eax,[eax-0x8]
c00014d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014dc:	39 c2                	cmp    edx,eax
c00014de:	75 0a                	jne    c00014ea <dlrealloc+0xf4>
c00014e0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014e3:	83 e0 fc             	and    eax,0xfffffffc
c00014e6:	01 c6                	add    esi,eax
c00014e8:	eb 79                	jmp    c0001563 <dlrealloc+0x16d>
c00014ea:	83 ee 04             	sub    esi,0x4
c00014ed:	83 fe 27             	cmp    esi,0x27
c00014f0:	76 16                	jbe    c0001508 <dlrealloc+0x112>
c00014f2:	50                   	push   eax
c00014f3:	56                   	push   esi
c00014f4:	53                   	push   ebx
c00014f5:	51                   	push   ecx
c00014f6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00014fa:	e8 48 f1 ff ff       	call   c0000647 <memcpy>
c00014ff:	83 c4 10             	add    esp,0x10
c0001502:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001506:	eb 43                	jmp    c000154b <dlrealloc+0x155>
c0001508:	8b 03                	mov    eax,DWORD PTR [ebx]
c000150a:	83 fe 13             	cmp    esi,0x13
c000150d:	89 01                	mov    DWORD PTR [ecx],eax
c000150f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001512:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001515:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001518:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000151b:	76 2e                	jbe    c000154b <dlrealloc+0x155>
c000151d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001520:	83 fe 1b             	cmp    esi,0x1b
c0001523:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001526:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001529:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000152c:	76 1d                	jbe    c000154b <dlrealloc+0x155>
c000152e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001531:	83 fe 23             	cmp    esi,0x23
c0001534:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001537:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000153a:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000153d:	76 0c                	jbe    c000154b <dlrealloc+0x155>
c000153f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001542:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001545:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001548:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c000154b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000154f:	83 ec 0c             	sub    esp,0xc
c0001552:	53                   	push   ebx
c0001553:	e8 06 f6 ff ff       	call   c0000b5e <dlfree>
c0001558:	83 c4 10             	add    esp,0x10
c000155b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000155f:	89 cb                	mov    ebx,ecx
c0001561:	eb 3e                	jmp    c00015a1 <dlrealloc+0x1ab>
c0001563:	89 f2                	mov    edx,esi
c0001565:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001568:	29 fa                	sub    edx,edi
c000156a:	83 e1 01             	and    ecx,0x1
c000156d:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001571:	83 fa 0f             	cmp    edx,0xf
c0001574:	77 0b                	ja     c0001581 <dlrealloc+0x18b>
c0001576:	09 ce                	or     esi,ecx
c0001578:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000157b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000157f:	eb 20                	jmp    c00015a1 <dlrealloc+0x1ab>
c0001581:	01 fd                	add    ebp,edi
c0001583:	83 ec 0c             	sub    esp,0xc
c0001586:	09 cf                	or     edi,ecx
c0001588:	83 ca 01             	or     edx,0x1
c000158b:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000158e:	83 c5 08             	add    ebp,0x8
c0001591:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0001594:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001598:	55                   	push   ebp
c0001599:	e8 c0 f5 ff ff       	call   c0000b5e <dlfree>
c000159e:	83 c4 10             	add    esp,0x10
c00015a1:	83 c4 1c             	add    esp,0x1c
c00015a4:	89 d8                	mov    eax,ebx
c00015a6:	5b                   	pop    ebx
c00015a7:	5e                   	pop    esi
c00015a8:	5f                   	pop    edi
c00015a9:	5d                   	pop    ebp
c00015aa:	c3                   	ret    

c00015ab <dlmemalign>:
c00015ab:	55                   	push   ebp
c00015ac:	57                   	push   edi
c00015ad:	56                   	push   esi
c00015ae:	53                   	push   ebx
c00015af:	83 ec 0c             	sub    esp,0xc
c00015b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015ba:	83 fa 08             	cmp    edx,0x8
c00015bd:	77 10                	ja     c00015cf <dlmemalign+0x24>
c00015bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015c3:	83 c4 0c             	add    esp,0xc
c00015c6:	5b                   	pop    ebx
c00015c7:	5e                   	pop    esi
c00015c8:	5f                   	pop    edi
c00015c9:	5d                   	pop    ebp
c00015ca:	e9 ea f8 ff ff       	jmp    c0000eb9 <dlmalloc>
c00015cf:	bf 10 00 00 00       	mov    edi,0x10
c00015d4:	83 fa 0f             	cmp    edx,0xf
c00015d7:	76 13                	jbe    c00015ec <dlmemalign+0x41>
c00015d9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015dc:	85 d1                	test   ecx,edx
c00015de:	75 04                	jne    c00015e4 <dlmemalign+0x39>
c00015e0:	89 d7                	mov    edi,edx
c00015e2:	eb 08                	jmp    c00015ec <dlmemalign+0x41>
c00015e4:	39 d7                	cmp    edi,edx
c00015e6:	73 04                	jae    c00015ec <dlmemalign+0x41>
c00015e8:	01 ff                	add    edi,edi
c00015ea:	eb f8                	jmp    c00015e4 <dlmemalign+0x39>
c00015ec:	83 f8 df             	cmp    eax,0xffffffdf
c00015ef:	76 07                	jbe    c00015f8 <dlmemalign+0x4d>
c00015f1:	31 c0                	xor    eax,eax
c00015f3:	e9 ce 00 00 00       	jmp    c00016c6 <dlmemalign+0x11b>
c00015f8:	83 c0 0b             	add    eax,0xb
c00015fb:	bd 10 00 00 00       	mov    ebp,0x10
c0001600:	83 f8 0f             	cmp    eax,0xf
c0001603:	76 05                	jbe    c000160a <dlmemalign+0x5f>
c0001605:	83 e0 f8             	and    eax,0xfffffff8
c0001608:	89 c5                	mov    ebp,eax
c000160a:	83 ec 0c             	sub    esp,0xc
c000160d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001611:	50                   	push   eax
c0001612:	e8 a2 f8 ff ff       	call   c0000eb9 <dlmalloc>
c0001617:	83 c4 10             	add    esp,0x10
c000161a:	89 c1                	mov    ecx,eax
c000161c:	85 c0                	test   eax,eax
c000161e:	74 d1                	je     c00015f1 <dlmemalign+0x46>
c0001620:	31 d2                	xor    edx,edx
c0001622:	8d 70 f8             	lea    esi,[eax-0x8]
c0001625:	f7 f7                	div    edi
c0001627:	85 d2                	test   edx,edx
c0001629:	74 62                	je     c000168d <dlmemalign+0xe2>
c000162b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000162f:	89 f8                	mov    eax,edi
c0001631:	f7 d8                	neg    eax
c0001633:	21 c3                	and    ebx,eax
c0001635:	83 eb 08             	sub    ebx,0x8
c0001638:	89 d8                	mov    eax,ebx
c000163a:	29 f0                	sub    eax,esi
c000163c:	83 f8 0f             	cmp    eax,0xf
c000163f:	77 02                	ja     c0001643 <dlmemalign+0x98>
c0001641:	01 fb                	add    ebx,edi
c0001643:	89 d8                	mov    eax,ebx
c0001645:	29 f0                	sub    eax,esi
c0001647:	89 c6                	mov    esi,eax
c0001649:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000164c:	89 c2                	mov    edx,eax
c000164e:	83 e2 fc             	and    edx,0xfffffffc
c0001651:	29 f2                	sub    edx,esi
c0001653:	a8 02                	test   al,0x2
c0001655:	74 10                	je     c0001667 <dlmemalign+0xbc>
c0001657:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000165a:	83 ca 02             	or     edx,0x2
c000165d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001660:	89 33                	mov    DWORD PTR [ebx],esi
c0001662:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001665:	eb 5f                	jmp    c00016c6 <dlmemalign+0x11b>
c0001667:	83 ec 0c             	sub    esp,0xc
c000166a:	89 d0                	mov    eax,edx
c000166c:	83 c8 01             	or     eax,0x1
c000166f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001672:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001677:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000167a:	83 e0 01             	and    eax,0x1
c000167d:	09 f0                	or     eax,esi
c000167f:	89 de                	mov    esi,ebx
c0001681:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001684:	51                   	push   ecx
c0001685:	e8 d4 f4 ff ff       	call   c0000b5e <dlfree>
c000168a:	83 c4 10             	add    esp,0x10
c000168d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001690:	a8 02                	test   al,0x2
c0001692:	75 2f                	jne    c00016c3 <dlmemalign+0x118>
c0001694:	83 e0 fc             	and    eax,0xfffffffc
c0001697:	8d 55 10             	lea    edx,[ebp+0x10]
c000169a:	39 c2                	cmp    edx,eax
c000169c:	73 25                	jae    c00016c3 <dlmemalign+0x118>
c000169e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016a1:	83 ec 0c             	sub    esp,0xc
c00016a4:	29 e8                	sub    eax,ebp
c00016a6:	83 c2 08             	add    edx,0x8
c00016a9:	83 c8 01             	or     eax,0x1
c00016ac:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016af:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016b2:	83 e0 01             	and    eax,0x1
c00016b5:	09 c5                	or     ebp,eax
c00016b7:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016ba:	52                   	push   edx
c00016bb:	e8 9e f4 ff ff       	call   c0000b5e <dlfree>
c00016c0:	83 c4 10             	add    esp,0x10
c00016c3:	8d 46 08             	lea    eax,[esi+0x8]
c00016c6:	83 c4 0c             	add    esp,0xc
c00016c9:	5b                   	pop    ebx
c00016ca:	5e                   	pop    esi
c00016cb:	5f                   	pop    edi
c00016cc:	5d                   	pop    ebp
c00016cd:	c3                   	ret    

c00016ce <dlcalloc>:
c00016ce:	53                   	push   ebx
c00016cf:	83 ec 14             	sub    esp,0x14
c00016d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016d6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016db:	50                   	push   eax
c00016dc:	e8 d8 f7 ff ff       	call   c0000eb9 <dlmalloc>
c00016e1:	83 c4 10             	add    esp,0x10
c00016e4:	89 c3                	mov    ebx,eax
c00016e6:	85 c0                	test   eax,eax
c00016e8:	74 77                	je     c0001761 <dlcalloc+0x93>
c00016ea:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016ed:	89 d0                	mov    eax,edx
c00016ef:	83 e0 fc             	and    eax,0xfffffffc
c00016f2:	80 e2 02             	and    dl,0x2
c00016f5:	75 5a                	jne    c0001751 <dlcalloc+0x83>
c00016f7:	83 e8 04             	sub    eax,0x4
c00016fa:	83 f8 27             	cmp    eax,0x27
c00016fd:	76 03                	jbe    c0001702 <dlcalloc+0x34>
c00016ff:	51                   	push   ecx
c0001700:	eb 53                	jmp    c0001755 <dlcalloc+0x87>
c0001702:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001708:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000170f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001716:	83 f8 13             	cmp    eax,0x13
c0001719:	76 46                	jbe    c0001761 <dlcalloc+0x93>
c000171b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001722:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001729:	83 f8 1b             	cmp    eax,0x1b
c000172c:	76 33                	jbe    c0001761 <dlcalloc+0x93>
c000172e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001735:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000173c:	83 f8 23             	cmp    eax,0x23
c000173f:	76 20                	jbe    c0001761 <dlcalloc+0x93>
c0001741:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001748:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000174f:	eb 10                	jmp    c0001761 <dlcalloc+0x93>
c0001751:	83 e8 08             	sub    eax,0x8
c0001754:	52                   	push   edx
c0001755:	50                   	push   eax
c0001756:	6a 00                	push   0x0
c0001758:	53                   	push   ebx
c0001759:	e8 1f ef ff ff       	call   c000067d <memset>
c000175e:	83 c4 10             	add    esp,0x10
c0001761:	89 d8                	mov    eax,ebx
c0001763:	83 c4 08             	add    esp,0x8
c0001766:	5b                   	pop    ebx
c0001767:	c3                   	ret    

c0001768 <dlcfree>:
c0001768:	e9 f1 f3 ff ff       	jmp    c0000b5e <dlfree>

c000176d <dlindependent_calloc>:
c000176d:	83 ec 28             	sub    esp,0x28
c0001770:	b9 03 00 00 00       	mov    ecx,0x3
c0001775:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001779:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000177d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001781:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001785:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001789:	e8 b9 fa ff ff       	call   c0001247 <iALLOc>
c000178e:	83 c4 2c             	add    esp,0x2c
c0001791:	c3                   	ret    

c0001792 <dlindependent_comalloc>:
c0001792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001796:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000179a:	31 c9                	xor    ecx,ecx
c000179c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017a4:	e9 9e fa ff ff       	jmp    c0001247 <iALLOc>

c00017a9 <dlvalloc>:
c00017a9:	83 ec 0c             	sub    esp,0xc
c00017ac:	83 3d 60 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a060,0x0
c00017b3:	75 0a                	jne    c00017bf <dlvalloc+0x16>
c00017b5:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c00017ba:	e8 b8 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c00017bf:	50                   	push   eax
c00017c0:	50                   	push   eax
c00017c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017c5:	ff 35 bc a3 02 c0    	push   DWORD PTR ds:0xc002a3bc
c00017cb:	e8 db fd ff ff       	call   c00015ab <dlmemalign>
c00017d0:	83 c4 1c             	add    esp,0x1c
c00017d3:	c3                   	ret    

c00017d4 <dlpvalloc>:
c00017d4:	83 ec 0c             	sub    esp,0xc
c00017d7:	83 3d 60 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a060,0x0
c00017de:	75 0a                	jne    c00017ea <dlpvalloc+0x16>
c00017e0:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c00017e5:	e8 8d f2 ff ff       	call   c0000a77 <malloc_consolidate>
c00017ea:	a1 bc a3 02 c0       	mov    eax,ds:0xc002a3bc
c00017ef:	89 c1                	mov    ecx,eax
c00017f1:	52                   	push   edx
c00017f2:	f7 d9                	neg    ecx
c00017f4:	52                   	push   edx
c00017f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00017f9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00017fd:	21 ca                	and    edx,ecx
c00017ff:	52                   	push   edx
c0001800:	50                   	push   eax
c0001801:	e8 a5 fd ff ff       	call   c00015ab <dlmemalign>
c0001806:	83 c4 1c             	add    esp,0x1c
c0001809:	c3                   	ret    

c000180a <dlmalloc_trim>:
c000180a:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c000180f:	e8 63 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c0001814:	31 c0                	xor    eax,eax
c0001816:	c3                   	ret    

c0001817 <dlmalloc_usable_size>:
c0001817:	53                   	push   ebx
c0001818:	31 c0                	xor    eax,eax
c000181a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000181e:	85 c9                	test   ecx,ecx
c0001820:	74 24                	je     c0001846 <dlmalloc_usable_size+0x2f>
c0001822:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001825:	f6 c2 02             	test   dl,0x2
c0001828:	74 08                	je     c0001832 <dlmalloc_usable_size+0x1b>
c000182a:	83 e2 fc             	and    edx,0xfffffffc
c000182d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001830:	eb 14                	jmp    c0001846 <dlmalloc_usable_size+0x2f>
c0001832:	89 d3                	mov    ebx,edx
c0001834:	31 c0                	xor    eax,eax
c0001836:	83 e3 fe             	and    ebx,0xfffffffe
c0001839:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000183e:	74 06                	je     c0001846 <dlmalloc_usable_size+0x2f>
c0001840:	83 e2 fc             	and    edx,0xfffffffc
c0001843:	8d 42 fc             	lea    eax,[edx-0x4]
c0001846:	5b                   	pop    ebx
c0001847:	c3                   	ret    

c0001848 <dlmallinfo>:
c0001848:	55                   	push   ebp
c0001849:	57                   	push   edi
c000184a:	56                   	push   esi
c000184b:	53                   	push   ebx
c000184c:	83 ec 08             	sub    esp,0x8
c000184f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001853:	83 3d 8c a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a08c,0x0
c000185a:	75 0a                	jne    c0001866 <dlmallinfo+0x1e>
c000185c:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c0001861:	e8 11 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c0001866:	a1 8c a0 02 c0       	mov    eax,ds:0xc002a08c
c000186b:	31 ed                	xor    ebp,ebp
c000186d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001870:	31 c9                	xor    ecx,ecx
c0001872:	83 e0 fc             	and    eax,0xfffffffc
c0001875:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001879:	31 c0                	xor    eax,eax
c000187b:	8b 14 85 64 a0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5f9c]
c0001882:	85 d2                	test   edx,edx
c0001884:	74 0e                	je     c0001894 <dlmallinfo+0x4c>
c0001886:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001889:	45                   	inc    ebp
c000188a:	83 e6 fc             	and    esi,0xfffffffc
c000188d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001890:	01 f1                	add    ecx,esi
c0001892:	eb ee                	jmp    c0001882 <dlmallinfo+0x3a>
c0001894:	40                   	inc    eax
c0001895:	83 f8 0a             	cmp    eax,0xa
c0001898:	75 e1                	jne    c000187b <dlmallinfo+0x33>
c000189a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000189e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018a5:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018a8:	b8 94 a0 02 c0       	mov    eax,0xc002a094
c00018ad:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018b0:	39 f0                	cmp    eax,esi
c00018b2:	74 10                	je     c00018c4 <dlmallinfo+0x7c>
c00018b4:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018b7:	ff 04 24             	inc    DWORD PTR [esp]
c00018ba:	83 e7 fc             	and    edi,0xfffffffc
c00018bd:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018c0:	01 fa                	add    edx,edi
c00018c2:	eb ec                	jmp    c00018b0 <dlmallinfo+0x68>
c00018c4:	83 c0 08             	add    eax,0x8
c00018c7:	3d 8c a3 02 c0       	cmp    eax,0xc002a38c
c00018cc:	75 df                	jne    c00018ad <dlmallinfo+0x65>
c00018ce:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018d1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018d4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018d7:	a1 c8 a3 02 c0       	mov    eax,ds:0xc002a3c8
c00018dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018df:	89 03                	mov    DWORD PTR [ebx],eax
c00018e1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018e4:	8b 35 b0 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a3b0
c00018ea:	29 d0                	sub    eax,edx
c00018ec:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00018f2:	8b 35 c4 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a3c4
c00018f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018fc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00018ff:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001902:	8b 35 d4 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a3d4
c0001908:	89 d8                	mov    eax,ebx
c000190a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000190d:	83 c4 08             	add    esp,0x8
c0001910:	5b                   	pop    ebx
c0001911:	5e                   	pop    esi
c0001912:	5f                   	pop    edi
c0001913:	5d                   	pop    ebp
c0001914:	c2 04 00             	ret    0x4

c0001917 <dlmalloc_stats>:
c0001917:	83 ec 30             	sub    esp,0x30
c000191a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000191e:	50                   	push   eax
c000191f:	e8 24 ff ff ff       	call   c0001848 <dlmallinfo>
c0001924:	83 c4 30             	add    esp,0x30
c0001927:	c3                   	ret    

c0001928 <dlmallopt>:
c0001928:	56                   	push   esi
c0001929:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c000192e:	53                   	push   ebx
c000192f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001933:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001937:	e8 3b f1 ff ff       	call   c0000a77 <malloc_consolidate>
c000193c:	8d 46 04             	lea    eax,[esi+0x4]
c000193f:	83 f8 05             	cmp    eax,0x5
c0001942:	77 67                	ja     c00019ab <dlmallopt+0x83>
c0001944:	ff 24 85 e4 5c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda31c]
c000194b:	83 fb 50             	cmp    ebx,0x50
c000194e:	77 5b                	ja     c00019ab <dlmallopt+0x83>
c0001950:	ba 08 00 00 00       	mov    edx,0x8
c0001955:	85 db                	test   ebx,ebx
c0001957:	74 12                	je     c000196b <dlmallopt+0x43>
c0001959:	83 c3 0b             	add    ebx,0xb
c000195c:	ba 10 00 00 00       	mov    edx,0x10
c0001961:	83 fb 0f             	cmp    ebx,0xf
c0001964:	76 05                	jbe    c000196b <dlmallopt+0x43>
c0001966:	89 da                	mov    edx,ebx
c0001968:	83 e2 f8             	and    edx,0xfffffff8
c000196b:	a1 60 a0 02 c0       	mov    eax,ds:0xc002a060
c0001970:	83 e0 03             	and    eax,0x3
c0001973:	09 d0                	or     eax,edx
c0001975:	a3 60 a0 02 c0       	mov    ds:0xc002a060,eax
c000197a:	eb 31                	jmp    c00019ad <dlmallopt+0x85>
c000197c:	89 1d a4 a3 02 c0    	mov    DWORD PTR ds:0xc002a3a4,ebx
c0001982:	eb 06                	jmp    c000198a <dlmallopt+0x62>
c0001984:	89 1d a8 a3 02 c0    	mov    DWORD PTR ds:0xc002a3a8,ebx
c000198a:	be 01 00 00 00       	mov    esi,0x1
c000198f:	eb 1c                	jmp    c00019ad <dlmallopt+0x85>
c0001991:	89 1d ac a3 02 c0    	mov    DWORD PTR ds:0xc002a3ac,ebx
c0001997:	eb f1                	jmp    c000198a <dlmallopt+0x62>
c0001999:	31 f6                	xor    esi,esi
c000199b:	85 db                	test   ebx,ebx
c000199d:	75 0e                	jne    c00019ad <dlmallopt+0x85>
c000199f:	c7 05 b4 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a3b4,0x0
c00019a9:	eb df                	jmp    c000198a <dlmallopt+0x62>
c00019ab:	31 f6                	xor    esi,esi
c00019ad:	89 f0                	mov    eax,esi
c00019af:	5b                   	pop    ebx
c00019b0:	5e                   	pop    esi
c00019b1:	c3                   	ret    

c00019b2 <disk_status>:
c00019b2:	31 c0                	xor    eax,eax
c00019b4:	c3                   	ret    

c00019b5 <disk_initialize>:
c00019b5:	31 c0                	xor    eax,eax
c00019b7:	c3                   	ret    

c00019b8 <disk_read>:
c00019b8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019bd:	0f b6 04 85 a0 ba 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4560]
c00019c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c9:	e9 92 cb 01 00       	jmp    c001e560 <fatWrapperReadDisk>

c00019ce <disk_write>:
c00019ce:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019d3:	0f b6 04 85 a0 ba 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4560]
c00019db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019df:	e9 c3 cb 01 00       	jmp    c001e5a7 <fatWrapperWriteDisk>

c00019e4 <disk_ioctl>:
c00019e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019ed:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019f2:	0f b6 04 85 a0 ba 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4560]
c00019fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019fe:	e9 eb cb 01 00       	jmp    c001e5ee <fatWrapperIoctl>

c0001a03 <ld_word>:
c0001a03:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a07:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a0a:	c1 e2 08             	shl    edx,0x8
c0001a0d:	09 d0                	or     eax,edx
c0001a0f:	c3                   	ret    

c0001a10 <ld_dword>:
c0001a10:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a14:	89 d1                	mov    ecx,edx
c0001a16:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a1a:	c1 e1 08             	shl    ecx,0x8
c0001a1d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a20:	09 ca                	or     edx,ecx
c0001a22:	c1 e2 08             	shl    edx,0x8
c0001a25:	09 d0                	or     eax,edx
c0001a27:	c3                   	ret    

c0001a28 <ld_qword>:
c0001a28:	57                   	push   edi
c0001a29:	56                   	push   esi
c0001a2a:	53                   	push   ebx
c0001a2b:	31 db                	xor    ebx,ebx
c0001a2d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a30:	89 df                	mov    edi,ebx
c0001a32:	89 ce                	mov    esi,ecx
c0001a34:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a38:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a3c:	c1 e6 08             	shl    esi,0x8
c0001a3f:	09 f2                	or     edx,esi
c0001a41:	89 d6                	mov    esi,edx
c0001a43:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a47:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4b:	c1 e6 08             	shl    esi,0x8
c0001a4e:	09 f2                	or     edx,esi
c0001a50:	89 d6                	mov    esi,edx
c0001a52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a56:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a5a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a5d:	c1 e6 08             	shl    esi,0x8
c0001a60:	89 fb                	mov    ebx,edi
c0001a62:	09 f2                	or     edx,esi
c0001a64:	89 d1                	mov    ecx,edx
c0001a66:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a6a:	c1 e1 08             	shl    ecx,0x8
c0001a6d:	89 da                	mov    edx,ebx
c0001a6f:	09 c8                	or     eax,ecx
c0001a71:	5b                   	pop    ebx
c0001a72:	5e                   	pop    esi
c0001a73:	5f                   	pop    edi
c0001a74:	c3                   	ret    

c0001a75 <st_word>:
c0001a75:	66 89 10             	mov    WORD PTR [eax],dx
c0001a78:	c3                   	ret    

c0001a79 <st_dword>:
c0001a79:	89 10                	mov    DWORD PTR [eax],edx
c0001a7b:	c3                   	ret    

c0001a7c <st_qword>:
c0001a7c:	89 10                	mov    DWORD PTR [eax],edx
c0001a7e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a81:	c3                   	ret    

c0001a82 <mem_cpy>:
c0001a82:	85 c9                	test   ecx,ecx
c0001a84:	74 10                	je     c0001a96 <mem_cpy+0x14>
c0001a86:	57                   	push   edi
c0001a87:	01 c1                	add    ecx,eax
c0001a89:	56                   	push   esi
c0001a8a:	89 c7                	mov    edi,eax
c0001a8c:	89 d6                	mov    esi,edx
c0001a8e:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a8f:	39 f9                	cmp    ecx,edi
c0001a91:	75 fb                	jne    c0001a8e <mem_cpy+0xc>
c0001a93:	5e                   	pop    esi
c0001a94:	5f                   	pop    edi
c0001a95:	c3                   	ret    
c0001a96:	c3                   	ret    

c0001a97 <mem_set>:
c0001a97:	01 c1                	add    ecx,eax
c0001a99:	40                   	inc    eax
c0001a9a:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a9d:	39 c8                	cmp    eax,ecx
c0001a9f:	75 f8                	jne    c0001a99 <mem_set+0x2>
c0001aa1:	c3                   	ret    

c0001aa2 <mem_cmp>:
c0001aa2:	57                   	push   edi
c0001aa3:	56                   	push   esi
c0001aa4:	89 c6                	mov    esi,eax
c0001aa6:	53                   	push   ebx
c0001aa7:	46                   	inc    esi
c0001aa8:	42                   	inc    edx
c0001aa9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aad:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001ab1:	29 fb                	sub    ebx,edi
c0001ab3:	89 cf                	mov    edi,ecx
c0001ab5:	29 f7                	sub    edi,esi
c0001ab7:	01 c7                	add    edi,eax
c0001ab9:	74 04                	je     c0001abf <mem_cmp+0x1d>
c0001abb:	85 db                	test   ebx,ebx
c0001abd:	74 e8                	je     c0001aa7 <mem_cmp+0x5>
c0001abf:	89 d8                	mov    eax,ebx
c0001ac1:	5b                   	pop    ebx
c0001ac2:	5e                   	pop    esi
c0001ac3:	5f                   	pop    edi
c0001ac4:	c3                   	ret    

c0001ac5 <chk_chr>:
c0001ac5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ac8:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001acb:	74 07                	je     c0001ad4 <chk_chr+0xf>
c0001acd:	39 d1                	cmp    ecx,edx
c0001acf:	74 03                	je     c0001ad4 <chk_chr+0xf>
c0001ad1:	40                   	inc    eax
c0001ad2:	eb f1                	jmp    c0001ac5 <chk_chr>
c0001ad4:	89 c8                	mov    eax,ecx
c0001ad6:	c3                   	ret    

c0001ad7 <dbc_1st>:
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	c3                   	ret    

c0001ada <dbc_2nd>:
c0001ada:	31 c0                	xor    eax,eax
c0001adc:	c3                   	ret    

c0001add <tchar2uni>:
c0001add:	57                   	push   edi
c0001ade:	89 c7                	mov    edi,eax
c0001ae0:	56                   	push   esi
c0001ae1:	53                   	push   ebx
c0001ae2:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001ae4:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001ae6:	8d 73 01             	lea    esi,[ebx+0x1]
c0001ae9:	84 c9                	test   cl,cl
c0001aeb:	78 0a                	js     c0001af7 <tchar2uni+0x1a>
c0001aed:	0f b6 d1             	movzx  edx,cl
c0001af0:	89 f3                	mov    ebx,esi
c0001af2:	e9 9f 00 00 00       	jmp    c0001b96 <tchar2uni+0xb9>
c0001af7:	88 ca                	mov    dl,cl
c0001af9:	83 e2 e0             	and    edx,0xffffffe0
c0001afc:	80 fa c0             	cmp    dl,0xc0
c0001aff:	75 0c                	jne    c0001b0d <tchar2uni+0x30>
c0001b01:	89 ca                	mov    edx,ecx
c0001b03:	b9 01 00 00 00       	mov    ecx,0x1
c0001b08:	83 e2 1f             	and    edx,0x1f
c0001b0b:	eb 2e                	jmp    c0001b3b <tchar2uni+0x5e>
c0001b0d:	88 ca                	mov    dl,cl
c0001b0f:	83 e2 f0             	and    edx,0xfffffff0
c0001b12:	80 fa e0             	cmp    dl,0xe0
c0001b15:	75 0c                	jne    c0001b23 <tchar2uni+0x46>
c0001b17:	89 ca                	mov    edx,ecx
c0001b19:	b9 02 00 00 00       	mov    ecx,0x2
c0001b1e:	83 e2 0f             	and    edx,0xf
c0001b21:	eb 18                	jmp    c0001b3b <tchar2uni+0x5e>
c0001b23:	88 ca                	mov    dl,cl
c0001b25:	83 e2 f8             	and    edx,0xfffffff8
c0001b28:	88 d0                	mov    al,dl
c0001b2a:	83 ca ff             	or     edx,0xffffffff
c0001b2d:	3c f0                	cmp    al,0xf0
c0001b2f:	75 6c                	jne    c0001b9d <tchar2uni+0xc0>
c0001b31:	89 ca                	mov    edx,ecx
c0001b33:	b9 03 00 00 00       	mov    ecx,0x3
c0001b38:	83 e2 07             	and    edx,0x7
c0001b3b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b3f:	46                   	inc    esi
c0001b40:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b43:	88 c8                	mov    al,cl
c0001b45:	83 e0 c0             	and    eax,0xffffffc0
c0001b48:	3c 80                	cmp    al,0x80
c0001b4a:	75 4e                	jne    c0001b9a <tchar2uni+0xbd>
c0001b4c:	c1 e2 06             	shl    edx,0x6
c0001b4f:	83 e1 3f             	and    ecx,0x3f
c0001b52:	09 ca                	or     edx,ecx
c0001b54:	39 de                	cmp    esi,ebx
c0001b56:	75 e7                	jne    c0001b3f <tchar2uni+0x62>
c0001b58:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b5b:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b61:	77 37                	ja     c0001b9a <tchar2uni+0xbd>
c0001b63:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b69:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b6f:	76 29                	jbe    c0001b9a <tchar2uni+0xbd>
c0001b71:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b77:	76 1d                	jbe    c0001b96 <tchar2uni+0xb9>
c0001b79:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b7f:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b85:	c1 e1 06             	shl    ecx,0x6
c0001b88:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b8e:	09 ca                	or     edx,ecx
c0001b90:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b96:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b98:	eb 03                	jmp    c0001b9d <tchar2uni+0xc0>
c0001b9a:	83 ca ff             	or     edx,0xffffffff
c0001b9d:	5b                   	pop    ebx
c0001b9e:	89 d0                	mov    eax,edx
c0001ba0:	5e                   	pop    esi
c0001ba1:	5f                   	pop    edi
c0001ba2:	c3                   	ret    

c0001ba3 <put_utf>:
c0001ba3:	53                   	push   ebx
c0001ba4:	83 f8 7f             	cmp    eax,0x7f
c0001ba7:	89 c3                	mov    ebx,eax
c0001ba9:	b0 00                	mov    al,0x0
c0001bab:	77 11                	ja     c0001bbe <put_utf+0x1b>
c0001bad:	85 c9                	test   ecx,ecx
c0001baf:	0f 84 e5 00 00 00    	je     c0001c9a <put_utf+0xf7>
c0001bb5:	88 1a                	mov    BYTE PTR [edx],bl
c0001bb7:	b0 01                	mov    al,0x1
c0001bb9:	e9 dc 00 00 00       	jmp    c0001c9a <put_utf+0xf7>
c0001bbe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bc4:	77 23                	ja     c0001be9 <put_utf+0x46>
c0001bc6:	83 f9 01             	cmp    ecx,0x1
c0001bc9:	0f 86 cb 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001bcf:	89 d8                	mov    eax,ebx
c0001bd1:	83 e3 3f             	and    ebx,0x3f
c0001bd4:	c1 e8 06             	shr    eax,0x6
c0001bd7:	83 cb 80             	or     ebx,0xffffff80
c0001bda:	83 c8 c0             	or     eax,0xffffffc0
c0001bdd:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001be0:	88 02                	mov    BYTE PTR [edx],al
c0001be2:	b0 02                	mov    al,0x2
c0001be4:	e9 b1 00 00 00       	jmp    c0001c9a <put_utf+0xf7>
c0001be9:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bef:	77 40                	ja     c0001c31 <put_utf+0x8e>
c0001bf1:	83 f9 02             	cmp    ecx,0x2
c0001bf4:	0f 86 a0 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001bfa:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c00:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c06:	0f 86 8e 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001c0c:	89 d8                	mov    eax,ebx
c0001c0e:	c1 e8 0c             	shr    eax,0xc
c0001c11:	83 c8 e0             	or     eax,0xffffffe0
c0001c14:	88 02                	mov    BYTE PTR [edx],al
c0001c16:	89 d8                	mov    eax,ebx
c0001c18:	83 e3 3f             	and    ebx,0x3f
c0001c1b:	c1 e8 06             	shr    eax,0x6
c0001c1e:	83 cb 80             	or     ebx,0xffffff80
c0001c21:	83 e0 3f             	and    eax,0x3f
c0001c24:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c27:	83 c8 80             	or     eax,0xffffff80
c0001c2a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c2d:	b0 03                	mov    al,0x3
c0001c2f:	eb 69                	jmp    c0001c9a <put_utf+0xf7>
c0001c31:	83 f9 03             	cmp    ecx,0x3
c0001c34:	76 64                	jbe    c0001c9a <put_utf+0xf7>
c0001c36:	89 d9                	mov    ecx,ebx
c0001c38:	0f b7 c3             	movzx  eax,bx
c0001c3b:	66 31 c9             	xor    cx,cx
c0001c3e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c44:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c4a:	c1 e9 06             	shr    ecx,0x6
c0001c4d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c53:	77 43                	ja     c0001c98 <put_utf+0xf5>
c0001c55:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c5b:	77 3b                	ja     c0001c98 <put_utf+0xf5>
c0001c5d:	09 cb                	or     ebx,ecx
c0001c5f:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c65:	89 d8                	mov    eax,ebx
c0001c67:	c1 e8 12             	shr    eax,0x12
c0001c6a:	83 c8 f0             	or     eax,0xfffffff0
c0001c6d:	88 02                	mov    BYTE PTR [edx],al
c0001c6f:	89 d8                	mov    eax,ebx
c0001c71:	c1 e8 0c             	shr    eax,0xc
c0001c74:	83 e0 3f             	and    eax,0x3f
c0001c77:	83 c8 80             	or     eax,0xffffff80
c0001c7a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	83 e3 3f             	and    ebx,0x3f
c0001c82:	c1 e8 06             	shr    eax,0x6
c0001c85:	83 cb 80             	or     ebx,0xffffff80
c0001c88:	83 e0 3f             	and    eax,0x3f
c0001c8b:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c8e:	83 c8 80             	or     eax,0xffffff80
c0001c91:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c94:	b0 04                	mov    al,0x4
c0001c96:	eb 02                	jmp    c0001c9a <put_utf+0xf7>
c0001c98:	31 c0                	xor    eax,eax
c0001c9a:	5b                   	pop    ebx
c0001c9b:	c3                   	ret    

c0001c9c <clst2sect>:
c0001c9c:	89 c1                	mov    ecx,eax
c0001c9e:	83 ea 02             	sub    edx,0x2
c0001ca1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ca4:	83 e8 02             	sub    eax,0x2
c0001ca7:	39 d0                	cmp    eax,edx
c0001ca9:	76 0d                	jbe    c0001cb8 <clst2sect+0x1c>
c0001cab:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001caf:	f7 e2                	mul    edx
c0001cb1:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cb4:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cb7:	c3                   	ret    
c0001cb8:	31 c0                	xor    eax,eax
c0001cba:	31 d2                	xor    edx,edx
c0001cbc:	c3                   	ret    

c0001cbd <clmt_clust>:
c0001cbd:	57                   	push   edi
c0001cbe:	89 cf                	mov    edi,ecx
c0001cc0:	56                   	push   esi
c0001cc1:	89 d6                	mov    esi,edx
c0001cc3:	53                   	push   ebx
c0001cc4:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cc8:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001ccb:	89 f2                	mov    edx,esi
c0001ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ccf:	c1 ef 09             	shr    edi,0x9
c0001cd2:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001cd6:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001cd9:	89 f9                	mov    ecx,edi
c0001cdb:	31 ff                	xor    edi,edi
c0001cdd:	57                   	push   edi
c0001cde:	56                   	push   esi
c0001cdf:	51                   	push   ecx
c0001ce0:	52                   	push   edx
c0001ce1:	e8 76 17 02 00       	call   c002345c <__udivdi3>
c0001ce6:	83 c4 10             	add    esp,0x10
c0001ce9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001ceb:	85 d2                	test   edx,edx
c0001ced:	74 10                	je     c0001cff <clmt_clust+0x42>
c0001cef:	39 d0                	cmp    eax,edx
c0001cf1:	72 07                	jb     c0001cfa <clmt_clust+0x3d>
c0001cf3:	29 d0                	sub    eax,edx
c0001cf5:	83 c3 08             	add    ebx,0x8
c0001cf8:	eb ef                	jmp    c0001ce9 <clmt_clust+0x2c>
c0001cfa:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001cfd:	89 c2                	mov    edx,eax
c0001cff:	5b                   	pop    ebx
c0001d00:	89 d0                	mov    eax,edx
c0001d02:	5e                   	pop    esi
c0001d03:	5f                   	pop    edi
c0001d04:	c3                   	ret    

c0001d05 <pick_lfn>:
c0001d05:	55                   	push   ebp
c0001d06:	57                   	push   edi
c0001d07:	56                   	push   esi
c0001d08:	89 d6                	mov    esi,edx
c0001d0a:	53                   	push   ebx
c0001d0b:	89 c3                	mov    ebx,eax
c0001d0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d10:	e8 ee fc ff ff       	call   c0001a03 <ld_word>
c0001d15:	66 85 c0             	test   ax,ax
c0001d18:	74 04                	je     c0001d1e <pick_lfn+0x19>
c0001d1a:	31 c0                	xor    eax,eax
c0001d1c:	eb 5c                	jmp    c0001d7a <pick_lfn+0x75>
c0001d1e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d21:	bd 01 00 00 00       	mov    ebp,0x1
c0001d26:	83 e1 bf             	and    ecx,0xffffffbf
c0001d29:	31 ff                	xor    edi,edi
c0001d2b:	49                   	dec    ecx
c0001d2c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d2f:	0f b6 87 00 5e 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffda200]
c0001d36:	01 f0                	add    eax,esi
c0001d38:	e8 c6 fc ff ff       	call   c0001a03 <ld_word>
c0001d3d:	66 85 ed             	test   bp,bp
c0001d40:	74 11                	je     c0001d53 <pick_lfn+0x4e>
c0001d42:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d48:	77 d0                	ja     c0001d1a <pick_lfn+0x15>
c0001d4a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d4e:	89 c5                	mov    ebp,eax
c0001d50:	41                   	inc    ecx
c0001d51:	eb 04                	jmp    c0001d57 <pick_lfn+0x52>
c0001d53:	66 40                	inc    ax
c0001d55:	75 c3                	jne    c0001d1a <pick_lfn+0x15>
c0001d57:	47                   	inc    edi
c0001d58:	83 ff 0d             	cmp    edi,0xd
c0001d5b:	75 d2                	jne    c0001d2f <pick_lfn+0x2a>
c0001d5d:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d60:	74 13                	je     c0001d75 <pick_lfn+0x70>
c0001d62:	66 85 ed             	test   bp,bp
c0001d65:	74 0e                	je     c0001d75 <pick_lfn+0x70>
c0001d67:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d6d:	77 ab                	ja     c0001d1a <pick_lfn+0x15>
c0001d6f:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d75:	b8 01 00 00 00       	mov    eax,0x1
c0001d7a:	5b                   	pop    ebx
c0001d7b:	5e                   	pop    esi
c0001d7c:	5f                   	pop    edi
c0001d7d:	5d                   	pop    ebp
c0001d7e:	c3                   	ret    

c0001d7f <put_lfn>:
c0001d7f:	55                   	push   ebp
c0001d80:	31 ed                	xor    ebp,ebp
c0001d82:	57                   	push   edi
c0001d83:	89 d7                	mov    edi,edx
c0001d85:	56                   	push   esi
c0001d86:	31 f6                	xor    esi,esi
c0001d88:	53                   	push   ebx
c0001d89:	83 ec 08             	sub    esp,0x8
c0001d8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d8f:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d97:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d9d:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001da0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001da3:	31 d2                	xor    edx,edx
c0001da5:	e8 cb fc ff ff       	call   c0001a75 <st_word>
c0001daa:	0f b6 d9             	movzx  ebx,cl
c0001dad:	4b                   	dec    ebx
c0001dae:	6b db 0d             	imul   ebx,ebx,0xd
c0001db1:	66 83 fe ff          	cmp    si,0xffff
c0001db5:	74 08                	je     c0001dbf <put_lfn+0x40>
c0001db7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dba:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dbe:	43                   	inc    ebx
c0001dbf:	0f b6 85 00 5e 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffda200]
c0001dc6:	0f b7 d6             	movzx  edx,si
c0001dc9:	01 f8                	add    eax,edi
c0001dcb:	e8 a5 fc ff ff       	call   c0001a75 <st_word>
c0001dd0:	66 85 f6             	test   si,si
c0001dd3:	75 03                	jne    c0001dd8 <put_lfn+0x59>
c0001dd5:	83 ce ff             	or     esi,0xffffffff
c0001dd8:	45                   	inc    ebp
c0001dd9:	83 fd 0d             	cmp    ebp,0xd
c0001ddc:	75 d3                	jne    c0001db1 <put_lfn+0x32>
c0001dde:	66 46                	inc    si
c0001de0:	74 0a                	je     c0001dec <put_lfn+0x6d>
c0001de2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001de5:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001dea:	75 09                	jne    c0001df5 <put_lfn+0x76>
c0001dec:	88 c8                	mov    al,cl
c0001dee:	83 c8 40             	or     eax,0x40
c0001df1:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001df5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001df9:	88 07                	mov    BYTE PTR [edi],al
c0001dfb:	83 c4 08             	add    esp,0x8
c0001dfe:	5b                   	pop    ebx
c0001dff:	5e                   	pop    esi
c0001e00:	5f                   	pop    edi
c0001e01:	5d                   	pop    ebp
c0001e02:	c3                   	ret    

c0001e03 <gen_numname>:
c0001e03:	57                   	push   edi
c0001e04:	89 cf                	mov    edi,ecx
c0001e06:	56                   	push   esi
c0001e07:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e0c:	53                   	push   ebx
c0001e0d:	89 c6                	mov    esi,eax
c0001e0f:	83 ec 10             	sub    esp,0x10
c0001e12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e16:	e8 67 fc ff ff       	call   c0001a82 <mem_cpy>
c0001e1b:	83 fb 05             	cmp    ebx,0x5
c0001e1e:	76 2d                	jbe    c0001e4d <gen_numname+0x4a>
c0001e20:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e23:	66 85 c0             	test   ax,ax
c0001e26:	74 25                	je     c0001e4d <gen_numname+0x4a>
c0001e28:	83 c7 02             	add    edi,0x2
c0001e2b:	ba 10 00 00 00       	mov    edx,0x10
c0001e30:	01 db                	add    ebx,ebx
c0001e32:	89 c1                	mov    ecx,eax
c0001e34:	66 d1 e8             	shr    ax,1
c0001e37:	83 e1 01             	and    ecx,0x1
c0001e3a:	01 cb                	add    ebx,ecx
c0001e3c:	0f ba e3 10          	bt     ebx,0x10
c0001e40:	73 06                	jae    c0001e48 <gen_numname+0x45>
c0001e42:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e48:	4a                   	dec    edx
c0001e49:	75 e5                	jne    c0001e30 <gen_numname+0x2d>
c0001e4b:	eb d3                	jmp    c0001e20 <gen_numname+0x1d>
c0001e4d:	b8 07 00 00 00       	mov    eax,0x7
c0001e52:	88 d9                	mov    cl,bl
c0001e54:	83 e1 0f             	and    ecx,0xf
c0001e57:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e5a:	80 fa 39             	cmp    dl,0x39
c0001e5d:	76 03                	jbe    c0001e62 <gen_numname+0x5f>
c0001e5f:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e62:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e65:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e69:	89 da                	mov    edx,ebx
c0001e6b:	c1 ea 04             	shr    edx,0x4
c0001e6e:	83 fb 0f             	cmp    ebx,0xf
c0001e71:	76 06                	jbe    c0001e79 <gen_numname+0x76>
c0001e73:	89 c8                	mov    eax,ecx
c0001e75:	89 d3                	mov    ebx,edx
c0001e77:	eb d9                	jmp    c0001e52 <gen_numname+0x4f>
c0001e79:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e7e:	31 d2                	xor    edx,edx
c0001e80:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e83:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e86:	39 ca                	cmp    edx,ecx
c0001e88:	73 18                	jae    c0001ea2 <gen_numname+0x9f>
c0001e8a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e8d:	3c 20                	cmp    al,0x20
c0001e8f:	74 11                	je     c0001ea2 <gen_numname+0x9f>
c0001e91:	e8 41 fc ff ff       	call   c0001ad7 <dbc_1st>
c0001e96:	85 c0                	test   eax,eax
c0001e98:	74 05                	je     c0001e9f <gen_numname+0x9c>
c0001e9a:	39 d3                	cmp    ebx,edx
c0001e9c:	74 04                	je     c0001ea2 <gen_numname+0x9f>
c0001e9e:	42                   	inc    edx
c0001e9f:	42                   	inc    edx
c0001ea0:	eb e1                	jmp    c0001e83 <gen_numname+0x80>
c0001ea2:	b0 20                	mov    al,0x20
c0001ea4:	83 f9 07             	cmp    ecx,0x7
c0001ea7:	77 05                	ja     c0001eae <gen_numname+0xab>
c0001ea9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ead:	41                   	inc    ecx
c0001eae:	42                   	inc    edx
c0001eaf:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001eb3:	83 fa 07             	cmp    edx,0x7
c0001eb6:	76 ea                	jbe    c0001ea2 <gen_numname+0x9f>
c0001eb8:	83 c4 10             	add    esp,0x10
c0001ebb:	5b                   	pop    ebx
c0001ebc:	5e                   	pop    esi
c0001ebd:	5f                   	pop    edi
c0001ebe:	c3                   	ret    

c0001ebf <sum_sfn>:
c0001ebf:	31 c9                	xor    ecx,ecx
c0001ec1:	31 d2                	xor    edx,edx
c0001ec3:	d0 ca                	ror    dl,1
c0001ec5:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ec8:	41                   	inc    ecx
c0001ec9:	83 f9 0b             	cmp    ecx,0xb
c0001ecc:	75 f5                	jne    c0001ec3 <sum_sfn+0x4>
c0001ece:	88 d0                	mov    al,dl
c0001ed0:	c3                   	ret    

c0001ed1 <xdir_sum>:
c0001ed1:	56                   	push   esi
c0001ed2:	31 c9                	xor    ecx,ecx
c0001ed4:	53                   	push   ebx
c0001ed5:	31 d2                	xor    edx,edx
c0001ed7:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001edb:	43                   	inc    ebx
c0001edc:	c1 e3 05             	shl    ebx,0x5
c0001edf:	83 fa 02             	cmp    edx,0x2
c0001ee2:	74 0b                	je     c0001eef <xdir_sum+0x1e>
c0001ee4:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ee8:	66 d1 c9             	ror    cx,1
c0001eeb:	01 f1                	add    ecx,esi
c0001eed:	eb 05                	jmp    c0001ef4 <xdir_sum+0x23>
c0001eef:	ba 03 00 00 00       	mov    edx,0x3
c0001ef4:	42                   	inc    edx
c0001ef5:	39 d3                	cmp    ebx,edx
c0001ef7:	77 e6                	ja     c0001edf <xdir_sum+0xe>
c0001ef9:	89 c8                	mov    eax,ecx
c0001efb:	5b                   	pop    ebx
c0001efc:	5e                   	pop    esi
c0001efd:	c3                   	ret    

c0001efe <xsum32>:
c0001efe:	d1 ca                	ror    edx,1
c0001f00:	0f b6 c0             	movzx  eax,al
c0001f03:	01 d0                	add    eax,edx
c0001f05:	c3                   	ret    

c0001f06 <get_xfileinfo>:
c0001f06:	55                   	push   ebp
c0001f07:	31 c9                	xor    ecx,ecx
c0001f09:	57                   	push   edi
c0001f0a:	bd 40 00 00 00       	mov    ebp,0x40
c0001f0f:	56                   	push   esi
c0001f10:	31 ff                	xor    edi,edi
c0001f12:	53                   	push   ebx
c0001f13:	89 c6                	mov    esi,eax
c0001f15:	83 ec 0c             	sub    esp,0xc
c0001f18:	89 d3                	mov    ebx,edx
c0001f1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f21:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f25:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f28:	76 6d                	jbe    c0001f97 <get_xfileinfo+0x91>
c0001f2a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f30:	76 0b                	jbe    c0001f3d <get_xfileinfo+0x37>
c0001f32:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f36:	bf 01 00 00 00       	mov    edi,0x1
c0001f3b:	eb 63                	jmp    c0001fa0 <get_xfileinfo+0x9a>
c0001f3d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f43:	75 03                	jne    c0001f48 <get_xfileinfo+0x42>
c0001f45:	83 c5 02             	add    ebp,0x2
c0001f48:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f4b:	83 c5 02             	add    ebp,0x2
c0001f4e:	e8 b0 fa ff ff       	call   c0001a03 <ld_word>
c0001f53:	ff 04 24             	inc    DWORD PTR [esp]
c0001f56:	66 85 c9             	test   cx,cx
c0001f59:	75 0d                	jne    c0001f68 <get_xfileinfo+0x62>
c0001f5b:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f61:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f66:	76 2b                	jbe    c0001f93 <get_xfileinfo+0x8d>
c0001f68:	c1 e1 10             	shl    ecx,0x10
c0001f6b:	ba ff 00 00 00       	mov    edx,0xff
c0001f70:	0f b7 c0             	movzx  eax,ax
c0001f73:	29 fa                	sub    edx,edi
c0001f75:	09 c8                	or     eax,ecx
c0001f77:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f7b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f83:	e8 1b fc ff ff       	call   c0001ba3 <put_utf>
c0001f88:	84 c0                	test   al,al
c0001f8a:	74 a6                	je     c0001f32 <get_xfileinfo+0x2c>
c0001f8c:	0f b6 c0             	movzx  eax,al
c0001f8f:	01 c7                	add    edi,eax
c0001f91:	31 c0                	xor    eax,eax
c0001f93:	89 c1                	mov    ecx,eax
c0001f95:	eb 8a                	jmp    c0001f21 <get_xfileinfo+0x1b>
c0001f97:	85 ff                	test   edi,edi
c0001f99:	74 97                	je     c0001f32 <get_xfileinfo+0x2c>
c0001f9b:	66 85 c9             	test   cx,cx
c0001f9e:	75 92                	jne    c0001f32 <get_xfileinfo+0x2c>
c0001fa0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fa5:	31 c0                	xor    eax,eax
c0001fa7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fab:	31 d2                	xor    edx,edx
c0001fad:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fb0:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fb3:	80 e1 10             	and    cl,0x10
c0001fb6:	75 08                	jne    c0001fc0 <get_xfileinfo+0xba>
c0001fb8:	8d 46 38             	lea    eax,[esi+0x38]
c0001fbb:	e8 68 fa ff ff       	call   c0001a28 <ld_qword>
c0001fc0:	89 03                	mov    DWORD PTR [ebx],eax
c0001fc2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fc5:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fc8:	e8 36 fa ff ff       	call   c0001a03 <ld_word>
c0001fcd:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fd1:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fd4:	e8 2a fa ff ff       	call   c0001a03 <ld_word>
c0001fd9:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001fdd:	83 c4 0c             	add    esp,0xc
c0001fe0:	5b                   	pop    ebx
c0001fe1:	5e                   	pop    esi
c0001fe2:	5f                   	pop    edi
c0001fe3:	5d                   	pop    ebp
c0001fe4:	c3                   	ret    

c0001fe5 <get_ldnumber>:
c0001fe5:	8b 10                	mov    edx,DWORD PTR [eax]
c0001fe7:	85 d2                	test   edx,edx
c0001fe9:	74 14                	je     c0001fff <get_ldnumber+0x1a>
c0001feb:	56                   	push   esi
c0001fec:	53                   	push   ebx
c0001fed:	89 d3                	mov    ebx,edx
c0001fef:	43                   	inc    ebx
c0001ff0:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001ff3:	80 f9 1f             	cmp    cl,0x1f
c0001ff6:	76 0d                	jbe    c0002005 <get_ldnumber+0x20>
c0001ff8:	80 f9 3a             	cmp    cl,0x3a
c0001ffb:	75 f2                	jne    c0001fef <get_ldnumber+0xa>
c0001ffd:	eb 0a                	jmp    c0002009 <get_ldnumber+0x24>
c0001fff:	83 c9 ff             	or     ecx,0xffffffff
c0002002:	89 c8                	mov    eax,ecx
c0002004:	c3                   	ret    
c0002005:	31 c9                	xor    ecx,ecx
c0002007:	eb 24                	jmp    c000202d <get_ldnumber+0x48>
c0002009:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000200c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000200f:	80 f9 09             	cmp    cl,0x9
c0002012:	77 16                	ja     c000202a <get_ldnumber+0x45>
c0002014:	83 c2 02             	add    edx,0x2
c0002017:	83 c9 ff             	or     ecx,0xffffffff
c000201a:	39 d3                	cmp    ebx,edx
c000201c:	75 0f                	jne    c000202d <get_ldnumber+0x48>
c000201e:	89 f2                	mov    edx,esi
c0002020:	89 18                	mov    DWORD PTR [eax],ebx
c0002022:	0f be ca             	movsx  ecx,dl
c0002025:	83 e9 30             	sub    ecx,0x30
c0002028:	eb 03                	jmp    c000202d <get_ldnumber+0x48>
c000202a:	83 c9 ff             	or     ecx,0xffffffff
c000202d:	89 c8                	mov    eax,ecx
c000202f:	5b                   	pop    ebx
c0002030:	5e                   	pop    esi
c0002031:	c3                   	ret    

c0002032 <crc32>:
c0002032:	56                   	push   esi
c0002033:	89 d6                	mov    esi,edx
c0002035:	53                   	push   ebx
c0002036:	b2 01                	mov    dl,0x1
c0002038:	bb 08 00 00 00       	mov    ebx,0x8
c000203d:	89 f1                	mov    ecx,esi
c000203f:	84 d1                	test   cl,dl
c0002041:	0f 95 c1             	setne  cl
c0002044:	0f b6 c9             	movzx  ecx,cl
c0002047:	31 c1                	xor    ecx,eax
c0002049:	89 c8                	mov    eax,ecx
c000204b:	d1 e8                	shr    eax,1
c000204d:	80 e1 01             	and    cl,0x1
c0002050:	74 05                	je     c0002057 <crc32+0x25>
c0002052:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002057:	d1 e2                	shl    edx,1
c0002059:	4b                   	dec    ebx
c000205a:	75 e1                	jne    c000203d <crc32+0xb>
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	c3                   	ret    

c000205f <test_gpt_header>:
c000205f:	55                   	push   ebp
c0002060:	b9 10 00 00 00       	mov    ecx,0x10
c0002065:	57                   	push   edi
c0002066:	ba 00 5d 02 c0       	mov    edx,0xc0025d00
c000206b:	56                   	push   esi
c000206c:	31 ff                	xor    edi,edi
c000206e:	53                   	push   ebx
c000206f:	89 c3                	mov    ebx,eax
c0002071:	e8 2c fa ff ff       	call   c0001aa2 <mem_cmp>
c0002076:	85 c0                	test   eax,eax
c0002078:	75 55                	jne    c00020cf <test_gpt_header+0x70>
c000207a:	89 c7                	mov    edi,eax
c000207c:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002081:	83 ce ff             	or     esi,0xffffffff
c0002084:	31 d2                	xor    edx,edx
c0002086:	83 fd 03             	cmp    ebp,0x3
c0002089:	76 05                	jbe    c0002090 <test_gpt_header+0x31>
c000208b:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002090:	89 f0                	mov    eax,esi
c0002092:	45                   	inc    ebp
c0002093:	e8 9a ff ff ff       	call   c0002032 <crc32>
c0002098:	83 fd 4c             	cmp    ebp,0x4c
c000209b:	89 c6                	mov    esi,eax
c000209d:	75 e5                	jne    c0002084 <test_gpt_header+0x25>
c000209f:	8d 43 10             	lea    eax,[ebx+0x10]
c00020a2:	f7 d6                	not    esi
c00020a4:	e8 67 f9 ff ff       	call   c0001a10 <ld_dword>
c00020a9:	39 c6                	cmp    esi,eax
c00020ab:	75 22                	jne    c00020cf <test_gpt_header+0x70>
c00020ad:	8d 43 54             	lea    eax,[ebx+0x54]
c00020b0:	e8 5b f9 ff ff       	call   c0001a10 <ld_dword>
c00020b5:	83 c0 80             	add    eax,0xffffff80
c00020b8:	75 15                	jne    c00020cf <test_gpt_header+0x70>
c00020ba:	8d 43 50             	lea    eax,[ebx+0x50]
c00020bd:	e8 4e f9 ff ff       	call   c0001a10 <ld_dword>
c00020c2:	3d 80 00 00 00       	cmp    eax,0x80
c00020c7:	0f 96 c0             	setbe  al
c00020ca:	0f b6 c0             	movzx  eax,al
c00020cd:	89 c7                	mov    edi,eax
c00020cf:	5b                   	pop    ebx
c00020d0:	89 f8                	mov    eax,edi
c00020d2:	5e                   	pop    esi
c00020d3:	5f                   	pop    edi
c00020d4:	5d                   	pop    ebp
c00020d5:	c3                   	ret    

c00020d6 <make_rand>:
c00020d6:	56                   	push   esi
c00020d7:	85 c0                	test   eax,eax
c00020d9:	53                   	push   ebx
c00020da:	75 05                	jne    c00020e1 <make_rand+0xb>
c00020dc:	b8 01 00 00 00       	mov    eax,0x1
c00020e1:	01 d1                	add    ecx,edx
c00020e3:	bb 08 00 00 00       	mov    ebx,0x8
c00020e8:	89 c6                	mov    esi,eax
c00020ea:	d1 e8                	shr    eax,1
c00020ec:	83 e6 01             	and    esi,0x1
c00020ef:	85 f6                	test   esi,esi
c00020f1:	74 05                	je     c00020f8 <make_rand+0x22>
c00020f3:	35 00 00 00 a3       	xor    eax,0xa3000000
c00020f8:	4b                   	dec    ebx
c00020f9:	75 ed                	jne    c00020e8 <make_rand+0x12>
c00020fb:	42                   	inc    edx
c00020fc:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c00020ff:	39 ca                	cmp    edx,ecx
c0002101:	75 e0                	jne    c00020e3 <make_rand+0xd>
c0002103:	5b                   	pop    ebx
c0002104:	5e                   	pop    esi
c0002105:	c3                   	ret    

c0002106 <validate>:
c0002106:	56                   	push   esi
c0002107:	53                   	push   ebx
c0002108:	89 d6                	mov    esi,edx
c000210a:	51                   	push   ecx
c000210b:	85 c0                	test   eax,eax
c000210d:	75 09                	jne    c0002118 <validate+0x12>
c000210f:	b8 09 00 00 00       	mov    eax,0x9
c0002114:	31 c9                	xor    ecx,ecx
c0002116:	eb 2f                	jmp    c0002147 <validate+0x41>
c0002118:	89 c3                	mov    ebx,eax
c000211a:	8b 00                	mov    eax,DWORD PTR [eax]
c000211c:	85 c0                	test   eax,eax
c000211e:	74 ef                	je     c000210f <validate+0x9>
c0002120:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002123:	74 ea                	je     c000210f <validate+0x9>
c0002125:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002129:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000212d:	75 e0                	jne    c000210f <validate+0x9>
c000212f:	83 ec 0c             	sub    esp,0xc
c0002132:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002136:	50                   	push   eax
c0002137:	e8 76 f8 ff ff       	call   c00019b2 <disk_status>
c000213c:	83 c4 10             	add    esp,0x10
c000213f:	a8 01                	test   al,0x1
c0002141:	75 cc                	jne    c000210f <validate+0x9>
c0002143:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002145:	31 c0                	xor    eax,eax
c0002147:	89 0e                	mov    DWORD PTR [esi],ecx
c0002149:	5a                   	pop    edx
c000214a:	5b                   	pop    ebx
c000214b:	5e                   	pop    esi
c000214c:	c3                   	ret    

c000214d <sync_window>:
c000214d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002151:	0f 84 85 00 00 00    	je     c00021dc <sync_window+0x8f>
c0002157:	55                   	push   ebp
c0002158:	8d 68 54             	lea    ebp,[eax+0x54]
c000215b:	57                   	push   edi
c000215c:	56                   	push   esi
c000215d:	53                   	push   ebx
c000215e:	89 c3                	mov    ebx,eax
c0002160:	83 ec 28             	sub    esp,0x28
c0002163:	6a 01                	push   0x1
c0002165:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002168:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000216b:	55                   	push   ebp
c000216c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002170:	50                   	push   eax
c0002171:	e8 58 f8 ff ff       	call   c00019ce <disk_write>
c0002176:	83 c4 20             	add    esp,0x20
c0002179:	ba 01 00 00 00       	mov    edx,0x1
c000217e:	85 c0                	test   eax,eax
c0002180:	75 50                	jne    c00021d2 <sync_window+0x85>
c0002182:	31 ff                	xor    edi,edi
c0002184:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002187:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000218b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000218f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002192:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002195:	89 c6                	mov    esi,eax
c0002197:	89 d7                	mov    edi,edx
c0002199:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000219c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021a0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021a3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021a7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021ab:	73 23                	jae    c00021d0 <sync_window+0x83>
c00021ad:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021b1:	75 1d                	jne    c00021d0 <sync_window+0x83>
c00021b3:	83 ec 0c             	sub    esp,0xc
c00021b6:	6a 01                	push   0x1
c00021b8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021bc:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021c0:	52                   	push   edx
c00021c1:	50                   	push   eax
c00021c2:	55                   	push   ebp
c00021c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021c7:	50                   	push   eax
c00021c8:	e8 01 f8 ff ff       	call   c00019ce <disk_write>
c00021cd:	83 c4 20             	add    esp,0x20
c00021d0:	31 d2                	xor    edx,edx
c00021d2:	83 c4 1c             	add    esp,0x1c
c00021d5:	89 d0                	mov    eax,edx
c00021d7:	5b                   	pop    ebx
c00021d8:	5e                   	pop    esi
c00021d9:	5f                   	pop    edi
c00021da:	5d                   	pop    ebp
c00021db:	c3                   	ret    
c00021dc:	31 d2                	xor    edx,edx
c00021de:	89 d0                	mov    eax,edx
c00021e0:	c3                   	ret    

c00021e1 <move_window>:
c00021e1:	56                   	push   esi
c00021e2:	53                   	push   ebx
c00021e3:	89 c3                	mov    ebx,eax
c00021e5:	83 ec 14             	sub    esp,0x14
c00021e8:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021eb:	75 07                	jne    c00021f4 <move_window+0x13>
c00021ed:	31 f6                	xor    esi,esi
c00021ef:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c00021f2:	74 59                	je     c000224d <move_window+0x6c>
c00021f4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00021f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00021fc:	89 d8                	mov    eax,ebx
c00021fe:	e8 4a ff ff ff       	call   c000214d <sync_window>
c0002203:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002207:	89 c6                	mov    esi,eax
c0002209:	85 c0                	test   eax,eax
c000220b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000220f:	75 3c                	jne    c000224d <move_window+0x6c>
c0002211:	83 ec 0c             	sub    esp,0xc
c0002214:	8d 43 54             	lea    eax,[ebx+0x54]
c0002217:	6a 01                	push   0x1
c0002219:	51                   	push   ecx
c000221a:	52                   	push   edx
c000221b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000221f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002223:	50                   	push   eax
c0002224:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002228:	50                   	push   eax
c0002229:	e8 8a f7 ff ff       	call   c00019b8 <disk_read>
c000222e:	83 c4 20             	add    esp,0x20
c0002231:	85 c0                	test   eax,eax
c0002233:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002237:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000223b:	74 0a                	je     c0002247 <move_window+0x66>
c000223d:	83 ca ff             	or     edx,0xffffffff
c0002240:	be 01 00 00 00       	mov    esi,0x1
c0002245:	89 d1                	mov    ecx,edx
c0002247:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000224a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000224d:	89 f0                	mov    eax,esi
c000224f:	83 c4 14             	add    esp,0x14
c0002252:	5b                   	pop    ebx
c0002253:	5e                   	pop    esi
c0002254:	c3                   	ret    

c0002255 <check_fs>:
c0002255:	53                   	push   ebx
c0002256:	89 c3                	mov    ebx,eax
c0002258:	83 ec 08             	sub    esp,0x8
c000225b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000225f:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002266:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000226d:	e8 6f ff ff ff       	call   c00021e1 <move_window>
c0002272:	ba 04 00 00 00       	mov    edx,0x4
c0002277:	85 c0                	test   eax,eax
c0002279:	0f 85 89 00 00 00    	jne    c0002308 <check_fs+0xb3>
c000227f:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002285:	e8 79 f7 ff ff       	call   c0001a03 <ld_word>
c000228a:	ba 03 00 00 00       	mov    edx,0x3
c000228f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002293:	75 73                	jne    c0002308 <check_fs+0xb3>
c0002295:	ba 20 5e 02 c0       	mov    edx,0xc0025e20
c000229a:	8d 43 54             	lea    eax,[ebx+0x54]
c000229d:	b9 0b 00 00 00       	mov    ecx,0xb
c00022a2:	e8 fb f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022a7:	ba 01 00 00 00       	mov    edx,0x1
c00022ac:	85 c0                	test   eax,eax
c00022ae:	74 58                	je     c0002308 <check_fs+0xb3>
c00022b0:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022b3:	8d 50 18             	lea    edx,[eax+0x18]
c00022b6:	80 fa 01             	cmp    dl,0x1
c00022b9:	76 09                	jbe    c00022c4 <check_fs+0x6f>
c00022bb:	ba 02 00 00 00       	mov    edx,0x2
c00022c0:	3c eb                	cmp    al,0xeb
c00022c2:	75 44                	jne    c0002308 <check_fs+0xb3>
c00022c4:	ba 14 8b 02 c0       	mov    edx,0xc0028b14
c00022c9:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022cf:	b9 03 00 00 00       	mov    ecx,0x3
c00022d4:	e8 c9 f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022d9:	31 d2                	xor    edx,edx
c00022db:	85 c0                	test   eax,eax
c00022dd:	74 29                	je     c0002308 <check_fs+0xb3>
c00022df:	ba 2c 5e 02 c0       	mov    edx,0xc0025e2c
c00022e4:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022ea:	b9 05 00 00 00       	mov    ecx,0x5
c00022ef:	e8 ae f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022f4:	31 d2                	xor    edx,edx
c00022f6:	85 c0                	test   eax,eax
c00022f8:	74 0e                	je     c0002308 <check_fs+0xb3>
c00022fa:	31 d2                	xor    edx,edx
c00022fc:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002303:	0f 95 c2             	setne  dl
c0002306:	01 d2                	add    edx,edx
c0002308:	89 d0                	mov    eax,edx
c000230a:	83 c4 08             	add    esp,0x8
c000230d:	5b                   	pop    ebx
c000230e:	c3                   	ret    

c000230f <find_volume>:
c000230f:	55                   	push   ebp
c0002310:	31 c9                	xor    ecx,ecx
c0002312:	57                   	push   edi
c0002313:	56                   	push   esi
c0002314:	89 d6                	mov    esi,edx
c0002316:	53                   	push   ebx
c0002317:	31 d2                	xor    edx,edx
c0002319:	83 ec 3c             	sub    esp,0x3c
c000231c:	89 c3                	mov    ebx,eax
c000231e:	e8 32 ff ff ff       	call   c0002255 <check_fs>
c0002323:	83 f8 02             	cmp    eax,0x2
c0002326:	74 0e                	je     c0002336 <find_volume+0x27>
c0002328:	0f 87 5d 01 00 00    	ja     c000248b <find_volume+0x17c>
c000232e:	85 f6                	test   esi,esi
c0002330:	0f 84 55 01 00 00    	je     c000248b <find_volume+0x17c>
c0002336:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000233d:	0f 85 dd 00 00 00    	jne    c0002420 <find_volume+0x111>
c0002343:	31 c9                	xor    ecx,ecx
c0002345:	ba 01 00 00 00       	mov    edx,0x1
c000234a:	89 d8                	mov    eax,ebx
c000234c:	e8 90 fe ff ff       	call   c00021e1 <move_window>
c0002351:	85 c0                	test   eax,eax
c0002353:	74 0a                	je     c000235f <find_volume+0x50>
c0002355:	b8 04 00 00 00       	mov    eax,0x4
c000235a:	e9 2c 01 00 00       	jmp    c000248b <find_volume+0x17c>
c000235f:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002362:	89 e8                	mov    eax,ebp
c0002364:	e8 f6 fc ff ff       	call   c000205f <test_gpt_header>
c0002369:	85 c0                	test   eax,eax
c000236b:	75 0a                	jne    c0002377 <find_volume+0x68>
c000236d:	b8 03 00 00 00       	mov    eax,0x3
c0002372:	e9 14 01 00 00       	jmp    c000248b <find_volume+0x17c>
c0002377:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000237d:	e8 8e f6 ff ff       	call   c0001a10 <ld_dword>
c0002382:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002386:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000238c:	e8 97 f6 ff ff       	call   c0001a28 <ld_qword>
c0002391:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002399:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000239d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023ad:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023b1:	74 ba                	je     c000236d <find_volume+0x5e>
c00023b3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023b7:	31 c9                	xor    ecx,ecx
c00023b9:	c1 e7 07             	shl    edi,0x7
c00023bc:	89 d8                	mov    eax,ebx
c00023be:	89 fa                	mov    edx,edi
c00023c0:	c1 ea 09             	shr    edx,0x9
c00023c3:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023c7:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023cb:	e8 11 fe ff ff       	call   c00021e1 <move_window>
c00023d0:	85 c0                	test   eax,eax
c00023d2:	75 81                	jne    c0002355 <find_volume+0x46>
c00023d4:	81 e7 80 01 00 00    	and    edi,0x180
c00023da:	b9 10 00 00 00       	mov    ecx,0x10
c00023df:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023e3:	ba 10 5e 02 c0       	mov    edx,0xc0025e10
c00023e8:	e8 b5 f6 ff ff       	call   c0001aa2 <mem_cmp>
c00023ed:	85 c0                	test   eax,eax
c00023ef:	75 29                	jne    c000241a <find_volume+0x10b>
c00023f1:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00023f5:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c00023f9:	e8 2a f6 ff ff       	call   c0001a28 <ld_qword>
c00023fe:	89 d1                	mov    ecx,edx
c0002400:	89 c2                	mov    edx,eax
c0002402:	89 d8                	mov    eax,ebx
c0002404:	e8 4c fe ff ff       	call   c0002255 <check_fs>
c0002409:	85 f6                	test   esi,esi
c000240b:	75 07                	jne    c0002414 <find_volume+0x105>
c000240d:	83 f8 01             	cmp    eax,0x1
c0002410:	77 08                	ja     c000241a <find_volume+0x10b>
c0002412:	eb 77                	jmp    c000248b <find_volume+0x17c>
c0002414:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002418:	74 71                	je     c000248b <find_volume+0x17c>
c000241a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000241e:	eb 89                	jmp    c00023a9 <find_volume+0x9a>
c0002420:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002424:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000242a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002430:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002434:	89 cd                	mov    ebp,ecx
c0002436:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000243a:	89 f8                	mov    eax,edi
c000243c:	83 c7 10             	add    edi,0x10
c000243f:	e8 cc f5 ff ff       	call   c0001a10 <ld_dword>
c0002444:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002448:	89 01                	mov    DWORD PTR [ecx],eax
c000244a:	83 c1 04             	add    ecx,0x4
c000244d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002451:	75 e3                	jne    c0002436 <find_volume+0x127>
c0002453:	31 ff                	xor    edi,edi
c0002455:	85 f6                	test   esi,esi
c0002457:	74 03                	je     c000245c <find_volume+0x14d>
c0002459:	8d 7e ff             	lea    edi,[esi-0x1]
c000245c:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002460:	85 d2                	test   edx,edx
c0002462:	74 14                	je     c0002478 <find_volume+0x169>
c0002464:	31 c9                	xor    ecx,ecx
c0002466:	89 d8                	mov    eax,ebx
c0002468:	e8 e8 fd ff ff       	call   c0002255 <check_fs>
c000246d:	83 f8 01             	cmp    eax,0x1
c0002470:	76 19                	jbe    c000248b <find_volume+0x17c>
c0002472:	85 f6                	test   esi,esi
c0002474:	74 0f                	je     c0002485 <find_volume+0x176>
c0002476:	eb 13                	jmp    c000248b <find_volume+0x17c>
c0002478:	85 f6                	test   esi,esi
c000247a:	0f 85 ed fe ff ff    	jne    c000236d <find_volume+0x5e>
c0002480:	b8 03 00 00 00       	mov    eax,0x3
c0002485:	47                   	inc    edi
c0002486:	83 ff 03             	cmp    edi,0x3
c0002489:	76 d1                	jbe    c000245c <find_volume+0x14d>
c000248b:	83 c4 3c             	add    esp,0x3c
c000248e:	5b                   	pop    ebx
c000248f:	5e                   	pop    esi
c0002490:	5f                   	pop    edi
c0002491:	5d                   	pop    ebp
c0002492:	c3                   	ret    

c0002493 <mount_volume>:
c0002493:	55                   	push   ebp
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 3c             	sub    esp,0x3c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024ab:	e8 35 fb ff ff       	call   c0001fe5 <get_ldnumber>
c00024b0:	85 c0                	test   eax,eax
c00024b2:	0f 88 3a 05 00 00    	js     c00029f2 <mount_volume+0x55f>
c00024b8:	8b 2c 85 00 a4 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd5c00]
c00024bf:	89 c6                	mov    esi,eax
c00024c1:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c6:	85 ed                	test   ebp,ebp
c00024c8:	0f 84 24 05 00 00    	je     c00029f2 <mount_volume+0x55f>
c00024ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024d2:	83 e7 fe             	and    edi,0xfffffffe
c00024d5:	89 2a                	mov    DWORD PTR [edx],ebp
c00024d7:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024db:	74 32                	je     c000250f <mount_volume+0x7c>
c00024dd:	83 ec 0c             	sub    esp,0xc
c00024e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024e4:	50                   	push   eax
c00024e5:	e8 c8 f4 ff ff       	call   c00019b2 <disk_status>
c00024ea:	83 c4 10             	add    esp,0x10
c00024ed:	a8 01                	test   al,0x1
c00024ef:	75 1e                	jne    c000250f <mount_volume+0x7c>
c00024f1:	31 db                	xor    ebx,ebx
c00024f3:	89 f9                	mov    ecx,edi
c00024f5:	84 c9                	test   cl,cl
c00024f7:	0f 84 f5 04 00 00    	je     c00029f2 <mount_volume+0x55f>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 ed 04 00 00    	je     c00029f2 <mount_volume+0x55f>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 e3 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	89 f0                	mov    eax,esi
c0002514:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002518:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000251b:	0f b6 f0             	movzx  esi,al
c000251e:	bb 03 00 00 00       	mov    ebx,0x3
c0002523:	56                   	push   esi
c0002524:	e8 8c f4 ff ff       	call   c00019b5 <disk_initialize>
c0002529:	83 c4 10             	add    esp,0x10
c000252c:	a8 01                	test   al,0x1
c000252e:	0f 85 be 04 00 00    	jne    c00029f2 <mount_volume+0x55f>
c0002534:	89 f9                	mov    ecx,edi
c0002536:	84 c9                	test   cl,cl
c0002538:	74 04                	je     c000253e <mount_volume+0xab>
c000253a:	a8 04                	test   al,0x4
c000253c:	75 c7                	jne    c0002505 <mount_volume+0x72>
c000253e:	31 d2                	xor    edx,edx
c0002540:	89 e8                	mov    eax,ebp
c0002542:	e8 c8 fd ff ff       	call   c000230f <find_volume>
c0002547:	83 f8 04             	cmp    eax,0x4
c000254a:	75 0a                	jne    c0002556 <mount_volume+0xc3>
c000254c:	bb 01 00 00 00       	mov    ebx,0x1
c0002551:	e9 9c 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c0002556:	83 f8 01             	cmp    eax,0x1
c0002559:	76 0a                	jbe    c0002565 <mount_volume+0xd2>
c000255b:	bb 0d 00 00 00       	mov    ebx,0xd
c0002560:	e9 8d 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c0002565:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002568:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000256b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000256f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002573:	75 17                	jne    c000258c <mount_volume+0xf9>
c0002575:	b8 0b 00 00 00       	mov    eax,0xb
c000257a:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000257f:	75 da                	jne    c000255b <mount_volume+0xc8>
c0002581:	40                   	inc    eax
c0002582:	83 f8 40             	cmp    eax,0x40
c0002585:	75 f3                	jne    c000257a <mount_volume+0xe7>
c0002587:	e9 5a 02 00 00       	jmp    c00027e6 <mount_volume+0x353>
c000258c:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000258f:	e8 6f f4 ff ff       	call   c0001a03 <ld_word>
c0002594:	66 3d 00 02          	cmp    ax,0x200
c0002598:	75 c1                	jne    c000255b <mount_volume+0xc8>
c000259a:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000259d:	e8 61 f4 ff ff       	call   c0001a03 <ld_word>
c00025a2:	0f b7 c0             	movzx  eax,ax
c00025a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025a9:	85 c0                	test   eax,eax
c00025ab:	75 0c                	jne    c00025b9 <mount_volume+0x126>
c00025ad:	8d 45 78             	lea    eax,[ebp+0x78]
c00025b0:	e8 5b f4 ff ff       	call   c0001a10 <ld_dword>
c00025b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025bd:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025c0:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025c3:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025c7:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025ca:	48                   	dec    eax
c00025cb:	3c 01                	cmp    al,0x1
c00025cd:	77 8c                	ja     c000255b <mount_volume+0xc8>
c00025cf:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025d3:	89 c3                	mov    ebx,eax
c00025d5:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025d9:	66 85 c0             	test   ax,ax
c00025dc:	0f 84 79 ff ff ff    	je     c000255b <mount_volume+0xc8>
c00025e2:	8d 40 ff             	lea    eax,[eax-0x1]
c00025e5:	85 d8                	test   eax,ebx
c00025e7:	0f 85 6e ff ff ff    	jne    c000255b <mount_volume+0xc8>
c00025ed:	8d 45 65             	lea    eax,[ebp+0x65]
c00025f0:	e8 0e f4 ff ff       	call   c0001a03 <ld_word>
c00025f5:	89 c7                	mov    edi,eax
c00025f7:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c00025fb:	a8 0f                	test   al,0xf
c00025fd:	0f 85 58 ff ff ff    	jne    c000255b <mount_volume+0xc8>
c0002603:	8d 45 67             	lea    eax,[ebp+0x67]
c0002606:	e8 f8 f3 ff ff       	call   c0001a03 <ld_word>
c000260b:	0f b7 f0             	movzx  esi,ax
c000260e:	85 f6                	test   esi,esi
c0002610:	75 0a                	jne    c000261c <mount_volume+0x189>
c0002612:	8d 45 74             	lea    eax,[ebp+0x74]
c0002615:	e8 f6 f3 ff ff       	call   c0001a10 <ld_dword>
c000261a:	89 c6                	mov    esi,eax
c000261c:	8d 45 62             	lea    eax,[ebp+0x62]
c000261f:	e8 df f3 ff ff       	call   c0001a03 <ld_word>
c0002624:	66 85 c0             	test   ax,ax
c0002627:	0f 84 2e ff ff ff    	je     c000255b <mount_volume+0xc8>
c000262d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002632:	0f b7 c8             	movzx  ecx,ax
c0002635:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000263a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000263e:	89 fa                	mov    edx,edi
c0002640:	66 c1 ea 04          	shr    dx,0x4
c0002644:	0f b7 d2             	movzx  edx,dx
c0002647:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000264b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000264e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002652:	39 c6                	cmp    esi,eax
c0002654:	0f 82 01 ff ff ff    	jb     c000255b <mount_volume+0xc8>
c000265a:	29 c6                	sub    esi,eax
c000265c:	31 d2                	xor    edx,edx
c000265e:	89 f0                	mov    eax,esi
c0002660:	f7 f3                	div    ebx
c0002662:	39 de                	cmp    esi,ebx
c0002664:	0f 82 f1 fe ff ff    	jb     c000255b <mount_volume+0xc8>
c000266a:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000266f:	0f 87 e6 fe ff ff    	ja     c000255b <mount_volume+0xc8>
c0002675:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000267a:	0f 86 63 03 00 00    	jbe    c00029e3 <mount_volume+0x550>
c0002680:	bb 03 00 00 00       	mov    ebx,0x3
c0002685:	8d 70 02             	lea    esi,[eax+0x2]
c0002688:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000268c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002690:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002693:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 c8                	mov    eax,ecx
c000269a:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000269d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026a1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026ad:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026b0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026b7:	31 d2                	xor    edx,edx
c00026b9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026bd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026c1:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026c4:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026c7:	83 fb 03             	cmp    ebx,0x3
c00026ca:	75 2b                	jne    c00026f7 <mount_volume+0x264>
c00026cc:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026cf:	e8 2f f3 ff ff       	call   c0001a03 <ld_word>
c00026d4:	66 09 c7             	or     di,ax
c00026d7:	0f 85 7e fe ff ff    	jne    c000255b <mount_volume+0xc8>
c00026dd:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026e3:	c1 e6 02             	shl    esi,0x2
c00026e6:	e8 25 f3 ff ff       	call   c0001a10 <ld_dword>
c00026eb:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c00026f2:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00026f5:	eb 30                	jmp    c0002727 <mount_volume+0x294>
c00026f7:	66 85 ff             	test   di,di
c00026fa:	0f 84 5b fe ff ff    	je     c000255b <mount_volume+0xc8>
c0002700:	31 d2                	xor    edx,edx
c0002702:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002706:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000270a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000270e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002711:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002714:	83 fb 02             	cmp    ebx,0x2
c0002717:	75 04                	jne    c000271d <mount_volume+0x28a>
c0002719:	01 f6                	add    esi,esi
c000271b:	eb 0a                	jmp    c0002727 <mount_volume+0x294>
c000271d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002720:	83 e6 01             	and    esi,0x1
c0002723:	d1 e8                	shr    eax,1
c0002725:	01 c6                	add    esi,eax
c0002727:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000272d:	c1 ee 09             	shr    esi,0x9
c0002730:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002734:	0f 87 21 fe ff ff    	ja     c000255b <mount_volume+0xc8>
c000273a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002741:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002748:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000274c:	83 fb 03             	cmp    ebx,0x3
c000274f:	75 7a                	jne    c00027cb <mount_volume+0x338>
c0002751:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002757:	e8 a7 f2 ff ff       	call   c0001a03 <ld_word>
c000275c:	66 48                	dec    ax
c000275e:	75 6b                	jne    c00027cb <mount_volume+0x338>
c0002760:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002764:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002768:	83 c2 01             	add    edx,0x1
c000276b:	89 e8                	mov    eax,ebp
c000276d:	83 d1 00             	adc    ecx,0x0
c0002770:	e8 6c fa ff ff       	call   c00021e1 <move_window>
c0002775:	85 c0                	test   eax,eax
c0002777:	75 52                	jne    c00027cb <mount_volume+0x338>
c0002779:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000277d:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002783:	e8 7b f2 ff ff       	call   c0001a03 <ld_word>
c0002788:	66 3d 55 aa          	cmp    ax,0xaa55
c000278c:	75 3d                	jne    c00027cb <mount_volume+0x338>
c000278e:	8d 45 54             	lea    eax,[ebp+0x54]
c0002791:	e8 7a f2 ff ff       	call   c0001a10 <ld_dword>
c0002796:	3d 52 52 61 41       	cmp    eax,0x41615252
c000279b:	75 2e                	jne    c00027cb <mount_volume+0x338>
c000279d:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027a3:	e8 68 f2 ff ff       	call   c0001a10 <ld_dword>
c00027a8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027ad:	75 1c                	jne    c00027cb <mount_volume+0x338>
c00027af:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027b5:	e8 56 f2 ff ff       	call   c0001a10 <ld_dword>
c00027ba:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027bd:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027c3:	e8 48 f2 ff ff       	call   c0001a10 <ld_dword>
c00027c8:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027cb:	66 a1 e0 a3 02 c0    	mov    ax,ds:0xc002a3e0
c00027d1:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027d4:	40                   	inc    eax
c00027d5:	31 db                	xor    ebx,ebx
c00027d7:	66 a3 e0 a3 02 c0    	mov    ds:0xc002a3e0,ax
c00027dd:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027e1:	e9 0c 02 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c00027e6:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027ec:	e8 12 f2 ff ff       	call   c0001a03 <ld_word>
c00027f1:	66 3d 00 01          	cmp    ax,0x100
c00027f5:	0f 85 60 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c00027fb:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002802:	0f 85 53 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c0002808:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000280e:	e8 15 f2 ff ff       	call   c0001a28 <ld_qword>
c0002813:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002817:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000281b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002821:	e8 ea f1 ff ff       	call   c0001a10 <ld_dword>
c0002826:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002829:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000282f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002832:	fe c8                	dec    al
c0002834:	0f 85 21 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c000283a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002841:	bb 01 00 00 00       	mov    ebx,0x1
c0002846:	d3 e3                	shl    ebx,cl
c0002848:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000284c:	66 85 db             	test   bx,bx
c000284f:	0f 84 06 fd ff ff    	je     c000255b <mount_volume+0xc8>
c0002855:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c000285b:	e8 b0 f1 ff ff       	call   c0001a10 <ld_dword>
c0002860:	89 c6                	mov    esi,eax
c0002862:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002867:	0f 87 ee fc ff ff    	ja     c000255b <mount_volume+0xc8>
c000286d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002871:	8d 40 02             	lea    eax,[eax+0x2]
c0002874:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002877:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c000287a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000287e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002881:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002887:	e8 84 f1 ff ff       	call   c0001a10 <ld_dword>
c000288c:	31 d2                	xor    edx,edx
c000288e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002892:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002896:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000289a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000289e:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028a1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028a4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028aa:	e8 61 f1 ff ff       	call   c0001a10 <ld_dword>
c00028af:	31 d2                	xor    edx,edx
c00028b1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028b5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028b9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028bd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028c0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028c3:	0f b7 c3             	movzx  eax,bx
c00028c6:	31 d2                	xor    edx,edx
c00028c8:	0f af f0             	imul   esi,eax
c00028cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028cf:	89 f0                	mov    eax,esi
c00028d1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028d5:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028d9:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028dd:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028e1:	39 c1                	cmp    ecx,eax
c00028e3:	89 df                	mov    edi,ebx
c00028e5:	19 d7                	sbb    edi,edx
c00028e7:	0f 82 6e fc ff ff    	jb     c000255b <mount_volume+0xc8>
c00028ed:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c00028f3:	31 db                	xor    ebx,ebx
c00028f5:	e8 16 f1 ff ff       	call   c0001a10 <ld_dword>
c00028fa:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002901:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002904:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000290c:	85 db                	test   ebx,ebx
c000290e:	75 39                	jne    c0002949 <mount_volume+0x4b6>
c0002910:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002914:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002918:	0f 86 3d fc ff ff    	jbe    c000255b <mount_volume+0xc8>
c000291e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002921:	31 ff                	xor    edi,edi
c0002923:	89 e8                	mov    eax,ebp
c0002925:	e8 72 f3 ff ff       	call   c0001c9c <clst2sect>
c000292a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000292e:	01 c6                	add    esi,eax
c0002930:	89 e8                	mov    eax,ebp
c0002932:	11 d7                	adc    edi,edx
c0002934:	89 f2                	mov    edx,esi
c0002936:	89 f9                	mov    ecx,edi
c0002938:	e8 a4 f8 ff ff       	call   c00021e1 <move_window>
c000293d:	85 c0                	test   eax,eax
c000293f:	0f 85 07 fc ff ff    	jne    c000254c <mount_volume+0xb9>
c0002945:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002949:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000294e:	74 0b                	je     c000295b <mount_volume+0x4c8>
c0002950:	83 c3 20             	add    ebx,0x20
c0002953:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002959:	eb b1                	jmp    c000290c <mount_volume+0x479>
c000295b:	8d 75 54             	lea    esi,[ebp+0x54]
c000295e:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002962:	e8 a9 f0 ff ff       	call   c0001a10 <ld_dword>
c0002967:	89 c3                	mov    ebx,eax
c0002969:	83 f8 01             	cmp    eax,0x1
c000296c:	0f 86 e9 fb ff ff    	jbe    c000255b <mount_volume+0xc8>
c0002972:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002975:	0f 86 e0 fb ff ff    	jbe    c000255b <mount_volume+0xc8>
c000297b:	8d 53 fe             	lea    edx,[ebx-0x2]
c000297e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002982:	0f af c2             	imul   eax,edx
c0002985:	31 d2                	xor    edx,edx
c0002987:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c000298a:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000298d:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002990:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002993:	31 c9                	xor    ecx,ecx
c0002995:	89 da                	mov    edx,ebx
c0002997:	89 e8                	mov    eax,ebp
c0002999:	c1 ea 07             	shr    edx,0x7
c000299c:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000299f:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029a2:	e8 3a f8 ff ff       	call   c00021e1 <move_window>
c00029a7:	85 c0                	test   eax,eax
c00029a9:	0f 85 9d fb ff ff    	jne    c000254c <mount_volume+0xb9>
c00029af:	89 d8                	mov    eax,ebx
c00029b1:	83 e0 7f             	and    eax,0x7f
c00029b4:	8d 04 86             	lea    eax,[esi+eax*4]
c00029b7:	e8 54 f0 ff ff       	call   c0001a10 <ld_dword>
c00029bc:	83 f8 ff             	cmp    eax,0xffffffff
c00029bf:	74 0a                	je     c00029cb <mount_volume+0x538>
c00029c1:	43                   	inc    ebx
c00029c2:	39 d8                	cmp    eax,ebx
c00029c4:	74 cd                	je     c0002993 <mount_volume+0x500>
c00029c6:	e9 90 fb ff ff       	jmp    c000255b <mount_volume+0xc8>
c00029cb:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029d2:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029d9:	bb 04 00 00 00       	mov    ebx,0x4
c00029de:	e9 e8 fd ff ff       	jmp    c00027cb <mount_volume+0x338>
c00029e3:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029e8:	19 db                	sbb    ebx,ebx
c00029ea:	83 c3 02             	add    ebx,0x2
c00029ed:	e9 93 fc ff ff       	jmp    c0002685 <mount_volume+0x1f2>
c00029f2:	83 c4 3c             	add    esp,0x3c
c00029f5:	89 d8                	mov    eax,ebx
c00029f7:	5b                   	pop    ebx
c00029f8:	5e                   	pop    esi
c00029f9:	5f                   	pop    edi
c00029fa:	5d                   	pop    ebp
c00029fb:	c3                   	ret    

c00029fc <find_bitmap>:
c00029fc:	55                   	push   ebp
c00029fd:	57                   	push   edi
c00029fe:	89 c7                	mov    edi,eax
c0002a00:	56                   	push   esi
c0002a01:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a04:	53                   	push   ebx
c0002a05:	83 ec 1c             	sub    esp,0x1c
c0002a08:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a0f:	83 e8 02             	sub    eax,0x2
c0002a12:	39 f0                	cmp    eax,esi
c0002a14:	77 02                	ja     c0002a18 <find_bitmap+0x1c>
c0002a16:	31 f6                	xor    esi,esi
c0002a18:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a1c:	89 f3                	mov    ebx,esi
c0002a1e:	31 ed                	xor    ebp,ebp
c0002a20:	31 c9                	xor    ecx,ecx
c0002a22:	89 da                	mov    edx,ebx
c0002a24:	89 f8                	mov    eax,edi
c0002a26:	c1 ea 0c             	shr    edx,0xc
c0002a29:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a2c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a2f:	e8 ad f7 ff ff       	call   c00021e1 <move_window>
c0002a34:	85 c0                	test   eax,eax
c0002a36:	75 68                	jne    c0002aa0 <find_bitmap+0xa4>
c0002a38:	89 da                	mov    edx,ebx
c0002a3a:	89 d9                	mov    ecx,ebx
c0002a3c:	c1 ea 03             	shr    edx,0x3
c0002a3f:	83 e1 07             	and    ecx,0x7
c0002a42:	b8 01 00 00 00       	mov    eax,0x1
c0002a47:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a4d:	d3 e0                	shl    eax,cl
c0002a4f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a52:	83 e9 02             	sub    ecx,0x2
c0002a55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a59:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a5d:	43                   	inc    ebx
c0002a5e:	21 c1                	and    ecx,eax
c0002a60:	d1 e0                	shl    eax,1
c0002a62:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a66:	77 09                	ja     c0002a71 <find_bitmap+0x75>
c0002a68:	31 db                	xor    ebx,ebx
c0002a6a:	ba 00 02 00 00       	mov    edx,0x200
c0002a6f:	31 c0                	xor    eax,eax
c0002a71:	84 c9                	test   cl,cl
c0002a73:	75 10                	jne    c0002a85 <find_bitmap+0x89>
c0002a75:	45                   	inc    ebp
c0002a76:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a7a:	75 0f                	jne    c0002a8b <find_bitmap+0x8f>
c0002a7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a80:	83 c0 02             	add    eax,0x2
c0002a83:	eb 22                	jmp    c0002aa7 <find_bitmap+0xab>
c0002a85:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a89:	31 ed                	xor    ebp,ebp
c0002a8b:	39 de                	cmp    esi,ebx
c0002a8d:	74 16                	je     c0002aa5 <find_bitmap+0xa9>
c0002a8f:	84 c0                	test   al,al
c0002a91:	75 c6                	jne    c0002a59 <find_bitmap+0x5d>
c0002a93:	42                   	inc    edx
c0002a94:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a9a:	77 84                	ja     c0002a20 <find_bitmap+0x24>
c0002a9c:	b0 01                	mov    al,0x1
c0002a9e:	eb b9                	jmp    c0002a59 <find_bitmap+0x5d>
c0002aa0:	83 c8 ff             	or     eax,0xffffffff
c0002aa3:	eb 02                	jmp    c0002aa7 <find_bitmap+0xab>
c0002aa5:	31 c0                	xor    eax,eax
c0002aa7:	83 c4 1c             	add    esp,0x1c
c0002aaa:	5b                   	pop    ebx
c0002aab:	5e                   	pop    esi
c0002aac:	5f                   	pop    edi
c0002aad:	5d                   	pop    ebp
c0002aae:	c3                   	ret    

c0002aaf <change_bitmap>:
c0002aaf:	55                   	push   ebp
c0002ab0:	89 cd                	mov    ebp,ecx
c0002ab2:	57                   	push   edi
c0002ab3:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ab6:	56                   	push   esi
c0002ab7:	89 c7                	mov    edi,eax
c0002ab9:	53                   	push   ebx
c0002aba:	89 c8                	mov    eax,ecx
c0002abc:	83 ec 1c             	sub    esp,0x1c
c0002abf:	31 d2                	xor    edx,edx
c0002ac1:	89 ce                	mov    esi,ecx
c0002ac3:	c1 e8 0c             	shr    eax,0xc
c0002ac6:	bb 01 00 00 00       	mov    ebx,0x1
c0002acb:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002ace:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002ad1:	c1 ee 03             	shr    esi,0x3
c0002ad4:	83 e1 07             	and    ecx,0x7
c0002ad7:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002add:	d3 e3                	shl    ebx,cl
c0002adf:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002ae3:	89 c1                	mov    ecx,eax
c0002ae5:	89 d3                	mov    ebx,edx
c0002ae7:	83 c1 01             	add    ecx,0x1
c0002aea:	83 d3 00             	adc    ebx,0x0
c0002aed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002af1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002af5:	89 d1                	mov    ecx,edx
c0002af7:	89 c2                	mov    edx,eax
c0002af9:	89 f8                	mov    eax,edi
c0002afb:	e8 e1 f6 ff ff       	call   c00021e1 <move_window>
c0002b00:	89 c1                	mov    ecx,eax
c0002b02:	85 c0                	test   eax,eax
c0002b04:	75 48                	jne    c0002b4e <change_bitmap+0x9f>
c0002b06:	31 d2                	xor    edx,edx
c0002b08:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b0c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b10:	0f 95 c2             	setne  dl
c0002b13:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b17:	74 3c                	je     c0002b55 <change_bitmap+0xa6>
c0002b19:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b1d:	4d                   	dec    ebp
c0002b1e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b22:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b26:	74 32                	je     c0002b5a <change_bitmap+0xab>
c0002b28:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b2c:	75 d8                	jne    c0002b06 <change_bitmap+0x57>
c0002b2e:	8d 46 01             	lea    eax,[esi+0x1]
c0002b31:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b36:	89 c3                	mov    ebx,eax
c0002b38:	31 f6                	xor    esi,esi
c0002b3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b42:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b48:	74 99                	je     c0002ae3 <change_bitmap+0x34>
c0002b4a:	89 de                	mov    esi,ebx
c0002b4c:	eb b8                	jmp    c0002b06 <change_bitmap+0x57>
c0002b4e:	b9 01 00 00 00       	mov    ecx,0x1
c0002b53:	eb 05                	jmp    c0002b5a <change_bitmap+0xab>
c0002b55:	b9 02 00 00 00       	mov    ecx,0x2
c0002b5a:	83 c4 1c             	add    esp,0x1c
c0002b5d:	89 c8                	mov    eax,ecx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	5f                   	pop    edi
c0002b62:	5d                   	pop    ebp
c0002b63:	c3                   	ret    

c0002b64 <put_fat>:
c0002b64:	83 fa 01             	cmp    edx,0x1
c0002b67:	0f 86 7b 01 00 00    	jbe    c0002ce8 <put_fat+0x184>
c0002b6d:	55                   	push   ebp
c0002b6e:	57                   	push   edi
c0002b6f:	89 cf                	mov    edi,ecx
c0002b71:	56                   	push   esi
c0002b72:	b9 02 00 00 00       	mov    ecx,0x2
c0002b77:	53                   	push   ebx
c0002b78:	89 c6                	mov    esi,eax
c0002b7a:	83 ec 1c             	sub    esp,0x1c
c0002b7d:	89 d3                	mov    ebx,edx
c0002b7f:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b82:	0f 86 68 01 00 00    	jbe    c0002cf0 <put_fat+0x18c>
c0002b88:	8a 00                	mov    al,BYTE PTR [eax]
c0002b8a:	3c 02                	cmp    al,0x2
c0002b8c:	0f 84 c7 00 00 00    	je     c0002c59 <put_fat+0xf5>
c0002b92:	77 09                	ja     c0002b9d <put_fat+0x39>
c0002b94:	fe c8                	dec    al
c0002b96:	74 17                	je     c0002baf <put_fat+0x4b>
c0002b98:	e9 53 01 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002b9d:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba2:	3c 04                	cmp    al,0x4
c0002ba4:	0f 86 e1 00 00 00    	jbe    c0002c8b <put_fat+0x127>
c0002baa:	e9 41 01 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002baf:	89 d5                	mov    ebp,edx
c0002bb1:	31 c9                	xor    ecx,ecx
c0002bb3:	d1 ed                	shr    ebp,1
c0002bb5:	89 f0                	mov    eax,esi
c0002bb7:	01 d5                	add    ebp,edx
c0002bb9:	89 ea                	mov    edx,ebp
c0002bbb:	c1 ea 09             	shr    edx,0x9
c0002bbe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bc1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bc4:	e8 18 f6 ff ff       	call   c00021e1 <move_window>
c0002bc9:	89 c1                	mov    ecx,eax
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 1d 01 00 00    	jne    c0002cf0 <put_fat+0x18c>
c0002bd3:	8d 46 54             	lea    eax,[esi+0x54]
c0002bd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bda:	8d 45 01             	lea    eax,[ebp+0x1]
c0002bdd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002be3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002be7:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002beb:	89 f8                	mov    eax,edi
c0002bed:	83 e3 01             	and    ebx,0x1
c0002bf0:	74 0d                	je     c0002bff <put_fat+0x9b>
c0002bf2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002bf5:	89 fa                	mov    edx,edi
c0002bf7:	83 e0 0f             	and    eax,0xf
c0002bfa:	c1 e2 04             	shl    edx,0x4
c0002bfd:	09 d0                	or     eax,edx
c0002bff:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c06:	31 c9                	xor    ecx,ecx
c0002c08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c0c:	c1 ea 09             	shr    edx,0x9
c0002c0f:	89 f0                	mov    eax,esi
c0002c11:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c14:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c17:	e8 c5 f5 ff ff       	call   c00021e1 <move_window>
c0002c1c:	89 c1                	mov    ecx,eax
c0002c1e:	85 c0                	test   eax,eax
c0002c20:	0f 85 ca 00 00 00    	jne    c0002cf0 <put_fat+0x18c>
c0002c26:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c2a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c30:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c34:	85 db                	test   ebx,ebx
c0002c36:	74 07                	je     c0002c3f <put_fat+0xdb>
c0002c38:	c1 ef 04             	shr    edi,0x4
c0002c3b:	89 fa                	mov    edx,edi
c0002c3d:	eb 0e                	jmp    c0002c4d <put_fat+0xe9>
c0002c3f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c42:	c1 ef 08             	shr    edi,0x8
c0002c45:	83 e2 f0             	and    edx,0xfffffff0
c0002c48:	83 e7 0f             	and    edi,0xf
c0002c4b:	09 fa                	or     edx,edi
c0002c4d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c50:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c54:	e9 97 00 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002c59:	31 c9                	xor    ecx,ecx
c0002c5b:	c1 ea 08             	shr    edx,0x8
c0002c5e:	89 f0                	mov    eax,esi
c0002c60:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c63:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c66:	e8 76 f5 ff ff       	call   c00021e1 <move_window>
c0002c6b:	89 c1                	mov    ecx,eax
c0002c6d:	85 c0                	test   eax,eax
c0002c6f:	75 7f                	jne    c0002cf0 <put_fat+0x18c>
c0002c71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c75:	01 db                	add    ebx,ebx
c0002c77:	0f b7 d7             	movzx  edx,di
c0002c7a:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c80:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c84:	e8 ec ed ff ff       	call   c0001a75 <st_word>
c0002c89:	eb 53                	jmp    c0002cde <put_fat+0x17a>
c0002c8b:	31 c9                	xor    ecx,ecx
c0002c8d:	c1 ea 07             	shr    edx,0x7
c0002c90:	89 f0                	mov    eax,esi
c0002c92:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c95:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c98:	e8 44 f5 ff ff       	call   c00021e1 <move_window>
c0002c9d:	89 c1                	mov    ecx,eax
c0002c9f:	85 c0                	test   eax,eax
c0002ca1:	75 4d                	jne    c0002cf0 <put_fat+0x18c>
c0002ca3:	c1 e3 02             	shl    ebx,0x2
c0002ca6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cac:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002caf:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cb3:	74 1c                	je     c0002cd1 <put_fat+0x16d>
c0002cb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb9:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cbf:	89 d8                	mov    eax,ebx
c0002cc1:	e8 4a ed ff ff       	call   c0001a10 <ld_dword>
c0002cc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cca:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ccf:	09 c7                	or     edi,eax
c0002cd1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cd5:	89 fa                	mov    edx,edi
c0002cd7:	89 d8                	mov    eax,ebx
c0002cd9:	e8 9b ed ff ff       	call   c0001a79 <st_dword>
c0002cde:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ce2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ce6:	eb 08                	jmp    c0002cf0 <put_fat+0x18c>
c0002ce8:	b9 02 00 00 00       	mov    ecx,0x2
c0002ced:	89 c8                	mov    eax,ecx
c0002cef:	c3                   	ret    
c0002cf0:	83 c4 1c             	add    esp,0x1c
c0002cf3:	89 c8                	mov    eax,ecx
c0002cf5:	5b                   	pop    ebx
c0002cf6:	5e                   	pop    esi
c0002cf7:	5f                   	pop    edi
c0002cf8:	5d                   	pop    ebp
c0002cf9:	c3                   	ret    

c0002cfa <fill_last_frag>:
c0002cfa:	57                   	push   edi
c0002cfb:	89 cf                	mov    edi,ecx
c0002cfd:	56                   	push   esi
c0002cfe:	89 d6                	mov    esi,edx
c0002d00:	53                   	push   ebx
c0002d01:	89 c3                	mov    ebx,eax
c0002d03:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d06:	85 c0                	test   eax,eax
c0002d08:	74 21                	je     c0002d2b <fill_last_frag+0x31>
c0002d0a:	89 f9                	mov    ecx,edi
c0002d0c:	83 f8 01             	cmp    eax,0x1
c0002d0f:	76 05                	jbe    c0002d16 <fill_last_frag+0x1c>
c0002d11:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d14:	29 c1                	sub    ecx,eax
c0002d16:	8d 56 01             	lea    edx,[esi+0x1]
c0002d19:	29 c2                	sub    edx,eax
c0002d1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d1d:	e8 42 fe ff ff       	call   c0002b64 <put_fat>
c0002d22:	85 c0                	test   eax,eax
c0002d24:	75 05                	jne    c0002d2b <fill_last_frag+0x31>
c0002d26:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d29:	eb d8                	jmp    c0002d03 <fill_last_frag+0x9>
c0002d2b:	5b                   	pop    ebx
c0002d2c:	5e                   	pop    esi
c0002d2d:	5f                   	pop    edi
c0002d2e:	c3                   	ret    

c0002d2f <fill_first_frag>:
c0002d2f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d33:	75 2d                	jne    c0002d62 <fill_first_frag+0x33>
c0002d35:	57                   	push   edi
c0002d36:	56                   	push   esi
c0002d37:	53                   	push   ebx
c0002d38:	89 c3                	mov    ebx,eax
c0002d3a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d3d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d40:	01 d7                	add    edi,edx
c0002d42:	39 fa                	cmp    edx,edi
c0002d44:	74 14                	je     c0002d5a <fill_first_frag+0x2b>
c0002d46:	8d 72 01             	lea    esi,[edx+0x1]
c0002d49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d4b:	89 f1                	mov    ecx,esi
c0002d4d:	e8 12 fe ff ff       	call   c0002b64 <put_fat>
c0002d52:	89 f2                	mov    edx,esi
c0002d54:	85 c0                	test   eax,eax
c0002d56:	74 ea                	je     c0002d42 <fill_first_frag+0x13>
c0002d58:	eb 0b                	jmp    c0002d65 <fill_first_frag+0x36>
c0002d5a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d5e:	31 c0                	xor    eax,eax
c0002d60:	eb 03                	jmp    c0002d65 <fill_first_frag+0x36>
c0002d62:	31 c0                	xor    eax,eax
c0002d64:	c3                   	ret    
c0002d65:	5b                   	pop    ebx
c0002d66:	5e                   	pop    esi
c0002d67:	5f                   	pop    edi
c0002d68:	c3                   	ret    

c0002d69 <get_fat>:
c0002d69:	83 fa 01             	cmp    edx,0x1
c0002d6c:	0f 86 db 01 00 00    	jbe    c0002f4d <get_fat+0x1e4>
c0002d72:	55                   	push   ebp
c0002d73:	b9 01 00 00 00       	mov    ecx,0x1
c0002d78:	57                   	push   edi
c0002d79:	56                   	push   esi
c0002d7a:	53                   	push   ebx
c0002d7b:	83 ec 1c             	sub    esp,0x1c
c0002d7e:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d80:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d83:	0f 86 cc 01 00 00    	jbe    c0002f55 <get_fat+0x1ec>
c0002d89:	89 c3                	mov    ebx,eax
c0002d8b:	89 d6                	mov    esi,edx
c0002d8d:	8a 07                	mov    al,BYTE PTR [edi]
c0002d8f:	3c 02                	cmp    al,0x2
c0002d91:	0f 84 99 00 00 00    	je     c0002e30 <get_fat+0xc7>
c0002d97:	77 09                	ja     c0002da2 <get_fat+0x39>
c0002d99:	fe c8                	dec    al
c0002d9b:	74 1a                	je     c0002db7 <get_fat+0x4e>
c0002d9d:	e9 b3 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002da2:	3c 03                	cmp    al,0x3
c0002da4:	0f 84 b5 00 00 00    	je     c0002e5f <get_fat+0xf6>
c0002daa:	3c 04                	cmp    al,0x4
c0002dac:	0f 84 e3 00 00 00    	je     c0002e95 <get_fat+0x12c>
c0002db2:	e9 9e 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002db7:	89 d3                	mov    ebx,edx
c0002db9:	31 c9                	xor    ecx,ecx
c0002dbb:	d1 eb                	shr    ebx,1
c0002dbd:	89 f8                	mov    eax,edi
c0002dbf:	01 d3                	add    ebx,edx
c0002dc1:	89 da                	mov    edx,ebx
c0002dc3:	c1 ea 09             	shr    edx,0x9
c0002dc6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dcc:	e8 10 f4 ff ff       	call   c00021e1 <move_window>
c0002dd1:	85 c0                	test   eax,eax
c0002dd3:	74 08                	je     c0002ddd <get_fat+0x74>
c0002dd5:	83 c9 ff             	or     ecx,0xffffffff
c0002dd8:	e9 78 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002ddd:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002de0:	31 c9                	xor    ecx,ecx
c0002de2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002de8:	89 ea                	mov    edx,ebp
c0002dea:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dee:	c1 ea 09             	shr    edx,0x9
c0002df1:	89 f8                	mov    eax,edi
c0002df3:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df6:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df9:	e8 e3 f3 ff ff       	call   c00021e1 <move_window>
c0002dfe:	85 c0                	test   eax,eax
c0002e00:	75 d3                	jne    c0002dd5 <get_fat+0x6c>
c0002e02:	0f b6 c3             	movzx  eax,bl
c0002e05:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e0b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e10:	c1 e3 08             	shl    ebx,0x8
c0002e13:	09 c3                	or     ebx,eax
c0002e15:	89 d9                	mov    ecx,ebx
c0002e17:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e1d:	83 e6 01             	and    esi,0x1
c0002e20:	0f 84 2f 01 00 00    	je     c0002f55 <get_fat+0x1ec>
c0002e26:	89 d9                	mov    ecx,ebx
c0002e28:	c1 e9 04             	shr    ecx,0x4
c0002e2b:	e9 25 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002e30:	31 c9                	xor    ecx,ecx
c0002e32:	c1 ea 08             	shr    edx,0x8
c0002e35:	89 f8                	mov    eax,edi
c0002e37:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e3d:	e8 9f f3 ff ff       	call   c00021e1 <move_window>
c0002e42:	85 c0                	test   eax,eax
c0002e44:	75 8f                	jne    c0002dd5 <get_fat+0x6c>
c0002e46:	01 f6                	add    esi,esi
c0002e48:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e4e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e52:	e8 ac eb ff ff       	call   c0001a03 <ld_word>
c0002e57:	0f b7 c8             	movzx  ecx,ax
c0002e5a:	e9 f6 00 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002e5f:	31 c9                	xor    ecx,ecx
c0002e61:	c1 ea 07             	shr    edx,0x7
c0002e64:	89 f8                	mov    eax,edi
c0002e66:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e69:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e6c:	e8 70 f3 ff ff       	call   c00021e1 <move_window>
c0002e71:	85 c0                	test   eax,eax
c0002e73:	0f 85 5c ff ff ff    	jne    c0002dd5 <get_fat+0x6c>
c0002e79:	c1 e6 02             	shl    esi,0x2
c0002e7c:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e82:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e86:	e8 85 eb ff ff       	call   c0001a10 <ld_dword>
c0002e8b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e90:	e9 b4 00 00 00       	jmp    c0002f49 <get_fat+0x1e0>
c0002e95:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e98:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e9b:	89 d1                	mov    ecx,edx
c0002e9d:	09 c1                	or     ecx,eax
c0002e9f:	74 06                	je     c0002ea7 <get_fat+0x13e>
c0002ea1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ea5:	75 0f                	jne    c0002eb6 <get_fat+0x14d>
c0002ea7:	b9 01 00 00 00       	mov    ecx,0x1
c0002eac:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eb0:	0f 85 9f 00 00 00    	jne    c0002f55 <get_fat+0x1ec>
c0002eb6:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eba:	89 f5                	mov    ebp,esi
c0002ebc:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ec1:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ec4:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ec7:	80 f9 02             	cmp    cl,0x2
c0002eca:	75 35                	jne    c0002f01 <get_fat+0x198>
c0002ecc:	83 c0 ff             	add    eax,0xffffffff
c0002ecf:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ed4:	83 d2 ff             	adc    edx,0xffffffff
c0002ed7:	31 db                	xor    ebx,ebx
c0002ed9:	0f ac d0 09          	shrd   eax,edx,0x9
c0002edd:	53                   	push   ebx
c0002ede:	c1 ea 09             	shr    edx,0x9
c0002ee1:	51                   	push   ecx
c0002ee2:	52                   	push   edx
c0002ee3:	50                   	push   eax
c0002ee4:	e8 73 05 02 00       	call   c002345c <__udivdi3>
c0002ee9:	83 c4 10             	add    esp,0x10
c0002eec:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef1:	39 c5                	cmp    ebp,eax
c0002ef3:	77 60                	ja     c0002f55 <get_fat+0x1ec>
c0002ef5:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002efa:	74 59                	je     c0002f55 <get_fat+0x1ec>
c0002efc:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002eff:	eb 54                	jmp    c0002f55 <get_fat+0x1ec>
c0002f01:	80 f9 03             	cmp    cl,0x3
c0002f04:	75 05                	jne    c0002f0b <get_fat+0x1a2>
c0002f06:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f09:	77 f1                	ja     c0002efc <get_fat+0x193>
c0002f0b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f10:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f14:	75 3f                	jne    c0002f55 <get_fat+0x1ec>
c0002f16:	31 c9                	xor    ecx,ecx
c0002f18:	89 f2                	mov    edx,esi
c0002f1a:	89 f8                	mov    eax,edi
c0002f1c:	c1 ea 07             	shr    edx,0x7
c0002f1f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f22:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f25:	e8 b7 f2 ff ff       	call   c00021e1 <move_window>
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	0f 85 a3 fe ff ff    	jne    c0002dd5 <get_fat+0x6c>
c0002f32:	c1 e6 02             	shl    esi,0x2
c0002f35:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f3b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f3f:	e8 cc ea ff ff       	call   c0001a10 <ld_dword>
c0002f44:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f49:	89 c1                	mov    ecx,eax
c0002f4b:	eb 08                	jmp    c0002f55 <get_fat+0x1ec>
c0002f4d:	b9 01 00 00 00       	mov    ecx,0x1
c0002f52:	89 c8                	mov    eax,ecx
c0002f54:	c3                   	ret    
c0002f55:	83 c4 1c             	add    esp,0x1c
c0002f58:	89 c8                	mov    eax,ecx
c0002f5a:	5b                   	pop    ebx
c0002f5b:	5e                   	pop    esi
c0002f5c:	5f                   	pop    edi
c0002f5d:	5d                   	pop    ebp
c0002f5e:	c3                   	ret    

c0002f5f <dir_sdi>:
c0002f5f:	55                   	push   ebp
c0002f60:	57                   	push   edi
c0002f61:	56                   	push   esi
c0002f62:	53                   	push   ebx
c0002f63:	89 c3                	mov    ebx,eax
c0002f65:	83 ec 1c             	sub    esp,0x1c
c0002f68:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f6a:	31 c0                	xor    eax,eax
c0002f6c:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f6f:	0f 94 c0             	sete   al
c0002f72:	48                   	dec    eax
c0002f73:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f78:	05 00 00 00 10       	add    eax,0x10000000
c0002f7d:	39 d0                	cmp    eax,edx
c0002f7f:	77 0a                	ja     c0002f8b <dir_sdi+0x2c>
c0002f81:	b8 02 00 00 00       	mov    eax,0x2
c0002f86:	e9 c4 00 00 00       	jmp    c000304f <dir_sdi+0xf0>
c0002f8b:	89 d6                	mov    esi,edx
c0002f8d:	f6 c2 1f             	test   dl,0x1f
c0002f90:	75 ef                	jne    c0002f81 <dir_sdi+0x22>
c0002f92:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f95:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f98:	85 c9                	test   ecx,ecx
c0002f9a:	75 2d                	jne    c0002fc9 <dir_sdi+0x6a>
c0002f9c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f9f:	77 1b                	ja     c0002fbc <dir_sdi+0x5d>
c0002fa1:	89 f2                	mov    edx,esi
c0002fa3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fa7:	c1 ea 05             	shr    edx,0x5
c0002faa:	39 c2                	cmp    edx,eax
c0002fac:	73 d3                	jae    c0002f81 <dir_sdi+0x22>
c0002fae:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fb1:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fb4:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fb7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fba:	eb 4b                	jmp    c0003007 <dir_sdi+0xa8>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc3:	85 c0                	test   eax,eax
c0002fc5:	74 da                	je     c0002fa1 <dir_sdi+0x42>
c0002fc7:	89 c1                	mov    ecx,eax
c0002fc9:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fcd:	c1 e5 09             	shl    ebp,0x9
c0002fd0:	89 ca                	mov    edx,ecx
c0002fd2:	39 ee                	cmp    esi,ebp
c0002fd4:	72 1c                	jb     c0002ff2 <dir_sdi+0x93>
c0002fd6:	89 d8                	mov    eax,ebx
c0002fd8:	e8 8c fd ff ff       	call   c0002d69 <get_fat>
c0002fdd:	89 c1                	mov    ecx,eax
c0002fdf:	83 f8 ff             	cmp    eax,0xffffffff
c0002fe2:	74 66                	je     c000304a <dir_sdi+0xeb>
c0002fe4:	83 f8 01             	cmp    eax,0x1
c0002fe7:	76 98                	jbe    c0002f81 <dir_sdi+0x22>
c0002fe9:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002fec:	76 93                	jbe    c0002f81 <dir_sdi+0x22>
c0002fee:	29 ee                	sub    esi,ebp
c0002ff0:	eb de                	jmp    c0002fd0 <dir_sdi+0x71>
c0002ff2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ff6:	89 f8                	mov    eax,edi
c0002ff8:	e8 9f ec ff ff       	call   c0001c9c <clst2sect>
c0002ffd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003001:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003004:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000300a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000300d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003010:	89 d1                	mov    ecx,edx
c0003012:	09 c1                	or     ecx,eax
c0003014:	0f 84 67 ff ff ff    	je     c0002f81 <dir_sdi+0x22>
c000301a:	89 f1                	mov    ecx,esi
c000301c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003024:	c1 e9 09             	shr    ecx,0x9
c0003027:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000302b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000302f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003033:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003036:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000303c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000303f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003043:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003046:	31 c0                	xor    eax,eax
c0003048:	eb 05                	jmp    c000304f <dir_sdi+0xf0>
c000304a:	b8 01 00 00 00       	mov    eax,0x1
c000304f:	83 c4 1c             	add    esp,0x1c
c0003052:	5b                   	pop    ebx
c0003053:	5e                   	pop    esi
c0003054:	5f                   	pop    edi
c0003055:	5d                   	pop    ebp
c0003056:	c3                   	ret    

c0003057 <create_chain>:
c0003057:	55                   	push   ebp
c0003058:	89 c5                	mov    ebp,eax
c000305a:	57                   	push   edi
c000305b:	56                   	push   esi
c000305c:	53                   	push   ebx
c000305d:	83 ec 1c             	sub    esp,0x1c
c0003060:	85 d2                	test   edx,edx
c0003062:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003066:	8b 30                	mov    esi,DWORD PTR [eax]
c0003068:	75 0e                	jne    c0003078 <create_chain+0x21>
c000306a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000306d:	85 ff                	test   edi,edi
c000306f:	74 39                	je     c00030aa <create_chain+0x53>
c0003071:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003074:	77 39                	ja     c00030af <create_chain+0x58>
c0003076:	eb 32                	jmp    c00030aa <create_chain+0x53>
c0003078:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000307c:	e8 e8 fc ff ff       	call   c0002d69 <get_fat>
c0003081:	89 c3                	mov    ebx,eax
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	77 0a                	ja     c0003092 <create_chain+0x3b>
c0003088:	bb 01 00 00 00       	mov    ebx,0x1
c000308d:	e9 ba 01 00 00       	jmp    c000324c <create_chain+0x1f5>
c0003092:	83 f8 ff             	cmp    eax,0xffffffff
c0003095:	0f 84 62 01 00 00    	je     c00031fd <create_chain+0x1a6>
c000309b:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000309e:	0f 87 a8 01 00 00    	ja     c000324c <create_chain+0x1f5>
c00030a4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030a8:	eb 05                	jmp    c00030af <create_chain+0x58>
c00030aa:	bf 01 00 00 00       	mov    edi,0x1
c00030af:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030b3:	75 07                	jne    c00030bc <create_chain+0x65>
c00030b5:	31 db                	xor    ebx,ebx
c00030b7:	e9 90 01 00 00       	jmp    c000324c <create_chain+0x1f5>
c00030bc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030bf:	75 74                	jne    c0003135 <create_chain+0xde>
c00030c1:	b9 01 00 00 00       	mov    ecx,0x1
c00030c6:	89 fa                	mov    edx,edi
c00030c8:	89 f0                	mov    eax,esi
c00030ca:	e8 2d f9 ff ff       	call   c00029fc <find_bitmap>
c00030cf:	89 c3                	mov    ebx,eax
c00030d1:	8d 40 ff             	lea    eax,[eax-0x1]
c00030d4:	83 f8 fd             	cmp    eax,0xfffffffd
c00030d7:	0f 87 6f 01 00 00    	ja     c000324c <create_chain+0x1f5>
c00030dd:	83 ec 0c             	sub    esp,0xc
c00030e0:	b9 01 00 00 00       	mov    ecx,0x1
c00030e5:	6a 01                	push   0x1
c00030e7:	89 da                	mov    edx,ebx
c00030e9:	89 f0                	mov    eax,esi
c00030eb:	e8 bf f9 ff ff       	call   c0002aaf <change_bitmap>
c00030f0:	83 c4 10             	add    esp,0x10
c00030f3:	83 f8 02             	cmp    eax,0x2
c00030f6:	74 90                	je     c0003088 <create_chain+0x31>
c00030f8:	83 f8 01             	cmp    eax,0x1
c00030fb:	0f 84 fc 00 00 00    	je     c00031fd <create_chain+0x1a6>
c0003101:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003106:	75 09                	jne    c0003111 <create_chain+0xba>
c0003108:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000310c:	e9 0c 01 00 00       	jmp    c000321d <create_chain+0x1c6>
c0003111:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003115:	0f 85 e7 00 00 00    	jne    c0003202 <create_chain+0x1ab>
c000311b:	8d 57 01             	lea    edx,[edi+0x1]
c000311e:	39 da                	cmp    edx,ebx
c0003120:	0f 84 f7 00 00 00    	je     c000321d <create_chain+0x1c6>
c0003126:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003129:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000312d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003130:	e9 cd 00 00 00       	jmp    c0003202 <create_chain+0x1ab>
c0003135:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003139:	75 41                	jne    c000317c <create_chain+0x125>
c000313b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000313e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003141:	77 05                	ja     c0003148 <create_chain+0xf1>
c0003143:	bb 02 00 00 00       	mov    ebx,0x2
c0003148:	89 da                	mov    edx,ebx
c000314a:	89 e8                	mov    eax,ebp
c000314c:	e8 18 fc ff ff       	call   c0002d69 <get_fat>
c0003151:	83 f8 01             	cmp    eax,0x1
c0003154:	0f 84 2e ff ff ff    	je     c0003088 <create_chain+0x31>
c000315a:	83 f8 ff             	cmp    eax,0xffffffff
c000315d:	0f 84 9a 00 00 00    	je     c00031fd <create_chain+0x1a6>
c0003163:	85 c0                	test   eax,eax
c0003165:	74 11                	je     c0003178 <create_chain+0x121>
c0003167:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000316a:	83 f8 01             	cmp    eax,0x1
c000316d:	76 0d                	jbe    c000317c <create_chain+0x125>
c000316f:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003172:	76 08                	jbe    c000317c <create_chain+0x125>
c0003174:	89 c7                	mov    edi,eax
c0003176:	eb 04                	jmp    c000317c <create_chain+0x125>
c0003178:	85 db                	test   ebx,ebx
c000317a:	75 38                	jne    c00031b4 <create_chain+0x15d>
c000317c:	89 fb                	mov    ebx,edi
c000317e:	43                   	inc    ebx
c000317f:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003182:	77 0e                	ja     c0003192 <create_chain+0x13b>
c0003184:	83 ff 01             	cmp    edi,0x1
c0003187:	0f 86 28 ff ff ff    	jbe    c00030b5 <create_chain+0x5e>
c000318d:	bb 02 00 00 00       	mov    ebx,0x2
c0003192:	89 da                	mov    edx,ebx
c0003194:	89 e8                	mov    eax,ebp
c0003196:	e8 ce fb ff ff       	call   c0002d69 <get_fat>
c000319b:	85 c0                	test   eax,eax
c000319d:	74 15                	je     c00031b4 <create_chain+0x15d>
c000319f:	83 f8 01             	cmp    eax,0x1
c00031a2:	0f 84 e0 fe ff ff    	je     c0003088 <create_chain+0x31>
c00031a8:	40                   	inc    eax
c00031a9:	74 52                	je     c00031fd <create_chain+0x1a6>
c00031ab:	39 fb                	cmp    ebx,edi
c00031ad:	75 cf                	jne    c000317e <create_chain+0x127>
c00031af:	e9 01 ff ff ff       	jmp    c00030b5 <create_chain+0x5e>
c00031b4:	83 c9 ff             	or     ecx,0xffffffff
c00031b7:	89 da                	mov    edx,ebx
c00031b9:	89 f0                	mov    eax,esi
c00031bb:	e8 a4 f9 ff ff       	call   c0002b64 <put_fat>
c00031c0:	85 c0                	test   eax,eax
c00031c2:	75 32                	jne    c00031f6 <create_chain+0x19f>
c00031c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031c9:	74 11                	je     c00031dc <create_chain+0x185>
c00031cb:	89 d9                	mov    ecx,ebx
c00031cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d1:	89 f0                	mov    eax,esi
c00031d3:	e8 8c f9 ff ff       	call   c0002b64 <put_fat>
c00031d8:	85 c0                	test   eax,eax
c00031da:	75 1a                	jne    c00031f6 <create_chain+0x19f>
c00031dc:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031df:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031e2:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031e5:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031e8:	39 d0                	cmp    eax,edx
c00031ea:	77 04                	ja     c00031f0 <create_chain+0x199>
c00031ec:	48                   	dec    eax
c00031ed:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031f0:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00031f4:	eb 56                	jmp    c000324c <create_chain+0x1f5>
c00031f6:	48                   	dec    eax
c00031f7:	0f 85 8b fe ff ff    	jne    c0003088 <create_chain+0x31>
c00031fd:	83 cb ff             	or     ebx,0xffffffff
c0003200:	eb 4a                	jmp    c000324c <create_chain+0x1f5>
c0003202:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003206:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003209:	41                   	inc    ecx
c000320a:	39 d9                	cmp    ecx,ebx
c000320c:	75 19                	jne    c0003227 <create_chain+0x1d0>
c000320e:	b9 02 00 00 00       	mov    ecx,0x2
c0003213:	85 d2                	test   edx,edx
c0003215:	74 03                	je     c000321a <create_chain+0x1c3>
c0003217:	8d 4a 01             	lea    ecx,[edx+0x1]
c000321a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000321d:	85 c0                	test   eax,eax
c000321f:	0f 85 63 fe ff ff    	jne    c0003088 <create_chain+0x31>
c0003225:	eb b5                	jmp    c00031dc <create_chain+0x185>
c0003227:	85 d2                	test   edx,edx
c0003229:	75 07                	jne    c0003232 <create_chain+0x1db>
c000322b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003232:	89 d9                	mov    ecx,ebx
c0003234:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003238:	89 e8                	mov    eax,ebp
c000323a:	e8 bb fa ff ff       	call   c0002cfa <fill_last_frag>
c000323f:	85 c0                	test   eax,eax
c0003241:	75 b3                	jne    c00031f6 <create_chain+0x19f>
c0003243:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000324a:	eb 90                	jmp    c00031dc <create_chain+0x185>
c000324c:	83 c4 1c             	add    esp,0x1c
c000324f:	89 d8                	mov    eax,ebx
c0003251:	5b                   	pop    ebx
c0003252:	5e                   	pop    esi
c0003253:	5f                   	pop    edi
c0003254:	5d                   	pop    ebp
c0003255:	c3                   	ret    

c0003256 <remove_chain>:
c0003256:	55                   	push   ebp
c0003257:	57                   	push   edi
c0003258:	56                   	push   esi
c0003259:	53                   	push   ebx
c000325a:	83 ec 1c             	sub    esp,0x1c
c000325d:	83 fa 01             	cmp    edx,0x1
c0003260:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003264:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003266:	77 0a                	ja     c0003272 <remove_chain+0x1c>
c0003268:	b8 02 00 00 00       	mov    eax,0x2
c000326d:	e9 24 01 00 00       	jmp    c0003396 <remove_chain+0x140>
c0003272:	89 d6                	mov    esi,edx
c0003274:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003277:	76 ef                	jbe    c0003268 <remove_chain+0x12>
c0003279:	89 c7                	mov    edi,eax
c000327b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003280:	75 06                	jne    c0003288 <remove_chain+0x32>
c0003282:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003286:	eb 54                	jmp    c00032dc <remove_chain+0x86>
c0003288:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000328b:	75 06                	jne    c0003293 <remove_chain+0x3d>
c000328d:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003291:	74 ef                	je     c0003282 <remove_chain+0x2c>
c0003293:	83 c9 ff             	or     ecx,0xffffffff
c0003296:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000329a:	89 d8                	mov    eax,ebx
c000329c:	e8 c3 f8 ff ff       	call   c0002b64 <put_fat>
c00032a1:	85 c0                	test   eax,eax
c00032a3:	74 dd                	je     c0003282 <remove_chain+0x2c>
c00032a5:	e9 ec 00 00 00       	jmp    c0003396 <remove_chain+0x140>
c00032aa:	83 f8 01             	cmp    eax,0x1
c00032ad:	74 b9                	je     c0003268 <remove_chain+0x12>
c00032af:	83 f8 ff             	cmp    eax,0xffffffff
c00032b2:	74 6d                	je     c0003321 <remove_chain+0xcb>
c00032b4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032b7:	75 6f                	jne    c0003328 <remove_chain+0xd2>
c00032b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032bc:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032bf:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032c2:	39 d0                	cmp    eax,edx
c00032c4:	73 08                	jae    c00032ce <remove_chain+0x78>
c00032c6:	40                   	inc    eax
c00032c7:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032cb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032ce:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032d1:	39 e9                	cmp    ecx,ebp
c00032d3:	75 64                	jne    c0003339 <remove_chain+0xe3>
c00032d5:	89 ee                	mov    esi,ebp
c00032d7:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032da:	76 0f                	jbe    c00032eb <remove_chain+0x95>
c00032dc:	89 f2                	mov    edx,esi
c00032de:	89 f8                	mov    eax,edi
c00032e0:	e8 84 fa ff ff       	call   c0002d69 <get_fat>
c00032e5:	89 c5                	mov    ebp,eax
c00032e7:	85 c0                	test   eax,eax
c00032e9:	75 bf                	jne    c00032aa <remove_chain+0x54>
c00032eb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ee:	0f 85 a0 00 00 00    	jne    c0003394 <remove_chain+0x13e>
c00032f4:	eb 6c                	jmp    c0003362 <remove_chain+0x10c>
c00032f6:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c00032f9:	84 c0                	test   al,al
c00032fb:	75 7d                	jne    c000337a <remove_chain+0x124>
c00032fd:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003300:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003304:	0f 84 86 00 00 00    	je     c0003390 <remove_chain+0x13a>
c000330a:	89 da                	mov    edx,ebx
c000330c:	89 f8                	mov    eax,edi
c000330e:	e8 56 fa ff ff       	call   c0002d69 <get_fat>
c0003313:	83 f8 01             	cmp    eax,0x1
c0003316:	0f 86 4c ff ff ff    	jbe    c0003268 <remove_chain+0x12>
c000331c:	83 f8 ff             	cmp    eax,0xffffffff
c000331f:	75 4e                	jne    c000336f <remove_chain+0x119>
c0003321:	b8 01 00 00 00       	mov    eax,0x1
c0003326:	eb 6e                	jmp    c0003396 <remove_chain+0x140>
c0003328:	31 c9                	xor    ecx,ecx
c000332a:	89 f2                	mov    edx,esi
c000332c:	89 d8                	mov    eax,ebx
c000332e:	e8 31 f8 ff ff       	call   c0002b64 <put_fat>
c0003333:	85 c0                	test   eax,eax
c0003335:	74 82                	je     c00032b9 <remove_chain+0x63>
c0003337:	eb 5d                	jmp    c0003396 <remove_chain+0x140>
c0003339:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000333c:	75 1b                	jne    c0003359 <remove_chain+0x103>
c000333e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003342:	89 d8                	mov    eax,ebx
c0003344:	83 ec 0c             	sub    esp,0xc
c0003347:	6a 00                	push   0x0
c0003349:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000334d:	e8 5d f7 ff ff       	call   c0002aaf <change_bitmap>
c0003352:	83 c4 10             	add    esp,0x10
c0003355:	85 c0                	test   eax,eax
c0003357:	75 3d                	jne    c0003396 <remove_chain+0x140>
c0003359:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000335d:	e9 73 ff ff ff       	jmp    c00032d5 <remove_chain+0x7f>
c0003362:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003367:	75 8d                	jne    c00032f6 <remove_chain+0xa0>
c0003369:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000336d:	eb 25                	jmp    c0003394 <remove_chain+0x13e>
c000336f:	8d 53 01             	lea    edx,[ebx+0x1]
c0003372:	89 c3                	mov    ebx,eax
c0003374:	39 c2                	cmp    edx,eax
c0003376:	74 88                	je     c0003300 <remove_chain+0xaa>
c0003378:	eb 1a                	jmp    c0003394 <remove_chain+0x13e>
c000337a:	3c 03                	cmp    al,0x3
c000337c:	75 16                	jne    c0003394 <remove_chain+0x13e>
c000337e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003381:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003385:	77 0d                	ja     c0003394 <remove_chain+0x13e>
c0003387:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c000338a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000338e:	72 04                	jb     c0003394 <remove_chain+0x13e>
c0003390:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003394:	31 c0                	xor    eax,eax
c0003396:	83 c4 1c             	add    esp,0x1c
c0003399:	5b                   	pop    ebx
c000339a:	5e                   	pop    esi
c000339b:	5f                   	pop    edi
c000339c:	5d                   	pop    ebp
c000339d:	c3                   	ret    

c000339e <dir_clear>:
c000339e:	55                   	push   ebp
c000339f:	57                   	push   edi
c00033a0:	56                   	push   esi
c00033a1:	89 c6                	mov    esi,eax
c00033a3:	53                   	push   ebx
c00033a4:	83 ec 1c             	sub    esp,0x1c
c00033a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033ab:	e8 9d ed ff ff       	call   c000214d <sync_window>
c00033b0:	85 c0                	test   eax,eax
c00033b2:	0f 85 de 00 00 00    	jne    c0003496 <dir_clear+0xf8>
c00033b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033bc:	89 f0                	mov    eax,esi
c00033be:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033c1:	e8 d6 e8 ff ff       	call   c0001c9c <clst2sect>
c00033c6:	b9 00 02 00 00       	mov    ecx,0x200
c00033cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033d3:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033d6:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033d9:	89 e8                	mov    eax,ebp
c00033db:	31 d2                	xor    edx,edx
c00033dd:	e8 b5 e6 ff ff       	call   c0001a97 <mem_set>
c00033e2:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033e6:	c1 e3 09             	shl    ebx,0x9
c00033e9:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033ef:	76 1f                	jbe    c0003410 <dir_clear+0x72>
c00033f1:	bb 00 80 00 00       	mov    ebx,0x8000
c00033f6:	eb 18                	jmp    c0003410 <dir_clear+0x72>
c00033f8:	83 ec 0c             	sub    esp,0xc
c00033fb:	53                   	push   ebx
c00033fc:	e8 35 4e 00 00       	call   c0008236 <ff_memalloc>
c0003401:	83 c4 10             	add    esp,0x10
c0003404:	89 c7                	mov    edi,eax
c0003406:	85 c0                	test   eax,eax
c0003408:	0f 85 8f 00 00 00    	jne    c000349d <dir_clear+0xff>
c000340e:	d1 eb                	shr    ebx,1
c0003410:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003416:	77 e0                	ja     c00033f8 <dir_clear+0x5a>
c0003418:	31 db                	xor    ebx,ebx
c000341a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000341e:	39 d8                	cmp    eax,ebx
c0003420:	76 66                	jbe    c0003488 <dir_clear+0xea>
c0003422:	83 ec 0c             	sub    esp,0xc
c0003425:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003429:	6a 01                	push   0x1
c000342b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000342f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003433:	55                   	push   ebp
c0003434:	50                   	push   eax
c0003435:	e8 94 e5 ff ff       	call   c00019ce <disk_write>
c000343a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000343f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003444:	83 c4 20             	add    esp,0x20
c0003447:	85 c0                	test   eax,eax
c0003449:	75 3d                	jne    c0003488 <dir_clear+0xea>
c000344b:	43                   	inc    ebx
c000344c:	eb cc                	jmp    c000341a <dir_clear+0x7c>
c000344e:	83 ec 0c             	sub    esp,0xc
c0003451:	31 d2                	xor    edx,edx
c0003453:	55                   	push   ebp
c0003454:	89 d8                	mov    eax,ebx
c0003456:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000345a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000345e:	52                   	push   edx
c000345f:	50                   	push   eax
c0003460:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003464:	57                   	push   edi
c0003465:	50                   	push   eax
c0003466:	e8 63 e5 ff ff       	call   c00019ce <disk_write>
c000346b:	83 c4 20             	add    esp,0x20
c000346e:	85 c0                	test   eax,eax
c0003470:	75 0a                	jne    c000347c <dir_clear+0xde>
c0003472:	01 eb                	add    ebx,ebp
c0003474:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003478:	39 d8                	cmp    eax,ebx
c000347a:	77 d2                	ja     c000344e <dir_clear+0xb0>
c000347c:	83 ec 0c             	sub    esp,0xc
c000347f:	57                   	push   edi
c0003480:	e8 c7 4d 00 00       	call   c000824c <ff_memfree>
c0003485:	83 c4 10             	add    esp,0x10
c0003488:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000348c:	39 d8                	cmp    eax,ebx
c000348e:	0f 95 c0             	setne  al
c0003491:	0f b6 c0             	movzx  eax,al
c0003494:	eb 19                	jmp    c00034af <dir_clear+0x111>
c0003496:	b8 01 00 00 00       	mov    eax,0x1
c000349b:	eb 12                	jmp    c00034af <dir_clear+0x111>
c000349d:	89 d9                	mov    ecx,ebx
c000349f:	31 d2                	xor    edx,edx
c00034a1:	c1 eb 09             	shr    ebx,0x9
c00034a4:	e8 ee e5 ff ff       	call   c0001a97 <mem_set>
c00034a9:	89 dd                	mov    ebp,ebx
c00034ab:	31 db                	xor    ebx,ebx
c00034ad:	eb c5                	jmp    c0003474 <dir_clear+0xd6>
c00034af:	83 c4 1c             	add    esp,0x1c
c00034b2:	5b                   	pop    ebx
c00034b3:	5e                   	pop    esi
c00034b4:	5f                   	pop    edi
c00034b5:	5d                   	pop    ebp
c00034b6:	c3                   	ret    

c00034b7 <dir_next>:
c00034b7:	55                   	push   ebp
c00034b8:	57                   	push   edi
c00034b9:	56                   	push   esi
c00034ba:	53                   	push   ebx
c00034bb:	89 c3                	mov    ebx,eax
c00034bd:	83 ec 1c             	sub    esp,0x1c
c00034c0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034c6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034c9:	8d 78 20             	lea    edi,[eax+0x20]
c00034cc:	31 c0                	xor    eax,eax
c00034ce:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034d2:	0f 94 c0             	sete   al
c00034d5:	48                   	dec    eax
c00034d6:	25 00 00 20 f0       	and    eax,0xf0200000
c00034db:	05 00 00 00 10       	add    eax,0x10000000
c00034e0:	39 f8                	cmp    eax,edi
c00034e2:	77 0e                	ja     c00034f2 <dir_next+0x3b>
c00034e4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034eb:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034f2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00034f5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00034f8:	b8 04 00 00 00       	mov    eax,0x4
c00034fd:	89 ce                	mov    esi,ecx
c00034ff:	09 d6                	or     esi,edx
c0003501:	0f 84 da 00 00 00    	je     c00035e1 <dir_next+0x12a>
c0003507:	89 f8                	mov    eax,edi
c0003509:	25 ff 01 00 00       	and    eax,0x1ff
c000350e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003512:	0f 85 b9 00 00 00    	jne    c00035d1 <dir_next+0x11a>
c0003518:	83 c2 01             	add    edx,0x1
c000351b:	83 d1 00             	adc    ecx,0x0
c000351e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003521:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003524:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003527:	85 d2                	test   edx,edx
c0003529:	75 29                	jne    c0003554 <dir_next+0x9d>
c000352b:	89 fa                	mov    edx,edi
c000352d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003531:	c1 ea 05             	shr    edx,0x5
c0003534:	39 c2                	cmp    edx,eax
c0003536:	0f 82 95 00 00 00    	jb     c00035d1 <dir_next+0x11a>
c000353c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003543:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000354a:	b8 04 00 00 00       	mov    eax,0x4
c000354f:	e9 8d 00 00 00       	jmp    c00035e1 <dir_next+0x12a>
c0003554:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003558:	89 f9                	mov    ecx,edi
c000355a:	48                   	dec    eax
c000355b:	c1 e9 09             	shr    ecx,0x9
c000355e:	85 c8                	test   eax,ecx
c0003560:	75 6f                	jne    c00035d1 <dir_next+0x11a>
c0003562:	89 d8                	mov    eax,ebx
c0003564:	e8 00 f8 ff ff       	call   c0002d69 <get_fat>
c0003569:	89 c6                	mov    esi,eax
c000356b:	83 f8 01             	cmp    eax,0x1
c000356e:	77 07                	ja     c0003577 <dir_next+0xc0>
c0003570:	b8 02 00 00 00       	mov    eax,0x2
c0003575:	eb 6a                	jmp    c00035e1 <dir_next+0x12a>
c0003577:	83 f8 ff             	cmp    eax,0xffffffff
c000357a:	75 07                	jne    c0003583 <dir_next+0xcc>
c000357c:	b8 01 00 00 00       	mov    eax,0x1
c0003581:	eb 5e                	jmp    c00035e1 <dir_next+0x12a>
c0003583:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003586:	77 37                	ja     c00035bf <dir_next+0x108>
c0003588:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000358d:	74 ad                	je     c000353c <dir_next+0x85>
c000358f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003592:	89 d8                	mov    eax,ebx
c0003594:	e8 be fa ff ff       	call   c0003057 <create_chain>
c0003599:	89 c6                	mov    esi,eax
c000359b:	b8 07 00 00 00       	mov    eax,0x7
c00035a0:	85 f6                	test   esi,esi
c00035a2:	74 3d                	je     c00035e1 <dir_next+0x12a>
c00035a4:	83 fe 01             	cmp    esi,0x1
c00035a7:	74 c7                	je     c0003570 <dir_next+0xb9>
c00035a9:	83 fe ff             	cmp    esi,0xffffffff
c00035ac:	74 ce                	je     c000357c <dir_next+0xc5>
c00035ae:	89 f2                	mov    edx,esi
c00035b0:	89 e8                	mov    eax,ebp
c00035b2:	e8 e7 fd ff ff       	call   c000339e <dir_clear>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 c1                	jne    c000357c <dir_next+0xc5>
c00035bb:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035bf:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035c2:	89 f2                	mov    edx,esi
c00035c4:	89 e8                	mov    eax,ebp
c00035c6:	e8 d1 e6 ff ff       	call   c0001c9c <clst2sect>
c00035cb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035ce:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035d5:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035d8:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035dc:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035df:	31 c0                	xor    eax,eax
c00035e1:	83 c4 1c             	add    esp,0x1c
c00035e4:	5b                   	pop    ebx
c00035e5:	5e                   	pop    esi
c00035e6:	5f                   	pop    edi
c00035e7:	5d                   	pop    ebp
c00035e8:	c3                   	ret    

c00035e9 <load_xdir>:
c00035e9:	55                   	push   ebp
c00035ea:	57                   	push   edi
c00035eb:	56                   	push   esi
c00035ec:	89 c6                	mov    esi,eax
c00035ee:	53                   	push   ebx
c00035ef:	83 ec 1c             	sub    esp,0x1c
c00035f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00035f4:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035f7:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035fa:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035fd:	e8 df eb ff ff       	call   c00021e1 <move_window>
c0003602:	89 c3                	mov    ebx,eax
c0003604:	85 c0                	test   eax,eax
c0003606:	0f 85 0c 01 00 00    	jne    c0003718 <load_xdir+0x12f>
c000360c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000360f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003612:	0f 85 fb 00 00 00    	jne    c0003713 <load_xdir+0x12a>
c0003618:	89 f8                	mov    eax,edi
c000361a:	b9 20 00 00 00       	mov    ecx,0x20
c000361f:	e8 5e e4 ff ff       	call   c0001a82 <mem_cpy>
c0003624:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003628:	40                   	inc    eax
c0003629:	c1 e0 05             	shl    eax,0x5
c000362c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003630:	83 e8 60             	sub    eax,0x60
c0003633:	3d 00 02 00 00       	cmp    eax,0x200
c0003638:	0f 87 d5 00 00 00    	ja     c0003713 <load_xdir+0x12a>
c000363e:	31 d2                	xor    edx,edx
c0003640:	89 f0                	mov    eax,esi
c0003642:	e8 70 fe ff ff       	call   c00034b7 <dir_next>
c0003647:	89 c3                	mov    ebx,eax
c0003649:	83 f8 04             	cmp    eax,0x4
c000364c:	0f 84 c1 00 00 00    	je     c0003713 <load_xdir+0x12a>
c0003652:	85 c0                	test   eax,eax
c0003654:	0f 85 be 00 00 00    	jne    c0003718 <load_xdir+0x12f>
c000365a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000365d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003660:	8b 06                	mov    eax,DWORD PTR [esi]
c0003662:	e8 7a eb ff ff       	call   c00021e1 <move_window>
c0003667:	89 c3                	mov    ebx,eax
c0003669:	85 c0                	test   eax,eax
c000366b:	0f 85 a7 00 00 00    	jne    c0003718 <load_xdir+0x12f>
c0003671:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003674:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003677:	0f 85 96 00 00 00    	jne    c0003713 <load_xdir+0x12a>
c000367d:	8d 47 20             	lea    eax,[edi+0x20]
c0003680:	b9 20 00 00 00       	mov    ecx,0x20
c0003685:	e8 f8 e3 ff ff       	call   c0001a82 <mem_cpy>
c000368a:	31 d2                	xor    edx,edx
c000368c:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003690:	b9 0f 00 00 00       	mov    ecx,0xf
c0003695:	83 c0 2c             	add    eax,0x2c
c0003698:	f7 f1                	div    ecx
c000369a:	c1 e0 05             	shl    eax,0x5
c000369d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036a1:	77 70                	ja     c0003713 <load_xdir+0x12a>
c00036a3:	bd 40 00 00 00       	mov    ebp,0x40
c00036a8:	31 d2                	xor    edx,edx
c00036aa:	89 f0                	mov    eax,esi
c00036ac:	e8 06 fe ff ff       	call   c00034b7 <dir_next>
c00036b1:	89 c3                	mov    ebx,eax
c00036b3:	83 f8 04             	cmp    eax,0x4
c00036b6:	74 5b                	je     c0003713 <load_xdir+0x12a>
c00036b8:	85 c0                	test   eax,eax
c00036ba:	75 5c                	jne    c0003718 <load_xdir+0x12f>
c00036bc:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036bf:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00036c4:	e8 18 eb ff ff       	call   c00021e1 <move_window>
c00036c9:	89 c3                	mov    ebx,eax
c00036cb:	85 c0                	test   eax,eax
c00036cd:	75 49                	jne    c0003718 <load_xdir+0x12f>
c00036cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036d2:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036d5:	75 3c                	jne    c0003713 <load_xdir+0x12a>
c00036d7:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036dd:	77 0d                	ja     c00036ec <load_xdir+0x103>
c00036df:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036e2:	b9 20 00 00 00       	mov    ecx,0x20
c00036e7:	e8 96 e3 ff ff       	call   c0001a82 <mem_cpy>
c00036ec:	83 c5 20             	add    ebp,0x20
c00036ef:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00036f3:	77 b3                	ja     c00036a8 <load_xdir+0xbf>
c00036f5:	81 fd 60 02 00 00    	cmp    ebp,0x260
c00036fb:	77 1b                	ja     c0003718 <load_xdir+0x12f>
c00036fd:	89 f8                	mov    eax,edi
c00036ff:	e8 cd e7 ff ff       	call   c0001ed1 <xdir_sum>
c0003704:	89 c1                	mov    ecx,eax
c0003706:	8d 47 02             	lea    eax,[edi+0x2]
c0003709:	e8 f5 e2 ff ff       	call   c0001a03 <ld_word>
c000370e:	66 39 c1             	cmp    cx,ax
c0003711:	74 05                	je     c0003718 <load_xdir+0x12f>
c0003713:	bb 02 00 00 00       	mov    ebx,0x2
c0003718:	83 c4 1c             	add    esp,0x1c
c000371b:	89 d8                	mov    eax,ebx
c000371d:	5b                   	pop    ebx
c000371e:	5e                   	pop    esi
c000371f:	5f                   	pop    edi
c0003720:	5d                   	pop    ebp
c0003721:	c3                   	ret    

c0003722 <load_obj_xdir>:
c0003722:	53                   	push   ebx
c0003723:	89 c3                	mov    ebx,eax
c0003725:	83 ec 08             	sub    esp,0x8
c0003728:	8b 02                	mov    eax,DWORD PTR [edx]
c000372a:	89 03                	mov    DWORD PTR [ebx],eax
c000372c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000372f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003732:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003735:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003738:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000373b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003742:	30 c0                	xor    al,al
c0003744:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000374b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000374e:	89 d8                	mov    eax,ebx
c0003750:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003753:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003756:	e8 04 f8 ff ff       	call   c0002f5f <dir_sdi>
c000375b:	85 c0                	test   eax,eax
c000375d:	75 0b                	jne    c000376a <load_obj_xdir+0x48>
c000375f:	89 d8                	mov    eax,ebx
c0003761:	83 c4 08             	add    esp,0x8
c0003764:	5b                   	pop    ebx
c0003765:	e9 7f fe ff ff       	jmp    c00035e9 <load_xdir>
c000376a:	83 c4 08             	add    esp,0x8
c000376d:	5b                   	pop    ebx
c000376e:	c3                   	ret    

c000376f <dir_read>:
c000376f:	55                   	push   ebp
c0003770:	bd 04 00 00 00       	mov    ebp,0x4
c0003775:	57                   	push   edi
c0003776:	56                   	push   esi
c0003777:	be ff ff ff ff       	mov    esi,0xffffffff
c000377c:	53                   	push   ebx
c000377d:	89 c3                	mov    ebx,eax
c000377f:	83 ec 1c             	sub    esp,0x1c
c0003782:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003786:	8b 38                	mov    edi,DWORD PTR [eax]
c0003788:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000378d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003793:	89 c8                	mov    eax,ecx
c0003795:	09 d0                	or     eax,edx
c0003797:	0f 84 25 01 00 00    	je     c00038c2 <dir_read+0x153>
c000379d:	89 f8                	mov    eax,edi
c000379f:	e8 3d ea ff ff       	call   c00021e1 <move_window>
c00037a4:	89 c5                	mov    ebp,eax
c00037a6:	85 c0                	test   eax,eax
c00037a8:	0f 85 23 01 00 00    	jne    c00038d1 <dir_read+0x162>
c00037ae:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037b1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037b3:	84 c9                	test   cl,cl
c00037b5:	0f 84 11 01 00 00    	je     c00038cc <dir_read+0x15d>
c00037bb:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037be:	75 48                	jne    c0003808 <dir_read+0x99>
c00037c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037c5:	74 10                	je     c00037d7 <dir_read+0x68>
c00037c7:	80 f9 83             	cmp    cl,0x83
c00037ca:	0f 85 dd 00 00 00    	jne    c00038ad <dir_read+0x13e>
c00037d0:	31 ed                	xor    ebp,ebp
c00037d2:	e9 08 01 00 00       	jmp    c00038df <dir_read+0x170>
c00037d7:	80 f9 85             	cmp    cl,0x85
c00037da:	0f 85 cd 00 00 00    	jne    c00038ad <dir_read+0x13e>
c00037e0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e3:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e6:	89 d8                	mov    eax,ebx
c00037e8:	e8 fc fd ff ff       	call   c00035e9 <load_xdir>
c00037ed:	89 c5                	mov    ebp,eax
c00037ef:	85 c0                	test   eax,eax
c00037f1:	0f 85 da 00 00 00    	jne    c00038d1 <dir_read+0x162>
c00037f7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00037fa:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00037fd:	83 e0 3f             	and    eax,0x3f
c0003800:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003803:	e9 d7 00 00 00       	jmp    c00038df <dir_read+0x170>
c0003808:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	80 f9 2e             	cmp    cl,0x2e
c0003811:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003815:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003818:	0f 84 8a 00 00 00    	je     c00038a8 <dir_read+0x139>
c000381e:	80 f9 e5             	cmp    cl,0xe5
c0003821:	0f 84 81 00 00 00    	je     c00038a8 <dir_read+0x139>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	83 e0 1f             	and    eax,0x1f
c000382e:	83 f8 08             	cmp    eax,0x8
c0003831:	0f 94 c0             	sete   al
c0003834:	0f b6 c0             	movzx  eax,al
c0003837:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000383b:	75 6b                	jne    c00038a8 <dir_read+0x139>
c000383d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003842:	75 44                	jne    c0003888 <dir_read+0x119>
c0003844:	f6 c1 40             	test   cl,0x40
c0003847:	74 12                	je     c000385b <dir_read+0xec>
c0003849:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000384c:	83 e1 bf             	and    ecx,0xffffffbf
c000384f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003853:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003856:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003859:	eb 06                	jmp    c0003861 <dir_read+0xf2>
c000385b:	89 f0                	mov    eax,esi
c000385d:	38 c8                	cmp    al,cl
c000385f:	75 47                	jne    c00038a8 <dir_read+0x139>
c0003861:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003865:	be ff ff ff ff       	mov    esi,0xffffffff
c000386a:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000386d:	75 3e                	jne    c00038ad <dir_read+0x13e>
c000386f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003873:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003876:	e8 8a e4 ff ff       	call   c0001d05 <pick_lfn>
c000387b:	85 c0                	test   eax,eax
c000387d:	74 2e                	je     c00038ad <dir_read+0x13e>
c000387f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003883:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003886:	eb 25                	jmp    c00038ad <dir_read+0x13e>
c0003888:	89 f0                	mov    eax,esi
c000388a:	84 c0                	test   al,al
c000388c:	75 11                	jne    c000389f <dir_read+0x130>
c000388e:	89 d0                	mov    eax,edx
c0003890:	e8 2a e6 ff ff       	call   c0001ebf <sum_sfn>
c0003895:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003899:	0f 84 31 ff ff ff    	je     c00037d0 <dir_read+0x61>
c000389f:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038a6:	eb 37                	jmp    c00038df <dir_read+0x170>
c00038a8:	be ff ff ff ff       	mov    esi,0xffffffff
c00038ad:	31 d2                	xor    edx,edx
c00038af:	89 d8                	mov    eax,ebx
c00038b1:	e8 01 fc ff ff       	call   c00034b7 <dir_next>
c00038b6:	89 c5                	mov    ebp,eax
c00038b8:	85 c0                	test   eax,eax
c00038ba:	0f 84 cd fe ff ff    	je     c000378d <dir_read+0x1e>
c00038c0:	eb 0f                	jmp    c00038d1 <dir_read+0x162>
c00038c2:	85 ed                	test   ebp,ebp
c00038c4:	0f 84 06 ff ff ff    	je     c00037d0 <dir_read+0x61>
c00038ca:	eb 05                	jmp    c00038d1 <dir_read+0x162>
c00038cc:	bd 04 00 00 00       	mov    ebp,0x4
c00038d1:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038d8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038df:	83 c4 1c             	add    esp,0x1c
c00038e2:	89 e8                	mov    eax,ebp
c00038e4:	5b                   	pop    ebx
c00038e5:	5e                   	pop    esi
c00038e6:	5f                   	pop    edi
c00038e7:	5d                   	pop    ebp
c00038e8:	c3                   	ret    

c00038e9 <dir_alloc>:
c00038e9:	55                   	push   ebp
c00038ea:	89 d5                	mov    ebp,edx
c00038ec:	57                   	push   edi
c00038ed:	31 d2                	xor    edx,edx
c00038ef:	56                   	push   esi
c00038f0:	53                   	push   ebx
c00038f1:	89 c3                	mov    ebx,eax
c00038f3:	83 ec 0c             	sub    esp,0xc
c00038f6:	8b 38                	mov    edi,DWORD PTR [eax]
c00038f8:	e8 62 f6 ff ff       	call   c0002f5f <dir_sdi>
c00038fd:	85 c0                	test   eax,eax
c00038ff:	75 4e                	jne    c000394f <dir_alloc+0x66>
c0003901:	31 f6                	xor    esi,esi
c0003903:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003906:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003909:	89 f8                	mov    eax,edi
c000390b:	e8 d1 e8 ff ff       	call   c00021e1 <move_window>
c0003910:	85 c0                	test   eax,eax
c0003912:	75 3b                	jne    c000394f <dir_alloc+0x66>
c0003914:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003917:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000391a:	8a 12                	mov    dl,BYTE PTR [edx]
c000391c:	75 07                	jne    c0003925 <dir_alloc+0x3c>
c000391e:	f7 d2                	not    edx
c0003920:	c0 ea 07             	shr    dl,0x7
c0003923:	eb 0d                	jmp    c0003932 <dir_alloc+0x49>
c0003925:	84 d2                	test   dl,dl
c0003927:	0f 94 c1             	sete   cl
c000392a:	80 fa e5             	cmp    dl,0xe5
c000392d:	0f 94 c2             	sete   dl
c0003930:	09 ca                	or     edx,ecx
c0003932:	84 d2                	test   dl,dl
c0003934:	74 07                	je     c000393d <dir_alloc+0x54>
c0003936:	46                   	inc    esi
c0003937:	39 ee                	cmp    esi,ebp
c0003939:	75 04                	jne    c000393f <dir_alloc+0x56>
c000393b:	eb 1c                	jmp    c0003959 <dir_alloc+0x70>
c000393d:	31 f6                	xor    esi,esi
c000393f:	ba 01 00 00 00       	mov    edx,0x1
c0003944:	89 d8                	mov    eax,ebx
c0003946:	e8 6c fb ff ff       	call   c00034b7 <dir_next>
c000394b:	85 c0                	test   eax,eax
c000394d:	74 b4                	je     c0003903 <dir_alloc+0x1a>
c000394f:	83 f8 04             	cmp    eax,0x4
c0003952:	75 05                	jne    c0003959 <dir_alloc+0x70>
c0003954:	b8 07 00 00 00       	mov    eax,0x7
c0003959:	83 c4 0c             	add    esp,0xc
c000395c:	5b                   	pop    ebx
c000395d:	5e                   	pop    esi
c000395e:	5f                   	pop    edi
c000395f:	5d                   	pop    ebp
c0003960:	c3                   	ret    

c0003961 <store_xdir>:
c0003961:	55                   	push   ebp
c0003962:	57                   	push   edi
c0003963:	89 c7                	mov    edi,eax
c0003965:	56                   	push   esi
c0003966:	53                   	push   ebx
c0003967:	83 ec 0c             	sub    esp,0xc
c000396a:	8b 00                	mov    eax,DWORD PTR [eax]
c000396c:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000396f:	89 e8                	mov    eax,ebp
c0003971:	e8 5b e5 ff ff       	call   c0001ed1 <xdir_sum>
c0003976:	0f b7 d0             	movzx  edx,ax
c0003979:	8d 45 02             	lea    eax,[ebp+0x2]
c000397c:	e8 f4 e0 ff ff       	call   c0001a75 <st_word>
c0003981:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003985:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003988:	89 f8                	mov    eax,edi
c000398a:	e8 d0 f5 ff ff       	call   c0002f5f <dir_sdi>
c000398f:	89 c6                	mov    esi,eax
c0003991:	85 f6                	test   esi,esi
c0003993:	75 3d                	jne    c00039d2 <store_xdir+0x71>
c0003995:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003998:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c000399b:	8b 07                	mov    eax,DWORD PTR [edi]
c000399d:	e8 3f e8 ff ff       	call   c00021e1 <move_window>
c00039a2:	89 c6                	mov    esi,eax
c00039a4:	85 c0                	test   eax,eax
c00039a6:	75 2a                	jne    c00039d2 <store_xdir+0x71>
c00039a8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039ab:	b9 20 00 00 00       	mov    ecx,0x20
c00039b0:	89 ea                	mov    edx,ebp
c00039b2:	e8 cb e0 ff ff       	call   c0001a82 <mem_cpy>
c00039b7:	8b 07                	mov    eax,DWORD PTR [edi]
c00039b9:	85 db                	test   ebx,ebx
c00039bb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039bf:	74 11                	je     c00039d2 <store_xdir+0x71>
c00039c1:	31 d2                	xor    edx,edx
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	83 c5 20             	add    ebp,0x20
c00039c8:	e8 ea fa ff ff       	call   c00034b7 <dir_next>
c00039cd:	4b                   	dec    ebx
c00039ce:	89 c6                	mov    esi,eax
c00039d0:	eb bf                	jmp    c0003991 <store_xdir+0x30>
c00039d2:	89 f0                	mov    eax,esi
c00039d4:	83 fe 02             	cmp    esi,0x2
c00039d7:	76 05                	jbe    c00039de <store_xdir+0x7d>
c00039d9:	b8 02 00 00 00       	mov    eax,0x2
c00039de:	83 c4 0c             	add    esp,0xc
c00039e1:	5b                   	pop    ebx
c00039e2:	5e                   	pop    esi
c00039e3:	5f                   	pop    edi
c00039e4:	5d                   	pop    ebp
c00039e5:	c3                   	ret    

c00039e6 <dir_remove>:
c00039e6:	57                   	push   edi
c00039e7:	56                   	push   esi
c00039e8:	53                   	push   ebx
c00039e9:	89 c3                	mov    ebx,eax
c00039eb:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039ee:	8b 30                	mov    esi,DWORD PTR [eax]
c00039f0:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c00039f3:	83 fa ff             	cmp    edx,0xffffffff
c00039f6:	74 09                	je     c0003a01 <dir_remove+0x1b>
c00039f8:	e8 62 f5 ff ff       	call   c0002f5f <dir_sdi>
c00039fd:	85 c0                	test   eax,eax
c00039ff:	75 41                	jne    c0003a42 <dir_remove+0x5c>
c0003a01:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a04:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a07:	89 f0                	mov    eax,esi
c0003a09:	e8 d3 e7 ff ff       	call   c00021e1 <move_window>
c0003a0e:	85 c0                	test   eax,eax
c0003a10:	75 26                	jne    c0003a38 <dir_remove+0x52>
c0003a12:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a15:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a18:	75 05                	jne    c0003a1f <dir_remove+0x39>
c0003a1a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a1d:	eb 03                	jmp    c0003a22 <dir_remove+0x3c>
c0003a1f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a22:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a26:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a29:	73 17                	jae    c0003a42 <dir_remove+0x5c>
c0003a2b:	31 d2                	xor    edx,edx
c0003a2d:	89 d8                	mov    eax,ebx
c0003a2f:	e8 83 fa ff ff       	call   c00034b7 <dir_next>
c0003a34:	85 c0                	test   eax,eax
c0003a36:	74 c9                	je     c0003a01 <dir_remove+0x1b>
c0003a38:	83 f8 04             	cmp    eax,0x4
c0003a3b:	75 05                	jne    c0003a42 <dir_remove+0x5c>
c0003a3d:	b8 02 00 00 00       	mov    eax,0x2
c0003a42:	5b                   	pop    ebx
c0003a43:	5e                   	pop    esi
c0003a44:	5f                   	pop    edi
c0003a45:	c3                   	ret    

c0003a46 <create_name>:
c0003a46:	55                   	push   ebp
c0003a47:	89 d5                	mov    ebp,edx
c0003a49:	57                   	push   edi
c0003a4a:	89 c7                	mov    edi,eax
c0003a4c:	56                   	push   esi
c0003a4d:	31 f6                	xor    esi,esi
c0003a4f:	53                   	push   ebx
c0003a50:	83 ec 3c             	sub    esp,0x3c
c0003a53:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a59:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a62:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a66:	e8 72 e0 ff ff       	call   c0001add <tchar2uni>
c0003a6b:	89 c3                	mov    ebx,eax
c0003a6d:	83 f8 ff             	cmp    eax,0xffffffff
c0003a70:	75 0a                	jne    c0003a7c <create_name+0x36>
c0003a72:	b8 06 00 00 00       	mov    eax,0x6
c0003a77:	e9 9e 02 00 00       	jmp    c0003d1a <create_name+0x2d4>
c0003a7c:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a81:	76 0c                	jbe    c0003a8f <create_name+0x49>
c0003a83:	c1 e8 10             	shr    eax,0x10
c0003a86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a8a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a8e:	46                   	inc    esi
c0003a8f:	66 83 fb 1f          	cmp    bx,0x1f
c0003a93:	76 4f                	jbe    c0003ae4 <create_name+0x9e>
c0003a95:	66 83 fb 5c          	cmp    bx,0x5c
c0003a99:	74 35                	je     c0003ad0 <create_name+0x8a>
c0003a9b:	66 83 fb 2f          	cmp    bx,0x2f
c0003a9f:	74 2f                	je     c0003ad0 <create_name+0x8a>
c0003aa1:	66 83 fb 7f          	cmp    bx,0x7f
c0003aa5:	77 11                	ja     c0003ab8 <create_name+0x72>
c0003aa7:	0f b7 d3             	movzx  edx,bx
c0003aaa:	b8 32 5e 02 c0       	mov    eax,0xc0025e32
c0003aaf:	e8 11 e0 ff ff       	call   c0001ac5 <chk_chr>
c0003ab4:	85 c0                	test   eax,eax
c0003ab6:	75 ba                	jne    c0003a72 <create_name+0x2c>
c0003ab8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003abe:	77 b2                	ja     c0003a72 <create_name+0x2c>
c0003ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ac4:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ac8:	46                   	inc    esi
c0003ac9:	eb 97                	jmp    c0003a62 <create_name+0x1c>
c0003acb:	40                   	inc    eax
c0003acc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ad0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ad4:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ad6:	80 fa 2f             	cmp    dl,0x2f
c0003ad9:	74 f0                	je     c0003acb <create_name+0x85>
c0003adb:	80 fa 5c             	cmp    dl,0x5c
c0003ade:	74 eb                	je     c0003acb <create_name+0x85>
c0003ae0:	31 db                	xor    ebx,ebx
c0003ae2:	eb 02                	jmp    c0003ae6 <create_name+0xa0>
c0003ae4:	b3 04                	mov    bl,0x4
c0003ae6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003aea:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003aed:	85 f6                	test   esi,esi
c0003aef:	74 18                	je     c0003b09 <create_name+0xc3>
c0003af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003af5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003afa:	66 83 f8 20          	cmp    ax,0x20
c0003afe:	74 06                	je     c0003b06 <create_name+0xc0>
c0003b00:	66 83 f8 2e          	cmp    ax,0x2e
c0003b04:	75 03                	jne    c0003b09 <create_name+0xc3>
c0003b06:	4e                   	dec    esi
c0003b07:	eb e4                	jmp    c0003aed <create_name+0xa7>
c0003b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0d:	31 ed                	xor    ebp,ebp
c0003b0f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b15:	85 f6                	test   esi,esi
c0003b17:	0f 84 55 ff ff ff    	je     c0003a72 <create_name+0x2c>
c0003b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b21:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b24:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b28:	66 83 f8 20          	cmp    ax,0x20
c0003b2c:	75 04                	jne    c0003b32 <create_name+0xec>
c0003b2e:	89 d5                	mov    ebp,edx
c0003b30:	eb eb                	jmp    c0003b1d <create_name+0xd7>
c0003b32:	85 ed                	test   ebp,ebp
c0003b34:	75 06                	jne    c0003b3c <create_name+0xf6>
c0003b36:	66 83 f8 2e          	cmp    ax,0x2e
c0003b3a:	75 08                	jne    c0003b44 <create_name+0xfe>
c0003b3c:	83 cb 03             	or     ebx,0x3
c0003b3f:	eb 03                	jmp    c0003b44 <create_name+0xfe>
c0003b41:	4e                   	dec    esi
c0003b42:	74 0c                	je     c0003b50 <create_name+0x10a>
c0003b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b48:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b4e:	75 f1                	jne    c0003b41 <create_name+0xfb>
c0003b50:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b55:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b58:	ba 20 00 00 00       	mov    edx,0x20
c0003b5d:	e8 35 df ff ff       	call   c0001a97 <mem_set>
c0003b62:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b6a:	31 c9                	xor    ecx,ecx
c0003b6c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b71:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b7c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b80:	66 85 ed             	test   bp,bp
c0003b83:	0f 84 30 01 00 00    	je     c0003cb9 <create_name+0x273>
c0003b89:	66 83 fd 20          	cmp    bp,0x20
c0003b8d:	74 10                	je     c0003b9f <create_name+0x159>
c0003b8f:	66 83 fd 2e          	cmp    bp,0x2e
c0003b93:	75 13                	jne    c0003ba8 <create_name+0x162>
c0003b95:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b99:	0f 84 6b 01 00 00    	je     c0003d0a <create_name+0x2c4>
c0003b9f:	83 cb 03             	or     ebx,0x3
c0003ba2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003ba6:	eb c9                	jmp    c0003b71 <create_name+0x12b>
c0003ba8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bac:	73 0b                	jae    c0003bb9 <create_name+0x173>
c0003bae:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bb2:	75 47                	jne    c0003bfb <create_name+0x1b5>
c0003bb4:	e9 51 01 00 00       	jmp    c0003d0a <create_name+0x2c4>
c0003bb9:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bbe:	75 10                	jne    c0003bd0 <create_name+0x18a>
c0003bc0:	83 cb 03             	or     ebx,0x3
c0003bc3:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bcb:	e9 e9 00 00 00       	jmp    c0003cb9 <create_name+0x273>
c0003bd0:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bd4:	74 0d                	je     c0003be3 <create_name+0x19d>
c0003bd6:	83 cb 03             	or     ebx,0x3
c0003bd9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bdd:	0f 87 d6 00 00 00    	ja     c0003cb9 <create_name+0x273>
c0003be3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003be8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bec:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bf4:	b9 08 00 00 00       	mov    ecx,0x8
c0003bf9:	eb a7                	jmp    c0003ba2 <create_name+0x15c>
c0003bfb:	66 83 fd 7f          	cmp    bp,0x7f
c0003bff:	76 68                	jbe    c0003c69 <create_name+0x223>
c0003c01:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c05:	88 da                	mov    dl,bl
c0003c07:	83 ca 02             	or     edx,0x2
c0003c0a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c0e:	50                   	push   eax
c0003c0f:	50                   	push   eax
c0003c10:	68 b5 01 00 00       	push   0x1b5
c0003c15:	55                   	push   ebp
c0003c16:	e8 48 46 00 00       	call   c0008263 <ff_uni2oem>
c0003c1b:	83 c4 10             	add    esp,0x10
c0003c1e:	89 c5                	mov    ebp,eax
c0003c20:	a8 80                	test   al,0x80
c0003c22:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c26:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c2a:	74 0c                	je     c0003c38 <create_name+0x1f2>
c0003c2c:	83 e5 7f             	and    ebp,0x7f
c0003c2f:	0f b6 ad 80 5d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffda280]
c0003c36:	eb 2a                	jmp    c0003c62 <create_name+0x21c>
c0003c38:	66 3d ff 00          	cmp    ax,0xff
c0003c3c:	76 24                	jbe    c0003c62 <create_name+0x21c>
c0003c3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c42:	48                   	dec    eax
c0003c43:	39 c8                	cmp    eax,ecx
c0003c45:	77 0c                	ja     c0003c53 <create_name+0x20d>
c0003c47:	83 cb 03             	or     ebx,0x3
c0003c4a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c4e:	e9 4f ff ff ff       	jmp    c0003ba2 <create_name+0x15c>
c0003c53:	89 e8                	mov    eax,ebp
c0003c55:	88 d3                	mov    bl,dl
c0003c57:	66 c1 e8 08          	shr    ax,0x8
c0003c5b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c5f:	41                   	inc    ecx
c0003c60:	eb 4b                	jmp    c0003cad <create_name+0x267>
c0003c62:	88 d3                	mov    bl,dl
c0003c64:	66 85 ed             	test   bp,bp
c0003c67:	74 19                	je     c0003c82 <create_name+0x23c>
c0003c69:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c6d:	0f b7 d5             	movzx  edx,bp
c0003c70:	b8 3b 5e 02 c0       	mov    eax,0xc0025e3b
c0003c75:	e8 4b de ff ff       	call   c0001ac5 <chk_chr>
c0003c7a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c7e:	85 c0                	test   eax,eax
c0003c80:	74 0a                	je     c0003c8c <create_name+0x246>
c0003c82:	83 cb 03             	or     ebx,0x3
c0003c85:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c8a:	eb 21                	jmp    c0003cad <create_name+0x267>
c0003c8c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c8f:	66 83 f8 19          	cmp    ax,0x19
c0003c93:	77 07                	ja     c0003c9c <create_name+0x256>
c0003c95:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c9a:	eb 11                	jmp    c0003cad <create_name+0x267>
c0003c9c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c9f:	66 83 f8 19          	cmp    ax,0x19
c0003ca3:	77 08                	ja     c0003cad <create_name+0x267>
c0003ca5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003caa:	83 ed 20             	sub    ebp,0x20
c0003cad:	89 e8                	mov    eax,ebp
c0003caf:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cb3:	41                   	inc    ecx
c0003cb4:	e9 e9 fe ff ff       	jmp    c0003ba2 <create_name+0x15c>
c0003cb9:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cbd:	75 04                	jne    c0003cc3 <create_name+0x27d>
c0003cbf:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cc3:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cc8:	75 05                	jne    c0003ccf <create_name+0x289>
c0003cca:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ccf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cd3:	83 e0 0c             	and    eax,0xc
c0003cd6:	3c 0c                	cmp    al,0xc
c0003cd8:	74 0b                	je     c0003ce5 <create_name+0x29f>
c0003cda:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cde:	83 e0 03             	and    eax,0x3
c0003ce1:	3c 03                	cmp    al,0x3
c0003ce3:	75 05                	jne    c0003cea <create_name+0x2a4>
c0003ce5:	83 cb 02             	or     ebx,0x2
c0003ce8:	eb 19                	jmp    c0003d03 <create_name+0x2bd>
c0003cea:	f6 c3 02             	test   bl,0x2
c0003ced:	75 14                	jne    c0003d03 <create_name+0x2bd>
c0003cef:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003cf4:	74 03                	je     c0003cf9 <create_name+0x2b3>
c0003cf6:	83 cb 10             	or     ebx,0x10
c0003cf9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003cfe:	74 03                	je     c0003d03 <create_name+0x2bd>
c0003d00:	83 cb 08             	or     ebx,0x8
c0003d03:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d06:	31 c0                	xor    eax,eax
c0003d08:	eb 10                	jmp    c0003d1a <create_name+0x2d4>
c0003d0a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0f:	0f 85 ce fe ff ff    	jne    c0003be3 <create_name+0x19d>
c0003d15:	e9 a6 fe ff ff       	jmp    c0003bc0 <create_name+0x17a>
c0003d1a:	83 c4 3c             	add    esp,0x3c
c0003d1d:	5b                   	pop    ebx
c0003d1e:	5e                   	pop    esi
c0003d1f:	5f                   	pop    edi
c0003d20:	5d                   	pop    ebp
c0003d21:	c3                   	ret    

c0003d22 <xname_sum>:
c0003d22:	56                   	push   esi
c0003d23:	53                   	push   ebx
c0003d24:	89 c6                	mov    esi,eax
c0003d26:	51                   	push   ecx
c0003d27:	31 db                	xor    ebx,ebx
c0003d29:	83 c6 02             	add    esi,0x2
c0003d2c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d30:	66 85 c0             	test   ax,ax
c0003d33:	74 1f                	je     c0003d54 <xname_sum+0x32>
c0003d35:	83 ec 0c             	sub    esp,0xc
c0003d38:	66 d1 cb             	ror    bx,1
c0003d3b:	50                   	push   eax
c0003d3c:	e8 1e 46 00 00       	call   c000835f <ff_wtoupper>
c0003d41:	83 c4 10             	add    esp,0x10
c0003d44:	0f b6 d0             	movzx  edx,al
c0003d47:	66 c1 e8 08          	shr    ax,0x8
c0003d4b:	01 d3                	add    ebx,edx
c0003d4d:	66 d1 cb             	ror    bx,1
c0003d50:	01 c3                	add    ebx,eax
c0003d52:	eb d5                	jmp    c0003d29 <xname_sum+0x7>
c0003d54:	89 d8                	mov    eax,ebx
c0003d56:	5a                   	pop    edx
c0003d57:	5b                   	pop    ebx
c0003d58:	5e                   	pop    esi
c0003d59:	c3                   	ret    

c0003d5a <create_xdir>:
c0003d5a:	55                   	push   ebp
c0003d5b:	b9 40 00 00 00       	mov    ecx,0x40
c0003d60:	57                   	push   edi
c0003d61:	bd 01 00 00 00       	mov    ebp,0x1
c0003d66:	56                   	push   esi
c0003d67:	31 ff                	xor    edi,edi
c0003d69:	53                   	push   ebx
c0003d6a:	be 40 00 00 00       	mov    esi,0x40
c0003d6f:	89 c3                	mov    ebx,eax
c0003d71:	83 ec 1c             	sub    esp,0x1c
c0003d74:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d78:	31 d2                	xor    edx,edx
c0003d7a:	e8 18 dd ff ff       	call   c0001a97 <mem_set>
c0003d7f:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d82:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d86:	31 c9                	xor    ecx,ecx
c0003d88:	8d 46 01             	lea    eax,[esi+0x1]
c0003d8b:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d8f:	83 c6 02             	add    esi,0x2
c0003d92:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d96:	66 85 ed             	test   bp,bp
c0003d99:	74 12                	je     c0003dad <create_xdir+0x53>
c0003d9b:	0f b6 c1             	movzx  eax,cl
c0003d9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003da2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003da6:	66 83 fd 01          	cmp    bp,0x1
c0003daa:	80 d9 ff             	sbb    cl,0xff
c0003dad:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003db0:	0f b7 d5             	movzx  edx,bp
c0003db3:	83 c6 02             	add    esi,0x2
c0003db6:	e8 ba dc ff ff       	call   c0001a75 <st_word>
c0003dbb:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dc1:	75 d3                	jne    c0003d96 <create_xdir+0x3c>
c0003dc3:	8d 47 01             	lea    eax,[edi+0x1]
c0003dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dca:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003dce:	0f b6 c1             	movzx  eax,cl
c0003dd1:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003dd6:	74 07                	je     c0003ddf <create_xdir+0x85>
c0003dd8:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003ddd:	eb a9                	jmp    c0003d88 <create_xdir+0x2e>
c0003ddf:	8d 47 02             	lea    eax,[edi+0x2]
c0003de2:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003de5:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003de8:	89 d0                	mov    eax,edx
c0003dea:	e8 33 ff ff ff       	call   c0003d22 <xname_sum>
c0003def:	83 c4 1c             	add    esp,0x1c
c0003df2:	0f b7 d0             	movzx  edx,ax
c0003df5:	8d 43 24             	lea    eax,[ebx+0x24]
c0003df8:	5b                   	pop    ebx
c0003df9:	5e                   	pop    esi
c0003dfa:	5f                   	pop    edi
c0003dfb:	5d                   	pop    ebp
c0003dfc:	e9 74 dc ff ff       	jmp    c0001a75 <st_word>

c0003e01 <cmp_lfn>:
c0003e01:	55                   	push   ebp
c0003e02:	57                   	push   edi
c0003e03:	89 d7                	mov    edi,edx
c0003e05:	56                   	push   esi
c0003e06:	53                   	push   ebx
c0003e07:	83 ec 1c             	sub    esp,0x1c
c0003e0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e0e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e11:	e8 ed db ff ff       	call   c0001a03 <ld_word>
c0003e16:	66 85 c0             	test   ax,ax
c0003e19:	74 07                	je     c0003e22 <cmp_lfn+0x21>
c0003e1b:	31 c0                	xor    eax,eax
c0003e1d:	e9 9a 00 00 00       	jmp    c0003ebc <cmp_lfn+0xbb>
c0003e22:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e24:	bd 01 00 00 00       	mov    ebp,0x1
c0003e29:	83 e3 3f             	and    ebx,0x3f
c0003e2c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e34:	4b                   	dec    ebx
c0003e35:	6b db 0d             	imul   ebx,ebx,0xd
c0003e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e3c:	0f b6 80 00 5e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda200]
c0003e43:	01 f8                	add    eax,edi
c0003e45:	e8 b9 db ff ff       	call   c0001a03 <ld_word>
c0003e4a:	66 85 ed             	test   bp,bp
c0003e4d:	89 c6                	mov    esi,eax
c0003e4f:	74 3c                	je     c0003e8d <cmp_lfn+0x8c>
c0003e51:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e57:	77 c2                	ja     c0003e1b <cmp_lfn+0x1a>
c0003e59:	83 ec 0c             	sub    esp,0xc
c0003e5c:	0f b7 c0             	movzx  eax,ax
c0003e5f:	50                   	push   eax
c0003e60:	e8 fa 44 00 00       	call   c000835f <ff_wtoupper>
c0003e65:	89 c5                	mov    ebp,eax
c0003e67:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e72:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e76:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e79:	e8 e1 44 00 00       	call   c000835f <ff_wtoupper>
c0003e7e:	83 c4 10             	add    esp,0x10
c0003e81:	39 c5                	cmp    ebp,eax
c0003e83:	75 96                	jne    c0003e1b <cmp_lfn+0x1a>
c0003e85:	89 f5                	mov    ebp,esi
c0003e87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e8b:	eb 04                	jmp    c0003e91 <cmp_lfn+0x90>
c0003e8d:	66 46                	inc    si
c0003e8f:	75 8a                	jne    c0003e1b <cmp_lfn+0x1a>
c0003e91:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e95:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e9a:	75 9c                	jne    c0003e38 <cmp_lfn+0x37>
c0003e9c:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e9f:	74 16                	je     c0003eb7 <cmp_lfn+0xb6>
c0003ea1:	66 85 ed             	test   bp,bp
c0003ea4:	74 11                	je     c0003eb7 <cmp_lfn+0xb6>
c0003ea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eaa:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003eaf:	0f 94 c0             	sete   al
c0003eb2:	0f b6 c0             	movzx  eax,al
c0003eb5:	eb 05                	jmp    c0003ebc <cmp_lfn+0xbb>
c0003eb7:	b8 01 00 00 00       	mov    eax,0x1
c0003ebc:	83 c4 1c             	add    esp,0x1c
c0003ebf:	5b                   	pop    ebx
c0003ec0:	5e                   	pop    esi
c0003ec1:	5f                   	pop    edi
c0003ec2:	5d                   	pop    ebp
c0003ec3:	c3                   	ret    

c0003ec4 <dir_find>:
c0003ec4:	55                   	push   ebp
c0003ec5:	31 d2                	xor    edx,edx
c0003ec7:	57                   	push   edi
c0003ec8:	56                   	push   esi
c0003ec9:	53                   	push   ebx
c0003eca:	89 c3                	mov    ebx,eax
c0003ecc:	83 ec 1c             	sub    esp,0x1c
c0003ecf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003ed1:	e8 89 f0 ff ff       	call   c0002f5f <dir_sdi>
c0003ed6:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ed9:	85 c0                	test   eax,eax
c0003edb:	0f 85 9e 01 00 00    	jne    c000407f <dir_find+0x1bb>
c0003ee1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ee4:	0f 85 8d 00 00 00    	jne    c0003f77 <dir_find+0xb3>
c0003eea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003eed:	e8 30 fe ff ff       	call   c0003d22 <xname_sum>
c0003ef2:	89 c7                	mov    edi,eax
c0003ef4:	31 d2                	xor    edx,edx
c0003ef6:	89 d8                	mov    eax,ebx
c0003ef8:	e8 72 f8 ff ff       	call   c000376f <dir_read>
c0003efd:	85 c0                	test   eax,eax
c0003eff:	0f 85 5e 01 00 00    	jne    c0004063 <dir_find+0x19f>
c0003f05:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f08:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f0b:	e8 f3 da ff ff       	call   c0001a03 <ld_word>
c0003f10:	66 39 f8             	cmp    ax,di
c0003f13:	75 df                	jne    c0003ef4 <dir_find+0x30>
c0003f15:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f18:	31 ed                	xor    ebp,ebp
c0003f1a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f1e:	ba 40 00 00 00       	mov    edx,0x40
c0003f23:	89 e9                	mov    ecx,ebp
c0003f25:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f29:	0f 84 42 01 00 00    	je     c0004071 <dir_find+0x1ad>
c0003f2f:	f6 c2 1f             	test   dl,0x1f
c0003f32:	75 03                	jne    c0003f37 <dir_find+0x73>
c0003f34:	83 c2 02             	add    edx,0x2
c0003f37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f3b:	89 d0                	mov    eax,edx
c0003f3d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f40:	e8 be da ff ff       	call   c0001a03 <ld_word>
c0003f45:	83 ec 0c             	sub    esp,0xc
c0003f48:	0f b7 c0             	movzx  eax,ax
c0003f4b:	50                   	push   eax
c0003f4c:	e8 0e 44 00 00       	call   c000835f <ff_wtoupper>
c0003f51:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f55:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f58:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f5f:	e8 fb 43 00 00       	call   c000835f <ff_wtoupper>
c0003f64:	83 c4 10             	add    esp,0x10
c0003f67:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f6b:	75 87                	jne    c0003ef4 <dir_find+0x30>
c0003f6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f71:	45                   	inc    ebp
c0003f72:	83 c2 02             	add    edx,0x2
c0003f75:	eb ac                	jmp    c0003f23 <dir_find+0x5f>
c0003f77:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f7e:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f83:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f88:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f8b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f8e:	89 f0                	mov    eax,esi
c0003f90:	e8 4c e2 ff ff       	call   c00021e1 <move_window>
c0003f95:	85 c0                	test   eax,eax
c0003f97:	0f 85 c6 00 00 00    	jne    c0004063 <dir_find+0x19f>
c0003f9d:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fa0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fa3:	84 c9                	test   cl,cl
c0003fa5:	0f 84 bd 00 00 00    	je     c0004068 <dir_find+0x1a4>
c0003fab:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fae:	88 d0                	mov    al,dl
c0003fb0:	83 e0 3f             	and    eax,0x3f
c0003fb3:	80 f9 e5             	cmp    cl,0xe5
c0003fb6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fb9:	0f 84 87 00 00 00    	je     c0004046 <dir_find+0x182>
c0003fbf:	80 e2 08             	and    dl,0x8
c0003fc2:	74 06                	je     c0003fca <dir_find+0x106>
c0003fc4:	3c 0f                	cmp    al,0xf
c0003fc6:	75 7e                	jne    c0004046 <dir_find+0x182>
c0003fc8:	eb 04                	jmp    c0003fce <dir_find+0x10a>
c0003fca:	3c 0f                	cmp    al,0xf
c0003fcc:	75 4c                	jne    c000401a <dir_find+0x156>
c0003fce:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fd2:	75 7e                	jne    c0004052 <dir_find+0x18e>
c0003fd4:	f6 c1 40             	test   cl,0x40
c0003fd7:	74 12                	je     c0003feb <dir_find+0x127>
c0003fd9:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fdc:	83 e1 bf             	and    ecx,0xffffffbf
c0003fdf:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003fe3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003fe6:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003fe9:	eb 06                	jmp    c0003ff1 <dir_find+0x12d>
c0003feb:	89 f8                	mov    eax,edi
c0003fed:	38 c8                	cmp    al,cl
c0003fef:	75 5c                	jne    c000404d <dir_find+0x189>
c0003ff1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003ff5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ffa:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003ffd:	75 53                	jne    c0004052 <dir_find+0x18e>
c0003fff:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004003:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004006:	89 ea                	mov    edx,ebp
c0004008:	e8 f4 fd ff ff       	call   c0003e01 <cmp_lfn>
c000400d:	85 c0                	test   eax,eax
c000400f:	74 41                	je     c0004052 <dir_find+0x18e>
c0004011:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004015:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004018:	eb 38                	jmp    c0004052 <dir_find+0x18e>
c000401a:	89 f8                	mov    eax,edi
c000401c:	84 c0                	test   al,al
c000401e:	75 0d                	jne    c000402d <dir_find+0x169>
c0004020:	89 e8                	mov    eax,ebp
c0004022:	e8 98 de ff ff       	call   c0001ebf <sum_sfn>
c0004027:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000402b:	74 52                	je     c000407f <dir_find+0x1bb>
c000402d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004031:	75 13                	jne    c0004046 <dir_find+0x182>
c0004033:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004036:	b9 0b 00 00 00       	mov    ecx,0xb
c000403b:	89 e8                	mov    eax,ebp
c000403d:	e8 60 da ff ff       	call   c0001aa2 <mem_cmp>
c0004042:	85 c0                	test   eax,eax
c0004044:	74 39                	je     c000407f <dir_find+0x1bb>
c0004046:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000404d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004052:	31 d2                	xor    edx,edx
c0004054:	89 d8                	mov    eax,ebx
c0004056:	e8 5c f4 ff ff       	call   c00034b7 <dir_next>
c000405b:	85 c0                	test   eax,eax
c000405d:	0f 84 25 ff ff ff    	je     c0003f88 <dir_find+0xc4>
c0004063:	89 04 24             	mov    DWORD PTR [esp],eax
c0004066:	eb 17                	jmp    c000407f <dir_find+0x1bb>
c0004068:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000406f:	eb 0e                	jmp    c000407f <dir_find+0x1bb>
c0004071:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004074:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004079:	0f 85 75 fe ff ff    	jne    c0003ef4 <dir_find+0x30>
c000407f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004082:	83 c4 1c             	add    esp,0x1c
c0004085:	5b                   	pop    ebx
c0004086:	5e                   	pop    esi
c0004087:	5f                   	pop    edi
c0004088:	5d                   	pop    ebp
c0004089:	c3                   	ret    

c000408a <dir_register>:
c000408a:	55                   	push   ebp
c000408b:	57                   	push   edi
c000408c:	56                   	push   esi
c000408d:	be 06 00 00 00       	mov    esi,0x6
c0004092:	53                   	push   ebx
c0004093:	83 ec 6c             	sub    esp,0x6c
c0004096:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c000409a:	0f 85 62 02 00 00    	jne    c0004302 <dir_register+0x278>
c00040a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040a2:	31 ff                	xor    edi,edi
c00040a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040a7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ac:	74 03                	je     c00040b1 <dir_register+0x27>
c00040ae:	47                   	inc    edi
c00040af:	eb f6                	jmp    c00040a7 <dir_register+0x1d>
c00040b1:	89 c3                	mov    ebx,eax
c00040b3:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040b7:	0f 85 e1 00 00 00    	jne    c000419e <dir_register+0x114>
c00040bd:	83 c7 0e             	add    edi,0xe
c00040c0:	b9 0f 00 00 00       	mov    ecx,0xf
c00040c5:	89 f8                	mov    eax,edi
c00040c7:	31 d2                	xor    edx,edx
c00040c9:	f7 f1                	div    ecx
c00040cb:	8d 50 02             	lea    edx,[eax+0x2]
c00040ce:	89 c7                	mov    edi,eax
c00040d0:	89 d8                	mov    eax,ebx
c00040d2:	e8 12 f8 ff ff       	call   c00038e9 <dir_alloc>
c00040d7:	89 c6                	mov    esi,eax
c00040d9:	85 c0                	test   eax,eax
c00040db:	0f 85 21 02 00 00    	jne    c0004302 <dir_register+0x278>
c00040e1:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040e7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040ea:	c1 e7 05             	shl    edi,0x5
c00040ed:	29 f8                	sub    eax,edi
c00040ef:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00040f2:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040f5:	a8 04                	test   al,0x4
c00040f7:	0f 84 91 00 00 00    	je     c000418e <dir_register+0x104>
c00040fd:	83 e0 fb             	and    eax,0xfffffffb
c0004100:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004103:	89 d8                	mov    eax,ebx
c0004105:	e8 25 ec ff ff       	call   c0002d2f <fill_first_frag>
c000410a:	85 c0                	test   eax,eax
c000410c:	0f 85 ee 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004112:	83 c9 ff             	or     ecx,0xffffffff
c0004115:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004118:	89 d8                	mov    eax,ebx
c000411a:	e8 db eb ff ff       	call   c0002cfa <fill_last_frag>
c000411f:	85 c0                	test   eax,eax
c0004121:	0f 85 d9 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004127:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000412b:	74 61                	je     c000418e <dir_register+0x104>
c000412d:	89 da                	mov    edx,ebx
c000412f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004133:	e8 ea f5 ff ff       	call   c0003722 <load_obj_xdir>
c0004138:	85 c0                	test   eax,eax
c000413a:	0f 85 c0 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004140:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004144:	31 c9                	xor    ecx,ecx
c0004146:	c1 e2 09             	shl    edx,0x9
c0004149:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000414c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000414f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004152:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004155:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004158:	83 c0 38             	add    eax,0x38
c000415b:	e8 1c d9 ff ff       	call   c0001a7c <st_qword>
c0004160:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004163:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004166:	83 c0 28             	add    eax,0x28
c0004169:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000416c:	e8 0b d9 ff ff       	call   c0001a7c <st_qword>
c0004171:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004174:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004177:	83 c8 01             	or     eax,0x1
c000417a:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000417d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004181:	e8 db f7 ff ff       	call   c0003961 <store_xdir>
c0004186:	85 c0                	test   eax,eax
c0004188:	0f 85 72 01 00 00    	jne    c0004300 <dir_register+0x276>
c000418e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004191:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004194:	e8 c1 fb ff ff       	call   c0003d5a <create_xdir>
c0004199:	e9 64 01 00 00       	jmp    c0004302 <dir_register+0x278>
c000419e:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041a1:	b9 0c 00 00 00       	mov    ecx,0xc
c00041a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041aa:	89 c2                	mov    edx,eax
c00041ac:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041b0:	e8 cd d8 ff ff       	call   c0001a82 <mem_cpy>
c00041b5:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041ba:	74 58                	je     c0004214 <dir_register+0x18a>
c00041bc:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041c0:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041c8:	83 ec 0c             	sub    esp,0xc
c00041cb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041d2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041da:	e8 24 dc ff ff       	call   c0001e03 <gen_numname>
c00041df:	89 d8                	mov    eax,ebx
c00041e1:	e8 de fc ff ff       	call   c0003ec4 <dir_find>
c00041e6:	83 c4 10             	add    esp,0x10
c00041e9:	89 c6                	mov    esi,eax
c00041eb:	85 c0                	test   eax,eax
c00041ed:	75 15                	jne    c0004204 <dir_register+0x17a>
c00041ef:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00041f3:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c00041f8:	75 ce                	jne    c00041c8 <dir_register+0x13e>
c00041fa:	be 07 00 00 00       	mov    esi,0x7
c00041ff:	e9 fe 00 00 00       	jmp    c0004302 <dir_register+0x278>
c0004204:	83 f8 04             	cmp    eax,0x4
c0004207:	0f 85 f5 00 00 00    	jne    c0004302 <dir_register+0x278>
c000420d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004211:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004214:	b9 01 00 00 00       	mov    ecx,0x1
c0004219:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000421e:	74 0f                	je     c000422f <dir_register+0x1a5>
c0004220:	b9 0d 00 00 00       	mov    ecx,0xd
c0004225:	8d 47 0c             	lea    eax,[edi+0xc]
c0004228:	31 d2                	xor    edx,edx
c000422a:	f7 f1                	div    ecx
c000422c:	8d 48 01             	lea    ecx,[eax+0x1]
c000422f:	89 ca                	mov    edx,ecx
c0004231:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004235:	89 d8                	mov    eax,ebx
c0004237:	e8 ad f6 ff ff       	call   c00038e9 <dir_alloc>
c000423c:	89 c6                	mov    esi,eax
c000423e:	85 c0                	test   eax,eax
c0004240:	0f 85 bc 00 00 00    	jne    c0004302 <dir_register+0x278>
c0004246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000424a:	49                   	dec    ecx
c000424b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000424f:	74 6a                	je     c00042bb <dir_register+0x231>
c0004251:	89 c8                	mov    eax,ecx
c0004253:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004256:	c1 e0 05             	shl    eax,0x5
c0004259:	29 c2                	sub    edx,eax
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 fd ec ff ff       	call   c0002f5f <dir_sdi>
c0004262:	89 c6                	mov    esi,eax
c0004264:	85 c0                	test   eax,eax
c0004266:	0f 85 96 00 00 00    	jne    c0004302 <dir_register+0x278>
c000426c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004270:	e8 4a dc ff ff       	call   c0001ebf <sum_sfn>
c0004275:	0f b6 f8             	movzx  edi,al
c0004278:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000427b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 5c df ff ff       	call   c00021e1 <move_window>
c0004285:	89 c6                	mov    esi,eax
c0004287:	85 c0                	test   eax,eax
c0004289:	75 77                	jne    c0004302 <dir_register+0x278>
c000428b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004290:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004293:	83 ec 0c             	sub    esp,0xc
c0004296:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004299:	57                   	push   edi
c000429a:	e8 e0 da ff ff       	call   c0001d7f <put_lfn>
c000429f:	31 d2                	xor    edx,edx
c00042a1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042a5:	89 d8                	mov    eax,ebx
c00042a7:	e8 0b f2 ff ff       	call   c00034b7 <dir_next>
c00042ac:	83 c4 10             	add    esp,0x10
c00042af:	89 c6                	mov    esi,eax
c00042b1:	85 c0                	test   eax,eax
c00042b3:	75 4d                	jne    c0004302 <dir_register+0x278>
c00042b5:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042b9:	75 bd                	jne    c0004278 <dir_register+0x1ee>
c00042bb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042be:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c1:	89 e8                	mov    eax,ebp
c00042c3:	e8 19 df ff ff       	call   c00021e1 <move_window>
c00042c8:	89 c6                	mov    esi,eax
c00042ca:	85 c0                	test   eax,eax
c00042cc:	75 34                	jne    c0004302 <dir_register+0x278>
c00042ce:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042d1:	b9 20 00 00 00       	mov    ecx,0x20
c00042d6:	31 d2                	xor    edx,edx
c00042d8:	e8 ba d7 ff ff       	call   c0001a97 <mem_set>
c00042dd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042e4:	b9 0b 00 00 00       	mov    ecx,0xb
c00042e9:	e8 94 d7 ff ff       	call   c0001a82 <mem_cpy>
c00042ee:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042f1:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042f4:	83 e0 18             	and    eax,0x18
c00042f7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00042fa:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042fe:	eb 02                	jmp    c0004302 <dir_register+0x278>
c0004300:	89 c6                	mov    esi,eax
c0004302:	83 c4 6c             	add    esp,0x6c
c0004305:	89 f0                	mov    eax,esi
c0004307:	5b                   	pop    ebx
c0004308:	5e                   	pop    esi
c0004309:	5f                   	pop    edi
c000430a:	5d                   	pop    ebp
c000430b:	c3                   	ret    

c000430c <sync_fs>:
c000430c:	56                   	push   esi
c000430d:	53                   	push   ebx
c000430e:	53                   	push   ebx
c000430f:	89 c3                	mov    ebx,eax
c0004311:	e8 37 de ff ff       	call   c000214d <sync_window>
c0004316:	85 c0                	test   eax,eax
c0004318:	0f 85 b1 00 00 00    	jne    c00043cf <sync_fs+0xc3>
c000431e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004321:	0f 85 8e 00 00 00    	jne    c00043b5 <sync_fs+0xa9>
c0004327:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000432b:	0f 85 84 00 00 00    	jne    c00043b5 <sync_fs+0xa9>
c0004331:	b9 00 02 00 00       	mov    ecx,0x200
c0004336:	8d 73 54             	lea    esi,[ebx+0x54]
c0004339:	31 d2                	xor    edx,edx
c000433b:	89 f0                	mov    eax,esi
c000433d:	e8 55 d7 ff ff       	call   c0001a97 <mem_set>
c0004342:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004348:	ba 55 aa 00 00       	mov    edx,0xaa55
c000434d:	e8 23 d7 ff ff       	call   c0001a75 <st_word>
c0004352:	ba 52 52 61 41       	mov    edx,0x41615252
c0004357:	89 f0                	mov    eax,esi
c0004359:	e8 1b d7 ff ff       	call   c0001a79 <st_dword>
c000435e:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004364:	ba 72 72 41 61       	mov    edx,0x61417272
c0004369:	e8 0b d7 ff ff       	call   c0001a79 <st_dword>
c000436e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004371:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004377:	e8 fd d6 ff ff       	call   c0001a79 <st_dword>
c000437c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000437f:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004385:	e8 ef d6 ff ff       	call   c0001a79 <st_dword>
c000438a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000438d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004390:	83 c0 01             	add    eax,0x1
c0004393:	83 d2 00             	adc    edx,0x0
c0004396:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004399:	83 ec 0c             	sub    esp,0xc
c000439c:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000439f:	6a 01                	push   0x1
c00043a1:	52                   	push   edx
c00043a2:	50                   	push   eax
c00043a3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043a7:	56                   	push   esi
c00043a8:	50                   	push   eax
c00043a9:	e8 20 d6 ff ff       	call   c00019ce <disk_write>
c00043ae:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043b2:	83 c4 20             	add    esp,0x20
c00043b5:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b9:	51                   	push   ecx
c00043ba:	6a 00                	push   0x0
c00043bc:	6a 00                	push   0x0
c00043be:	50                   	push   eax
c00043bf:	e8 20 d6 ff ff       	call   c00019e4 <disk_ioctl>
c00043c4:	83 c4 10             	add    esp,0x10
c00043c7:	85 c0                	test   eax,eax
c00043c9:	0f 95 c0             	setne  al
c00043cc:	0f b6 c0             	movzx  eax,al
c00043cf:	5a                   	pop    edx
c00043d0:	5b                   	pop    ebx
c00043d1:	5e                   	pop    esi
c00043d2:	c3                   	ret    

c00043d3 <create_partition>:
c00043d3:	55                   	push   ebp
c00043d4:	0f b6 c0             	movzx  eax,al
c00043d7:	57                   	push   edi
c00043d8:	56                   	push   esi
c00043d9:	53                   	push   ebx
c00043da:	83 ec 60             	sub    esp,0x60
c00043dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043e1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043e5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043e9:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043ed:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043f1:	50                   	push   eax
c00043f2:	6a 01                	push   0x1
c00043f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f8:	e8 e7 d5 ff ff       	call   c00019e4 <disk_ioctl>
c00043fd:	83 c4 10             	add    esp,0x10
c0004400:	85 c0                	test   eax,eax
c0004402:	74 0a                	je     c000440e <create_partition+0x3b>
c0004404:	b8 01 00 00 00       	mov    eax,0x1
c0004409:	e9 67 05 00 00       	jmp    c0004975 <create_partition+0x5a2>
c000440e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004412:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004416:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000441a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000441e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004423:	0f 86 ed 03 00 00    	jbe    c0004816 <create_partition+0x443>
c0004429:	83 c0 df             	add    eax,0xffffffdf
c000442c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004434:	83 d2 ff             	adc    edx,0xffffffff
c0004437:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000443b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000443f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004443:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004447:	83 c0 bd             	add    eax,0xffffffbd
c000444a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004451:	83 d2 ff             	adc    edx,0xffffffff
c0004454:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004458:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000445c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004464:	be 22 00 00 00       	mov    esi,0x22
c0004469:	31 ff                	xor    edi,edi
c000446b:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004473:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000447b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004483:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004487:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000448d:	75 0e                	jne    c000449d <create_partition+0xca>
c000448f:	b9 00 02 00 00       	mov    ecx,0x200
c0004494:	31 d2                	xor    edx,edx
c0004496:	89 d8                	mov    eax,ebx
c0004498:	e8 fa d5 ff ff       	call   c0001a97 <mem_set>
c000449d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044a1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044a9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ac:	0f 84 23 01 00 00    	je     c00045d5 <create_partition+0x202>
c00044b2:	89 f0                	mov    eax,esi
c00044b4:	89 fa                	mov    edx,edi
c00044b6:	05 ff 07 00 00       	add    eax,0x7ff
c00044bb:	83 d2 00             	adc    edx,0x0
c00044be:	89 c1                	mov    ecx,eax
c00044c0:	89 d7                	mov    edi,edx
c00044c2:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044cc:	89 ce                	mov    esi,ecx
c00044ce:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044d2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044d6:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044da:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00044e4:	b8 64 00 00 00       	mov    eax,0x64
c00044e9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044ec:	b8 00 00 00 00       	mov    eax,0x0
c00044f1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00044f5:	72 41                	jb     c0004538 <create_partition+0x165>
c00044f7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00044fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044ff:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004503:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004508:	01 c1                	add    ecx,eax
c000450a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000450e:	f7 24 24             	mul    DWORD PTR [esp]
c0004511:	6a 00                	push   0x0
c0004513:	01 ca                	add    edx,ecx
c0004515:	6a 64                	push   0x64
c0004517:	52                   	push   edx
c0004518:	50                   	push   eax
c0004519:	e8 3e ef 01 00       	call   c002345c <__udivdi3>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	05 ff 07 00 00       	add    eax,0x7ff
c0004526:	83 d2 00             	adc    edx,0x0
c0004529:	89 c1                	mov    ecx,eax
c000452b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000452f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004535:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004538:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000453b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000453f:	01 f0                	add    eax,esi
c0004541:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004545:	11 fa                	adc    edx,edi
c0004547:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000454b:	19 d1                	sbb    ecx,edx
c000454d:	73 2e                	jae    c000457d <create_partition+0x1aa>
c000454f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004553:	89 f8                	mov    eax,edi
c0004555:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000455c:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004560:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004568:	73 6b                	jae    c00045d5 <create_partition+0x202>
c000456a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000456e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004572:	29 f0                	sub    eax,esi
c0004574:	19 fa                	sbb    edx,edi
c0004576:	89 04 24             	mov    DWORD PTR [esp],eax
c0004579:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000457d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004581:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004584:	74 4f                	je     c00045d5 <create_partition+0x202>
c0004586:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004589:	b9 10 00 00 00       	mov    ecx,0x10
c000458e:	ba 10 5e 02 c0       	mov    edx,0xc0025e10
c0004593:	e8 ea d4 ff ff       	call   c0001a82 <mem_cpy>
c0004598:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c000459c:	b9 10 00 00 00       	mov    ecx,0x10
c00045a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045a5:	e8 2c db ff ff       	call   c00020d6 <make_rand>
c00045aa:	89 f2                	mov    edx,esi
c00045ac:	89 f9                	mov    ecx,edi
c00045ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045b2:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045b6:	e8 c1 d4 ff ff       	call   c0001a7c <st_qword>
c00045bb:	03 34 24             	add    esi,DWORD PTR [esp]
c00045be:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045c2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045c6:	89 f2                	mov    edx,esi
c00045c8:	89 f9                	mov    ecx,edi
c00045ca:	83 c2 ff             	add    edx,0xffffffff
c00045cd:	83 d1 ff             	adc    ecx,0xffffffff
c00045d0:	e8 a7 d4 ff ff       	call   c0001a7c <st_qword>
c00045d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045d9:	83 e8 80             	sub    eax,0xffffff80
c00045dc:	89 c5                	mov    ebp,eax
c00045de:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045e2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e8:	75 6b                	jne    c0004655 <create_partition+0x282>
c00045ea:	45                   	inc    ebp
c00045eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045ef:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c00045f4:	e8 39 da ff ff       	call   c0002032 <crc32>
c00045f9:	81 fd 00 02 00 00    	cmp    ebp,0x200
c00045ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004603:	75 e5                	jne    c00045ea <create_partition+0x217>
c0004605:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004609:	31 d2                	xor    edx,edx
c000460b:	83 ec 0c             	sub    esp,0xc
c000460e:	c1 ed 09             	shr    ebp,0x9
c0004611:	6a 01                	push   0x1
c0004613:	8d 45 02             	lea    eax,[ebp+0x2]
c0004616:	52                   	push   edx
c0004617:	50                   	push   eax
c0004618:	53                   	push   ebx
c0004619:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000461d:	e8 ac d3 ff ff       	call   c00019ce <disk_write>
c0004622:	83 c4 20             	add    esp,0x20
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 85 d7 fd ff ff    	jne    c0004404 <create_partition+0x31>
c000462d:	83 ec 0c             	sub    esp,0xc
c0004630:	31 d2                	xor    edx,edx
c0004632:	6a 01                	push   0x1
c0004634:	89 e8                	mov    eax,ebp
c0004636:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000463a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000463e:	52                   	push   edx
c000463f:	50                   	push   eax
c0004640:	53                   	push   ebx
c0004641:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004645:	e8 84 d3 ff ff       	call   c00019ce <disk_write>
c000464a:	83 c4 20             	add    esp,0x20
c000464d:	85 c0                	test   eax,eax
c000464f:	0f 85 af fd ff ff    	jne    c0004404 <create_partition+0x31>
c0004655:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004659:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000465d:	3d 00 40 00 00       	cmp    eax,0x4000
c0004662:	74 0d                	je     c0004671 <create_partition+0x29e>
c0004664:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004668:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000466c:	e9 12 fe ff ff       	jmp    c0004483 <create_partition+0xb0>
c0004671:	31 d2                	xor    edx,edx
c0004673:	b9 00 02 00 00       	mov    ecx,0x200
c0004678:	89 d8                	mov    eax,ebx
c000467a:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000467d:	e8 15 d4 ff ff       	call   c0001a97 <mem_set>
c0004682:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004685:	b9 10 00 00 00       	mov    ecx,0x10
c000468a:	ba 00 5d 02 c0       	mov    edx,0xc0025d00
c000468f:	89 d8                	mov    eax,ebx
c0004691:	e8 ec d3 ff ff       	call   c0001a82 <mem_cpy>
c0004696:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000469a:	8d 43 58             	lea    eax,[ebx+0x58]
c000469d:	f7 d2                	not    edx
c000469f:	e8 d5 d3 ff ff       	call   c0001a79 <st_dword>
c00046a4:	8d 43 18             	lea    eax,[ebx+0x18]
c00046a7:	31 c9                	xor    ecx,ecx
c00046a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ac:	ba 01 00 00 00       	mov    edx,0x1
c00046b1:	e8 c6 d3 ff ff       	call   c0001a7c <st_qword>
c00046b6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046ba:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046be:	83 c2 ff             	add    edx,0xffffffff
c00046c1:	89 e8                	mov    eax,ebp
c00046c3:	83 d1 ff             	adc    ecx,0xffffffff
c00046c6:	e8 b1 d3 ff ff       	call   c0001a7c <st_qword>
c00046cb:	31 c9                	xor    ecx,ecx
c00046cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00046d0:	ba 22 00 00 00       	mov    edx,0x22
c00046d5:	e8 a2 d3 ff ff       	call   c0001a7c <st_qword>
c00046da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046e2:	83 c2 de             	add    edx,0xffffffde
c00046e5:	8d 43 30             	lea    eax,[ebx+0x30]
c00046e8:	83 d1 ff             	adc    ecx,0xffffffff
c00046eb:	31 f6                	xor    esi,esi
c00046ed:	e8 8a d3 ff ff       	call   c0001a7c <st_qword>
c00046f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00046f5:	ba 80 00 00 00       	mov    edx,0x80
c00046fa:	e8 7a d3 ff ff       	call   c0001a79 <st_dword>
c00046ff:	8d 43 50             	lea    eax,[ebx+0x50]
c0004702:	ba 80 00 00 00       	mov    edx,0x80
c0004707:	e8 6d d3 ff ff       	call   c0001a79 <st_dword>
c000470c:	ba 02 00 00 00       	mov    edx,0x2
c0004711:	89 f8                	mov    eax,edi
c0004713:	e8 61 d3 ff ff       	call   c0001a79 <st_dword>
c0004718:	8d 53 38             	lea    edx,[ebx+0x38]
c000471b:	b9 10 00 00 00       	mov    ecx,0x10
c0004720:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004724:	e8 ad d9 ff ff       	call   c00020d6 <make_rand>
c0004729:	83 c8 ff             	or     eax,0xffffffff
c000472c:	46                   	inc    esi
c000472d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004732:	e8 fb d8 ff ff       	call   c0002032 <crc32>
c0004737:	83 fe 5c             	cmp    esi,0x5c
c000473a:	75 f0                	jne    c000472c <create_partition+0x359>
c000473c:	f7 d0                	not    eax
c000473e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004741:	89 c2                	mov    edx,eax
c0004743:	89 f0                	mov    eax,esi
c0004745:	e8 2f d3 ff ff       	call   c0001a79 <st_dword>
c000474a:	83 ec 0c             	sub    esp,0xc
c000474d:	6a 01                	push   0x1
c000474f:	6a 00                	push   0x0
c0004751:	6a 01                	push   0x1
c0004753:	53                   	push   ebx
c0004754:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004758:	e8 71 d2 ff ff       	call   c00019ce <disk_write>
c000475d:	83 c4 20             	add    esp,0x20
c0004760:	85 c0                	test   eax,eax
c0004762:	0f 85 9c fc ff ff    	jne    c0004404 <create_partition+0x31>
c0004768:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000476c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004770:	83 c2 ff             	add    edx,0xffffffff
c0004773:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004776:	83 d1 ff             	adc    ecx,0xffffffff
c0004779:	e8 fe d2 ff ff       	call   c0001a7c <st_qword>
c000477e:	ba 01 00 00 00       	mov    edx,0x1
c0004783:	31 c9                	xor    ecx,ecx
c0004785:	89 e8                	mov    eax,ebp
c0004787:	e8 f0 d2 ff ff       	call   c0001a7c <st_qword>
c000478c:	89 f8                	mov    eax,edi
c000478e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004792:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004796:	31 ff                	xor    edi,edi
c0004798:	e8 df d2 ff ff       	call   c0001a7c <st_qword>
c000479d:	89 f0                	mov    eax,esi
c000479f:	31 d2                	xor    edx,edx
c00047a1:	e8 d3 d2 ff ff       	call   c0001a79 <st_dword>
c00047a6:	83 c8 ff             	or     eax,0xffffffff
c00047a9:	47                   	inc    edi
c00047aa:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047af:	e8 7e d8 ff ff       	call   c0002032 <crc32>
c00047b4:	83 ff 5c             	cmp    edi,0x5c
c00047b7:	75 f0                	jne    c00047a9 <create_partition+0x3d6>
c00047b9:	f7 d0                	not    eax
c00047bb:	89 c2                	mov    edx,eax
c00047bd:	89 f0                	mov    eax,esi
c00047bf:	e8 b5 d2 ff ff       	call   c0001a79 <st_dword>
c00047c4:	83 ec 0c             	sub    esp,0xc
c00047c7:	6a 01                	push   0x1
c00047c9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047cd:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047d1:	83 c0 ff             	add    eax,0xffffffff
c00047d4:	83 d2 ff             	adc    edx,0xffffffff
c00047d7:	52                   	push   edx
c00047d8:	50                   	push   eax
c00047d9:	53                   	push   ebx
c00047da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047de:	e8 eb d1 ff ff       	call   c00019ce <disk_write>
c00047e3:	83 c4 20             	add    esp,0x20
c00047e6:	85 c0                	test   eax,eax
c00047e8:	0f 85 16 fc ff ff    	jne    c0004404 <create_partition+0x31>
c00047ee:	31 d2                	xor    edx,edx
c00047f0:	89 d8                	mov    eax,ebx
c00047f2:	b9 00 02 00 00       	mov    ecx,0x200
c00047f7:	e8 9b d2 ff ff       	call   c0001a97 <mem_set>
c00047fc:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004802:	b9 10 00 00 00       	mov    ecx,0x10
c0004807:	ba 10 5d 02 c0       	mov    edx,0xc0025d10
c000480c:	e8 71 d2 ff ff       	call   c0001a82 <mem_cpy>
c0004811:	e9 21 01 00 00       	jmp    c0004937 <create_partition+0x564>
c0004816:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000481a:	b9 05 00 00 00       	mov    ecx,0x5
c000481f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004822:	bf 08 00 00 00       	mov    edi,0x8
c0004827:	89 f8                	mov    eax,edi
c0004829:	31 d2                	xor    edx,edx
c000482b:	0f b6 f0             	movzx  esi,al
c000482e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004831:	f7 f6                	div    esi
c0004833:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004838:	76 0a                	jbe    c0004844 <create_partition+0x471>
c000483a:	d1 e7                	shl    edi,1
c000483c:	49                   	dec    ecx
c000483d:	75 e8                	jne    c0004827 <create_partition+0x454>
c000483f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004844:	b9 00 02 00 00       	mov    ecx,0x200
c0004849:	31 d2                	xor    edx,edx
c000484b:	89 d8                	mov    eax,ebx
c000484d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004853:	e8 3f d2 ff ff       	call   c0001a97 <mem_set>
c0004858:	b9 64 00 00 00       	mov    ecx,0x64
c000485d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004860:	31 d2                	xor    edx,edx
c0004862:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000486a:	f7 f1                	div    ecx
c000486c:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004871:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004875:	89 f8                	mov    eax,edi
c0004877:	0f b6 c0             	movzx  eax,al
c000487a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000487e:	e9 80 00 00 00       	jmp    c0004903 <create_partition+0x530>
c0004883:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004886:	29 cf                	sub    edi,ecx
c0004888:	89 ca                	mov    edx,ecx
c000488a:	89 f0                	mov    eax,esi
c000488c:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004891:	e8 e3 d1 ff ff       	call   c0001a79 <st_dword>
c0004896:	8d 46 04             	lea    eax,[esi+0x4]
c0004899:	89 fa                	mov    edx,edi
c000489b:	83 c6 10             	add    esi,0x10
c000489e:	e8 d6 d1 ff ff       	call   c0001a79 <st_dword>
c00048a3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048a7:	31 d2                	xor    edx,edx
c00048a9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ac:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048b0:	89 c8                	mov    eax,ecx
c00048b2:	01 f9                	add    ecx,edi
c00048b4:	f7 f5                	div    ebp
c00048b6:	89 d5                	mov    ebp,edx
c00048b8:	31 d2                	xor    edx,edx
c00048ba:	45                   	inc    ebp
c00048bb:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048bf:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048c2:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048c5:	89 c2                	mov    edx,eax
c00048c7:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048ca:	c1 ea 02             	shr    edx,0x2
c00048cd:	83 e2 c0             	and    edx,0xffffffc0
c00048d0:	09 ea                	or     edx,ebp
c00048d2:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d7:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048da:	31 d2                	xor    edx,edx
c00048dc:	f7 f5                	div    ebp
c00048de:	89 d7                	mov    edi,edx
c00048e0:	31 d2                	xor    edx,edx
c00048e2:	47                   	inc    edi
c00048e3:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048e7:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048ea:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048ed:	89 c5                	mov    ebp,eax
c00048ef:	c1 ed 02             	shr    ebp,0x2
c00048f2:	83 e5 c0             	and    ebp,0xffffffc0
c00048f5:	09 ef                	or     edi,ebp
c00048f7:	89 fa                	mov    edx,edi
c00048f9:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c00048fc:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004901:	74 34                	je     c0004937 <create_partition+0x564>
c0004903:	85 c9                	test   ecx,ecx
c0004905:	74 30                	je     c0004937 <create_partition+0x564>
c0004907:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000490a:	76 2b                	jbe    c0004937 <create_partition+0x564>
c000490c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004910:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004914:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004917:	83 ff 64             	cmp    edi,0x64
c000491a:	76 4b                	jbe    c0004967 <create_partition+0x594>
c000491c:	89 f8                	mov    eax,edi
c000491e:	01 c8                	add    eax,ecx
c0004920:	0f 82 5d ff ff ff    	jb     c0004883 <create_partition+0x4b0>
c0004926:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004929:	0f 87 54 ff ff ff    	ja     c0004883 <create_partition+0x4b0>
c000492f:	85 ff                	test   edi,edi
c0004931:	0f 85 51 ff ff ff    	jne    c0004888 <create_partition+0x4b5>
c0004937:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000493d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004942:	e8 2e d1 ff ff       	call   c0001a75 <st_word>
c0004947:	83 ec 0c             	sub    esp,0xc
c000494a:	6a 01                	push   0x1
c000494c:	6a 00                	push   0x0
c000494e:	6a 00                	push   0x0
c0004950:	53                   	push   ebx
c0004951:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004955:	e8 74 d0 ff ff       	call   c00019ce <disk_write>
c000495a:	83 c4 20             	add    esp,0x20
c000495d:	85 c0                	test   eax,eax
c000495f:	0f 95 c0             	setne  al
c0004962:	0f b6 c0             	movzx  eax,al
c0004965:	eb 0e                	jmp    c0004975 <create_partition+0x5a2>
c0004967:	74 07                	je     c0004970 <create_partition+0x59d>
c0004969:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000496e:	eb ac                	jmp    c000491c <create_partition+0x549>
c0004970:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004973:	eb a7                	jmp    c000491c <create_partition+0x549>
c0004975:	83 c4 5c             	add    esp,0x5c
c0004978:	5b                   	pop    ebx
c0004979:	5e                   	pop    esi
c000497a:	5f                   	pop    edi
c000497b:	5d                   	pop    ebp
c000497c:	c3                   	ret    

c000497d <get_fileinfo>:
c000497d:	55                   	push   ebp
c000497e:	57                   	push   edi
c000497f:	56                   	push   esi
c0004980:	53                   	push   ebx
c0004981:	83 ec 1c             	sub    esp,0x1c
c0004984:	8b 30                	mov    esi,DWORD PTR [eax]
c0004986:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c000498a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000498e:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004991:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004994:	0f 84 dc 01 00 00    	je     c0004b76 <get_fileinfo+0x1f9>
c000499a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000499d:	75 0f                	jne    c00049ae <get_fileinfo+0x31>
c000499f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049a2:	83 c4 1c             	add    esp,0x1c
c00049a5:	5b                   	pop    ebx
c00049a6:	5e                   	pop    esi
c00049a7:	5f                   	pop    edi
c00049a8:	5d                   	pop    ebp
c00049a9:	e9 58 d5 ff ff       	jmp    c0001f06 <get_xfileinfo>
c00049ae:	89 d3                	mov    ebx,edx
c00049b0:	89 c6                	mov    esi,eax
c00049b2:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049b6:	74 6a                	je     c0004a22 <get_fileinfo+0xa5>
c00049b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049c0:	31 ed                	xor    ebp,ebp
c00049c2:	31 ff                	xor    edi,edi
c00049c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049cf:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049d3:	66 85 d2             	test   dx,dx
c00049d6:	74 3e                	je     c0004a16 <get_fileinfo+0x99>
c00049d8:	66 85 ed             	test   bp,bp
c00049db:	75 0c                	jne    c00049e9 <get_fileinfo+0x6c>
c00049dd:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049e3:	66 3d ff 07          	cmp    ax,0x7ff
c00049e7:	76 22                	jbe    c0004a0b <get_fileinfo+0x8e>
c00049e9:	b9 ff 00 00 00       	mov    ecx,0xff
c00049ee:	89 e8                	mov    eax,ebp
c00049f0:	29 f9                	sub    ecx,edi
c00049f2:	c1 e0 10             	shl    eax,0x10
c00049f5:	09 d0                	or     eax,edx
c00049f7:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00049fb:	e8 a3 d1 ff ff       	call   c0001ba3 <put_utf>
c0004a00:	84 c0                	test   al,al
c0004a02:	74 10                	je     c0004a14 <get_fileinfo+0x97>
c0004a04:	0f b6 c0             	movzx  eax,al
c0004a07:	31 d2                	xor    edx,edx
c0004a09:	01 c7                	add    edi,eax
c0004a0b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a10:	89 d5                	mov    ebp,edx
c0004a12:	eb b0                	jmp    c00049c4 <get_fileinfo+0x47>
c0004a14:	31 ff                	xor    edi,edi
c0004a16:	66 85 ed             	test   bp,bp
c0004a19:	74 02                	je     c0004a1d <get_fileinfo+0xa0>
c0004a1b:	31 ff                	xor    edi,edi
c0004a1d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	31 c9                	xor    ecx,ecx
c0004a26:	83 f9 0a             	cmp    ecx,0xa
c0004a29:	0f 87 ad 00 00 00    	ja     c0004adc <get_fileinfo+0x15f>
c0004a2f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a32:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a35:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a39:	66 83 fa 20          	cmp    dx,0x20
c0004a3d:	0f 84 92 00 00 00    	je     c0004ad5 <get_fileinfo+0x158>
c0004a43:	66 83 fa 05          	cmp    dx,0x5
c0004a47:	75 05                	jne    c0004a4e <get_fileinfo+0xd1>
c0004a49:	ba e5 00 00 00       	mov    edx,0xe5
c0004a4e:	83 ff 0b             	cmp    edi,0xb
c0004a51:	77 0b                	ja     c0004a5e <get_fileinfo+0xe1>
c0004a53:	83 fd 09             	cmp    ebp,0x9
c0004a56:	75 06                	jne    c0004a5e <get_fileinfo+0xe1>
c0004a58:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a5d:	47                   	inc    edi
c0004a5e:	0f b7 c2             	movzx  eax,dx
c0004a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a65:	e8 6d d0 ff ff       	call   c0001ad7 <dbc_1st>
c0004a6a:	85 c0                	test   eax,eax
c0004a6c:	74 2f                	je     c0004a9d <get_fileinfo+0x120>
c0004a6e:	83 fd 08             	cmp    ebp,0x8
c0004a71:	74 2a                	je     c0004a9d <get_fileinfo+0x120>
c0004a73:	83 fd 0b             	cmp    ebp,0xb
c0004a76:	74 25                	je     c0004a9d <get_fileinfo+0x120>
c0004a78:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a7b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a7f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a83:	e8 52 d0 ff ff       	call   c0001ada <dbc_2nd>
c0004a88:	85 c0                	test   eax,eax
c0004a8a:	74 11                	je     c0004a9d <get_fileinfo+0x120>
c0004a8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a95:	c1 e2 08             	shl    edx,0x8
c0004a98:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a9b:	09 c2                	or     edx,eax
c0004a9d:	0f b7 d2             	movzx  edx,dx
c0004aa0:	50                   	push   eax
c0004aa1:	50                   	push   eax
c0004aa2:	68 b5 01 00 00       	push   0x1b5
c0004aa7:	52                   	push   edx
c0004aa8:	e8 46 38 00 00       	call   c00082f3 <ff_oem2uni>
c0004aad:	83 c4 10             	add    esp,0x10
c0004ab0:	66 85 c0             	test   ax,ax
c0004ab3:	75 04                	jne    c0004ab9 <get_fileinfo+0x13c>
c0004ab5:	31 ff                	xor    edi,edi
c0004ab7:	eb 23                	jmp    c0004adc <get_fileinfo+0x15f>
c0004ab9:	b9 0c 00 00 00       	mov    ecx,0xc
c0004abe:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ac2:	29 f9                	sub    ecx,edi
c0004ac4:	0f b7 c0             	movzx  eax,ax
c0004ac7:	e8 d7 d0 ff ff       	call   c0001ba3 <put_utf>
c0004acc:	84 c0                	test   al,al
c0004ace:	74 e5                	je     c0004ab5 <get_fileinfo+0x138>
c0004ad0:	0f b6 c0             	movzx  eax,al
c0004ad3:	01 c7                	add    edi,eax
c0004ad5:	89 e9                	mov    ecx,ebp
c0004ad7:	e9 4a ff ff ff       	jmp    c0004a26 <get_fileinfo+0xa9>
c0004adc:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004ae1:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004ae5:	75 54                	jne    c0004b3b <get_fileinfo+0x1be>
c0004ae7:	85 ff                	test   edi,edi
c0004ae9:	75 0b                	jne    c0004af6 <get_fileinfo+0x179>
c0004aeb:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004aef:	ba 01 00 00 00       	mov    edx,0x1
c0004af4:	eb 33                	jmp    c0004b29 <get_fileinfo+0x1ac>
c0004af6:	b1 08                	mov    cl,0x8
c0004af8:	31 d2                	xor    edx,edx
c0004afa:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b00:	84 c0                	test   al,al
c0004b02:	74 25                	je     c0004b29 <get_fileinfo+0x1ac>
c0004b04:	66 83 f8 2e          	cmp    ax,0x2e
c0004b08:	74 16                	je     c0004b20 <get_fileinfo+0x1a3>
c0004b0a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b0d:	66 83 ff 19          	cmp    di,0x19
c0004b11:	77 0f                	ja     c0004b22 <get_fileinfo+0x1a5>
c0004b13:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b16:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b19:	74 07                	je     c0004b22 <get_fileinfo+0x1a5>
c0004b1b:	83 c0 20             	add    eax,0x20
c0004b1e:	eb 02                	jmp    c0004b22 <get_fileinfo+0x1a5>
c0004b20:	b1 10                	mov    cl,0x10
c0004b22:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b26:	42                   	inc    edx
c0004b27:	eb d1                	jmp    c0004afa <get_fileinfo+0x17d>
c0004b29:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b2e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b31:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b35:	75 04                	jne    c0004b3b <get_fileinfo+0x1be>
c0004b37:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b3b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b41:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b44:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b47:	83 c0 1c             	add    eax,0x1c
c0004b4a:	e8 c1 ce ff ff       	call   c0001a10 <ld_dword>
c0004b4f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b56:	89 03                	mov    DWORD PTR [ebx],eax
c0004b58:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b5b:	83 c0 16             	add    eax,0x16
c0004b5e:	e8 a0 ce ff ff       	call   c0001a03 <ld_word>
c0004b63:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b67:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b6a:	83 c0 18             	add    eax,0x18
c0004b6d:	e8 91 ce ff ff       	call   c0001a03 <ld_word>
c0004b72:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b76:	83 c4 1c             	add    esp,0x1c
c0004b79:	5b                   	pop    ebx
c0004b7a:	5e                   	pop    esi
c0004b7b:	5f                   	pop    edi
c0004b7c:	5d                   	pop    ebp
c0004b7d:	c3                   	ret    

c0004b7e <ld_clust.isra.0>:
c0004b7e:	56                   	push   esi
c0004b7f:	89 c6                	mov    esi,eax
c0004b81:	53                   	push   ebx
c0004b82:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b85:	89 d3                	mov    ebx,edx
c0004b87:	e8 77 ce ff ff       	call   c0001a03 <ld_word>
c0004b8c:	0f b7 c8             	movzx  ecx,ax
c0004b8f:	89 f0                	mov    eax,esi
c0004b91:	3c 03                	cmp    al,0x3
c0004b93:	75 0d                	jne    c0004ba2 <ld_clust.isra.0+0x24>
c0004b95:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b98:	e8 66 ce ff ff       	call   c0001a03 <ld_word>
c0004b9d:	c1 e0 10             	shl    eax,0x10
c0004ba0:	09 c1                	or     ecx,eax
c0004ba2:	89 c8                	mov    eax,ecx
c0004ba4:	5b                   	pop    ebx
c0004ba5:	5e                   	pop    esi
c0004ba6:	c3                   	ret    

c0004ba7 <st_clust.isra.1>:
c0004ba7:	56                   	push   esi
c0004ba8:	89 c6                	mov    esi,eax
c0004baa:	53                   	push   ebx
c0004bab:	89 d3                	mov    ebx,edx
c0004bad:	0f b7 d1             	movzx  edx,cx
c0004bb0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bb3:	e8 bd ce ff ff       	call   c0001a75 <st_word>
c0004bb8:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bbb:	75 0f                	jne    c0004bcc <st_clust.isra.1+0x25>
c0004bbd:	c1 e9 10             	shr    ecx,0x10
c0004bc0:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc3:	89 ca                	mov    edx,ecx
c0004bc5:	5b                   	pop    ebx
c0004bc6:	5e                   	pop    esi
c0004bc7:	e9 a9 ce ff ff       	jmp    c0001a75 <st_word>
c0004bcc:	5b                   	pop    ebx
c0004bcd:	5e                   	pop    esi
c0004bce:	c3                   	ret    

c0004bcf <init_alloc_info.isra.2>:
c0004bcf:	56                   	push   esi
c0004bd0:	53                   	push   ebx
c0004bd1:	89 c6                	mov    esi,eax
c0004bd3:	89 d3                	mov    ebx,edx
c0004bd5:	51                   	push   ecx
c0004bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0004bd8:	83 c0 34             	add    eax,0x34
c0004bdb:	e8 30 ce ff ff       	call   c0001a10 <ld_dword>
c0004be0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004be3:	8b 06                	mov    eax,DWORD PTR [esi]
c0004be5:	83 c0 38             	add    eax,0x38
c0004be8:	e8 3b ce ff ff       	call   c0001a28 <ld_qword>
c0004bed:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bf0:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004bf3:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf5:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004bf8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bff:	83 e0 02             	and    eax,0x2
c0004c02:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c05:	5b                   	pop    ebx
c0004c06:	5b                   	pop    ebx
c0004c07:	5e                   	pop    esi
c0004c08:	c3                   	ret    

c0004c09 <follow_path>:
c0004c09:	56                   	push   esi
c0004c0a:	53                   	push   ebx
c0004c0b:	89 c3                	mov    ebx,eax
c0004c0d:	83 ec 14             	sub    esp,0x14
c0004c10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c14:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c1a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c1c:	80 fa 5c             	cmp    dl,0x5c
c0004c1f:	75 07                	jne    c0004c28 <follow_path+0x1f>
c0004c21:	40                   	inc    eax
c0004c22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c26:	eb ee                	jmp    c0004c16 <follow_path+0xd>
c0004c28:	80 fa 2f             	cmp    dl,0x2f
c0004c2b:	74 f4                	je     c0004c21 <follow_path+0x18>
c0004c2d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c34:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c3b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c3e:	77 52                	ja     c0004c92 <follow_path+0x89>
c0004c40:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c44:	31 d2                	xor    edx,edx
c0004c46:	89 d8                	mov    eax,ebx
c0004c48:	e8 12 e3 ff ff       	call   c0002f5f <dir_sdi>
c0004c4d:	eb 7c                	jmp    c0004ccb <follow_path+0xc2>
c0004c4f:	89 d8                	mov    eax,ebx
c0004c51:	e8 6e f2 ff ff       	call   c0003ec4 <dir_find>
c0004c56:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	75 46                	jne    c0004ca3 <follow_path+0x9a>
c0004c5d:	80 e2 04             	and    dl,0x4
c0004c60:	75 69                	jne    c0004ccb <follow_path+0xc2>
c0004c62:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c66:	74 5e                	je     c0004cc6 <follow_path+0xbd>
c0004c68:	8a 06                	mov    al,BYTE PTR [esi]
c0004c6a:	3c 04                	cmp    al,0x4
c0004c6c:	75 41                	jne    c0004caf <follow_path+0xa6>
c0004c6e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c71:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c75:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c78:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c7b:	30 c0                	xor    al,al
c0004c7d:	09 d0                	or     eax,edx
c0004c7f:	89 da                	mov    edx,ebx
c0004c81:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c84:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c87:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c8a:	8d 46 10             	lea    eax,[esi+0x10]
c0004c8d:	e8 3d ff ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004c92:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c96:	89 d8                	mov    eax,ebx
c0004c98:	e8 a9 ed ff ff       	call   c0003a46 <create_name>
c0004c9d:	85 c0                	test   eax,eax
c0004c9f:	74 ae                	je     c0004c4f <follow_path+0x46>
c0004ca1:	eb 28                	jmp    c0004ccb <follow_path+0xc2>
c0004ca3:	83 f8 04             	cmp    eax,0x4
c0004ca6:	75 23                	jne    c0004ccb <follow_path+0xc2>
c0004ca8:	80 e2 04             	and    dl,0x4
c0004cab:	74 19                	je     c0004cc6 <follow_path+0xbd>
c0004cad:	eb 1c                	jmp    c0004ccb <follow_path+0xc2>
c0004caf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cb2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cb8:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cbc:	e8 bd fe ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004cc1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cc4:	eb cc                	jmp    c0004c92 <follow_path+0x89>
c0004cc6:	b8 05 00 00 00       	mov    eax,0x5
c0004ccb:	83 c4 14             	add    esp,0x14
c0004cce:	5b                   	pop    ebx
c0004ccf:	5e                   	pop    esi
c0004cd0:	c3                   	ret    

c0004cd1 <f_mount>:
c0004cd1:	53                   	push   ebx
c0004cd2:	83 ec 18             	sub    esp,0x18
c0004cd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004cd9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004cdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004ce5:	e8 fb d2 ff ff       	call   c0001fe5 <get_ldnumber>
c0004cea:	89 c2                	mov    edx,eax
c0004cec:	b8 0b 00 00 00       	mov    eax,0xb
c0004cf1:	85 d2                	test   edx,edx
c0004cf3:	78 39                	js     c0004d2e <f_mount+0x5d>
c0004cf5:	8b 04 95 00 a4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5c00]
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	74 03                	je     c0004d03 <f_mount+0x32>
c0004d00:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d07:	85 c0                	test   eax,eax
c0004d09:	74 03                	je     c0004d0e <f_mount+0x3d>
c0004d0b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d12:	89 04 95 00 a4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5c00],eax
c0004d19:	31 c0                	xor    eax,eax
c0004d1b:	84 db                	test   bl,bl
c0004d1d:	74 0f                	je     c0004d2e <f_mount+0x5d>
c0004d1f:	31 c9                	xor    ecx,ecx
c0004d21:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d25:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d29:	e8 65 d7 ff ff       	call   c0002493 <mount_volume>
c0004d2e:	83 c4 18             	add    esp,0x18
c0004d31:	5b                   	pop    ebx
c0004d32:	c3                   	ret    

c0004d33 <f_open>:
c0004d33:	55                   	push   ebp
c0004d34:	bd 09 00 00 00       	mov    ebp,0x9
c0004d39:	57                   	push   edi
c0004d3a:	56                   	push   esi
c0004d3b:	53                   	push   ebx
c0004d3c:	83 ec 7c             	sub    esp,0x7c
c0004d3f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d46:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d4d:	85 db                	test   ebx,ebx
c0004d4f:	0f 84 10 04 00 00    	je     c0005165 <f_open+0x432>
c0004d55:	89 fe                	mov    esi,edi
c0004d57:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d5b:	83 e6 3f             	and    esi,0x3f
c0004d5e:	89 f0                	mov    eax,esi
c0004d60:	0f b6 c8             	movzx  ecx,al
c0004d63:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d6a:	e8 24 d7 ff ff       	call   c0002493 <mount_volume>
c0004d6f:	89 c5                	mov    ebp,eax
c0004d71:	85 c0                	test   eax,eax
c0004d73:	0f 85 e6 03 00 00    	jne    c000515f <f_open+0x42c>
c0004d79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d7d:	bd 11 00 00 00       	mov    ebp,0x11
c0004d82:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d86:	83 ec 0c             	sub    esp,0xc
c0004d89:	68 60 04 00 00       	push   0x460
c0004d8e:	e8 a3 34 00 00       	call   c0008236 <ff_memalloc>
c0004d93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d97:	83 c4 10             	add    esp,0x10
c0004d9a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d9f:	0f 84 c0 03 00 00    	je     c0005165 <f_open+0x432>
c0004da5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004da9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dad:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004db3:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004db6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004db9:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dc0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dc4:	e8 40 fe ff ff       	call   c0004c09 <follow_path>
c0004dc9:	89 c5                	mov    ebp,eax
c0004dcb:	85 c0                	test   eax,eax
c0004dcd:	75 0c                	jne    c0004ddb <f_open+0xa8>
c0004dcf:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004dd4:	79 05                	jns    c0004ddb <f_open+0xa8>
c0004dd6:	bd 06 00 00 00       	mov    ebp,0x6
c0004ddb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004de1:	0f 84 84 01 00 00    	je     c0004f6b <f_open+0x238>
c0004de7:	85 ed                	test   ebp,ebp
c0004de9:	74 20                	je     c0004e0b <f_open+0xd8>
c0004deb:	83 fd 04             	cmp    ebp,0x4
c0004dee:	0f 85 58 03 00 00    	jne    c000514c <f_open+0x419>
c0004df4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004df8:	83 ce 08             	or     esi,0x8
c0004dfb:	e8 8a f2 ff ff       	call   c000408a <dir_register>
c0004e00:	89 c5                	mov    ebp,eax
c0004e02:	85 c0                	test   eax,eax
c0004e04:	74 2f                	je     c0004e35 <f_open+0x102>
c0004e06:	e9 41 03 00 00       	jmp    c000514c <f_open+0x419>
c0004e0b:	bd 07 00 00 00       	mov    ebp,0x7
c0004e10:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e15:	0f 85 31 03 00 00    	jne    c000514c <f_open+0x419>
c0004e1b:	bd 08 00 00 00       	mov    ebp,0x8
c0004e20:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e26:	0f 85 20 03 00 00    	jne    c000514c <f_open+0x419>
c0004e2c:	83 e7 08             	and    edi,0x8
c0004e2f:	0f 84 65 01 00 00    	je     c0004f9a <f_open+0x267>
c0004e35:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e39:	8a 02                	mov    al,BYTE PTR [edx]
c0004e3b:	3c 04                	cmp    al,0x4
c0004e3d:	0f 85 97 00 00 00    	jne    c0004eda <f_open+0x1a7>
c0004e43:	8d 42 10             	lea    eax,[edx+0x10]
c0004e46:	89 13                	mov    DWORD PTR [ebx],edx
c0004e48:	89 da                	mov    edx,ebx
c0004e4a:	e8 80 fd ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004e4f:	31 d2                	xor    edx,edx
c0004e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e55:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e5a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e5d:	83 c0 02             	add    eax,0x2
c0004e60:	e8 32 cc ff ff       	call   c0001a97 <mem_set>
c0004e65:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e6a:	31 d2                	xor    edx,edx
c0004e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e70:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e73:	83 c0 26             	add    eax,0x26
c0004e76:	e8 1c cc ff ff       	call   c0001a97 <mem_set>
c0004e7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e82:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e86:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e8b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e8e:	83 c0 08             	add    eax,0x8
c0004e91:	e8 e3 cb ff ff       	call   c0001a79 <st_dword>
c0004e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9d:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ea1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ea5:	e8 b7 ea ff ff       	call   c0003961 <store_xdir>
c0004eaa:	89 c5                	mov    ebp,eax
c0004eac:	85 c0                	test   eax,eax
c0004eae:	0f 85 98 02 00 00    	jne    c000514c <f_open+0x419>
c0004eb4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004eb7:	85 d2                	test   edx,edx
c0004eb9:	0f 84 db 00 00 00    	je     c0004f9a <f_open+0x267>
c0004ebf:	31 c9                	xor    ecx,ecx
c0004ec1:	89 d8                	mov    eax,ebx
c0004ec3:	e8 8e e3 ff ff       	call   c0003256 <remove_chain>
c0004ec8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ecc:	89 c5                	mov    ebp,eax
c0004ece:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed1:	48                   	dec    eax
c0004ed2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ed5:	e9 b8 00 00 00       	jmp    c0004f92 <f_open+0x25f>
c0004eda:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004ede:	89 ea                	mov    edx,ebp
c0004ee0:	e8 99 fc ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004ee5:	ba 00 00 21 50       	mov    edx,0x50210000
c0004eea:	89 c7                	mov    edi,eax
c0004eec:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004eef:	e8 85 cb ff ff       	call   c0001a79 <st_dword>
c0004ef4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004ef8:	31 c9                	xor    ecx,ecx
c0004efa:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004efe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f02:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f06:	e8 9c fc ff ff       	call   c0004ba7 <st_clust.isra.1>
c0004f0b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f0f:	31 d2                	xor    edx,edx
c0004f11:	83 c0 1c             	add    eax,0x1c
c0004f14:	e8 60 cb ff ff       	call   c0001a79 <st_dword>
c0004f19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f1d:	85 ff                	test   edi,edi
c0004f1f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f23:	74 75                	je     c0004f9a <f_open+0x267>
c0004f25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f29:	31 c9                	xor    ecx,ecx
c0004f2b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f2e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f39:	89 fa                	mov    edx,edi
c0004f3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f3f:	e8 12 e3 ff ff       	call   c0003256 <remove_chain>
c0004f44:	89 c5                	mov    ebp,eax
c0004f46:	85 c0                	test   eax,eax
c0004f48:	0f 85 fe 01 00 00    	jne    c000514c <f_open+0x419>
c0004f4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5a:	4f                   	dec    edi
c0004f5b:	e8 81 d2 ff ff       	call   c00021e1 <move_window>
c0004f60:	89 c5                	mov    ebp,eax
c0004f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f66:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f69:	eb 27                	jmp    c0004f92 <f_open+0x25f>
c0004f6b:	85 ed                	test   ebp,ebp
c0004f6d:	0f 85 d9 01 00 00    	jne    c000514c <f_open+0x419>
c0004f73:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f77:	bd 04 00 00 00       	mov    ebp,0x4
c0004f7c:	a8 10                	test   al,0x10
c0004f7e:	0f 85 c8 01 00 00    	jne    c000514c <f_open+0x419>
c0004f84:	83 e7 02             	and    edi,0x2
c0004f87:	74 11                	je     c0004f9a <f_open+0x267>
c0004f89:	bd 07 00 00 00       	mov    ebp,0x7
c0004f8e:	a8 01                	test   al,0x1
c0004f90:	eb 02                	jmp    c0004f94 <f_open+0x261>
c0004f92:	85 ed                	test   ebp,ebp
c0004f94:	0f 85 b2 01 00 00    	jne    c000514c <f_open+0x419>
c0004f9a:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fa0:	74 03                	je     c0004fa5 <f_open+0x272>
c0004fa2:	83 ce 40             	or     esi,0x40
c0004fa5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fa9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fac:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004faf:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fb2:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fb5:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fb9:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fbc:	8a 02                	mov    al,BYTE PTR [edx]
c0004fbe:	3c 04                	cmp    al,0x4
c0004fc0:	75 2a                	jne    c0004fec <f_open+0x2b9>
c0004fc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fc6:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fcb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fd2:	30 c0                	xor    al,al
c0004fd4:	09 c8                	or     eax,ecx
c0004fd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fd9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004fdd:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fe0:	8d 42 10             	lea    eax,[edx+0x10]
c0004fe3:	89 da                	mov    edx,ebx
c0004fe5:	e8 e5 fb ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004fea:	eb 1c                	jmp    c0005008 <f_open+0x2d5>
c0004fec:	89 fa                	mov    edx,edi
c0004fee:	e8 8b fb ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004ff3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ff6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004ff9:	e8 12 ca ff ff       	call   c0001a10 <ld_dword>
c0004ffe:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005005:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005013:	89 03                	mov    DWORD PTR [ebx],eax
c0005015:	31 d2                	xor    edx,edx
c0005017:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000501b:	b9 00 02 00 00       	mov    ecx,0x200
c0005020:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005024:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005028:	89 f0                	mov    eax,esi
c000502a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005031:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005034:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000503b:	8d 43 50             	lea    eax,[ebx+0x50]
c000503e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005045:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000504c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005050:	e8 42 ca ff ff       	call   c0001a97 <mem_set>
c0005055:	83 e6 20             	and    esi,0x20
c0005058:	75 07                	jne    c0005061 <f_open+0x32e>
c000505a:	31 ed                	xor    ebp,ebp
c000505c:	e9 eb 00 00 00       	jmp    c000514c <f_open+0x419>
c0005061:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005064:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000506f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005073:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005077:	74 e1                	je     c000505a <f_open+0x327>
c0005079:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000507d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005081:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005084:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005087:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000508b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000508e:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0005092:	31 ff                	xor    edi,edi
c0005094:	c1 e5 09             	shl    ebp,0x9
c0005097:	89 ee                	mov    esi,ebp
c0005099:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000509d:	89 f8                	mov    eax,edi
c000509f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050a3:	73 22                	jae    c00050c7 <f_open+0x394>
c00050a5:	89 d8                	mov    eax,ebx
c00050a7:	e8 bd dc ff ff       	call   c0002d69 <get_fat>
c00050ac:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050b0:	89 c2                	mov    edx,eax
c00050b2:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050b6:	83 f8 01             	cmp    eax,0x1
c00050b9:	76 10                	jbe    c00050cb <f_open+0x398>
c00050bb:	83 f8 ff             	cmp    eax,0xffffffff
c00050be:	75 d9                	jne    c0005099 <f_open+0x366>
c00050c0:	bd 01 00 00 00       	mov    ebp,0x1
c00050c5:	eb 09                	jmp    c00050d0 <f_open+0x39d>
c00050c7:	31 ed                	xor    ebp,ebp
c00050c9:	eb 05                	jmp    c00050d0 <f_open+0x39d>
c00050cb:	bd 02 00 00 00       	mov    ebp,0x2
c00050d0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050d3:	85 ed                	test   ebp,ebp
c00050d5:	75 75                	jne    c000514c <f_open+0x419>
c00050d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050db:	25 ff 01 00 00       	and    eax,0x1ff
c00050e0:	0f 84 74 ff ff ff    	je     c000505a <f_open+0x327>
c00050e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050ea:	bd 02 00 00 00       	mov    ebp,0x2
c00050ef:	89 c8                	mov    eax,ecx
c00050f1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00050f5:	e8 a2 cb ff ff       	call   c0001c9c <clst2sect>
c00050fa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00050fe:	89 d7                	mov    edi,edx
c0005100:	09 c7                	or     edi,eax
c0005102:	74 48                	je     c000514c <f_open+0x419>
c0005104:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005108:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000510c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005114:	0f ac fe 09          	shrd   esi,edi,0x9
c0005118:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000511c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005120:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005123:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005127:	83 ec 0c             	sub    esp,0xc
c000512a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000512d:	6a 01                	push   0x1
c000512f:	52                   	push   edx
c0005130:	50                   	push   eax
c0005131:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005135:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005139:	50                   	push   eax
c000513a:	e8 79 c8 ff ff       	call   c00019b8 <disk_read>
c000513f:	83 c4 20             	add    esp,0x20
c0005142:	85 c0                	test   eax,eax
c0005144:	0f 95 c0             	setne  al
c0005147:	0f b6 c0             	movzx  eax,al
c000514a:	89 c5                	mov    ebp,eax
c000514c:	83 ec 0c             	sub    esp,0xc
c000514f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005153:	e8 f4 30 00 00       	call   c000824c <ff_memfree>
c0005158:	83 c4 10             	add    esp,0x10
c000515b:	85 ed                	test   ebp,ebp
c000515d:	74 06                	je     c0005165 <f_open+0x432>
c000515f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005165:	83 c4 7c             	add    esp,0x7c
c0005168:	89 e8                	mov    eax,ebp
c000516a:	5b                   	pop    ebx
c000516b:	5e                   	pop    esi
c000516c:	5f                   	pop    edi
c000516d:	5d                   	pop    ebp
c000516e:	c3                   	ret    

c000516f <f_read>:
c000516f:	55                   	push   ebp
c0005170:	57                   	push   edi
c0005171:	56                   	push   esi
c0005172:	53                   	push   ebx
c0005173:	83 ec 2c             	sub    esp,0x2c
c0005176:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000517a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000517e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005184:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005188:	89 d8                	mov    eax,ebx
c000518a:	e8 77 cf ff ff       	call   c0002106 <validate>
c000518f:	89 c5                	mov    ebp,eax
c0005191:	85 c0                	test   eax,eax
c0005193:	0f 85 4c 02 00 00    	jne    c00053e5 <f_read+0x276>
c0005199:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000519d:	85 ed                	test   ebp,ebp
c000519f:	0f 85 40 02 00 00    	jne    c00053e5 <f_read+0x276>
c00051a5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051a9:	0f 84 31 02 00 00    	je     c00053e0 <f_read+0x271>
c00051af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051b8:	bf 00 00 00 00       	mov    edi,0x0
c00051bd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051c0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051c4:	89 d1                	mov    ecx,edx
c00051c6:	19 f9                	sbb    ecx,edi
c00051c8:	0f 83 cf 00 00 00    	jae    c000529d <f_read+0x12e>
c00051ce:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051d2:	e9 c6 00 00 00       	jmp    c000529d <f_read+0x12e>
c00051d7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051da:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051dd:	89 d0                	mov    eax,edx
c00051df:	25 ff 01 00 00       	and    eax,0x1ff
c00051e4:	0f 85 c9 01 00 00    	jne    c00053b3 <f_read+0x244>
c00051ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ee:	89 d6                	mov    esi,edx
c00051f0:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00051f4:	89 cf                	mov    edi,ecx
c00051f6:	48                   	dec    eax
c00051f7:	0f ac fe 09          	shrd   esi,edi,0x9
c00051fb:	21 f0                	and    eax,esi
c00051fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005201:	0f 84 a6 00 00 00    	je     c00052ad <f_read+0x13e>
c0005207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000520b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000520e:	89 c8                	mov    eax,ecx
c0005210:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005213:	e8 84 ca ff ff       	call   c0001c9c <clst2sect>
c0005218:	89 d7                	mov    edi,edx
c000521a:	09 c7                	or     edi,eax
c000521c:	0f 84 b4 00 00 00    	je     c00052d6 <f_read+0x167>
c0005222:	31 ff                	xor    edi,edi
c0005224:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005228:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000522b:	01 c6                	add    esi,eax
c000522d:	11 d7                	adc    edi,edx
c000522f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005237:	0f 86 fd 00 00 00    	jbe    c000533a <f_read+0x1cb>
c000523d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005241:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005245:	c1 e8 09             	shr    eax,0x9
c0005248:	89 04 24             	mov    DWORD PTR [esp],eax
c000524b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000524f:	03 14 24             	add    edx,DWORD PTR [esp]
c0005252:	39 c2                	cmp    edx,eax
c0005254:	76 07                	jbe    c000525d <f_read+0xee>
c0005256:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000525a:	89 04 24             	mov    DWORD PTR [esp],eax
c000525d:	83 ec 0c             	sub    esp,0xc
c0005260:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005264:	57                   	push   edi
c0005265:	56                   	push   esi
c0005266:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000526a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000526e:	50                   	push   eax
c000526f:	e8 44 c7 ff ff       	call   c00019b8 <disk_read>
c0005274:	83 c4 20             	add    esp,0x20
c0005277:	85 c0                	test   eax,eax
c0005279:	75 6e                	jne    c00052e9 <f_read+0x17a>
c000527b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000527f:	78 7e                	js     c00052ff <f_read+0x190>
c0005281:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005284:	c1 e6 09             	shl    esi,0x9
c0005287:	31 ff                	xor    edi,edi
c0005289:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000528d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005291:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005295:	01 30                	add    DWORD PTR [eax],esi
c0005297:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c000529a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000529d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052a2:	0f 85 2f ff ff ff    	jne    c00051d7 <f_read+0x68>
c00052a8:	e9 38 01 00 00       	jmp    c00053e5 <f_read+0x276>
c00052ad:	89 c8                	mov    eax,ecx
c00052af:	09 d0                	or     eax,edx
c00052b1:	75 05                	jne    c00052b8 <f_read+0x149>
c00052b3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052b6:	eb 19                	jmp    c00052d1 <f_read+0x162>
c00052b8:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052bc:	74 09                	je     c00052c7 <f_read+0x158>
c00052be:	89 d8                	mov    eax,ebx
c00052c0:	e8 f8 c9 ff ff       	call   c0001cbd <clmt_clust>
c00052c5:	eb 0a                	jmp    c00052d1 <f_read+0x162>
c00052c7:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052ca:	89 d8                	mov    eax,ebx
c00052cc:	e8 98 da ff ff       	call   c0002d69 <get_fat>
c00052d1:	83 f8 01             	cmp    eax,0x1
c00052d4:	77 0e                	ja     c00052e4 <f_read+0x175>
c00052d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052da:	bd 02 00 00 00       	mov    ebp,0x2
c00052df:	e9 01 01 00 00       	jmp    c00053e5 <f_read+0x276>
c00052e4:	83 f8 ff             	cmp    eax,0xffffffff
c00052e7:	75 0e                	jne    c00052f7 <f_read+0x188>
c00052e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052ed:	bd 01 00 00 00       	mov    ebp,0x1
c00052f2:	e9 ee 00 00 00       	jmp    c00053e5 <f_read+0x276>
c00052f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00052fa:	e9 08 ff ff ff       	jmp    c0005207 <f_read+0x98>
c00052ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005302:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005305:	29 f0                	sub    eax,esi
c0005307:	19 fa                	sbb    edx,edi
c0005309:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000530c:	89 d7                	mov    edi,edx
c000530e:	ba 00 00 00 00       	mov    edx,0x0
c0005313:	89 f9                	mov    ecx,edi
c0005315:	19 d1                	sbb    ecx,edx
c0005317:	0f 83 64 ff ff ff    	jae    c0005281 <f_read+0x112>
c000531d:	89 c7                	mov    edi,eax
c000531f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005322:	c1 e7 09             	shl    edi,0x9
c0005325:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005329:	b9 00 02 00 00       	mov    ecx,0x200
c000532e:	01 f8                	add    eax,edi
c0005330:	e8 4d c7 ff ff       	call   c0001a82 <mem_cpy>
c0005335:	e9 47 ff ff ff       	jmp    c0005281 <f_read+0x112>
c000533a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000533d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005340:	89 04 24             	mov    DWORD PTR [esp],eax
c0005343:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005347:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000534b:	75 05                	jne    c0005352 <f_read+0x1e3>
c000534d:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005350:	74 5b                	je     c00053ad <f_read+0x23e>
c0005352:	8d 43 50             	lea    eax,[ebx+0x50]
c0005355:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005359:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535d:	79 2a                	jns    c0005389 <f_read+0x21a>
c000535f:	83 ec 0c             	sub    esp,0xc
c0005362:	6a 01                	push   0x1
c0005364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005368:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000536c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005370:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005374:	50                   	push   eax
c0005375:	e8 54 c6 ff ff       	call   c00019ce <disk_write>
c000537a:	83 c4 20             	add    esp,0x20
c000537d:	85 c0                	test   eax,eax
c000537f:	0f 85 64 ff ff ff    	jne    c00052e9 <f_read+0x17a>
c0005385:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005389:	83 ec 0c             	sub    esp,0xc
c000538c:	6a 01                	push   0x1
c000538e:	57                   	push   edi
c000538f:	56                   	push   esi
c0005390:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005394:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005398:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000539c:	50                   	push   eax
c000539d:	e8 16 c6 ff ff       	call   c00019b8 <disk_read>
c00053a2:	83 c4 20             	add    esp,0x20
c00053a5:	85 c0                	test   eax,eax
c00053a7:	0f 85 3c ff ff ff    	jne    c00052e9 <f_read+0x17a>
c00053ad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053b0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053b3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053b6:	ba 00 02 00 00       	mov    edx,0x200
c00053bb:	25 ff 01 00 00       	and    eax,0x1ff
c00053c0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053c4:	29 c2                	sub    edx,eax
c00053c6:	39 d6                	cmp    esi,edx
c00053c8:	76 02                	jbe    c00053cc <f_read+0x25d>
c00053ca:	89 d6                	mov    esi,edx
c00053cc:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053d0:	89 f1                	mov    ecx,esi
c00053d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053d6:	e8 a7 c6 ff ff       	call   c0001a82 <mem_cpy>
c00053db:	e9 a7 fe ff ff       	jmp    c0005287 <f_read+0x118>
c00053e0:	bd 07 00 00 00       	mov    ebp,0x7
c00053e5:	83 c4 2c             	add    esp,0x2c
c00053e8:	89 e8                	mov    eax,ebp
c00053ea:	5b                   	pop    ebx
c00053eb:	5e                   	pop    esi
c00053ec:	5f                   	pop    edi
c00053ed:	5d                   	pop    ebp
c00053ee:	c3                   	ret    

c00053ef <f_write>:
c00053ef:	55                   	push   ebp
c00053f0:	57                   	push   edi
c00053f1:	56                   	push   esi
c00053f2:	53                   	push   ebx
c00053f3:	83 ec 2c             	sub    esp,0x2c
c00053f6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053fa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005404:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005408:	89 d8                	mov    eax,ebx
c000540a:	e8 f7 cc ff ff       	call   c0002106 <validate>
c000540f:	89 c5                	mov    ebp,eax
c0005411:	85 c0                	test   eax,eax
c0005413:	0f 85 86 02 00 00    	jne    c000569f <f_write+0x2b0>
c0005419:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000541d:	85 ed                	test   ebp,ebp
c000541f:	0f 85 7a 02 00 00    	jne    c000569f <f_write+0x2b0>
c0005425:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005429:	0f 84 6b 02 00 00    	je     c000569a <f_write+0x2ab>
c000542f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005433:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005436:	0f 84 43 01 00 00    	je     c000557f <f_write+0x190>
c000543c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000543f:	89 c1                	mov    ecx,eax
c0005441:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005445:	0f 83 34 01 00 00    	jae    c000557f <f_write+0x190>
c000544b:	f7 d0                	not    eax
c000544d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005451:	e9 29 01 00 00       	jmp    c000557f <f_write+0x190>
c0005456:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005459:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000545c:	89 d0                	mov    eax,edx
c000545e:	25 ff 01 00 00       	and    eax,0x1ff
c0005463:	0f 85 00 02 00 00    	jne    c0005669 <f_write+0x27a>
c0005469:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000546d:	89 d6                	mov    esi,edx
c000546f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005473:	89 cf                	mov    edi,ecx
c0005475:	48                   	dec    eax
c0005476:	0f ac fe 09          	shrd   esi,edi,0x9
c000547a:	21 f0                	and    eax,esi
c000547c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005480:	0f 84 06 01 00 00    	je     c000558c <f_write+0x19d>
c0005486:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000548a:	0f 88 6e 01 00 00    	js     c00055fe <f_write+0x20f>
c0005490:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005494:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005497:	89 c8                	mov    eax,ecx
c0005499:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000549d:	e8 fa c7 ff ff       	call   c0001c9c <clst2sect>
c00054a2:	89 d1                	mov    ecx,edx
c00054a4:	09 c1                	or     ecx,eax
c00054a6:	0f 84 1c 01 00 00    	je     c00055c8 <f_write+0x1d9>
c00054ac:	31 ff                	xor    edi,edi
c00054ae:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054b6:	01 c6                	add    esi,eax
c00054b8:	11 d7                	adc    edi,edx
c00054ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054c2:	0f 86 63 01 00 00    	jbe    c000562b <f_write+0x23c>
c00054c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054d0:	c1 e8 09             	shr    eax,0x9
c00054d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054d7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054db:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054df:	39 c2                	cmp    edx,eax
c00054e1:	76 08                	jbe    c00054eb <f_write+0xfc>
c00054e3:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054eb:	83 ec 0c             	sub    esp,0xc
c00054ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054f2:	57                   	push   edi
c00054f3:	56                   	push   esi
c00054f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054f8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054fc:	50                   	push   eax
c00054fd:	e8 cc c4 ff ff       	call   c00019ce <disk_write>
c0005502:	83 c4 20             	add    esp,0x20
c0005505:	85 c0                	test   eax,eax
c0005507:	0f 85 ce 00 00 00    	jne    c00055db <f_write+0x1ec>
c000550d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005510:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005513:	29 f0                	sub    eax,esi
c0005515:	19 fa                	sbb    edx,edi
c0005517:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000551b:	89 d7                	mov    edi,edx
c000551d:	ba 00 00 00 00       	mov    edx,0x0
c0005522:	89 f9                	mov    ecx,edi
c0005524:	19 d1                	sbb    ecx,edx
c0005526:	73 1c                	jae    c0005544 <f_write+0x155>
c0005528:	89 c7                	mov    edi,eax
c000552a:	b9 00 02 00 00       	mov    ecx,0x200
c000552f:	c1 e7 09             	shl    edi,0x9
c0005532:	8d 43 50             	lea    eax,[ebx+0x50]
c0005535:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005539:	89 fa                	mov    edx,edi
c000553b:	e8 42 c5 ff ff       	call   c0001a82 <mem_cpy>
c0005540:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005544:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005548:	c1 e6 09             	shl    esi,0x9
c000554b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554f:	31 ff                	xor    edi,edi
c0005551:	01 30                	add    DWORD PTR [eax],esi
c0005553:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005557:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000555b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000555e:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005561:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005564:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005567:	89 c1                	mov    ecx,eax
c0005569:	39 f2                	cmp    edx,esi
c000556b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000556e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005571:	19 f9                	sbb    ecx,edi
c0005573:	73 04                	jae    c0005579 <f_write+0x18a>
c0005575:	89 f2                	mov    edx,esi
c0005577:	89 f8                	mov    eax,edi
c0005579:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000557c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000557f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005584:	0f 85 cc fe ff ff    	jne    c0005456 <f_write+0x67>
c000558a:	eb 2e                	jmp    c00055ba <f_write+0x1cb>
c000558c:	89 c8                	mov    eax,ecx
c000558e:	09 d0                	or     eax,edx
c0005590:	75 0b                	jne    c000559d <f_write+0x1ae>
c0005592:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005595:	31 d2                	xor    edx,edx
c0005597:	85 c0                	test   eax,eax
c0005599:	75 28                	jne    c00055c3 <f_write+0x1d4>
c000559b:	eb 12                	jmp    c00055af <f_write+0x1c0>
c000559d:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055a1:	74 09                	je     c00055ac <f_write+0x1bd>
c00055a3:	89 d8                	mov    eax,ebx
c00055a5:	e8 13 c7 ff ff       	call   c0001cbd <clmt_clust>
c00055aa:	eb 0a                	jmp    c00055b6 <f_write+0x1c7>
c00055ac:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055af:	89 d8                	mov    eax,ebx
c00055b1:	e8 a1 da ff ff       	call   c0003057 <create_chain>
c00055b6:	85 c0                	test   eax,eax
c00055b8:	75 09                	jne    c00055c3 <f_write+0x1d4>
c00055ba:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055be:	e9 dc 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055c3:	83 f8 01             	cmp    eax,0x1
c00055c6:	75 0e                	jne    c00055d6 <f_write+0x1e7>
c00055c8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055cc:	bd 02 00 00 00       	mov    ebp,0x2
c00055d1:	e9 c9 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055d6:	83 f8 ff             	cmp    eax,0xffffffff
c00055d9:	75 0e                	jne    c00055e9 <f_write+0x1fa>
c00055db:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055df:	bd 01 00 00 00       	mov    ebp,0x1
c00055e4:	e9 b6 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055e9:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055ec:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055f0:	0f 85 90 fe ff ff    	jne    c0005486 <f_write+0x97>
c00055f6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055f9:	e9 88 fe ff ff       	jmp    c0005486 <f_write+0x97>
c00055fe:	83 ec 0c             	sub    esp,0xc
c0005601:	8d 43 50             	lea    eax,[ebx+0x50]
c0005604:	6a 01                	push   0x1
c0005606:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005609:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000560c:	50                   	push   eax
c000560d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005611:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005615:	50                   	push   eax
c0005616:	e8 b3 c3 ff ff       	call   c00019ce <disk_write>
c000561b:	83 c4 20             	add    esp,0x20
c000561e:	85 c0                	test   eax,eax
c0005620:	75 b9                	jne    c00055db <f_write+0x1ec>
c0005622:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005626:	e9 65 fe ff ff       	jmp    c0005490 <f_write+0xa1>
c000562b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000562e:	75 05                	jne    c0005635 <f_write+0x246>
c0005630:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005633:	74 2e                	je     c0005663 <f_write+0x274>
c0005635:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005638:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000563b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000563e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005641:	73 20                	jae    c0005663 <f_write+0x274>
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	8d 43 50             	lea    eax,[ebx+0x50]
c0005649:	6a 01                	push   0x1
c000564b:	57                   	push   edi
c000564c:	56                   	push   esi
c000564d:	50                   	push   eax
c000564e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005652:	50                   	push   eax
c0005653:	e8 60 c3 ff ff       	call   c00019b8 <disk_read>
c0005658:	83 c4 20             	add    esp,0x20
c000565b:	85 c0                	test   eax,eax
c000565d:	0f 85 78 ff ff ff    	jne    c00055db <f_write+0x1ec>
c0005663:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005666:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005669:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000566c:	ba 00 02 00 00       	mov    edx,0x200
c0005671:	25 ff 01 00 00       	and    eax,0x1ff
c0005676:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000567a:	29 c2                	sub    edx,eax
c000567c:	39 d6                	cmp    esi,edx
c000567e:	76 02                	jbe    c0005682 <f_write+0x293>
c0005680:	89 d6                	mov    esi,edx
c0005682:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005686:	89 f1                	mov    ecx,esi
c0005688:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000568c:	e8 f1 c3 ff ff       	call   c0001a82 <mem_cpy>
c0005691:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005695:	e9 b1 fe ff ff       	jmp    c000554b <f_write+0x15c>
c000569a:	bd 07 00 00 00       	mov    ebp,0x7
c000569f:	83 c4 2c             	add    esp,0x2c
c00056a2:	89 e8                	mov    eax,ebp
c00056a4:	5b                   	pop    ebx
c00056a5:	5e                   	pop    esi
c00056a6:	5f                   	pop    edi
c00056a7:	5d                   	pop    ebp
c00056a8:	c3                   	ret    

c00056a9 <f_sync>:
c00056a9:	56                   	push   esi
c00056aa:	53                   	push   ebx
c00056ab:	83 ec 64             	sub    esp,0x64
c00056ae:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056b2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056b6:	89 d8                	mov    eax,ebx
c00056b8:	e8 49 ca ff ff       	call   c0002106 <validate>
c00056bd:	85 c0                	test   eax,eax
c00056bf:	0f 85 ba 01 00 00    	jne    c000587f <f_sync+0x1d6>
c00056c5:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056c8:	f6 c2 40             	test   dl,0x40
c00056cb:	0f 84 ae 01 00 00    	je     c000587f <f_sync+0x1d6>
c00056d1:	84 d2                	test   dl,dl
c00056d3:	79 33                	jns    c0005708 <f_sync+0x5f>
c00056d5:	83 ec 0c             	sub    esp,0xc
c00056d8:	8d 43 50             	lea    eax,[ebx+0x50]
c00056db:	6a 01                	push   0x1
c00056dd:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056e0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056e3:	50                   	push   eax
c00056e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056ec:	50                   	push   eax
c00056ed:	e8 dc c2 ff ff       	call   c00019ce <disk_write>
c00056f2:	83 c4 20             	add    esp,0x20
c00056f5:	89 c2                	mov    edx,eax
c00056f7:	b8 01 00 00 00       	mov    eax,0x1
c00056fc:	85 d2                	test   edx,edx
c00056fe:	0f 85 7b 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005704:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000570f:	0f 85 11 01 00 00    	jne    c0005826 <f_sync+0x17d>
c0005715:	89 d8                	mov    eax,ebx
c0005717:	e8 13 d6 ff ff       	call   c0002d2f <fill_first_frag>
c000571c:	85 c0                	test   eax,eax
c000571e:	0f 85 5b 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005724:	83 c9 ff             	or     ecx,0xffffffff
c0005727:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000572a:	89 d8                	mov    eax,ebx
c000572c:	e8 c9 d5 ff ff       	call   c0002cfa <fill_last_frag>
c0005731:	85 c0                	test   eax,eax
c0005733:	0f 85 46 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005739:	83 ec 0c             	sub    esp,0xc
c000573c:	68 60 04 00 00       	push   0x460
c0005741:	e8 f0 2a 00 00       	call   c0008236 <ff_memalloc>
c0005746:	83 c4 10             	add    esp,0x10
c0005749:	89 c6                	mov    esi,eax
c000574b:	b8 11 00 00 00       	mov    eax,0x11
c0005750:	85 f6                	test   esi,esi
c0005752:	0f 84 27 01 00 00    	je     c000587f <f_sync+0x1d6>
c0005758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005762:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005765:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005768:	89 da                	mov    edx,ebx
c000576a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000576e:	e8 af df ff ff       	call   c0003722 <load_obj_xdir>
c0005773:	85 c0                	test   eax,eax
c0005775:	0f 85 95 00 00 00    	jne    c0005810 <f_sync+0x167>
c000577b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005782:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005786:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005789:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000578c:	83 ca 01             	or     edx,0x1
c000578f:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005792:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005795:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005798:	83 c0 34             	add    eax,0x34
c000579b:	e8 d9 c2 ff ff       	call   c0001a79 <st_dword>
c00057a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057aa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ad:	83 c0 38             	add    eax,0x38
c00057b0:	e8 c7 c2 ff ff       	call   c0001a7c <st_qword>
c00057b5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057bc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057c2:	83 c0 28             	add    eax,0x28
c00057c5:	e8 b2 c2 ff ff       	call   c0001a7c <st_qword>
c00057ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ce:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d6:	83 c0 0c             	add    eax,0xc
c00057d9:	e8 9b c2 ff ff       	call   c0001a79 <st_dword>
c00057de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057e5:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057e9:	31 d2                	xor    edx,edx
c00057eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ee:	83 c0 10             	add    eax,0x10
c00057f1:	e8 83 c2 ff ff       	call   c0001a79 <st_dword>
c00057f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057fa:	e8 62 e1 ff ff       	call   c0003961 <store_xdir>
c00057ff:	85 c0                	test   eax,eax
c0005801:	75 0d                	jne    c0005810 <f_sync+0x167>
c0005803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005807:	e8 00 eb ff ff       	call   c000430c <sync_fs>
c000580c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005810:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005814:	83 ec 0c             	sub    esp,0xc
c0005817:	56                   	push   esi
c0005818:	e8 2f 2a 00 00       	call   c000824c <ff_memfree>
c000581d:	83 c4 10             	add    esp,0x10
c0005820:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005824:	eb 59                	jmp    c000587f <f_sync+0x1d6>
c0005826:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005829:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000582c:	e8 b0 c9 ff ff       	call   c00021e1 <move_window>
c0005831:	85 c0                	test   eax,eax
c0005833:	75 4a                	jne    c000587f <f_sync+0x1d6>
c0005835:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005838:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000583c:	89 f2                	mov    edx,esi
c000583e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005841:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005843:	e8 5f f3 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0005848:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000584b:	8d 46 1c             	lea    eax,[esi+0x1c]
c000584e:	e8 26 c2 ff ff       	call   c0001a79 <st_dword>
c0005853:	8d 46 16             	lea    eax,[esi+0x16]
c0005856:	ba 00 00 21 50       	mov    edx,0x50210000
c000585b:	e8 19 c2 ff ff       	call   c0001a79 <st_dword>
c0005860:	8d 46 12             	lea    eax,[esi+0x12]
c0005863:	31 d2                	xor    edx,edx
c0005865:	e8 0b c2 ff ff       	call   c0001a75 <st_word>
c000586a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005876:	e8 91 ea ff ff       	call   c000430c <sync_fs>
c000587b:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000587f:	83 c4 64             	add    esp,0x64
c0005882:	5b                   	pop    ebx
c0005883:	5e                   	pop    esi
c0005884:	c3                   	ret    

c0005885 <f_close>:
c0005885:	53                   	push   ebx
c0005886:	83 ec 24             	sub    esp,0x24
c0005889:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000588d:	53                   	push   ebx
c000588e:	e8 16 fe ff ff       	call   c00056a9 <f_sync>
c0005893:	83 c4 10             	add    esp,0x10
c0005896:	85 c0                	test   eax,eax
c0005898:	75 15                	jne    c00058af <f_close+0x2a>
c000589a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000589e:	89 d8                	mov    eax,ebx
c00058a0:	e8 61 c8 ff ff       	call   c0002106 <validate>
c00058a5:	85 c0                	test   eax,eax
c00058a7:	75 06                	jne    c00058af <f_close+0x2a>
c00058a9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058af:	83 c4 18             	add    esp,0x18
c00058b2:	5b                   	pop    ebx
c00058b3:	c3                   	ret    

c00058b4 <f_lseek>:
c00058b4:	55                   	push   ebp
c00058b5:	57                   	push   edi
c00058b6:	56                   	push   esi
c00058b7:	53                   	push   ebx
c00058b8:	83 ec 3c             	sub    esp,0x3c
c00058bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058c3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00058ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058ce:	89 d8                	mov    eax,ebx
c00058d0:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058d4:	e8 2d c8 ff ff       	call   c0002106 <validate>
c00058d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058dd:	85 c0                	test   eax,eax
c00058df:	0f 85 7a 04 00 00    	jne    c0005d5f <f_lseek+0x4ab>
c00058e5:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058ed:	85 c0                	test   eax,eax
c00058ef:	0f 85 6a 04 00 00    	jne    c0005d5f <f_lseek+0x4ab>
c00058f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00058f9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00058fc:	74 0c                	je     c000590a <f_lseek+0x56>
c00058fe:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005901:	85 c0                	test   eax,eax
c0005903:	75 1f                	jne    c0005924 <f_lseek+0x70>
c0005905:	e9 b5 01 00 00       	jmp    c0005abf <f_lseek+0x20b>
c000590a:	83 c9 ff             	or     ecx,0xffffffff
c000590d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005910:	89 d8                	mov    eax,ebx
c0005912:	e8 e3 d3 ff ff       	call   c0002cfa <fill_last_frag>
c0005917:	85 c0                	test   eax,eax
c0005919:	74 e3                	je     c00058fe <f_lseek+0x4a>
c000591b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000591f:	e9 3b 04 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005924:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005929:	0f 85 ac 00 00 00    	jne    c00059db <f_lseek+0x127>
c000592f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005933:	0f 85 a2 00 00 00    	jne    c00059db <f_lseek+0x127>
c0005939:	8d 78 04             	lea    edi,[eax+0x4]
c000593c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000593f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005941:	be 02 00 00 00       	mov    esi,0x2
c0005946:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000594a:	85 ed                	test   ebp,ebp
c000594c:	74 73                	je     c00059c1 <f_lseek+0x10d>
c000594e:	89 e9                	mov    ecx,ebp
c0005950:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005957:	ff 04 24             	inc    DWORD PTR [esp]
c000595a:	89 ca                	mov    edx,ecx
c000595c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005960:	89 d8                	mov    eax,ebx
c0005962:	e8 02 d4 ff ff       	call   c0002d69 <get_fat>
c0005967:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000596b:	83 f8 01             	cmp    eax,0x1
c000596e:	77 11                	ja     c0005981 <f_lseek+0xcd>
c0005970:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005974:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000597c:	e9 de 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005981:	83 f8 ff             	cmp    eax,0xffffffff
c0005984:	75 11                	jne    c0005997 <f_lseek+0xe3>
c0005986:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000598a:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005992:	e9 c8 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005997:	8d 51 01             	lea    edx,[ecx+0x1]
c000599a:	89 c1                	mov    ecx,eax
c000599c:	39 c2                	cmp    edx,eax
c000599e:	74 b7                	je     c0005957 <f_lseek+0xa3>
c00059a0:	83 c6 02             	add    esi,0x2
c00059a3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059a7:	72 0b                	jb     c00059b4 <f_lseek+0x100>
c00059a9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ac:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059af:	89 0f                	mov    DWORD PTR [edi],ecx
c00059b1:	83 c7 08             	add    edi,0x8
c00059b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059b8:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059bb:	76 04                	jbe    c00059c1 <f_lseek+0x10d>
c00059bd:	89 c5                	mov    ebp,eax
c00059bf:	eb 8d                	jmp    c000594e <f_lseek+0x9a>
c00059c1:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059c4:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059c8:	89 30                	mov    DWORD PTR [eax],esi
c00059ca:	0f 87 87 03 00 00    	ja     c0005d57 <f_lseek+0x4a3>
c00059d0:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059d6:	e9 84 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c00059db:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059de:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059ed:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00059f4:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00059f8:	73 0f                	jae    c0005a09 <f_lseek+0x155>
c00059fa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00059fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a11:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a14:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a1b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a1f:	0f 84 3a 03 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005a25:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a29:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a2d:	83 c6 ff             	add    esi,0xffffffff
c0005a30:	89 d8                	mov    eax,ebx
c0005a32:	83 d7 ff             	adc    edi,0xffffffff
c0005a35:	89 f2                	mov    edx,esi
c0005a37:	89 f9                	mov    ecx,edi
c0005a39:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a40:	e8 78 c2 ff ff       	call   c0001cbd <clmt_clust>
c0005a45:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a49:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a4c:	89 c2                	mov    edx,eax
c0005a4e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a52:	89 c8                	mov    eax,ecx
c0005a54:	e8 43 c2 ff ff       	call   c0001c9c <clst2sect>
c0005a59:	89 d7                	mov    edi,edx
c0005a5b:	09 c7                	or     edi,eax
c0005a5d:	0f 84 0d ff ff ff    	je     c0005970 <f_lseek+0xbc>
c0005a63:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a67:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a6d:	0f 84 ec 02 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005a73:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a7b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a7e:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a82:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a86:	4d                   	dec    ebp
c0005a87:	31 ff                	xor    edi,edi
c0005a89:	21 ee                	and    esi,ebp
c0005a8b:	01 c6                	add    esi,eax
c0005a8d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a90:	11 d7                	adc    edi,edx
c0005a92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a95:	39 fa                	cmp    edx,edi
c0005a97:	75 08                	jne    c0005aa1 <f_lseek+0x1ed>
c0005a99:	39 f0                	cmp    eax,esi
c0005a9b:	0f 84 be 02 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005aa1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aa4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aa8:	0f 89 80 02 00 00    	jns    c0005d2e <f_lseek+0x47a>
c0005aae:	83 ec 0c             	sub    esp,0xc
c0005ab1:	6a 01                	push   0x1
c0005ab3:	52                   	push   edx
c0005ab4:	50                   	push   eax
c0005ab5:	55                   	push   ebp
c0005ab6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005aba:	e9 5a 02 00 00       	jmp    c0005d19 <f_lseek+0x465>
c0005abf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ac3:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ac6:	74 16                	je     c0005ade <f_lseek+0x22a>
c0005ac8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005acd:	76 0f                	jbe    c0005ade <f_lseek+0x22a>
c0005acf:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ad6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ade:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ae1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005ae4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005ae7:	89 c7                	mov    edi,eax
c0005ae9:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005aed:	73 0d                	jae    c0005afc <f_lseek+0x248>
c0005aef:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005af3:	75 07                	jne    c0005afc <f_lseek+0x248>
c0005af5:	89 14 24             	mov    DWORD PTR [esp],edx
c0005af8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005afc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005aff:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b02:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b06:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b0d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b14:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b17:	75 09                	jne    c0005b22 <f_lseek+0x26e>
c0005b19:	31 f6                	xor    esi,esi
c0005b1b:	31 ff                	xor    edi,edi
c0005b1d:	e9 af 01 00 00       	jmp    c0005cd1 <f_lseek+0x41d>
c0005b22:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b26:	89 d7                	mov    edi,edx
c0005b28:	c1 e1 09             	shl    ecx,0x9
c0005b2b:	09 c7                	or     edi,eax
c0005b2d:	89 cd                	mov    ebp,ecx
c0005b2f:	74 6d                	je     c0005b9e <f_lseek+0x2ea>
c0005b31:	83 c0 ff             	add    eax,0xffffffff
c0005b34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b38:	83 d2 ff             	adc    edx,0xffffffff
c0005b3b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b42:	83 c0 ff             	add    eax,0xffffffff
c0005b45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b49:	83 d2 ff             	adc    edx,0xffffffff
c0005b4c:	31 ff                	xor    edi,edi
c0005b4e:	57                   	push   edi
c0005b4f:	51                   	push   ecx
c0005b50:	52                   	push   edx
c0005b51:	50                   	push   eax
c0005b52:	e8 05 d9 01 00       	call   c002345c <__udivdi3>
c0005b57:	83 c4 10             	add    esp,0x10
c0005b5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b62:	57                   	push   edi
c0005b63:	55                   	push   ebp
c0005b64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b6c:	e8 eb d8 01 00       	call   c002345c <__udivdi3>
c0005b71:	83 c4 10             	add    esp,0x10
c0005b74:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b7c:	19 d1                	sbb    ecx,edx
c0005b7e:	72 1e                	jb     c0005b9e <f_lseek+0x2ea>
c0005b80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b84:	89 e9                	mov    ecx,ebp
c0005b86:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b89:	f7 d9                	neg    ecx
c0005b8b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b8e:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b92:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b95:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b98:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b9c:	eb 28                	jmp    c0005bc6 <f_lseek+0x312>
c0005b9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 1e                	jne    c0005bc3 <f_lseek+0x30f>
c0005ba5:	31 d2                	xor    edx,edx
c0005ba7:	89 d8                	mov    eax,ebx
c0005ba9:	e8 a9 d4 ff ff       	call   c0003057 <create_chain>
c0005bae:	83 f8 01             	cmp    eax,0x1
c0005bb1:	0f 84 b9 fd ff ff    	je     c0005970 <f_lseek+0xbc>
c0005bb7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bba:	0f 84 c6 fd ff ff    	je     c0005986 <f_lseek+0xd2>
c0005bc0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bc3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bc6:	85 c0                	test   eax,eax
c0005bc8:	0f 84 4b ff ff ff    	je     c0005b19 <f_lseek+0x265>
c0005bce:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005bd2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005bda:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bdd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005be1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005be7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005beb:	0f 83 9d 00 00 00    	jae    c0005c8e <f_lseek+0x3da>
c0005bf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005bf5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bf9:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bfc:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c00:	01 f2                	add    edx,esi
c0005c02:	11 f9                	adc    ecx,edi
c0005c04:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c0c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c0f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c12:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c15:	f6 c1 02             	test   cl,0x2
c0005c18:	74 35                	je     c0005c4f <f_lseek+0x39b>
c0005c1a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c1e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c21:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c24:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c28:	73 16                	jae    c0005c40 <f_lseek+0x38c>
c0005c2a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c2e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c32:	88 ca                	mov    dl,cl
c0005c34:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c37:	83 ca 40             	or     edx,0x40
c0005c3a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c3d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c40:	89 c2                	mov    edx,eax
c0005c42:	89 d8                	mov    eax,ebx
c0005c44:	e8 0e d4 ff ff       	call   c0003057 <create_chain>
c0005c49:	85 c0                	test   eax,eax
c0005c4b:	75 0b                	jne    c0005c58 <f_lseek+0x3a4>
c0005c4d:	eb 30                	jmp    c0005c7f <f_lseek+0x3cb>
c0005c4f:	89 c2                	mov    edx,eax
c0005c51:	89 d8                	mov    eax,ebx
c0005c53:	e8 11 d1 ff ff       	call   c0002d69 <get_fat>
c0005c58:	83 f8 ff             	cmp    eax,0xffffffff
c0005c5b:	0f 84 25 fd ff ff    	je     c0005986 <f_lseek+0xd2>
c0005c61:	83 f8 01             	cmp    eax,0x1
c0005c64:	0f 86 06 fd ff ff    	jbe    c0005970 <f_lseek+0xbc>
c0005c6a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c6e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c71:	0f 86 f9 fc ff ff    	jbe    c0005970 <f_lseek+0xbc>
c0005c77:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c7a:	e9 5b ff ff ff       	jmp    c0005bda <f_lseek+0x326>
c0005c7f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c91:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c95:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c98:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c9b:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c9e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ca4:	0f 84 6f fe ff ff    	je     c0005b19 <f_lseek+0x265>
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cb0:	e8 e7 bf ff ff       	call   c0001c9c <clst2sect>
c0005cb5:	89 d7                	mov    edi,edx
c0005cb7:	09 c7                	or     edi,eax
c0005cb9:	0f 84 b1 fc ff ff    	je     c0005970 <f_lseek+0xbc>
c0005cbf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cc3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cc6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cca:	c1 ef 09             	shr    edi,0x9
c0005ccd:	01 c6                	add    esi,eax
c0005ccf:	11 d7                	adc    edi,edx
c0005cd1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cd4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005cd7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cda:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cdd:	19 d1                	sbb    ecx,edx
c0005cdf:	73 0a                	jae    c0005ceb <f_lseek+0x437>
c0005ce1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005ce4:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005ce7:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005ceb:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cf0:	74 6d                	je     c0005d5f <f_lseek+0x4ab>
c0005cf2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf8:	39 fa                	cmp    edx,edi
c0005cfa:	75 04                	jne    c0005d00 <f_lseek+0x44c>
c0005cfc:	39 f0                	cmp    eax,esi
c0005cfe:	74 5f                	je     c0005d5f <f_lseek+0x4ab>
c0005d00:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d03:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d07:	79 25                	jns    c0005d2e <f_lseek+0x47a>
c0005d09:	83 ec 0c             	sub    esp,0xc
c0005d0c:	6a 01                	push   0x1
c0005d0e:	52                   	push   edx
c0005d0f:	50                   	push   eax
c0005d10:	55                   	push   ebp
c0005d11:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d15:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d19:	50                   	push   eax
c0005d1a:	e8 af bc ff ff       	call   c00019ce <disk_write>
c0005d1f:	83 c4 20             	add    esp,0x20
c0005d22:	85 c0                	test   eax,eax
c0005d24:	0f 85 5c fc ff ff    	jne    c0005986 <f_lseek+0xd2>
c0005d2a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d2e:	83 ec 0c             	sub    esp,0xc
c0005d31:	6a 01                	push   0x1
c0005d33:	57                   	push   edi
c0005d34:	56                   	push   esi
c0005d35:	55                   	push   ebp
c0005d36:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d3a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d3e:	50                   	push   eax
c0005d3f:	e8 74 bc ff ff       	call   c00019b8 <disk_read>
c0005d44:	83 c4 20             	add    esp,0x20
c0005d47:	85 c0                	test   eax,eax
c0005d49:	0f 85 37 fc ff ff    	jne    c0005986 <f_lseek+0xd2>
c0005d4f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d52:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d55:	eb 08                	jmp    c0005d5f <f_lseek+0x4ab>
c0005d57:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d63:	83 c4 3c             	add    esp,0x3c
c0005d66:	5b                   	pop    ebx
c0005d67:	5e                   	pop    esi
c0005d68:	5f                   	pop    edi
c0005d69:	5d                   	pop    ebp
c0005d6a:	c3                   	ret    

c0005d6b <f_opendir>:
c0005d6b:	56                   	push   esi
c0005d6c:	b8 09 00 00 00       	mov    eax,0x9
c0005d71:	53                   	push   ebx
c0005d72:	83 ec 24             	sub    esp,0x24
c0005d75:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d79:	85 db                	test   ebx,ebx
c0005d7b:	0f 84 e6 00 00 00    	je     c0005e67 <f_opendir+0xfc>
c0005d81:	31 c9                	xor    ecx,ecx
c0005d83:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d87:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d8b:	e8 03 c7 ff ff       	call   c0002493 <mount_volume>
c0005d90:	85 c0                	test   eax,eax
c0005d92:	0f 85 c9 00 00 00    	jne    c0005e61 <f_opendir+0xf6>
c0005d98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d9c:	83 ec 0c             	sub    esp,0xc
c0005d9f:	89 03                	mov    DWORD PTR [ebx],eax
c0005da1:	68 60 04 00 00       	push   0x460
c0005da6:	e8 8b 24 00 00       	call   c0008236 <ff_memalloc>
c0005dab:	83 c4 10             	add    esp,0x10
c0005dae:	89 c6                	mov    esi,eax
c0005db0:	b8 11 00 00 00       	mov    eax,0x11
c0005db5:	85 f6                	test   esi,esi
c0005db7:	0f 84 aa 00 00 00    	je     c0005e67 <f_opendir+0xfc>
c0005dbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dc1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dc7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005dcd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005dd1:	89 d8                	mov    eax,ebx
c0005dd3:	e8 31 ee ff ff       	call   c0004c09 <follow_path>
c0005dd8:	85 c0                	test   eax,eax
c0005dda:	75 61                	jne    c0005e3d <f_opendir+0xd2>
c0005ddc:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005de0:	78 46                	js     c0005e28 <f_opendir+0xbd>
c0005de2:	b8 05 00 00 00       	mov    eax,0x5
c0005de7:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005deb:	74 50                	je     c0005e3d <f_opendir+0xd2>
c0005ded:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005df1:	8a 01                	mov    al,BYTE PTR [ecx]
c0005df3:	3c 04                	cmp    al,0x4
c0005df5:	75 26                	jne    c0005e1d <f_opendir+0xb2>
c0005df7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dfa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dfd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e00:	30 d2                	xor    dl,dl
c0005e02:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e06:	09 c2                	or     edx,eax
c0005e08:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e0b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e0e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e11:	89 da                	mov    edx,ebx
c0005e13:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e16:	e8 b4 ed ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0005e1b:	eb 0b                	jmp    c0005e28 <f_opendir+0xbd>
c0005e1d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e20:	e8 59 ed ff ff       	call   c0004b7e <ld_clust.isra.0>
c0005e25:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e2c:	31 d2                	xor    edx,edx
c0005e2e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e32:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e36:	89 d8                	mov    eax,ebx
c0005e38:	e8 22 d1 ff ff       	call   c0002f5f <dir_sdi>
c0005e3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e41:	83 ec 0c             	sub    esp,0xc
c0005e44:	56                   	push   esi
c0005e45:	e8 02 24 00 00       	call   c000824c <ff_memfree>
c0005e4a:	83 c4 10             	add    esp,0x10
c0005e4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e51:	83 f8 04             	cmp    eax,0x4
c0005e54:	74 06                	je     c0005e5c <f_opendir+0xf1>
c0005e56:	85 c0                	test   eax,eax
c0005e58:	74 0d                	je     c0005e67 <f_opendir+0xfc>
c0005e5a:	eb 05                	jmp    c0005e61 <f_opendir+0xf6>
c0005e5c:	b8 05 00 00 00       	mov    eax,0x5
c0005e61:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e67:	83 c4 24             	add    esp,0x24
c0005e6a:	5b                   	pop    ebx
c0005e6b:	5e                   	pop    esi
c0005e6c:	c3                   	ret    

c0005e6d <f_closedir>:
c0005e6d:	53                   	push   ebx
c0005e6e:	83 ec 18             	sub    esp,0x18
c0005e71:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e75:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e79:	89 d8                	mov    eax,ebx
c0005e7b:	e8 86 c2 ff ff       	call   c0002106 <validate>
c0005e80:	85 c0                	test   eax,eax
c0005e82:	75 06                	jne    c0005e8a <f_closedir+0x1d>
c0005e84:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e8a:	83 c4 18             	add    esp,0x18
c0005e8d:	5b                   	pop    ebx
c0005e8e:	c3                   	ret    

c0005e8f <f_readdir>:
c0005e8f:	57                   	push   edi
c0005e90:	56                   	push   esi
c0005e91:	53                   	push   ebx
c0005e92:	83 ec 20             	sub    esp,0x20
c0005e95:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e99:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ea1:	89 d8                	mov    eax,ebx
c0005ea3:	e8 5e c2 ff ff       	call   c0002106 <validate>
c0005ea8:	85 c0                	test   eax,eax
c0005eaa:	75 77                	jne    c0005f23 <f_readdir+0x94>
c0005eac:	85 ff                	test   edi,edi
c0005eae:	75 0b                	jne    c0005ebb <f_readdir+0x2c>
c0005eb0:	31 d2                	xor    edx,edx
c0005eb2:	89 d8                	mov    eax,ebx
c0005eb4:	e8 a6 d0 ff ff       	call   c0002f5f <dir_sdi>
c0005eb9:	eb 68                	jmp    c0005f23 <f_readdir+0x94>
c0005ebb:	83 ec 0c             	sub    esp,0xc
c0005ebe:	68 60 04 00 00       	push   0x460
c0005ec3:	e8 6e 23 00 00       	call   c0008236 <ff_memalloc>
c0005ec8:	83 c4 10             	add    esp,0x10
c0005ecb:	89 c6                	mov    esi,eax
c0005ecd:	b8 11 00 00 00       	mov    eax,0x11
c0005ed2:	85 f6                	test   esi,esi
c0005ed4:	74 4d                	je     c0005f23 <f_readdir+0x94>
c0005ed6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eda:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ee0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ee3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ee6:	31 d2                	xor    edx,edx
c0005ee8:	89 d8                	mov    eax,ebx
c0005eea:	e8 80 d8 ff ff       	call   c000376f <dir_read>
c0005eef:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ef4:	75 19                	jne    c0005f0f <f_readdir+0x80>
c0005ef6:	89 fa                	mov    edx,edi
c0005ef8:	89 d8                	mov    eax,ebx
c0005efa:	e8 7e ea ff ff       	call   c000497d <get_fileinfo>
c0005eff:	31 d2                	xor    edx,edx
c0005f01:	89 d8                	mov    eax,ebx
c0005f03:	e8 af d5 ff ff       	call   c00034b7 <dir_next>
c0005f08:	83 f8 04             	cmp    eax,0x4
c0005f0b:	75 02                	jne    c0005f0f <f_readdir+0x80>
c0005f0d:	31 c0                	xor    eax,eax
c0005f0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f13:	83 ec 0c             	sub    esp,0xc
c0005f16:	56                   	push   esi
c0005f17:	e8 30 23 00 00       	call   c000824c <ff_memfree>
c0005f1c:	83 c4 10             	add    esp,0x10
c0005f1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f23:	83 c4 20             	add    esp,0x20
c0005f26:	5b                   	pop    ebx
c0005f27:	5e                   	pop    esi
c0005f28:	5f                   	pop    edi
c0005f29:	c3                   	ret    

c0005f2a <f_stat>:
c0005f2a:	57                   	push   edi
c0005f2b:	31 c9                	xor    ecx,ecx
c0005f2d:	56                   	push   esi
c0005f2e:	53                   	push   ebx
c0005f2f:	83 ec 50             	sub    esp,0x50
c0005f32:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f36:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f3a:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f3e:	e8 50 c5 ff ff       	call   c0002493 <mount_volume>
c0005f43:	89 c3                	mov    ebx,eax
c0005f45:	85 c0                	test   eax,eax
c0005f47:	75 67                	jne    c0005fb0 <f_stat+0x86>
c0005f49:	83 ec 0c             	sub    esp,0xc
c0005f4c:	bb 11 00 00 00       	mov    ebx,0x11
c0005f51:	68 60 04 00 00       	push   0x460
c0005f56:	e8 db 22 00 00       	call   c0008236 <ff_memalloc>
c0005f5b:	83 c4 10             	add    esp,0x10
c0005f5e:	89 c6                	mov    esi,eax
c0005f60:	85 c0                	test   eax,eax
c0005f62:	74 4c                	je     c0005fb0 <f_stat+0x86>
c0005f64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f68:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f6e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f71:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f74:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f78:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f7c:	e8 88 ec ff ff       	call   c0004c09 <follow_path>
c0005f81:	89 c3                	mov    ebx,eax
c0005f83:	85 c0                	test   eax,eax
c0005f85:	75 1d                	jne    c0005fa4 <f_stat+0x7a>
c0005f87:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f8c:	78 11                	js     c0005f9f <f_stat+0x75>
c0005f8e:	85 ff                	test   edi,edi
c0005f90:	74 12                	je     c0005fa4 <f_stat+0x7a>
c0005f92:	89 fa                	mov    edx,edi
c0005f94:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f98:	e8 e0 e9 ff ff       	call   c000497d <get_fileinfo>
c0005f9d:	eb 05                	jmp    c0005fa4 <f_stat+0x7a>
c0005f9f:	bb 06 00 00 00       	mov    ebx,0x6
c0005fa4:	83 ec 0c             	sub    esp,0xc
c0005fa7:	56                   	push   esi
c0005fa8:	e8 9f 22 00 00       	call   c000824c <ff_memfree>
c0005fad:	83 c4 10             	add    esp,0x10
c0005fb0:	83 c4 50             	add    esp,0x50
c0005fb3:	89 d8                	mov    eax,ebx
c0005fb5:	5b                   	pop    ebx
c0005fb6:	5e                   	pop    esi
c0005fb7:	5f                   	pop    edi
c0005fb8:	c3                   	ret    

c0005fb9 <f_getfree>:
c0005fb9:	55                   	push   ebp
c0005fba:	31 c9                	xor    ecx,ecx
c0005fbc:	57                   	push   edi
c0005fbd:	56                   	push   esi
c0005fbe:	53                   	push   ebx
c0005fbf:	83 ec 5c             	sub    esp,0x5c
c0005fc2:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fca:	e8 c4 c4 ff ff       	call   c0002493 <mount_volume>
c0005fcf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fd3:	85 c0                	test   eax,eax
c0005fd5:	0f 85 9d 01 00 00    	jne    c0006178 <f_getfree+0x1bf>
c0005fdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fdf:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fe3:	89 02                	mov    DWORD PTR [edx],eax
c0005fe5:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005fe8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005feb:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005fee:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ff2:	39 f2                	cmp    edx,esi
c0005ff4:	77 0b                	ja     c0006001 <f_getfree+0x48>
c0005ff6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005ffa:	89 10                	mov    DWORD PTR [eax],edx
c0005ffc:	e9 77 01 00 00       	jmp    c0006178 <f_getfree+0x1bf>
c0006001:	8a 10                	mov    dl,BYTE PTR [eax]
c0006003:	80 fa 01             	cmp    dl,0x1
c0006006:	75 3a                	jne    c0006042 <f_getfree+0x89>
c0006008:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000600c:	be 02 00 00 00       	mov    esi,0x2
c0006011:	31 db                	xor    ebx,ebx
c0006013:	89 f2                	mov    edx,esi
c0006015:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006019:	e8 4b cd ff ff       	call   c0002d69 <get_fat>
c000601e:	83 f8 ff             	cmp    eax,0xffffffff
c0006021:	0f 84 28 01 00 00    	je     c000614f <f_getfree+0x196>
c0006027:	83 f8 01             	cmp    eax,0x1
c000602a:	0f 84 29 01 00 00    	je     c0006159 <f_getfree+0x1a0>
c0006030:	83 d3 00             	adc    ebx,0x0
c0006033:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006037:	46                   	inc    esi
c0006038:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000603b:	77 d6                	ja     c0006013 <f_getfree+0x5a>
c000603d:	e9 25 01 00 00       	jmp    c0006167 <f_getfree+0x1ae>
c0006042:	80 fa 04             	cmp    dl,0x4
c0006045:	0f 85 88 00 00 00    	jne    c00060d3 <f_getfree+0x11a>
c000604b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000604e:	31 ed                	xor    ebp,ebp
c0006050:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006053:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006057:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000605b:	31 db                	xor    ebx,ebx
c000605d:	85 ed                	test   ebp,ebp
c000605f:	75 3f                	jne    c00060a0 <f_getfree+0xe7>
c0006061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006065:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006069:	83 c0 01             	add    eax,0x1
c000606c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006070:	83 d2 00             	adc    edx,0x0
c0006073:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006077:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000607b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006083:	e8 59 c1 ff ff       	call   c00021e1 <move_window>
c0006088:	85 c0                	test   eax,eax
c000608a:	0f 85 d3 00 00 00    	jne    c0006163 <f_getfree+0x1aa>
c0006090:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006094:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000609c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060a4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060a7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060ab:	89 cf                	mov    edi,ecx
c00060ad:	85 f6                	test   esi,esi
c00060af:	74 12                	je     c00060c3 <f_getfree+0x10a>
c00060b1:	88 c1                	mov    cl,al
c00060b3:	83 e1 01             	and    ecx,0x1
c00060b6:	80 f9 01             	cmp    cl,0x1
c00060b9:	83 d3 00             	adc    ebx,0x0
c00060bc:	d0 e8                	shr    al,1
c00060be:	4e                   	dec    esi
c00060bf:	39 fe                	cmp    esi,edi
c00060c1:	75 ea                	jne    c00060ad <f_getfree+0xf4>
c00060c3:	45                   	inc    ebp
c00060c4:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060ca:	85 f6                	test   esi,esi
c00060cc:	75 8f                	jne    c000605d <f_getfree+0xa4>
c00060ce:	e9 94 00 00 00       	jmp    c0006167 <f_getfree+0x1ae>
c00060d3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060d6:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060d9:	31 f6                	xor    esi,esi
c00060db:	31 db                	xor    ebx,ebx
c00060dd:	85 f6                	test   esi,esi
c00060df:	75 1b                	jne    c00060fc <f_getfree+0x143>
c00060e1:	89 d7                	mov    edi,edx
c00060e3:	89 cd                	mov    ebp,ecx
c00060e5:	83 c7 01             	add    edi,0x1
c00060e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ec:	83 d5 00             	adc    ebp,0x0
c00060ef:	e8 ed c0 ff ff       	call   c00021e1 <move_window>
c00060f4:	85 c0                	test   eax,eax
c00060f6:	75 6b                	jne    c0006163 <f_getfree+0x1aa>
c00060f8:	89 fa                	mov    edx,edi
c00060fa:	89 e9                	mov    ecx,ebp
c00060fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006100:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006104:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006108:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000610b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000610f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006113:	75 11                	jne    c0006126 <f_getfree+0x16d>
c0006115:	e8 e9 b8 ff ff       	call   c0001a03 <ld_word>
c000611a:	66 83 f8 01          	cmp    ax,0x1
c000611e:	83 d3 00             	adc    ebx,0x0
c0006121:	83 c6 02             	add    esi,0x2
c0006124:	eb 13                	jmp    c0006139 <f_getfree+0x180>
c0006126:	e8 e5 b8 ff ff       	call   c0001a10 <ld_dword>
c000612b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006130:	83 f8 01             	cmp    eax,0x1
c0006133:	83 d3 00             	adc    ebx,0x0
c0006136:	83 c6 04             	add    esi,0x4
c0006139:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000613f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006143:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006147:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000614b:	75 90                	jne    c00060dd <f_getfree+0x124>
c000614d:	eb 18                	jmp    c0006167 <f_getfree+0x1ae>
c000614f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006157:	eb 0e                	jmp    c0006167 <f_getfree+0x1ae>
c0006159:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006161:	eb 04                	jmp    c0006167 <f_getfree+0x1ae>
c0006163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006167:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000616b:	89 18                	mov    DWORD PTR [eax],ebx
c000616d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006171:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006174:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000617c:	83 c4 5c             	add    esp,0x5c
c000617f:	5b                   	pop    ebx
c0006180:	5e                   	pop    esi
c0006181:	5f                   	pop    edi
c0006182:	5d                   	pop    ebp
c0006183:	c3                   	ret    

c0006184 <f_truncate>:
c0006184:	56                   	push   esi
c0006185:	53                   	push   ebx
c0006186:	83 ec 14             	sub    esp,0x14
c0006189:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000618d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006191:	89 d8                	mov    eax,ebx
c0006193:	e8 6e bf ff ff       	call   c0002106 <validate>
c0006198:	89 c6                	mov    esi,eax
c000619a:	85 c0                	test   eax,eax
c000619c:	0f 85 d2 00 00 00    	jne    c0006274 <f_truncate+0xf0>
c00061a2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061a6:	85 f6                	test   esi,esi
c00061a8:	0f 85 c6 00 00 00    	jne    c0006274 <f_truncate+0xf0>
c00061ae:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061b2:	0f 84 b7 00 00 00    	je     c000626f <f_truncate+0xeb>
c00061b8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061bb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061be:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061c1:	89 d1                	mov    ecx,edx
c00061c3:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061c6:	0f 83 a8 00 00 00    	jae    c0006274 <f_truncate+0xf0>
c00061cc:	09 c2                	or     edx,eax
c00061ce:	75 15                	jne    c00061e5 <f_truncate+0x61>
c00061d0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061d3:	31 c9                	xor    ecx,ecx
c00061d5:	89 d8                	mov    eax,ebx
c00061d7:	e8 7a d0 ff ff       	call   c0003256 <remove_chain>
c00061dc:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061e3:	eb 35                	jmp    c000621a <f_truncate+0x96>
c00061e5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061e8:	89 d8                	mov    eax,ebx
c00061ea:	e8 7a cb ff ff       	call   c0002d69 <get_fat>
c00061ef:	89 c2                	mov    edx,eax
c00061f1:	b8 01 00 00 00       	mov    eax,0x1
c00061f6:	83 fa ff             	cmp    edx,0xffffffff
c00061f9:	74 1f                	je     c000621a <f_truncate+0x96>
c00061fb:	b8 02 00 00 00       	mov    eax,0x2
c0006200:	83 fa 01             	cmp    edx,0x1
c0006203:	74 15                	je     c000621a <f_truncate+0x96>
c0006205:	31 c0                	xor    eax,eax
c0006207:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000620b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000620e:	76 0a                	jbe    c000621a <f_truncate+0x96>
c0006210:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006213:	89 d8                	mov    eax,ebx
c0006215:	e8 3c d0 ff ff       	call   c0003256 <remove_chain>
c000621a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000621d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006220:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006223:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006226:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006229:	83 ca 40             	or     edx,0x40
c000622c:	85 c0                	test   eax,eax
c000622e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006231:	75 35                	jne    c0006268 <f_truncate+0xe4>
c0006233:	84 d2                	test   dl,dl
c0006235:	79 3d                	jns    c0006274 <f_truncate+0xf0>
c0006237:	83 ec 0c             	sub    esp,0xc
c000623a:	8d 43 50             	lea    eax,[ebx+0x50]
c000623d:	6a 01                	push   0x1
c000623f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006242:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006245:	50                   	push   eax
c0006246:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000624a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000624e:	50                   	push   eax
c000624f:	e8 7a b7 ff ff       	call   c00019ce <disk_write>
c0006254:	83 c4 20             	add    esp,0x20
c0006257:	85 c0                	test   eax,eax
c0006259:	75 08                	jne    c0006263 <f_truncate+0xdf>
c000625b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000625f:	31 f6                	xor    esi,esi
c0006261:	eb 11                	jmp    c0006274 <f_truncate+0xf0>
c0006263:	b8 01 00 00 00       	mov    eax,0x1
c0006268:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000626b:	89 c6                	mov    esi,eax
c000626d:	eb 05                	jmp    c0006274 <f_truncate+0xf0>
c000626f:	be 07 00 00 00       	mov    esi,0x7
c0006274:	89 f0                	mov    eax,esi
c0006276:	83 c4 14             	add    esp,0x14
c0006279:	5b                   	pop    ebx
c000627a:	5e                   	pop    esi
c000627b:	c3                   	ret    

c000627c <f_unlink>:
c000627c:	56                   	push   esi
c000627d:	b9 02 00 00 00       	mov    ecx,0x2
c0006282:	53                   	push   ebx
c0006283:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006289:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000628d:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006294:	e8 fa c1 ff ff       	call   c0002493 <mount_volume>
c0006299:	85 c0                	test   eax,eax
c000629b:	0f 85 55 01 00 00    	jne    c00063f6 <f_unlink+0x17a>
c00062a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062a5:	83 ec 0c             	sub    esp,0xc
c00062a8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ac:	68 60 04 00 00       	push   0x460
c00062b1:	e8 80 1f 00 00       	call   c0008236 <ff_memalloc>
c00062b6:	83 c4 10             	add    esp,0x10
c00062b9:	89 c3                	mov    ebx,eax
c00062bb:	b8 11 00 00 00       	mov    eax,0x11
c00062c0:	85 db                	test   ebx,ebx
c00062c2:	0f 84 2e 01 00 00    	je     c00063f6 <f_unlink+0x17a>
c00062c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062cc:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062d2:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062d5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062d8:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062df:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062e3:	e8 21 e9 ff ff       	call   c0004c09 <follow_path>
c00062e8:	85 c0                	test   eax,eax
c00062ea:	0f 85 f2 00 00 00    	jne    c00063e2 <f_unlink+0x166>
c00062f0:	b8 06 00 00 00       	mov    eax,0x6
c00062f5:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062fd:	0f 88 df 00 00 00    	js     c00063e2 <f_unlink+0x166>
c0006303:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006308:	74 0a                	je     c0006314 <f_unlink+0x98>
c000630a:	b8 07 00 00 00       	mov    eax,0x7
c000630f:	e9 ce 00 00 00       	jmp    c00063e2 <f_unlink+0x166>
c0006314:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006318:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000631c:	8a 02                	mov    al,BYTE PTR [edx]
c000631e:	3c 04                	cmp    al,0x4
c0006320:	75 12                	jne    c0006334 <f_unlink+0xb8>
c0006322:	8d 42 10             	lea    eax,[edx+0x10]
c0006325:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006329:	e8 a1 e8 ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c000632e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006332:	eb 0e                	jmp    c0006342 <f_unlink+0xc6>
c0006334:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000633b:	e8 3e e8 ff ff       	call   c0004b7e <ld_clust.isra.0>
c0006340:	89 c6                	mov    esi,eax
c0006342:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006347:	75 12                	jne    c000635b <f_unlink+0xdf>
c0006349:	8d 44 24 48          	lea    eax,[esp+0x48]
c000634d:	e8 94 d6 ff ff       	call   c00039e6 <dir_remove>
c0006352:	85 c0                	test   eax,eax
c0006354:	74 6c                	je     c00063c2 <f_unlink+0x146>
c0006356:	e9 87 00 00 00       	jmp    c00063e2 <f_unlink+0x166>
c000635b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000635f:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006366:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000636d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006370:	75 21                	jne    c0006393 <f_unlink+0x117>
c0006372:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006376:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000637a:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006381:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006388:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000638c:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006393:	31 d2                	xor    edx,edx
c0006395:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000639c:	e8 be cb ff ff       	call   c0002f5f <dir_sdi>
c00063a1:	85 c0                	test   eax,eax
c00063a3:	75 3d                	jne    c00063e2 <f_unlink+0x166>
c00063a5:	31 d2                	xor    edx,edx
c00063a7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063ae:	e8 bc d3 ff ff       	call   c000376f <dir_read>
c00063b3:	85 c0                	test   eax,eax
c00063b5:	0f 84 4f ff ff ff    	je     c000630a <f_unlink+0x8e>
c00063bb:	83 f8 04             	cmp    eax,0x4
c00063be:	75 22                	jne    c00063e2 <f_unlink+0x166>
c00063c0:	eb 87                	jmp    c0006349 <f_unlink+0xcd>
c00063c2:	85 f6                	test   esi,esi
c00063c4:	75 0b                	jne    c00063d1 <f_unlink+0x155>
c00063c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063ca:	e8 3d df ff ff       	call   c000430c <sync_fs>
c00063cf:	eb 11                	jmp    c00063e2 <f_unlink+0x166>
c00063d1:	31 c9                	xor    ecx,ecx
c00063d3:	89 f2                	mov    edx,esi
c00063d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063d9:	e8 78 ce ff ff       	call   c0003256 <remove_chain>
c00063de:	85 c0                	test   eax,eax
c00063e0:	74 e4                	je     c00063c6 <f_unlink+0x14a>
c00063e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063e6:	83 ec 0c             	sub    esp,0xc
c00063e9:	53                   	push   ebx
c00063ea:	e8 5d 1e 00 00       	call   c000824c <ff_memfree>
c00063ef:	83 c4 10             	add    esp,0x10
c00063f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063f6:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063fc:	5b                   	pop    ebx
c00063fd:	5e                   	pop    esi
c00063fe:	c3                   	ret    

c00063ff <f_mkdir>:
c00063ff:	57                   	push   edi
c0006400:	b9 02 00 00 00       	mov    ecx,0x2
c0006405:	56                   	push   esi
c0006406:	53                   	push   ebx
c0006407:	83 c4 80             	add    esp,0xffffff80
c000640a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000640e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006415:	e8 79 c0 ff ff       	call   c0002493 <mount_volume>
c000641a:	89 c3                	mov    ebx,eax
c000641c:	85 c0                	test   eax,eax
c000641e:	0f 85 fe 01 00 00    	jne    c0006622 <f_mkdir+0x223>
c0006424:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006428:	bb 11 00 00 00       	mov    ebx,0x11
c000642d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006431:	83 ec 0c             	sub    esp,0xc
c0006434:	68 60 04 00 00       	push   0x460
c0006439:	e8 f8 1d 00 00       	call   c0008236 <ff_memalloc>
c000643e:	83 c4 10             	add    esp,0x10
c0006441:	89 c7                	mov    edi,eax
c0006443:	85 c0                	test   eax,eax
c0006445:	0f 84 d7 01 00 00    	je     c0006622 <f_mkdir+0x223>
c000644b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000644f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006455:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006458:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000645b:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006462:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006466:	e8 9e e7 ff ff       	call   c0004c09 <follow_path>
c000646b:	89 c3                	mov    ebx,eax
c000646d:	85 c0                	test   eax,eax
c000646f:	74 3e                	je     c00064af <f_mkdir+0xb0>
c0006471:	83 f8 04             	cmp    eax,0x4
c0006474:	75 3e                	jne    c00064b4 <f_mkdir+0xb5>
c0006476:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647a:	31 d2                	xor    edx,edx
c000647c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006480:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006484:	e8 ce cb ff ff       	call   c0003057 <create_chain>
c0006489:	89 c6                	mov    esi,eax
c000648b:	85 c0                	test   eax,eax
c000648d:	74 0c                	je     c000649b <f_mkdir+0x9c>
c000648f:	bb 02 00 00 00       	mov    ebx,0x2
c0006494:	83 f8 01             	cmp    eax,0x1
c0006497:	74 07                	je     c00064a0 <f_mkdir+0xa1>
c0006499:	eb 2a                	jmp    c00064c5 <f_mkdir+0xc6>
c000649b:	bb 07 00 00 00       	mov    ebx,0x7
c00064a0:	31 c9                	xor    ecx,ecx
c00064a2:	89 f2                	mov    edx,esi
c00064a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064a8:	e8 a9 cd ff ff       	call   c0003256 <remove_chain>
c00064ad:	eb 05                	jmp    c00064b4 <f_mkdir+0xb5>
c00064af:	bb 08 00 00 00       	mov    ebx,0x8
c00064b4:	83 ec 0c             	sub    esp,0xc
c00064b7:	57                   	push   edi
c00064b8:	e8 8f 1d 00 00       	call   c000824c <ff_memfree>
c00064bd:	83 c4 10             	add    esp,0x10
c00064c0:	e9 5d 01 00 00       	jmp    c0006622 <f_mkdir+0x223>
c00064c5:	bb 01 00 00 00       	mov    ebx,0x1
c00064ca:	83 f8 ff             	cmp    eax,0xffffffff
c00064cd:	74 d1                	je     c00064a0 <f_mkdir+0xa1>
c00064cf:	89 f2                	mov    edx,esi
c00064d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d5:	e8 c4 ce ff ff       	call   c000339e <dir_clear>
c00064da:	89 c3                	mov    ebx,eax
c00064dc:	85 c0                	test   eax,eax
c00064de:	75 c0                	jne    c00064a0 <f_mkdir+0xa1>
c00064e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e7:	74 69                	je     c0006552 <f_mkdir+0x153>
c00064e9:	b9 0b 00 00 00       	mov    ecx,0xb
c00064ee:	83 c0 54             	add    eax,0x54
c00064f1:	ba 20 00 00 00       	mov    edx,0x20
c00064f6:	e8 9c b5 ff ff       	call   c0001a97 <mem_set>
c00064fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0006504:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006508:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000650c:	83 c0 6a             	add    eax,0x6a
c000650f:	e8 65 b5 ff ff       	call   c0001a79 <st_dword>
c0006514:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006518:	89 f1                	mov    ecx,esi
c000651a:	8d 50 54             	lea    edx,[eax+0x54]
c000651d:	e8 85 e6 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	b9 20 00 00 00       	mov    ecx,0x20
c000652b:	8d 50 54             	lea    edx,[eax+0x54]
c000652e:	83 c0 74             	add    eax,0x74
c0006531:	e8 4c b5 ff ff       	call   c0001a82 <mem_cpy>
c0006536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000653e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006542:	8d 50 74             	lea    edx,[eax+0x74]
c0006545:	e8 5d e6 ff ff       	call   c0004ba7 <st_clust.isra.1>
c000654a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006552:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006556:	e8 2f db ff ff       	call   c000408a <dir_register>
c000655b:	89 c3                	mov    ebx,eax
c000655d:	85 c0                	test   eax,eax
c000655f:	0f 85 3b ff ff ff    	jne    c00064a0 <f_mkdir+0xa1>
c0006565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006569:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000656c:	75 74                	jne    c00065e2 <f_mkdir+0x1e3>
c000656e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 0c             	add    eax,0xc
c0006579:	e8 fb b4 ff ff       	call   c0001a79 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f2                	mov    edx,esi
c0006584:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006587:	83 c0 34             	add    eax,0x34
c000658a:	e8 ea b4 ff ff       	call   c0001a79 <st_dword>
c000658f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006593:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006597:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000659a:	c1 e2 09             	shl    edx,0x9
c000659d:	83 c0 38             	add    eax,0x38
c00065a0:	e8 d4 b4 ff ff       	call   c0001a79 <st_dword>
c00065a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065ad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b0:	c1 e2 09             	shl    edx,0x9
c00065b3:	83 c0 28             	add    eax,0x28
c00065b6:	e8 be b4 ff ff       	call   c0001a79 <st_dword>
c00065bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065bf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065c2:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c9:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065cd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065d1:	e8 8b d3 ff ff       	call   c0003961 <store_xdir>
c00065d6:	89 c3                	mov    ebx,eax
c00065d8:	85 c0                	test   eax,eax
c00065da:	0f 85 d4 fe ff ff    	jne    c00064b4 <f_mkdir+0xb5>
c00065e0:	eb 30                	jmp    c0006612 <f_mkdir+0x213>
c00065e2:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065e6:	ba 00 00 21 50       	mov    edx,0x50210000
c00065eb:	83 c0 16             	add    eax,0x16
c00065ee:	e8 86 b4 ff ff       	call   c0001a79 <st_dword>
c00065f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f7:	89 f1                	mov    ecx,esi
c00065f9:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065fd:	e8 a5 e5 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0006602:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006606:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000660a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000660e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006612:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006616:	e8 f1 dc ff ff       	call   c000430c <sync_fs>
c000661b:	89 c3                	mov    ebx,eax
c000661d:	e9 92 fe ff ff       	jmp    c00064b4 <f_mkdir+0xb5>
c0006622:	83 ec 80             	sub    esp,0xffffff80
c0006625:	89 d8                	mov    eax,ebx
c0006627:	5b                   	pop    ebx
c0006628:	5e                   	pop    esi
c0006629:	5f                   	pop    edi
c000662a:	c3                   	ret    

c000662b <f_rename>:
c000662b:	55                   	push   ebp
c000662c:	57                   	push   edi
c000662d:	56                   	push   esi
c000662e:	53                   	push   ebx
c000662f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006635:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000663c:	e8 a4 b9 ff ff       	call   c0001fe5 <get_ldnumber>
c0006641:	b9 02 00 00 00       	mov    ecx,0x2
c0006646:	8d 54 24 14          	lea    edx,[esp+0x14]
c000664a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006651:	e8 3d be ff ff       	call   c0002493 <mount_volume>
c0006656:	85 c0                	test   eax,eax
c0006658:	0f 85 b5 02 00 00    	jne    c0006913 <f_rename+0x2e8>
c000665e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006662:	83 ec 0c             	sub    esp,0xc
c0006665:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006669:	68 60 04 00 00       	push   0x460
c000666e:	e8 c3 1b 00 00       	call   c0008236 <ff_memalloc>
c0006673:	83 c4 10             	add    esp,0x10
c0006676:	89 c3                	mov    ebx,eax
c0006678:	b8 11 00 00 00       	mov    eax,0x11
c000667d:	85 db                	test   ebx,ebx
c000667f:	0f 84 8e 02 00 00    	je     c0006913 <f_rename+0x2e8>
c0006685:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006689:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000668f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006692:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006695:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000669c:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066a0:	e8 64 e5 ff ff       	call   c0004c09 <follow_path>
c00066a5:	85 c0                	test   eax,eax
c00066a7:	0f 85 52 02 00 00    	jne    c00068ff <f_rename+0x2d4>
c00066ad:	b8 06 00 00 00       	mov    eax,0x6
c00066b2:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066ba:	0f 85 3f 02 00 00    	jne    c00068ff <f_rename+0x2d4>
c00066c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c7:	0f 85 05 01 00 00    	jne    c00067d2 <f_rename+0x1a7>
c00066cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066d0:	b9 40 00 00 00       	mov    ecx,0x40
c00066d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066d9:	e8 a4 b3 ff ff       	call   c0001a82 <mem_cpy>
c00066de:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066e3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066e7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ee:	e8 8f b3 ff ff       	call   c0001a82 <mem_cpy>
c00066f3:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066fa:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006701:	e8 03 e5 ff ff       	call   c0004c09 <follow_path>
c0006706:	85 c0                	test   eax,eax
c0006708:	75 29                	jne    c0006733 <f_rename+0x108>
c000670a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000670e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006715:	74 0a                	je     c0006721 <f_rename+0xf6>
c0006717:	b8 08 00 00 00       	mov    eax,0x8
c000671c:	e9 de 01 00 00       	jmp    c00068ff <f_rename+0x2d4>
c0006721:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006728:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000672f:	75 e6                	jne    c0006717 <f_rename+0xec>
c0006731:	eb 09                	jmp    c000673c <f_rename+0x111>
c0006733:	83 f8 04             	cmp    eax,0x4
c0006736:	0f 85 c3 01 00 00    	jne    c00068ff <f_rename+0x2d4>
c000673c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006743:	e8 42 d9 ff ff       	call   c000408a <dir_register>
c0006748:	85 c0                	test   eax,eax
c000674a:	0f 85 af 01 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006750:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006754:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006757:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000675a:	89 c5                	mov    ebp,eax
c000675c:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000675f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006763:	8d 46 24             	lea    eax,[esi+0x24]
c0006766:	e8 98 b2 ff ff       	call   c0001a03 <ld_word>
c000676b:	b9 40 00 00 00       	mov    ecx,0x40
c0006770:	89 c7                	mov    edi,eax
c0006772:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006776:	89 f0                	mov    eax,esi
c0006778:	e8 05 b3 ff ff       	call   c0001a82 <mem_cpy>
c000677d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006781:	89 e9                	mov    ecx,ebp
c0006783:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006786:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006789:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000678d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006791:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006794:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006797:	0f b7 d7             	movzx  edx,di
c000679a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000679d:	83 c0 24             	add    eax,0x24
c00067a0:	e8 d0 b2 ff ff       	call   c0001a75 <st_word>
c00067a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067a9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ac:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067af:	a8 10                	test   al,0x10
c00067b1:	75 06                	jne    c00067b9 <f_rename+0x18e>
c00067b3:	83 c8 20             	or     eax,0x20
c00067b6:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067b9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067c0:	e8 9c d1 ff ff       	call   c0003961 <store_xdir>
c00067c5:	85 c0                	test   eax,eax
c00067c7:	0f 84 1c 01 00 00    	je     c00068e9 <f_rename+0x2be>
c00067cd:	e9 2d 01 00 00       	jmp    c00068ff <f_rename+0x2d4>
c00067d2:	b9 20 00 00 00       	mov    ecx,0x20
c00067d7:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067de:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067e2:	e8 9b b2 ff ff       	call   c0001a82 <mem_cpy>
c00067e7:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067ec:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067f0:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067f7:	e8 86 b2 ff ff       	call   c0001a82 <mem_cpy>
c00067fc:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006803:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000680a:	e8 fa e3 ff ff       	call   c0004c09 <follow_path>
c000680f:	85 c0                	test   eax,eax
c0006811:	75 27                	jne    c000683a <f_rename+0x20f>
c0006813:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006817:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000681e:	0f 85 f3 fe ff ff    	jne    c0006717 <f_rename+0xec>
c0006824:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000682b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006832:	0f 85 df fe ff ff    	jne    c0006717 <f_rename+0xec>
c0006838:	eb 09                	jmp    c0006843 <f_rename+0x218>
c000683a:	83 f8 04             	cmp    eax,0x4
c000683d:	0f 85 bc 00 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006843:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000684a:	e8 3b d8 ff ff       	call   c000408a <dir_register>
c000684f:	85 c0                	test   eax,eax
c0006851:	0f 85 a8 00 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006857:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000685e:	b9 13 00 00 00       	mov    ecx,0x13
c0006863:	8d 46 0d             	lea    eax,[esi+0xd]
c0006866:	8d 54 24 25          	lea    edx,[esp+0x25]
c000686a:	e8 13 b2 ff ff       	call   c0001a82 <mem_cpy>
c000686f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006873:	a8 10                	test   al,0x10
c0006875:	75 03                	jne    c000687a <f_rename+0x24f>
c0006877:	83 c8 20             	or     eax,0x20
c000687a:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000687d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006881:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006885:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006889:	74 5e                	je     c00068e9 <f_rename+0x2be>
c000688b:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006892:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006896:	74 51                	je     c00068e9 <f_rename+0x2be>
c0006898:	89 f2                	mov    edx,esi
c000689a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000689e:	8a 07                	mov    al,BYTE PTR [edi]
c00068a0:	e8 d9 e2 ff ff       	call   c0004b7e <ld_clust.isra.0>
c00068a5:	89 c2                	mov    edx,eax
c00068a7:	89 f8                	mov    eax,edi
c00068a9:	e8 ee b3 ff ff       	call   c0001c9c <clst2sect>
c00068ae:	89 c6                	mov    esi,eax
c00068b0:	89 d1                	mov    ecx,edx
c00068b2:	b8 02 00 00 00       	mov    eax,0x2
c00068b7:	09 f2                	or     edx,esi
c00068b9:	74 44                	je     c00068ff <f_rename+0x2d4>
c00068bb:	89 f2                	mov    edx,esi
c00068bd:	89 f8                	mov    eax,edi
c00068bf:	e8 1d b9 ff ff       	call   c00021e1 <move_window>
c00068c4:	85 c0                	test   eax,eax
c00068c6:	75 37                	jne    c00068ff <f_rename+0x2d4>
c00068c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068cc:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068d0:	75 17                	jne    c00068e9 <f_rename+0x2be>
c00068d2:	8d 50 74             	lea    edx,[eax+0x74]
c00068d5:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068dc:	e8 c6 e2 ff ff       	call   c0004ba7 <st_clust.isra.1>
c00068e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068e9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068ed:	e8 f4 d0 ff ff       	call   c00039e6 <dir_remove>
c00068f2:	85 c0                	test   eax,eax
c00068f4:	75 09                	jne    c00068ff <f_rename+0x2d4>
c00068f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068fa:	e8 0d da ff ff       	call   c000430c <sync_fs>
c00068ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006903:	83 ec 0c             	sub    esp,0xc
c0006906:	53                   	push   ebx
c0006907:	e8 40 19 00 00       	call   c000824c <ff_memfree>
c000690c:	83 c4 10             	add    esp,0x10
c000690f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006913:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006919:	5b                   	pop    ebx
c000691a:	5e                   	pop    esi
c000691b:	5f                   	pop    edi
c000691c:	5d                   	pop    ebp
c000691d:	c3                   	ret    

c000691e <f_chmod>:
c000691e:	57                   	push   edi
c000691f:	b9 02 00 00 00       	mov    ecx,0x2
c0006924:	56                   	push   esi
c0006925:	53                   	push   ebx
c0006926:	83 ec 60             	sub    esp,0x60
c0006929:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000692d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006931:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006935:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006939:	e8 55 bb ff ff       	call   c0002493 <mount_volume>
c000693e:	85 c0                	test   eax,eax
c0006940:	0f 85 af 00 00 00    	jne    c00069f5 <f_chmod+0xd7>
c0006946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000694a:	83 ec 0c             	sub    esp,0xc
c000694d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006951:	68 60 04 00 00       	push   0x460
c0006956:	e8 db 18 00 00       	call   c0008236 <ff_memalloc>
c000695b:	83 c4 10             	add    esp,0x10
c000695e:	89 c6                	mov    esi,eax
c0006960:	b8 11 00 00 00       	mov    eax,0x11
c0006965:	85 f6                	test   esi,esi
c0006967:	0f 84 88 00 00 00    	je     c00069f5 <f_chmod+0xd7>
c000696d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006971:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006977:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000697a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000697d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006981:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006985:	e8 7f e2 ff ff       	call   c0004c09 <follow_path>
c000698a:	85 c0                	test   eax,eax
c000698c:	75 53                	jne    c00069e1 <f_chmod+0xc3>
c000698e:	b8 06 00 00 00       	mov    eax,0x6
c0006993:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006998:	75 47                	jne    c00069e1 <f_chmod+0xc3>
c000699a:	89 f9                	mov    ecx,edi
c000699c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069a0:	83 e1 27             	and    ecx,0x27
c00069a3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069a6:	75 1d                	jne    c00069c5 <f_chmod+0xa7>
c00069a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ab:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069ae:	21 cb                	and    ebx,ecx
c00069b0:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069b3:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ba:	e8 a2 cf ff ff       	call   c0003961 <store_xdir>
c00069bf:	85 c0                	test   eax,eax
c00069c1:	75 1e                	jne    c00069e1 <f_chmod+0xc3>
c00069c3:	eb 13                	jmp    c00069d8 <f_chmod+0xba>
c00069c5:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069c9:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069cc:	21 cb                	and    ebx,ecx
c00069ce:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069d1:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069d4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069dc:	e8 2b d9 ff ff       	call   c000430c <sync_fs>
c00069e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069e5:	83 ec 0c             	sub    esp,0xc
c00069e8:	56                   	push   esi
c00069e9:	e8 5e 18 00 00       	call   c000824c <ff_memfree>
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069f5:	83 c4 60             	add    esp,0x60
c00069f8:	5b                   	pop    ebx
c00069f9:	5e                   	pop    esi
c00069fa:	5f                   	pop    edi
c00069fb:	c3                   	ret    

c00069fc <f_utime>:
c00069fc:	56                   	push   esi
c00069fd:	b9 02 00 00 00       	mov    ecx,0x2
c0006a02:	53                   	push   ebx
c0006a03:	83 ec 64             	sub    esp,0x64
c0006a06:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a0a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a0e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a12:	e8 7c ba ff ff       	call   c0002493 <mount_volume>
c0006a17:	85 c0                	test   eax,eax
c0006a19:	0f 85 b5 00 00 00    	jne    c0006ad4 <f_utime+0xd8>
c0006a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a23:	83 ec 0c             	sub    esp,0xc
c0006a26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a2a:	68 60 04 00 00       	push   0x460
c0006a2f:	e8 02 18 00 00       	call   c0008236 <ff_memalloc>
c0006a34:	83 c4 10             	add    esp,0x10
c0006a37:	89 c3                	mov    ebx,eax
c0006a39:	b8 11 00 00 00       	mov    eax,0x11
c0006a3e:	85 db                	test   ebx,ebx
c0006a40:	0f 84 8e 00 00 00    	je     c0006ad4 <f_utime+0xd8>
c0006a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a4a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a50:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a53:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a56:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a5e:	e8 a6 e1 ff ff       	call   c0004c09 <follow_path>
c0006a63:	85 c0                	test   eax,eax
c0006a65:	75 59                	jne    c0006ac0 <f_utime+0xc4>
c0006a67:	b8 06 00 00 00       	mov    eax,0x6
c0006a6c:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a71:	75 4d                	jne    c0006ac0 <f_utime+0xc4>
c0006a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a77:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a7b:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a7f:	c1 e2 10             	shl    edx,0x10
c0006a82:	09 ca                	or     edx,ecx
c0006a84:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a87:	75 1a                	jne    c0006aa3 <f_utime+0xa7>
c0006a89:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a8c:	83 c0 0c             	add    eax,0xc
c0006a8f:	e8 e5 af ff ff       	call   c0001a79 <st_dword>
c0006a94:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a98:	e8 c4 ce ff ff       	call   c0003961 <store_xdir>
c0006a9d:	85 c0                	test   eax,eax
c0006a9f:	75 1f                	jne    c0006ac0 <f_utime+0xc4>
c0006aa1:	eb 14                	jmp    c0006ab7 <f_utime+0xbb>
c0006aa3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aa7:	83 c0 16             	add    eax,0x16
c0006aaa:	e8 ca af ff ff       	call   c0001a79 <st_dword>
c0006aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abb:	e8 4c d8 ff ff       	call   c000430c <sync_fs>
c0006ac0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ac4:	83 ec 0c             	sub    esp,0xc
c0006ac7:	53                   	push   ebx
c0006ac8:	e8 7f 17 00 00       	call   c000824c <ff_memfree>
c0006acd:	83 c4 10             	add    esp,0x10
c0006ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ad4:	83 c4 64             	add    esp,0x64
c0006ad7:	5b                   	pop    ebx
c0006ad8:	5e                   	pop    esi
c0006ad9:	c3                   	ret    

c0006ada <f_getlabel>:
c0006ada:	55                   	push   ebp
c0006adb:	31 c9                	xor    ecx,ecx
c0006add:	57                   	push   edi
c0006ade:	56                   	push   esi
c0006adf:	53                   	push   ebx
c0006ae0:	83 ec 6c             	sub    esp,0x6c
c0006ae3:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ae7:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006aee:	e8 a0 b9 ff ff       	call   c0002493 <mount_volume>
c0006af3:	89 c6                	mov    esi,eax
c0006af5:	85 c0                	test   eax,eax
c0006af7:	0f 85 c1 01 00 00    	jne    c0006cbe <f_getlabel+0x1e4>
c0006afd:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b05:	0f 84 5f 01 00 00    	je     c0006c6a <f_getlabel+0x190>
c0006b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b0f:	31 d2                	xor    edx,edx
c0006b11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b15:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b1d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b21:	e8 39 c4 ff ff       	call   c0002f5f <dir_sdi>
c0006b26:	85 c0                	test   eax,eax
c0006b28:	0f 85 2d 01 00 00    	jne    c0006c5b <f_getlabel+0x181>
c0006b2e:	ba 01 00 00 00       	mov    edx,0x1
c0006b33:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b37:	e8 33 cc ff ff       	call   c000376f <dir_read>
c0006b3c:	85 c0                	test   eax,eax
c0006b3e:	0f 85 17 01 00 00    	jne    c0006c5b <f_getlabel+0x181>
c0006b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b4b:	74 09                	je     c0006b56 <f_getlabel+0x7c>
c0006b4d:	31 db                	xor    ebx,ebx
c0006b4f:	31 c9                	xor    ecx,ecx
c0006b51:	e9 c8 00 00 00       	jmp    c0006c1e <f_getlabel+0x144>
c0006b56:	31 ed                	xor    ebp,ebp
c0006b58:	31 db                	xor    ebx,ebx
c0006b5a:	31 ff                	xor    edi,edi
c0006b5c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b64:	39 fa                	cmp    edx,edi
c0006b66:	76 4b                	jbe    c0006bb3 <f_getlabel+0xd9>
c0006b68:	47                   	inc    edi
c0006b69:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b6c:	01 d0                	add    eax,edx
c0006b6e:	e8 90 ae ff ff       	call   c0001a03 <ld_word>
c0006b73:	66 85 ed             	test   bp,bp
c0006b76:	75 0d                	jne    c0006b85 <f_getlabel+0xab>
c0006b78:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b7e:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b83:	76 28                	jbe    c0006bad <f_getlabel+0xd3>
c0006b85:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8c:	89 e9                	mov    ecx,ebp
c0006b8e:	01 da                	add    edx,ebx
c0006b90:	c1 e1 10             	shl    ecx,0x10
c0006b93:	0f b7 c0             	movzx  eax,ax
c0006b96:	09 c8                	or     eax,ecx
c0006b98:	b9 04 00 00 00       	mov    ecx,0x4
c0006b9d:	e8 01 b0 ff ff       	call   c0001ba3 <put_utf>
c0006ba2:	84 c0                	test   al,al
c0006ba4:	74 0b                	je     c0006bb1 <f_getlabel+0xd7>
c0006ba6:	0f b6 c0             	movzx  eax,al
c0006ba9:	01 c3                	add    ebx,eax
c0006bab:	31 c0                	xor    eax,eax
c0006bad:	89 c5                	mov    ebp,eax
c0006baf:	eb ab                	jmp    c0006b5c <f_getlabel+0x82>
c0006bb1:	31 db                	xor    ebx,ebx
c0006bb3:	66 85 ed             	test   bp,bp
c0006bb6:	74 02                	je     c0006bba <f_getlabel+0xe0>
c0006bb8:	31 db                	xor    ebx,ebx
c0006bba:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bc1:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bc5:	e9 a0 00 00 00       	jmp    c0006c6a <f_getlabel+0x190>
c0006bca:	83 ff 0b             	cmp    edi,0xb
c0006bcd:	74 11                	je     c0006be0 <f_getlabel+0x106>
c0006bcf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bd8:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bdb:	c1 e0 08             	shl    eax,0x8
c0006bde:	09 c2                	or     edx,eax
c0006be0:	0f b7 d2             	movzx  edx,dx
c0006be3:	50                   	push   eax
c0006be4:	50                   	push   eax
c0006be5:	68 b5 01 00 00       	push   0x1b5
c0006bea:	52                   	push   edx
c0006beb:	e8 03 17 00 00       	call   c00082f3 <ff_oem2uni>
c0006bf0:	83 c4 10             	add    esp,0x10
c0006bf3:	66 85 c0             	test   ax,ax
c0006bf6:	74 46                	je     c0006c3e <f_getlabel+0x164>
c0006bf8:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bff:	0f b7 c0             	movzx  eax,ax
c0006c02:	01 da                	add    edx,ebx
c0006c04:	b9 04 00 00 00       	mov    ecx,0x4
c0006c09:	e8 95 af ff ff       	call   c0001ba3 <put_utf>
c0006c0e:	84 c0                	test   al,al
c0006c10:	74 2c                	je     c0006c3e <f_getlabel+0x164>
c0006c12:	0f b6 c0             	movzx  eax,al
c0006c15:	01 c3                	add    ebx,eax
c0006c17:	83 ff 0b             	cmp    edi,0xb
c0006c1a:	74 24                	je     c0006c40 <f_getlabel+0x166>
c0006c1c:	89 f9                	mov    ecx,edi
c0006c1e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c22:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c25:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c2a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c33:	e8 9f ae ff ff       	call   c0001ad7 <dbc_1st>
c0006c38:	85 c0                	test   eax,eax
c0006c3a:	74 a4                	je     c0006be0 <f_getlabel+0x106>
c0006c3c:	eb 8c                	jmp    c0006bca <f_getlabel+0xf0>
c0006c3e:	31 db                	xor    ebx,ebx
c0006c40:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c47:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c4a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c51:	74 17                	je     c0006c6a <f_getlabel+0x190>
c0006c53:	4b                   	dec    ebx
c0006c54:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c57:	74 ee                	je     c0006c47 <f_getlabel+0x16d>
c0006c59:	eb 0f                	jmp    c0006c6a <f_getlabel+0x190>
c0006c5b:	83 f8 04             	cmp    eax,0x4
c0006c5e:	75 5c                	jne    c0006cbc <f_getlabel+0x1e2>
c0006c60:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c67:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c6a:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c72:	74 4a                	je     c0006cbe <f_getlabel+0x1e4>
c0006c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c78:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c7b:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c7e:	e8 5e b5 ff ff       	call   c00021e1 <move_window>
c0006c83:	89 c6                	mov    esi,eax
c0006c85:	85 c0                	test   eax,eax
c0006c87:	75 35                	jne    c0006cbe <f_getlabel+0x1e4>
c0006c89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c8d:	b8 43 00 00 00       	mov    eax,0x43
c0006c92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c94:	80 f9 03             	cmp    cl,0x3
c0006c97:	74 0f                	je     c0006ca8 <f_getlabel+0x1ce>
c0006c99:	31 c0                	xor    eax,eax
c0006c9b:	80 f9 04             	cmp    cl,0x4
c0006c9e:	0f 94 c0             	sete   al
c0006ca1:	48                   	dec    eax
c0006ca2:	83 e0 c3             	and    eax,0xffffffc3
c0006ca5:	83 c0 64             	add    eax,0x64
c0006ca8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cac:	e8 5f ad ff ff       	call   c0001a10 <ld_dword>
c0006cb1:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cb8:	89 07                	mov    DWORD PTR [edi],eax
c0006cba:	eb 02                	jmp    c0006cbe <f_getlabel+0x1e4>
c0006cbc:	89 c6                	mov    esi,eax
c0006cbe:	83 c4 6c             	add    esp,0x6c
c0006cc1:	89 f0                	mov    eax,esi
c0006cc3:	5b                   	pop    ebx
c0006cc4:	5e                   	pop    esi
c0006cc5:	5f                   	pop    edi
c0006cc6:	5d                   	pop    ebp
c0006cc7:	c3                   	ret    

c0006cc8 <f_setlabel>:
c0006cc8:	56                   	push   esi
c0006cc9:	b9 02 00 00 00       	mov    ecx,0x2
c0006cce:	53                   	push   ebx
c0006ccf:	83 ec 74             	sub    esp,0x74
c0006cd2:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006cd6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cdd:	e8 b1 b7 ff ff       	call   c0002493 <mount_volume>
c0006ce2:	89 c6                	mov    esi,eax
c0006ce4:	85 c0                	test   eax,eax
c0006ce6:	0f 85 41 02 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006cec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cf0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cf3:	0f 85 8e 00 00 00    	jne    c0006d87 <f_setlabel+0xbf>
c0006cf9:	b9 16 00 00 00       	mov    ecx,0x16
c0006cfe:	31 d2                	xor    edx,edx
c0006d00:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d04:	31 db                	xor    ebx,ebx
c0006d06:	e8 8c ad ff ff       	call   c0001a97 <mem_set>
c0006d0b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d12:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d15:	0f 86 0a 01 00 00    	jbe    c0006e25 <f_setlabel+0x15d>
c0006d1b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d22:	e8 b6 ad ff ff       	call   c0001add <tchar2uni>
c0006d27:	89 c6                	mov    esi,eax
c0006d29:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d2e:	76 2a                	jbe    c0006d5a <f_setlabel+0x92>
c0006d30:	83 f8 ff             	cmp    eax,0xffffffff
c0006d33:	74 05                	je     c0006d3a <f_setlabel+0x72>
c0006d35:	83 fb 09             	cmp    ebx,0x9
c0006d38:	76 0a                	jbe    c0006d44 <f_setlabel+0x7c>
c0006d3a:	be 06 00 00 00       	mov    esi,0x6
c0006d3f:	e9 e9 01 00 00       	jmp    c0006f2d <f_setlabel+0x265>
c0006d44:	89 c2                	mov    edx,eax
c0006d46:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d4a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d4d:	c1 ea 10             	shr    edx,0x10
c0006d50:	01 c8                	add    eax,ecx
c0006d52:	43                   	inc    ebx
c0006d53:	e8 1d ad ff ff       	call   c0001a75 <st_word>
c0006d58:	eb 04                	jmp    c0006d5e <f_setlabel+0x96>
c0006d5a:	85 c0                	test   eax,eax
c0006d5c:	74 dc                	je     c0006d3a <f_setlabel+0x72>
c0006d5e:	89 f2                	mov    edx,esi
c0006d60:	b8 57 5d 02 c0       	mov    eax,0xc0025d57
c0006d65:	e8 5b ad ff ff       	call   c0001ac5 <chk_chr>
c0006d6a:	85 c0                	test   eax,eax
c0006d6c:	75 cc                	jne    c0006d3a <f_setlabel+0x72>
c0006d6e:	83 fb 0a             	cmp    ebx,0xa
c0006d71:	77 c7                	ja     c0006d3a <f_setlabel+0x72>
c0006d73:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d76:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d7a:	0f b7 d6             	movzx  edx,si
c0006d7d:	01 c8                	add    eax,ecx
c0006d7f:	43                   	inc    ebx
c0006d80:	e8 f0 ac ff ff       	call   c0001a75 <st_word>
c0006d85:	eb 84                	jmp    c0006d0b <f_setlabel+0x43>
c0006d87:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d8c:	ba 20 00 00 00       	mov    edx,0x20
c0006d91:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d95:	31 db                	xor    ebx,ebx
c0006d97:	e8 fb ac ff ff       	call   c0001a97 <mem_set>
c0006d9c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006da3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006da6:	76 60                	jbe    c0006e08 <f_setlabel+0x140>
c0006da8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006daf:	e8 29 ad ff ff       	call   c0001add <tchar2uni>
c0006db4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db9:	0f 87 7b ff ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006dbf:	83 ec 0c             	sub    esp,0xc
c0006dc2:	50                   	push   eax
c0006dc3:	e8 97 15 00 00       	call   c000835f <ff_wtoupper>
c0006dc8:	5a                   	pop    edx
c0006dc9:	59                   	pop    ecx
c0006dca:	68 b5 01 00 00       	push   0x1b5
c0006dcf:	50                   	push   eax
c0006dd0:	e8 8e 14 00 00       	call   c0008263 <ff_uni2oem>
c0006dd5:	83 c4 10             	add    esp,0x10
c0006dd8:	89 c6                	mov    esi,eax
c0006dda:	66 85 c0             	test   ax,ax
c0006ddd:	0f 84 57 ff ff ff    	je     c0006d3a <f_setlabel+0x72>
c0006de3:	0f b7 d0             	movzx  edx,ax
c0006de6:	b8 50 5d 02 c0       	mov    eax,0xc0025d50
c0006deb:	e8 d5 ac ff ff       	call   c0001ac5 <chk_chr>
c0006df0:	85 c0                	test   eax,eax
c0006df2:	0f 85 42 ff ff ff    	jne    c0006d3a <f_setlabel+0x72>
c0006df8:	66 81 fe ff 00       	cmp    si,0xff
c0006dfd:	0f 87 14 01 00 00    	ja     c0006f17 <f_setlabel+0x24f>
c0006e03:	e9 fa 00 00 00       	jmp    c0006f02 <f_setlabel+0x23a>
c0006e08:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e0d:	0f 84 27 ff ff ff    	je     c0006d3a <f_setlabel+0x72>
c0006e13:	85 db                	test   ebx,ebx
c0006e15:	74 0e                	je     c0006e25 <f_setlabel+0x15d>
c0006e17:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e1a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e1f:	75 04                	jne    c0006e25 <f_setlabel+0x15d>
c0006e21:	89 c3                	mov    ebx,eax
c0006e23:	eb ee                	jmp    c0006e13 <f_setlabel+0x14b>
c0006e25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e29:	31 d2                	xor    edx,edx
c0006e2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e2f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e37:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e3b:	e8 1f c1 ff ff       	call   c0002f5f <dir_sdi>
c0006e40:	89 c6                	mov    esi,eax
c0006e42:	85 c0                	test   eax,eax
c0006e44:	0f 85 e3 00 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006e4a:	ba 01 00 00 00       	mov    edx,0x1
c0006e4f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e53:	e8 17 c9 ff ff       	call   c000376f <dir_read>
c0006e58:	85 c0                	test   eax,eax
c0006e5a:	75 21                	jne    c0006e7d <f_setlabel+0x1b5>
c0006e5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e60:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e64:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e67:	74 5d                	je     c0006ec6 <f_setlabel+0x1fe>
c0006e69:	85 db                	test   ebx,ebx
c0006e6b:	74 0b                	je     c0006e78 <f_setlabel+0x1b0>
c0006e6d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e72:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e76:	eb 70                	jmp    c0006ee8 <f_setlabel+0x220>
c0006e78:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e7b:	eb 70                	jmp    c0006eed <f_setlabel+0x225>
c0006e7d:	83 f8 04             	cmp    eax,0x4
c0006e80:	75 7c                	jne    c0006efe <f_setlabel+0x236>
c0006e82:	85 db                	test   ebx,ebx
c0006e84:	0f 84 a3 00 00 00    	je     c0006f2d <f_setlabel+0x265>
c0006e8a:	ba 01 00 00 00       	mov    edx,0x1
c0006e8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e93:	e8 51 ca ff ff       	call   c00038e9 <dir_alloc>
c0006e98:	89 c6                	mov    esi,eax
c0006e9a:	85 c0                	test   eax,eax
c0006e9c:	0f 85 8b 00 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006ea2:	31 d2                	xor    edx,edx
c0006ea4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea8:	b9 20 00 00 00       	mov    ecx,0x20
c0006ead:	e8 e5 ab ff ff       	call   c0001a97 <mem_set>
c0006eb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eb6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebd:	75 18                	jne    c0006ed7 <f_setlabel+0x20f>
c0006ebf:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ec2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ec6:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec9:	b9 16 00 00 00       	mov    ecx,0x16
c0006ece:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed2:	83 c0 02             	add    eax,0x2
c0006ed5:	eb 9b                	jmp    c0006e72 <f_setlabel+0x1aa>
c0006ed7:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006edb:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ee4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee8:	e8 95 ab ff ff       	call   c0001a82 <mem_cpy>
c0006eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ef5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef9:	e8 0e d4 ff ff       	call   c000430c <sync_fs>
c0006efe:	89 c6                	mov    esi,eax
c0006f00:	eb 2b                	jmp    c0006f2d <f_setlabel+0x265>
c0006f02:	83 fb 0a             	cmp    ebx,0xa
c0006f05:	0f 87 2f fe ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006f0b:	89 f0                	mov    eax,esi
c0006f0d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f11:	43                   	inc    ebx
c0006f12:	e9 85 fe ff ff       	jmp    c0006d9c <f_setlabel+0xd4>
c0006f17:	83 fb 09             	cmp    ebx,0x9
c0006f1a:	0f 87 1a fe ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006f20:	89 f0                	mov    eax,esi
c0006f22:	66 c1 e8 08          	shr    ax,0x8
c0006f26:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f2a:	43                   	inc    ebx
c0006f2b:	eb de                	jmp    c0006f0b <f_setlabel+0x243>
c0006f2d:	89 f0                	mov    eax,esi
c0006f2f:	83 c4 74             	add    esp,0x74
c0006f32:	5b                   	pop    ebx
c0006f33:	5e                   	pop    esi
c0006f34:	c3                   	ret    

c0006f35 <f_forward>:
c0006f35:	55                   	push   ebp
c0006f36:	57                   	push   edi
c0006f37:	56                   	push   esi
c0006f38:	53                   	push   ebx
c0006f39:	83 ec 2c             	sub    esp,0x2c
c0006f3c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f40:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f44:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f4a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f4e:	89 d8                	mov    eax,ebx
c0006f50:	e8 b1 b1 ff ff       	call   c0002106 <validate>
c0006f55:	89 c5                	mov    ebp,eax
c0006f57:	85 c0                	test   eax,eax
c0006f59:	0f 85 aa 01 00 00    	jne    c0007109 <f_forward+0x1d4>
c0006f5f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f63:	85 ed                	test   ebp,ebp
c0006f65:	0f 85 9e 01 00 00    	jne    c0007109 <f_forward+0x1d4>
c0006f6b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f6f:	0f 84 8f 01 00 00    	je     c0007104 <f_forward+0x1cf>
c0006f75:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f78:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f7b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f7e:	bf 00 00 00 00       	mov    edi,0x0
c0006f83:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f86:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f8a:	89 d1                	mov    ecx,edx
c0006f8c:	19 f9                	sbb    ecx,edi
c0006f8e:	0f 83 cf 00 00 00    	jae    c0007063 <f_forward+0x12e>
c0006f94:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f98:	e9 c6 00 00 00       	jmp    c0007063 <f_forward+0x12e>
c0006f9d:	50                   	push   eax
c0006f9e:	50                   	push   eax
c0006f9f:	6a 00                	push   0x0
c0006fa1:	6a 00                	push   0x0
c0006fa3:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa7:	83 c4 10             	add    esp,0x10
c0006faa:	85 c0                	test   eax,eax
c0006fac:	0f 84 57 01 00 00    	je     c0007109 <f_forward+0x1d4>
c0006fb2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fb9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fbc:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fc0:	89 d7                	mov    edi,edx
c0006fc2:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fc5:	89 c6                	mov    esi,eax
c0006fc7:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fcb:	21 ce                	and    esi,ecx
c0006fcd:	89 c1                	mov    ecx,eax
c0006fcf:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fd5:	0f 84 98 00 00 00    	je     c0007073 <f_forward+0x13e>
c0006fdb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fdf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fe2:	89 c8                	mov    eax,ecx
c0006fe4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe8:	e8 af ac ff ff       	call   c0001c9c <clst2sect>
c0006fed:	89 d7                	mov    edi,edx
c0006fef:	09 c7                	or     edi,eax
c0006ff1:	0f 84 9e 00 00 00    	je     c0007095 <f_forward+0x160>
c0006ff7:	31 ff                	xor    edi,edi
c0006ff9:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ffc:	01 c6                	add    esi,eax
c0006ffe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007002:	11 d7                	adc    edi,edx
c0007004:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007007:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000700a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000700e:	39 fa                	cmp    edx,edi
c0007010:	0f 85 a2 00 00 00    	jne    c00070b8 <f_forward+0x183>
c0007016:	39 f0                	cmp    eax,esi
c0007018:	0f 85 9a 00 00 00    	jne    c00070b8 <f_forward+0x183>
c000701e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007021:	ba 00 02 00 00       	mov    edx,0x200
c0007026:	25 ff 01 00 00       	and    eax,0x1ff
c000702b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000702f:	29 c2                	sub    edx,eax
c0007031:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007034:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007037:	39 d1                	cmp    ecx,edx
c0007039:	76 02                	jbe    c000703d <f_forward+0x108>
c000703b:	89 d1                	mov    ecx,edx
c000703d:	8d 73 50             	lea    esi,[ebx+0x50]
c0007040:	52                   	push   edx
c0007041:	01 c6                	add    esi,eax
c0007043:	52                   	push   edx
c0007044:	51                   	push   ecx
c0007045:	56                   	push   esi
c0007046:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000704a:	83 c4 10             	add    esp,0x10
c000704d:	85 c0                	test   eax,eax
c000704f:	74 44                	je     c0007095 <f_forward+0x160>
c0007051:	31 ff                	xor    edi,edi
c0007053:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007056:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007059:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000705d:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007061:	01 07                	add    DWORD PTR [edi],eax
c0007063:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007068:	0f 85 2f ff ff ff    	jne    c0006f9d <f_forward+0x68>
c000706e:	e9 96 00 00 00       	jmp    c0007109 <f_forward+0x1d4>
c0007073:	85 f6                	test   esi,esi
c0007075:	0f 85 60 ff ff ff    	jne    c0006fdb <f_forward+0xa6>
c000707b:	89 d7                	mov    edi,edx
c000707d:	09 c7                	or     edi,eax
c000707f:	75 05                	jne    c0007086 <f_forward+0x151>
c0007081:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007084:	eb 0a                	jmp    c0007090 <f_forward+0x15b>
c0007086:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007089:	89 d8                	mov    eax,ebx
c000708b:	e8 d9 bc ff ff       	call   c0002d69 <get_fat>
c0007090:	83 f8 01             	cmp    eax,0x1
c0007093:	77 0b                	ja     c00070a0 <f_forward+0x16b>
c0007095:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007099:	bd 02 00 00 00       	mov    ebp,0x2
c000709e:	eb 69                	jmp    c0007109 <f_forward+0x1d4>
c00070a0:	83 f8 ff             	cmp    eax,0xffffffff
c00070a3:	75 0b                	jne    c00070b0 <f_forward+0x17b>
c00070a5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a9:	bd 01 00 00 00       	mov    ebp,0x1
c00070ae:	eb 59                	jmp    c0007109 <f_forward+0x1d4>
c00070b0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070b3:	e9 23 ff ff ff       	jmp    c0006fdb <f_forward+0xa6>
c00070b8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070bc:	79 20                	jns    c00070de <f_forward+0x1a9>
c00070be:	83 ec 0c             	sub    esp,0xc
c00070c1:	6a 01                	push   0x1
c00070c3:	52                   	push   edx
c00070c4:	50                   	push   eax
c00070c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070cd:	50                   	push   eax
c00070ce:	e8 fb a8 ff ff       	call   c00019ce <disk_write>
c00070d3:	83 c4 20             	add    esp,0x20
c00070d6:	85 c0                	test   eax,eax
c00070d8:	75 cb                	jne    c00070a5 <f_forward+0x170>
c00070da:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070de:	83 ec 0c             	sub    esp,0xc
c00070e1:	6a 01                	push   0x1
c00070e3:	57                   	push   edi
c00070e4:	56                   	push   esi
c00070e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070ed:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070f1:	50                   	push   eax
c00070f2:	e8 c1 a8 ff ff       	call   c00019b8 <disk_read>
c00070f7:	83 c4 20             	add    esp,0x20
c00070fa:	85 c0                	test   eax,eax
c00070fc:	0f 84 1c ff ff ff    	je     c000701e <f_forward+0xe9>
c0007102:	eb a1                	jmp    c00070a5 <f_forward+0x170>
c0007104:	bd 07 00 00 00       	mov    ebp,0x7
c0007109:	83 c4 2c             	add    esp,0x2c
c000710c:	89 e8                	mov    eax,ebp
c000710e:	5b                   	pop    ebx
c000710f:	5e                   	pop    esi
c0007110:	5f                   	pop    edi
c0007111:	5d                   	pop    ebp
c0007112:	c3                   	ret    

c0007113 <f_mkfs>:
c0007113:	55                   	push   ebp
c0007114:	57                   	push   edi
c0007115:	56                   	push   esi
c0007116:	53                   	push   ebx
c0007117:	bb 0b 00 00 00       	mov    ebx,0xb
c000711c:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007122:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007129:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007130:	e8 b0 ae ff ff       	call   c0001fe5 <get_ldnumber>
c0007135:	85 c0                	test   eax,eax
c0007137:	0f 88 ec 10 00 00    	js     c0008229 <f_mkfs+0x1116>
c000713d:	8b 14 85 00 a4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5c00]
c0007144:	85 d2                	test   edx,edx
c0007146:	74 03                	je     c000714b <f_mkfs+0x38>
c0007148:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000714b:	85 f6                	test   esi,esi
c000714d:	75 05                	jne    c0007154 <f_mkfs+0x41>
c000714f:	be 40 5d 02 c0       	mov    esi,0xc0025d40
c0007154:	83 ec 0c             	sub    esp,0xc
c0007157:	0f b6 c0             	movzx  eax,al
c000715a:	bb 03 00 00 00       	mov    ebx,0x3
c000715f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007163:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007167:	e8 49 a8 ff ff       	call   c00019b5 <disk_initialize>
c000716c:	83 c4 10             	add    esp,0x10
c000716f:	a8 01                	test   al,0x1
c0007171:	0f 85 b2 10 00 00    	jne    c0008229 <f_mkfs+0x1116>
c0007177:	bb 0a 00 00 00       	mov    ebx,0xa
c000717c:	a8 04                	test   al,0x4
c000717e:	0f 85 a5 10 00 00    	jne    c0008229 <f_mkfs+0x1116>
c0007184:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007187:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000718b:	85 c0                	test   eax,eax
c000718d:	75 20                	jne    c00071af <f_mkfs+0x9c>
c000718f:	51                   	push   ecx
c0007190:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007194:	50                   	push   eax
c0007195:	6a 03                	push   0x3
c0007197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719b:	e8 44 a8 ff ff       	call   c00019e4 <disk_ioctl>
c00071a0:	83 c4 10             	add    esp,0x10
c00071a3:	85 c0                	test   eax,eax
c00071a5:	74 08                	je     c00071af <f_mkfs+0x9c>
c00071a7:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071af:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071b3:	8d 42 ff             	lea    eax,[edx-0x1]
c00071b6:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071bb:	77 04                	ja     c00071c1 <f_mkfs+0xae>
c00071bd:	85 c2                	test   edx,eax
c00071bf:	74 08                	je     c00071c9 <f_mkfs+0xb6>
c00071c1:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c9:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071cc:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071d0:	48                   	dec    eax
c00071d1:	3c 01                	cmp    al,0x1
c00071d3:	76 05                	jbe    c00071da <f_mkfs+0xc7>
c00071d5:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071da:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071e1:	48                   	dec    eax
c00071e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e7:	77 07                	ja     c00071f0 <f_mkfs+0xdd>
c00071e9:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071ee:	74 08                	je     c00071f8 <f_mkfs+0xe5>
c00071f0:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f8:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071fb:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007201:	77 07                	ja     c000720a <f_mkfs+0xf7>
c0007203:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007206:	85 d8                	test   eax,ebx
c0007208:	74 02                	je     c000720c <f_mkfs+0xf9>
c000720a:	31 db                	xor    ebx,ebx
c000720c:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007217:	77 0a                	ja     c0007223 <f_mkfs+0x110>
c0007219:	bb 11 00 00 00       	mov    ebx,0x11
c000721e:	e9 06 10 00 00       	jmp    c0008229 <f_mkfs+0x1116>
c0007223:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000722a:	8b 36                	mov    esi,DWORD PTR [esi]
c000722c:	85 ed                	test   ebp,ebp
c000722e:	75 1e                	jne    c000724e <f_mkfs+0x13b>
c0007230:	83 ec 0c             	sub    esp,0xc
c0007233:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000723a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000723f:	50                   	push   eax
c0007240:	e8 f1 0f 00 00       	call   c0008236 <ff_memalloc>
c0007245:	83 c4 10             	add    esp,0x10
c0007248:	89 c5                	mov    ebp,eax
c000724a:	85 c0                	test   eax,eax
c000724c:	74 cb                	je     c0007219 <f_mkfs+0x106>
c000724e:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007256:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000725e:	52                   	push   edx
c000725f:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007263:	50                   	push   eax
c0007264:	6a 01                	push   0x1
c0007266:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000726a:	e8 75 a7 ff ff       	call   c00019e4 <disk_ioctl>
c000726f:	83 c4 10             	add    esp,0x10
c0007272:	85 c0                	test   eax,eax
c0007274:	0f 85 4a 0f 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000727a:	89 f1                	mov    ecx,esi
c000727c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007284:	83 e1 0f             	and    ecx,0xf
c0007287:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000728f:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007293:	83 e6 08             	and    esi,0x8
c0007296:	75 56                	jne    c00072ee <f_mkfs+0x1db>
c0007298:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000729c:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072a0:	83 ff 00             	cmp    edi,0x0
c00072a3:	76 20                	jbe    c00072c5 <f_mkfs+0x1b2>
c00072a5:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072aa:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b2:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072b8:	83 d7 ff             	adc    edi,0xffffffff
c00072bb:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072bf:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072c3:	eb 21                	jmp    c00072e6 <f_mkfs+0x1d3>
c00072c5:	ba 3f 00 00 00       	mov    edx,0x3f
c00072ca:	39 f2                	cmp    edx,esi
c00072cc:	19 f8                	sbb    eax,edi
c00072ce:	73 1e                	jae    c00072ee <f_mkfs+0x1db>
c00072d0:	83 c6 c1             	add    esi,0xffffffc1
c00072d3:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072db:	83 d7 ff             	adc    edi,0xffffffff
c00072de:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072e2:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072e6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072ee:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072f2:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072fd:	31 c0                	xor    eax,eax
c00072ff:	ba 7f 00 00 00       	mov    edx,0x7f
c0007304:	89 c7                	mov    edi,eax
c0007306:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007309:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000730d:	0f 83 c5 0a 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c0007313:	89 df                	mov    edi,ebx
c0007315:	c1 ef 09             	shr    edi,0x9
c0007318:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000731c:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000732b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000732f:	74 29                	je     c000735a <f_mkfs+0x247>
c0007331:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007337:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000733c:	0f 97 c2             	seta   dl
c000733f:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007342:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007346:	0f 92 c0             	setb   al
c0007349:	08 c2                	or     dl,al
c000734b:	75 5b                	jne    c00073a8 <f_mkfs+0x295>
c000734d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007351:	83 e0 07             	and    eax,0x7
c0007354:	3c 04                	cmp    al,0x4
c0007356:	74 50                	je     c00073a8 <f_mkfs+0x295>
c0007358:	eb 1b                	jmp    c0007375 <f_mkfs+0x262>
c000735a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000735f:	0f 87 73 0a 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c0007365:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000736b:	76 08                	jbe    c0007375 <f_mkfs+0x262>
c000736d:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007375:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007379:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000737d:	83 e0 01             	and    eax,0x1
c0007380:	80 e1 02             	and    cl,0x2
c0007383:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007387:	74 0d                	je     c0007396 <f_mkfs+0x283>
c0007389:	84 c0                	test   al,al
c000738b:	0f 84 53 09 00 00    	je     c0007ce4 <f_mkfs+0xbd1>
c0007391:	e9 12 08 00 00       	jmp    c0007ba8 <f_mkfs+0xa95>
c0007396:	bb 13 00 00 00       	mov    ebx,0x13
c000739b:	84 c0                	test   al,al
c000739d:	0f 85 05 08 00 00    	jne    c0007ba8 <f_mkfs+0xa95>
c00073a3:	e9 39 0e 00 00       	jmp    c00081e1 <f_mkfs+0x10ce>
c00073a8:	31 c0                	xor    eax,eax
c00073aa:	ba ff 0f 00 00       	mov    edx,0xfff
c00073af:	89 c7                	mov    edi,eax
c00073b1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073b4:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b8:	0f 83 1a 0a 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c00073be:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073c4:	77 39                	ja     c00073ff <f_mkfs+0x2ec>
c00073c6:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073cb:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073d3:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073d6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073da:	73 08                	jae    c00073e4 <f_mkfs+0x2d1>
c00073dc:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073e4:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073ec:	b8 00 00 00 00       	mov    eax,0x0
c00073f1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073f5:	73 08                	jae    c00073ff <f_mkfs+0x2ec>
c00073f7:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007403:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007407:	83 c0 20             	add    eax,0x20
c000740a:	83 d2 00             	adc    edx,0x0
c000740d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007411:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007415:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007419:	31 d2                	xor    edx,edx
c000741b:	31 ff                	xor    edi,edi
c000741d:	52                   	push   edx
c000741e:	89 fb                	mov    ebx,edi
c0007420:	50                   	push   eax
c0007421:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007425:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007429:	e8 2e c0 01 00       	call   c002345c <__udivdi3>
c000742e:	83 c4 10             	add    esp,0x10
c0007431:	c1 e0 02             	shl    eax,0x2
c0007434:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007438:	05 07 02 00 00       	add    eax,0x207
c000743d:	89 f1                	mov    ecx,esi
c000743f:	c1 e8 09             	shr    eax,0x9
c0007442:	83 c1 ff             	add    ecx,0xffffffff
c0007445:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007449:	83 d3 ff             	adc    ebx,0xffffffff
c000744c:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007450:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007454:	31 d2                	xor    edx,edx
c0007456:	01 c8                	add    eax,ecx
c0007458:	11 da                	adc    edx,ebx
c000745a:	89 c1                	mov    ecx,eax
c000745c:	f7 de                	neg    esi
c000745e:	89 d0                	mov    eax,edx
c0007460:	83 d7 00             	adc    edi,0x0
c0007463:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007467:	f7 df                	neg    edi
c0007469:	21 f1                	and    ecx,esi
c000746b:	21 f8                	and    eax,edi
c000746d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007471:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007475:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007479:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000747d:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007481:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007484:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007488:	0f ac d0 01          	shrd   eax,edx,0x1
c000748c:	89 df                	mov    edi,ebx
c000748e:	d1 ea                	shr    edx,1
c0007490:	39 c1                	cmp    ecx,eax
c0007492:	19 d7                	sbb    edi,edx
c0007494:	0f 83 3e 09 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c000749a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749e:	31 d2                	xor    edx,edx
c00074a0:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a8:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074af:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074b3:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074bb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074bf:	83 f8 0f             	cmp    eax,0xf
c00074c2:	0f 86 10 09 00 00    	jbe    c0007dd8 <f_mkfs+0xcc5>
c00074c8:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074d0:	0f 87 02 09 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c00074d6:	31 d2                	xor    edx,edx
c00074d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074dc:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e4:	83 c0 07             	add    eax,0x7
c00074e7:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074ef:	c1 e8 03             	shr    eax,0x3
c00074f2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00074f9:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007501:	c1 e0 09             	shl    eax,0x9
c0007504:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007508:	48                   	dec    eax
c0007509:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000750d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007511:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007515:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007519:	31 d2                	xor    edx,edx
c000751b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000751f:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007526:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000752a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000752f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007533:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007537:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000753b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000753f:	31 ff                	xor    edi,edi
c0007541:	31 f6                	xor    esi,esi
c0007543:	31 db                	xor    ebx,ebx
c0007545:	85 ff                	test   edi,edi
c0007547:	74 05                	je     c000754e <f_mkfs+0x43b>
c0007549:	4f                   	dec    edi
c000754a:	74 44                	je     c0007590 <f_mkfs+0x47d>
c000754c:	eb 4f                	jmp    c000759d <f_mkfs+0x48a>
c000754e:	83 ec 0c             	sub    esp,0xc
c0007551:	0f b7 c3             	movzx  eax,bx
c0007554:	50                   	push   eax
c0007555:	e8 05 0e 00 00       	call   c000835f <ff_wtoupper>
c000755a:	83 c4 10             	add    esp,0x10
c000755d:	89 c1                	mov    ecx,eax
c000755f:	8d 53 01             	lea    edx,[ebx+0x1]
c0007562:	66 39 c3             	cmp    bx,ax
c0007565:	75 3e                	jne    c00075a5 <f_mkfs+0x492>
c0007567:	be 01 00 00 00       	mov    esi,0x1
c000756c:	89 df                	mov    edi,ebx
c000756e:	66 01 f7             	add    di,si
c0007571:	75 07                	jne    c000757a <f_mkfs+0x467>
c0007573:	83 fe 7f             	cmp    esi,0x7f
c0007576:	77 31                	ja     c00075a9 <f_mkfs+0x496>
c0007578:	eb 16                	jmp    c0007590 <f_mkfs+0x47d>
c000757a:	83 ec 0c             	sub    esp,0xc
c000757d:	0f b7 ff             	movzx  edi,di
c0007580:	57                   	push   edi
c0007581:	e8 d9 0d 00 00       	call   c000835f <ff_wtoupper>
c0007586:	83 c4 10             	add    esp,0x10
c0007589:	39 c7                	cmp    edi,eax
c000758b:	75 e6                	jne    c0007573 <f_mkfs+0x460>
c000758d:	46                   	inc    esi
c000758e:	eb dc                	jmp    c000756c <f_mkfs+0x459>
c0007590:	31 c0                	xor    eax,eax
c0007592:	89 d9                	mov    ecx,ebx
c0007594:	4e                   	dec    esi
c0007595:	0f 95 c0             	setne  al
c0007598:	43                   	inc    ebx
c0007599:	89 c7                	mov    edi,eax
c000759b:	eb 14                	jmp    c00075b1 <f_mkfs+0x49e>
c000759d:	89 f1                	mov    ecx,esi
c000759f:	01 f3                	add    ebx,esi
c00075a1:	31 ff                	xor    edi,edi
c00075a3:	eb 0c                	jmp    c00075b1 <f_mkfs+0x49e>
c00075a5:	89 d3                	mov    ebx,edx
c00075a7:	eb 08                	jmp    c00075b1 <f_mkfs+0x49e>
c00075a9:	bf 02 00 00 00       	mov    edi,0x2
c00075ae:	83 c9 ff             	or     ecx,0xffffffff
c00075b1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075b8:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075bc:	0f b6 c1             	movzx  eax,cl
c00075bf:	e8 3a a9 ff ff       	call   c0001efe <xsum32>
c00075c4:	66 c1 e9 08          	shr    cx,0x8
c00075c8:	89 c2                	mov    edx,eax
c00075ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075cd:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075d1:	0f b7 c1             	movzx  eax,cx
c00075d4:	e8 25 a9 ff ff       	call   c0001efe <xsum32>
c00075d9:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075de:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075e2:	66 85 db             	test   bx,bx
c00075e5:	74 1f                	je     c0007606 <f_mkfs+0x4f3>
c00075e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075ea:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075f1:	83 c0 02             	add    eax,0x2
c00075f4:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075fa:	39 c2                	cmp    edx,eax
c00075fc:	74 08                	je     c0007606 <f_mkfs+0x4f3>
c00075fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007601:	e9 3f ff ff ff       	jmp    c0007545 <f_mkfs+0x432>
c0007606:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007609:	83 ec 0c             	sub    esp,0xc
c000760c:	05 01 02 00 00       	add    eax,0x201
c0007611:	c1 e8 09             	shr    eax,0x9
c0007614:	50                   	push   eax
c0007615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007619:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000761d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007621:	55                   	push   ebp
c0007622:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007626:	e8 a3 a3 ff ff       	call   c00019ce <disk_write>
c000762b:	83 c4 20             	add    esp,0x20
c000762e:	85 c0                	test   eax,eax
c0007630:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007633:	0f 85 8b 0b 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007639:	89 d0                	mov    eax,edx
c000763b:	31 d2                	xor    edx,edx
c000763d:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007641:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007645:	66 85 db             	test   bx,bx
c0007648:	74 04                	je     c000764e <f_mkfs+0x53b>
c000764a:	31 c0                	xor    eax,eax
c000764c:	eb b0                	jmp    c00075fe <f_mkfs+0x4eb>
c000764e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007652:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007656:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000765a:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007660:	31 d2                	xor    edx,edx
c0007662:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000766d:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007671:	c1 eb 09             	shr    ebx,0x9
c0007674:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000767b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767f:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007683:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007687:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000768b:	8d 70 01             	lea    esi,[eax+0x1]
c000768e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007692:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007696:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000769d:	31 d2                	xor    edx,edx
c000769f:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00076a7:	89 c1                	mov    ecx,eax
c00076a9:	89 e8                	mov    eax,ebp
c00076ab:	e8 e7 a3 ff ff       	call   c0001a97 <mem_set>
c00076b0:	31 c0                	xor    eax,eax
c00076b2:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076b5:	76 10                	jbe    c00076c7 <f_mkfs+0x5b4>
c00076b7:	83 fe 07             	cmp    esi,0x7
c00076ba:	76 0b                	jbe    c00076c7 <f_mkfs+0x5b4>
c00076bc:	40                   	inc    eax
c00076bd:	83 ee 08             	sub    esi,0x8
c00076c0:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076c5:	eb eb                	jmp    c00076b2 <f_mkfs+0x59f>
c00076c7:	b2 01                	mov    dl,0x1
c00076c9:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076cd:	85 f6                	test   esi,esi
c00076cf:	74 0c                	je     c00076dd <f_mkfs+0x5ca>
c00076d1:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076d4:	76 07                	jbe    c00076dd <f_mkfs+0x5ca>
c00076d6:	08 11                	or     BYTE PTR [ecx],dl
c00076d8:	4e                   	dec    esi
c00076d9:	d1 e2                	shl    edx,1
c00076db:	eb f0                	jmp    c00076cd <f_mkfs+0x5ba>
c00076dd:	89 df                	mov    edi,ebx
c00076df:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076e3:	76 04                	jbe    c00076e9 <f_mkfs+0x5d6>
c00076e5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076e9:	83 ec 0c             	sub    esp,0xc
c00076ec:	57                   	push   edi
c00076ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f5:	55                   	push   ebp
c00076f6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076fa:	e8 cf a2 ff ff       	call   c00019ce <disk_write>
c00076ff:	83 c4 20             	add    esp,0x20
c0007702:	85 c0                	test   eax,eax
c0007704:	0f 85 ba 0a 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000770a:	31 d2                	xor    edx,edx
c000770c:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007710:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007714:	29 fb                	sub    ebx,edi
c0007716:	0f 85 7a ff ff ff    	jne    c0007696 <f_mkfs+0x583>
c000771c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007720:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007728:	31 f6                	xor    esi,esi
c000772a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000772e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007731:	31 d2                	xor    edx,edx
c0007733:	89 e8                	mov    eax,ebp
c0007735:	e8 5d a3 ff ff       	call   c0001a97 <mem_set>
c000773a:	31 c9                	xor    ecx,ecx
c000773c:	85 db                	test   ebx,ebx
c000773e:	75 40                	jne    c0007780 <f_mkfs+0x66d>
c0007740:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007745:	89 e8                	mov    eax,ebp
c0007747:	bb 02 00 00 00       	mov    ebx,0x2
c000774c:	e8 28 a3 ff ff       	call   c0001a79 <st_dword>
c0007751:	8d 45 04             	lea    eax,[ebp+0x4]
c0007754:	83 ca ff             	or     edx,0xffffffff
c0007757:	e8 1d a3 ff ff       	call   c0001a79 <st_dword>
c000775c:	b9 08 00 00 00       	mov    ecx,0x8
c0007761:	eb 1d                	jmp    c0007780 <f_mkfs+0x66d>
c0007763:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007766:	76 3b                	jbe    c00077a3 <f_mkfs+0x690>
c0007768:	43                   	inc    ebx
c0007769:	83 fe 01             	cmp    esi,0x1
c000776c:	89 da                	mov    edx,ebx
c000776e:	77 03                	ja     c0007773 <f_mkfs+0x660>
c0007770:	83 ca ff             	or     edx,0xffffffff
c0007773:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007777:	4e                   	dec    esi
c0007778:	e8 fc a2 ff ff       	call   c0001a79 <st_dword>
c000777d:	83 c1 04             	add    ecx,0x4
c0007780:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007784:	85 f6                	test   esi,esi
c0007786:	75 db                	jne    c0007763 <f_mkfs+0x650>
c0007788:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000778d:	77 14                	ja     c00077a3 <f_mkfs+0x690>
c000778f:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007793:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000779a:	85 f6                	test   esi,esi
c000779c:	74 05                	je     c00077a3 <f_mkfs+0x690>
c000779e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077a1:	77 dd                	ja     c0007780 <f_mkfs+0x66d>
c00077a3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077a7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077ab:	39 cf                	cmp    edi,ecx
c00077ad:	76 02                	jbe    c00077b1 <f_mkfs+0x69e>
c00077af:	89 cf                	mov    edi,ecx
c00077b1:	83 ec 0c             	sub    esp,0xc
c00077b4:	57                   	push   edi
c00077b5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077b9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077bd:	55                   	push   ebp
c00077be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077c2:	e8 07 a2 ff ff       	call   c00019ce <disk_write>
c00077c7:	83 c4 20             	add    esp,0x20
c00077ca:	85 c0                	test   eax,eax
c00077cc:	0f 85 f2 09 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00077d2:	31 d2                	xor    edx,edx
c00077d4:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077d8:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077dc:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077e0:	0f 85 48 ff ff ff    	jne    c000772e <f_mkfs+0x61b>
c00077e6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077e9:	31 d2                	xor    edx,edx
c00077eb:	89 e8                	mov    eax,ebp
c00077ed:	31 ff                	xor    edi,edi
c00077ef:	e8 a3 a2 ff ff       	call   c0001a97 <mem_set>
c00077f4:	8d 45 34             	lea    eax,[ebp+0x34]
c00077f7:	ba 02 00 00 00       	mov    edx,0x2
c00077fc:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007800:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007804:	e8 70 a2 ff ff       	call   c0001a79 <st_dword>
c0007809:	8d 45 38             	lea    eax,[ebp+0x38]
c000780c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007810:	e8 64 a2 ff ff       	call   c0001a79 <st_dword>
c0007815:	8d 45 44             	lea    eax,[ebp+0x44]
c0007818:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781c:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007820:	e8 54 a2 ff ff       	call   c0001a79 <st_dword>
c0007825:	8d 45 54             	lea    eax,[ebp+0x54]
c0007828:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000782c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007830:	83 c2 02             	add    edx,0x2
c0007833:	e8 41 a2 ff ff       	call   c0001a79 <st_dword>
c0007838:	8d 45 58             	lea    eax,[ebp+0x58]
c000783b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000783f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007843:	e8 31 a2 ff ff       	call   c0001a79 <st_dword>
c0007848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784c:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007851:	89 c6                	mov    esi,eax
c0007853:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007857:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000785b:	89 04 24             	mov    DWORD PTR [esp],eax
c000785e:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007862:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007865:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007869:	39 cb                	cmp    ebx,ecx
c000786b:	76 02                	jbe    c000786f <f_mkfs+0x75c>
c000786d:	89 cb                	mov    ebx,ecx
c000786f:	83 ec 0c             	sub    esp,0xc
c0007872:	53                   	push   ebx
c0007873:	57                   	push   edi
c0007874:	56                   	push   esi
c0007875:	55                   	push   ebp
c0007876:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000787a:	e8 4f a1 ff ff       	call   c00019ce <disk_write>
c000787f:	83 c4 20             	add    esp,0x20
c0007882:	85 c0                	test   eax,eax
c0007884:	0f 85 3a 09 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000788a:	31 d2                	xor    edx,edx
c000788c:	b9 00 02 00 00       	mov    ecx,0x200
c0007891:	89 e8                	mov    eax,ebp
c0007893:	e8 ff a1 ff ff       	call   c0001a97 <mem_set>
c0007898:	31 d2                	xor    edx,edx
c000789a:	01 de                	add    esi,ebx
c000789c:	11 d7                	adc    edi,edx
c000789e:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078a1:	75 bf                	jne    c0007862 <f_mkfs+0x74f>
c00078a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078ab:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078b3:	b9 00 02 00 00       	mov    ecx,0x200
c00078b8:	31 d2                	xor    edx,edx
c00078ba:	89 e8                	mov    eax,ebp
c00078bc:	e8 d6 a1 ff ff       	call   c0001a97 <mem_set>
c00078c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00078c6:	ba 20 5e 02 c0       	mov    edx,0xc0025e20
c00078cb:	89 e8                	mov    eax,ebp
c00078cd:	e8 b0 a1 ff ff       	call   c0001a82 <mem_cpy>
c00078d2:	8d 45 40             	lea    eax,[ebp+0x40]
c00078d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078dd:	e8 9a a1 ff ff       	call   c0001a7c <st_qword>
c00078e2:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078e6:	8d 45 48             	lea    eax,[ebp+0x48]
c00078e9:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078ed:	e8 8a a1 ff ff       	call   c0001a7c <st_qword>
c00078f2:	8d 45 50             	lea    eax,[ebp+0x50]
c00078f5:	ba 20 00 00 00       	mov    edx,0x20
c00078fa:	e8 7a a1 ff ff       	call   c0001a79 <st_dword>
c00078ff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007903:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007907:	e8 6d a1 ff ff       	call   c0001a79 <st_dword>
c000790c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007910:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007914:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007918:	e8 5c a1 ff ff       	call   c0001a79 <st_dword>
c000791d:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007920:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007924:	e8 50 a1 ff ff       	call   c0001a79 <st_dword>
c0007929:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000792d:	8d 50 02             	lea    edx,[eax+0x2]
c0007930:	8d 45 60             	lea    eax,[ebp+0x60]
c0007933:	e8 41 a1 ff ff       	call   c0001a79 <st_dword>
c0007938:	8d 45 64             	lea    eax,[ebp+0x64]
c000793b:	ba 00 00 21 50       	mov    edx,0x50210000
c0007940:	e8 34 a1 ff ff       	call   c0001a79 <st_dword>
c0007945:	8d 45 68             	lea    eax,[ebp+0x68]
c0007948:	ba 00 01 00 00       	mov    edx,0x100
c000794d:	e8 23 a1 ff ff       	call   c0001a75 <st_word>
c0007952:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007956:	b8 0a 00 00 00       	mov    eax,0xa
c000795b:	48                   	dec    eax
c000795c:	74 05                	je     c0007963 <f_mkfs+0x850>
c000795e:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007961:	eb f8                	jmp    c000795b <f_mkfs+0x848>
c0007963:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007967:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c000796b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000796f:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007973:	74 05                	je     c000797a <f_mkfs+0x867>
c0007975:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007978:	eb f5                	jmp    c000796f <f_mkfs+0x85c>
c000797a:	8d 45 78             	lea    eax,[ebp+0x78]
c000797d:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007982:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007988:	31 db                	xor    ebx,ebx
c000798a:	e8 e6 a0 ff ff       	call   c0001a75 <st_word>
c000798f:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007995:	ba 55 aa 00 00       	mov    edx,0xaa55
c000799a:	89 04 24             	mov    DWORD PTR [esp],eax
c000799d:	e8 d3 a0 ff ff       	call   c0001a75 <st_word>
c00079a2:	31 c9                	xor    ecx,ecx
c00079a4:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079a7:	83 f8 01             	cmp    eax,0x1
c00079aa:	76 13                	jbe    c00079bf <f_mkfs+0x8ac>
c00079ac:	83 f9 70             	cmp    ecx,0x70
c00079af:	74 0e                	je     c00079bf <f_mkfs+0x8ac>
c00079b1:	89 da                	mov    edx,ebx
c00079b3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079b8:	e8 41 a5 ff ff       	call   c0001efe <xsum32>
c00079bd:	89 c3                	mov    ebx,eax
c00079bf:	41                   	inc    ecx
c00079c0:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c6:	75 dc                	jne    c00079a4 <f_mkfs+0x891>
c00079c8:	89 f0                	mov    eax,esi
c00079ca:	89 fa                	mov    edx,edi
c00079cc:	83 c0 01             	add    eax,0x1
c00079cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079d3:	83 d2 00             	adc    edx,0x0
c00079d6:	83 ec 0c             	sub    esp,0xc
c00079d9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079dd:	6a 01                	push   0x1
c00079df:	57                   	push   edi
c00079e0:	56                   	push   esi
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 e3 9f ff ff       	call   c00019ce <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 ce 07 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	b9 00 02 00 00       	mov    ecx,0x200
c00079fd:	89 e8                	mov    eax,ebp
c00079ff:	e8 93 a0 ff ff       	call   c0001a97 <mem_set>
c0007a04:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a09:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0c:	e8 64 a0 ff ff       	call   c0001a75 <st_word>
c0007a11:	89 f0                	mov    eax,esi
c0007a13:	89 fa                	mov    edx,edi
c0007a15:	83 c0 09             	add    eax,0x9
c0007a18:	83 d2 00             	adc    edx,0x0
c0007a1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a22:	31 c9                	xor    ecx,ecx
c0007a24:	41                   	inc    ecx
c0007a25:	89 da                	mov    edx,ebx
c0007a27:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a2c:	e8 cd a4 ff ff       	call   c0001efe <xsum32>
c0007a31:	89 c3                	mov    ebx,eax
c0007a33:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a39:	75 e9                	jne    c0007a24 <f_mkfs+0x911>
c0007a3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a43:	83 c0 01             	add    eax,0x1
c0007a46:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a4a:	83 d2 00             	adc    edx,0x0
c0007a4d:	83 ec 0c             	sub    esp,0xc
c0007a50:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a54:	6a 01                	push   0x1
c0007a56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5e:	55                   	push   ebp
c0007a5f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a63:	e8 66 9f ff ff       	call   c00019ce <disk_write>
c0007a68:	83 c4 20             	add    esp,0x20
c0007a6b:	85 c0                	test   eax,eax
c0007a6d:	0f 85 51 07 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007a73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a77:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a7b:	75 09                	jne    c0007a86 <f_mkfs+0x973>
c0007a7d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a80:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a84:	74 12                	je     c0007a98 <f_mkfs+0x985>
c0007a86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a8a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a8e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a96:	eb 8a                	jmp    c0007a22 <f_mkfs+0x90f>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	b9 00 02 00 00       	mov    ecx,0x200
c0007a9f:	89 e8                	mov    eax,ebp
c0007aa1:	e8 f1 9f ff ff       	call   c0001a97 <mem_set>
c0007aa6:	83 c6 0b             	add    esi,0xb
c0007aa9:	83 d7 00             	adc    edi,0x0
c0007aac:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007ab0:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ab4:	31 c9                	xor    ecx,ecx
c0007ab6:	41                   	inc    ecx
c0007ab7:	89 da                	mov    edx,ebx
c0007ab9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007abe:	e8 3b a4 ff ff       	call   c0001efe <xsum32>
c0007ac3:	89 c3                	mov    ebx,eax
c0007ac5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007acb:	75 e9                	jne    c0007ab6 <f_mkfs+0x9a3>
c0007acd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ad0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ad4:	83 c6 01             	add    esi,0x1
c0007ad7:	83 d7 00             	adc    edi,0x0
c0007ada:	83 ec 0c             	sub    esp,0xc
c0007add:	6a 01                	push   0x1
c0007adf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae7:	55                   	push   ebp
c0007ae8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aec:	e8 dd 9e ff ff       	call   c00019ce <disk_write>
c0007af1:	83 c4 20             	add    esp,0x20
c0007af4:	85 c0                	test   eax,eax
c0007af6:	0f 85 c8 06 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007afc:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b00:	75 06                	jne    c0007b08 <f_mkfs+0x9f5>
c0007b02:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b06:	74 09                	je     c0007b11 <f_mkfs+0x9fe>
c0007b08:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b0b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b0f:	eb a3                	jmp    c0007ab4 <f_mkfs+0x9a1>
c0007b11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b15:	89 da                	mov    edx,ebx
c0007b17:	01 e8                	add    eax,ebp
c0007b19:	e8 5b 9f ff ff       	call   c0001a79 <st_dword>
c0007b1e:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b23:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b2b:	75 e4                	jne    c0007b11 <f_mkfs+0x9fe>
c0007b2d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b30:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b34:	83 c6 02             	add    esi,0x2
c0007b37:	83 d7 00             	adc    edi,0x0
c0007b3a:	83 ec 0c             	sub    esp,0xc
c0007b3d:	6a 01                	push   0x1
c0007b3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b47:	55                   	push   ebp
c0007b48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b4c:	e8 7d 9e ff ff       	call   c00019ce <disk_write>
c0007b51:	83 c4 20             	add    esp,0x20
c0007b54:	85 c0                	test   eax,eax
c0007b56:	0f 85 68 06 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007b5c:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b61:	74 0d                	je     c0007b70 <f_mkfs+0xa5d>
c0007b63:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b6b:	e9 43 fd ff ff       	jmp    c00078b3 <f_mkfs+0x7a0>
c0007b70:	b1 07                	mov    cl,0x7
c0007b72:	e9 e3 05 00 00       	jmp    c000815a <f_mkfs+0x1047>
c0007b77:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b7c:	0f 85 4f 02 00 00    	jne    c0007dd1 <f_mkfs+0xcbe>
c0007b82:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b87:	0f 86 22 02 00 00    	jbe    c0007daf <f_mkfs+0xc9c>
c0007b8d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b92:	0f 85 81 06 00 00    	jne    c0008219 <f_mkfs+0x1106>
c0007b98:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b9f:	83 f8 40             	cmp    eax,0x40
c0007ba2:	0f 87 51 06 00 00    	ja     c00081f9 <f_mkfs+0x10e6>
c0007ba8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bac:	85 ff                	test   edi,edi
c0007bae:	75 1c                	jne    c0007bcc <f_mkfs+0xab9>
c0007bb0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bb3:	ba 20 5d 02 c0       	mov    edx,0xc0025d20
c0007bb8:	c1 e9 0c             	shr    ecx,0xc
c0007bbb:	bf 01 00 00 00       	mov    edi,0x1
c0007bc0:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bc3:	66 85 c0             	test   ax,ax
c0007bc6:	0f 85 95 01 00 00    	jne    c0007d61 <f_mkfs+0xc4e>
c0007bcc:	31 d2                	xor    edx,edx
c0007bce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bd1:	f7 f7                	div    edi
c0007bd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bd8:	0f 86 95 01 00 00    	jbe    c0007d73 <f_mkfs+0xc60>
c0007bde:	83 c0 02             	add    eax,0x2
c0007be1:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007be6:	01 c0                	add    eax,eax
c0007be8:	05 ff 01 00 00       	add    eax,0x1ff
c0007bed:	be 01 00 00 00       	mov    esi,0x1
c0007bf2:	c1 e8 09             	shr    eax,0x9
c0007bf5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bf9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bfd:	c1 e0 05             	shl    eax,0x5
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c07:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c0c:	31 d2                	xor    edx,edx
c0007c0e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c12:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c16:	89 f0                	mov    eax,esi
c0007c18:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c1c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c20:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c24:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c33:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c37:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c3b:	31 db                	xor    ebx,ebx
c0007c3d:	01 c8                	add    eax,ecx
c0007c3f:	11 da                	adc    edx,ebx
c0007c41:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c45:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c49:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c4d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c51:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c55:	f7 da                	neg    edx
c0007c57:	21 d1                	and    ecx,edx
c0007c59:	29 d9                	sub    ecx,ebx
c0007c5b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c60:	0f 85 20 01 00 00    	jne    c0007d86 <f_mkfs+0xc73>
c0007c66:	31 db                	xor    ebx,ebx
c0007c68:	01 ce                	add    esi,ecx
c0007c6a:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c6e:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c72:	31 d2                	xor    edx,edx
c0007c74:	89 f8                	mov    eax,edi
c0007c76:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c7a:	c1 e0 04             	shl    eax,0x4
c0007c7d:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c81:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c85:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c89:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c8d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c90:	19 d3                	sbb    ebx,edx
c0007c92:	0f 82 40 01 00 00    	jb     c0007dd8 <f_mkfs+0xcc5>
c0007c98:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c9b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c9f:	89 c8                	mov    eax,ecx
c0007ca1:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ca6:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007caa:	29 f0                	sub    eax,esi
c0007cac:	29 d0                	sub    eax,edx
c0007cae:	31 d2                	xor    edx,edx
c0007cb0:	f7 f7                	div    edi
c0007cb2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cb7:	89 c3                	mov    ebx,eax
c0007cb9:	0f 85 b8 fe ff ff    	jne    c0007b77 <f_mkfs+0xa64>
c0007cbf:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cc4:	0f 87 1d 01 00 00    	ja     c0007de7 <f_mkfs+0xcd4>
c0007cca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ccf:	0f 85 03 01 00 00    	jne    c0007dd8 <f_mkfs+0xcc5>
c0007cd5:	83 ff 01             	cmp    edi,0x1
c0007cd8:	0f 86 fa 00 00 00    	jbe    c0007dd8 <f_mkfs+0xcc5>
c0007cde:	d1 ef                	shr    edi,1
c0007ce0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007ce4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007ce8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ceb:	85 db                	test   ebx,ebx
c0007ced:	75 2d                	jne    c0007d1c <f_mkfs+0xc09>
c0007cef:	89 cb                	mov    ebx,ecx
c0007cf1:	ba 30 5d 02 c0       	mov    edx,0xc0025d30
c0007cf6:	c1 eb 11             	shr    ebx,0x11
c0007cf9:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d01:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d04:	66 85 c0             	test   ax,ax
c0007d07:	74 11                	je     c0007d1a <f_mkfs+0xc07>
c0007d09:	83 c2 02             	add    edx,0x2
c0007d0c:	39 d8                	cmp    eax,ebx
c0007d0e:	77 0a                	ja     c0007d1a <f_mkfs+0xc07>
c0007d10:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d14:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d18:	eb e7                	jmp    c0007d01 <f_mkfs+0xbee>
c0007d1a:	31 db                	xor    ebx,ebx
c0007d1c:	31 d2                	xor    edx,edx
c0007d1e:	89 c8                	mov    eax,ecx
c0007d20:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d24:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d2b:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d30:	c1 ea 09             	shr    edx,0x9
c0007d33:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d38:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d3c:	0f 87 96 00 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c0007d42:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d46:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d4e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d52:	be 20 00 00 00       	mov    esi,0x20
c0007d57:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d5c:	e9 a6 fe ff ff       	jmp    c0007c07 <f_mkfs+0xaf4>
c0007d61:	83 c2 02             	add    edx,0x2
c0007d64:	39 c8                	cmp    eax,ecx
c0007d66:	0f 87 60 fe ff ff    	ja     c0007bcc <f_mkfs+0xab9>
c0007d6c:	01 ff                	add    edi,edi
c0007d6e:	e9 4d fe ff ff       	jmp    c0007bc0 <f_mkfs+0xaad>
c0007d73:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d76:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d7b:	40                   	inc    eax
c0007d7c:	d1 e8                	shr    eax,1
c0007d7e:	83 c0 03             	add    eax,0x3
c0007d81:	e9 62 fe ff ff       	jmp    c0007be8 <f_mkfs+0xad5>
c0007d86:	31 d2                	xor    edx,edx
c0007d88:	89 c8                	mov    eax,ecx
c0007d8a:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d8e:	85 d2                	test   edx,edx
c0007d90:	74 0c                	je     c0007d9e <f_mkfs+0xc8b>
c0007d92:	49                   	dec    ecx
c0007d93:	46                   	inc    esi
c0007d94:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d99:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d9e:	89 c8                	mov    eax,ecx
c0007da0:	31 d2                	xor    edx,edx
c0007da2:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007da6:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007daa:	e9 c3 fe ff ff       	jmp    c0007c72 <f_mkfs+0xb5f>
c0007daf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007db4:	77 31                	ja     c0007de7 <f_mkfs+0xcd4>
c0007db6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dbb:	75 1b                	jne    c0007dd8 <f_mkfs+0xcc5>
c0007dbd:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc4:	3d 80 00 00 00       	cmp    eax,0x80
c0007dc9:	0f 86 d9 fd ff ff    	jbe    c0007ba8 <f_mkfs+0xa95>
c0007dcf:	eb 07                	jmp    c0007dd8 <f_mkfs+0xcc5>
c0007dd1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dd6:	76 0a                	jbe    c0007de2 <f_mkfs+0xccf>
c0007dd8:	bb 0e 00 00 00       	mov    ebx,0xe
c0007ddd:	e9 ff 03 00 00       	jmp    c00081e1 <f_mkfs+0x10ce>
c0007de2:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007de7:	31 d2                	xor    edx,edx
c0007de9:	b9 00 02 00 00       	mov    ecx,0x200
c0007dee:	89 e8                	mov    eax,ebp
c0007df0:	e8 a2 9c ff ff       	call   c0001a97 <mem_set>
c0007df5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007dfa:	ba 42 5e 02 c0       	mov    edx,0xc0025e42
c0007dff:	89 e8                	mov    eax,ebp
c0007e01:	e8 7c 9c ff ff       	call   c0001a82 <mem_cpy>
c0007e06:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e09:	ba 00 02 00 00       	mov    edx,0x200
c0007e0e:	e8 62 9c ff ff       	call   c0001a75 <st_word>
c0007e13:	89 f8                	mov    eax,edi
c0007e15:	0f b7 d6             	movzx  edx,si
c0007e18:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e1b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e1e:	e8 52 9c ff ff       	call   c0001a75 <st_word>
c0007e23:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e27:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e2c:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e2f:	75 08                	jne    c0007e39 <f_mkfs+0xd26>
c0007e31:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e39:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e40:	e8 30 9c ff ff       	call   c0001a75 <st_word>
c0007e45:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e4a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e4e:	39 d0                	cmp    eax,edx
c0007e50:	b8 00 00 00 00       	mov    eax,0x0
c0007e55:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e59:	72 0a                	jb     c0007e65 <f_mkfs+0xd52>
c0007e5b:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e5e:	e8 12 9c ff ff       	call   c0001a75 <st_word>
c0007e63:	eb 08                	jmp    c0007e6d <f_mkfs+0xd5a>
c0007e65:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e68:	e8 0c 9c ff ff       	call   c0001a79 <st_dword>
c0007e6d:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e70:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e75:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e79:	e8 f7 9b ff ff       	call   c0001a75 <st_word>
c0007e7e:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e81:	ba ff 00 00 00       	mov    edx,0xff
c0007e86:	e8 ea 9b ff ff       	call   c0001a75 <st_word>
c0007e8b:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e92:	e8 e2 9b ff ff       	call   c0001a79 <st_dword>
c0007e97:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e9c:	75 57                	jne    c0007ef5 <f_mkfs+0xde2>
c0007e9e:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ea1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ea6:	e8 ce 9b ff ff       	call   c0001a79 <st_dword>
c0007eab:	8d 45 24             	lea    eax,[ebp+0x24]
c0007eae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eb2:	e8 c2 9b ff ff       	call   c0001a79 <st_dword>
c0007eb7:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eba:	ba 02 00 00 00       	mov    edx,0x2
c0007ebf:	e8 b5 9b ff ff       	call   c0001a79 <st_dword>
c0007ec4:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ec7:	ba 01 00 00 00       	mov    edx,0x1
c0007ecc:	e8 a4 9b ff ff       	call   c0001a75 <st_word>
c0007ed1:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ed4:	ba 06 00 00 00       	mov    edx,0x6
c0007ed9:	e8 97 9b ff ff       	call   c0001a75 <st_word>
c0007ede:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ee2:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ee6:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ee9:	b9 13 00 00 00       	mov    ecx,0x13
c0007eee:	ba 4e 5e 02 c0       	mov    edx,0xc0025e4e
c0007ef3:	eb 2f                	jmp    c0007f24 <f_mkfs+0xe11>
c0007ef5:	8d 45 27             	lea    eax,[ebp+0x27]
c0007ef8:	ba 00 00 21 50       	mov    edx,0x50210000
c0007efd:	e8 77 9b ff ff       	call   c0001a79 <st_dword>
c0007f02:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f07:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f0a:	e8 66 9b ff ff       	call   c0001a75 <st_word>
c0007f0f:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f13:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f17:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f1a:	b9 13 00 00 00       	mov    ecx,0x13
c0007f1f:	ba 62 5e 02 c0       	mov    edx,0xc0025e62
c0007f24:	e8 59 9b ff ff       	call   c0001a82 <mem_cpy>
c0007f29:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f2f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f34:	89 f0                	mov    eax,esi
c0007f36:	e8 3a 9b ff ff       	call   c0001a75 <st_word>
c0007f3b:	83 ec 0c             	sub    esp,0xc
c0007f3e:	6a 01                	push   0x1
c0007f40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f48:	55                   	push   ebp
c0007f49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f4d:	e8 7c 9a ff ff       	call   c00019ce <disk_write>
c0007f52:	83 c4 20             	add    esp,0x20
c0007f55:	85 c0                	test   eax,eax
c0007f57:	0f 85 67 02 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007f5d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f62:	0f 85 b7 00 00 00    	jne    c000801f <f_mkfs+0xf0c>
c0007f68:	83 ec 0c             	sub    esp,0xc
c0007f6b:	6a 01                	push   0x1
c0007f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f71:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f75:	83 c0 06             	add    eax,0x6
c0007f78:	83 d2 00             	adc    edx,0x0
c0007f7b:	52                   	push   edx
c0007f7c:	50                   	push   eax
c0007f7d:	55                   	push   ebp
c0007f7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f82:	e8 47 9a ff ff       	call   c00019ce <disk_write>
c0007f87:	83 c4 20             	add    esp,0x20
c0007f8a:	b9 00 02 00 00       	mov    ecx,0x200
c0007f8f:	31 d2                	xor    edx,edx
c0007f91:	89 e8                	mov    eax,ebp
c0007f93:	e8 ff 9a ff ff       	call   c0001a97 <mem_set>
c0007f98:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f9d:	89 e8                	mov    eax,ebp
c0007f9f:	e8 d5 9a ff ff       	call   c0001a79 <st_dword>
c0007fa4:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007faa:	ba 72 72 41 61       	mov    edx,0x61417272
c0007faf:	e8 c5 9a ff ff       	call   c0001a79 <st_dword>
c0007fb4:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fb7:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fbd:	e8 b7 9a ff ff       	call   c0001a79 <st_dword>
c0007fc2:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fc8:	ba 02 00 00 00       	mov    edx,0x2
c0007fcd:	e8 a7 9a ff ff       	call   c0001a79 <st_dword>
c0007fd2:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fd7:	89 f0                	mov    eax,esi
c0007fd9:	e8 97 9a ff ff       	call   c0001a75 <st_word>
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	6a 01                	push   0x1
c0007fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fe7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007feb:	83 c0 07             	add    eax,0x7
c0007fee:	83 d2 00             	adc    edx,0x0
c0007ff1:	52                   	push   edx
c0007ff2:	50                   	push   eax
c0007ff3:	55                   	push   ebp
c0007ff4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ff8:	e8 d1 99 ff ff       	call   c00019ce <disk_write>
c0007ffd:	83 c4 14             	add    esp,0x14
c0008000:	6a 01                	push   0x1
c0008002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008006:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000800a:	83 c0 01             	add    eax,0x1
c000800d:	83 d2 00             	adc    edx,0x0
c0008010:	52                   	push   edx
c0008011:	50                   	push   eax
c0008012:	55                   	push   ebp
c0008013:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008017:	e8 b2 99 ff ff       	call   c00019ce <disk_write>
c000801c:	83 c4 20             	add    esp,0x20
c000801f:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008026:	31 d2                	xor    edx,edx
c0008028:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000802e:	31 db                	xor    ebx,ebx
c0008030:	89 e8                	mov    eax,ebp
c0008032:	e8 60 9a ff ff       	call   c0001a97 <mem_set>
c0008037:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000803c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008043:	0f 94 c3             	sete   bl
c0008046:	4b                   	dec    ebx
c0008047:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000804d:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008053:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008058:	75 21                	jne    c000807b <f_mkfs+0xf68>
c000805a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000805f:	89 e8                	mov    eax,ebp
c0008061:	e8 13 9a ff ff       	call   c0001a79 <st_dword>
c0008066:	8d 45 04             	lea    eax,[ebp+0x4]
c0008069:	83 ca ff             	or     edx,0xffffffff
c000806c:	e8 08 9a ff ff       	call   c0001a79 <st_dword>
c0008071:	8d 45 08             	lea    eax,[ebp+0x8]
c0008074:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008079:	eb 04                	jmp    c000807f <f_mkfs+0xf6c>
c000807b:	89 da                	mov    edx,ebx
c000807d:	89 e8                	mov    eax,ebp
c000807f:	e8 f5 99 ff ff       	call   c0001a79 <st_dword>
c0008084:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008088:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000808c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008090:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008094:	39 ce                	cmp    esi,ecx
c0008096:	76 02                	jbe    c000809a <f_mkfs+0xf87>
c0008098:	89 ce                	mov    esi,ecx
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	56                   	push   esi
c000809e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a6:	55                   	push   ebp
c00080a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080ab:	e8 1e 99 ff ff       	call   c00019ce <disk_write>
c00080b0:	83 c4 20             	add    esp,0x20
c00080b3:	85 c0                	test   eax,eax
c00080b5:	0f 85 09 01 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00080bb:	31 d2                	xor    edx,edx
c00080bd:	b9 00 02 00 00       	mov    ecx,0x200
c00080c2:	89 e8                	mov    eax,ebp
c00080c4:	e8 ce 99 ff ff       	call   c0001a97 <mem_set>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080cf:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080d3:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080d7:	75 b3                	jne    c000808c <f_mkfs+0xf79>
c00080d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080dc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080e3:	40                   	inc    eax
c00080e4:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080e8:	0f 87 65 ff ff ff    	ja     c0008053 <f_mkfs+0xf40>
c00080ee:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080f3:	74 04                	je     c00080f9 <f_mkfs+0xfe6>
c00080f5:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00080f9:	89 fb                	mov    ebx,edi
c00080fb:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080ff:	76 04                	jbe    c0008105 <f_mkfs+0xff2>
c0008101:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008105:	83 ec 0c             	sub    esp,0xc
c0008108:	53                   	push   ebx
c0008109:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008111:	55                   	push   ebp
c0008112:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008116:	e8 b3 98 ff ff       	call   c00019ce <disk_write>
c000811b:	83 c4 20             	add    esp,0x20
c000811e:	85 c0                	test   eax,eax
c0008120:	0f 85 9e 00 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0008126:	31 d2                	xor    edx,edx
c0008128:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000812c:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008130:	29 df                	sub    edi,ebx
c0008132:	75 c5                	jne    c00080f9 <f_mkfs+0xfe6>
c0008134:	b1 0c                	mov    cl,0xc
c0008136:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813b:	74 1d                	je     c000815a <f_mkfs+0x1047>
c000813d:	b8 ff ff 00 00       	mov    eax,0xffff
c0008142:	b1 06                	mov    cl,0x6
c0008144:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008148:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000814c:	72 0c                	jb     c000815a <f_mkfs+0x1047>
c000814e:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008153:	0f 94 c1             	sete   cl
c0008156:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000815a:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000815f:	75 4c                	jne    c00081ad <f_mkfs+0x109a>
c0008161:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008165:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008169:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008170:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008177:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008182:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000818d:	0f b6 c9             	movzx  ecx,cl
c0008190:	83 ec 0c             	sub    esp,0xc
c0008193:	55                   	push   ebp
c0008194:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000819b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000819f:	e8 2f c2 ff ff       	call   c00043d3 <create_partition>
c00081a4:	83 c4 10             	add    esp,0x10
c00081a7:	89 c3                	mov    ebx,eax
c00081a9:	85 c0                	test   eax,eax
c00081ab:	75 34                	jne    c00081e1 <f_mkfs+0x10ce>
c00081ad:	31 db                	xor    ebx,ebx
c00081af:	50                   	push   eax
c00081b0:	6a 00                	push   0x0
c00081b2:	6a 00                	push   0x0
c00081b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081b8:	e8 27 98 ff ff       	call   c00019e4 <disk_ioctl>
c00081bd:	83 c4 10             	add    esp,0x10
c00081c0:	85 c0                	test   eax,eax
c00081c2:	74 1d                	je     c00081e1 <f_mkfs+0x10ce>
c00081c4:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081cc:	75 0c                	jne    c00081da <f_mkfs+0x10c7>
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	55                   	push   ebp
c00081d2:	e8 75 00 00 00       	call   c000824c <ff_memfree>
c00081d7:	83 c4 10             	add    esp,0x10
c00081da:	bb 01 00 00 00       	mov    ebx,0x1
c00081df:	eb 48                	jmp    c0008229 <f_mkfs+0x1116>
c00081e1:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081e9:	75 3e                	jne    c0008229 <f_mkfs+0x1116>
c00081eb:	83 ec 0c             	sub    esp,0xc
c00081ee:	55                   	push   ebp
c00081ef:	e8 58 00 00 00       	call   c000824c <ff_memfree>
c00081f4:	83 c4 10             	add    esp,0x10
c00081f7:	eb 30                	jmp    c0008229 <f_mkfs+0x1116>
c00081f9:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081fe:	0f 85 eb fa ff ff    	jne    c0007cef <f_mkfs+0xbdc>
c0008204:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008208:	81 ff 80 00 00 00    	cmp    edi,0x80
c000820e:	0f 86 b8 f9 ff ff    	jbe    c0007bcc <f_mkfs+0xab9>
c0008214:	e9 bf fb ff ff       	jmp    c0007dd8 <f_mkfs+0xcc5>
c0008219:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000821e:	0f 85 c0 fa ff ff    	jne    c0007ce4 <f_mkfs+0xbd1>
c0008224:	e9 af fb ff ff       	jmp    c0007dd8 <f_mkfs+0xcc5>
c0008229:	81 c4 9c 00 00 00    	add    esp,0x9c
c000822f:	89 d8                	mov    eax,ebx
c0008231:	5b                   	pop    ebx
c0008232:	5e                   	pop    esi
c0008233:	5f                   	pop    edi
c0008234:	5d                   	pop    ebp
c0008235:	c3                   	ret    

c0008236 <ff_memalloc>:
c0008236:	83 ec 0c             	sub    esp,0xc
c0008239:	83 ec 0c             	sub    esp,0xc
c000823c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008240:	e8 d9 6e 00 00       	call   c000f11e <malloc>
c0008245:	83 c4 10             	add    esp,0x10
c0008248:	83 c4 0c             	add    esp,0xc
c000824b:	c3                   	ret    

c000824c <ff_memfree>:
c000824c:	83 ec 0c             	sub    esp,0xc
c000824f:	83 ec 0c             	sub    esp,0xc
c0008252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008256:	e8 d3 6e 00 00       	call   c000f12e <free>
c000825b:	83 c4 10             	add    esp,0x10
c000825e:	90                   	nop
c000825f:	83 c4 0c             	add    esp,0xc
c0008262:	c3                   	ret    

c0008263 <ff_uni2oem>:
c0008263:	83 ec 14             	sub    esp,0x14
c0008266:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000826a:	66 89 04 24          	mov    WORD PTR [esp],ax
c000826e:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008275:	c7 44 24 0c 80 61 02 c0 	mov    DWORD PTR [esp+0xc],0xc0026180
c000827d:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008282:	77 0b                	ja     c000828f <ff_uni2oem+0x2c>
c0008284:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008288:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000828d:	eb 5b                	jmp    c00082ea <ff_uni2oem+0x87>
c000828f:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008297:	77 51                	ja     c00082ea <ff_uni2oem+0x87>
c0008299:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000829f:	75 49                	jne    c00082ea <ff_uni2oem+0x87>
c00082a1:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082a8:	eb 0b                	jmp    c00082b5 <ff_uni2oem+0x52>
c00082aa:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082af:	40                   	inc    eax
c00082b0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082b5:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082bb:	77 1b                	ja     c00082d8 <ff_uni2oem+0x75>
c00082bd:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082c2:	01 c0                	add    eax,eax
c00082c4:	89 c2                	mov    edx,eax
c00082c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ca:	01 d0                	add    eax,edx
c00082cc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082cf:	0f b7 c0             	movzx  eax,ax
c00082d2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d6:	75 d2                	jne    c00082aa <ff_uni2oem+0x47>
c00082d8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082dd:	83 e8 80             	sub    eax,0xffffff80
c00082e0:	25 ff 00 00 00       	and    eax,0xff
c00082e5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082ea:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ef:	83 c4 14             	add    esp,0x14
c00082f2:	c3                   	ret    

c00082f3 <ff_oem2uni>:
c00082f3:	83 ec 18             	sub    esp,0x18
c00082f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082fe:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008303:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008307:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000830e:	c7 44 24 10 80 61 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026180
c0008316:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000831c:	77 0b                	ja     c0008329 <ff_oem2uni+0x36>
c000831e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008322:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008327:	eb 2d                	jmp    c0008356 <ff_oem2uni+0x63>
c0008329:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000832f:	75 25                	jne    c0008356 <ff_oem2uni+0x63>
c0008331:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008338:	77 1c                	ja     c0008356 <ff_oem2uni+0x63>
c000833a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000833f:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008344:	01 c0                	add    eax,eax
c0008346:	89 c2                	mov    edx,eax
c0008348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000834c:	01 d0                	add    eax,edx
c000834e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008351:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008356:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000835b:	83 c4 18             	add    esp,0x18
c000835e:	c3                   	ret    

c000835f <ff_wtoupper>:
c000835f:	83 ec 10             	sub    esp,0x10
c0008362:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000836a:	0f 87 3e 01 00 00    	ja     c00084ae <ff_wtoupper+0x14f>
c0008370:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008374:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008379:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008380:	77 07                	ja     c0008389 <ff_wtoupper+0x2a>
c0008382:	b8 80 5f 02 c0       	mov    eax,0xc0025f80
c0008387:	eb 05                	jmp    c000838e <ff_wtoupper+0x2f>
c0008389:	b8 c0 5e 02 c0       	mov    eax,0xc0025ec0
c000838e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008392:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008396:	8d 50 02             	lea    edx,[eax+0x2]
c0008399:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000839d:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083a0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083a5:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083ab:	0f 84 f4 00 00 00    	je     c00084a5 <ff_wtoupper+0x146>
c00083b1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083b6:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083bb:	0f 82 e4 00 00 00    	jb     c00084a5 <ff_wtoupper+0x146>
c00083c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c5:	8d 50 02             	lea    edx,[eax+0x2]
c00083c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083cc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083cf:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d4:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083d9:	66 c1 e8 08          	shr    ax,0x8
c00083dd:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e2:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083e9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083ee:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00083f3:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00083f8:	01 ca                	add    edx,ecx
c00083fa:	39 d0                	cmp    eax,edx
c00083fc:	0f 8d 86 00 00 00    	jge    c0008488 <ff_wtoupper+0x129>
c0008402:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008407:	83 f8 08             	cmp    eax,0x8
c000840a:	0f 87 94 00 00 00    	ja     c00084a4 <ff_wtoupper+0x145>
c0008410:	8b 04 85 80 5e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda180]
c0008417:	ff e0                	jmp    eax
c0008419:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000841e:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008423:	29 c2                	sub    edx,eax
c0008425:	89 d0                	mov    eax,edx
c0008427:	01 c0                	add    eax,eax
c0008429:	89 c2                	mov    edx,eax
c000842b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000842f:	01 d0                	add    eax,edx
c0008431:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008434:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008439:	eb 4b                	jmp    c0008486 <ff_wtoupper+0x127>
c000843b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008440:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008444:	83 e0 01             	and    eax,0x1
c0008447:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000844c:	eb 38                	jmp    c0008486 <ff_wtoupper+0x127>
c000844e:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008454:	eb 30                	jmp    c0008486 <ff_wtoupper+0x127>
c0008456:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000845c:	eb 28                	jmp    c0008486 <ff_wtoupper+0x127>
c000845e:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008464:	eb 20                	jmp    c0008486 <ff_wtoupper+0x127>
c0008466:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000846c:	eb 18                	jmp    c0008486 <ff_wtoupper+0x127>
c000846e:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008474:	eb 10                	jmp    c0008486 <ff_wtoupper+0x127>
c0008476:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000847c:	eb 08                	jmp    c0008486 <ff_wtoupper+0x127>
c000847e:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008485:	90                   	nop
c0008486:	eb 1c                	jmp    c00084a4 <ff_wtoupper+0x145>
c0008488:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000848e:	0f 85 fe fe ff ff    	jne    c0008392 <ff_wtoupper+0x33>
c0008494:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008499:	01 c0                	add    eax,eax
c000849b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000849f:	e9 ee fe ff ff       	jmp    c0008392 <ff_wtoupper+0x33>
c00084a4:	90                   	nop
c00084a5:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084b2:	83 c4 10             	add    esp,0x10
c00084b5:	c3                   	ret    

c00084b6 <is_bad_src_ratio>:
c00084b6:	83 ec 1c             	sub    esp,0x1c
c00084b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00084c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00084c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00084c9:	b8 00 00 00 00       	mov    eax,0x0
c00084ce:	ba 00 00 70 3f       	mov    edx,0x3f700000
c00084d3:	52                   	push   edx
c00084d4:	50                   	push   eax
c00084d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00084d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00084dd:	e8 4d ca 01 00       	call   c0024f2f <__ltdf2>
c00084e2:	83 c4 10             	add    esp,0x10
c00084e5:	85 c0                	test   eax,eax
c00084e7:	78 20                	js     c0008509 <is_bad_src_ratio+0x53>
c00084e9:	b8 00 00 00 00       	mov    eax,0x0
c00084ee:	ba 00 00 70 40       	mov    edx,0x40700000
c00084f3:	52                   	push   edx
c00084f4:	50                   	push   eax
c00084f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00084f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00084fd:	e8 0f ca 01 00       	call   c0024f11 <__gtdf2>
c0008502:	83 c4 10             	add    esp,0x10
c0008505:	85 c0                	test   eax,eax
c0008507:	7e 07                	jle    c0008510 <is_bad_src_ratio+0x5a>
c0008509:	b8 01 00 00 00       	mov    eax,0x1
c000850e:	eb 05                	jmp    c0008515 <is_bad_src_ratio+0x5f>
c0008510:	b8 00 00 00 00       	mov    eax,0x0
c0008515:	83 c4 1c             	add    esp,0x1c
c0008518:	c3                   	ret    

c0008519 <psrc_set_converter>:
c0008519:	56                   	push   esi
c000851a:	89 d6                	mov    esi,edx
c000851c:	53                   	push   ebx
c000851d:	89 c3                	mov    ebx,eax
c000851f:	83 ec 0c             	sub    esp,0xc
c0008522:	52                   	push   edx
c0008523:	50                   	push   eax
c0008524:	e8 58 51 00 00       	call   c000d681 <sinc_set_converter>
c0008529:	83 c4 10             	add    esp,0x10
c000852c:	85 c0                	test   eax,eax
c000852e:	74 25                	je     c0008555 <psrc_set_converter+0x3c>
c0008530:	50                   	push   eax
c0008531:	50                   	push   eax
c0008532:	56                   	push   esi
c0008533:	53                   	push   ebx
c0008534:	e8 2a 59 00 00       	call   c000de63 <zoh_set_converter>
c0008539:	83 c4 10             	add    esp,0x10
c000853c:	85 c0                	test   eax,eax
c000853e:	74 15                	je     c0008555 <psrc_set_converter+0x3c>
c0008540:	51                   	push   ecx
c0008541:	51                   	push   ecx
c0008542:	56                   	push   esi
c0008543:	53                   	push   ebx
c0008544:	e8 77 10 00 00       	call   c00095c0 <linear_set_converter>
c0008549:	83 c4 10             	add    esp,0x10
c000854c:	ba 0a 00 00 00       	mov    edx,0xa
c0008551:	85 c0                	test   eax,eax
c0008553:	75 02                	jne    c0008557 <psrc_set_converter+0x3e>
c0008555:	31 d2                	xor    edx,edx
c0008557:	89 d0                	mov    eax,edx
c0008559:	5a                   	pop    edx
c000855a:	5b                   	pop    ebx
c000855b:	5e                   	pop    esi
c000855c:	c3                   	ret    

c000855d <src_delete>:
c000855d:	53                   	push   ebx
c000855e:	83 ec 08             	sub    esp,0x8
c0008561:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008565:	85 db                	test   ebx,ebx
c0008567:	74 29                	je     c0008592 <src_delete+0x35>
c0008569:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000856c:	85 c0                	test   eax,eax
c000856e:	74 0c                	je     c000857c <src_delete+0x1f>
c0008570:	83 ec 0c             	sub    esp,0xc
c0008573:	50                   	push   eax
c0008574:	e8 b5 6b 00 00       	call   c000f12e <free>
c0008579:	83 c4 10             	add    esp,0x10
c000857c:	50                   	push   eax
c000857d:	6a 3c                	push   0x3c
c000857f:	6a 00                	push   0x0
c0008581:	53                   	push   ebx
c0008582:	e8 f6 80 ff ff       	call   c000067d <memset>
c0008587:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000858a:	e8 9f 6b 00 00       	call   c000f12e <free>
c000858f:	83 c4 10             	add    esp,0x10
c0008592:	31 c0                	xor    eax,eax
c0008594:	83 c4 08             	add    esp,0x8
c0008597:	5b                   	pop    ebx
c0008598:	c3                   	ret    

c0008599 <src_process>:
c0008599:	56                   	push   esi
c000859a:	53                   	push   ebx
c000859b:	83 ec 14             	sub    esp,0x14
c000859e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00085a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00085a6:	85 f6                	test   esi,esi
c00085a8:	0f 84 2a 01 00 00    	je     c00086d8 <src_process+0x13f>
c00085ae:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085b2:	0f 84 27 01 00 00    	je     c00086df <src_process+0x146>
c00085b8:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085bc:	0f 84 1d 01 00 00    	je     c00086df <src_process+0x146>
c00085c2:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085c9:	0f 85 17 01 00 00    	jne    c00086e6 <src_process+0x14d>
c00085cf:	85 db                	test   ebx,ebx
c00085d1:	0f 84 16 01 00 00    	je     c00086ed <src_process+0x154>
c00085d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085da:	0f 84 14 01 00 00    	je     c00086f4 <src_process+0x15b>
c00085e0:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c00085e4:	0f 84 0a 01 00 00    	je     c00086f4 <src_process+0x15b>
c00085ea:	50                   	push   eax
c00085eb:	50                   	push   eax
c00085ec:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00085ef:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00085f2:	e8 bf fe ff ff       	call   c00084b6 <is_bad_src_ratio>
c00085f7:	83 c4 10             	add    esp,0x10
c00085fa:	85 c0                	test   eax,eax
c00085fc:	0f 85 f9 00 00 00    	jne    c00086fb <src_process+0x162>
c0008602:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008606:	79 07                	jns    c000860f <src_process+0x76>
c0008608:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000860f:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008613:	79 07                	jns    c000861c <src_process+0x83>
c0008615:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000861c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000861e:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008621:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008624:	39 ca                	cmp    edx,ecx
c0008626:	73 0b                	jae    c0008633 <src_process+0x9a>
c0008628:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c000862c:	8d 04 82             	lea    eax,[edx+eax*4]
c000862f:	39 c1                	cmp    ecx,eax
c0008631:	eb 09                	jmp    c000863c <src_process+0xa3>
c0008633:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008637:	8d 04 81             	lea    eax,[ecx+eax*4]
c000863a:	39 c2                	cmp    edx,eax
c000863c:	0f 82 c0 00 00 00    	jb     c0008702 <src_process+0x169>
c0008642:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008649:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008650:	68 00 00 70 3f       	push   0x3f700000
c0008655:	6a 00                	push   0x0
c0008657:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000865a:	ff 36                	push   DWORD PTR [esi]
c000865c:	e8 ce c8 01 00       	call   c0024f2f <__ltdf2>
c0008661:	83 c4 10             	add    esp,0x10
c0008664:	85 c0                	test   eax,eax
c0008666:	79 0b                	jns    c0008673 <src_process+0xda>
c0008668:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000866b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000866e:	89 06                	mov    DWORD PTR [esi],eax
c0008670:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0008673:	83 ec 10             	sub    esp,0x10
c0008676:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008679:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000867c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000867f:	ff 36                	push   DWORD PTR [esi]
c0008681:	e8 ae bf 01 00       	call   c0024634 <__subdf3>
c0008686:	83 c4 18             	add    esp,0x18
c0008689:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000868d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008691:	52                   	push   edx
c0008692:	50                   	push   eax
c0008693:	e8 28 ca 01 00       	call   c00250c0 <fabs>
c0008698:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000869c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086a0:	83 c4 10             	add    esp,0x10
c00086a3:	68 af 03 d2 3c       	push   0x3cd203af
c00086a8:	68 16 56 e7 9e       	push   0x9ee75616
c00086ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086b5:	e8 75 c8 01 00       	call   c0024f2f <__ltdf2>
c00086ba:	83 c4 10             	add    esp,0x10
c00086bd:	85 c0                	test   eax,eax
c00086bf:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00086c3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00086c7:	79 05                	jns    c00086ce <src_process+0x135>
c00086c9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00086cc:	eb 03                	jmp    c00086d1 <src_process+0x138>
c00086ce:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00086d1:	83 c4 14             	add    esp,0x14
c00086d4:	5b                   	pop    ebx
c00086d5:	5e                   	pop    esi
c00086d6:	ff e0                	jmp    eax
c00086d8:	b8 02 00 00 00       	mov    eax,0x2
c00086dd:	eb 28                	jmp    c0008707 <src_process+0x16e>
c00086df:	b8 07 00 00 00       	mov    eax,0x7
c00086e4:	eb 21                	jmp    c0008707 <src_process+0x16e>
c00086e6:	b8 12 00 00 00       	mov    eax,0x12
c00086eb:	eb 1a                	jmp    c0008707 <src_process+0x16e>
c00086ed:	b8 03 00 00 00       	mov    eax,0x3
c00086f2:	eb 13                	jmp    c0008707 <src_process+0x16e>
c00086f4:	b8 04 00 00 00       	mov    eax,0x4
c00086f9:	eb 0c                	jmp    c0008707 <src_process+0x16e>
c00086fb:	b8 06 00 00 00       	mov    eax,0x6
c0008700:	eb 05                	jmp    c0008707 <src_process+0x16e>
c0008702:	b8 10 00 00 00       	mov    eax,0x10
c0008707:	83 c4 14             	add    esp,0x14
c000870a:	5b                   	pop    ebx
c000870b:	5e                   	pop    esi
c000870c:	c3                   	ret    

c000870d <src_callback_read>:
c000870d:	55                   	push   ebp
c000870e:	57                   	push   edi
c000870f:	56                   	push   esi
c0008710:	53                   	push   ebx
c0008711:	83 ec 3c             	sub    esp,0x3c
c0008714:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008718:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000871c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008720:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008724:	85 ed                	test   ebp,ebp
c0008726:	0f 8e 30 01 00 00    	jle    c000885c <src_callback_read+0x14f>
c000872c:	85 db                	test   ebx,ebx
c000872e:	0f 84 28 01 00 00    	je     c000885c <src_callback_read+0x14f>
c0008734:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000873b:	74 0c                	je     c0008749 <src_callback_read+0x3c>
c000873d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008744:	e9 13 01 00 00       	jmp    c000885c <src_callback_read+0x14f>
c0008749:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000874d:	75 0c                	jne    c000875b <src_callback_read+0x4e>
c000874f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008756:	e9 01 01 00 00       	jmp    c000885c <src_callback_read+0x14f>
c000875b:	51                   	push   ecx
c000875c:	6a 24                	push   0x24
c000875e:	6a 00                	push   0x0
c0008760:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008764:	50                   	push   eax
c0008765:	e8 13 7f ff ff       	call   c000067d <memset>
c000876a:	58                   	pop    eax
c000876b:	5a                   	pop    edx
c000876c:	57                   	push   edi
c000876d:	56                   	push   esi
c000876e:	e8 43 fd ff ff       	call   c00084b6 <is_bad_src_ratio>
c0008773:	83 c4 10             	add    esp,0x10
c0008776:	85 c0                	test   eax,eax
c0008778:	74 0c                	je     c0008786 <src_callback_read+0x79>
c000877a:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008781:	e9 d6 00 00 00       	jmp    c000885c <src_callback_read+0x14f>
c0008786:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000878a:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008792:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008796:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008799:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087a1:	31 f6                	xor    esi,esi
c00087a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087aa:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00087af:	75 30                	jne    c00087e1 <src_callback_read+0xd4>
c00087b1:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	52                   	push   edx
c00087ba:	52                   	push   edx
c00087bb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087bf:	50                   	push   eax
c00087c0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087c3:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087ca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087d2:	83 c4 10             	add    esp,0x10
c00087d5:	85 c0                	test   eax,eax
c00087d7:	75 08                	jne    c00087e1 <src_callback_read+0xd4>
c00087d9:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e1:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087e8:	50                   	push   eax
c00087e9:	50                   	push   eax
c00087ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087ee:	50                   	push   eax
c00087ef:	53                   	push   ebx
c00087f0:	e8 a4 fd ff ff       	call   c0008599 <src_process>
c00087f5:	83 c4 10             	add    esp,0x10
c00087f8:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087ff:	85 c0                	test   eax,eax
c0008801:	75 42                	jne    c0008845 <src_callback_read+0x138>
c0008803:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008807:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000880a:	89 f9                	mov    ecx,edi
c000880c:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008810:	0f af ca             	imul   ecx,edx
c0008813:	c1 e1 02             	shl    ecx,0x2
c0008816:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c000881a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000881e:	0f af d1             	imul   edx,ecx
c0008821:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008825:	c1 e2 02             	shl    edx,0x2
c0008828:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c000882c:	8d 14 31             	lea    edx,[ecx+esi*1]
c000882f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008834:	75 04                	jne    c000883a <src_callback_read+0x12d>
c0008836:	85 c9                	test   ecx,ecx
c0008838:	74 0b                	je     c0008845 <src_callback_read+0x138>
c000883a:	39 d5                	cmp    ebp,edx
c000883c:	7e 09                	jle    c0008847 <src_callback_read+0x13a>
c000883e:	89 d6                	mov    esi,edx
c0008840:	e9 65 ff ff ff       	jmp    c00087aa <src_callback_read+0x9d>
c0008845:	89 f2                	mov    edx,esi
c0008847:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000884b:	85 c0                	test   eax,eax
c000884d:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008850:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008854:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008857:	74 05                	je     c000885e <src_callback_read+0x151>
c0008859:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000885c:	31 d2                	xor    edx,edx
c000885e:	83 c4 3c             	add    esp,0x3c
c0008861:	89 d0                	mov    eax,edx
c0008863:	5b                   	pop    ebx
c0008864:	5e                   	pop    esi
c0008865:	5f                   	pop    edi
c0008866:	5d                   	pop    ebp
c0008867:	c3                   	ret    

c0008868 <src_set_ratio>:
c0008868:	57                   	push   edi
c0008869:	b8 02 00 00 00       	mov    eax,0x2
c000886e:	56                   	push   esi
c000886f:	53                   	push   ebx
c0008870:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008874:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008878:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000887c:	85 db                	test   ebx,ebx
c000887e:	74 2d                	je     c00088ad <src_set_ratio+0x45>
c0008880:	b8 07 00 00 00       	mov    eax,0x7
c0008885:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008889:	74 22                	je     c00088ad <src_set_ratio+0x45>
c000888b:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000888f:	74 1c                	je     c00088ad <src_set_ratio+0x45>
c0008891:	50                   	push   eax
c0008892:	50                   	push   eax
c0008893:	57                   	push   edi
c0008894:	56                   	push   esi
c0008895:	e8 1c fc ff ff       	call   c00084b6 <is_bad_src_ratio>
c000889a:	83 c4 10             	add    esp,0x10
c000889d:	85 c0                	test   eax,eax
c000889f:	75 07                	jne    c00088a8 <src_set_ratio+0x40>
c00088a1:	89 33                	mov    DWORD PTR [ebx],esi
c00088a3:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088a6:	eb 05                	jmp    c00088ad <src_set_ratio+0x45>
c00088a8:	b8 06 00 00 00       	mov    eax,0x6
c00088ad:	5b                   	pop    ebx
c00088ae:	5e                   	pop    esi
c00088af:	5f                   	pop    edi
c00088b0:	c3                   	ret    

c00088b1 <src_get_channels>:
c00088b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088b5:	b8 02 00 00 00       	mov    eax,0x2
c00088ba:	85 d2                	test   edx,edx
c00088bc:	74 14                	je     c00088d2 <src_get_channels+0x21>
c00088be:	b8 07 00 00 00       	mov    eax,0x7
c00088c3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088c7:	74 09                	je     c00088d2 <src_get_channels+0x21>
c00088c9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088cd:	74 03                	je     c00088d2 <src_get_channels+0x21>
c00088cf:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088d2:	c3                   	ret    

c00088d3 <src_reset>:
c00088d3:	53                   	push   ebx
c00088d4:	b8 02 00 00 00       	mov    eax,0x2
c00088d9:	83 ec 08             	sub    esp,0x8
c00088dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088e0:	85 db                	test   ebx,ebx
c00088e2:	74 36                	je     c000891a <src_reset+0x47>
c00088e4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088e7:	85 c0                	test   eax,eax
c00088e9:	74 09                	je     c00088f4 <src_reset+0x21>
c00088eb:	83 ec 0c             	sub    esp,0xc
c00088ee:	53                   	push   ebx
c00088ef:	ff d0                	call   eax
c00088f1:	83 c4 10             	add    esp,0x10
c00088f4:	31 c0                	xor    eax,eax
c00088f6:	31 d2                	xor    edx,edx
c00088f8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00088fb:	89 03                	mov    DWORD PTR [ebx],eax
c00088fd:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008900:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008903:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000890a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008911:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008918:	31 c0                	xor    eax,eax
c000891a:	83 c4 08             	add    esp,0x8
c000891d:	5b                   	pop    ebx
c000891e:	c3                   	ret    

c000891f <src_new>:
c000891f:	57                   	push   edi
c0008920:	56                   	push   esi
c0008921:	53                   	push   ebx
c0008922:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008926:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000892a:	85 f6                	test   esi,esi
c000892c:	74 73                	je     c00089a1 <src_new+0x82>
c000892e:	85 ff                	test   edi,edi
c0008930:	7f 08                	jg     c000893a <src_new+0x1b>
c0008932:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008938:	eb 1e                	jmp    c0008958 <src_new+0x39>
c000893a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008940:	50                   	push   eax
c0008941:	50                   	push   eax
c0008942:	6a 3c                	push   0x3c
c0008944:	6a 01                	push   0x1
c0008946:	e8 03 68 00 00       	call   c000f14e <calloc>
c000894b:	83 c4 10             	add    esp,0x10
c000894e:	89 c3                	mov    ebx,eax
c0008950:	85 c0                	test   eax,eax
c0008952:	75 10                	jne    c0008964 <src_new+0x45>
c0008954:	85 f6                	test   esi,esi
c0008956:	75 04                	jne    c000895c <src_new+0x3d>
c0008958:	31 db                	xor    ebx,ebx
c000895a:	eb 4b                	jmp    c00089a7 <src_new+0x88>
c000895c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008962:	eb 43                	jmp    c00089a7 <src_new+0x88>
c0008964:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008967:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000896e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008972:	e8 a2 fb ff ff       	call   c0008519 <psrc_set_converter>
c0008977:	85 c0                	test   eax,eax
c0008979:	74 18                	je     c0008993 <src_new+0x74>
c000897b:	85 f6                	test   esi,esi
c000897d:	74 06                	je     c0008985 <src_new+0x66>
c000897f:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008985:	83 ec 0c             	sub    esp,0xc
c0008988:	53                   	push   ebx
c0008989:	31 db                	xor    ebx,ebx
c000898b:	e8 9e 67 00 00       	call   c000f12e <free>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	83 ec 0c             	sub    esp,0xc
c0008996:	53                   	push   ebx
c0008997:	e8 37 ff ff ff       	call   c00088d3 <src_reset>
c000899c:	83 c4 10             	add    esp,0x10
c000899f:	eb 06                	jmp    c00089a7 <src_new+0x88>
c00089a1:	85 ff                	test   edi,edi
c00089a3:	7f 9b                	jg     c0008940 <src_new+0x21>
c00089a5:	eb b1                	jmp    c0008958 <src_new+0x39>
c00089a7:	89 d8                	mov    eax,ebx
c00089a9:	5b                   	pop    ebx
c00089aa:	5e                   	pop    esi
c00089ab:	5f                   	pop    edi
c00089ac:	c3                   	ret    

c00089ad <src_callback_new>:
c00089ad:	56                   	push   esi
c00089ae:	53                   	push   ebx
c00089af:	53                   	push   ebx
c00089b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089b8:	85 f6                	test   esi,esi
c00089ba:	75 0e                	jne    c00089ca <src_callback_new+0x1d>
c00089bc:	31 db                	xor    ebx,ebx
c00089be:	85 c0                	test   eax,eax
c00089c0:	74 47                	je     c0008a09 <src_callback_new+0x5c>
c00089c2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089c8:	eb 3f                	jmp    c0008a09 <src_callback_new+0x5c>
c00089ca:	85 c0                	test   eax,eax
c00089cc:	74 06                	je     c00089d4 <src_callback_new+0x27>
c00089ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089d4:	51                   	push   ecx
c00089d5:	50                   	push   eax
c00089d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089de:	e8 3c ff ff ff       	call   c000891f <src_new>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	89 c3                	mov    ebx,eax
c00089e8:	85 c0                	test   eax,eax
c00089ea:	74 1d                	je     c0008a09 <src_callback_new+0x5c>
c00089ec:	83 ec 0c             	sub    esp,0xc
c00089ef:	50                   	push   eax
c00089f0:	e8 de fe ff ff       	call   c00088d3 <src_reset>
c00089f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089f9:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a00:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a03:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a06:	83 c4 10             	add    esp,0x10
c0008a09:	89 d8                	mov    eax,ebx
c0008a0b:	5a                   	pop    edx
c0008a0c:	5b                   	pop    ebx
c0008a0d:	5e                   	pop    esi
c0008a0e:	c3                   	ret    

c0008a0f <src_get_name>:
c0008a0f:	53                   	push   ebx
c0008a10:	83 ec 14             	sub    esp,0x14
c0008a13:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a17:	53                   	push   ebx
c0008a18:	e8 3e 4c 00 00       	call   c000d65b <sinc_get_name>
c0008a1d:	83 c4 10             	add    esp,0x10
c0008a20:	85 c0                	test   eax,eax
c0008a22:	75 1d                	jne    c0008a41 <src_get_name+0x32>
c0008a24:	83 ec 0c             	sub    esp,0xc
c0008a27:	53                   	push   ebx
c0008a28:	e8 18 54 00 00       	call   c000de45 <zoh_get_name>
c0008a2d:	83 c4 10             	add    esp,0x10
c0008a30:	85 c0                	test   eax,eax
c0008a32:	75 0d                	jne    c0008a41 <src_get_name+0x32>
c0008a34:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a38:	83 c4 08             	add    esp,0x8
c0008a3b:	5b                   	pop    ebx
c0008a3c:	e9 61 0b 00 00       	jmp    c00095a2 <linear_get_name>
c0008a41:	83 c4 08             	add    esp,0x8
c0008a44:	5b                   	pop    ebx
c0008a45:	c3                   	ret    

c0008a46 <src_get_description>:
c0008a46:	53                   	push   ebx
c0008a47:	83 ec 14             	sub    esp,0x14
c0008a4a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a4e:	53                   	push   ebx
c0008a4f:	e8 1a 4c 00 00       	call   c000d66e <sinc_get_description>
c0008a54:	83 c4 10             	add    esp,0x10
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 1d                	jne    c0008a78 <src_get_description+0x32>
c0008a5b:	83 ec 0c             	sub    esp,0xc
c0008a5e:	53                   	push   ebx
c0008a5f:	e8 f0 53 00 00       	call   c000de54 <zoh_get_description>
c0008a64:	83 c4 10             	add    esp,0x10
c0008a67:	85 c0                	test   eax,eax
c0008a69:	75 0d                	jne    c0008a78 <src_get_description+0x32>
c0008a6b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a6f:	83 c4 08             	add    esp,0x8
c0008a72:	5b                   	pop    ebx
c0008a73:	e9 39 0b 00 00       	jmp    c00095b1 <linear_get_description>
c0008a78:	83 c4 08             	add    esp,0x8
c0008a7b:	5b                   	pop    ebx
c0008a7c:	c3                   	ret    

c0008a7d <src_get_version>:
c0008a7d:	b8 80 62 02 c0       	mov    eax,0xc0026280
c0008a82:	c3                   	ret    

c0008a83 <src_is_valid_ratio>:
c0008a83:	83 ec 14             	sub    esp,0x14
c0008a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a8e:	e8 23 fa ff ff       	call   c00084b6 <is_bad_src_ratio>
c0008a93:	85 c0                	test   eax,eax
c0008a95:	0f 94 c0             	sete   al
c0008a98:	83 c4 1c             	add    esp,0x1c
c0008a9b:	0f b6 c0             	movzx  eax,al
c0008a9e:	c3                   	ret    

c0008a9f <src_error>:
c0008a9f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008aa3:	31 c0                	xor    eax,eax
c0008aa5:	85 d2                	test   edx,edx
c0008aa7:	74 03                	je     c0008aac <src_error+0xd>
c0008aa9:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008aac:	c3                   	ret    

c0008aad <src_strerror>:
c0008aad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008ab1:	31 c0                	xor    eax,eax
c0008ab3:	83 fa 17             	cmp    edx,0x17
c0008ab6:	77 07                	ja     c0008abf <src_strerror+0x12>
c0008ab8:	8b 04 95 e0 66 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9920]
c0008abf:	c3                   	ret    

c0008ac0 <src_simple>:
c0008ac0:	56                   	push   esi
c0008ac1:	53                   	push   ebx
c0008ac2:	83 ec 18             	sub    esp,0x18
c0008ac5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008ac9:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008acd:	50                   	push   eax
c0008ace:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008ad2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008ad6:	e8 44 fe ff ff       	call   c000891f <src_new>
c0008adb:	83 c4 10             	add    esp,0x10
c0008ade:	85 c0                	test   eax,eax
c0008ae0:	75 06                	jne    c0008ae8 <src_simple+0x28>
c0008ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008ae6:	eb 25                	jmp    c0008b0d <src_simple+0x4d>
c0008ae8:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008aef:	89 c3                	mov    ebx,eax
c0008af1:	50                   	push   eax
c0008af2:	50                   	push   eax
c0008af3:	56                   	push   esi
c0008af4:	53                   	push   ebx
c0008af5:	e8 9f fa ff ff       	call   c0008599 <src_process>
c0008afa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008afd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b01:	e8 57 fa ff ff       	call   c000855d <src_delete>
c0008b06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b0a:	83 c4 10             	add    esp,0x10
c0008b0d:	83 c4 14             	add    esp,0x14
c0008b10:	5b                   	pop    ebx
c0008b11:	5e                   	pop    esi
c0008b12:	c3                   	ret    

c0008b13 <src_short_to_float_array>:
c0008b13:	53                   	push   ebx
c0008b14:	83 ec 18             	sub    esp,0x18
c0008b17:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b1b:	85 db                	test   ebx,ebx
c0008b1d:	74 54                	je     c0008b73 <src_short_to_float_array+0x60>
c0008b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b23:	4b                   	dec    ebx
c0008b24:	83 ec 0c             	sub    esp,0xc
c0008b27:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b2b:	50                   	push   eax
c0008b2c:	e8 92 c1 01 00       	call   c0024cc3 <__floatsidf>
c0008b31:	83 c4 10             	add    esp,0x10
c0008b34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008b3c:	68 00 00 00 3f       	push   0x3f000000
c0008b41:	6a 00                	push   0x0
c0008b43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b4b:	e8 10 bb 01 00       	call   c0024660 <__muldf3>
c0008b50:	59                   	pop    ecx
c0008b51:	59                   	pop    ecx
c0008b52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008b56:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008b5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b62:	e8 cc c3 01 00       	call   c0024f33 <__truncdfsf2>
c0008b67:	83 c4 10             	add    esp,0x10
c0008b6a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008b6e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008b71:	eb a8                	jmp    c0008b1b <src_short_to_float_array+0x8>
c0008b73:	83 c4 18             	add    esp,0x18
c0008b76:	5b                   	pop    ebx
c0008b77:	c3                   	ret    

c0008b78 <src_float_to_short_array>:
c0008b78:	56                   	push   esi
c0008b79:	53                   	push   ebx
c0008b7a:	83 ec 14             	sub    esp,0x14
c0008b7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b81:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b85:	85 db                	test   ebx,ebx
c0008b87:	0f 84 a4 00 00 00    	je     c0008c31 <src_float_to_short_array+0xb9>
c0008b8d:	83 ec 0c             	sub    esp,0xc
c0008b90:	4b                   	dec    ebx
c0008b91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008b95:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008b98:	e8 ba c4 01 00       	call   c0025057 <__extendsfdf2>
c0008b9d:	83 c4 10             	add    esp,0x10
c0008ba0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba8:	68 00 00 e0 41       	push   0x41e00000
c0008bad:	6a 00                	push   0x0
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb7:	e8 a4 ba 01 00       	call   c0024660 <__muldf3>
c0008bbc:	83 c4 10             	add    esp,0x10
c0008bbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bc7:	68 ff ff df 41       	push   0x41dfffff
c0008bcc:	68 00 00 c0 ff       	push   0xffc00000
c0008bd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bd9:	e8 4f c3 01 00       	call   c0024f2d <__gedf2>
c0008bde:	83 c4 10             	add    esp,0x10
c0008be1:	85 c0                	test   eax,eax
c0008be3:	78 08                	js     c0008bed <src_float_to_short_array+0x75>
c0008be5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008beb:	eb 98                	jmp    c0008b85 <src_float_to_short_array+0xd>
c0008bed:	68 00 00 e0 c1       	push   0xc1e00000
c0008bf2:	6a 00                	push   0x0
c0008bf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bfc:	e8 30 c3 01 00       	call   c0024f31 <__ledf2>
c0008c01:	83 c4 10             	add    esp,0x10
c0008c04:	85 c0                	test   eax,eax
c0008c06:	7f 0b                	jg     c0008c13 <src_float_to_short_array+0x9b>
c0008c08:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c0e:	e9 72 ff ff ff       	jmp    c0008b85 <src_float_to_short_array+0xd>
c0008c13:	50                   	push   eax
c0008c14:	50                   	push   eax
c0008c15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1d:	e8 be c4 01 00       	call   c00250e0 <lrint>
c0008c22:	83 c4 10             	add    esp,0x10
c0008c25:	c1 f8 10             	sar    eax,0x10
c0008c28:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c2c:	e9 54 ff ff ff       	jmp    c0008b85 <src_float_to_short_array+0xd>
c0008c31:	83 c4 14             	add    esp,0x14
c0008c34:	5b                   	pop    ebx
c0008c35:	5e                   	pop    esi
c0008c36:	c3                   	ret    

c0008c37 <src_int_to_float_array>:
c0008c37:	53                   	push   ebx
c0008c38:	83 ec 18             	sub    esp,0x18
c0008c3b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c3f:	85 db                	test   ebx,ebx
c0008c41:	74 52                	je     c0008c95 <src_int_to_float_array+0x5e>
c0008c43:	83 ec 0c             	sub    esp,0xc
c0008c46:	4b                   	dec    ebx
c0008c47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c4b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c4e:	e8 70 c0 01 00       	call   c0024cc3 <__floatsidf>
c0008c53:	83 c4 10             	add    esp,0x10
c0008c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c5e:	68 00 00 00 3e       	push   0x3e000000
c0008c63:	6a 00                	push   0x0
c0008c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c6d:	e8 ee b9 01 00       	call   c0024660 <__muldf3>
c0008c72:	59                   	pop    ecx
c0008c73:	59                   	pop    ecx
c0008c74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008c78:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c84:	e8 aa c2 01 00       	call   c0024f33 <__truncdfsf2>
c0008c89:	83 c4 10             	add    esp,0x10
c0008c8c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008c90:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008c93:	eb aa                	jmp    c0008c3f <src_int_to_float_array+0x8>
c0008c95:	83 c4 18             	add    esp,0x18
c0008c98:	5b                   	pop    ebx
c0008c99:	c3                   	ret    

c0008c9a <src_float_to_int_array>:
c0008c9a:	56                   	push   esi
c0008c9b:	53                   	push   ebx
c0008c9c:	83 ec 14             	sub    esp,0x14
c0008c9f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	0f 84 a2 00 00 00    	je     c0008d51 <src_float_to_int_array+0xb7>
c0008caf:	83 ec 0c             	sub    esp,0xc
c0008cb2:	4b                   	dec    ebx
c0008cb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb7:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cba:	e8 98 c3 01 00       	call   c0025057 <__extendsfdf2>
c0008cbf:	83 c4 10             	add    esp,0x10
c0008cc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cca:	68 00 00 e0 41       	push   0x41e00000
c0008ccf:	6a 00                	push   0x0
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd9:	e8 82 b9 01 00       	call   c0024660 <__muldf3>
c0008cde:	83 c4 10             	add    esp,0x10
c0008ce1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ce5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ce9:	68 ff ff df 41       	push   0x41dfffff
c0008cee:	68 00 00 c0 ff       	push   0xffc00000
c0008cf3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cfb:	e8 2d c2 01 00       	call   c0024f2d <__gedf2>
c0008d00:	83 c4 10             	add    esp,0x10
c0008d03:	85 c0                	test   eax,eax
c0008d05:	78 09                	js     c0008d10 <src_float_to_int_array+0x76>
c0008d07:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d0e:	eb 97                	jmp    c0008ca7 <src_float_to_int_array+0xd>
c0008d10:	68 00 00 e0 c1       	push   0xc1e00000
c0008d15:	6a 00                	push   0x0
c0008d17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d1f:	e8 0d c2 01 00       	call   c0024f31 <__ledf2>
c0008d24:	83 c4 10             	add    esp,0x10
c0008d27:	85 c0                	test   eax,eax
c0008d29:	7f 0c                	jg     c0008d37 <src_float_to_int_array+0x9d>
c0008d2b:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d32:	e9 70 ff ff ff       	jmp    c0008ca7 <src_float_to_int_array+0xd>
c0008d37:	50                   	push   eax
c0008d38:	50                   	push   eax
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 9a c3 01 00       	call   c00250e0 <lrint>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008d4c:	e9 56 ff ff ff       	jmp    c0008ca7 <src_float_to_int_array+0xd>
c0008d51:	83 c4 14             	add    esp,0x14
c0008d54:	5b                   	pop    ebx
c0008d55:	5e                   	pop    esi
c0008d56:	c3                   	ret    

c0008d57 <is_bad_src_ratio>:
c0008d57:	83 ec 1c             	sub    esp,0x1c
c0008d5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d62:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d6a:	b8 00 00 00 00       	mov    eax,0x0
c0008d6f:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0008d74:	52                   	push   edx
c0008d75:	50                   	push   eax
c0008d76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d7e:	e8 ac c1 01 00       	call   c0024f2f <__ltdf2>
c0008d83:	83 c4 10             	add    esp,0x10
c0008d86:	85 c0                	test   eax,eax
c0008d88:	78 20                	js     c0008daa <is_bad_src_ratio+0x53>
c0008d8a:	b8 00 00 00 00       	mov    eax,0x0
c0008d8f:	ba 00 00 70 40       	mov    edx,0x40700000
c0008d94:	52                   	push   edx
c0008d95:	50                   	push   eax
c0008d96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9e:	e8 6e c1 01 00       	call   c0024f11 <__gtdf2>
c0008da3:	83 c4 10             	add    esp,0x10
c0008da6:	85 c0                	test   eax,eax
c0008da8:	7e 07                	jle    c0008db1 <is_bad_src_ratio+0x5a>
c0008daa:	b8 01 00 00 00       	mov    eax,0x1
c0008daf:	eb 05                	jmp    c0008db6 <is_bad_src_ratio+0x5f>
c0008db1:	b8 00 00 00 00       	mov    eax,0x0
c0008db6:	83 c4 1c             	add    esp,0x1c
c0008db9:	c3                   	ret    

c0008dba <fmod_one>:
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008dc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dc5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008dc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008dcd:	83 ec 08             	sub    esp,0x8
c0008dd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dd8:	e8 03 c3 01 00       	call   c00250e0 <lrint>
c0008ddd:	83 c4 10             	add    esp,0x10
c0008de0:	83 ec 0c             	sub    esp,0xc
c0008de3:	50                   	push   eax
c0008de4:	e8 da be 01 00       	call   c0024cc3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	52                   	push   edx
c0008ded:	50                   	push   eax
c0008dee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008df2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008df6:	e8 39 b8 01 00       	call   c0024634 <__subdf3>
c0008dfb:	83 c4 10             	add    esp,0x10
c0008dfe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008e02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008e06:	b8 00 00 00 00       	mov    eax,0x0
c0008e0b:	ba 00 00 00 00       	mov    edx,0x0
c0008e10:	52                   	push   edx
c0008e11:	50                   	push   eax
c0008e12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e1a:	e8 10 c1 01 00       	call   c0024f2f <__ltdf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	85 c0                	test   eax,eax
c0008e24:	79 1e                	jns    c0008e44 <fmod_one+0x8a>
c0008e26:	b8 00 00 00 00       	mov    eax,0x0
c0008e2b:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0008e30:	52                   	push   edx
c0008e31:	50                   	push   eax
c0008e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e3a:	e8 a4 b1 01 00       	call   c0023fe3 <__adddf3>
c0008e3f:	83 c4 10             	add    esp,0x10
c0008e42:	eb 08                	jmp    c0008e4c <fmod_one+0x92>
c0008e44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e4c:	83 c4 2c             	add    esp,0x2c
c0008e4f:	c3                   	ret    

c0008e50 <linear_vari_process>:
c0008e50:	55                   	push   ebp
c0008e51:	57                   	push   edi
c0008e52:	56                   	push   esi
c0008e53:	53                   	push   ebx
c0008e54:	83 ec 3c             	sub    esp,0x3c
c0008e57:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008e5b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008e63:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008e67:	0f 8e f7 06 00 00    	jle    c0009564 <linear_vari_process+0x714>
c0008e6d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e71:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c0008e79:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008e7c:	85 db                	test   ebx,ebx
c0008e7e:	0f 84 e0 06 00 00    	je     c0009564 <linear_vari_process+0x714>
c0008e84:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008e87:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008e8b:	74 19                	je     c0008ea6 <linear_vari_process+0x56>
c0008e8d:	31 d2                	xor    edx,edx
c0008e8f:	39 c2                	cmp    edx,eax
c0008e91:	7d 0c                	jge    c0008e9f <linear_vari_process+0x4f>
c0008e93:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e95:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008e98:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e9c:	42                   	inc    edx
c0008e9d:	eb f0                	jmp    c0008e8f <linear_vari_process+0x3f>
c0008e9f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008ea6:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008ea9:	0f af d0             	imul   edx,eax
c0008eac:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008eaf:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008eb3:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008eba:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008ebd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008ec4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ec8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008ecb:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ecd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ed1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ed5:	57                   	push   edi
c0008ed6:	57                   	push   edi
c0008ed7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008edb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008edf:	e8 73 fe ff ff       	call   c0008d57 <is_bad_src_ratio>
c0008ee4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008ee8:	83 c4 10             	add    esp,0x10
c0008eeb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0008ef0:	0f 85 66 06 00 00    	jne    c000955c <linear_vari_process+0x70c>
c0008ef6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008efa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008efd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f08:	68 00 00 f0 3f       	push   0x3ff00000
c0008f0d:	6a 00                	push   0x0
c0008f0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f17:	e8 13 c0 01 00       	call   c0024f2f <__ltdf2>
c0008f1c:	83 c4 10             	add    esp,0x10
c0008f1f:	85 c0                	test   eax,eax
c0008f21:	0f 89 89 02 00 00    	jns    c00091b0 <linear_vari_process+0x360>
c0008f27:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008f2a:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008f2d:	0f 8d 7d 02 00 00    	jge    c00091b0 <linear_vari_process+0x360>
c0008f33:	83 ec 0c             	sub    esp,0xc
c0008f36:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008f39:	e8 85 bd 01 00       	call   c0024cc3 <__floatsidf>
c0008f3e:	83 c4 10             	add    esp,0x10
c0008f41:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f48:	68 00 00 f0 3f       	push   0x3ff00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 87 b0 01 00       	call   c0023fe3 <__adddf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f67:	52                   	push   edx
c0008f68:	50                   	push   eax
c0008f69:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f71:	e8 ea b6 01 00       	call   c0024660 <__muldf3>
c0008f76:	5d                   	pop    ebp
c0008f77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f7b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f7f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f82:	e8 3c bd 01 00       	call   c0024cc3 <__floatsidf>
c0008f87:	83 c4 10             	add    esp,0x10
c0008f8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f92:	52                   	push   edx
c0008f93:	50                   	push   eax
c0008f94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f9c:	e8 42 b0 01 00       	call   c0023fe3 <__adddf3>
c0008fa1:	59                   	pop    ecx
c0008fa2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008fa6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008faa:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008fad:	e8 11 bd 01 00       	call   c0024cc3 <__floatsidf>
c0008fb2:	83 c4 10             	add    esp,0x10
c0008fb5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fb9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fbd:	52                   	push   edx
c0008fbe:	50                   	push   eax
c0008fbf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fc3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fc7:	e8 61 bf 01 00       	call   c0024f2d <__gedf2>
c0008fcc:	83 c4 10             	add    esp,0x10
c0008fcf:	85 c0                	test   eax,eax
c0008fd1:	0f 89 d9 01 00 00    	jns    c00091b0 <linear_vari_process+0x360>
c0008fd7:	85 ff                	test   edi,edi
c0008fd9:	0f 8e f4 00 00 00    	jle    c00090d3 <linear_vari_process+0x283>
c0008fdf:	83 ec 10             	sub    esp,0x10
c0008fe2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fe5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fe8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008fec:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008fef:	ff 30                	push   DWORD PTR [eax]
c0008ff1:	e8 3e b6 01 00       	call   c0024634 <__subdf3>
c0008ff6:	83 c4 18             	add    esp,0x18
c0008ff9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ffd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009001:	52                   	push   edx
c0009002:	50                   	push   eax
c0009003:	e8 b8 c0 01 00       	call   c00250c0 <fabs>
c0009008:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009010:	83 c4 10             	add    esp,0x10
c0009013:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009018:	68 23 42 92 0c       	push   0xc924223
c000901d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009021:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009025:	e8 e7 be 01 00       	call   c0024f11 <__gtdf2>
c000902a:	83 c4 10             	add    esp,0x10
c000902d:	85 c0                	test   eax,eax
c000902f:	0f 8e 9e 00 00 00    	jle    c00090d3 <linear_vari_process+0x283>
c0009035:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009039:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000903c:	8b 00                	mov    eax,DWORD PTR [eax]
c000903e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009042:	89 04 24             	mov    DWORD PTR [esp],eax
c0009045:	52                   	push   edx
c0009046:	50                   	push   eax
c0009047:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000904a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000904d:	e8 e2 b5 01 00       	call   c0024634 <__subdf3>
c0009052:	59                   	pop    ecx
c0009053:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009057:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000905b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000905e:	e8 60 bc 01 00       	call   c0024cc3 <__floatsidf>
c0009063:	83 c4 10             	add    esp,0x10
c0009066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000906a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000906e:	52                   	push   edx
c000906f:	50                   	push   eax
c0009070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009078:	e8 e3 b5 01 00       	call   c0024660 <__muldf3>
c000907d:	5f                   	pop    edi
c000907e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009082:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009086:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009089:	e8 35 bc 01 00       	call   c0024cc3 <__floatsidf>
c000908e:	83 c4 10             	add    esp,0x10
c0009091:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009095:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009099:	52                   	push   edx
c000909a:	50                   	push   eax
c000909b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a3:	e8 9c b8 01 00       	call   c0024944 <__divdf3>
c00090a8:	83 c4 10             	add    esp,0x10
c00090ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00090af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00090b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00090b7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00090bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c3:	e8 1b af 01 00       	call   c0023fe3 <__adddf3>
c00090c8:	83 c4 10             	add    esp,0x10
c00090cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00090cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00090d3:	31 ff                	xor    edi,edi
c00090d5:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00090d8:	0f 8e 9d 00 00 00    	jle    c000917b <linear_vari_process+0x32b>
c00090de:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00090e1:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00090e5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00090e8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00090ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00090ef:	8b 06                	mov    eax,DWORD PTR [esi]
c00090f1:	52                   	push   edx
c00090f2:	52                   	push   edx
c00090f3:	55                   	push   ebp
c00090f4:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00090f7:	47                   	inc    edi
c00090f8:	e8 7b a8 01 00       	call   c0023978 <__subsf3>
c00090fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0009100:	e8 52 bf 01 00       	call   c0025057 <__extendsfdf2>
c0009105:	83 c4 10             	add    esp,0x10
c0009108:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000910c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009118:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000911c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009120:	e8 3b b5 01 00       	call   c0024660 <__muldf3>
c0009125:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009128:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000912c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009130:	e8 22 bf 01 00       	call   c0025057 <__extendsfdf2>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000913c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009140:	52                   	push   edx
c0009141:	50                   	push   eax
c0009142:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009146:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000914a:	e8 94 ae 01 00       	call   c0023fe3 <__adddf3>
c000914f:	59                   	pop    ecx
c0009150:	5d                   	pop    ebp
c0009151:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009155:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009159:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000915d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009161:	e8 cd bd 01 00       	call   c0024f33 <__truncdfsf2>
c0009166:	83 c4 10             	add    esp,0x10
c0009169:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000916c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009170:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009173:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009176:	e9 5a ff ff ff       	jmp    c00090d5 <linear_vari_process+0x285>
c000917b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000917f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009183:	68 00 00 f0 3f       	push   0x3ff00000
c0009188:	6a 00                	push   0x0
c000918a:	e8 b5 b7 01 00       	call   c0024944 <__divdf3>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 04 24             	mov    DWORD PTR [esp],eax
c0009195:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009199:	52                   	push   edx
c000919a:	50                   	push   eax
c000919b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000919f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091a3:	e8 3b ae 01 00       	call   c0023fe3 <__adddf3>
c00091a8:	83 c4 10             	add    esp,0x10
c00091ab:	e9 50 fd ff ff       	jmp    c0008f00 <linear_vari_process+0xb0>
c00091b0:	50                   	push   eax
c00091b1:	50                   	push   eax
c00091b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	e8 fb fb ff ff       	call   c0008dba <fmod_one>
c00091bf:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091da:	e8 55 b4 01 00       	call   c0024634 <__subdf3>
c00091df:	83 c4 18             	add    esp,0x18
c00091e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ea:	52                   	push   edx
c00091eb:	50                   	push   eax
c00091ec:	e8 ef be 01 00       	call   c00250e0 <lrint>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	0f af f8             	imul   edi,eax
c00091f7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091fa:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091fd:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009200:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009203:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009206:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000920a:	0f 8d b4 02 00 00    	jge    c00094c4 <linear_vari_process+0x674>
c0009210:	83 ec 0c             	sub    esp,0xc
c0009213:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009216:	e8 a8 ba 01 00       	call   c0024cc3 <__floatsidf>
c000921b:	83 c4 10             	add    esp,0x10
c000921e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009222:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009226:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000922a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000922e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009236:	e8 25 b4 01 00       	call   c0024660 <__muldf3>
c000923b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000923e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009242:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009246:	e8 78 ba 01 00       	call   c0024cc3 <__floatsidf>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009252:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009256:	52                   	push   edx
c0009257:	50                   	push   eax
c0009258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000925c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009260:	e8 7e ad 01 00       	call   c0023fe3 <__adddf3>
c0009265:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009268:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000926c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009270:	e8 4e ba 01 00       	call   c0024cc3 <__floatsidf>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000927c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009280:	52                   	push   edx
c0009281:	50                   	push   eax
c0009282:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009286:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000928a:	e8 a0 bc 01 00       	call   c0024f2f <__ltdf2>
c000928f:	83 c4 10             	add    esp,0x10
c0009292:	85 c0                	test   eax,eax
c0009294:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009298:	0f 89 26 02 00 00    	jns    c00094c4 <linear_vari_process+0x674>
c000929e:	85 c9                	test   ecx,ecx
c00092a0:	0f 8e f5 00 00 00    	jle    c000939b <linear_vari_process+0x54b>
c00092a6:	83 ec 10             	sub    esp,0x10
c00092a9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092ac:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092af:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00092b3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092b6:	ff 30                	push   DWORD PTR [eax]
c00092b8:	e8 77 b3 01 00       	call   c0024634 <__subdf3>
c00092bd:	83 c4 18             	add    esp,0x18
c00092c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092c4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092c8:	52                   	push   edx
c00092c9:	50                   	push   eax
c00092ca:	e8 f1 bd 01 00       	call   c00250c0 <fabs>
c00092cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092d7:	83 c4 10             	add    esp,0x10
c00092da:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092df:	68 23 42 92 0c       	push   0xc924223
c00092e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ec:	e8 20 bc 01 00       	call   c0024f11 <__gtdf2>
c00092f1:	83 c4 10             	add    esp,0x10
c00092f4:	85 c0                	test   eax,eax
c00092f6:	0f 8e 9f 00 00 00    	jle    c000939b <linear_vari_process+0x54b>
c00092fc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009300:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009303:	8b 00                	mov    eax,DWORD PTR [eax]
c0009305:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009309:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000930d:	52                   	push   edx
c000930e:	50                   	push   eax
c000930f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009312:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009315:	e8 1a b3 01 00       	call   c0024634 <__subdf3>
c000931a:	5f                   	pop    edi
c000931b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000931f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009323:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009326:	e8 98 b9 01 00       	call   c0024cc3 <__floatsidf>
c000932b:	83 c4 10             	add    esp,0x10
c000932e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009332:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009336:	52                   	push   edx
c0009337:	50                   	push   eax
c0009338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000933c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009340:	e8 1b b3 01 00       	call   c0024660 <__muldf3>
c0009345:	5d                   	pop    ebp
c0009346:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000934a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000934e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009351:	e8 6d b9 01 00       	call   c0024cc3 <__floatsidf>
c0009356:	83 c4 10             	add    esp,0x10
c0009359:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000935d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009361:	52                   	push   edx
c0009362:	50                   	push   eax
c0009363:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009367:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000936b:	e8 d4 b5 01 00       	call   c0024944 <__divdf3>
c0009370:	83 c4 10             	add    esp,0x10
c0009373:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009377:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000937b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000937f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009383:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000938b:	e8 53 ac 01 00       	call   c0023fe3 <__adddf3>
c0009390:	83 c4 10             	add    esp,0x10
c0009393:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009397:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000939b:	31 ff                	xor    edi,edi
c000939d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093a0:	39 f8                	cmp    eax,edi
c00093a2:	0f 8e ac 00 00 00    	jle    c0009454 <linear_vari_process+0x604>
c00093a8:	8b 16                	mov    edx,DWORD PTR [esi]
c00093aa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093ad:	29 c1                	sub    ecx,eax
c00093af:	89 c8                	mov    eax,ecx
c00093b1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093b4:	01 f8                	add    eax,edi
c00093b6:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093ba:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093c7:	51                   	push   ecx
c00093c8:	01 f8                	add    eax,edi
c00093ca:	51                   	push   ecx
c00093cb:	47                   	inc    edi
c00093cc:	55                   	push   ebp
c00093cd:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093d0:	e8 a3 a5 01 00       	call   c0023978 <__subsf3>
c00093d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00093d8:	e8 7a bc 01 00       	call   c0025057 <__extendsfdf2>
c00093dd:	83 c4 10             	add    esp,0x10
c00093e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093e8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093ec:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f8:	e8 63 b2 01 00       	call   c0024660 <__muldf3>
c00093fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009400:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009404:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009408:	e8 4a bc 01 00       	call   c0025057 <__extendsfdf2>
c000940d:	83 c4 10             	add    esp,0x10
c0009410:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009414:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009418:	52                   	push   edx
c0009419:	50                   	push   eax
c000941a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009422:	e8 bc ab 01 00       	call   c0023fe3 <__adddf3>
c0009427:	5d                   	pop    ebp
c0009428:	59                   	pop    ecx
c0009429:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000942d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009431:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009435:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009439:	e8 f5 ba 01 00       	call   c0024f33 <__truncdfsf2>
c000943e:	83 c4 10             	add    esp,0x10
c0009441:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009445:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009449:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000944c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000944f:	e9 49 ff ff ff       	jmp    c000939d <linear_vari_process+0x54d>
c0009454:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009458:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945c:	68 00 00 f0 3f       	push   0x3ff00000
c0009461:	6a 00                	push   0x0
c0009463:	e8 dc b4 01 00       	call   c0024944 <__divdf3>
c0009468:	83 c4 10             	add    esp,0x10
c000946b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000946f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009473:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009477:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000947b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009483:	e8 5b ab 01 00       	call   c0023fe3 <__adddf3>
c0009488:	59                   	pop    ecx
c0009489:	5f                   	pop    edi
c000948a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000948e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009492:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009496:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949a:	e8 1b f9 ff ff       	call   c0008dba <fmod_one>
c000949f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094ba:	e8 75 b1 01 00       	call   c0024634 <__subdf3>
c00094bf:	e9 1b fd ff ff       	jmp    c00091df <linear_vari_process+0x38f>
c00094c4:	39 fd                	cmp    ebp,edi
c00094c6:	7d 38                	jge    c0009500 <linear_vari_process+0x6b0>
c00094c8:	83 ec 0c             	sub    esp,0xc
c00094cb:	89 f8                	mov    eax,edi
c00094cd:	29 e8                	sub    eax,ebp
c00094cf:	99                   	cdq    
c00094d0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00094d3:	50                   	push   eax
c00094d4:	e8 ea b7 01 00       	call   c0024cc3 <__floatsidf>
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00094e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00094e4:	52                   	push   edx
c00094e5:	50                   	push   eax
c00094e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ee:	e8 f0 aa 01 00       	call   c0023fe3 <__adddf3>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c00094f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00094fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009500:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009504:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009507:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000950b:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000950e:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009511:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009514:	85 c0                	test   eax,eax
c0009516:	7f 27                	jg     c000953f <linear_vari_process+0x6ef>
c0009518:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000951c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009520:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009524:	89 01                	mov    DWORD PTR [ecx],eax
c0009526:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009529:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000952c:	99                   	cdq    
c000952d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009530:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009533:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009536:	99                   	cdq    
c0009537:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000953a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000953d:	eb 25                	jmp    c0009564 <linear_vari_process+0x714>
c000953f:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009542:	31 d2                	xor    edx,edx
c0009544:	29 c8                	sub    eax,ecx
c0009546:	c1 e0 02             	shl    eax,0x2
c0009549:	39 d1                	cmp    ecx,edx
c000954b:	7e cb                	jle    c0009518 <linear_vari_process+0x6c8>
c000954d:	8b 3e                	mov    edi,DWORD PTR [esi]
c000954f:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c0009552:	83 c0 04             	add    eax,0x4
c0009555:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c0009559:	42                   	inc    edx
c000955a:	eb ed                	jmp    c0009549 <linear_vari_process+0x6f9>
c000955c:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c0009564:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009568:	83 c4 3c             	add    esp,0x3c
c000956b:	5b                   	pop    ebx
c000956c:	5e                   	pop    esi
c000956d:	5f                   	pop    edi
c000956e:	5d                   	pop    ebp
c000956f:	c3                   	ret    

c0009570 <linear_reset>:
c0009570:	83 ec 0c             	sub    esp,0xc
c0009573:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009577:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000957a:	85 c0                	test   eax,eax
c000957c:	74 20                	je     c000959e <linear_reset+0x2e>
c000957e:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009581:	83 c0 1c             	add    eax,0x1c
c0009584:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009587:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000958e:	c1 e2 02             	shl    edx,0x2
c0009591:	51                   	push   ecx
c0009592:	52                   	push   edx
c0009593:	6a 00                	push   0x0
c0009595:	50                   	push   eax
c0009596:	e8 e2 70 ff ff       	call   c000067d <memset>
c000959b:	83 c4 10             	add    esp,0x10
c000959e:	83 c4 0c             	add    esp,0xc
c00095a1:	c3                   	ret    

c00095a2 <linear_get_name>:
c00095a2:	31 c0                	xor    eax,eax
c00095a4:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095a9:	75 05                	jne    c00095b0 <linear_get_name+0xe>
c00095ab:	b8 40 67 02 c0       	mov    eax,0xc0026740
c00095b0:	c3                   	ret    

c00095b1 <linear_get_description>:
c00095b1:	31 c0                	xor    eax,eax
c00095b3:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095b8:	75 05                	jne    c00095bf <linear_get_description+0xe>
c00095ba:	b8 54 67 02 c0       	mov    eax,0xc0026754
c00095bf:	c3                   	ret    

c00095c0 <linear_set_converter>:
c00095c0:	53                   	push   ebx
c00095c1:	b8 0a 00 00 00       	mov    eax,0xa
c00095c6:	83 ec 08             	sub    esp,0x8
c00095c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00095cd:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c00095d2:	75 6e                	jne    c0009642 <linear_set_converter+0x82>
c00095d4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00095d7:	85 c0                	test   eax,eax
c00095d9:	74 13                	je     c00095ee <linear_set_converter+0x2e>
c00095db:	83 ec 0c             	sub    esp,0xc
c00095de:	50                   	push   eax
c00095df:	e8 4a 5b 00 00       	call   c000f12e <free>
c00095e4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00095eb:	83 c4 10             	add    esp,0x10
c00095ee:	50                   	push   eax
c00095ef:	50                   	push   eax
c00095f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00095f3:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00095fa:	50                   	push   eax
c00095fb:	6a 01                	push   0x1
c00095fd:	e8 4c 5b 00 00       	call   c000f14e <calloc>
c0009602:	83 c4 10             	add    esp,0x10
c0009605:	89 c2                	mov    edx,eax
c0009607:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000960a:	85 d2                	test   edx,edx
c000960c:	b8 01 00 00 00       	mov    eax,0x1
c0009611:	74 2f                	je     c0009642 <linear_set_converter+0x82>
c0009613:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009616:	83 ec 0c             	sub    esp,0xc
c0009619:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000961c:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009622:	c7 43 24 50 8e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008e50
c0009629:	c7 43 20 50 8e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008e50
c0009630:	c7 43 28 70 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009570
c0009637:	53                   	push   ebx
c0009638:	e8 33 ff ff ff       	call   c0009570 <linear_reset>
c000963d:	83 c4 10             	add    esp,0x10
c0009640:	31 c0                	xor    eax,eax
c0009642:	83 c4 08             	add    esp,0x8
c0009645:	5b                   	pop    ebx
c0009646:	c3                   	ret    

c0009647 <is_bad_src_ratio>:
c0009647:	83 ec 1c             	sub    esp,0x1c
c000964a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000964e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009652:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009656:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000965a:	b8 00 00 00 00       	mov    eax,0x0
c000965f:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0009664:	52                   	push   edx
c0009665:	50                   	push   eax
c0009666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966e:	e8 bc b8 01 00       	call   c0024f2f <__ltdf2>
c0009673:	83 c4 10             	add    esp,0x10
c0009676:	85 c0                	test   eax,eax
c0009678:	78 20                	js     c000969a <is_bad_src_ratio+0x53>
c000967a:	b8 00 00 00 00       	mov    eax,0x0
c000967f:	ba 00 00 70 40       	mov    edx,0x40700000
c0009684:	52                   	push   edx
c0009685:	50                   	push   eax
c0009686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000968a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000968e:	e8 7e b8 01 00       	call   c0024f11 <__gtdf2>
c0009693:	83 c4 10             	add    esp,0x10
c0009696:	85 c0                	test   eax,eax
c0009698:	7e 07                	jle    c00096a1 <is_bad_src_ratio+0x5a>
c000969a:	b8 01 00 00 00       	mov    eax,0x1
c000969f:	eb 05                	jmp    c00096a6 <is_bad_src_ratio+0x5f>
c00096a1:	b8 00 00 00 00       	mov    eax,0x0
c00096a6:	83 c4 1c             	add    esp,0x1c
c00096a9:	c3                   	ret    

c00096aa <int_to_fp>:
c00096aa:	c1 e0 0c             	shl    eax,0xc
c00096ad:	c3                   	ret    

c00096ae <fp_to_int>:
c00096ae:	c1 f8 0c             	sar    eax,0xc
c00096b1:	c3                   	ret    

c00096b2 <fp_fraction_part>:
c00096b2:	25 ff 0f 00 00       	and    eax,0xfff
c00096b7:	c3                   	ret    

c00096b8 <fp_to_double>:
c00096b8:	83 ec 1c             	sub    esp,0x1c
c00096bb:	e8 f2 ff ff ff       	call   c00096b2 <fp_fraction_part>
c00096c0:	83 ec 0c             	sub    esp,0xc
c00096c3:	50                   	push   eax
c00096c4:	e8 fa b5 01 00       	call   c0024cc3 <__floatsidf>
c00096c9:	83 c4 10             	add    esp,0x10
c00096cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096d4:	68 00 00 30 3f       	push   0x3f300000
c00096d9:	6a 00                	push   0x0
c00096db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096e3:	e8 78 af 01 00       	call   c0024660 <__muldf3>
c00096e8:	83 c4 2c             	add    esp,0x2c
c00096eb:	c3                   	ret    

c00096ec <calc_output_single>:
c00096ec:	55                   	push   ebp
c00096ed:	57                   	push   edi
c00096ee:	56                   	push   esi
c00096ef:	89 c6                	mov    esi,eax
c00096f1:	53                   	push   ebx
c00096f2:	89 d3                	mov    ebx,edx
c00096f4:	83 ec 4c             	sub    esp,0x4c
c00096f7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096fb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096fe:	e8 a7 ff ff ff       	call   c00096aa <int_to_fp>
c0009703:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009706:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000970a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000970e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009712:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009715:	99                   	cdq    
c0009716:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000971e:	f7 fb                	idiv   ebx
c0009720:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009728:	89 da                	mov    edx,ebx
c000972a:	0f af d0             	imul   edx,eax
c000972d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009731:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009735:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009739:	29 c2                	sub    edx,eax
c000973b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000973e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009742:	83 c5 04             	add    ebp,0x4
c0009745:	e8 6e ff ff ff       	call   c00096b8 <fp_to_double>
c000974a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000974e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009756:	e8 53 ff ff ff       	call   c00096ae <fp_to_int>
c000975b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000975e:	52                   	push   edx
c000975f:	52                   	push   edx
c0009760:	51                   	push   ecx
c0009761:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009765:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009769:	e8 0a a2 01 00       	call   c0023978 <__subsf3>
c000976e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009771:	e8 e1 b8 01 00       	call   c0025057 <__extendsfdf2>
c0009776:	83 c4 10             	add    esp,0x10
c0009779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000977d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009781:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009785:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009789:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000978d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009791:	e8 ca ae 01 00       	call   c0024660 <__muldf3>
c0009796:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000979a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000979e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097a1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097a5:	e8 ad b8 01 00       	call   c0025057 <__extendsfdf2>
c00097aa:	83 c4 10             	add    esp,0x10
c00097ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097b1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097b5:	52                   	push   edx
c00097b6:	50                   	push   eax
c00097b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097bf:	e8 1f a8 01 00       	call   c0023fe3 <__adddf3>
c00097c4:	59                   	pop    ecx
c00097c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097c9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097cd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097d3:	e8 7f b8 01 00       	call   c0025057 <__extendsfdf2>
c00097d8:	83 c4 10             	add    esp,0x10
c00097db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097e3:	52                   	push   edx
c00097e4:	50                   	push   eax
c00097e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097ed:	e8 6e ae 01 00       	call   c0024660 <__muldf3>
c00097f2:	83 c4 10             	add    esp,0x10
c00097f5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097fd:	52                   	push   edx
c00097fe:	50                   	push   eax
c00097ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009803:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009807:	e8 d7 a7 01 00       	call   c0023fe3 <__adddf3>
c000980c:	83 c4 10             	add    esp,0x10
c000980f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009813:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009817:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c000981b:	0f 89 1d ff ff ff    	jns    c000973e <calc_output_single+0x52>
c0009821:	89 d9                	mov    ecx,ebx
c0009823:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009827:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000982b:	89 dd                	mov    ebp,ebx
c000982d:	29 c8                	sub    eax,ecx
c000982f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009837:	99                   	cdq    
c0009838:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009840:	f7 fb                	idiv   ebx
c0009842:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009846:	0f af e8             	imul   ebp,eax
c0009849:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000984d:	01 cd                	add    ebp,ecx
c000984f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009852:	89 e8                	mov    eax,ebp
c0009854:	83 ee 04             	sub    esi,0x4
c0009857:	e8 5c fe ff ff       	call   c00096b8 <fp_to_double>
c000985c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009860:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009864:	89 e8                	mov    eax,ebp
c0009866:	29 dd                	sub    ebp,ebx
c0009868:	e8 41 fe ff ff       	call   c00096ae <fp_to_int>
c000986d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009870:	52                   	push   edx
c0009871:	52                   	push   edx
c0009872:	51                   	push   ecx
c0009873:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009877:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000987b:	e8 f8 a0 01 00       	call   c0023978 <__subsf3>
c0009880:	89 04 24             	mov    DWORD PTR [esp],eax
c0009883:	e8 cf b7 01 00       	call   c0025057 <__extendsfdf2>
c0009888:	83 c4 10             	add    esp,0x10
c000988b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000988f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009893:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009897:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000989b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000989f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098a3:	e8 b8 ad 01 00       	call   c0024660 <__muldf3>
c00098a8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098b0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00098b7:	e8 9b b7 01 00       	call   c0025057 <__extendsfdf2>
c00098bc:	83 c4 10             	add    esp,0x10
c00098bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098c7:	52                   	push   edx
c00098c8:	50                   	push   eax
c00098c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098d1:	e8 0d a7 01 00       	call   c0023fe3 <__adddf3>
c00098d6:	59                   	pop    ecx
c00098d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098db:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098df:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098e5:	e8 6d b7 01 00       	call   c0025057 <__extendsfdf2>
c00098ea:	83 c4 10             	add    esp,0x10
c00098ed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098f5:	52                   	push   edx
c00098f6:	50                   	push   eax
c00098f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ff:	e8 5c ad 01 00       	call   c0024660 <__muldf3>
c0009904:	83 c4 10             	add    esp,0x10
c0009907:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000990b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000990f:	52                   	push   edx
c0009910:	50                   	push   eax
c0009911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009919:	e8 c5 a6 01 00       	call   c0023fe3 <__adddf3>
c000991e:	83 c4 10             	add    esp,0x10
c0009921:	85 ed                	test   ebp,ebp
c0009923:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009927:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000992b:	0f 8f 21 ff ff ff    	jg     c0009852 <calc_output_single+0x166>
c0009931:	52                   	push   edx
c0009932:	50                   	push   eax
c0009933:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009937:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000993b:	e8 a3 a6 01 00       	call   c0023fe3 <__adddf3>
c0009940:	83 c4 5c             	add    esp,0x5c
c0009943:	5b                   	pop    ebx
c0009944:	5e                   	pop    esi
c0009945:	5f                   	pop    edi
c0009946:	5d                   	pop    ebp
c0009947:	c3                   	ret    

c0009948 <calc_output_stereo>:
c0009948:	55                   	push   ebp
c0009949:	89 cd                	mov    ebp,ecx
c000994b:	57                   	push   edi
c000994c:	56                   	push   esi
c000994d:	53                   	push   ebx
c000994e:	89 c3                	mov    ebx,eax
c0009950:	83 ec 6c             	sub    esp,0x6c
c0009953:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009957:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000995e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009965:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009969:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000996d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009970:	e8 35 fd ff ff       	call   c00096aa <int_to_fp>
c0009975:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000997d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009981:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009989:	29 c8                	sub    eax,ecx
c000998b:	99                   	cdq    
c000998c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009990:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009994:	0f af d0             	imul   edx,eax
c0009997:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000999a:	31 d2                	xor    edx,edx
c000999c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099a4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099a7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099ab:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099ae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00099b2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00099b6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c00099b9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00099be:	29 c1                	sub    ecx,eax
c00099c0:	31 c0                	xor    eax,eax
c00099c2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099cd:	83 c7 08             	add    edi,0x8
c00099d0:	e8 e3 fc ff ff       	call   c00096b8 <fp_to_double>
c00099d5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099d9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099e1:	e8 c8 fc ff ff       	call   c00096ae <fp_to_int>
c00099e6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099e9:	52                   	push   edx
c00099ea:	52                   	push   edx
c00099eb:	51                   	push   ecx
c00099ec:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099f0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099f4:	e8 7f 9f 01 00       	call   c0023978 <__subsf3>
c00099f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099fc:	e8 56 b6 01 00       	call   c0025057 <__extendsfdf2>
c0009a01:	83 c4 10             	add    esp,0x10
c0009a04:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a08:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a0c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a14:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a18:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a1c:	e8 3f ac 01 00       	call   c0024660 <__muldf3>
c0009a21:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a25:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a29:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a2c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a30:	e8 22 b6 01 00       	call   c0025057 <__extendsfdf2>
c0009a35:	83 c4 10             	add    esp,0x10
c0009a38:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a3c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a40:	52                   	push   edx
c0009a41:	50                   	push   eax
c0009a42:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a46:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a4a:	e8 94 a5 01 00       	call   c0023fe3 <__adddf3>
c0009a4f:	59                   	pop    ecx
c0009a50:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a54:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a58:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a5e:	e8 f4 b5 01 00       	call   c0025057 <__extendsfdf2>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a72:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a76:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a7a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a7e:	e8 dd ab 01 00       	call   c0024660 <__muldf3>
c0009a83:	83 c4 10             	add    esp,0x10
c0009a86:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a8a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a8e:	52                   	push   edx
c0009a8f:	50                   	push   eax
c0009a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a98:	e8 46 a5 01 00       	call   c0023fe3 <__adddf3>
c0009a9d:	59                   	pop    ecx
c0009a9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aa2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009aa6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009aac:	e8 a6 b5 01 00       	call   c0025057 <__extendsfdf2>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ab8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009abc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ac0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ac4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ac8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009acc:	e8 8f ab 01 00       	call   c0024660 <__muldf3>
c0009ad1:	83 c4 10             	add    esp,0x10
c0009ad4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ad8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009adc:	52                   	push   edx
c0009add:	50                   	push   eax
c0009ade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ae2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ae6:	e8 f8 a4 01 00       	call   c0023fe3 <__adddf3>
c0009aeb:	83 c4 10             	add    esp,0x10
c0009aee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009af2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009afa:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009afe:	0f 89 c5 fe ff ff    	jns    c00099c9 <calc_output_stereo+0x81>
c0009b04:	29 e9                	sub    ecx,ebp
c0009b06:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b0a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b0e:	29 c8                	sub    eax,ecx
c0009b10:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b18:	99                   	cdq    
c0009b19:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b1d:	31 d2                	xor    edx,edx
c0009b1f:	0f af f8             	imul   edi,eax
c0009b22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b26:	40                   	inc    eax
c0009b27:	01 cf                	add    edi,ecx
c0009b29:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b2e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b32:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b3a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b3d:	31 c0                	xor    eax,eax
c0009b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b43:	89 f8                	mov    eax,edi
c0009b45:	83 eb 08             	sub    ebx,0x8
c0009b48:	e8 6b fb ff ff       	call   c00096b8 <fp_to_double>
c0009b4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b55:	89 f8                	mov    eax,edi
c0009b57:	e8 52 fb ff ff       	call   c00096ae <fp_to_int>
c0009b5c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b5f:	52                   	push   edx
c0009b60:	52                   	push   edx
c0009b61:	55                   	push   ebp
c0009b62:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b66:	e8 0d 9e 01 00       	call   c0023978 <__subsf3>
c0009b6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b6e:	e8 e4 b4 01 00       	call   c0025057 <__extendsfdf2>
c0009b73:	83 c4 10             	add    esp,0x10
c0009b76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b8e:	e8 cd aa 01 00       	call   c0024660 <__muldf3>
c0009b93:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b96:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9e:	e8 b4 b4 01 00       	call   c0025057 <__extendsfdf2>
c0009ba3:	83 c4 10             	add    esp,0x10
c0009ba6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009baa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bae:	52                   	push   edx
c0009baf:	50                   	push   eax
c0009bb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bb8:	e8 26 a4 01 00       	call   c0023fe3 <__adddf3>
c0009bbd:	59                   	pop    ecx
c0009bbe:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009bc2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009bc6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bcc:	e8 86 b4 01 00       	call   c0025057 <__extendsfdf2>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009be0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009be4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009be8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bec:	e8 6f aa 01 00       	call   c0024660 <__muldf3>
c0009bf1:	83 c4 10             	add    esp,0x10
c0009bf4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bfc:	52                   	push   edx
c0009bfd:	50                   	push   eax
c0009bfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c06:	e8 d8 a3 01 00       	call   c0023fe3 <__adddf3>
c0009c0b:	5d                   	pop    ebp
c0009c0c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c10:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c14:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c1a:	e8 38 b4 01 00       	call   c0025057 <__extendsfdf2>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c26:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c2a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c2e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c32:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c36:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c3a:	e8 21 aa 01 00       	call   c0024660 <__muldf3>
c0009c3f:	83 c4 10             	add    esp,0x10
c0009c42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c46:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c4a:	52                   	push   edx
c0009c4b:	50                   	push   eax
c0009c4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c54:	e8 8a a3 01 00       	call   c0023fe3 <__adddf3>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c68:	85 ff                	test   edi,edi
c0009c6a:	0f 8f d3 fe ff ff    	jg     c0009b43 <calc_output_stereo+0x1fb>
c0009c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c80:	e8 5e a3 01 00       	call   c0023fe3 <__adddf3>
c0009c85:	83 c4 10             	add    esp,0x10
c0009c88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c90:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ca0:	e8 bb a9 01 00       	call   c0024660 <__muldf3>
c0009ca5:	59                   	pop    ecx
c0009ca6:	5b                   	pop    ebx
c0009ca7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009caf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb7:	e8 77 b2 01 00       	call   c0024f33 <__truncdfsf2>
c0009cbc:	83 c4 10             	add    esp,0x10
c0009cbf:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009cc6:	89 03                	mov    DWORD PTR [ebx],eax
c0009cc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	e8 06 a3 01 00       	call   c0023fe3 <__adddf3>
c0009cdd:	83 c4 10             	add    esp,0x10
c0009ce0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ce4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ce8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cf0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cf8:	e8 63 a9 01 00       	call   c0024660 <__muldf3>
c0009cfd:	5e                   	pop    esi
c0009cfe:	5f                   	pop    edi
c0009cff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d03:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0f:	e8 1f b2 01 00       	call   c0024f33 <__truncdfsf2>
c0009d14:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d1b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d1e:	83 c4 7c             	add    esp,0x7c
c0009d21:	5b                   	pop    ebx
c0009d22:	5e                   	pop    esi
c0009d23:	5f                   	pop    edi
c0009d24:	5d                   	pop    ebp
c0009d25:	c3                   	ret    

c0009d26 <calc_output_quad>:
c0009d26:	55                   	push   ebp
c0009d27:	57                   	push   edi
c0009d28:	56                   	push   esi
c0009d29:	89 c6                	mov    esi,eax
c0009d2b:	53                   	push   ebx
c0009d2c:	83 ec 7c             	sub    esp,0x7c
c0009d2f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d33:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d37:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d3e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d45:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d4d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d50:	e8 55 f9 ff ff       	call   c00096aa <int_to_fp>
c0009d55:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d58:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d5b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d5f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d63:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d67:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d6b:	99                   	cdq    
c0009d6c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d70:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d74:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d77:	31 d2                	xor    edx,edx
c0009d79:	0f af d8             	imul   ebx,eax
c0009d7c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d84:	0f af c7             	imul   eax,edi
c0009d87:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d8b:	29 c1                	sub    ecx,eax
c0009d8d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d9a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d9e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009da2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009daa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009dae:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009db2:	89 d8                	mov    eax,ebx
c0009db4:	83 c7 10             	add    edi,0x10
c0009db7:	e8 fc f8 ff ff       	call   c00096b8 <fp_to_double>
c0009dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009dc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dc4:	89 d8                	mov    eax,ebx
c0009dc6:	e8 e3 f8 ff ff       	call   c00096ae <fp_to_int>
c0009dcb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009dcf:	52                   	push   edx
c0009dd0:	52                   	push   edx
c0009dd1:	51                   	push   ecx
c0009dd2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009dd6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dda:	e8 99 9b 01 00       	call   c0023978 <__subsf3>
c0009ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009de2:	e8 70 b2 01 00       	call   c0025057 <__extendsfdf2>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dfa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dfe:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e02:	e8 59 a8 01 00       	call   c0024660 <__muldf3>
c0009e07:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e0b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e0f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e16:	e8 3c b2 01 00       	call   c0025057 <__extendsfdf2>
c0009e1b:	83 c4 10             	add    esp,0x10
c0009e1e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e22:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e26:	52                   	push   edx
c0009e27:	50                   	push   eax
c0009e28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e30:	e8 ae a1 01 00       	call   c0023fe3 <__adddf3>
c0009e35:	59                   	pop    ecx
c0009e36:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e3a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e3e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e44:	e8 0e b2 01 00       	call   c0025057 <__extendsfdf2>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e5c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e60:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e64:	e8 f7 a7 01 00       	call   c0024660 <__muldf3>
c0009e69:	83 c4 10             	add    esp,0x10
c0009e6c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e70:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e74:	52                   	push   edx
c0009e75:	50                   	push   eax
c0009e76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e7e:	e8 60 a1 01 00       	call   c0023fe3 <__adddf3>
c0009e83:	59                   	pop    ecx
c0009e84:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e88:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e8c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e92:	e8 c0 b1 01 00       	call   c0025057 <__extendsfdf2>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eaa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009eae:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009eb2:	e8 a9 a7 01 00       	call   c0024660 <__muldf3>
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ebe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ec2:	52                   	push   edx
c0009ec3:	50                   	push   eax
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ecc:	e8 12 a1 01 00       	call   c0023fe3 <__adddf3>
c0009ed1:	59                   	pop    ecx
c0009ed2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009ed6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eda:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ee0:	e8 72 b1 01 00       	call   c0025057 <__extendsfdf2>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009efc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f00:	e8 5b a7 01 00       	call   c0024660 <__muldf3>
c0009f05:	83 c4 10             	add    esp,0x10
c0009f08:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f0c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f10:	52                   	push   edx
c0009f11:	50                   	push   eax
c0009f12:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f1a:	e8 c4 a0 01 00       	call   c0023fe3 <__adddf3>
c0009f1f:	59                   	pop    ecx
c0009f20:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f24:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f28:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f2e:	e8 24 b1 01 00       	call   c0025057 <__extendsfdf2>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f3a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f46:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f4a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f4e:	e8 0d a7 01 00       	call   c0024660 <__muldf3>
c0009f53:	83 c4 10             	add    esp,0x10
c0009f56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f5a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f5e:	52                   	push   edx
c0009f5f:	50                   	push   eax
c0009f60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f68:	e8 76 a0 01 00       	call   c0023fe3 <__adddf3>
c0009f6d:	83 c4 10             	add    esp,0x10
c0009f70:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f74:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f78:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f7c:	0f 89 30 fe ff ff    	jns    c0009db2 <calc_output_quad+0x8c>
c0009f82:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f86:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f8a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f8e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f9a:	29 c8                	sub    eax,ecx
c0009f9c:	99                   	cdq    
c0009f9d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa1:	31 d2                	xor    edx,edx
c0009fa3:	0f af d8             	imul   ebx,eax
c0009fa6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009faa:	40                   	inc    eax
c0009fab:	01 cb                	add    ebx,ecx
c0009fad:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009fb2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009fb6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009fba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009fbe:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fc1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fc9:	31 c0                	xor    eax,eax
c0009fcb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fd3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fd7:	89 d8                	mov    eax,ebx
c0009fd9:	83 ee 10             	sub    esi,0x10
c0009fdc:	e8 d7 f6 ff ff       	call   c00096b8 <fp_to_double>
c0009fe1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fe5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fe9:	89 d8                	mov    eax,ebx
c0009feb:	e8 be f6 ff ff       	call   c00096ae <fp_to_int>
c0009ff0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009ff4:	52                   	push   edx
c0009ff5:	52                   	push   edx
c0009ff6:	57                   	push   edi
c0009ff7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009ffb:	e8 78 99 01 00       	call   c0023978 <__subsf3>
c000a000:	89 04 24             	mov    DWORD PTR [esp],eax
c000a003:	e8 4f b0 01 00       	call   c0025057 <__extendsfdf2>
c000a008:	83 c4 10             	add    esp,0x10
c000a00b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a00f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a013:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a017:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a01b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a01f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a023:	e8 38 a6 01 00       	call   c0024660 <__muldf3>
c000a028:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a02b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a02f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a033:	e8 1f b0 01 00       	call   c0025057 <__extendsfdf2>
c000a038:	83 c4 10             	add    esp,0x10
c000a03b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a03f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a043:	52                   	push   edx
c000a044:	50                   	push   eax
c000a045:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a049:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a04d:	e8 91 9f 01 00       	call   c0023fe3 <__adddf3>
c000a052:	59                   	pop    ecx
c000a053:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a057:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a05b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a061:	e8 f1 af 01 00       	call   c0025057 <__extendsfdf2>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a079:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a07d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a081:	e8 da a5 01 00       	call   c0024660 <__muldf3>
c000a086:	83 c4 10             	add    esp,0x10
c000a089:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a08d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a091:	52                   	push   edx
c000a092:	50                   	push   eax
c000a093:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a097:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a09b:	e8 43 9f 01 00       	call   c0023fe3 <__adddf3>
c000a0a0:	5f                   	pop    edi
c000a0a1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0a5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0a9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0af:	e8 a3 af 01 00       	call   c0025057 <__extendsfdf2>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0cf:	e8 8c a5 01 00       	call   c0024660 <__muldf3>
c000a0d4:	83 c4 10             	add    esp,0x10
c000a0d7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0db:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0df:	52                   	push   edx
c000a0e0:	50                   	push   eax
c000a0e1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0e5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0e9:	e8 f5 9e 01 00       	call   c0023fe3 <__adddf3>
c000a0ee:	59                   	pop    ecx
c000a0ef:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0f3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0f7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0fd:	e8 55 af 01 00       	call   c0025057 <__extendsfdf2>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a115:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a119:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a11d:	e8 3e a5 01 00       	call   c0024660 <__muldf3>
c000a122:	83 c4 10             	add    esp,0x10
c000a125:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a129:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a12d:	52                   	push   edx
c000a12e:	50                   	push   eax
c000a12f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a133:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a137:	e8 a7 9e 01 00       	call   c0023fe3 <__adddf3>
c000a13c:	5f                   	pop    edi
c000a13d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a141:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a145:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a14b:	e8 07 af 01 00       	call   c0025057 <__extendsfdf2>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a157:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a15b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a15f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a163:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a167:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a16b:	e8 f0 a4 01 00       	call   c0024660 <__muldf3>
c000a170:	83 c4 10             	add    esp,0x10
c000a173:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a177:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a17b:	52                   	push   edx
c000a17c:	50                   	push   eax
c000a17d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a181:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a185:	e8 59 9e 01 00       	call   c0023fe3 <__adddf3>
c000a18a:	83 c4 10             	add    esp,0x10
c000a18d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a191:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a195:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a199:	85 db                	test   ebx,ebx
c000a19b:	0f 8f 36 fe ff ff    	jg     c0009fd7 <calc_output_quad+0x2b1>
c000a1a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1b1:	e8 2d 9e 01 00       	call   c0023fe3 <__adddf3>
c000a1b6:	83 c4 10             	add    esp,0x10
c000a1b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1d1:	e8 8a a4 01 00       	call   c0024660 <__muldf3>
c000a1d6:	59                   	pop    ecx
c000a1d7:	5b                   	pop    ebx
c000a1d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e8:	e8 46 ad 01 00       	call   c0024f33 <__truncdfsf2>
c000a1ed:	83 c4 10             	add    esp,0x10
c000a1f0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1f7:	89 06                	mov    DWORD PTR [esi],eax
c000a1f9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1fd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a201:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a205:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a209:	e8 d5 9d 01 00       	call   c0023fe3 <__adddf3>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a215:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a219:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a221:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a225:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a229:	e8 32 a4 01 00       	call   c0024660 <__muldf3>
c000a22e:	5e                   	pop    esi
c000a22f:	5f                   	pop    edi
c000a230:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a240:	e8 ee ac 01 00       	call   c0024f33 <__truncdfsf2>
c000a245:	83 c4 10             	add    esp,0x10
c000a248:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a24f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a252:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a256:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a25a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a25e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a262:	e8 7c 9d 01 00       	call   c0023fe3 <__adddf3>
c000a267:	83 c4 10             	add    esp,0x10
c000a26a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a26e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a276:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a27a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a27e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a282:	e8 d9 a3 01 00       	call   c0024660 <__muldf3>
c000a287:	5d                   	pop    ebp
c000a288:	59                   	pop    ecx
c000a289:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a28d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a299:	e8 95 ac 01 00       	call   c0024f33 <__truncdfsf2>
c000a29e:	83 c4 10             	add    esp,0x10
c000a2a1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2a8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2ab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2bb:	e8 23 9d 01 00       	call   c0023fe3 <__adddf3>
c000a2c0:	83 c4 10             	add    esp,0x10
c000a2c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2db:	e8 80 a3 01 00       	call   c0024660 <__muldf3>
c000a2e0:	5b                   	pop    ebx
c000a2e1:	5e                   	pop    esi
c000a2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f2:	e8 3c ac 01 00       	call   c0024f33 <__truncdfsf2>
c000a2f7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2fe:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a301:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a307:	5b                   	pop    ebx
c000a308:	5e                   	pop    esi
c000a309:	5f                   	pop    edi
c000a30a:	5d                   	pop    ebp
c000a30b:	c3                   	ret    

c000a30c <calc_output_hex>:
c000a30c:	55                   	push   ebp
c000a30d:	89 cd                	mov    ebp,ecx
c000a30f:	57                   	push   edi
c000a310:	56                   	push   esi
c000a311:	53                   	push   ebx
c000a312:	89 c3                	mov    ebx,eax
c000a314:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a31a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a31d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a324:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a32b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a32f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a333:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a336:	e8 6f f3 ff ff       	call   c00096aa <int_to_fp>
c000a33b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a33e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a342:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a345:	29 c8                	sub    eax,ecx
c000a347:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a34b:	99                   	cdq    
c000a34c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a354:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a357:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a35f:	0f af f8             	imul   edi,eax
c000a362:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a365:	01 cf                	add    edi,ecx
c000a367:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a36b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a36e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a372:	0f af c2             	imul   eax,edx
c000a375:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a379:	29 c1                	sub    ecx,eax
c000a37b:	31 d2                	xor    edx,edx
c000a37d:	31 c0                	xor    eax,eax
c000a37f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a382:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a386:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a38a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a38e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a392:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a396:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a39a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a39e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3aa:	89 f8                	mov    eax,edi
c000a3ac:	e8 07 f3 ff ff       	call   c00096b8 <fp_to_double>
c000a3b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3b9:	89 f8                	mov    eax,edi
c000a3bb:	e8 ee f2 ff ff       	call   c00096ae <fp_to_int>
c000a3c0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3c4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3c7:	52                   	push   edx
c000a3c8:	52                   	push   edx
c000a3c9:	51                   	push   ecx
c000a3ca:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ce:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3d5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3d9:	e8 9a 95 01 00       	call   c0023978 <__subsf3>
c000a3de:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3e1:	e8 71 ac 01 00       	call   c0025057 <__extendsfdf2>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3fd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a401:	e8 5a a2 01 00       	call   c0024660 <__muldf3>
c000a406:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a40a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a40e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a411:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a415:	e8 3d ac 01 00       	call   c0025057 <__extendsfdf2>
c000a41a:	83 c4 10             	add    esp,0x10
c000a41d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a421:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a425:	52                   	push   edx
c000a426:	50                   	push   eax
c000a427:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a42b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a42f:	e8 af 9b 01 00       	call   c0023fe3 <__adddf3>
c000a434:	59                   	pop    ecx
c000a435:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a439:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a43d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a443:	e8 0f ac 01 00       	call   c0025057 <__extendsfdf2>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a45f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a463:	e8 f8 a1 01 00       	call   c0024660 <__muldf3>
c000a468:	83 c4 10             	add    esp,0x10
c000a46b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a473:	52                   	push   edx
c000a474:	50                   	push   eax
c000a475:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a479:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a47d:	e8 61 9b 01 00       	call   c0023fe3 <__adddf3>
c000a482:	59                   	pop    ecx
c000a483:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a487:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a48b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a491:	e8 c1 ab 01 00       	call   c0025057 <__extendsfdf2>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4b1:	e8 aa a1 01 00       	call   c0024660 <__muldf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4c1:	52                   	push   edx
c000a4c2:	50                   	push   eax
c000a4c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4cb:	e8 13 9b 01 00       	call   c0023fe3 <__adddf3>
c000a4d0:	59                   	pop    ecx
c000a4d1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4d5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4d9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4df:	e8 73 ab 01 00       	call   c0025057 <__extendsfdf2>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ff:	e8 5c a1 01 00       	call   c0024660 <__muldf3>
c000a504:	83 c4 10             	add    esp,0x10
c000a507:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a50b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50f:	52                   	push   edx
c000a510:	50                   	push   eax
c000a511:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a515:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a519:	e8 c5 9a 01 00       	call   c0023fe3 <__adddf3>
c000a51e:	59                   	pop    ecx
c000a51f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a523:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a527:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a52d:	e8 25 ab 01 00       	call   c0025057 <__extendsfdf2>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a545:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a549:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a54d:	e8 0e a1 01 00       	call   c0024660 <__muldf3>
c000a552:	83 c4 10             	add    esp,0x10
c000a555:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a559:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a55d:	52                   	push   edx
c000a55e:	50                   	push   eax
c000a55f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a563:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a567:	e8 77 9a 01 00       	call   c0023fe3 <__adddf3>
c000a56c:	59                   	pop    ecx
c000a56d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a571:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a575:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a57b:	e8 d7 aa 01 00       	call   c0025057 <__extendsfdf2>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a587:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a58f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a593:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a597:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a59b:	e8 c0 a0 01 00       	call   c0024660 <__muldf3>
c000a5a0:	83 c4 10             	add    esp,0x10
c000a5a3:	83 c6 18             	add    esi,0x18
c000a5a6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5aa:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5ae:	52                   	push   edx
c000a5af:	50                   	push   eax
c000a5b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5b8:	e8 26 9a 01 00       	call   c0023fe3 <__adddf3>
c000a5bd:	59                   	pop    ecx
c000a5be:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5c2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5c6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5cc:	e8 86 aa 01 00       	call   c0025057 <__extendsfdf2>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5d8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5e4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5e8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5ec:	e8 6f a0 01 00       	call   c0024660 <__muldf3>
c000a5f1:	83 c4 10             	add    esp,0x10
c000a5f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5fc:	52                   	push   edx
c000a5fd:	50                   	push   eax
c000a5fe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a602:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a606:	e8 d8 99 01 00       	call   c0023fe3 <__adddf3>
c000a60b:	83 c4 10             	add    esp,0x10
c000a60e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a612:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a616:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a619:	0f 89 8b fd ff ff    	jns    c000a3aa <calc_output_hex+0x9e>
c000a61f:	31 f6                	xor    esi,esi
c000a621:	31 ff                	xor    edi,edi
c000a623:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a627:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a62a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a62e:	29 e9                	sub    ecx,ebp
c000a630:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a634:	29 c8                	sub    eax,ecx
c000a636:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a639:	99                   	cdq    
c000a63a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a63e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a641:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a645:	0f af e8             	imul   ebp,eax
c000a648:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a64c:	40                   	inc    eax
c000a64d:	01 cd                	add    ebp,ecx
c000a64f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a654:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a658:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a65c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a660:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a663:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a667:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a66b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a66f:	89 e8                	mov    eax,ebp
c000a671:	e8 42 f0 ff ff       	call   c00096b8 <fp_to_double>
c000a676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a67a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a67e:	89 e8                	mov    eax,ebp
c000a680:	e8 29 f0 ff ff       	call   c00096ae <fp_to_int>
c000a685:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a689:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a68c:	52                   	push   edx
c000a68d:	52                   	push   edx
c000a68e:	51                   	push   ecx
c000a68f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a696:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a69d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6a1:	e8 d2 92 01 00       	call   c0023978 <__subsf3>
c000a6a6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6a9:	e8 a9 a9 01 00       	call   c0025057 <__extendsfdf2>
c000a6ae:	83 c4 10             	add    esp,0x10
c000a6b1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6b5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6c5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6c9:	e8 92 9f 01 00       	call   c0024660 <__muldf3>
c000a6ce:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6d9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6dc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6e0:	e8 72 a9 01 00       	call   c0025057 <__extendsfdf2>
c000a6e5:	83 c4 10             	add    esp,0x10
c000a6e8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6ec:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6f0:	52                   	push   edx
c000a6f1:	50                   	push   eax
c000a6f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6fa:	e8 e4 98 01 00       	call   c0023fe3 <__adddf3>
c000a6ff:	59                   	pop    ecx
c000a700:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a704:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a708:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a70e:	e8 44 a9 01 00       	call   c0025057 <__extendsfdf2>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a722:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a726:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a72a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a72e:	e8 2d 9f 01 00       	call   c0024660 <__muldf3>
c000a733:	83 c4 10             	add    esp,0x10
c000a736:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a73a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a73e:	52                   	push   edx
c000a73f:	50                   	push   eax
c000a740:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a744:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a748:	e8 96 98 01 00       	call   c0023fe3 <__adddf3>
c000a74d:	59                   	pop    ecx
c000a74e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a752:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a756:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a75c:	e8 f6 a8 01 00       	call   c0025057 <__extendsfdf2>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a770:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a774:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a778:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a77c:	e8 df 9e 01 00       	call   c0024660 <__muldf3>
c000a781:	83 c4 10             	add    esp,0x10
c000a784:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a788:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a78c:	52                   	push   edx
c000a78d:	50                   	push   eax
c000a78e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a792:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a796:	e8 48 98 01 00       	call   c0023fe3 <__adddf3>
c000a79b:	59                   	pop    ecx
c000a79c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7a0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7a4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7aa:	e8 a8 a8 01 00       	call   c0025057 <__extendsfdf2>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7c6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7ca:	e8 91 9e 01 00       	call   c0024660 <__muldf3>
c000a7cf:	83 c4 10             	add    esp,0x10
c000a7d2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7da:	52                   	push   edx
c000a7db:	50                   	push   eax
c000a7dc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e4:	e8 fa 97 01 00       	call   c0023fe3 <__adddf3>
c000a7e9:	59                   	pop    ecx
c000a7ea:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ee:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7f2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7f8:	e8 5a a8 01 00       	call   c0025057 <__extendsfdf2>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a814:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a818:	e8 43 9e 01 00       	call   c0024660 <__muldf3>
c000a81d:	83 c4 10             	add    esp,0x10
c000a820:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a824:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a828:	52                   	push   edx
c000a829:	50                   	push   eax
c000a82a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a82e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a832:	e8 ac 97 01 00       	call   c0023fe3 <__adddf3>
c000a837:	59                   	pop    ecx
c000a838:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a83c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a840:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a846:	e8 0c a8 01 00       	call   c0025057 <__extendsfdf2>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a852:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a856:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a85a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a85e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a862:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a866:	e8 f5 9d 01 00       	call   c0024660 <__muldf3>
c000a86b:	83 c4 10             	add    esp,0x10
c000a86e:	83 eb 18             	sub    ebx,0x18
c000a871:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a875:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a879:	52                   	push   edx
c000a87a:	50                   	push   eax
c000a87b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a87f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a883:	e8 5b 97 01 00       	call   c0023fe3 <__adddf3>
c000a888:	59                   	pop    ecx
c000a889:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a88d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a891:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a897:	e8 bb a7 01 00       	call   c0025057 <__extendsfdf2>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8a3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8af:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8b3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8b7:	e8 a4 9d 01 00       	call   c0024660 <__muldf3>
c000a8bc:	83 c4 10             	add    esp,0x10
c000a8bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8c3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8c7:	52                   	push   edx
c000a8c8:	50                   	push   eax
c000a8c9:	57                   	push   edi
c000a8ca:	56                   	push   esi
c000a8cb:	e8 13 97 01 00       	call   c0023fe3 <__adddf3>
c000a8d0:	83 c4 10             	add    esp,0x10
c000a8d3:	89 c6                	mov    esi,eax
c000a8d5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8d8:	89 d7                	mov    edi,edx
c000a8da:	85 ed                	test   ebp,ebp
c000a8dc:	0f 8f 8d fd ff ff    	jg     c000a66f <calc_output_hex+0x363>
c000a8e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8f2:	e8 ec 96 01 00       	call   c0023fe3 <__adddf3>
c000a8f7:	83 c4 10             	add    esp,0x10
c000a8fa:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a901:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a905:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a90d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a911:	e8 4a 9d 01 00       	call   c0024660 <__muldf3>
c000a916:	59                   	pop    ecx
c000a917:	5b                   	pop    ebx
c000a918:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a91c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a920:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a924:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a928:	e8 06 a6 01 00       	call   c0024f33 <__truncdfsf2>
c000a92d:	83 c4 10             	add    esp,0x10
c000a930:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a937:	89 03                	mov    DWORD PTR [ebx],eax
c000a939:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a93d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a941:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a945:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a949:	e8 95 96 01 00       	call   c0023fe3 <__adddf3>
c000a94e:	83 c4 10             	add    esp,0x10
c000a951:	89 04 24             	mov    DWORD PTR [esp],eax
c000a954:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a958:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a960:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a964:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a968:	e8 f3 9c 01 00       	call   c0024660 <__muldf3>
c000a96d:	5d                   	pop    ebp
c000a96e:	59                   	pop    ecx
c000a96f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a977:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97f:	e8 af a5 01 00       	call   c0024f33 <__truncdfsf2>
c000a984:	83 c4 10             	add    esp,0x10
c000a987:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a98e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a991:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a995:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a999:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a99d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9a1:	e8 3d 96 01 00       	call   c0023fe3 <__adddf3>
c000a9a6:	83 c4 10             	add    esp,0x10
c000a9a9:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c0:	e8 9b 9c 01 00       	call   c0024660 <__muldf3>
c000a9c5:	5b                   	pop    ebx
c000a9c6:	5d                   	pop    ebp
c000a9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d7:	e8 57 a5 01 00       	call   c0024f33 <__truncdfsf2>
c000a9dc:	83 c4 10             	add    esp,0x10
c000a9df:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9e6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9e9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9ed:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9f9:	e8 e5 95 01 00       	call   c0023fe3 <__adddf3>
c000a9fe:	83 c4 10             	add    esp,0x10
c000aa01:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa04:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa08:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa10:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa14:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa18:	e8 43 9c 01 00       	call   c0024660 <__muldf3>
c000aa1d:	59                   	pop    ecx
c000aa1e:	5b                   	pop    ebx
c000aa1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2f:	e8 ff a4 01 00       	call   c0024f33 <__truncdfsf2>
c000aa34:	83 c4 10             	add    esp,0x10
c000aa37:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa3e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa41:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa45:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa51:	e8 8d 95 01 00       	call   c0023fe3 <__adddf3>
c000aa56:	83 c4 10             	add    esp,0x10
c000aa59:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa5c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa60:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa64:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa70:	e8 eb 9b 01 00       	call   c0024660 <__muldf3>
c000aa75:	5d                   	pop    ebp
c000aa76:	59                   	pop    ecx
c000aa77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa83:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa87:	e8 a7 a4 01 00       	call   c0024f33 <__truncdfsf2>
c000aa8c:	83 c4 10             	add    esp,0x10
c000aa8f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa96:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa99:	57                   	push   edi
c000aa9a:	56                   	push   esi
c000aa9b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa9f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aaa3:	e8 3b 95 01 00       	call   c0023fe3 <__adddf3>
c000aaa8:	83 c4 10             	add    esp,0x10
c000aaab:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aab2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aabe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aac2:	e8 99 9b 01 00       	call   c0024660 <__muldf3>
c000aac7:	5b                   	pop    ebx
c000aac8:	5e                   	pop    esi
c000aac9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aacd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aad1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad9:	e8 55 a4 01 00       	call   c0024f33 <__truncdfsf2>
c000aade:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aae5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aae8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aaee:	5b                   	pop    ebx
c000aaef:	5e                   	pop    esi
c000aaf0:	5f                   	pop    edi
c000aaf1:	5d                   	pop    ebp
c000aaf2:	c3                   	ret    

c000aaf3 <sinc_reset>:
c000aaf3:	56                   	push   esi
c000aaf4:	53                   	push   ebx
c000aaf5:	51                   	push   ecx
c000aaf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aafa:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aafd:	85 db                	test   ebx,ebx
c000aaff:	74 59                	je     c000ab5a <sinc_reset+0x67>
c000ab01:	31 d2                	xor    edx,edx
c000ab03:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab0a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab0d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab10:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab17:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab1e:	31 c0                	xor    eax,eax
c000ab20:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab26:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab29:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab2c:	52                   	push   edx
c000ab2d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab30:	c1 e0 02             	shl    eax,0x2
c000ab33:	50                   	push   eax
c000ab34:	6a 00                	push   0x0
c000ab36:	56                   	push   esi
c000ab37:	e8 41 5b ff ff       	call   c000067d <memset>
c000ab3c:	83 c4 0c             	add    esp,0xc
c000ab3f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab42:	c1 e0 02             	shl    eax,0x2
c000ab45:	50                   	push   eax
c000ab46:	68 aa 00 00 00       	push   0xaa
c000ab4b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab4e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab51:	50                   	push   eax
c000ab52:	e8 26 5b ff ff       	call   c000067d <memset>
c000ab57:	83 c4 10             	add    esp,0x10
c000ab5a:	58                   	pop    eax
c000ab5b:	5b                   	pop    ebx
c000ab5c:	5e                   	pop    esi
c000ab5d:	c3                   	ret    

c000ab5e <calc_output_multi>:
c000ab5e:	55                   	push   ebp
c000ab5f:	57                   	push   edi
c000ab60:	56                   	push   esi
c000ab61:	89 c6                	mov    esi,eax
c000ab63:	53                   	push   ebx
c000ab64:	83 ec 4c             	sub    esp,0x4c
c000ab67:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab6b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab6f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab73:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab77:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab83:	8d 46 44             	lea    eax,[esi+0x44]
c000ab86:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab89:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab93:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab96:	e8 0f eb ff ff       	call   c00096aa <int_to_fp>
c000ab9b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab9e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000aba2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000aba6:	99                   	cdq    
c000aba7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abaf:	0f af d0             	imul   edx,eax
c000abb2:	0f af c3             	imul   eax,ebx
c000abb5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000abb9:	29 c1                	sub    ecx,eax
c000abbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000abbf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000abc3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abce:	57                   	push   edi
c000abcf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abd3:	6a 00                	push   0x0
c000abd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd9:	e8 9f 5a ff ff       	call   c000067d <memset>
c000abde:	83 c4 10             	add    esp,0x10
c000abe1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abe5:	89 df                	mov    edi,ebx
c000abe7:	e8 cc ea ff ff       	call   c00096b8 <fp_to_double>
c000abec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abf0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abf4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abf8:	e8 b1 ea ff ff       	call   c00096ae <fp_to_int>
c000abfd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac00:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac03:	51                   	push   ecx
c000ac04:	51                   	push   ecx
c000ac05:	55                   	push   ebp
c000ac06:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac0a:	e8 69 8d 01 00       	call   c0023978 <__subsf3>
c000ac0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac12:	e8 40 a4 01 00       	call   c0025057 <__extendsfdf2>
c000ac17:	83 c4 10             	add    esp,0x10
c000ac1a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac1e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac2a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac2e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac32:	e8 29 9a 01 00       	call   c0024660 <__muldf3>
c000ac37:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac3a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac3e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac42:	e8 10 a4 01 00       	call   c0025057 <__extendsfdf2>
c000ac47:	83 c4 10             	add    esp,0x10
c000ac4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac52:	52                   	push   edx
c000ac53:	50                   	push   eax
c000ac54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac5c:	e8 82 93 01 00       	call   c0023fe3 <__adddf3>
c000ac61:	83 c4 10             	add    esp,0x10
c000ac64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac68:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac6c:	89 f8                	mov    eax,edi
c000ac6e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac73:	99                   	cdq    
c000ac74:	f7 f9                	idiv   ecx
c000ac76:	4a                   	dec    edx
c000ac77:	83 fa 06             	cmp    edx,0x6
c000ac7a:	77 07                	ja     c000ac83 <calc_output_multi+0x125>
c000ac7c:	ff 24 95 84 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd987c]
c000ac83:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac86:	4f                   	dec    edi
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac91:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac98:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac9c:	e8 b6 a3 01 00       	call   c0025057 <__extendsfdf2>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acb4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acb8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acbc:	e8 9f 99 01 00       	call   c0024660 <__muldf3>
c000acc1:	83 c4 10             	add    esp,0x10
c000acc4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acc8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000accc:	52                   	push   edx
c000accd:	50                   	push   eax
c000acce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acd1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acd4:	e8 0a 93 01 00       	call   c0023fe3 <__adddf3>
c000acd9:	83 c4 10             	add    esp,0x10
c000acdc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acdf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ace2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ace5:	4f                   	dec    edi
c000ace6:	83 ec 0c             	sub    esp,0xc
c000ace9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acf0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acf7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acfb:	e8 57 a3 01 00       	call   c0025057 <__extendsfdf2>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad1b:	e8 40 99 01 00       	call   c0024660 <__muldf3>
c000ad20:	83 c4 10             	add    esp,0x10
c000ad23:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad27:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad2b:	52                   	push   edx
c000ad2c:	50                   	push   eax
c000ad2d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad30:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad33:	e8 ab 92 01 00       	call   c0023fe3 <__adddf3>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad3e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad44:	4f                   	dec    edi
c000ad45:	83 ec 0c             	sub    esp,0xc
c000ad48:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad4f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad56:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad5a:	e8 f8 a2 01 00       	call   c0025057 <__extendsfdf2>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad72:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad76:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad7a:	e8 e1 98 01 00       	call   c0024660 <__muldf3>
c000ad7f:	83 c4 10             	add    esp,0x10
c000ad82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad8a:	52                   	push   edx
c000ad8b:	50                   	push   eax
c000ad8c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad8f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad92:	e8 4c 92 01 00       	call   c0023fe3 <__adddf3>
c000ad97:	83 c4 10             	add    esp,0x10
c000ad9a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad9d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ada0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ada3:	4f                   	dec    edi
c000ada4:	83 ec 0c             	sub    esp,0xc
c000ada7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adae:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adb5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adb9:	e8 99 a2 01 00       	call   c0025057 <__extendsfdf2>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000add1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000add5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000add9:	e8 82 98 01 00       	call   c0024660 <__muldf3>
c000adde:	83 c4 10             	add    esp,0x10
c000ade1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ade5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ade9:	52                   	push   edx
c000adea:	50                   	push   eax
c000adeb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adee:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adf1:	e8 ed 91 01 00       	call   c0023fe3 <__adddf3>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adfc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae02:	4f                   	dec    edi
c000ae03:	83 ec 0c             	sub    esp,0xc
c000ae06:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae0d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae14:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae18:	e8 3a a2 01 00       	call   c0025057 <__extendsfdf2>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae34:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae38:	e8 23 98 01 00       	call   c0024660 <__muldf3>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae4d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae50:	e8 8e 91 01 00       	call   c0023fe3 <__adddf3>
c000ae55:	83 c4 10             	add    esp,0x10
c000ae58:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae5b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae5e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae61:	4f                   	dec    edi
c000ae62:	83 ec 0c             	sub    esp,0xc
c000ae65:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae6c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae73:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae77:	e8 db a1 01 00       	call   c0025057 <__extendsfdf2>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae97:	e8 c4 97 01 00       	call   c0024660 <__muldf3>
c000ae9c:	83 c4 10             	add    esp,0x10
c000ae9f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aea3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea7:	52                   	push   edx
c000aea8:	50                   	push   eax
c000aea9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeac:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeaf:	e8 2f 91 01 00       	call   c0023fe3 <__adddf3>
c000aeb4:	83 c4 10             	add    esp,0x10
c000aeb7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aeba:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aebd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aec0:	4f                   	dec    edi
c000aec1:	83 ec 0c             	sub    esp,0xc
c000aec4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aec7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aecb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aed2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aed6:	e8 7c a1 01 00       	call   c0025057 <__extendsfdf2>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef6:	e8 65 97 01 00       	call   c0024660 <__muldf3>
c000aefb:	83 c4 10             	add    esp,0x10
c000aefe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af02:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af06:	52                   	push   edx
c000af07:	50                   	push   eax
c000af08:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af0b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af0e:	e8 d0 90 01 00       	call   c0023fe3 <__adddf3>
c000af13:	83 c4 10             	add    esp,0x10
c000af16:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af19:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af1f:	4f                   	dec    edi
c000af20:	83 ec 0c             	sub    esp,0xc
c000af23:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af2a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af31:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af35:	e8 1d a1 01 00       	call   c0025057 <__extendsfdf2>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af4d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af55:	e8 06 97 01 00       	call   c0024660 <__muldf3>
c000af5a:	83 c4 10             	add    esp,0x10
c000af5d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af61:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af65:	52                   	push   edx
c000af66:	50                   	push   eax
c000af67:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af6a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af6d:	e8 71 90 01 00       	call   c0023fe3 <__adddf3>
c000af72:	83 c4 10             	add    esp,0x10
c000af75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af78:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af7b:	85 ff                	test   edi,edi
c000af7d:	0f 8f e9 fc ff ff    	jg     c000ac6c <calc_output_multi+0x10e>
c000af83:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af87:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af8b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af8f:	0f 89 4c fc ff ff    	jns    c000abe1 <calc_output_multi+0x83>
c000af95:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af9d:	29 c8                	sub    eax,ecx
c000af9f:	99                   	cdq    
c000afa0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afa4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afa8:	0f af d0             	imul   edx,eax
c000afab:	40                   	inc    eax
c000afac:	01 d1                	add    ecx,edx
c000afae:	0f af c3             	imul   eax,ebx
c000afb1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000afb5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000afb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000afbc:	55                   	push   ebp
c000afbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afc1:	6a 00                	push   0x0
c000afc3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afc7:	e8 b1 56 ff ff       	call   c000067d <memset>
c000afcc:	83 c4 10             	add    esp,0x10
c000afcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afd3:	e8 e0 e6 ff ff       	call   c00096b8 <fp_to_double>
c000afd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afdc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afe0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afe4:	e8 c5 e6 ff ff       	call   c00096ae <fp_to_int>
c000afe9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afec:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afef:	57                   	push   edi
c000aff0:	57                   	push   edi
c000aff1:	89 df                	mov    edi,ebx
c000aff3:	55                   	push   ebp
c000aff4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000aff8:	e8 7b 89 01 00       	call   c0023978 <__subsf3>
c000affd:	89 04 24             	mov    DWORD PTR [esp],eax
c000b000:	e8 52 a0 01 00       	call   c0025057 <__extendsfdf2>
c000b005:	83 c4 10             	add    esp,0x10
c000b008:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b00c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b010:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b018:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b01c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b020:	e8 3b 96 01 00       	call   c0024660 <__muldf3>
c000b025:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b028:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b02c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b030:	e8 22 a0 01 00       	call   c0025057 <__extendsfdf2>
c000b035:	83 c4 10             	add    esp,0x10
c000b038:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b03c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b040:	52                   	push   edx
c000b041:	50                   	push   eax
c000b042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b04a:	e8 94 8f 01 00       	call   c0023fe3 <__adddf3>
c000b04f:	83 c4 10             	add    esp,0x10
c000b052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b05a:	89 f8                	mov    eax,edi
c000b05c:	b9 08 00 00 00       	mov    ecx,0x8
c000b061:	99                   	cdq    
c000b062:	f7 f9                	idiv   ecx
c000b064:	4a                   	dec    edx
c000b065:	83 fa 06             	cmp    edx,0x6
c000b068:	77 07                	ja     c000b071 <calc_output_multi+0x513>
c000b06a:	ff 24 95 a0 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9860]
c000b071:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b075:	4f                   	dec    edi
c000b076:	83 ec 0c             	sub    esp,0xc
c000b079:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b07c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b080:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b087:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b08b:	e8 c7 9f 01 00       	call   c0025057 <__extendsfdf2>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b09f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0ab:	e8 b0 95 01 00       	call   c0024660 <__muldf3>
c000b0b0:	83 c4 10             	add    esp,0x10
c000b0b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0bb:	52                   	push   edx
c000b0bc:	50                   	push   eax
c000b0bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0c3:	e8 1b 8f 01 00       	call   c0023fe3 <__adddf3>
c000b0c8:	83 c4 10             	add    esp,0x10
c000b0cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0d5:	4f                   	dec    edi
c000b0d6:	83 ec 0c             	sub    esp,0xc
c000b0d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0eb:	e8 67 9f 01 00       	call   c0025057 <__extendsfdf2>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b103:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b107:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b10b:	e8 50 95 01 00       	call   c0024660 <__muldf3>
c000b110:	83 c4 10             	add    esp,0x10
c000b113:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b117:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b11b:	52                   	push   edx
c000b11c:	50                   	push   eax
c000b11d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b120:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b123:	e8 bb 8e 01 00       	call   c0023fe3 <__adddf3>
c000b128:	83 c4 10             	add    esp,0x10
c000b12b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b12e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b131:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b135:	4f                   	dec    edi
c000b136:	83 ec 0c             	sub    esp,0xc
c000b139:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b13c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b140:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b147:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b14b:	e8 07 9f 01 00       	call   c0025057 <__extendsfdf2>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b163:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b167:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b16b:	e8 f0 94 01 00       	call   c0024660 <__muldf3>
c000b170:	83 c4 10             	add    esp,0x10
c000b173:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b177:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b17b:	52                   	push   edx
c000b17c:	50                   	push   eax
c000b17d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b180:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b183:	e8 5b 8e 01 00       	call   c0023fe3 <__adddf3>
c000b188:	83 c4 10             	add    esp,0x10
c000b18b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b18e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b191:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b195:	4f                   	dec    edi
c000b196:	83 ec 0c             	sub    esp,0xc
c000b199:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b19c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1ab:	e8 a7 9e 01 00       	call   c0025057 <__extendsfdf2>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1cb:	e8 90 94 01 00       	call   c0024660 <__muldf3>
c000b1d0:	83 c4 10             	add    esp,0x10
c000b1d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1db:	52                   	push   edx
c000b1dc:	50                   	push   eax
c000b1dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1e3:	e8 fb 8d 01 00       	call   c0023fe3 <__adddf3>
c000b1e8:	83 c4 10             	add    esp,0x10
c000b1eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1f5:	4f                   	dec    edi
c000b1f6:	83 ec 0c             	sub    esp,0xc
c000b1f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b200:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b207:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b20b:	e8 47 9e 01 00       	call   c0025057 <__extendsfdf2>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b21f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b223:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b227:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b22b:	e8 30 94 01 00       	call   c0024660 <__muldf3>
c000b230:	83 c4 10             	add    esp,0x10
c000b233:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b237:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b23b:	52                   	push   edx
c000b23c:	50                   	push   eax
c000b23d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b240:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b243:	e8 9b 8d 01 00       	call   c0023fe3 <__adddf3>
c000b248:	83 c4 10             	add    esp,0x10
c000b24b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b24e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b251:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b255:	4f                   	dec    edi
c000b256:	83 ec 0c             	sub    esp,0xc
c000b259:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b25c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b260:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b267:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b26b:	e8 e7 9d 01 00       	call   c0025057 <__extendsfdf2>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b27f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b283:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b287:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b28b:	e8 d0 93 01 00       	call   c0024660 <__muldf3>
c000b290:	83 c4 10             	add    esp,0x10
c000b293:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b29b:	52                   	push   edx
c000b29c:	50                   	push   eax
c000b29d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2a3:	e8 3b 8d 01 00       	call   c0023fe3 <__adddf3>
c000b2a8:	83 c4 10             	add    esp,0x10
c000b2ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2b5:	4f                   	dec    edi
c000b2b6:	83 ec 0c             	sub    esp,0xc
c000b2b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2cb:	e8 87 9d 01 00       	call   c0025057 <__extendsfdf2>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2eb:	e8 70 93 01 00       	call   c0024660 <__muldf3>
c000b2f0:	83 c4 10             	add    esp,0x10
c000b2f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2fb:	52                   	push   edx
c000b2fc:	50                   	push   eax
c000b2fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b300:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b303:	e8 db 8c 01 00       	call   c0023fe3 <__adddf3>
c000b308:	83 c4 10             	add    esp,0x10
c000b30b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b30e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b315:	4f                   	dec    edi
c000b316:	83 ec 0c             	sub    esp,0xc
c000b319:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b31c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b320:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b327:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b32b:	e8 27 9d 01 00       	call   c0025057 <__extendsfdf2>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b343:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b347:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b34b:	e8 10 93 01 00       	call   c0024660 <__muldf3>
c000b350:	83 c4 10             	add    esp,0x10
c000b353:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b357:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b35b:	52                   	push   edx
c000b35c:	50                   	push   eax
c000b35d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b360:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b363:	e8 7b 8c 01 00       	call   c0023fe3 <__adddf3>
c000b368:	83 c4 10             	add    esp,0x10
c000b36b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b36e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b371:	85 ff                	test   edi,edi
c000b373:	0f 8f e1 fc ff ff    	jg     c000b05a <calc_output_multi+0x4fc>
c000b379:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b37d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b381:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b385:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b38a:	0f 8f 3f fc ff ff    	jg     c000afcf <calc_output_multi+0x471>
c000b390:	be 08 00 00 00       	mov    esi,0x8
c000b395:	89 d8                	mov    eax,ebx
c000b397:	99                   	cdq    
c000b398:	f7 fe                	idiv   esi
c000b39a:	4a                   	dec    edx
c000b39b:	83 fa 06             	cmp    edx,0x6
c000b39e:	77 07                	ja     c000b3a7 <calc_output_multi+0x849>
c000b3a0:	ff 24 95 bc 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9844]
c000b3a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3ab:	4b                   	dec    ebx
c000b3ac:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3b0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3b7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3bb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3be:	e8 20 8c 01 00       	call   c0023fe3 <__adddf3>
c000b3c3:	83 c4 10             	add    esp,0x10
c000b3c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3de:	e8 7d 92 01 00       	call   c0024660 <__muldf3>
c000b3e3:	5d                   	pop    ebp
c000b3e4:	59                   	pop    ecx
c000b3e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f5:	e8 39 9b 01 00       	call   c0024f33 <__truncdfsf2>
c000b3fa:	83 c4 10             	add    esp,0x10
c000b3fd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b401:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b408:	4b                   	dec    ebx
c000b409:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b40d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b414:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b418:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b41b:	e8 c3 8b 01 00       	call   c0023fe3 <__adddf3>
c000b420:	83 c4 10             	add    esp,0x10
c000b423:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b427:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b42b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b42f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b43b:	e8 20 92 01 00       	call   c0024660 <__muldf3>
c000b440:	59                   	pop    ecx
c000b441:	5f                   	pop    edi
c000b442:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b446:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b44a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b452:	e8 dc 9a 01 00       	call   c0024f33 <__truncdfsf2>
c000b457:	83 c4 10             	add    esp,0x10
c000b45a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b45e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b461:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b465:	4b                   	dec    ebx
c000b466:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b46a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b46d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b471:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b475:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b478:	e8 66 8b 01 00       	call   c0023fe3 <__adddf3>
c000b47d:	83 c4 10             	add    esp,0x10
c000b480:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b484:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b48c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b498:	e8 c3 91 01 00       	call   c0024660 <__muldf3>
c000b49d:	5f                   	pop    edi
c000b49e:	5d                   	pop    ebp
c000b49f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	e8 7f 9a 01 00       	call   c0024f33 <__truncdfsf2>
c000b4b4:	83 c4 10             	add    esp,0x10
c000b4b7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4bb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c2:	4b                   	dec    ebx
c000b4c3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4c7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ce:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4d2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4d5:	e8 09 8b 01 00       	call   c0023fe3 <__adddf3>
c000b4da:	83 c4 10             	add    esp,0x10
c000b4dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f5:	e8 66 91 01 00       	call   c0024660 <__muldf3>
c000b4fa:	5d                   	pop    ebp
c000b4fb:	59                   	pop    ecx
c000b4fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b504:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b508:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50c:	e8 22 9a 01 00       	call   c0024f33 <__truncdfsf2>
c000b511:	83 c4 10             	add    esp,0x10
c000b514:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b518:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b51b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b51f:	4b                   	dec    ebx
c000b520:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b524:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b527:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b52b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b52f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b532:	e8 ac 8a 01 00       	call   c0023fe3 <__adddf3>
c000b537:	83 c4 10             	add    esp,0x10
c000b53a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b53e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b54a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b54e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b552:	e8 09 91 01 00       	call   c0024660 <__muldf3>
c000b557:	59                   	pop    ecx
c000b558:	5f                   	pop    edi
c000b559:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b55d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b561:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b565:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b569:	e8 c5 99 01 00       	call   c0024f33 <__truncdfsf2>
c000b56e:	83 c4 10             	add    esp,0x10
c000b571:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b575:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b57c:	4b                   	dec    ebx
c000b57d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b581:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b584:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b588:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b58c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b58f:	e8 4f 8a 01 00       	call   c0023fe3 <__adddf3>
c000b594:	83 c4 10             	add    esp,0x10
c000b597:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b59b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b59f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5af:	e8 ac 90 01 00       	call   c0024660 <__muldf3>
c000b5b4:	5f                   	pop    edi
c000b5b5:	5d                   	pop    ebp
c000b5b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5ba:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c6:	e8 68 99 01 00       	call   c0024f33 <__truncdfsf2>
c000b5cb:	83 c4 10             	add    esp,0x10
c000b5ce:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5d2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5d9:	4b                   	dec    ebx
c000b5da:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5de:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ec:	e8 f2 89 01 00       	call   c0023fe3 <__adddf3>
c000b5f1:	83 c4 10             	add    esp,0x10
c000b5f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b604:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b608:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60c:	e8 4f 90 01 00       	call   c0024660 <__muldf3>
c000b611:	5d                   	pop    ebp
c000b612:	59                   	pop    ecx
c000b613:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b617:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b61f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b623:	e8 0b 99 01 00       	call   c0024f33 <__truncdfsf2>
c000b628:	83 c4 10             	add    esp,0x10
c000b62b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b62f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b632:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b636:	4b                   	dec    ebx
c000b637:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b63e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b642:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b646:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b649:	e8 95 89 01 00       	call   c0023fe3 <__adddf3>
c000b64e:	83 c4 10             	add    esp,0x10
c000b651:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b655:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b659:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b661:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b665:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b669:	e8 f2 8f 01 00       	call   c0024660 <__muldf3>
c000b66e:	59                   	pop    ecx
c000b66f:	5f                   	pop    edi
c000b670:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b674:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b678:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b680:	e8 ae 98 01 00       	call   c0024f33 <__truncdfsf2>
c000b685:	83 c4 10             	add    esp,0x10
c000b688:	85 db                	test   ebx,ebx
c000b68a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b691:	0f 8f fe fc ff ff    	jg     c000b395 <calc_output_multi+0x837>
c000b697:	83 c4 4c             	add    esp,0x4c
c000b69a:	5b                   	pop    ebx
c000b69b:	5e                   	pop    esi
c000b69c:	5f                   	pop    edi
c000b69d:	5d                   	pop    ebp
c000b69e:	c3                   	ret    

c000b69f <double_to_fp>:
c000b69f:	83 ec 0c             	sub    esp,0xc
c000b6a2:	68 00 00 b0 40       	push   0x40b00000
c000b6a7:	6a 00                	push   0x0
c000b6a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6b1:	e8 aa 8f 01 00       	call   c0024660 <__muldf3>
c000b6b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b6ba:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b6be:	83 c4 1c             	add    esp,0x1c
c000b6c1:	e9 1a 9a 01 00       	jmp    c00250e0 <lrint>

c000b6c6 <fmod_one>:
c000b6c6:	83 ec 2c             	sub    esp,0x2c
c000b6c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b6d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b6d9:	83 ec 08             	sub    esp,0x8
c000b6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e4:	e8 f7 99 01 00       	call   c00250e0 <lrint>
c000b6e9:	83 c4 10             	add    esp,0x10
c000b6ec:	83 ec 0c             	sub    esp,0xc
c000b6ef:	50                   	push   eax
c000b6f0:	e8 ce 95 01 00       	call   c0024cc3 <__floatsidf>
c000b6f5:	83 c4 10             	add    esp,0x10
c000b6f8:	52                   	push   edx
c000b6f9:	50                   	push   eax
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 2d 8f 01 00       	call   c0024634 <__subdf3>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b70e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b712:	b8 00 00 00 00       	mov    eax,0x0
c000b717:	ba 00 00 00 00       	mov    edx,0x0
c000b71c:	52                   	push   edx
c000b71d:	50                   	push   eax
c000b71e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b722:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b726:	e8 04 98 01 00       	call   c0024f2f <__ltdf2>
c000b72b:	83 c4 10             	add    esp,0x10
c000b72e:	85 c0                	test   eax,eax
c000b730:	79 1e                	jns    c000b750 <fmod_one+0x8a>
c000b732:	b8 00 00 00 00       	mov    eax,0x0
c000b737:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000b73c:	52                   	push   edx
c000b73d:	50                   	push   eax
c000b73e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b742:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b746:	e8 98 88 01 00       	call   c0023fe3 <__adddf3>
c000b74b:	83 c4 10             	add    esp,0x10
c000b74e:	eb 08                	jmp    c000b758 <fmod_one+0x92>
c000b750:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b754:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b758:	83 c4 2c             	add    esp,0x2c
c000b75b:	c3                   	ret    

c000b75c <prepare_data>:
c000b75c:	55                   	push   ebp
c000b75d:	57                   	push   edi
c000b75e:	56                   	push   esi
c000b75f:	53                   	push   ebx
c000b760:	83 ec 1c             	sub    esp,0x1c
c000b763:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b767:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b76b:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b76f:	0f 89 57 01 00 00    	jns    c000b8cc <prepare_data+0x170>
c000b775:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b778:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b77b:	85 d2                	test   edx,edx
c000b77d:	75 0d                	jne    c000b78c <prepare_data+0x30>
c000b77f:	8d 14 36             	lea    edx,[esi+esi*1]
c000b782:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b785:	29 d0                	sub    eax,edx
c000b787:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b78a:	eb 44                	jmp    c000b7d0 <prepare_data+0x74>
c000b78c:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b78f:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b792:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b795:	39 c1                	cmp    ecx,eax
c000b797:	7d 04                	jge    c000b79d <prepare_data+0x41>
c000b799:	29 d0                	sub    eax,edx
c000b79b:	eb 2d                	jmp    c000b7ca <prepare_data+0x6e>
c000b79d:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b7a3:	29 d7                	sub    edi,edx
c000b7a5:	01 f7                	add    edi,esi
c000b7a7:	51                   	push   ecx
c000b7a8:	29 f2                	sub    edx,esi
c000b7aa:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b7b1:	8d 14 90             	lea    edx,[eax+edx*4]
c000b7b4:	51                   	push   ecx
c000b7b5:	52                   	push   edx
c000b7b6:	50                   	push   eax
c000b7b7:	e8 53 4e ff ff       	call   c000060f <memmove>
c000b7bc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7bf:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7c2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7c5:	29 f0                	sub    eax,esi
c000b7c7:	83 c4 10             	add    esp,0x10
c000b7ca:	29 f0                	sub    eax,esi
c000b7cc:	79 02                	jns    c000b7d0 <prepare_data+0x74>
c000b7ce:	31 c0                	xor    eax,eax
c000b7d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b7d3:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b7d6:	29 ef                	sub    edi,ebp
c000b7d8:	39 c7                	cmp    edi,eax
c000b7da:	7e 02                	jle    c000b7de <prepare_data+0x82>
c000b7dc:	89 c7                	mov    edi,eax
c000b7de:	89 f8                	mov    eax,edi
c000b7e0:	99                   	cdq    
c000b7e1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b7e4:	b8 15 00 00 00       	mov    eax,0x15
c000b7e9:	29 d7                	sub    edi,edx
c000b7eb:	0f 88 dd 00 00 00    	js     c000b8ce <prepare_data+0x172>
c000b7f1:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b7f4:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b7f7:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b7fa:	0f 8f ce 00 00 00    	jg     c000b8ce <prepare_data+0x172>
c000b800:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b806:	50                   	push   eax
c000b807:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b80e:	50                   	push   eax
c000b80f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b813:	8b 00                	mov    eax,DWORD PTR [eax]
c000b815:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b818:	50                   	push   eax
c000b819:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b81c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b820:	50                   	push   eax
c000b821:	e8 21 4e ff ff       	call   c0000647 <memcpy>
c000b826:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b829:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b82c:	01 fd                	add    ebp,edi
c000b82e:	01 f9                	add    ecx,edi
c000b830:	83 c4 10             	add    esp,0x10
c000b833:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b836:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b839:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b83c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b840:	0f 85 86 00 00 00    	jne    c000b8cc <prepare_data+0x170>
c000b846:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b849:	89 e8                	mov    eax,ebp
c000b84b:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b84e:	29 c8                	sub    eax,ecx
c000b850:	39 f8                	cmp    eax,edi
c000b852:	7d 78                	jge    c000b8cc <prepare_data+0x170>
c000b854:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b858:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b85c:	74 6e                	je     c000b8cc <prepare_data+0x170>
c000b85e:	8d 7e 04             	lea    edi,[esi+0x4]
c000b861:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b865:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b868:	29 ef                	sub    edi,ebp
c000b86a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b86e:	7c 29                	jl     c000b899 <prepare_data+0x13d>
c000b870:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b873:	29 f1                	sub    ecx,esi
c000b875:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b87c:	55                   	push   ebp
c000b87d:	50                   	push   eax
c000b87e:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b881:	50                   	push   eax
c000b882:	52                   	push   edx
c000b883:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b887:	e8 83 4d ff ff       	call   c000060f <memmove>
c000b88c:	83 c4 10             	add    esp,0x10
c000b88f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b892:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b895:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b899:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b89c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b89f:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b8a2:	83 c6 05             	add    esi,0x5
c000b8a5:	78 07                	js     c000b8ae <prepare_data+0x152>
c000b8a7:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8aa:	39 cf                	cmp    edi,ecx
c000b8ac:	7e 04                	jle    c000b8b2 <prepare_data+0x156>
c000b8ae:	89 ce                	mov    esi,ecx
c000b8b0:	29 c6                	sub    esi,eax
c000b8b2:	8d 04 82             	lea    eax,[edx+eax*4]
c000b8b5:	51                   	push   ecx
c000b8b6:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b8bd:	51                   	push   ecx
c000b8be:	6a 00                	push   0x0
c000b8c0:	50                   	push   eax
c000b8c1:	e8 b7 4d ff ff       	call   c000067d <memset>
c000b8c6:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b8c9:	83 c4 10             	add    esp,0x10
c000b8cc:	31 c0                	xor    eax,eax
c000b8ce:	83 c4 1c             	add    esp,0x1c
c000b8d1:	5b                   	pop    ebx
c000b8d2:	5e                   	pop    esi
c000b8d3:	5f                   	pop    edi
c000b8d4:	5d                   	pop    ebp
c000b8d5:	c3                   	ret    

c000b8d6 <sinc_multichan_vari_process>:
c000b8d6:	55                   	push   ebp
c000b8d7:	b8 05 00 00 00       	mov    eax,0x5
c000b8dc:	57                   	push   edi
c000b8dd:	56                   	push   esi
c000b8de:	53                   	push   ebx
c000b8df:	83 ec 4c             	sub    esp,0x4c
c000b8e2:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b8e6:	8b 6c 24 64          	mov    ebp,DWORD PTR [esp+0x64]
c000b8ea:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b8ed:	85 db                	test   ebx,ebx
c000b8ef:	0f 84 b5 05 00 00    	je     c000beaa <sinc_multichan_vari_process+0x5d4>
c000b8f5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b8f8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b8fb:	0f af d0             	imul   edx,eax
c000b8fe:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000b901:	0f af 45 0c          	imul   eax,DWORD PTR [ebp+0xc]
c000b905:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b90c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b90f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b916:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b919:	8b 06                	mov    eax,DWORD PTR [esi]
c000b91b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b91f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b923:	57                   	push   edi
c000b924:	57                   	push   edi
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	e8 15 dd ff ff       	call   c0009647 <is_bad_src_ratio>
c000b932:	83 c4 10             	add    esp,0x10
c000b935:	89 c2                	mov    edx,eax
c000b937:	b8 16 00 00 00       	mov    eax,0x16
c000b93c:	85 d2                	test   edx,edx
c000b93e:	0f 85 66 05 00 00    	jne    c000beaa <sinc_multichan_vari_process+0x5d4>
c000b944:	83 ec 0c             	sub    esp,0xc
c000b947:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b94a:	e8 74 93 01 00       	call   c0024cc3 <__floatsidf>
c000b94f:	83 c4 10             	add    esp,0x10
c000b952:	89 04 24             	mov    DWORD PTR [esp],eax
c000b955:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b959:	68 00 00 00 40       	push   0x40000000
c000b95e:	6a 00                	push   0x0
c000b960:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b964:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b968:	e8 76 86 01 00       	call   c0023fe3 <__adddf3>
c000b96d:	59                   	pop    ecx
c000b96e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b972:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b976:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b979:	e8 45 93 01 00       	call   c0024cc3 <__floatsidf>
c000b97e:	83 c4 10             	add    esp,0x10
c000b981:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b985:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b989:	52                   	push   edx
c000b98a:	50                   	push   eax
c000b98b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b993:	e8 ac 8f 01 00       	call   c0024944 <__divdf3>
c000b998:	83 c4 10             	add    esp,0x10
c000b99b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b99f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a3:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9a5:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b9a8:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9af:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c000b9b2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c000b9b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9bd:	52                   	push   edx
c000b9be:	50                   	push   eax
c000b9bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9c7:	e8 63 95 01 00       	call   c0024f2f <__ltdf2>
c000b9cc:	83 c4 10             	add    esp,0x10
c000b9cf:	85 c0                	test   eax,eax
c000b9d1:	79 1d                	jns    c000b9f0 <sinc_multichan_vari_process+0x11a>
c000b9d3:	68 00 00 f0 3f       	push   0x3ff00000
c000b9d8:	6a 00                	push   0x0
c000b9da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9e2:	e8 48 95 01 00       	call   c0024f2f <__ltdf2>
c000b9e7:	83 c4 10             	add    esp,0x10
c000b9ea:	85 c0                	test   eax,eax
c000b9ec:	78 2c                	js     c000ba1a <sinc_multichan_vari_process+0x144>
c000b9ee:	eb 4a                	jmp    c000ba3a <sinc_multichan_vari_process+0x164>
c000b9f0:	68 00 00 f0 3f       	push   0x3ff00000
c000b9f5:	6a 00                	push   0x0
c000b9f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9ff:	e8 2b 95 01 00       	call   c0024f2f <__ltdf2>
c000ba04:	83 c4 10             	add    esp,0x10
c000ba07:	85 c0                	test   eax,eax
c000ba09:	79 2f                	jns    c000ba3a <sinc_multichan_vari_process+0x164>
c000ba0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba13:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba16:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba1a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba1e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba2a:	e8 15 8f 01 00       	call   c0024944 <__divdf3>
c000ba2f:	83 c4 10             	add    esp,0x10
c000ba32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba36:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba3a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ba3d:	50                   	push   eax
c000ba3e:	50                   	push   eax
c000ba3f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba43:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba47:	e8 94 96 01 00       	call   c00250e0 <lrint>
c000ba4c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000ba4f:	40                   	inc    eax
c000ba50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba54:	0f af c7             	imul   eax,edi
c000ba57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba5b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ba5e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba62:	58                   	pop    eax
c000ba63:	5a                   	pop    edx
c000ba64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba6c:	e8 55 fc ff ff       	call   c000b6c6 <fmod_one>
c000ba71:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ba74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba78:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba7c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba7f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba93:	e8 9c 8b 01 00       	call   c0024634 <__subdf3>
c000ba98:	83 c4 18             	add    esp,0x18
c000ba9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baa3:	52                   	push   edx
c000baa4:	50                   	push   eax
c000baa5:	e8 36 96 01 00       	call   c00250e0 <lrint>
c000baaa:	0f af f8             	imul   edi,eax
c000baad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bab1:	01 f8                	add    eax,edi
c000bab3:	99                   	cdq    
c000bab4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bab7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000baba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000babe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bac2:	68 00 00 f0 3f       	push   0x3ff00000
c000bac7:	6a 00                	push   0x0
c000bac9:	e8 76 8e 01 00       	call   c0024944 <__divdf3>
c000bace:	83 c4 10             	add    esp,0x10
c000bad1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bad5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bad9:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bade:	68 23 42 92 0c       	push   0xc924223
c000bae3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baeb:	e8 f3 84 01 00       	call   c0023fe3 <__adddf3>
c000baf0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000baf4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000baf8:	83 c4 20             	add    esp,0x20
c000bafb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bb03:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000bb0b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb0e:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb11:	7d 4e                	jge    c000bb61 <sinc_multichan_vari_process+0x28b>
c000bb13:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb16:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb19:	01 c8                	add    eax,ecx
c000bb1b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb1e:	99                   	cdq    
c000bb1f:	f7 f9                	idiv   ecx
c000bb21:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bb25:	7d 0c                	jge    c000bb33 <sinc_multichan_vari_process+0x25d>
c000bb27:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000bb2a:	85 ff                	test   edi,edi
c000bb2c:	79 68                	jns    c000bb96 <sinc_multichan_vari_process+0x2c0>
c000bb2e:	e9 e3 00 00 00       	jmp    c000bc16 <sinc_multichan_vari_process+0x340>
c000bb33:	50                   	push   eax
c000bb34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb38:	55                   	push   ebp
c000bb39:	53                   	push   ebx
c000bb3a:	e8 1d fc ff ff       	call   c000b75c <prepare_data>
c000bb3f:	83 c4 10             	add    esp,0x10
c000bb42:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb45:	85 c0                	test   eax,eax
c000bb47:	0f 85 5d 03 00 00    	jne    c000beaa <sinc_multichan_vari_process+0x5d4>
c000bb4d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb50:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb53:	01 c8                	add    eax,ecx
c000bb55:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb58:	99                   	cdq    
c000bb59:	f7 f9                	idiv   ecx
c000bb5b:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bb5f:	7c c6                	jl     c000bb27 <sinc_multichan_vari_process+0x251>
c000bb61:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bb64:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bb68:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb6b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb76:	89 06                	mov    DWORD PTR [esi],eax
c000bb78:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb7b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb7e:	99                   	cdq    
c000bb7f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb82:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000bb85:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb88:	99                   	cdq    
c000bb89:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb8c:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000bb8f:	31 c0                	xor    eax,eax
c000bb91:	e9 14 03 00 00       	jmp    c000beaa <sinc_multichan_vari_process+0x5d4>
c000bb96:	83 ec 0c             	sub    esp,0xc
c000bb99:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb9c:	e8 22 91 01 00       	call   c0024cc3 <__floatsidf>
c000bba1:	83 c4 10             	add    esp,0x10
c000bba4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bba8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbac:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bbb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bbb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbbc:	e8 22 84 01 00       	call   c0023fe3 <__adddf3>
c000bbc1:	83 c4 10             	add    esp,0x10
c000bbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbcc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbd4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbd8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbdc:	e8 02 84 01 00       	call   c0023fe3 <__adddf3>
c000bbe1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bbe4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbec:	e8 d2 90 01 00       	call   c0024cc3 <__floatsidf>
c000bbf1:	83 c4 10             	add    esp,0x10
c000bbf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbfc:	52                   	push   edx
c000bbfd:	50                   	push   eax
c000bbfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc06:	e8 22 93 01 00       	call   c0024f2d <__gedf2>
c000bc0b:	83 c4 10             	add    esp,0x10
c000bc0e:	85 c0                	test   eax,eax
c000bc10:	0f 89 4b ff ff ff    	jns    c000bb61 <sinc_multichan_vari_process+0x28b>
c000bc16:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc1a:	0f 8e ed 00 00 00    	jle    c000bd0d <sinc_multichan_vari_process+0x437>
c000bc20:	83 ec 10             	sub    esp,0x10
c000bc23:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bc26:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bc29:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc2c:	ff 36                	push   DWORD PTR [esi]
c000bc2e:	e8 01 8a 01 00       	call   c0024634 <__subdf3>
c000bc33:	83 c4 18             	add    esp,0x18
c000bc36:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc3a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc3e:	52                   	push   edx
c000bc3f:	50                   	push   eax
c000bc40:	e8 7b 94 01 00       	call   c00250c0 <fabs>
c000bc45:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc49:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc55:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc5a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc5e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc62:	e8 aa 92 01 00       	call   c0024f11 <__gtdf2>
c000bc67:	83 c4 10             	add    esp,0x10
c000bc6a:	85 c0                	test   eax,eax
c000bc6c:	0f 8e 9b 00 00 00    	jle    c000bd0d <sinc_multichan_vari_process+0x437>
c000bc72:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc74:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc7f:	52                   	push   edx
c000bc80:	50                   	push   eax
c000bc81:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bc84:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bc87:	e8 a8 89 01 00       	call   c0024634 <__subdf3>
c000bc8c:	59                   	pop    ecx
c000bc8d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bc91:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bc95:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc98:	e8 26 90 01 00       	call   c0024cc3 <__floatsidf>
c000bc9d:	83 c4 10             	add    esp,0x10
c000bca0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bca4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca8:	52                   	push   edx
c000bca9:	50                   	push   eax
c000bcaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcb2:	e8 a9 89 01 00       	call   c0024660 <__muldf3>
c000bcb7:	5f                   	pop    edi
c000bcb8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bcbc:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bcc0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bcc3:	e8 fb 8f 01 00       	call   c0024cc3 <__floatsidf>
c000bcc8:	83 c4 10             	add    esp,0x10
c000bccb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bccf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcd3:	52                   	push   edx
c000bcd4:	50                   	push   eax
c000bcd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcd9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcdd:	e8 62 8c 01 00       	call   c0024944 <__divdf3>
c000bce2:	83 c4 10             	add    esp,0x10
c000bce5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bce9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bced:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bcf1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bcf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcfd:	e8 e1 82 01 00       	call   c0023fe3 <__adddf3>
c000bd02:	83 c4 10             	add    esp,0x10
c000bd05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd0d:	83 ec 0c             	sub    esp,0xc
c000bd10:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd13:	e8 ab 8f 01 00       	call   c0024cc3 <__floatsidf>
c000bd18:	83 c4 10             	add    esp,0x10
c000bd1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd33:	e8 f7 91 01 00       	call   c0024f2f <__ltdf2>
c000bd38:	83 c4 10             	add    esp,0x10
c000bd3b:	85 c0                	test   eax,eax
c000bd3d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bd41:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bd45:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd49:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000bd4d:	78 10                	js     c000bd5f <sinc_multichan_vari_process+0x489>
c000bd4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd53:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bd57:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd5b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd6f:	e8 ec 88 01 00       	call   c0024660 <__muldf3>
c000bd74:	59                   	pop    ecx
c000bd75:	5f                   	pop    edi
c000bd76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd86:	e8 14 f9 ff ff       	call   c000b69f <double_to_fp>
c000bd8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd8f:	89 c7                	mov    edi,eax
c000bd91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9d:	e8 be 88 01 00       	call   c0024660 <__muldf3>
c000bda2:	83 c4 18             	add    esp,0x18
c000bda5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bda9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdad:	52                   	push   edx
c000bdae:	50                   	push   eax
c000bdaf:	e8 eb f8 ff ff       	call   c000b69f <double_to_fp>
c000bdb4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bdb7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bdbb:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000bdbe:	8d 04 90             	lea    eax,[eax+edx*4]
c000bdc1:	50                   	push   eax
c000bdc2:	50                   	push   eax
c000bdc3:	50                   	push   eax
c000bdc4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bdc7:	e8 f7 8e 01 00       	call   c0024cc3 <__floatsidf>
c000bdcc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bdd0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bdd4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdd8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bddc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde4:	e8 5b 8b 01 00       	call   c0024944 <__divdf3>
c000bde9:	83 c4 1c             	add    esp,0x1c
c000bdec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bdf0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bdf4:	52                   	push   edx
c000bdf5:	89 fa                	mov    edx,edi
c000bdf7:	50                   	push   eax
c000bdf8:	89 d8                	mov    eax,ebx
c000bdfa:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdfd:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be01:	e8 58 ed ff ff       	call   c000ab5e <calc_output_multi>
c000be06:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be09:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be14:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be18:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be1c:	e8 23 8b 01 00       	call   c0024944 <__divdf3>
c000be21:	83 c4 10             	add    esp,0x10
c000be24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000be2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be34:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be38:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be3c:	e8 a2 81 01 00       	call   c0023fe3 <__adddf3>
c000be41:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be45:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be49:	83 c4 28             	add    esp,0x28
c000be4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be50:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be54:	e8 6d f8 ff ff       	call   c000b6c6 <fmod_one>
c000be59:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be67:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be7b:	e8 b4 87 01 00       	call   c0024634 <__subdf3>
c000be80:	83 c4 18             	add    esp,0x18
c000be83:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000be87:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000be8b:	52                   	push   edx
c000be8c:	50                   	push   eax
c000be8d:	e8 4e 92 01 00       	call   c00250e0 <lrint>
c000be92:	0f af f8             	imul   edi,eax
c000be95:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000be99:	83 c4 10             	add    esp,0x10
c000be9c:	01 f8                	add    eax,edi
c000be9e:	99                   	cdq    
c000be9f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bea2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bea5:	e9 61 fc ff ff       	jmp    c000bb0b <sinc_multichan_vari_process+0x235>
c000beaa:	83 c4 4c             	add    esp,0x4c
c000bead:	5b                   	pop    ebx
c000beae:	5e                   	pop    esi
c000beaf:	5f                   	pop    edi
c000beb0:	5d                   	pop    ebp
c000beb1:	c3                   	ret    

c000beb2 <sinc_hex_vari_process>:
c000beb2:	55                   	push   ebp
c000beb3:	b8 05 00 00 00       	mov    eax,0x5
c000beb8:	57                   	push   edi
c000beb9:	56                   	push   esi
c000beba:	53                   	push   ebx
c000bebb:	83 ec 4c             	sub    esp,0x4c
c000bebe:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bec2:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bec6:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bec9:	85 db                	test   ebx,ebx
c000becb:	0f 84 b7 05 00 00    	je     c000c488 <sinc_hex_vari_process+0x5d6>
c000bed1:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000bed4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bed7:	0f af d0             	imul   edx,eax
c000beda:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000bedd:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000bee1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bee8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000beeb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bef2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bef5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bef8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000befc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf00:	57                   	push   edi
c000bf01:	57                   	push   edi
c000bf02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf0a:	e8 38 d7 ff ff       	call   c0009647 <is_bad_src_ratio>
c000bf0f:	83 c4 10             	add    esp,0x10
c000bf12:	89 c2                	mov    edx,eax
c000bf14:	b8 16 00 00 00       	mov    eax,0x16
c000bf19:	85 d2                	test   edx,edx
c000bf1b:	0f 85 67 05 00 00    	jne    c000c488 <sinc_hex_vari_process+0x5d6>
c000bf21:	83 ec 0c             	sub    esp,0xc
c000bf24:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf27:	e8 97 8d 01 00       	call   c0024cc3 <__floatsidf>
c000bf2c:	83 c4 10             	add    esp,0x10
c000bf2f:	89 04 24             	mov    DWORD PTR [esp],eax
c000bf32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bf36:	68 00 00 00 40       	push   0x40000000
c000bf3b:	6a 00                	push   0x0
c000bf3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf45:	e8 99 80 01 00       	call   c0023fe3 <__adddf3>
c000bf4a:	59                   	pop    ecx
c000bf4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf4f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000bf53:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf56:	e8 68 8d 01 00       	call   c0024cc3 <__floatsidf>
c000bf5b:	83 c4 10             	add    esp,0x10
c000bf5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf62:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf66:	52                   	push   edx
c000bf67:	50                   	push   eax
c000bf68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf70:	e8 cf 89 01 00       	call   c0024944 <__divdf3>
c000bf75:	83 c4 10             	add    esp,0x10
c000bf78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bf7c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bf80:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf83:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf86:	89 04 24             	mov    DWORD PTR [esp],eax
c000bf89:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bf8d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bf90:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bf93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf97:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf9b:	52                   	push   edx
c000bf9c:	50                   	push   eax
c000bf9d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfa1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfa5:	e8 85 8f 01 00       	call   c0024f2f <__ltdf2>
c000bfaa:	83 c4 10             	add    esp,0x10
c000bfad:	85 c0                	test   eax,eax
c000bfaf:	79 1d                	jns    c000bfce <sinc_hex_vari_process+0x11c>
c000bfb1:	68 00 00 f0 3f       	push   0x3ff00000
c000bfb6:	6a 00                	push   0x0
c000bfb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfc0:	e8 6a 8f 01 00       	call   c0024f2f <__ltdf2>
c000bfc5:	83 c4 10             	add    esp,0x10
c000bfc8:	85 c0                	test   eax,eax
c000bfca:	78 2c                	js     c000bff8 <sinc_hex_vari_process+0x146>
c000bfcc:	eb 4a                	jmp    c000c018 <sinc_hex_vari_process+0x166>
c000bfce:	68 00 00 f0 3f       	push   0x3ff00000
c000bfd3:	6a 00                	push   0x0
c000bfd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfdd:	e8 4d 8f 01 00       	call   c0024f2f <__ltdf2>
c000bfe2:	83 c4 10             	add    esp,0x10
c000bfe5:	85 c0                	test   eax,eax
c000bfe7:	79 2f                	jns    c000c018 <sinc_hex_vari_process+0x166>
c000bfe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bff1:	89 04 24             	mov    DWORD PTR [esp],eax
c000bff4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bff8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bffc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c000:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c004:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c008:	e8 37 89 01 00       	call   c0024944 <__divdf3>
c000c00d:	83 c4 10             	add    esp,0x10
c000c010:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c014:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c018:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c01b:	50                   	push   eax
c000c01c:	50                   	push   eax
c000c01d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c021:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c025:	e8 b6 90 01 00       	call   c00250e0 <lrint>
c000c02a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c02d:	40                   	inc    eax
c000c02e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c032:	0f af c7             	imul   eax,edi
c000c035:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c03c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c040:	58                   	pop    eax
c000c041:	5a                   	pop    edx
c000c042:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c046:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c04a:	e8 77 f6 ff ff       	call   c000b6c6 <fmod_one>
c000c04f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c05a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c05d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c061:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c065:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c069:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c06d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c071:	e8 be 85 01 00       	call   c0024634 <__subdf3>
c000c076:	83 c4 18             	add    esp,0x18
c000c079:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c07d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c081:	52                   	push   edx
c000c082:	50                   	push   eax
c000c083:	e8 58 90 01 00       	call   c00250e0 <lrint>
c000c088:	0f af f8             	imul   edi,eax
c000c08b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c08f:	01 f8                	add    eax,edi
c000c091:	99                   	cdq    
c000c092:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c095:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a0:	68 00 00 f0 3f       	push   0x3ff00000
c000c0a5:	6a 00                	push   0x0
c000c0a7:	e8 98 88 01 00       	call   c0024944 <__divdf3>
c000c0ac:	83 c4 10             	add    esp,0x10
c000c0af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0b7:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c0bc:	68 23 42 92 0c       	push   0xc924223
c000c0c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c9:	e8 15 7f 01 00       	call   c0023fe3 <__adddf3>
c000c0ce:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c0d2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c0d6:	83 c4 20             	add    esp,0x20
c000c0d9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c0e1:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c0e9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c0ec:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c0ef:	7d 4e                	jge    c000c13f <sinc_hex_vari_process+0x28d>
c000c0f1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c0f4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c0f7:	01 c8                	add    eax,ecx
c000c0f9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c0fc:	99                   	cdq    
c000c0fd:	f7 f9                	idiv   ecx
c000c0ff:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c103:	7d 0c                	jge    c000c111 <sinc_hex_vari_process+0x25f>
c000c105:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c108:	85 ff                	test   edi,edi
c000c10a:	79 69                	jns    c000c175 <sinc_hex_vari_process+0x2c3>
c000c10c:	e9 e4 00 00 00       	jmp    c000c1f5 <sinc_hex_vari_process+0x343>
c000c111:	50                   	push   eax
c000c112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c116:	56                   	push   esi
c000c117:	53                   	push   ebx
c000c118:	e8 3f f6 ff ff       	call   c000b75c <prepare_data>
c000c11d:	83 c4 10             	add    esp,0x10
c000c120:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c123:	85 c0                	test   eax,eax
c000c125:	0f 85 5d 03 00 00    	jne    c000c488 <sinc_hex_vari_process+0x5d6>
c000c12b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c12e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c131:	01 c8                	add    eax,ecx
c000c133:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c136:	99                   	cdq    
c000c137:	f7 f9                	idiv   ecx
c000c139:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c13d:	7c c6                	jl     c000c105 <sinc_hex_vari_process+0x253>
c000c13f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c142:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c146:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c149:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c14c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c150:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c154:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c157:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c15a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c15d:	99                   	cdq    
c000c15e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c161:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c164:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c167:	99                   	cdq    
c000c168:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c16b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c16e:	31 c0                	xor    eax,eax
c000c170:	e9 13 03 00 00       	jmp    c000c488 <sinc_hex_vari_process+0x5d6>
c000c175:	83 ec 0c             	sub    esp,0xc
c000c178:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c17b:	e8 43 8b 01 00       	call   c0024cc3 <__floatsidf>
c000c180:	83 c4 10             	add    esp,0x10
c000c183:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c187:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c18b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c18f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c193:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c197:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c19b:	e8 43 7e 01 00       	call   c0023fe3 <__adddf3>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1bb:	e8 23 7e 01 00       	call   c0023fe3 <__adddf3>
c000c1c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c1c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c1c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c1cb:	e8 f3 8a 01 00       	call   c0024cc3 <__floatsidf>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c1d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c1db:	52                   	push   edx
c000c1dc:	50                   	push   eax
c000c1dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1e5:	e8 43 8d 01 00       	call   c0024f2d <__gedf2>
c000c1ea:	83 c4 10             	add    esp,0x10
c000c1ed:	85 c0                	test   eax,eax
c000c1ef:	0f 89 4a ff ff ff    	jns    c000c13f <sinc_hex_vari_process+0x28d>
c000c1f5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c1f9:	0f 8e ef 00 00 00    	jle    c000c2ee <sinc_hex_vari_process+0x43c>
c000c1ff:	83 ec 10             	sub    esp,0x10
c000c202:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c205:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c208:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c20b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c20e:	e8 21 84 01 00       	call   c0024634 <__subdf3>
c000c213:	83 c4 18             	add    esp,0x18
c000c216:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c21a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c21e:	52                   	push   edx
c000c21f:	50                   	push   eax
c000c220:	e8 9b 8e 01 00       	call   c00250c0 <fabs>
c000c225:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c229:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c22d:	83 c4 10             	add    esp,0x10
c000c230:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c235:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c23a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c23e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c242:	e8 ca 8c 01 00       	call   c0024f11 <__gtdf2>
c000c247:	83 c4 10             	add    esp,0x10
c000c24a:	85 c0                	test   eax,eax
c000c24c:	0f 8e 9c 00 00 00    	jle    c000c2ee <sinc_hex_vari_process+0x43c>
c000c252:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c255:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c258:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c25c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c260:	52                   	push   edx
c000c261:	50                   	push   eax
c000c262:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c265:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c268:	e8 c7 83 01 00       	call   c0024634 <__subdf3>
c000c26d:	59                   	pop    ecx
c000c26e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c272:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c276:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c279:	e8 45 8a 01 00       	call   c0024cc3 <__floatsidf>
c000c27e:	83 c4 10             	add    esp,0x10
c000c281:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c285:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c289:	52                   	push   edx
c000c28a:	50                   	push   eax
c000c28b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c293:	e8 c8 83 01 00       	call   c0024660 <__muldf3>
c000c298:	5f                   	pop    edi
c000c299:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c29d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2a1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c2a4:	e8 1a 8a 01 00       	call   c0024cc3 <__floatsidf>
c000c2a9:	83 c4 10             	add    esp,0x10
c000c2ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2b4:	52                   	push   edx
c000c2b5:	50                   	push   eax
c000c2b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2be:	e8 81 86 01 00       	call   c0024944 <__divdf3>
c000c2c3:	83 c4 10             	add    esp,0x10
c000c2c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2de:	e8 00 7d 01 00       	call   c0023fe3 <__adddf3>
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2ee:	83 ec 0c             	sub    esp,0xc
c000c2f1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c2f4:	e8 ca 89 01 00       	call   c0024cc3 <__floatsidf>
c000c2f9:	83 c4 10             	add    esp,0x10
c000c2fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c300:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c304:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c308:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c30c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c310:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c314:	e8 16 8c 01 00       	call   c0024f2f <__ltdf2>
c000c319:	83 c4 10             	add    esp,0x10
c000c31c:	85 c0                	test   eax,eax
c000c31e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c322:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c326:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c32a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c32e:	78 10                	js     c000c340 <sinc_hex_vari_process+0x48e>
c000c330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c334:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c33c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c348:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c34c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c350:	e8 0b 83 01 00       	call   c0024660 <__muldf3>
c000c355:	59                   	pop    ecx
c000c356:	5f                   	pop    edi
c000c357:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c35b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c35f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c363:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c367:	e8 33 f3 ff ff       	call   c000b69f <double_to_fp>
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	89 c7                	mov    edi,eax
c000c372:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c37e:	e8 dd 82 01 00       	call   c0024660 <__muldf3>
c000c383:	83 c4 18             	add    esp,0x18
c000c386:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c38a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c38e:	52                   	push   edx
c000c38f:	50                   	push   eax
c000c390:	e8 0a f3 ff ff       	call   c000b69f <double_to_fp>
c000c395:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c398:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c39c:	83 c4 0c             	add    esp,0xc
c000c39f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c3a2:	8d 04 90             	lea    eax,[eax+edx*4]
c000c3a5:	50                   	push   eax
c000c3a6:	50                   	push   eax
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 14 89 01 00       	call   c0024cc3 <__floatsidf>
c000c3af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c3b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c3b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3bb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c7:	e8 78 85 01 00       	call   c0024944 <__divdf3>
c000c3cc:	83 c4 18             	add    esp,0x18
c000c3cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3d3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3d7:	52                   	push   edx
c000c3d8:	89 fa                	mov    edx,edi
c000c3da:	50                   	push   eax
c000c3db:	89 d8                	mov    eax,ebx
c000c3dd:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c3e1:	e8 26 df ff ff       	call   c000a30c <calc_output_hex>
c000c3e6:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3fa:	e8 45 85 01 00       	call   c0024944 <__divdf3>
c000c3ff:	83 c4 10             	add    esp,0x10
c000c402:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c406:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c40e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c412:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c416:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c41a:	e8 c4 7b 01 00       	call   c0023fe3 <__adddf3>
c000c41f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c423:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c427:	83 c4 18             	add    esp,0x18
c000c42a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c42e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c432:	e8 8f f2 ff ff       	call   c000b6c6 <fmod_one>
c000c437:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c43a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c43e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c442:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c445:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c451:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c455:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c459:	e8 d6 81 01 00       	call   c0024634 <__subdf3>
c000c45e:	83 c4 18             	add    esp,0x18
c000c461:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c465:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c469:	52                   	push   edx
c000c46a:	50                   	push   eax
c000c46b:	e8 70 8c 01 00       	call   c00250e0 <lrint>
c000c470:	0f af f8             	imul   edi,eax
c000c473:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c477:	83 c4 10             	add    esp,0x10
c000c47a:	01 f8                	add    eax,edi
c000c47c:	99                   	cdq    
c000c47d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c480:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c483:	e9 61 fc ff ff       	jmp    c000c0e9 <sinc_hex_vari_process+0x237>
c000c488:	83 c4 4c             	add    esp,0x4c
c000c48b:	5b                   	pop    ebx
c000c48c:	5e                   	pop    esi
c000c48d:	5f                   	pop    edi
c000c48e:	5d                   	pop    ebp
c000c48f:	c3                   	ret    

c000c490 <sinc_quad_vari_process>:
c000c490:	55                   	push   ebp
c000c491:	b8 05 00 00 00       	mov    eax,0x5
c000c496:	57                   	push   edi
c000c497:	56                   	push   esi
c000c498:	53                   	push   ebx
c000c499:	83 ec 4c             	sub    esp,0x4c
c000c49c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c4a0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c4a4:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c4a7:	85 db                	test   ebx,ebx
c000c4a9:	0f 84 b7 05 00 00    	je     c000ca66 <sinc_quad_vari_process+0x5d6>
c000c4af:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000c4b2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c4b5:	0f af d0             	imul   edx,eax
c000c4b8:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000c4bb:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000c4bf:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c4c6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c4c9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c4d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c4d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c4d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4de:	57                   	push   edi
c000c4df:	57                   	push   edi
c000c4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4e8:	e8 5a d1 ff ff       	call   c0009647 <is_bad_src_ratio>
c000c4ed:	83 c4 10             	add    esp,0x10
c000c4f0:	89 c2                	mov    edx,eax
c000c4f2:	b8 16 00 00 00       	mov    eax,0x16
c000c4f7:	85 d2                	test   edx,edx
c000c4f9:	0f 85 67 05 00 00    	jne    c000ca66 <sinc_quad_vari_process+0x5d6>
c000c4ff:	83 ec 0c             	sub    esp,0xc
c000c502:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c505:	e8 b9 87 01 00       	call   c0024cc3 <__floatsidf>
c000c50a:	83 c4 10             	add    esp,0x10
c000c50d:	89 04 24             	mov    DWORD PTR [esp],eax
c000c510:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c514:	68 00 00 00 40       	push   0x40000000
c000c519:	6a 00                	push   0x0
c000c51b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c51f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c523:	e8 bb 7a 01 00       	call   c0023fe3 <__adddf3>
c000c528:	59                   	pop    ecx
c000c529:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c52d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c531:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c534:	e8 8a 87 01 00       	call   c0024cc3 <__floatsidf>
c000c539:	83 c4 10             	add    esp,0x10
c000c53c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c540:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c544:	52                   	push   edx
c000c545:	50                   	push   eax
c000c546:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c54a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c54e:	e8 f1 83 01 00       	call   c0024944 <__divdf3>
c000c553:	83 c4 10             	add    esp,0x10
c000c556:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c55a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c55e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c561:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c564:	89 04 24             	mov    DWORD PTR [esp],eax
c000c567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c56b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c56e:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c571:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c575:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c579:	52                   	push   edx
c000c57a:	50                   	push   eax
c000c57b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c57f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c583:	e8 a7 89 01 00       	call   c0024f2f <__ltdf2>
c000c588:	83 c4 10             	add    esp,0x10
c000c58b:	85 c0                	test   eax,eax
c000c58d:	79 1d                	jns    c000c5ac <sinc_quad_vari_process+0x11c>
c000c58f:	68 00 00 f0 3f       	push   0x3ff00000
c000c594:	6a 00                	push   0x0
c000c596:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c59a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c59e:	e8 8c 89 01 00       	call   c0024f2f <__ltdf2>
c000c5a3:	83 c4 10             	add    esp,0x10
c000c5a6:	85 c0                	test   eax,eax
c000c5a8:	78 2c                	js     c000c5d6 <sinc_quad_vari_process+0x146>
c000c5aa:	eb 4a                	jmp    c000c5f6 <sinc_quad_vari_process+0x166>
c000c5ac:	68 00 00 f0 3f       	push   0x3ff00000
c000c5b1:	6a 00                	push   0x0
c000c5b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5bb:	e8 6f 89 01 00       	call   c0024f2f <__ltdf2>
c000c5c0:	83 c4 10             	add    esp,0x10
c000c5c3:	85 c0                	test   eax,eax
c000c5c5:	79 2f                	jns    c000c5f6 <sinc_quad_vari_process+0x166>
c000c5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c5cf:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5d2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5d6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c5da:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c5de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c5e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c5e6:	e8 59 83 01 00       	call   c0024944 <__divdf3>
c000c5eb:	83 c4 10             	add    esp,0x10
c000c5ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c5f6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5f9:	50                   	push   eax
c000c5fa:	50                   	push   eax
c000c5fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c5ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c603:	e8 d8 8a 01 00       	call   c00250e0 <lrint>
c000c608:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c60b:	40                   	inc    eax
c000c60c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c610:	0f af c7             	imul   eax,edi
c000c613:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c61a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c61e:	58                   	pop    eax
c000c61f:	5a                   	pop    edx
c000c620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c624:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c628:	e8 99 f0 ff ff       	call   c000b6c6 <fmod_one>
c000c62d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c630:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c634:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c638:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c63b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c643:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c647:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c64b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c64f:	e8 e0 7f 01 00       	call   c0024634 <__subdf3>
c000c654:	83 c4 18             	add    esp,0x18
c000c657:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c65b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c65f:	52                   	push   edx
c000c660:	50                   	push   eax
c000c661:	e8 7a 8a 01 00       	call   c00250e0 <lrint>
c000c666:	0f af f8             	imul   edi,eax
c000c669:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c66d:	01 f8                	add    eax,edi
c000c66f:	99                   	cdq    
c000c670:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c673:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c67a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c67e:	68 00 00 f0 3f       	push   0x3ff00000
c000c683:	6a 00                	push   0x0
c000c685:	e8 ba 82 01 00       	call   c0024944 <__divdf3>
c000c68a:	83 c4 10             	add    esp,0x10
c000c68d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c695:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c69a:	68 23 42 92 0c       	push   0xc924223
c000c69f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6a7:	e8 37 79 01 00       	call   c0023fe3 <__adddf3>
c000c6ac:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c6b0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c6b4:	83 c4 20             	add    esp,0x20
c000c6b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c6bf:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c6c7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c6ca:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c6cd:	7d 4e                	jge    c000c71d <sinc_quad_vari_process+0x28d>
c000c6cf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c6d2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c6d5:	01 c8                	add    eax,ecx
c000c6d7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c6da:	99                   	cdq    
c000c6db:	f7 f9                	idiv   ecx
c000c6dd:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c6e1:	7d 0c                	jge    c000c6ef <sinc_quad_vari_process+0x25f>
c000c6e3:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c6e6:	85 ff                	test   edi,edi
c000c6e8:	79 69                	jns    c000c753 <sinc_quad_vari_process+0x2c3>
c000c6ea:	e9 e4 00 00 00       	jmp    c000c7d3 <sinc_quad_vari_process+0x343>
c000c6ef:	50                   	push   eax
c000c6f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f4:	56                   	push   esi
c000c6f5:	53                   	push   ebx
c000c6f6:	e8 61 f0 ff ff       	call   c000b75c <prepare_data>
c000c6fb:	83 c4 10             	add    esp,0x10
c000c6fe:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c701:	85 c0                	test   eax,eax
c000c703:	0f 85 5d 03 00 00    	jne    c000ca66 <sinc_quad_vari_process+0x5d6>
c000c709:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c70c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c70f:	01 c8                	add    eax,ecx
c000c711:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c714:	99                   	cdq    
c000c715:	f7 f9                	idiv   ecx
c000c717:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c71b:	7c c6                	jl     c000c6e3 <sinc_quad_vari_process+0x253>
c000c71d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c720:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c724:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c727:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c72a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c72e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c732:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c735:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c738:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c73b:	99                   	cdq    
c000c73c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c73f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c742:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c745:	99                   	cdq    
c000c746:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c749:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c74c:	31 c0                	xor    eax,eax
c000c74e:	e9 13 03 00 00       	jmp    c000ca66 <sinc_quad_vari_process+0x5d6>
c000c753:	83 ec 0c             	sub    esp,0xc
c000c756:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c759:	e8 65 85 01 00       	call   c0024cc3 <__floatsidf>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c765:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c769:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c76d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c771:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c775:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c779:	e8 65 78 01 00       	call   c0023fe3 <__adddf3>
c000c77e:	83 c4 10             	add    esp,0x10
c000c781:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c785:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c789:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c78d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c791:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c795:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c799:	e8 45 78 01 00       	call   c0023fe3 <__adddf3>
c000c79e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c7a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7a9:	e8 15 85 01 00       	call   c0024cc3 <__floatsidf>
c000c7ae:	83 c4 10             	add    esp,0x10
c000c7b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b9:	52                   	push   edx
c000c7ba:	50                   	push   eax
c000c7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7c3:	e8 65 87 01 00       	call   c0024f2d <__gedf2>
c000c7c8:	83 c4 10             	add    esp,0x10
c000c7cb:	85 c0                	test   eax,eax
c000c7cd:	0f 89 4a ff ff ff    	jns    c000c71d <sinc_quad_vari_process+0x28d>
c000c7d3:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c7d7:	0f 8e ef 00 00 00    	jle    c000c8cc <sinc_quad_vari_process+0x43c>
c000c7dd:	83 ec 10             	sub    esp,0x10
c000c7e0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c7e3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c7e6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c7e9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c7ec:	e8 43 7e 01 00       	call   c0024634 <__subdf3>
c000c7f1:	83 c4 18             	add    esp,0x18
c000c7f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7fc:	52                   	push   edx
c000c7fd:	50                   	push   eax
c000c7fe:	e8 bd 88 01 00       	call   c00250c0 <fabs>
c000c803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c80b:	83 c4 10             	add    esp,0x10
c000c80e:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c813:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c818:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c81c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c820:	e8 ec 86 01 00       	call   c0024f11 <__gtdf2>
c000c825:	83 c4 10             	add    esp,0x10
c000c828:	85 c0                	test   eax,eax
c000c82a:	0f 8e 9c 00 00 00    	jle    c000c8cc <sinc_quad_vari_process+0x43c>
c000c830:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c833:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c836:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c83a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c83e:	52                   	push   edx
c000c83f:	50                   	push   eax
c000c840:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c843:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c846:	e8 e9 7d 01 00       	call   c0024634 <__subdf3>
c000c84b:	59                   	pop    ecx
c000c84c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c850:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c854:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c857:	e8 67 84 01 00       	call   c0024cc3 <__floatsidf>
c000c85c:	83 c4 10             	add    esp,0x10
c000c85f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c863:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c867:	52                   	push   edx
c000c868:	50                   	push   eax
c000c869:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c86d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c871:	e8 ea 7d 01 00       	call   c0024660 <__muldf3>
c000c876:	5f                   	pop    edi
c000c877:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c87b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c87f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c882:	e8 3c 84 01 00       	call   c0024cc3 <__floatsidf>
c000c887:	83 c4 10             	add    esp,0x10
c000c88a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c88e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c892:	52                   	push   edx
c000c893:	50                   	push   eax
c000c894:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c898:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c89c:	e8 a3 80 01 00       	call   c0024944 <__divdf3>
c000c8a1:	83 c4 10             	add    esp,0x10
c000c8a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8bc:	e8 22 77 01 00       	call   c0023fe3 <__adddf3>
c000c8c1:	83 c4 10             	add    esp,0x10
c000c8c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8cc:	83 ec 0c             	sub    esp,0xc
c000c8cf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8d2:	e8 ec 83 01 00       	call   c0024cc3 <__floatsidf>
c000c8d7:	83 c4 10             	add    esp,0x10
c000c8da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8f2:	e8 38 86 01 00       	call   c0024f2f <__ltdf2>
c000c8f7:	83 c4 10             	add    esp,0x10
c000c8fa:	85 c0                	test   eax,eax
c000c8fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c900:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c904:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c908:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c90c:	78 10                	js     c000c91e <sinc_quad_vari_process+0x48e>
c000c90e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c912:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c916:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c91a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c91e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	e8 2d 7d 01 00       	call   c0024660 <__muldf3>
c000c933:	59                   	pop    ecx
c000c934:	5f                   	pop    edi
c000c935:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c939:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c93d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c941:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c945:	e8 55 ed ff ff       	call   c000b69f <double_to_fp>
c000c94a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94e:	89 c7                	mov    edi,eax
c000c950:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c95c:	e8 ff 7c 01 00       	call   c0024660 <__muldf3>
c000c961:	83 c4 18             	add    esp,0x18
c000c964:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c968:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c96c:	52                   	push   edx
c000c96d:	50                   	push   eax
c000c96e:	e8 2c ed ff ff       	call   c000b69f <double_to_fp>
c000c973:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c976:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c97a:	83 c4 0c             	add    esp,0xc
c000c97d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c980:	8d 04 90             	lea    eax,[eax+edx*4]
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c988:	e8 36 83 01 00       	call   c0024cc3 <__floatsidf>
c000c98d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c991:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c995:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c999:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c99d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9a5:	e8 9a 7f 01 00       	call   c0024944 <__divdf3>
c000c9aa:	83 c4 18             	add    esp,0x18
c000c9ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c9b1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c9b5:	52                   	push   edx
c000c9b6:	89 fa                	mov    edx,edi
c000c9b8:	50                   	push   eax
c000c9b9:	89 d8                	mov    eax,ebx
c000c9bb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c9bf:	e8 62 d3 ff ff       	call   c0009d26 <calc_output_quad>
c000c9c4:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000c9c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9d0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9d8:	e8 67 7f 01 00       	call   c0024944 <__divdf3>
c000c9dd:	83 c4 10             	add    esp,0x10
c000c9e0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9e4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f8:	e8 e6 75 01 00       	call   c0023fe3 <__adddf3>
c000c9fd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca01:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ca05:	83 c4 18             	add    esp,0x18
c000ca08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca10:	e8 b1 ec ff ff       	call   c000b6c6 <fmod_one>
c000ca15:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca20:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca23:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca37:	e8 f8 7b 01 00       	call   c0024634 <__subdf3>
c000ca3c:	83 c4 18             	add    esp,0x18
c000ca3f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca43:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca47:	52                   	push   edx
c000ca48:	50                   	push   eax
c000ca49:	e8 92 86 01 00       	call   c00250e0 <lrint>
c000ca4e:	0f af f8             	imul   edi,eax
c000ca51:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca55:	83 c4 10             	add    esp,0x10
c000ca58:	01 f8                	add    eax,edi
c000ca5a:	99                   	cdq    
c000ca5b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca61:	e9 61 fc ff ff       	jmp    c000c6c7 <sinc_quad_vari_process+0x237>
c000ca66:	83 c4 4c             	add    esp,0x4c
c000ca69:	5b                   	pop    ebx
c000ca6a:	5e                   	pop    esi
c000ca6b:	5f                   	pop    edi
c000ca6c:	5d                   	pop    ebp
c000ca6d:	c3                   	ret    

c000ca6e <sinc_stereo_vari_process>:
c000ca6e:	55                   	push   ebp
c000ca6f:	b8 05 00 00 00       	mov    eax,0x5
c000ca74:	57                   	push   edi
c000ca75:	56                   	push   esi
c000ca76:	53                   	push   ebx
c000ca77:	83 ec 4c             	sub    esp,0x4c
c000ca7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ca7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ca82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ca85:	85 db                	test   ebx,ebx
c000ca87:	0f 84 b7 05 00 00    	je     c000d044 <sinc_stereo_vari_process+0x5d6>
c000ca8d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ca90:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca93:	0f af d0             	imul   edx,eax
c000ca96:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000ca99:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ca9d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000caa4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000caa7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000caae:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cab1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cab4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cab8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cabc:	57                   	push   edi
c000cabd:	57                   	push   edi
c000cabe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cac2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cac6:	e8 7c cb ff ff       	call   c0009647 <is_bad_src_ratio>
c000cacb:	83 c4 10             	add    esp,0x10
c000cace:	89 c2                	mov    edx,eax
c000cad0:	b8 16 00 00 00       	mov    eax,0x16
c000cad5:	85 d2                	test   edx,edx
c000cad7:	0f 85 67 05 00 00    	jne    c000d044 <sinc_stereo_vari_process+0x5d6>
c000cadd:	83 ec 0c             	sub    esp,0xc
c000cae0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cae3:	e8 db 81 01 00       	call   c0024cc3 <__floatsidf>
c000cae8:	83 c4 10             	add    esp,0x10
c000caeb:	89 04 24             	mov    DWORD PTR [esp],eax
c000caee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000caf2:	68 00 00 00 40       	push   0x40000000
c000caf7:	6a 00                	push   0x0
c000caf9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cafd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb01:	e8 dd 74 01 00       	call   c0023fe3 <__adddf3>
c000cb06:	59                   	pop    ecx
c000cb07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb0b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000cb0f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb12:	e8 ac 81 01 00       	call   c0024cc3 <__floatsidf>
c000cb17:	83 c4 10             	add    esp,0x10
c000cb1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb22:	52                   	push   edx
c000cb23:	50                   	push   eax
c000cb24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb2c:	e8 13 7e 01 00       	call   c0024944 <__divdf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb3c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb3f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cb42:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb49:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cb4c:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cb4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb53:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb57:	52                   	push   edx
c000cb58:	50                   	push   eax
c000cb59:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb61:	e8 c9 83 01 00       	call   c0024f2f <__ltdf2>
c000cb66:	83 c4 10             	add    esp,0x10
c000cb69:	85 c0                	test   eax,eax
c000cb6b:	79 1d                	jns    c000cb8a <sinc_stereo_vari_process+0x11c>
c000cb6d:	68 00 00 f0 3f       	push   0x3ff00000
c000cb72:	6a 00                	push   0x0
c000cb74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb7c:	e8 ae 83 01 00       	call   c0024f2f <__ltdf2>
c000cb81:	83 c4 10             	add    esp,0x10
c000cb84:	85 c0                	test   eax,eax
c000cb86:	78 2c                	js     c000cbb4 <sinc_stereo_vari_process+0x146>
c000cb88:	eb 4a                	jmp    c000cbd4 <sinc_stereo_vari_process+0x166>
c000cb8a:	68 00 00 f0 3f       	push   0x3ff00000
c000cb8f:	6a 00                	push   0x0
c000cb91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb99:	e8 91 83 01 00       	call   c0024f2f <__ltdf2>
c000cb9e:	83 c4 10             	add    esp,0x10
c000cba1:	85 c0                	test   eax,eax
c000cba3:	79 2f                	jns    c000cbd4 <sinc_stereo_vari_process+0x166>
c000cba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cba9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cbad:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbb0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cbb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cbb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cbbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbc4:	e8 7b 7d 01 00       	call   c0024944 <__divdf3>
c000cbc9:	83 c4 10             	add    esp,0x10
c000cbcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbd4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cbd7:	50                   	push   eax
c000cbd8:	50                   	push   eax
c000cbd9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbdd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbe1:	e8 fa 84 01 00       	call   c00250e0 <lrint>
c000cbe6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cbe9:	40                   	inc    eax
c000cbea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbee:	0f af c7             	imul   eax,edi
c000cbf1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cbf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbf8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbfc:	58                   	pop    eax
c000cbfd:	5a                   	pop    edx
c000cbfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc06:	e8 bb ea ff ff       	call   c000b6c6 <fmod_one>
c000cc0b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc12:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc19:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc2d:	e8 02 7a 01 00       	call   c0024634 <__subdf3>
c000cc32:	83 c4 18             	add    esp,0x18
c000cc35:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc39:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc3d:	52                   	push   edx
c000cc3e:	50                   	push   eax
c000cc3f:	e8 9c 84 01 00       	call   c00250e0 <lrint>
c000cc44:	0f af f8             	imul   edi,eax
c000cc47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc4b:	01 f8                	add    eax,edi
c000cc4d:	99                   	cdq    
c000cc4e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc51:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc5c:	68 00 00 f0 3f       	push   0x3ff00000
c000cc61:	6a 00                	push   0x0
c000cc63:	e8 dc 7c 01 00       	call   c0024944 <__divdf3>
c000cc68:	83 c4 10             	add    esp,0x10
c000cc6b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc6f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc73:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cc78:	68 23 42 92 0c       	push   0xc924223
c000cc7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc85:	e8 59 73 01 00       	call   c0023fe3 <__adddf3>
c000cc8a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cc8e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cc92:	83 c4 20             	add    esp,0x20
c000cc95:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000cc9d:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000cca5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cca8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccab:	7d 4e                	jge    c000ccfb <sinc_stereo_vari_process+0x28d>
c000ccad:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccb0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccb3:	01 c8                	add    eax,ecx
c000ccb5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccb8:	99                   	cdq    
c000ccb9:	f7 f9                	idiv   ecx
c000ccbb:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000ccbf:	7d 0c                	jge    c000cccd <sinc_stereo_vari_process+0x25f>
c000ccc1:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ccc4:	85 ff                	test   edi,edi
c000ccc6:	79 69                	jns    c000cd31 <sinc_stereo_vari_process+0x2c3>
c000ccc8:	e9 e4 00 00 00       	jmp    c000cdb1 <sinc_stereo_vari_process+0x343>
c000cccd:	50                   	push   eax
c000ccce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccd2:	56                   	push   esi
c000ccd3:	53                   	push   ebx
c000ccd4:	e8 83 ea ff ff       	call   c000b75c <prepare_data>
c000ccd9:	83 c4 10             	add    esp,0x10
c000ccdc:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000ccdf:	85 c0                	test   eax,eax
c000cce1:	0f 85 5d 03 00 00    	jne    c000d044 <sinc_stereo_vari_process+0x5d6>
c000cce7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccea:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cced:	01 c8                	add    eax,ecx
c000ccef:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccf2:	99                   	cdq    
c000ccf3:	f7 f9                	idiv   ecx
c000ccf5:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000ccf9:	7c c6                	jl     c000ccc1 <sinc_stereo_vari_process+0x253>
c000ccfb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ccfe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd02:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd05:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd10:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd13:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd16:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd19:	99                   	cdq    
c000cd1a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd1d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd20:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd23:	99                   	cdq    
c000cd24:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd27:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd2a:	31 c0                	xor    eax,eax
c000cd2c:	e9 13 03 00 00       	jmp    c000d044 <sinc_stereo_vari_process+0x5d6>
c000cd31:	83 ec 0c             	sub    esp,0xc
c000cd34:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd37:	e8 87 7f 01 00       	call   c0024cc3 <__floatsidf>
c000cd3c:	83 c4 10             	add    esp,0x10
c000cd3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd47:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cd4b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cd4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd53:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd57:	e8 87 72 01 00       	call   c0023fe3 <__adddf3>
c000cd5c:	83 c4 10             	add    esp,0x10
c000cd5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd77:	e8 67 72 01 00       	call   c0023fe3 <__adddf3>
c000cd7c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd87:	e8 37 7f 01 00       	call   c0024cc3 <__floatsidf>
c000cd8c:	83 c4 10             	add    esp,0x10
c000cd8f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd93:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd97:	52                   	push   edx
c000cd98:	50                   	push   eax
c000cd99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cda1:	e8 87 81 01 00       	call   c0024f2d <__gedf2>
c000cda6:	83 c4 10             	add    esp,0x10
c000cda9:	85 c0                	test   eax,eax
c000cdab:	0f 89 4a ff ff ff    	jns    c000ccfb <sinc_stereo_vari_process+0x28d>
c000cdb1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdb5:	0f 8e ef 00 00 00    	jle    c000ceaa <sinc_stereo_vari_process+0x43c>
c000cdbb:	83 ec 10             	sub    esp,0x10
c000cdbe:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cdc1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cdc4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cdc7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cdca:	e8 65 78 01 00       	call   c0024634 <__subdf3>
c000cdcf:	83 c4 18             	add    esp,0x18
c000cdd2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cdd6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cdda:	52                   	push   edx
c000cddb:	50                   	push   eax
c000cddc:	e8 df 82 01 00       	call   c00250c0 <fabs>
c000cde1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cde5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cde9:	83 c4 10             	add    esp,0x10
c000cdec:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cdf1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cdf6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	e8 0e 81 01 00       	call   c0024f11 <__gtdf2>
c000ce03:	83 c4 10             	add    esp,0x10
c000ce06:	85 c0                	test   eax,eax
c000ce08:	0f 8e 9c 00 00 00    	jle    c000ceaa <sinc_stereo_vari_process+0x43c>
c000ce0e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce11:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce1c:	52                   	push   edx
c000ce1d:	50                   	push   eax
c000ce1e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce21:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce24:	e8 0b 78 01 00       	call   c0024634 <__subdf3>
c000ce29:	59                   	pop    ecx
c000ce2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ce2e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ce32:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce35:	e8 89 7e 01 00       	call   c0024cc3 <__floatsidf>
c000ce3a:	83 c4 10             	add    esp,0x10
c000ce3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce45:	52                   	push   edx
c000ce46:	50                   	push   eax
c000ce47:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce4b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce4f:	e8 0c 78 01 00       	call   c0024660 <__muldf3>
c000ce54:	5f                   	pop    edi
c000ce55:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ce59:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ce5d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ce60:	e8 5e 7e 01 00       	call   c0024cc3 <__floatsidf>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce6c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce70:	52                   	push   edx
c000ce71:	50                   	push   eax
c000ce72:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce76:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce7a:	e8 c5 7a 01 00       	call   c0024944 <__divdf3>
c000ce7f:	83 c4 10             	add    esp,0x10
c000ce82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce86:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce8a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce8e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce92:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce9a:	e8 44 71 01 00       	call   c0023fe3 <__adddf3>
c000ce9f:	83 c4 10             	add    esp,0x10
c000cea2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cea6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ceaa:	83 ec 0c             	sub    esp,0xc
c000cead:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ceb0:	e8 0e 7e 01 00       	call   c0024cc3 <__floatsidf>
c000ceb5:	83 c4 10             	add    esp,0x10
c000ceb8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cebc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cec0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cec4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ced0:	e8 5a 80 01 00       	call   c0024f2f <__ltdf2>
c000ced5:	83 c4 10             	add    esp,0x10
c000ced8:	85 c0                	test   eax,eax
c000ceda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cede:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cee2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000ceea:	78 10                	js     c000cefc <sinc_stereo_vari_process+0x48e>
c000ceec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cef0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cef4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cef8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cefc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf04:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf08:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf0c:	e8 4f 77 01 00       	call   c0024660 <__muldf3>
c000cf11:	59                   	pop    ecx
c000cf12:	5f                   	pop    edi
c000cf13:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf17:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf23:	e8 77 e7 ff ff       	call   c000b69f <double_to_fp>
c000cf28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2c:	89 c7                	mov    edi,eax
c000cf2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3a:	e8 21 77 01 00       	call   c0024660 <__muldf3>
c000cf3f:	83 c4 18             	add    esp,0x18
c000cf42:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf4a:	52                   	push   edx
c000cf4b:	50                   	push   eax
c000cf4c:	e8 4e e7 ff ff       	call   c000b69f <double_to_fp>
c000cf51:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf54:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cf58:	83 c4 0c             	add    esp,0xc
c000cf5b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cf5e:	8d 04 90             	lea    eax,[eax+edx*4]
c000cf61:	50                   	push   eax
c000cf62:	50                   	push   eax
c000cf63:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf66:	e8 58 7d 01 00       	call   c0024cc3 <__floatsidf>
c000cf6b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cf6f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cf73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf83:	e8 bc 79 01 00       	call   c0024944 <__divdf3>
c000cf88:	83 c4 18             	add    esp,0x18
c000cf8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf8f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf93:	52                   	push   edx
c000cf94:	89 fa                	mov    edx,edi
c000cf96:	50                   	push   eax
c000cf97:	89 d8                	mov    eax,ebx
c000cf99:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cf9d:	e8 a6 c9 ff ff       	call   c0009948 <calc_output_stereo>
c000cfa2:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000cfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfb2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfb6:	e8 89 79 01 00       	call   c0024944 <__divdf3>
c000cfbb:	83 c4 10             	add    esp,0x10
c000cfbe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cfc2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cfc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfd6:	e8 08 70 01 00       	call   c0023fe3 <__adddf3>
c000cfdb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cfdf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cfe3:	83 c4 18             	add    esp,0x18
c000cfe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfee:	e8 d3 e6 ff ff       	call   c000b6c6 <fmod_one>
c000cff3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cff6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cffa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cffe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d001:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d005:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d009:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d00d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d011:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d015:	e8 1a 76 01 00       	call   c0024634 <__subdf3>
c000d01a:	83 c4 18             	add    esp,0x18
c000d01d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d021:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d025:	52                   	push   edx
c000d026:	50                   	push   eax
c000d027:	e8 b4 80 01 00       	call   c00250e0 <lrint>
c000d02c:	0f af f8             	imul   edi,eax
c000d02f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d033:	83 c4 10             	add    esp,0x10
c000d036:	01 f8                	add    eax,edi
c000d038:	99                   	cdq    
c000d039:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d03c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d03f:	e9 61 fc ff ff       	jmp    c000cca5 <sinc_stereo_vari_process+0x237>
c000d044:	83 c4 4c             	add    esp,0x4c
c000d047:	5b                   	pop    ebx
c000d048:	5e                   	pop    esi
c000d049:	5f                   	pop    edi
c000d04a:	5d                   	pop    ebp
c000d04b:	c3                   	ret    

c000d04c <sinc_mono_vari_process>:
c000d04c:	55                   	push   ebp
c000d04d:	b8 05 00 00 00       	mov    eax,0x5
c000d052:	57                   	push   edi
c000d053:	56                   	push   esi
c000d054:	53                   	push   ebx
c000d055:	83 ec 4c             	sub    esp,0x4c
c000d058:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d05c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d060:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d063:	85 db                	test   ebx,ebx
c000d065:	0f 84 e8 05 00 00    	je     c000d653 <sinc_mono_vari_process+0x607>
c000d06b:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d06e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d071:	0f af d0             	imul   edx,eax
c000d074:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000d077:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d07b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d082:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d085:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d08c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d08f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d092:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d09a:	57                   	push   edi
c000d09b:	57                   	push   edi
c000d09c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0a4:	e8 9e c5 ff ff       	call   c0009647 <is_bad_src_ratio>
c000d0a9:	83 c4 10             	add    esp,0x10
c000d0ac:	89 c2                	mov    edx,eax
c000d0ae:	b8 16 00 00 00       	mov    eax,0x16
c000d0b3:	85 d2                	test   edx,edx
c000d0b5:	0f 85 98 05 00 00    	jne    c000d653 <sinc_mono_vari_process+0x607>
c000d0bb:	83 ec 0c             	sub    esp,0xc
c000d0be:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d0c1:	e8 fd 7b 01 00       	call   c0024cc3 <__floatsidf>
c000d0c6:	83 c4 10             	add    esp,0x10
c000d0c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0cc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d0d0:	68 00 00 00 40       	push   0x40000000
c000d0d5:	6a 00                	push   0x0
c000d0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d0db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d0df:	e8 ff 6e 01 00       	call   c0023fe3 <__adddf3>
c000d0e4:	59                   	pop    ecx
c000d0e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d0e9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d0ed:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d0f0:	e8 ce 7b 01 00       	call   c0024cc3 <__floatsidf>
c000d0f5:	83 c4 10             	add    esp,0x10
c000d0f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d100:	52                   	push   edx
c000d101:	50                   	push   eax
c000d102:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d106:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d10a:	e8 35 78 01 00       	call   c0024944 <__divdf3>
c000d10f:	83 c4 10             	add    esp,0x10
c000d112:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d116:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d11a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d11d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d120:	89 04 24             	mov    DWORD PTR [esp],eax
c000d123:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d127:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d12a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d12d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d131:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d135:	52                   	push   edx
c000d136:	50                   	push   eax
c000d137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d13b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d13f:	e8 eb 7d 01 00       	call   c0024f2f <__ltdf2>
c000d144:	83 c4 10             	add    esp,0x10
c000d147:	85 c0                	test   eax,eax
c000d149:	79 1d                	jns    c000d168 <sinc_mono_vari_process+0x11c>
c000d14b:	68 00 00 f0 3f       	push   0x3ff00000
c000d150:	6a 00                	push   0x0
c000d152:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d156:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d15a:	e8 d0 7d 01 00       	call   c0024f2f <__ltdf2>
c000d15f:	83 c4 10             	add    esp,0x10
c000d162:	85 c0                	test   eax,eax
c000d164:	78 2c                	js     c000d192 <sinc_mono_vari_process+0x146>
c000d166:	eb 4a                	jmp    c000d1b2 <sinc_mono_vari_process+0x166>
c000d168:	68 00 00 f0 3f       	push   0x3ff00000
c000d16d:	6a 00                	push   0x0
c000d16f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d173:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d177:	e8 b3 7d 01 00       	call   c0024f2f <__ltdf2>
c000d17c:	83 c4 10             	add    esp,0x10
c000d17f:	85 c0                	test   eax,eax
c000d181:	79 2f                	jns    c000d1b2 <sinc_mono_vari_process+0x166>
c000d183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d187:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d18b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d18e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d192:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d196:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d19a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d19e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1a2:	e8 9d 77 01 00       	call   c0024944 <__divdf3>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d1b2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d1b5:	50                   	push   eax
c000d1b6:	50                   	push   eax
c000d1b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1bf:	e8 1c 7f 01 00       	call   c00250e0 <lrint>
c000d1c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d1c7:	40                   	inc    eax
c000d1c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d1cc:	0f af c7             	imul   eax,edi
c000d1cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d1da:	58                   	pop    eax
c000d1db:	5a                   	pop    edx
c000d1dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1e4:	e8 dd e4 ff ff       	call   c000b6c6 <fmod_one>
c000d1e9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d1ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d1f4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d1f7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d20b:	e8 24 74 01 00       	call   c0024634 <__subdf3>
c000d210:	83 c4 18             	add    esp,0x18
c000d213:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d217:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d21b:	52                   	push   edx
c000d21c:	50                   	push   eax
c000d21d:	e8 be 7e 01 00       	call   c00250e0 <lrint>
c000d222:	0f af f8             	imul   edi,eax
c000d225:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d229:	01 f8                	add    eax,edi
c000d22b:	99                   	cdq    
c000d22c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d22f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d23a:	68 00 00 f0 3f       	push   0x3ff00000
c000d23f:	6a 00                	push   0x0
c000d241:	e8 fe 76 01 00       	call   c0024944 <__divdf3>
c000d246:	83 c4 10             	add    esp,0x10
c000d249:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d24d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d251:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d256:	68 23 42 92 0c       	push   0xc924223
c000d25b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d25f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d263:	e8 7b 6d 01 00       	call   c0023fe3 <__adddf3>
c000d268:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d26c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d270:	83 c4 20             	add    esp,0x20
c000d273:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d27b:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000d283:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d286:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d289:	7d 4e                	jge    c000d2d9 <sinc_mono_vari_process+0x28d>
c000d28b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d28e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d291:	01 c8                	add    eax,ecx
c000d293:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d296:	99                   	cdq    
c000d297:	f7 f9                	idiv   ecx
c000d299:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d29d:	7d 0c                	jge    c000d2ab <sinc_mono_vari_process+0x25f>
c000d29f:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d2a2:	85 ff                	test   edi,edi
c000d2a4:	79 69                	jns    c000d30f <sinc_mono_vari_process+0x2c3>
c000d2a6:	e9 e4 00 00 00       	jmp    c000d38f <sinc_mono_vari_process+0x343>
c000d2ab:	57                   	push   edi
c000d2ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b0:	56                   	push   esi
c000d2b1:	53                   	push   ebx
c000d2b2:	e8 a5 e4 ff ff       	call   c000b75c <prepare_data>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d2bd:	85 c0                	test   eax,eax
c000d2bf:	0f 85 8e 03 00 00    	jne    c000d653 <sinc_mono_vari_process+0x607>
c000d2c5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d2c8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d2cb:	01 c8                	add    eax,ecx
c000d2cd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d2d0:	99                   	cdq    
c000d2d1:	f7 f9                	idiv   ecx
c000d2d3:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d2d7:	7c c6                	jl     c000d29f <sinc_mono_vari_process+0x253>
c000d2d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d2dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d2e0:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d2e3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d2ee:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d2f1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d2f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d2f7:	99                   	cdq    
c000d2f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d2fb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d2fe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d301:	99                   	cdq    
c000d302:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d305:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d308:	31 c0                	xor    eax,eax
c000d30a:	e9 44 03 00 00       	jmp    c000d653 <sinc_mono_vari_process+0x607>
c000d30f:	83 ec 0c             	sub    esp,0xc
c000d312:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d315:	e8 a9 79 01 00       	call   c0024cc3 <__floatsidf>
c000d31a:	83 c4 10             	add    esp,0x10
c000d31d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d321:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d325:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d329:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d32d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d331:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d335:	e8 a9 6c 01 00       	call   c0023fe3 <__adddf3>
c000d33a:	83 c4 10             	add    esp,0x10
c000d33d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d341:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d345:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d349:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d34d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d351:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d355:	e8 89 6c 01 00       	call   c0023fe3 <__adddf3>
c000d35a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d35d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d361:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d365:	e8 59 79 01 00       	call   c0024cc3 <__floatsidf>
c000d36a:	83 c4 10             	add    esp,0x10
c000d36d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d371:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d375:	52                   	push   edx
c000d376:	50                   	push   eax
c000d377:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d37b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d37f:	e8 8d 7b 01 00       	call   c0024f11 <__gtdf2>
c000d384:	83 c4 10             	add    esp,0x10
c000d387:	85 c0                	test   eax,eax
c000d389:	0f 8f 4a ff ff ff    	jg     c000d2d9 <sinc_mono_vari_process+0x28d>
c000d38f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d393:	0f 8e ef 00 00 00    	jle    c000d488 <sinc_mono_vari_process+0x43c>
c000d399:	83 ec 10             	sub    esp,0x10
c000d39c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d39f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d3a2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d3a5:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d3a8:	e8 87 72 01 00       	call   c0024634 <__subdf3>
c000d3ad:	83 c4 18             	add    esp,0x18
c000d3b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3b4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3b8:	52                   	push   edx
c000d3b9:	50                   	push   eax
c000d3ba:	e8 01 7d 01 00       	call   c00250c0 <fabs>
c000d3bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3c7:	83 c4 10             	add    esp,0x10
c000d3ca:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d3cf:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3dc:	e8 30 7b 01 00       	call   c0024f11 <__gtdf2>
c000d3e1:	83 c4 10             	add    esp,0x10
c000d3e4:	85 c0                	test   eax,eax
c000d3e6:	0f 8e 9c 00 00 00    	jle    c000d488 <sinc_mono_vari_process+0x43c>
c000d3ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d3ef:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d3f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3fa:	52                   	push   edx
c000d3fb:	50                   	push   eax
c000d3fc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d3ff:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d402:	e8 2d 72 01 00       	call   c0024634 <__subdf3>
c000d407:	5f                   	pop    edi
c000d408:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d40c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d410:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d413:	e8 ab 78 01 00       	call   c0024cc3 <__floatsidf>
c000d418:	83 c4 10             	add    esp,0x10
c000d41b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d41f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d423:	52                   	push   edx
c000d424:	50                   	push   eax
c000d425:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d429:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d42d:	e8 2e 72 01 00       	call   c0024660 <__muldf3>
c000d432:	59                   	pop    ecx
c000d433:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d437:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d43b:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d43e:	e8 80 78 01 00       	call   c0024cc3 <__floatsidf>
c000d443:	83 c4 10             	add    esp,0x10
c000d446:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d44a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d44e:	52                   	push   edx
c000d44f:	50                   	push   eax
c000d450:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d454:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d458:	e8 e7 74 01 00       	call   c0024944 <__divdf3>
c000d45d:	83 c4 10             	add    esp,0x10
c000d460:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d464:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d468:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d46c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d470:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d474:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d478:	e8 66 6b 01 00       	call   c0023fe3 <__adddf3>
c000d47d:	83 c4 10             	add    esp,0x10
c000d480:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d484:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d488:	83 ec 0c             	sub    esp,0xc
c000d48b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d48e:	e8 30 78 01 00       	call   c0024cc3 <__floatsidf>
c000d493:	83 c4 10             	add    esp,0x10
c000d496:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d49a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d49e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4ae:	e8 7c 7a 01 00       	call   c0024f2f <__ltdf2>
c000d4b3:	83 c4 10             	add    esp,0x10
c000d4b6:	85 c0                	test   eax,eax
c000d4b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d4bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d4c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d4c4:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000d4c8:	78 10                	js     c000d4da <sinc_mono_vari_process+0x48e>
c000d4ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ce:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d4d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d4e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d4ea:	e8 71 71 01 00       	call   c0024660 <__muldf3>
c000d4ef:	59                   	pop    ecx
c000d4f0:	5f                   	pop    edi
c000d4f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d4f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d4f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d501:	e8 99 e1 ff ff       	call   c000b69f <double_to_fp>
c000d506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d50a:	89 c7                	mov    edi,eax
c000d50c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d518:	e8 43 71 01 00       	call   c0024660 <__muldf3>
c000d51d:	83 c4 18             	add    esp,0x18
c000d520:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d524:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d528:	52                   	push   edx
c000d529:	50                   	push   eax
c000d52a:	e8 70 e1 ff ff       	call   c000b69f <double_to_fp>
c000d52f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d533:	83 ec 0c             	sub    esp,0xc
c000d536:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d539:	e8 85 77 01 00       	call   c0024cc3 <__floatsidf>
c000d53e:	83 c4 10             	add    esp,0x10
c000d541:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d545:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d549:	52                   	push   edx
c000d54a:	50                   	push   eax
c000d54b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d553:	e8 ec 73 01 00       	call   c0024944 <__divdf3>
c000d558:	83 c4 10             	add    esp,0x10
c000d55b:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d55f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d563:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d567:	89 d8                	mov    eax,ebx
c000d569:	89 fa                	mov    edx,edi
c000d56b:	e8 7c c1 ff ff       	call   c00096ec <calc_output_single>
c000d570:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000d573:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d576:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d57a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d57e:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d582:	52                   	push   edx
c000d583:	50                   	push   eax
c000d584:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d588:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d58c:	e8 cf 70 01 00       	call   c0024660 <__muldf3>
c000d591:	59                   	pop    ecx
c000d592:	59                   	pop    ecx
c000d593:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d597:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d59b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d59f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5a3:	e8 8b 79 01 00       	call   c0024f33 <__truncdfsf2>
c000d5a8:	83 c4 10             	add    esp,0x10
c000d5ab:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d5af:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000d5b2:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d5b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d5c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d5c5:	e8 7a 73 01 00       	call   c0024944 <__divdf3>
c000d5ca:	83 c4 10             	add    esp,0x10
c000d5cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d5d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d5dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5e5:	e8 f9 69 01 00       	call   c0023fe3 <__adddf3>
c000d5ea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5ee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d5f2:	83 c4 18             	add    esp,0x18
c000d5f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5fd:	e8 c4 e0 ff ff       	call   c000b6c6 <fmod_one>
c000d602:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d609:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d60d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d610:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d614:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d618:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d61c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d620:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d624:	e8 0b 70 01 00       	call   c0024634 <__subdf3>
c000d629:	83 c4 18             	add    esp,0x18
c000d62c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d634:	52                   	push   edx
c000d635:	50                   	push   eax
c000d636:	e8 a5 7a 01 00       	call   c00250e0 <lrint>
c000d63b:	0f af f8             	imul   edi,eax
c000d63e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d642:	83 c4 10             	add    esp,0x10
c000d645:	01 f8                	add    eax,edi
c000d647:	99                   	cdq    
c000d648:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d64b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d64e:	e9 30 fc ff ff       	jmp    c000d283 <sinc_mono_vari_process+0x237>
c000d653:	83 c4 4c             	add    esp,0x4c
c000d656:	5b                   	pop    ebx
c000d657:	5e                   	pop    esi
c000d658:	5f                   	pop    edi
c000d659:	5d                   	pop    ebp
c000d65a:	c3                   	ret    

c000d65b <sinc_get_name>:
c000d65b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d65f:	31 c0                	xor    eax,eax
c000d661:	83 fa 02             	cmp    edx,0x2
c000d664:	77 07                	ja     c000d66d <sinc_get_name+0x12>
c000d666:	8b 04 95 e4 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd981c]
c000d66d:	c3                   	ret    

c000d66e <sinc_get_description>:
c000d66e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d672:	31 c0                	xor    eax,eax
c000d674:	83 fa 02             	cmp    edx,0x2
c000d677:	77 07                	ja     c000d680 <sinc_get_description+0x12>
c000d679:	8b 04 95 d8 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9828]
c000d680:	c3                   	ret    

c000d681 <sinc_set_converter>:
c000d681:	53                   	push   ebx
c000d682:	81 ec 58 08 00 00    	sub    esp,0x858
c000d688:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000d68f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000d692:	85 c0                	test   eax,eax
c000d694:	74 13                	je     c000d6a9 <sinc_set_converter+0x28>
c000d696:	83 ec 0c             	sub    esp,0xc
c000d699:	50                   	push   eax
c000d69a:	e8 8f 1a 00 00       	call   c000f12e <free>
c000d69f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	50                   	push   eax
c000d6aa:	68 44 08 00 00       	push   0x844
c000d6af:	6a 00                	push   0x0
c000d6b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d6b5:	50                   	push   eax
c000d6b6:	e8 c2 2f ff ff       	call   c000067d <memset>
c000d6bb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d6be:	83 c4 10             	add    esp,0x10
c000d6c1:	b8 0b 00 00 00       	mov    eax,0xb
c000d6c6:	81 fa 80 00 00 00    	cmp    edx,0x80
c000d6cc:	7f 6e                	jg     c000d73c <sinc_set_converter+0xbb>
c000d6ce:	83 fa 01             	cmp    edx,0x1
c000d6d1:	75 10                	jne    c000d6e3 <sinc_set_converter+0x62>
c000d6d3:	c7 43 24 4c d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d04c
c000d6da:	c7 43 20 4c d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d04c
c000d6e1:	eb 4d                	jmp    c000d730 <sinc_set_converter+0xaf>
c000d6e3:	83 fa 02             	cmp    edx,0x2
c000d6e6:	75 10                	jne    c000d6f8 <sinc_set_converter+0x77>
c000d6e8:	c7 43 24 6e ca 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ca6e
c000d6ef:	c7 43 20 6e ca 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ca6e
c000d6f6:	eb 38                	jmp    c000d730 <sinc_set_converter+0xaf>
c000d6f8:	83 fa 04             	cmp    edx,0x4
c000d6fb:	75 10                	jne    c000d70d <sinc_set_converter+0x8c>
c000d6fd:	c7 43 24 90 c4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c490
c000d704:	c7 43 20 90 c4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c490
c000d70b:	eb 23                	jmp    c000d730 <sinc_set_converter+0xaf>
c000d70d:	83 fa 06             	cmp    edx,0x6
c000d710:	75 10                	jne    c000d722 <sinc_set_converter+0xa1>
c000d712:	c7 43 24 b2 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000beb2
c000d719:	c7 43 20 b2 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000beb2
c000d720:	eb 0e                	jmp    c000d730 <sinc_set_converter+0xaf>
c000d722:	c7 43 24 d6 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b8d6
c000d729:	c7 43 20 d6 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b8d6
c000d730:	c7 43 28 f3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aaf3
c000d737:	b8 0a 00 00 00       	mov    eax,0xa
c000d73c:	81 c4 58 08 00 00    	add    esp,0x858
c000d742:	5b                   	pop    ebx
c000d743:	c3                   	ret    

c000d744 <is_bad_src_ratio>:
c000d744:	83 ec 1c             	sub    esp,0x1c
c000d747:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d74b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d74f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d753:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d757:	b8 00 00 00 00       	mov    eax,0x0
c000d75c:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000d761:	52                   	push   edx
c000d762:	50                   	push   eax
c000d763:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d76b:	e8 bf 77 01 00       	call   c0024f2f <__ltdf2>
c000d770:	83 c4 10             	add    esp,0x10
c000d773:	85 c0                	test   eax,eax
c000d775:	78 20                	js     c000d797 <is_bad_src_ratio+0x53>
c000d777:	b8 00 00 00 00       	mov    eax,0x0
c000d77c:	ba 00 00 70 40       	mov    edx,0x40700000
c000d781:	52                   	push   edx
c000d782:	50                   	push   eax
c000d783:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d787:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d78b:	e8 81 77 01 00       	call   c0024f11 <__gtdf2>
c000d790:	83 c4 10             	add    esp,0x10
c000d793:	85 c0                	test   eax,eax
c000d795:	7e 07                	jle    c000d79e <is_bad_src_ratio+0x5a>
c000d797:	b8 01 00 00 00       	mov    eax,0x1
c000d79c:	eb 05                	jmp    c000d7a3 <is_bad_src_ratio+0x5f>
c000d79e:	b8 00 00 00 00       	mov    eax,0x0
c000d7a3:	83 c4 1c             	add    esp,0x1c
c000d7a6:	c3                   	ret    

c000d7a7 <fmod_one>:
c000d7a7:	83 ec 2c             	sub    esp,0x2c
c000d7aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7ba:	83 ec 08             	sub    esp,0x8
c000d7bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7c5:	e8 16 79 01 00       	call   c00250e0 <lrint>
c000d7ca:	83 c4 10             	add    esp,0x10
c000d7cd:	83 ec 0c             	sub    esp,0xc
c000d7d0:	50                   	push   eax
c000d7d1:	e8 ed 74 01 00       	call   c0024cc3 <__floatsidf>
c000d7d6:	83 c4 10             	add    esp,0x10
c000d7d9:	52                   	push   edx
c000d7da:	50                   	push   eax
c000d7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e3:	e8 4c 6e 01 00       	call   c0024634 <__subdf3>
c000d7e8:	83 c4 10             	add    esp,0x10
c000d7eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d7ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d7f3:	b8 00 00 00 00       	mov    eax,0x0
c000d7f8:	ba 00 00 00 00       	mov    edx,0x0
c000d7fd:	52                   	push   edx
c000d7fe:	50                   	push   eax
c000d7ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d803:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d807:	e8 23 77 01 00       	call   c0024f2f <__ltdf2>
c000d80c:	83 c4 10             	add    esp,0x10
c000d80f:	85 c0                	test   eax,eax
c000d811:	79 1e                	jns    c000d831 <fmod_one+0x8a>
c000d813:	b8 00 00 00 00       	mov    eax,0x0
c000d818:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000d81d:	52                   	push   edx
c000d81e:	50                   	push   eax
c000d81f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d823:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d827:	e8 b7 67 01 00       	call   c0023fe3 <__adddf3>
c000d82c:	83 c4 10             	add    esp,0x10
c000d82f:	eb 08                	jmp    c000d839 <fmod_one+0x92>
c000d831:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d835:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d839:	83 c4 2c             	add    esp,0x2c
c000d83c:	c3                   	ret    

c000d83d <zoh_vari_process>:
c000d83d:	55                   	push   ebp
c000d83e:	57                   	push   edi
c000d83f:	56                   	push   esi
c000d840:	53                   	push   ebx
c000d841:	83 ec 3c             	sub    esp,0x3c
c000d844:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d848:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000d84c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000d854:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000d858:	0f 8e a9 05 00 00    	jle    c000de07 <zoh_vari_process+0x5ca>
c000d85e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d861:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c000d869:	85 db                	test   ebx,ebx
c000d86b:	0f 84 96 05 00 00    	je     c000de07 <zoh_vari_process+0x5ca>
c000d871:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d874:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000d878:	74 19                	je     c000d893 <zoh_vari_process+0x56>
c000d87a:	31 d2                	xor    edx,edx
c000d87c:	39 c2                	cmp    edx,eax
c000d87e:	7d 0c                	jge    c000d88c <zoh_vari_process+0x4f>
c000d880:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d882:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000d885:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000d889:	42                   	inc    edx
c000d88a:	eb f0                	jmp    c000d87c <zoh_vari_process+0x3f>
c000d88c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000d893:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d896:	0f af d0             	imul   edx,eax
c000d899:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000d89c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d8a0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000d8a7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000d8aa:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000d8b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d8b4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d8b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d8bf:	57                   	push   edi
c000d8c0:	57                   	push   edi
c000d8c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8c9:	e8 76 fe ff ff       	call   c000d744 <is_bad_src_ratio>
c000d8ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8d2:	83 c4 10             	add    esp,0x10
c000d8d5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d8da:	0f 85 1f 05 00 00    	jne    c000ddff <zoh_vari_process+0x5c2>
c000d8e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8e3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d8e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d8ee:	68 00 00 f0 3f       	push   0x3ff00000
c000d8f3:	6a 00                	push   0x0
c000d8f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8fd:	e8 2d 76 01 00       	call   c0024f2f <__ltdf2>
c000d902:	83 c4 10             	add    esp,0x10
c000d905:	85 c0                	test   eax,eax
c000d907:	0f 89 dc 01 00 00    	jns    c000dae9 <zoh_vari_process+0x2ac>
c000d90d:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000d910:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000d913:	0f 8d d0 01 00 00    	jge    c000dae9 <zoh_vari_process+0x2ac>
c000d919:	83 ec 0c             	sub    esp,0xc
c000d91c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000d91f:	e8 9f 73 01 00       	call   c0024cc3 <__floatsidf>
c000d924:	83 c4 10             	add    esp,0x10
c000d927:	89 04 24             	mov    DWORD PTR [esp],eax
c000d92a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d92e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d932:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d936:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d93a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d93e:	e8 1d 6d 01 00       	call   c0024660 <__muldf3>
c000d943:	59                   	pop    ecx
c000d944:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d948:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d94c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d94f:	e8 6f 73 01 00       	call   c0024cc3 <__floatsidf>
c000d954:	83 c4 10             	add    esp,0x10
c000d957:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d95b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d95f:	52                   	push   edx
c000d960:	50                   	push   eax
c000d961:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d965:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d969:	e8 75 66 01 00       	call   c0023fe3 <__adddf3>
c000d96e:	59                   	pop    ecx
c000d96f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d973:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d977:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000d97a:	e8 44 73 01 00       	call   c0024cc3 <__floatsidf>
c000d97f:	83 c4 10             	add    esp,0x10
c000d982:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d986:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d98a:	52                   	push   edx
c000d98b:	50                   	push   eax
c000d98c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d994:	e8 94 75 01 00       	call   c0024f2d <__gedf2>
c000d999:	83 c4 10             	add    esp,0x10
c000d99c:	85 c0                	test   eax,eax
c000d99e:	0f 89 45 01 00 00    	jns    c000dae9 <zoh_vari_process+0x2ac>
c000d9a4:	85 ff                	test   edi,edi
c000d9a6:	0f 8e ee 00 00 00    	jle    c000da9a <zoh_vari_process+0x25d>
c000d9ac:	83 ec 10             	sub    esp,0x10
c000d9af:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9b2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9b5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d9b8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d9bb:	e8 74 6c 01 00       	call   c0024634 <__subdf3>
c000d9c0:	83 c4 18             	add    esp,0x18
c000d9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9cb:	52                   	push   edx
c000d9cc:	50                   	push   eax
c000d9cd:	e8 ee 76 01 00       	call   c00250c0 <fabs>
c000d9d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d9e2:	68 23 42 92 0c       	push   0xc924223
c000d9e7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9ef:	e8 1d 75 01 00       	call   c0024f11 <__gtdf2>
c000d9f4:	83 c4 10             	add    esp,0x10
c000d9f7:	85 c0                	test   eax,eax
c000d9f9:	0f 8e 9b 00 00 00    	jle    c000da9a <zoh_vari_process+0x25d>
c000d9ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da02:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da05:	89 04 24             	mov    DWORD PTR [esp],eax
c000da08:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000da0c:	52                   	push   edx
c000da0d:	50                   	push   eax
c000da0e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da11:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da14:	e8 1b 6c 01 00       	call   c0024634 <__subdf3>
c000da19:	59                   	pop    ecx
c000da1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da1e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da22:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000da25:	e8 99 72 01 00       	call   c0024cc3 <__floatsidf>
c000da2a:	83 c4 10             	add    esp,0x10
c000da2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000da31:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000da35:	52                   	push   edx
c000da36:	50                   	push   eax
c000da37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3f:	e8 1c 6c 01 00       	call   c0024660 <__muldf3>
c000da44:	5f                   	pop    edi
c000da45:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da49:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da4d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000da50:	e8 6e 72 01 00       	call   c0024cc3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000da5c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000da60:	52                   	push   edx
c000da61:	50                   	push   eax
c000da62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da6a:	e8 d5 6e 01 00       	call   c0024944 <__divdf3>
c000da6f:	83 c4 10             	add    esp,0x10
c000da72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da7a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000da7e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000da82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da8a:	e8 54 65 01 00       	call   c0023fe3 <__adddf3>
c000da8f:	83 c4 10             	add    esp,0x10
c000da92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da9a:	31 c0                	xor    eax,eax
c000da9c:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000da9f:	7e 13                	jle    c000dab4 <zoh_vari_process+0x277>
c000daa1:	8b 7c 83 1c          	mov    edi,DWORD PTR [ebx+eax*4+0x1c]
c000daa5:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000daa8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000daab:	40                   	inc    eax
c000daac:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000daaf:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dab2:	eb e8                	jmp    c000da9c <zoh_vari_process+0x25f>
c000dab4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dab8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dabc:	68 00 00 f0 3f       	push   0x3ff00000
c000dac1:	6a 00                	push   0x0
c000dac3:	e8 7c 6e 01 00       	call   c0024944 <__divdf3>
c000dac8:	83 c4 10             	add    esp,0x10
c000dacb:	89 04 24             	mov    DWORD PTR [esp],eax
c000dace:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dad2:	52                   	push   edx
c000dad3:	50                   	push   eax
c000dad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dadc:	e8 02 65 01 00       	call   c0023fe3 <__adddf3>
c000dae1:	83 c4 10             	add    esp,0x10
c000dae4:	e9 fd fd ff ff       	jmp    c000d8e6 <zoh_vari_process+0xa9>
c000dae9:	57                   	push   edi
c000daea:	57                   	push   edi
c000daeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daf3:	e8 af fc ff ff       	call   c000d7a7 <fmod_one>
c000daf8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dafb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000daff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000db03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db13:	e8 1c 6b 01 00       	call   c0024634 <__subdf3>
c000db18:	83 c4 18             	add    esp,0x18
c000db1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db23:	52                   	push   edx
c000db24:	50                   	push   eax
c000db25:	e8 b6 75 01 00       	call   c00250e0 <lrint>
c000db2a:	83 c4 10             	add    esp,0x10
c000db2d:	0f af f8             	imul   edi,eax
c000db30:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000db33:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000db36:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000db3a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000db3d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000db40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db44:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000db47:	0f 8d 1d 02 00 00    	jge    c000dd6a <zoh_vari_process+0x52d>
c000db4d:	83 ec 0c             	sub    esp,0xc
c000db50:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000db53:	e8 6b 71 01 00       	call   c0024cc3 <__floatsidf>
c000db58:	83 c4 10             	add    esp,0x10
c000db5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db63:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000db67:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	e8 e8 6a 01 00       	call   c0024660 <__muldf3>
c000db78:	59                   	pop    ecx
c000db79:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000db7d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000db81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db85:	e8 39 71 01 00       	call   c0024cc3 <__floatsidf>
c000db8a:	83 c4 10             	add    esp,0x10
c000db8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000db91:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000db95:	52                   	push   edx
c000db96:	50                   	push   eax
c000db97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db9f:	e8 3f 64 01 00       	call   c0023fe3 <__adddf3>
c000dba4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbaf:	e8 0f 71 01 00       	call   c0024cc3 <__floatsidf>
c000dbb4:	83 c4 10             	add    esp,0x10
c000dbb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dbbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dbbf:	52                   	push   edx
c000dbc0:	50                   	push   eax
c000dbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbc9:	e8 63 73 01 00       	call   c0024f31 <__ledf2>
c000dbce:	83 c4 10             	add    esp,0x10
c000dbd1:	85 c0                	test   eax,eax
c000dbd3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dbd7:	0f 8f 8d 01 00 00    	jg     c000dd6a <zoh_vari_process+0x52d>
c000dbdd:	85 c9                	test   ecx,ecx
c000dbdf:	0f 8e ef 00 00 00    	jle    c000dcd4 <zoh_vari_process+0x497>
c000dbe5:	83 ec 10             	sub    esp,0x10
c000dbe8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dbeb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dbee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000dbf1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dbf4:	e8 3b 6a 01 00       	call   c0024634 <__subdf3>
c000dbf9:	83 c4 18             	add    esp,0x18
c000dbfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc00:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc04:	52                   	push   edx
c000dc05:	50                   	push   eax
c000dc06:	e8 b5 74 01 00       	call   c00250c0 <fabs>
c000dc0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dc1b:	68 23 42 92 0c       	push   0xc924223
c000dc20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc28:	e8 e4 72 01 00       	call   c0024f11 <__gtdf2>
c000dc2d:	83 c4 10             	add    esp,0x10
c000dc30:	85 c0                	test   eax,eax
c000dc32:	0f 8e 9c 00 00 00    	jle    c000dcd4 <zoh_vari_process+0x497>
c000dc38:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dc3b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dc3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc46:	52                   	push   edx
c000dc47:	50                   	push   eax
c000dc48:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc4b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc4e:	e8 e1 69 01 00       	call   c0024634 <__subdf3>
c000dc53:	5f                   	pop    edi
c000dc54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc58:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dc5c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dc5f:	e8 5f 70 01 00       	call   c0024cc3 <__floatsidf>
c000dc64:	83 c4 10             	add    esp,0x10
c000dc67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc6f:	52                   	push   edx
c000dc70:	50                   	push   eax
c000dc71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc79:	e8 e2 69 01 00       	call   c0024660 <__muldf3>
c000dc7e:	59                   	pop    ecx
c000dc7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc83:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dc87:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dc8a:	e8 34 70 01 00       	call   c0024cc3 <__floatsidf>
c000dc8f:	83 c4 10             	add    esp,0x10
c000dc92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc96:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc9a:	52                   	push   edx
c000dc9b:	50                   	push   eax
c000dc9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dca4:	e8 9b 6c 01 00       	call   c0024944 <__divdf3>
c000dca9:	83 c4 10             	add    esp,0x10
c000dcac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc4:	e8 1a 63 01 00       	call   c0023fe3 <__adddf3>
c000dcc9:	83 c4 10             	add    esp,0x10
c000dccc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcd0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcd4:	31 c0                	xor    eax,eax
c000dcd6:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000dcd9:	39 c2                	cmp    edx,eax
c000dcdb:	7e 1d                	jle    c000dcfa <zoh_vari_process+0x4bd>
c000dcdd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000dce0:	29 d1                	sub    ecx,edx
c000dce2:	89 ca                	mov    edx,ecx
c000dce4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dce6:	01 c2                	add    edx,eax
c000dce8:	40                   	inc    eax
c000dce9:	8b 3c 91             	mov    edi,DWORD PTR [ecx+edx*4]
c000dcec:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dcef:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dcf2:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000dcf5:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dcf8:	eb dc                	jmp    c000dcd6 <zoh_vari_process+0x499>
c000dcfa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd02:	68 00 00 f0 3f       	push   0x3ff00000
c000dd07:	6a 00                	push   0x0
c000dd09:	e8 36 6c 01 00       	call   c0024944 <__divdf3>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd15:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd19:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd1d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd29:	e8 b5 62 01 00       	call   c0023fe3 <__adddf3>
c000dd2e:	5f                   	pop    edi
c000dd2f:	59                   	pop    ecx
c000dd30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd34:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd40:	e8 62 fa ff ff       	call   c000d7a7 <fmod_one>
c000dd45:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dd48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd4c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd60:	e8 cf 68 01 00       	call   c0024634 <__subdf3>
c000dd65:	e9 ae fd ff ff       	jmp    c000db18 <zoh_vari_process+0x2db>
c000dd6a:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c000dd6e:	7d 3a                	jge    c000ddaa <zoh_vari_process+0x56d>
c000dd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd74:	83 ec 0c             	sub    esp,0xc
c000dd77:	29 f8                	sub    eax,edi
c000dd79:	99                   	cdq    
c000dd7a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dd7d:	50                   	push   eax
c000dd7e:	e8 40 6f 01 00       	call   c0024cc3 <__floatsidf>
c000dd83:	83 c4 10             	add    esp,0x10
c000dd86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd8a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd8e:	52                   	push   edx
c000dd8f:	50                   	push   eax
c000dd90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd98:	e8 46 62 01 00       	call   c0023fe3 <__adddf3>
c000dd9d:	83 c4 10             	add    esp,0x10
c000dda0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000dda3:	89 04 24             	mov    DWORD PTR [esp],eax
c000dda6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddaa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ddad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ddb1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000ddb4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ddb7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ddba:	85 c0                	test   eax,eax
c000ddbc:	7f 24                	jg     c000dde2 <zoh_vari_process+0x5a5>
c000ddbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ddc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ddc6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ddc9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ddcc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ddcf:	99                   	cdq    
c000ddd0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ddd3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ddd6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ddd9:	99                   	cdq    
c000ddda:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dddd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000dde0:	eb 25                	jmp    c000de07 <zoh_vari_process+0x5ca>
c000dde2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000dde5:	31 d2                	xor    edx,edx
c000dde7:	29 c8                	sub    eax,ecx
c000dde9:	c1 e0 02             	shl    eax,0x2
c000ddec:	39 d1                	cmp    ecx,edx
c000ddee:	7e ce                	jle    c000ddbe <zoh_vari_process+0x581>
c000ddf0:	8b 3e                	mov    edi,DWORD PTR [esi]
c000ddf2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000ddf5:	83 c0 04             	add    eax,0x4
c000ddf8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c000ddfc:	42                   	inc    edx
c000ddfd:	eb ed                	jmp    c000ddec <zoh_vari_process+0x5af>
c000ddff:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c000de07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de0b:	83 c4 3c             	add    esp,0x3c
c000de0e:	5b                   	pop    ebx
c000de0f:	5e                   	pop    esi
c000de10:	5f                   	pop    edi
c000de11:	5d                   	pop    ebp
c000de12:	c3                   	ret    

c000de13 <zoh_reset>:
c000de13:	83 ec 0c             	sub    esp,0xc
c000de16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de1a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000de1d:	85 c0                	test   eax,eax
c000de1f:	74 20                	je     c000de41 <zoh_reset+0x2e>
c000de21:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000de24:	83 c0 1c             	add    eax,0x1c
c000de27:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000de2a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000de31:	c1 e2 02             	shl    edx,0x2
c000de34:	51                   	push   ecx
c000de35:	52                   	push   edx
c000de36:	6a 00                	push   0x0
c000de38:	50                   	push   eax
c000de39:	e8 3f 28 ff ff       	call   c000067d <memset>
c000de3e:	83 c4 10             	add    esp,0x10
c000de41:	83 c4 0c             	add    esp,0xc
c000de44:	c3                   	ret    

c000de45 <zoh_get_name>:
c000de45:	31 c0                	xor    eax,eax
c000de47:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000de4c:	75 05                	jne    c000de53 <zoh_get_name+0xe>
c000de4e:	b8 fe 68 02 c0       	mov    eax,0xc00268fe
c000de53:	c3                   	ret    

c000de54 <zoh_get_description>:
c000de54:	31 c0                	xor    eax,eax
c000de56:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000de5b:	75 05                	jne    c000de62 <zoh_get_description+0xe>
c000de5d:	b8 0f 69 02 c0       	mov    eax,0xc002690f
c000de62:	c3                   	ret    

c000de63 <zoh_set_converter>:
c000de63:	53                   	push   ebx
c000de64:	b8 0a 00 00 00       	mov    eax,0xa
c000de69:	83 ec 08             	sub    esp,0x8
c000de6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000de70:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000de75:	75 6e                	jne    c000dee5 <zoh_set_converter+0x82>
c000de77:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000de7a:	85 c0                	test   eax,eax
c000de7c:	74 13                	je     c000de91 <zoh_set_converter+0x2e>
c000de7e:	83 ec 0c             	sub    esp,0xc
c000de81:	50                   	push   eax
c000de82:	e8 a7 12 00 00       	call   c000f12e <free>
c000de87:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000de8e:	83 c4 10             	add    esp,0x10
c000de91:	50                   	push   eax
c000de92:	50                   	push   eax
c000de93:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000de96:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000de9d:	50                   	push   eax
c000de9e:	6a 01                	push   0x1
c000dea0:	e8 a9 12 00 00       	call   c000f14e <calloc>
c000dea5:	83 c4 10             	add    esp,0x10
c000dea8:	89 c2                	mov    edx,eax
c000deaa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dead:	85 d2                	test   edx,edx
c000deaf:	b8 01 00 00 00       	mov    eax,0x1
c000deb4:	74 2f                	je     c000dee5 <zoh_set_converter+0x82>
c000deb6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000deb9:	83 ec 0c             	sub    esp,0xc
c000debc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000debf:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000dec5:	c7 43 24 3d d8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d83d
c000decc:	c7 43 20 3d d8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d83d
c000ded3:	c7 43 28 13 de 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000de13
c000deda:	53                   	push   ebx
c000dedb:	e8 33 ff ff ff       	call   c000de13 <zoh_reset>
c000dee0:	83 c4 10             	add    esp,0x10
c000dee3:	31 c0                	xor    eax,eax
c000dee5:	83 c4 08             	add    esp,0x8
c000dee8:	5b                   	pop    ebx
c000dee9:	c3                   	ret    

c000deea <Computer::close(int, int, void*)>:
c000deea:	57                   	push   edi
c000deeb:	56                   	push   esi
c000deec:	53                   	push   ebx
c000deed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000def1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000def5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000def9:	83 ec 0c             	sub    esp,0xc
c000defc:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000df02:	e8 8f 58 00 00       	call   c0013796 <Device::closeAll()>
c000df07:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000df0d:	83 c4 10             	add    esp,0x10
c000df10:	8b 10                	mov    edx,DWORD PTR [eax]
c000df12:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000df16:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000df1e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000df22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df26:	5b                   	pop    ebx
c000df27:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000df2a:	5e                   	pop    esi
c000df2b:	5f                   	pop    edi
c000df2c:	ff e0                	jmp    eax

c000df2e <Computer::Computer()>:
c000df2e:	83 ec 0c             	sub    esp,0xc
c000df31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df35:	83 ec 08             	sub    esp,0x8
c000df38:	68 46 69 02 c0       	push   0xc0026946
c000df3d:	50                   	push   eax
c000df3e:	e8 cd 58 00 00       	call   c0013810 <Device::Device(char const*)>
c000df43:	83 c4 10             	add    esp,0x10
c000df46:	ba 10 6b 02 c0       	mov    edx,0xc0026b10
c000df4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4f:	89 10                	mov    DWORD PTR [eax],edx
c000df51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df55:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000df5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df63:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000df6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df71:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000df77:	83 ca 04             	or     edx,0x4
c000df7a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000df80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000df8a:	0f b6 d0             	movzx  edx,al
c000df8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df91:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000df98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfa2:	0f b6 d0             	movzx  edx,al
c000dfa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000dfae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfb8:	8d 50 01             	lea    edx,[eax+0x1]
c000dfbb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dfbf:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000dfc5:	0f b6 d0             	movzx  edx,al
c000dfc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfcc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000dfd0:	83 e1 3f             	and    ecx,0x3f
c000dfd3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000dfd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfdb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfe1:	0f b6 d0             	movzx  edx,al
c000dfe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe8:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000dfef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dff9:	0f b6 d0             	movzx  edx,al
c000dffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e000:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e009:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e00f:	8d 50 01             	lea    edx,[eax+0x1]
c000e012:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e016:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e01c:	0f b6 d0             	movzx  edx,al
c000e01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e023:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e027:	83 e1 3f             	and    ecx,0x3f
c000e02a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e032:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e038:	0f b6 d0             	movzx  edx,al
c000e03b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e03f:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e04a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e050:	0f b6 d0             	movzx  edx,al
c000e053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e057:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e060:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e066:	8d 50 01             	lea    edx,[eax+0x1]
c000e069:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e06d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e073:	0f b6 d0             	movzx  edx,al
c000e076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e07a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e07e:	83 e1 3f             	and    ecx,0x3f
c000e081:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e085:	90                   	nop
c000e086:	83 c4 0c             	add    esp,0xc
c000e089:	c3                   	ret    

c000e08a <Computer::setBootMessage(char const*)>:
c000e08a:	c3                   	ret    
c000e08b:	90                   	nop

c000e08c <Computer::start()>:
c000e08c:	56                   	push   esi
c000e08d:	53                   	push   ebx
c000e08e:	50                   	push   eax
c000e08f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e093:	e8 74 d8 00 00       	call   c001b90c <lockScheduler()>
c000e098:	e8 ab db 00 00       	call   c001bc48 <schedule()>
c000e09d:	e8 6c d8 00 00       	call   c001b90e <unlockScheduler()>
c000e0a2:	fb                   	sti    
c000e0a3:	83 ec 0c             	sub    esp,0xc
c000e0a6:	68 3b 07 00 00       	push   0x73b
c000e0ab:	e8 a6 40 00 00       	call   c0012156 <operator new(unsigned long)>
c000e0b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e0b7:	89 c6                	mov    esi,eax
c000e0b9:	ff 35 74 b9 02 c0    	push   DWORD PTR ds:0xc002b974
c000e0bf:	68 4f 69 02 c0       	push   0xc002694f
c000e0c4:	6a 01                	push   0x1
c000e0c6:	50                   	push   eax
c000e0c7:	e8 a0 d6 00 00       	call   c001b76c <Process::Process(bool, char const*, Process*, char**)>
c000e0cc:	83 c4 20             	add    esp,0x20
c000e0cf:	68 ff 00 00 00       	push   0xff
c000e0d4:	6a 00                	push   0x0
c000e0d6:	68 b3 ea 00 c0       	push   0xc000eab3
c000e0db:	56                   	push   esi
c000e0dc:	e8 5d d9 00 00       	call   c001ba3e <Process::createThread(void (*)(void*), void*, int)>
c000e0e1:	6a 7a                	push   0x7a
c000e0e3:	6a 00                	push   0x0
c000e0e5:	68 77 c2 01 c0       	push   0xc001c277
c000e0ea:	ff 35 74 b9 02 c0    	push   DWORD PTR ds:0xc002b974
c000e0f0:	e8 49 d9 00 00       	call   c001ba3e <Process::createThread(void (*)(void*), void*, int)>
c000e0f5:	83 c4 20             	add    esp,0x20
c000e0f8:	a3 28 b9 02 c0       	mov    ds:0xc002b928,eax
c000e0fd:	c6 05 6d a4 02 c0 01 	mov    BYTE PTR ds:0xc002a46d,0x1
c000e104:	e8 97 44 00 00       	call   c00125a0 <initVFS()>
c000e109:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e10f:	8b 10                	mov    edx,DWORD PTR [eax]
c000e111:	6a 00                	push   0x0
c000e113:	6a 00                	push   0x0
c000e115:	6a 00                	push   0x0
c000e117:	50                   	push   eax
c000e118:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e11b:	e8 48 c0 00 00       	call   c001a168 <setupSystemCalls()>
c000e120:	e8 79 4f 00 00       	call   c001309e <loadClockSettings()>
c000e125:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e128:	e8 3d 56 00 00       	call   c001376a <Device::loadDriversForAll()>
c000e12d:	5a                   	pop    edx
c000e12e:	8b 1d 68 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a468
c000e134:	59                   	pop    ecx
c000e135:	6a 01                	push   0x1
c000e137:	68 5c 69 02 c0       	push   0xc002695c
c000e13c:	e8 f9 d1 00 00       	call   c001b33a <Thr::loadDLL(char const*, bool)>
c000e141:	5e                   	pop    esi
c000e142:	5a                   	pop    edx
c000e143:	53                   	push   ebx
c000e144:	50                   	push   eax
c000e145:	e8 b6 d3 00 00       	call   c001b500 <Thr::executeDLL(unsigned long, void*)>
c000e14a:	c7 04 24 e0 7a 02 c0 	mov    DWORD PTR [esp],0xc0027ae0
c000e151:	e8 ef 40 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e156:	83 c4 10             	add    esp,0x10
c000e159:	83 ec 0c             	sub    esp,0xc
c000e15c:	6a 02                	push   0x2
c000e15e:	e8 3f dc 00 00       	call   c001bda2 <blockTask(TaskState)>
c000e163:	83 c4 10             	add    esp,0x10
c000e166:	eb f1                	jmp    c000e159 <Computer::start()+0xcd>

c000e168 <firstTask()>:
c000e168:	83 ec 18             	sub    esp,0x18
c000e16b:	ff 35 68 a4 02 c0    	push   DWORD PTR ds:0xc002a468
c000e171:	e8 16 ff ff ff       	call   c000e08c <Computer::start()>

c000e176 <Computer::detectFeatures()>:
c000e176:	55                   	push   ebp
c000e177:	57                   	push   edi
c000e178:	56                   	push   esi
c000e179:	53                   	push   ebx
c000e17a:	83 ec 1c             	sub    esp,0x1c
c000e17d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e181:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e18b:	e8 09 21 ff ff       	call   c0000299 <detectCPUID>
c000e190:	85 c0                	test   eax,eax
c000e192:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e198:	0f 95 c2             	setne  dl
c000e19b:	83 e0 fd             	and    eax,0xfffffffd
c000e19e:	d1 e2                	shl    edx,1
c000e1a0:	09 d0                	or     eax,edx
c000e1a2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e1a8:	a8 02                	test   al,0x2
c000e1aa:	75 46                	jne    c000e1f2 <Computer::detectFeatures()+0x7c>
c000e1ac:	f6 05 81 a4 02 c0 04 	test   BYTE PTR ds:0xc002a481,0x4
c000e1b3:	74 07                	je     c000e1bc <Computer::detectFeatures()+0x46>
c000e1b5:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e1bc:	e8 65 4f 01 00       	call   c0023126 <x87Detect>
c000e1c1:	83 e0 01             	and    eax,0x1
c000e1c4:	c1 e0 04             	shl    eax,0x4
c000e1c7:	88 c2                	mov    dl,al
c000e1c9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e1cf:	83 e0 ef             	and    eax,0xffffffef
c000e1d2:	09 d0                	or     eax,edx
c000e1d4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e1da:	a8 10                	test   al,0x10
c000e1dc:	0f 85 2a 01 00 00    	jne    c000e30c <Computer::detectFeatures()+0x196>
c000e1e2:	84 c0                	test   al,al
c000e1e4:	0f 88 45 01 00 00    	js     c000e32f <Computer::detectFeatures()+0x1b9>
c000e1ea:	83 c4 1c             	add    esp,0x1c
c000e1ed:	5b                   	pop    ebx
c000e1ee:	5e                   	pop    esi
c000e1ef:	5f                   	pop    edi
c000e1f0:	5d                   	pop    ebp
c000e1f1:	c3                   	ret    
c000e1f2:	83 ec 0c             	sub    esp,0xc
c000e1f5:	6a 20                	push   0x20
c000e1f7:	e8 24 96 00 00       	call   c0017820 <CPU::cpuidCheckEDX(unsigned int)>
c000e1fc:	83 e0 01             	and    eax,0x1
c000e1ff:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e206:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e20c:	83 e0 f7             	and    eax,0xfffffff7
c000e20f:	09 d0                	or     eax,edx
c000e211:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e217:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e21e:	e8 fd 95 00 00       	call   c0017820 <CPU::cpuidCheckEDX(unsigned int)>
c000e223:	83 e0 01             	and    eax,0x1
c000e226:	88 c2                	mov    dl,al
c000e228:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e22e:	83 e0 fe             	and    eax,0xfffffffe
c000e231:	09 d0                	or     eax,edx
c000e233:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e239:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e240:	e8 db 95 00 00       	call   c0017820 <CPU::cpuidCheckEDX(unsigned int)>
c000e245:	c1 e0 07             	shl    eax,0x7
c000e248:	88 c2                	mov    dl,al
c000e24a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e250:	83 e0 7f             	and    eax,0x7f
c000e253:	09 d0                	or     eax,edx
c000e255:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e25b:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e262:	e8 b9 95 00 00       	call   c0017820 <CPU::cpuidCheckEDX(unsigned int)>
c000e267:	83 c4 10             	add    esp,0x10
c000e26a:	83 e0 01             	and    eax,0x1
c000e26d:	c1 e0 05             	shl    eax,0x5
c000e270:	88 c2                	mov    dl,al
c000e272:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e278:	83 e0 df             	and    eax,0xffffffdf
c000e27b:	09 d0                	or     eax,edx
c000e27d:	f7 05 80 a4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002a480,0x401
c000e287:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e28d:	0f 84 c2 00 00 00    	je     c000e355 <Computer::detectFeatures()+0x1df>
c000e293:	83 e0 fe             	and    eax,0xfffffffe
c000e296:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e29c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e2a2:	88 c2                	mov    dl,al
c000e2a4:	83 e2 09             	and    edx,0x9
c000e2a7:	fe ca                	dec    dl
c000e2a9:	75 09                	jne    c000e2b4 <Computer::detectFeatures()+0x13e>
c000e2ab:	83 e0 fe             	and    eax,0xfffffffe
c000e2ae:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2b4:	83 ec 0c             	sub    esp,0xc
c000e2b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2bb:	50                   	push   eax
c000e2bc:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e2c0:	55                   	push   ebp
c000e2c1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e2c5:	57                   	push   edi
c000e2c6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e2ca:	56                   	push   esi
c000e2cb:	68 00 00 00 80       	push   0x80000000
c000e2d0:	e8 c7 94 00 00       	call   c001779c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e2d5:	83 c4 20             	add    esp,0x20
c000e2d8:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e2df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e2e3:	0f 86 c3 fe ff ff    	jbe    c000e1ac <Computer::detectFeatures()+0x36>
c000e2e9:	83 ec 0c             	sub    esp,0xc
c000e2ec:	50                   	push   eax
c000e2ed:	55                   	push   ebp
c000e2ee:	57                   	push   edi
c000e2ef:	56                   	push   esi
c000e2f0:	68 01 00 00 80       	push   0x80000001
c000e2f5:	e8 a2 94 00 00       	call   c001779c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e2fa:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e304:	83 c4 20             	add    esp,0x20
c000e307:	e9 a0 fe ff ff       	jmp    c000e1ac <Computer::detectFeatures()+0x36>
c000e30c:	e8 cf 4d 01 00       	call   c00230e0 <sseDetect>
c000e311:	88 c2                	mov    dl,al
c000e313:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e319:	c1 e2 07             	shl    edx,0x7
c000e31c:	83 e0 7f             	and    eax,0x7f
c000e31f:	09 d0                	or     eax,edx
c000e321:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e327:	84 c0                	test   al,al
c000e329:	0f 89 bb fe ff ff    	jns    c000e1ea <Computer::detectFeatures()+0x74>
c000e32f:	e8 9c 4d 01 00       	call   c00230d0 <avxDetect>
c000e334:	83 e0 01             	and    eax,0x1
c000e337:	c1 e0 05             	shl    eax,0x5
c000e33a:	88 c2                	mov    dl,al
c000e33c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e342:	83 e0 df             	and    eax,0xffffffdf
c000e345:	09 d0                	or     eax,edx
c000e347:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e34d:	83 c4 1c             	add    esp,0x1c
c000e350:	5b                   	pop    ebx
c000e351:	5e                   	pop    esi
c000e352:	5f                   	pop    edi
c000e353:	5d                   	pop    ebp
c000e354:	c3                   	ret    
c000e355:	83 ec 0c             	sub    esp,0xc
c000e358:	68 00 02 00 00       	push   0x200
c000e35d:	e8 be 94 00 00       	call   c0017820 <CPU::cpuidCheckEDX(unsigned int)>
c000e362:	83 c4 10             	add    esp,0x10
c000e365:	83 e0 01             	and    eax,0x1
c000e368:	88 c2                	mov    dl,al
c000e36a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e370:	83 e0 fe             	and    eax,0xfffffffe
c000e373:	09 d0                	or     eax,edx
c000e375:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e37b:	e9 1c ff ff ff       	jmp    c000e29c <Computer::detectFeatures()+0x126>

c000e380 <Computer::displayFeatures()>:
c000e380:	53                   	push   ebx
c000e381:	83 ec 14             	sub    esp,0x14
c000e384:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e388:	68 7f 69 02 c0       	push   0xc002697f
c000e38d:	e8 b3 3e 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e392:	83 c4 10             	add    esp,0x10
c000e395:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e39c:	0f 85 73 02 00 00    	jne    c000e615 <Computer::displayFeatures()+0x295>
c000e3a2:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e3a7:	83 ec 08             	sub    esp,0x8
c000e3aa:	50                   	push   eax
c000e3ab:	68 92 69 02 c0       	push   0xc0026992
c000e3b0:	e8 90 3e 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e3b5:	83 c4 10             	add    esp,0x10
c000e3b8:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e3bf:	0f 85 8c 02 00 00    	jne    c000e651 <Computer::displayFeatures()+0x2d1>
c000e3c5:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e3ca:	83 ec 08             	sub    esp,0x8
c000e3cd:	50                   	push   eax
c000e3ce:	68 a3 69 02 c0       	push   0xc00269a3
c000e3d3:	e8 6d 3e 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e3d8:	83 c4 10             	add    esp,0x10
c000e3db:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e3e2:	0f 85 5f 02 00 00    	jne    c000e647 <Computer::displayFeatures()+0x2c7>
c000e3e8:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e3ed:	83 ec 08             	sub    esp,0x8
c000e3f0:	50                   	push   eax
c000e3f1:	68 b4 69 02 c0       	push   0xc00269b4
c000e3f6:	e8 4a 3e 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e3fb:	83 c4 10             	add    esp,0x10
c000e3fe:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e405:	0f 85 32 02 00 00    	jne    c000e63d <Computer::displayFeatures()+0x2bd>
c000e40b:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e410:	83 ec 08             	sub    esp,0x8
c000e413:	50                   	push   eax
c000e414:	68 c5 69 02 c0       	push   0xc00269c5
c000e419:	e8 27 3e 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e41e:	83 c4 10             	add    esp,0x10
c000e421:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e428:	0f 85 05 02 00 00    	jne    c000e633 <Computer::displayFeatures()+0x2b3>
c000e42e:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e433:	83 ec 08             	sub    esp,0x8
c000e436:	50                   	push   eax
c000e437:	68 d6 69 02 c0       	push   0xc00269d6
c000e43c:	e8 04 3e 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e441:	83 c4 10             	add    esp,0x10
c000e444:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e44b:	0f 85 d8 01 00 00    	jne    c000e629 <Computer::displayFeatures()+0x2a9>
c000e451:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e456:	83 ec 08             	sub    esp,0x8
c000e459:	50                   	push   eax
c000e45a:	68 e7 69 02 c0       	push   0xc00269e7
c000e45f:	e8 e1 3d 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e464:	83 c4 10             	add    esp,0x10
c000e467:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e46e:	0f 85 ab 01 00 00    	jne    c000e61f <Computer::displayFeatures()+0x29f>
c000e474:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e479:	83 ec 08             	sub    esp,0x8
c000e47c:	50                   	push   eax
c000e47d:	68 f8 69 02 c0       	push   0xc00269f8
c000e482:	e8 be 3d 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e487:	83 c4 10             	add    esp,0x10
c000e48a:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e491:	0f 88 1b 02 00 00    	js     c000e6b2 <Computer::displayFeatures()+0x332>
c000e497:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e49c:	83 ec 08             	sub    esp,0x8
c000e49f:	50                   	push   eax
c000e4a0:	68 09 6a 02 c0       	push   0xc0026a09
c000e4a5:	e8 9b 3d 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e4aa:	83 c4 10             	add    esp,0x10
c000e4ad:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e4b4:	0f 85 a1 01 00 00    	jne    c000e65b <Computer::displayFeatures()+0x2db>
c000e4ba:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e4bf:	83 ec 08             	sub    esp,0x8
c000e4c2:	50                   	push   eax
c000e4c3:	68 1a 6a 02 c0       	push   0xc0026a1a
c000e4c8:	e8 78 3d 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e4cd:	83 c4 10             	add    esp,0x10
c000e4d0:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e4d7:	0f 85 cb 01 00 00    	jne    c000e6a8 <Computer::displayFeatures()+0x328>
c000e4dd:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e4e2:	83 ec 08             	sub    esp,0x8
c000e4e5:	50                   	push   eax
c000e4e6:	68 2b 6a 02 c0       	push   0xc0026a2b
c000e4eb:	e8 55 3d 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e4f0:	83 c4 10             	add    esp,0x10
c000e4f3:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e4fa:	0f 85 9e 01 00 00    	jne    c000e69e <Computer::displayFeatures()+0x31e>
c000e500:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e505:	83 ec 08             	sub    esp,0x8
c000e508:	50                   	push   eax
c000e509:	68 3c 6a 02 c0       	push   0xc0026a3c
c000e50e:	e8 32 3d 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e513:	83 c4 10             	add    esp,0x10
c000e516:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e51d:	0f 85 71 01 00 00    	jne    c000e694 <Computer::displayFeatures()+0x314>
c000e523:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e528:	83 ec 08             	sub    esp,0x8
c000e52b:	50                   	push   eax
c000e52c:	68 4d 6a 02 c0       	push   0xc0026a4d
c000e531:	e8 0f 3d 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e536:	83 c4 10             	add    esp,0x10
c000e539:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e540:	0f 85 44 01 00 00    	jne    c000e68a <Computer::displayFeatures()+0x30a>
c000e546:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e54b:	83 ec 08             	sub    esp,0x8
c000e54e:	50                   	push   eax
c000e54f:	68 5e 6a 02 c0       	push   0xc0026a5e
c000e554:	e8 ec 3c 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e559:	83 c4 10             	add    esp,0x10
c000e55c:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e563:	0f 85 17 01 00 00    	jne    c000e680 <Computer::displayFeatures()+0x300>
c000e569:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e56e:	83 ec 08             	sub    esp,0x8
c000e571:	50                   	push   eax
c000e572:	68 6f 6a 02 c0       	push   0xc0026a6f
c000e577:	e8 c9 3c 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e57c:	83 c4 10             	add    esp,0x10
c000e57f:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e586:	0f 85 ea 00 00 00    	jne    c000e676 <Computer::displayFeatures()+0x2f6>
c000e58c:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	50                   	push   eax
c000e595:	68 80 6a 02 c0       	push   0xc0026a80
c000e59a:	e8 a6 3c 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e59f:	83 c4 10             	add    esp,0x10
c000e5a2:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e5a9:	0f 88 0d 01 00 00    	js     c000e6bc <Computer::displayFeatures()+0x33c>
c000e5af:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e5b4:	83 ec 08             	sub    esp,0x8
c000e5b7:	50                   	push   eax
c000e5b8:	68 91 6a 02 c0       	push   0xc0026a91
c000e5bd:	e8 83 3c 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e5c2:	83 c4 10             	add    esp,0x10
c000e5c5:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e5cc:	0f 85 9a 00 00 00    	jne    c000e66c <Computer::displayFeatures()+0x2ec>
c000e5d2:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e5d7:	83 ec 08             	sub    esp,0x8
c000e5da:	50                   	push   eax
c000e5db:	68 a2 6a 02 c0       	push   0xc0026aa2
c000e5e0:	e8 60 3c 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e5e5:	83 c4 10             	add    esp,0x10
c000e5e8:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e5ef:	75 74                	jne    c000e665 <Computer::displayFeatures()+0x2e5>
c000e5f1:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e5f6:	83 ec 08             	sub    esp,0x8
c000e5f9:	50                   	push   eax
c000e5fa:	68 b3 6a 02 c0       	push   0xc0026ab3
c000e5ff:	e8 41 3c 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e604:	c7 44 24 20 da 80 02 c0 	mov    DWORD PTR [esp+0x20],0xc00280da
c000e60c:	83 c4 18             	add    esp,0x18
c000e60f:	5b                   	pop    ebx
c000e610:	e9 30 3c 00 00       	jmp    c0012245 <Dbg::kprintf(char const*, ...)>
c000e615:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e61a:	e9 88 fd ff ff       	jmp    c000e3a7 <Computer::displayFeatures()+0x27>
c000e61f:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e624:	e9 50 fe ff ff       	jmp    c000e479 <Computer::displayFeatures()+0xf9>
c000e629:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e62e:	e9 23 fe ff ff       	jmp    c000e456 <Computer::displayFeatures()+0xd6>
c000e633:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e638:	e9 f6 fd ff ff       	jmp    c000e433 <Computer::displayFeatures()+0xb3>
c000e63d:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e642:	e9 c9 fd ff ff       	jmp    c000e410 <Computer::displayFeatures()+0x90>
c000e647:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e64c:	e9 9c fd ff ff       	jmp    c000e3ed <Computer::displayFeatures()+0x6d>
c000e651:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e656:	e9 6f fd ff ff       	jmp    c000e3ca <Computer::displayFeatures()+0x4a>
c000e65b:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e660:	e9 5a fe ff ff       	jmp    c000e4bf <Computer::displayFeatures()+0x13f>
c000e665:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e66a:	eb 8a                	jmp    c000e5f6 <Computer::displayFeatures()+0x276>
c000e66c:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e671:	e9 61 ff ff ff       	jmp    c000e5d7 <Computer::displayFeatures()+0x257>
c000e676:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e67b:	e9 11 ff ff ff       	jmp    c000e591 <Computer::displayFeatures()+0x211>
c000e680:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e685:	e9 e4 fe ff ff       	jmp    c000e56e <Computer::displayFeatures()+0x1ee>
c000e68a:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e68f:	e9 b7 fe ff ff       	jmp    c000e54b <Computer::displayFeatures()+0x1cb>
c000e694:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e699:	e9 8a fe ff ff       	jmp    c000e528 <Computer::displayFeatures()+0x1a8>
c000e69e:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6a3:	e9 5d fe ff ff       	jmp    c000e505 <Computer::displayFeatures()+0x185>
c000e6a8:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6ad:	e9 30 fe ff ff       	jmp    c000e4e2 <Computer::displayFeatures()+0x162>
c000e6b2:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6b7:	e9 e0 fd ff ff       	jmp    c000e49c <Computer::displayFeatures()+0x11c>
c000e6bc:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6c1:	e9 ee fe ff ff       	jmp    c000e5b4 <Computer::displayFeatures()+0x234>

c000e6c6 <Computer::rdmsr(unsigned int)>:
c000e6c6:	83 ec 0c             	sub    esp,0xc
c000e6c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6cd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e6d4:	74 0a                	je     c000e6e0 <Computer::rdmsr(unsigned int)+0x1a>
c000e6d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e6da:	0f 32                	rdmsr  
c000e6dc:	83 c4 0c             	add    esp,0xc
c000e6df:	c3                   	ret    
c000e6e0:	83 ec 0c             	sub    esp,0xc
c000e6e3:	68 c4 6a 02 c0       	push   0xc0026ac4
c000e6e8:	e8 d6 a2 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c000e6ed:	83 c4 10             	add    esp,0x10
c000e6f0:	eb e4                	jmp    c000e6d6 <Computer::rdmsr(unsigned int)+0x10>

c000e6f2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000e6f2:	57                   	push   edi
c000e6f3:	56                   	push   esi
c000e6f4:	52                   	push   edx
c000e6f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e6fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e701:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e708:	74 0e                	je     c000e718 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000e70a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e70e:	89 f0                	mov    eax,esi
c000e710:	89 fa                	mov    edx,edi
c000e712:	0f 30                	wrmsr  
c000e714:	58                   	pop    eax
c000e715:	5e                   	pop    esi
c000e716:	5f                   	pop    edi
c000e717:	c3                   	ret    
c000e718:	83 ec 0c             	sub    esp,0xc
c000e71b:	68 ca 6a 02 c0       	push   0xc0026aca
c000e720:	e8 9e a2 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c000e725:	83 c4 10             	add    esp,0x10
c000e728:	eb e0                	jmp    c000e70a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000e72a <Computer::nmiEnabled()>:
c000e72a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e72e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000e734:	c3                   	ret    
c000e735:	90                   	nop

c000e736 <Computer::readCMOS(unsigned char)>:
c000e736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e73a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e741:	19 c0                	sbb    eax,eax
c000e743:	83 e0 80             	and    eax,0xffffff80
c000e746:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e74a:	e6 70                	out    0x70,al
c000e74c:	e4 71                	in     al,0x71
c000e74e:	c3                   	ret    
c000e74f:	90                   	nop

c000e750 <Computer::enableNMI(bool)>:
c000e750:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e754:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e758:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000e75e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000e766:	eb ce                	jmp    c000e736 <Computer::readCMOS(unsigned char)>

c000e768 <Computer::open(int, int, void*)>:
c000e768:	56                   	push   esi
c000e769:	53                   	push   ebx
c000e76a:	83 ec 10             	sub    esp,0x10
c000e76d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e771:	f6 05 80 a4 02 c0 04 	test   BYTE PTR ds:0xc002a480,0x4
c000e778:	68 68 22 00 00       	push   0x2268
c000e77d:	0f 94 05 20 94 02 c0 	sete   BYTE PTR ds:0xc0029420
c000e784:	e8 cd 39 00 00       	call   c0012156 <operator new(unsigned long)>
c000e789:	89 04 24             	mov    DWORD PTR [esp],eax
c000e78c:	89 c6                	mov    esi,eax
c000e78e:	e8 cb 86 00 00       	call   c0016e5e <ACPI::ACPI()>
c000e793:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000e799:	58                   	pop    eax
c000e79a:	5a                   	pop    edx
c000e79b:	56                   	push   esi
c000e79c:	53                   	push   ebx
c000e79d:	e8 7e 4e 00 00       	call   c0013620 <Device::addChild(Device*)>
c000e7a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7a5:	e8 cc f9 ff ff       	call   c000e176 <Computer::detectFeatures()>
c000e7aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7ad:	e8 ce fb ff ff       	call   c000e380 <Computer::displayFeatures()>
c000e7b2:	59                   	pop    ecx
c000e7b3:	5e                   	pop    esi
c000e7b4:	6a 01                	push   0x1
c000e7b6:	53                   	push   ebx
c000e7b7:	e8 94 ff ff ff       	call   c000e750 <Computer::enableNMI(bool)>
c000e7bc:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000e7c3:	e8 8e 39 00 00       	call   c0012156 <operator new(unsigned long)>
c000e7c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7cb:	89 c6                	mov    esi,eax
c000e7cd:	e8 06 91 00 00       	call   c00178d8 <CPU::CPU()>
c000e7d2:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e7d8:	58                   	pop    eax
c000e7d9:	5a                   	pop    edx
c000e7da:	56                   	push   esi
c000e7db:	53                   	push   ebx
c000e7dc:	e8 3f 4e 00 00       	call   c0013620 <Device::addChild(Device*)>
c000e7e1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e7e7:	8b 10                	mov    edx,DWORD PTR [eax]
c000e7e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7ed:	6a 00                	push   0x0
c000e7ef:	6a 00                	push   0x0
c000e7f1:	50                   	push   eax
c000e7f2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e7f5:	83 c4 20             	add    esp,0x20
c000e7f8:	e8 8b 53 00 00       	call   c0013b88 <setupFPU()>
c000e7fd:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000e803:	85 c0                	test   eax,eax
c000e805:	74 1f                	je     c000e826 <Computer::open(int, int, void*)+0xbe>
c000e807:	83 ec 08             	sub    esp,0x8
c000e80a:	50                   	push   eax
c000e80b:	53                   	push   ebx
c000e80c:	e8 0f 4e 00 00       	call   c0013620 <Device::addChild(Device*)>
c000e811:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000e817:	8b 10                	mov    edx,DWORD PTR [eax]
c000e819:	6a 00                	push   0x0
c000e81b:	6a 00                	push   0x0
c000e81d:	6a 00                	push   0x0
c000e81f:	50                   	push   eax
c000e820:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e823:	83 c4 20             	add    esp,0x20
c000e826:	83 ec 0c             	sub    esp,0xc
c000e829:	68 68 e1 00 c0       	push   0xc000e168
c000e82e:	e8 0b d3 00 00       	call   c001bb3e <setupMultitasking(void (*)())>
c000e833:	83 c4 14             	add    esp,0x14
c000e836:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e83b:	5b                   	pop    ebx
c000e83c:	5e                   	pop    esi
c000e83d:	c3                   	ret    

c000e83e <Computer::disableNMI()>:
c000e83e:	6a 00                	push   0x0
c000e840:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e844:	e8 07 ff ff ff       	call   c000e750 <Computer::enableNMI(bool)>
c000e849:	58                   	pop    eax
c000e84a:	5a                   	pop    edx
c000e84b:	c3                   	ret    

c000e84c <Computer::writeCMOS(unsigned char, unsigned char)>:
c000e84c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e850:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e857:	19 c0                	sbb    eax,eax
c000e859:	83 e0 80             	and    eax,0xffffff80
c000e85c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e860:	e6 70                	out    0x70,al
c000e862:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e866:	e6 71                	out    0x71,al
c000e868:	c3                   	ret    
c000e869:	90                   	nop

c000e86a <Computer::handleNMI()>:
c000e86a:	56                   	push   esi
c000e86b:	53                   	push   ebx
c000e86c:	83 ec 10             	sub    esp,0x10
c000e86f:	e4 92                	in     al,0x92
c000e871:	89 c6                	mov    esi,eax
c000e873:	e4 61                	in     al,0x61
c000e875:	68 d0 6a 02 c0       	push   0xc0026ad0
c000e87a:	88 c3                	mov    bl,al
c000e87c:	e8 c4 39 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e881:	83 c4 10             	add    esp,0x10
c000e884:	83 e6 10             	and    esi,0x10
c000e887:	75 0d                	jne    c000e896 <Computer::handleNMI()+0x2c>
c000e889:	f6 c3 40             	test   bl,0x40
c000e88c:	75 1d                	jne    c000e8ab <Computer::handleNMI()+0x41>
c000e88e:	84 db                	test   bl,bl
c000e890:	78 2d                	js     c000e8bf <Computer::handleNMI()+0x55>
c000e892:	58                   	pop    eax
c000e893:	5b                   	pop    ebx
c000e894:	5e                   	pop    esi
c000e895:	c3                   	ret    
c000e896:	83 ec 0c             	sub    esp,0xc
c000e899:	68 e1 6a 02 c0       	push   0xc0026ae1
c000e89e:	e8 20 a1 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c000e8a3:	83 c4 10             	add    esp,0x10
c000e8a6:	f6 c3 40             	test   bl,0x40
c000e8a9:	74 e3                	je     c000e88e <Computer::handleNMI()+0x24>
c000e8ab:	83 ec 0c             	sub    esp,0xc
c000e8ae:	68 ee 6a 02 c0       	push   0xc0026aee
c000e8b3:	e8 0b a1 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c000e8b8:	83 c4 10             	add    esp,0x10
c000e8bb:	84 db                	test   bl,bl
c000e8bd:	79 d3                	jns    c000e892 <Computer::handleNMI()+0x28>
c000e8bf:	c7 44 24 10 f8 6a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026af8
c000e8c7:	5a                   	pop    edx
c000e8c8:	5b                   	pop    ebx
c000e8c9:	5e                   	pop    esi
c000e8ca:	e9 f4 a0 00 00       	jmp    c00189c3 <Krnl::panic(char const*)>
c000e8cf:	90                   	nop

c000e8d0 <Computer::setDiskActivityLight(int, bool)>:
c000e8d0:	56                   	push   esi
c000e8d1:	53                   	push   ebx
c000e8d2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e8d6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e8db:	77 1b                	ja     c000e8f8 <Computer::setDiskActivityLight(int, bool)+0x28>
c000e8dd:	e4 92                	in     al,0x92
c000e8df:	bb 40 00 00 00       	mov    ebx,0x40
c000e8e4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000e8e8:	89 da                	mov    edx,ebx
c000e8ea:	d3 e2                	shl    edx,cl
c000e8ec:	89 f1                	mov    ecx,esi
c000e8ee:	f7 d2                	not    edx
c000e8f0:	d3 e3                	shl    ebx,cl
c000e8f2:	21 d0                	and    eax,edx
c000e8f4:	09 d8                	or     eax,ebx
c000e8f6:	e6 92                	out    0x92,al
c000e8f8:	5b                   	pop    ebx
c000e8f9:	5e                   	pop    esi
c000e8fa:	c3                   	ret    
c000e8fb:	90                   	nop

c000e8fc <GDTEntry::setBase(unsigned int)>:
c000e8fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e900:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e904:	89 c1                	mov    ecx,eax
c000e906:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e90a:	c1 e9 10             	shr    ecx,0x10
c000e90d:	c1 e8 18             	shr    eax,0x18
c000e910:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e913:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e916:	c3                   	ret    
c000e917:	90                   	nop

c000e918 <GDTEntry::setLimit(unsigned int)>:
c000e918:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e91c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e920:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e923:	66 89 01             	mov    WORD PTR [ecx],ax
c000e926:	83 e2 f0             	and    edx,0xfffffff0
c000e929:	c1 e8 10             	shr    eax,0x10
c000e92c:	83 e0 0f             	and    eax,0xf
c000e92f:	09 d0                	or     eax,edx
c000e931:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e934:	c3                   	ret    
c000e935:	90                   	nop

c000e936 <GDT::GDT()>:
c000e936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e93a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e944:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e94a:	90                   	nop
c000e94b:	c3                   	ret    

c000e94c <GDT::addEntry(GDTEntry)>:
c000e94c:	53                   	push   ebx
c000e94d:	83 ec 0c             	sub    esp,0xc
c000e950:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e954:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e956:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e95d:	52                   	push   edx
c000e95e:	50                   	push   eax
c000e95f:	68 34 6b 02 c0       	push   0xc0026b34
c000e964:	e8 dc 38 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000e969:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e96b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e96f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e973:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000e977:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000e97b:	8d 50 01             	lea    edx,[eax+0x1]
c000e97e:	c1 e0 03             	shl    eax,0x3
c000e981:	89 13                	mov    DWORD PTR [ebx],edx
c000e983:	83 c4 18             	add    esp,0x18
c000e986:	5b                   	pop    ebx
c000e987:	c3                   	ret    

c000e988 <GDT::getNumberOfEntries()>:
c000e988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e98c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e98e:	c3                   	ret    
c000e98f:	90                   	nop

c000e990 <GDT::flush()>:
c000e990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e994:	8b 10                	mov    edx,DWORD PTR [eax]
c000e996:	83 c0 04             	add    eax,0x4
c000e999:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e9a0:	a3 72 a4 02 c0       	mov    ds:0xc002a472,eax
c000e9a5:	66 89 15 70 a4 02 c0 	mov    WORD PTR ds:0xc002a470,dx
c000e9ac:	e9 4e 1a ff ff       	jmp    c00003ff <loadGDT>
c000e9b1:	90                   	nop

c000e9b2 <GDT::setup()>:
c000e9b2:	55                   	push   ebp
c000e9b3:	57                   	push   edi
c000e9b4:	56                   	push   esi
c000e9b5:	53                   	push   ebx
c000e9b6:	83 ec 3c             	sub    esp,0x3c
c000e9b9:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000e9bd:	6a 00                	push   0x0
c000e9bf:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000e9c3:	53                   	push   ebx
c000e9c4:	e8 33 ff ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c000e9c9:	6a 00                	push   0x0
c000e9cb:	53                   	push   ebx
c000e9cc:	e8 47 ff ff ff       	call   c000e918 <GDTEntry::setLimit(unsigned int)>
c000e9d1:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000e9d9:	6a 00                	push   0x0
c000e9db:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000e9df:	53                   	push   ebx
c000e9e0:	e8 17 ff ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c000e9e5:	68 ff ff ff 00       	push   0xffffff
c000e9ea:	53                   	push   ebx
c000e9eb:	e8 28 ff ff ff       	call   c000e918 <GDTEntry::setLimit(unsigned int)>
c000e9f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e9f4:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e9f9:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e9fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ea02:	83 c4 20             	add    esp,0x20
c000ea05:	6a 00                	push   0x0
c000ea07:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ea0b:	53                   	push   ebx
c000ea0c:	e8 eb fe ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c000ea11:	68 ff ff ff 00       	push   0xffffff
c000ea16:	53                   	push   ebx
c000ea17:	e8 fc fe ff ff       	call   c000e918 <GDTEntry::setLimit(unsigned int)>
c000ea1c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea20:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea24:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ea28:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ea2c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea30:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea35:	0d 00 92 c0 00       	or     eax,0xc09200
c000ea3a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ea3e:	89 d8                	mov    eax,ebx
c000ea40:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ea44:	80 cc 60             	or     ah,0x60
c000ea47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea4b:	83 c4 0c             	add    esp,0xc
c000ea4e:	89 f8                	mov    eax,edi
c000ea50:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea54:	80 cc 60             	or     ah,0x60
c000ea57:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea5b:	89 c7                	mov    edi,eax
c000ea5d:	55                   	push   ebp
c000ea5e:	e8 e9 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000ea63:	83 c4 0c             	add    esp,0xc
c000ea66:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea6a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea6e:	55                   	push   ebp
c000ea6f:	e8 d8 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000ea74:	83 c4 0c             	add    esp,0xc
c000ea77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea7b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea7f:	55                   	push   ebp
c000ea80:	e8 c7 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000ea85:	83 c4 0c             	add    esp,0xc
c000ea88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ea90:	53                   	push   ebx
c000ea91:	51                   	push   ecx
c000ea92:	55                   	push   ebp
c000ea93:	e8 b4 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000ea98:	83 c4 0c             	add    esp,0xc
c000ea9b:	57                   	push   edi
c000ea9c:	56                   	push   esi
c000ea9d:	55                   	push   ebp
c000ea9e:	e8 a9 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000eaa3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eaa6:	e8 e5 fe ff ff       	call   c000e990 <GDT::flush()>
c000eaab:	83 c4 4c             	add    esp,0x4c
c000eaae:	5b                   	pop    ebx
c000eaaf:	5e                   	pop    esi
c000eab0:	5f                   	pop    edi
c000eab1:	5d                   	pop    ebp
c000eab2:	c3                   	ret    

c000eab3 <idleFunction(void*)>:
c000eab3:	53                   	push   ebx
c000eab4:	83 ec 08             	sub    esp,0x8
c000eab7:	e8 52 ce 00 00       	call   c001b90e <unlockScheduler()>
c000eabc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000eac1:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000eac7:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000eace:	74 3c                	je     c000eb0c <idleFunction(void*)+0x59>
c000ead0:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ead7:	74 33                	je     c000eb0c <idleFunction(void*)+0x59>
c000ead9:	31 db                	xor    ebx,ebx
c000eadb:	52                   	push   edx
c000eadc:	52                   	push   edx
c000eadd:	68 e1 00 00 00       	push   0xe1
c000eae2:	50                   	push   eax
c000eae3:	e8 de fb ff ff       	call   c000e6c6 <Computer::rdmsr(unsigned int)>
c000eae8:	53                   	push   ebx
c000eae9:	83 e0 02             	and    eax,0x2
c000eaec:	50                   	push   eax
c000eaed:	68 e1 00 00 00       	push   0xe1
c000eaf2:	ff 35 68 a4 02 c0    	push   DWORD PTR ds:0xc002a468
c000eaf8:	e8 f5 fb ff ff       	call   c000e6f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eafd:	83 c4 20             	add    esp,0x20
c000eb00:	e8 2f 17 ff ff       	call   c0000234 <doTPAUSE>
c000eb05:	e8 56 66 01 00       	call   c0025160 <idleCommon()>
c000eb0a:	eb f4                	jmp    c000eb00 <idleFunction(void*)+0x4d>
c000eb0c:	fb                   	sti    
c000eb0d:	f4                   	hlt    
c000eb0e:	e8 4d 66 01 00       	call   c0025160 <idleCommon()>
c000eb13:	eb f7                	jmp    c000eb0c <idleFunction(void*)+0x59>
c000eb15:	90                   	nop

c000eb16 <IDTEntry::IDTEntry(bool)>:
c000eb16:	83 ec 04             	sub    esp,0x4
c000eb19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb1d:	88 04 24             	mov    BYTE PTR [esp],al
c000eb20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb24:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eb2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb2e:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eb32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb36:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb39:	83 e2 f0             	and    edx,0xfffffff0
c000eb3c:	83 ca 0e             	or     edx,0xe
c000eb3f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb46:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb49:	83 e2 ef             	and    edx,0xffffffef
c000eb4c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb4f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eb53:	74 04                	je     c000eb59 <IDTEntry::IDTEntry(bool)+0x43>
c000eb55:	b2 03                	mov    dl,0x3
c000eb57:	eb 02                	jmp    c000eb5b <IDTEntry::IDTEntry(bool)+0x45>
c000eb59:	b2 00                	mov    dl,0x0
c000eb5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb5f:	83 e2 03             	and    edx,0x3
c000eb62:	88 d1                	mov    cl,dl
c000eb64:	c1 e1 05             	shl    ecx,0x5
c000eb67:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb6a:	83 e2 9f             	and    edx,0xffffff9f
c000eb6d:	09 ca                	or     edx,ecx
c000eb6f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb76:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb79:	83 ca 80             	or     edx,0xffffff80
c000eb7c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb7f:	90                   	nop
c000eb80:	83 c4 04             	add    esp,0x4
c000eb83:	c3                   	ret    

c000eb84 <IDTEntry::setOffset(unsigned int)>:
c000eb84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eb88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb8c:	66 89 02             	mov    WORD PTR [edx],ax
c000eb8f:	c1 e8 10             	shr    eax,0x10
c000eb92:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000eb96:	c3                   	ret    
c000eb97:	90                   	nop

c000eb98 <IDT::IDT()>:
c000eb98:	90                   	nop
c000eb99:	c3                   	ret    

c000eb9a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000eb9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb9e:	83 c0 30             	add    eax,0x30
c000eba1:	c3                   	ret    

c000eba2 <IDT::addEntry(IDTEntry, int)>:
c000eba2:	53                   	push   ebx
c000eba3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eba7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ebab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ebb3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ebb6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ebba:	5b                   	pop    ebx
c000ebbb:	c3                   	ret    

c000ebbc <IDT::addEntry(int, void (*)(), bool)>:
c000ebbc:	53                   	push   ebx
c000ebbd:	83 ec 10             	sub    esp,0x10
c000ebc0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ebc5:	50                   	push   eax
c000ebc6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ebca:	53                   	push   ebx
c000ebcb:	e8 46 ff ff ff       	call   c000eb16 <IDTEntry::IDTEntry(bool)>
c000ebd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ebd4:	53                   	push   ebx
c000ebd5:	e8 aa ff ff ff       	call   c000eb84 <IDTEntry::setOffset(unsigned int)>
c000ebda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebde:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ebe2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ebe6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ebea:	e8 b3 ff ff ff       	call   c000eba2 <IDT::addEntry(IDTEntry, int)>
c000ebef:	83 c4 30             	add    esp,0x30
c000ebf2:	5b                   	pop    ebx
c000ebf3:	c3                   	ret    

c000ebf4 <IDT::flush()>:
c000ebf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebf8:	66 c7 05 78 a4 02 c0 ff 07 	mov    WORD PTR ds:0xc002a478,0x7ff
c000ec01:	a3 7a a4 02 c0       	mov    ds:0xc002a47a,eax
c000ec06:	0f 01 1d 78 a4 02 c0 	lidtd  ds:0xc002a478
c000ec0d:	c3                   	ret    

c000ec0e <IDT::setup()>:
c000ec0e:	57                   	push   edi
c000ec0f:	56                   	push   esi
c000ec10:	53                   	push   ebx
c000ec11:	83 ec 10             	sub    esp,0x10
c000ec14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ec18:	6a 00                	push   0x0
c000ec1a:	68 1f 04 00 c0       	push   0xc000041f
c000ec1f:	6a 00                	push   0x0
c000ec21:	53                   	push   ebx
c000ec22:	e8 95 ff ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ec27:	6a 00                	push   0x0
c000ec29:	68 2f 04 00 c0       	push   0xc000042f
c000ec2e:	6a 01                	push   0x1
c000ec30:	53                   	push   ebx
c000ec31:	e8 86 ff ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ec36:	83 c4 20             	add    esp,0x20
c000ec39:	6a 00                	push   0x0
c000ec3b:	68 39 04 00 c0       	push   0xc0000439
c000ec40:	6a 02                	push   0x2
c000ec42:	53                   	push   ebx
c000ec43:	e8 74 ff ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ec48:	6a 00                	push   0x0
c000ec4a:	68 43 04 00 c0       	push   0xc0000443
c000ec4f:	6a 03                	push   0x3
c000ec51:	53                   	push   ebx
c000ec52:	e8 65 ff ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ec57:	83 c4 20             	add    esp,0x20
c000ec5a:	6a 00                	push   0x0
c000ec5c:	68 4d 04 00 c0       	push   0xc000044d
c000ec61:	6a 04                	push   0x4
c000ec63:	53                   	push   ebx
c000ec64:	e8 53 ff ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ec69:	6a 00                	push   0x0
c000ec6b:	68 57 04 00 c0       	push   0xc0000457
c000ec70:	6a 05                	push   0x5
c000ec72:	53                   	push   ebx
c000ec73:	e8 44 ff ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ec78:	83 c4 20             	add    esp,0x20
c000ec7b:	6a 00                	push   0x0
c000ec7d:	68 61 04 00 c0       	push   0xc0000461
c000ec82:	6a 06                	push   0x6
c000ec84:	53                   	push   ebx
c000ec85:	e8 32 ff ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ec8a:	6a 00                	push   0x0
c000ec8c:	68 6b 04 00 c0       	push   0xc000046b
c000ec91:	6a 07                	push   0x7
c000ec93:	53                   	push   ebx
c000ec94:	e8 23 ff ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ec99:	83 c4 20             	add    esp,0x20
c000ec9c:	6a 00                	push   0x0
c000ec9e:	68 75 04 00 c0       	push   0xc0000475
c000eca3:	6a 08                	push   0x8
c000eca5:	53                   	push   ebx
c000eca6:	e8 11 ff ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ecab:	6a 00                	push   0x0
c000ecad:	68 7d 04 00 c0       	push   0xc000047d
c000ecb2:	6a 09                	push   0x9
c000ecb4:	53                   	push   ebx
c000ecb5:	e8 02 ff ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ecba:	83 c4 20             	add    esp,0x20
c000ecbd:	6a 00                	push   0x0
c000ecbf:	68 87 04 00 c0       	push   0xc0000487
c000ecc4:	6a 0a                	push   0xa
c000ecc6:	53                   	push   ebx
c000ecc7:	e8 f0 fe ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000eccc:	6a 00                	push   0x0
c000ecce:	68 8f 04 00 c0       	push   0xc000048f
c000ecd3:	6a 0b                	push   0xb
c000ecd5:	53                   	push   ebx
c000ecd6:	e8 e1 fe ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ecdb:	83 c4 20             	add    esp,0x20
c000ecde:	6a 00                	push   0x0
c000ece0:	68 97 04 00 c0       	push   0xc0000497
c000ece5:	6a 0c                	push   0xc
c000ece7:	53                   	push   ebx
c000ece8:	e8 cf fe ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000eced:	6a 00                	push   0x0
c000ecef:	68 9f 04 00 c0       	push   0xc000049f
c000ecf4:	6a 0d                	push   0xd
c000ecf6:	53                   	push   ebx
c000ecf7:	e8 c0 fe ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ecfc:	83 c4 20             	add    esp,0x20
c000ecff:	6a 00                	push   0x0
c000ed01:	68 a7 04 00 c0       	push   0xc00004a7
c000ed06:	6a 0e                	push   0xe
c000ed08:	53                   	push   ebx
c000ed09:	e8 ae fe ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ed0e:	6a 00                	push   0x0
c000ed10:	68 af 04 00 c0       	push   0xc00004af
c000ed15:	6a 0f                	push   0xf
c000ed17:	53                   	push   ebx
c000ed18:	e8 9f fe ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ed1d:	83 c4 20             	add    esp,0x20
c000ed20:	6a 00                	push   0x0
c000ed22:	68 b9 04 00 c0       	push   0xc00004b9
c000ed27:	6a 10                	push   0x10
c000ed29:	53                   	push   ebx
c000ed2a:	e8 8d fe ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ed2f:	6a 00                	push   0x0
c000ed31:	68 c3 04 00 c0       	push   0xc00004c3
c000ed36:	6a 11                	push   0x11
c000ed38:	53                   	push   ebx
c000ed39:	e8 7e fe ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ed3e:	83 c4 20             	add    esp,0x20
c000ed41:	6a 00                	push   0x0
c000ed43:	68 cd 04 00 c0       	push   0xc00004cd
c000ed48:	6a 12                	push   0x12
c000ed4a:	53                   	push   ebx
c000ed4b:	e8 6c fe ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ed50:	6a 01                	push   0x1
c000ed52:	68 67 05 00 c0       	push   0xc0000567
c000ed57:	6a 60                	push   0x60
c000ed59:	53                   	push   ebx
c000ed5a:	e8 5d fe ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ed5f:	83 c4 20             	add    esp,0x20
c000ed62:	6a 00                	push   0x0
c000ed64:	68 6e 05 00 c0       	push   0xc000056e
c000ed69:	6a 20                	push   0x20
c000ed6b:	53                   	push   ebx
c000ed6c:	e8 4b fe ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ed71:	6a 00                	push   0x0
c000ed73:	68 59 05 00 c0       	push   0xc0000559
c000ed78:	6a 21                	push   0x21
c000ed7a:	53                   	push   ebx
c000ed7b:	e8 3c fe ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ed80:	83 c4 20             	add    esp,0x20
c000ed83:	6a 00                	push   0x0
c000ed85:	68 60 05 00 c0       	push   0xc0000560
c000ed8a:	6a 22                	push   0x22
c000ed8c:	53                   	push   ebx
c000ed8d:	e8 2a fe ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ed92:	6a 00                	push   0x0
c000ed94:	68 d7 04 00 c0       	push   0xc00004d7
c000ed99:	6a 23                	push   0x23
c000ed9b:	53                   	push   ebx
c000ed9c:	e8 1b fe ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000eda1:	83 c4 20             	add    esp,0x20
c000eda4:	6a 00                	push   0x0
c000eda6:	68 e1 04 00 c0       	push   0xc00004e1
c000edab:	6a 24                	push   0x24
c000edad:	53                   	push   ebx
c000edae:	e8 09 fe ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000edb3:	6a 00                	push   0x0
c000edb5:	68 eb 04 00 c0       	push   0xc00004eb
c000edba:	6a 25                	push   0x25
c000edbc:	53                   	push   ebx
c000edbd:	e8 fa fd ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000edc2:	83 c4 20             	add    esp,0x20
c000edc5:	6a 00                	push   0x0
c000edc7:	68 f5 04 00 c0       	push   0xc00004f5
c000edcc:	6a 26                	push   0x26
c000edce:	53                   	push   ebx
c000edcf:	e8 e8 fd ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000edd4:	6a 00                	push   0x0
c000edd6:	68 ff 04 00 c0       	push   0xc00004ff
c000eddb:	6a 27                	push   0x27
c000eddd:	53                   	push   ebx
c000edde:	e8 d9 fd ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ede3:	83 c4 20             	add    esp,0x20
c000ede6:	6a 00                	push   0x0
c000ede8:	68 09 05 00 c0       	push   0xc0000509
c000eded:	6a 28                	push   0x28
c000edef:	53                   	push   ebx
c000edf0:	e8 c7 fd ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000edf5:	6a 00                	push   0x0
c000edf7:	68 13 05 00 c0       	push   0xc0000513
c000edfc:	6a 29                	push   0x29
c000edfe:	53                   	push   ebx
c000edff:	e8 b8 fd ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ee04:	83 c4 20             	add    esp,0x20
c000ee07:	6a 00                	push   0x0
c000ee09:	68 1d 05 00 c0       	push   0xc000051d
c000ee0e:	6a 2a                	push   0x2a
c000ee10:	53                   	push   ebx
c000ee11:	e8 a6 fd ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ee16:	6a 00                	push   0x0
c000ee18:	68 27 05 00 c0       	push   0xc0000527
c000ee1d:	6a 2b                	push   0x2b
c000ee1f:	53                   	push   ebx
c000ee20:	e8 97 fd ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ee25:	83 c4 20             	add    esp,0x20
c000ee28:	6a 00                	push   0x0
c000ee2a:	68 31 05 00 c0       	push   0xc0000531
c000ee2f:	6a 2c                	push   0x2c
c000ee31:	53                   	push   ebx
c000ee32:	e8 85 fd ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ee37:	6a 00                	push   0x0
c000ee39:	68 3b 05 00 c0       	push   0xc000053b
c000ee3e:	6a 2d                	push   0x2d
c000ee40:	53                   	push   ebx
c000ee41:	e8 76 fd ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ee46:	83 c4 20             	add    esp,0x20
c000ee49:	6a 00                	push   0x0
c000ee4b:	68 45 05 00 c0       	push   0xc0000545
c000ee50:	6a 2e                	push   0x2e
c000ee52:	53                   	push   ebx
c000ee53:	e8 64 fd ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ee58:	6a 00                	push   0x0
c000ee5a:	68 4f 05 00 c0       	push   0xc000054f
c000ee5f:	6a 2f                	push   0x2f
c000ee61:	53                   	push   ebx
c000ee62:	e8 55 fd ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ee67:	83 c4 20             	add    esp,0x20
c000ee6a:	6a 00                	push   0x0
c000ee6c:	68 94 05 00 c0       	push   0xc0000594
c000ee71:	6a 30                	push   0x30
c000ee73:	53                   	push   ebx
c000ee74:	e8 43 fd ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ee79:	6a 00                	push   0x0
c000ee7b:	68 9e 05 00 c0       	push   0xc000059e
c000ee80:	6a 31                	push   0x31
c000ee82:	53                   	push   ebx
c000ee83:	e8 34 fd ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ee88:	83 c4 20             	add    esp,0x20
c000ee8b:	6a 00                	push   0x0
c000ee8d:	68 a8 05 00 c0       	push   0xc00005a8
c000ee92:	6a 32                	push   0x32
c000ee94:	53                   	push   ebx
c000ee95:	e8 22 fd ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000ee9a:	6a 00                	push   0x0
c000ee9c:	68 b2 05 00 c0       	push   0xc00005b2
c000eea1:	6a 33                	push   0x33
c000eea3:	53                   	push   ebx
c000eea4:	e8 13 fd ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000eea9:	83 c4 20             	add    esp,0x20
c000eeac:	6a 00                	push   0x0
c000eeae:	68 bc 05 00 c0       	push   0xc00005bc
c000eeb3:	6a 34                	push   0x34
c000eeb5:	53                   	push   ebx
c000eeb6:	e8 01 fd ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000eebb:	6a 00                	push   0x0
c000eebd:	68 c6 05 00 c0       	push   0xc00005c6
c000eec2:	6a 35                	push   0x35
c000eec4:	53                   	push   ebx
c000eec5:	e8 f2 fc ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000eeca:	83 c4 20             	add    esp,0x20
c000eecd:	6a 00                	push   0x0
c000eecf:	68 d0 05 00 c0       	push   0xc00005d0
c000eed4:	6a 36                	push   0x36
c000eed6:	53                   	push   ebx
c000eed7:	e8 e0 fc ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000eedc:	6a 00                	push   0x0
c000eede:	68 da 05 00 c0       	push   0xc00005da
c000eee3:	6a 37                	push   0x37
c000eee5:	53                   	push   ebx
c000eee6:	e8 d1 fc ff ff       	call   c000ebbc <IDT::addEntry(int, void (*)(), bool)>
c000eeeb:	83 c4 20             	add    esp,0x20
c000eeee:	e8 fe 24 00 00       	call   c00113f1 <Virt::getAKernelVAS()>
c000eef3:	52                   	push   edx
c000eef4:	6a 03                	push   0x3
c000eef6:	6a 02                	push   0x2
c000eef8:	50                   	push   eax
c000eef9:	e8 24 2b 00 00       	call   c0011a22 <VAS::allocatePages(int, int)>
c000eefe:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ef05:	89 c6                	mov    esi,eax
c000ef07:	e8 4a 32 00 00       	call   c0012156 <operator new(unsigned long)>
c000ef0c:	81 c6 00 20 00 00    	add    esi,0x2000
c000ef12:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef15:	89 c7                	mov    edi,eax
c000ef17:	e8 b6 1c 00 00       	call   c0010bd2 <TSS::TSS()>
c000ef1c:	83 c4 0c             	add    esp,0xc
c000ef1f:	68 75 04 00 c0       	push   0xc0000475
c000ef24:	56                   	push   esi
c000ef25:	57                   	push   edi
c000ef26:	e8 e7 1c 00 00       	call   c0010c12 <TSS::setup(unsigned long, unsigned long)>
c000ef2b:	59                   	pop    ecx
c000ef2c:	89 c6                	mov    esi,eax
c000ef2e:	5f                   	pop    edi
c000ef2f:	6a 00                	push   0x0
c000ef31:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ef35:	50                   	push   eax
c000ef36:	e8 db fb ff ff       	call   c000eb16 <IDTEntry::IDTEntry(bool)>
c000ef3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef3f:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ef44:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ef4b:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ef51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef55:	80 ce 05             	or     dh,0x5
c000ef58:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ef5b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ef5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef63:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ef66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef69:	e8 86 fc ff ff       	call   c000ebf4 <IDT::flush()>
c000ef6e:	83 c4 20             	add    esp,0x20
c000ef71:	5b                   	pop    ebx
c000ef72:	5e                   	pop    esi
c000ef73:	5f                   	pop    edi
c000ef74:	c3                   	ret    

c000ef75 <sbrk>:
c000ef75:	55                   	push   ebp
c000ef76:	57                   	push   edi
c000ef77:	56                   	push   esi
c000ef78:	53                   	push   ebx
c000ef79:	83 ec 1c             	sub    esp,0x1c
c000ef7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef80:	85 c0                	test   eax,eax
c000ef82:	74 3e                	je     c000efc2 <sbrk+0x4d>
c000ef84:	78 43                	js     c000efc9 <sbrk+0x54>
c000ef86:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c000ef8c:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000ef92:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000ef98:	83 e2 01             	and    edx,0x1
c000ef9b:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000ef9f:	8b 0d fc 93 02 c0    	mov    ecx,DWORD PTR ds:0xc00293fc
c000efa5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000efa9:	05 ff 0f 00 00       	add    eax,0xfff
c000efae:	89 c2                	mov    edx,eax
c000efb0:	78 2f                	js     c000efe1 <sbrk+0x6c>
c000efb2:	c1 fa 0c             	sar    edx,0xc
c000efb5:	89 d7                	mov    edi,edx
c000efb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000efbb:	be 00 00 00 00       	mov    esi,0x0
c000efc0:	eb 36                	jmp    c000eff8 <sbrk+0x83>
c000efc2:	a1 fc 93 02 c0       	mov    eax,ds:0xc00293fc
c000efc7:	eb 74                	jmp    c000f03d <sbrk+0xc8>
c000efc9:	83 ec 08             	sub    esp,0x8
c000efcc:	50                   	push   eax
c000efcd:	68 50 6b 02 c0       	push   0xc0026b50
c000efd2:	e8 6e 32 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000efd7:	83 c4 10             	add    esp,0x10
c000efda:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efdf:	eb 5c                	jmp    c000f03d <sbrk+0xc8>
c000efe1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000efe7:	eb c9                	jmp    c000efb2 <sbrk+0x3d>
c000efe9:	81 05 fc 93 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00293fc,0x1000
c000eff3:	46                   	inc    esi
c000eff4:	39 f7                	cmp    edi,esi
c000eff6:	74 34                	je     c000f02c <sbrk+0xb7>
c000eff8:	e8 f4 23 00 00       	call   c00113f1 <Virt::getAKernelVAS()>
c000effd:	89 c3                	mov    ebx,eax
c000efff:	8b 2d fc 93 02 c0    	mov    ebp,DWORD PTR ds:0xc00293fc
c000f005:	e8 be 06 00 00       	call   c000f6c8 <Phys::allocatePage()>
c000f00a:	68 01 04 00 00       	push   0x401
c000f00f:	55                   	push   ebp
c000f010:	50                   	push   eax
c000f011:	53                   	push   ebx
c000f012:	e8 0b 29 00 00       	call   c0011922 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f017:	83 c4 10             	add    esp,0x10
c000f01a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f01f:	74 c8                	je     c000efe9 <sbrk+0x74>
c000f021:	8b 1d fc 93 02 c0    	mov    ebx,DWORD PTR ds:0xc00293fc
c000f027:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f02a:	eb bd                	jmp    c000efe9 <sbrk+0x74>
c000f02c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f031:	75 12                	jne    c000f045 <sbrk+0xd0>
c000f033:	0f 20 d8             	mov    eax,cr3
c000f036:	0f 22 d8             	mov    cr3,eax
c000f039:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f03d:	83 c4 1c             	add    esp,0x1c
c000f040:	5b                   	pop    ebx
c000f041:	5e                   	pop    esi
c000f042:	5f                   	pop    edi
c000f043:	5d                   	pop    ebp
c000f044:	c3                   	ret    
c000f045:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f049:	89 cb                	mov    ebx,ecx
c000f04b:	c1 eb 0a             	shr    ebx,0xa
c000f04e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f054:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f05a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f05e:	c1 e0 0c             	shl    eax,0xc
c000f061:	01 c8                	add    eax,ecx
c000f063:	c1 e8 0a             	shr    eax,0xa
c000f066:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f06b:	2d 00 00 40 00       	sub    eax,0x400000
c000f070:	39 c3                	cmp    ebx,eax
c000f072:	77 c5                	ja     c000f039 <sbrk+0xc4>
c000f074:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f077:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f07d:	39 d8                	cmp    eax,ebx
c000f07f:	73 f3                	jae    c000f074 <sbrk+0xff>
c000f081:	eb b6                	jmp    c000f039 <sbrk+0xc4>

c000f083 <mmap>:
c000f083:	83 ec 18             	sub    esp,0x18
c000f086:	68 80 6b 02 c0       	push   0xc0026b80
c000f08b:	e8 33 99 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c000f090:	b8 00 00 00 00       	mov    eax,0x0
c000f095:	83 c4 1c             	add    esp,0x1c
c000f098:	c3                   	ret    

c000f099 <munmap>:
c000f099:	83 ec 18             	sub    esp,0x18
c000f09c:	68 85 6b 02 c0       	push   0xc0026b85
c000f0a1:	e8 1d 99 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c000f0a6:	b8 00 00 00 00       	mov    eax,0x0
c000f0ab:	83 c4 1c             	add    esp,0x1c
c000f0ae:	c3                   	ret    

c000f0af <liballoc_lock()>:
c000f0af:	83 ec 0c             	sub    esp,0xc
c000f0b2:	e8 55 c8 00 00       	call   c001b90c <lockScheduler()>
c000f0b7:	b8 00 00 00 00       	mov    eax,0x0
c000f0bc:	83 c4 0c             	add    esp,0xc
c000f0bf:	c3                   	ret    

c000f0c0 <liballoc_unlock()>:
c000f0c0:	83 ec 0c             	sub    esp,0xc
c000f0c3:	e8 46 c8 00 00       	call   c001b90e <unlockScheduler()>
c000f0c8:	b8 00 00 00 00       	mov    eax,0x0
c000f0cd:	83 c4 0c             	add    esp,0xc
c000f0d0:	c3                   	ret    

c000f0d1 <liballoc_alloc(int)>:
c000f0d1:	83 ec 0c             	sub    esp,0xc
c000f0d4:	e8 18 23 00 00       	call   c00113f1 <Virt::getAKernelVAS()>
c000f0d9:	83 ec 04             	sub    esp,0x4
c000f0dc:	6a 01                	push   0x1
c000f0de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0e2:	50                   	push   eax
c000f0e3:	e8 3a 29 00 00       	call   c0011a22 <VAS::allocatePages(int, int)>
c000f0e8:	83 c4 1c             	add    esp,0x1c
c000f0eb:	c3                   	ret    

c000f0ec <liballoc_free(void*, int)>:
c000f0ec:	83 ec 0c             	sub    esp,0xc
c000f0ef:	e8 fd 22 00 00       	call   c00113f1 <Virt::getAKernelVAS()>
c000f0f4:	83 ec 08             	sub    esp,0x8
c000f0f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0fb:	50                   	push   eax
c000f0fc:	e8 dd 25 00 00       	call   c00116de <VAS::freeAllocatedPages(unsigned long)>
c000f101:	b8 00 00 00 00       	mov    eax,0x0
c000f106:	83 c4 1c             	add    esp,0x1c
c000f109:	c3                   	ret    

c000f10a <realloc>:
c000f10a:	83 ec 14             	sub    esp,0x14
c000f10d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f115:	e8 dc 22 ff ff       	call   c00013f6 <dlrealloc>
c000f11a:	83 c4 1c             	add    esp,0x1c
c000f11d:	c3                   	ret    

c000f11e <malloc>:
c000f11e:	83 ec 18             	sub    esp,0x18
c000f121:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f125:	e8 8f 1d ff ff       	call   c0000eb9 <dlmalloc>
c000f12a:	83 c4 1c             	add    esp,0x1c
c000f12d:	c3                   	ret    

c000f12e <free>:
c000f12e:	83 ec 18             	sub    esp,0x18
c000f131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f135:	e8 24 1a ff ff       	call   c0000b5e <dlfree>
c000f13a:	83 c4 1c             	add    esp,0x1c
c000f13d:	c3                   	ret    

c000f13e <rfree>:
c000f13e:	83 ec 18             	sub    esp,0x18
c000f141:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f145:	e8 e4 ff ff ff       	call   c000f12e <free>
c000f14a:	83 c4 1c             	add    esp,0x1c
c000f14d:	c3                   	ret    

c000f14e <calloc>:
c000f14e:	56                   	push   esi
c000f14f:	53                   	push   ebx
c000f150:	83 ec 10             	sub    esp,0x10
c000f153:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f157:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f15c:	53                   	push   ebx
c000f15d:	e8 bc ff ff ff       	call   c000f11e <malloc>
c000f162:	89 c6                	mov    esi,eax
c000f164:	83 c4 0c             	add    esp,0xc
c000f167:	53                   	push   ebx
c000f168:	6a 00                	push   0x0
c000f16a:	50                   	push   eax
c000f16b:	e8 0d 15 ff ff       	call   c000067d <memset>
c000f170:	89 f0                	mov    eax,esi
c000f172:	83 c4 14             	add    esp,0x14
c000f175:	5b                   	pop    ebx
c000f176:	5e                   	pop    esi
c000f177:	c3                   	ret    

c000f178 <hwTextMode_loadInData(VgaText*)>:
c000f178:	57                   	push   edi
c000f179:	56                   	push   esi
c000f17a:	53                   	push   ebx
c000f17b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f17f:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f185:	85 c0                	test   eax,eax
c000f187:	7e 30                	jle    c000f1b9 <hwTextMode_loadInData(VgaText*)+0x41>
c000f189:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f18c:	31 f6                	xor    esi,esi
c000f18e:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f191:	31 c0                	xor    eax,eax
c000f193:	c1 e1 05             	shl    ecx,0x5
c000f196:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f19c:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f1a0:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f1a4:	40                   	inc    eax
c000f1a5:	83 f8 50             	cmp    eax,0x50
c000f1a8:	75 f2                	jne    c000f19c <hwTextMode_loadInData(VgaText*)+0x24>
c000f1aa:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f1b0:	46                   	inc    esi
c000f1b1:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f1b7:	7f d5                	jg     c000f18e <hwTextMode_loadInData(VgaText*)+0x16>
c000f1b9:	5b                   	pop    ebx
c000f1ba:	5e                   	pop    esi
c000f1bb:	5f                   	pop    edi
c000f1bc:	c3                   	ret    

c000f1bd <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f1bd:	56                   	push   esi
c000f1be:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f1c3:	53                   	push   ebx
c000f1c4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f1c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f1cc:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f1d2:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f1d8:	c1 e0 04             	shl    eax,0x4
c000f1db:	83 e6 0f             	and    esi,0xf
c000f1de:	0f b6 c0             	movzx  eax,al
c000f1e1:	41                   	inc    ecx
c000f1e2:	09 f0                	or     eax,esi
c000f1e4:	83 c2 02             	add    edx,0x2
c000f1e7:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f1eb:	c1 e0 08             	shl    eax,0x8
c000f1ee:	09 f0                	or     eax,esi
c000f1f0:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f1f4:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f1fa:	75 d0                	jne    c000f1cc <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f1fc:	5b                   	pop    ebx
c000f1fd:	5e                   	pop    esi
c000f1fe:	c3                   	ret    

c000f1ff <hwTextMode_showCursor(VgaText*, bool)>:
c000f1ff:	56                   	push   esi
c000f200:	53                   	push   ebx
c000f201:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f206:	74 38                	je     c000f240 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f208:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f20d:	b0 0a                	mov    al,0xa
c000f20f:	89 da                	mov    edx,ebx
c000f211:	ee                   	out    dx,al
c000f212:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f217:	89 ca                	mov    edx,ecx
c000f219:	ec                   	in     al,dx
c000f21a:	b2 0f                	mov    dl,0xf
c000f21c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f220:	83 e0 c0             	and    eax,0xffffffc0
c000f223:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f229:	09 d0                	or     eax,edx
c000f22b:	89 ca                	mov    edx,ecx
c000f22d:	ee                   	out    dx,al
c000f22e:	b0 0b                	mov    al,0xb
c000f230:	89 da                	mov    edx,ebx
c000f232:	ee                   	out    dx,al
c000f233:	89 ca                	mov    edx,ecx
c000f235:	ec                   	in     al,dx
c000f236:	83 e0 e0             	and    eax,0xffffffe0
c000f239:	83 c8 0f             	or     eax,0xf
c000f23c:	ee                   	out    dx,al
c000f23d:	5b                   	pop    ebx
c000f23e:	5e                   	pop    esi
c000f23f:	c3                   	ret    
c000f240:	b0 0a                	mov    al,0xa
c000f242:	ba d4 03 00 00       	mov    edx,0x3d4
c000f247:	ee                   	out    dx,al
c000f248:	b0 20                	mov    al,0x20
c000f24a:	ba d5 03 00 00       	mov    edx,0x3d5
c000f24f:	ee                   	out    dx,al
c000f250:	5b                   	pop    ebx
c000f251:	5e                   	pop    esi
c000f252:	c3                   	ret    

c000f253 <hwTextMode_update(VgaText*)>:
c000f253:	c3                   	ret    

c000f254 <hwTextMode_updateCursor(VgaText*)>:
c000f254:	56                   	push   esi
c000f255:	b9 19 00 00 00       	mov    ecx,0x19
c000f25a:	53                   	push   ebx
c000f25b:	be d4 03 00 00       	mov    esi,0x3d4
c000f260:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f264:	89 f2                	mov    edx,esi
c000f266:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f26c:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f272:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f275:	c1 e1 04             	shl    ecx,0x4
c000f278:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f27e:	b0 0f                	mov    al,0xf
c000f280:	ee                   	out    dx,al
c000f281:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f286:	88 c8                	mov    al,cl
c000f288:	89 da                	mov    edx,ebx
c000f28a:	ee                   	out    dx,al
c000f28b:	b0 0e                	mov    al,0xe
c000f28d:	89 f2                	mov    edx,esi
c000f28f:	ee                   	out    dx,al
c000f290:	89 c8                	mov    eax,ecx
c000f292:	89 da                	mov    edx,ebx
c000f294:	66 c1 e8 08          	shr    ax,0x8
c000f298:	ee                   	out    dx,al
c000f299:	5b                   	pop    ebx
c000f29a:	5e                   	pop    esi
c000f29b:	c3                   	ret    

c000f29c <hwTextMode_disableBlink(VgaText*, bool)>:
c000f29c:	ba da 03 00 00       	mov    edx,0x3da
c000f2a1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f2a6:	75 18                	jne    c000f2c0 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f2a8:	ec                   	in     al,dx
c000f2a9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2ae:	b0 30                	mov    al,0x30
c000f2b0:	89 ca                	mov    edx,ecx
c000f2b2:	ee                   	out    dx,al
c000f2b3:	ba c1 03 00 00       	mov    edx,0x3c1
c000f2b8:	ec                   	in     al,dx
c000f2b9:	83 c8 08             	or     eax,0x8
c000f2bc:	89 ca                	mov    edx,ecx
c000f2be:	ee                   	out    dx,al
c000f2bf:	c3                   	ret    
c000f2c0:	ec                   	in     al,dx
c000f2c1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2c6:	b0 30                	mov    al,0x30
c000f2c8:	89 ca                	mov    edx,ecx
c000f2ca:	ee                   	out    dx,al
c000f2cb:	ba c1 03 00 00       	mov    edx,0x3c1
c000f2d0:	ec                   	in     al,dx
c000f2d1:	83 e0 f7             	and    eax,0xfffffff7
c000f2d4:	89 ca                	mov    edx,ecx
c000f2d6:	ee                   	out    dx,al
c000f2d7:	c3                   	ret    

c000f2d8 <hwTextMode_scrollScreen(VgaText*)>:
c000f2d8:	55                   	push   ebp
c000f2d9:	bd 02 00 00 00       	mov    ebp,0x2
c000f2de:	57                   	push   edi
c000f2df:	56                   	push   esi
c000f2e0:	53                   	push   ebx
c000f2e1:	83 ec 1c             	sub    esp,0x1c
c000f2e4:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f2ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2f0:	31 c0                	xor    eax,eax
c000f2f2:	eb 0b                	jmp    c000f2ff <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f2f4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f2fa:	74 57                	je     c000f353 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f2fc:	43                   	inc    ebx
c000f2fd:	89 f0                	mov    eax,esi
c000f2ff:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f305:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f30b:	88 13                	mov    BYTE PTR [ebx],dl
c000f30d:	8d 70 01             	lea    esi,[eax+0x1]
c000f310:	83 fd 18             	cmp    ebp,0x18
c000f313:	75 df                	jne    c000f2f4 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f315:	a8 01                	test   al,0x1
c000f317:	75 13                	jne    c000f32c <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f319:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f31c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f322:	75 d8                	jne    c000f2fc <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f324:	83 c4 1c             	add    esp,0x1c
c000f327:	5b                   	pop    ebx
c000f328:	5e                   	pop    esi
c000f329:	5f                   	pop    edi
c000f32a:	5d                   	pop    ebp
c000f32b:	c3                   	ret    
c000f32c:	83 ec 08             	sub    esp,0x8
c000f32f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f333:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f33a:	50                   	push   eax
c000f33b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f33f:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f346:	50                   	push   eax
c000f347:	e8 66 0b 00 00       	call   c000feb2 <VgaText::combineColours(unsigned char, unsigned char)>
c000f34c:	83 c4 10             	add    esp,0x10
c000f34f:	88 07                	mov    BYTE PTR [edi],al
c000f351:	eb c9                	jmp    c000f31c <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f353:	45                   	inc    ebp
c000f354:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f35c:	eb 8e                	jmp    c000f2ec <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f35e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f35e:	56                   	push   esi
c000f35f:	53                   	push   ebx
c000f360:	83 ec 0c             	sub    esp,0xc
c000f363:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f367:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f36b:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f370:	50                   	push   eax
c000f371:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f376:	50                   	push   eax
c000f377:	e8 36 0b 00 00       	call   c000feb2 <VgaText::combineColours(unsigned char, unsigned char)>
c000f37c:	5a                   	pop    edx
c000f37d:	0f b6 c0             	movzx  eax,al
c000f380:	59                   	pop    ecx
c000f381:	50                   	push   eax
c000f382:	89 f0                	mov    eax,esi
c000f384:	0f be f0             	movsx  esi,al
c000f387:	56                   	push   esi
c000f388:	e8 cb 0b 00 00       	call   c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>
c000f38d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f391:	ba 19 00 00 00       	mov    edx,0x19
c000f396:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f39c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f39f:	8d 14 92             	lea    edx,[edx+edx*4]
c000f3a2:	c1 e1 04             	shl    ecx,0x4
c000f3a5:	c1 e2 04             	shl    edx,0x4
c000f3a8:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f3ac:	01 ca                	add    edx,ecx
c000f3ae:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f3b6:	83 c4 14             	add    esp,0x14
c000f3b9:	5b                   	pop    ebx
c000f3ba:	5e                   	pop    esi
c000f3bb:	c3                   	ret    

c000f3bc <setupTextMode()>:
c000f3bc:	c7 05 18 a5 02 c0 9c f2 00 c0 	mov    DWORD PTR ds:0xc002a518,0xc000f29c
c000f3c6:	c7 05 04 a5 02 c0 78 f1 00 c0 	mov    DWORD PTR ds:0xc002a504,0xc000f178
c000f3d0:	c7 05 00 a5 02 c0 bd f1 00 c0 	mov    DWORD PTR ds:0xc002a500,0xc000f1bd
c000f3da:	c7 05 0c a5 02 c0 d8 f2 00 c0 	mov    DWORD PTR ds:0xc002a50c,0xc000f2d8
c000f3e4:	c7 05 14 a5 02 c0 ff f1 00 c0 	mov    DWORD PTR ds:0xc002a514,0xc000f1ff
c000f3ee:	c7 05 08 a5 02 c0 53 f2 00 c0 	mov    DWORD PTR ds:0xc002a508,0xc000f253
c000f3f8:	c7 05 10 a5 02 c0 54 f2 00 c0 	mov    DWORD PTR ds:0xc002a510,0xc000f254
c000f402:	c7 05 1c a5 02 c0 5e f3 00 c0 	mov    DWORD PTR ds:0xc002a51c,0xc000f35e
c000f40c:	c3                   	ret    

c000f40d <kernel_main>:
c000f40d:	57                   	push   edi
c000f40e:	bf f9 03 00 00       	mov    edi,0x3f9
c000f413:	56                   	push   esi
c000f414:	31 f6                	xor    esi,esi
c000f416:	53                   	push   ebx
c000f417:	83 ec 10             	sub    esp,0x10
c000f41a:	e8 ed 08 00 00       	call   c000fd0c <installVgaTextImplementation()>
c000f41f:	e8 98 ff ff ff       	call   c000f3bc <setupTextMode()>
c000f424:	89 f0                	mov    eax,esi
c000f426:	89 fa                	mov    edx,edi
c000f428:	ee                   	out    dx,al
c000f429:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f42e:	b0 80                	mov    al,0x80
c000f430:	89 da                	mov    edx,ebx
c000f432:	ee                   	out    dx,al
c000f433:	b1 03                	mov    cl,0x3
c000f435:	ba f8 03 00 00       	mov    edx,0x3f8
c000f43a:	88 c8                	mov    al,cl
c000f43c:	ee                   	out    dx,al
c000f43d:	89 f0                	mov    eax,esi
c000f43f:	89 fa                	mov    edx,edi
c000f441:	ee                   	out    dx,al
c000f442:	88 c8                	mov    al,cl
c000f444:	89 da                	mov    edx,ebx
c000f446:	ee                   	out    dx,al
c000f447:	b0 c7                	mov    al,0xc7
c000f449:	ba fa 03 00 00       	mov    edx,0x3fa
c000f44e:	ee                   	out    dx,al
c000f44f:	b0 0b                	mov    al,0xb
c000f451:	ba fc 03 00 00       	mov    edx,0x3fc
c000f456:	ee                   	out    dx,al
c000f457:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f45c:	83 ec 0c             	sub    esp,0xc
c000f45f:	05 ff 0f 00 00       	add    eax,0xfff
c000f464:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f469:	50                   	push   eax
c000f46a:	e8 59 03 00 00       	call   c000f7c8 <Phys::physicalMemorySetup(unsigned int)>
c000f46f:	e8 fe 1e 00 00       	call   c0011372 <Virt::virtualMemorySetup()>
c000f474:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f47a:	83 c4 10             	add    esp,0x10
c000f47d:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f483:	75 0e                	jne    c000f493 <kernel_main+0x86>
c000f485:	89 d8                	mov    eax,ebx
c000f487:	25 48 03 00 00       	and    eax,0x348
c000f48c:	3d 00 03 00 00       	cmp    eax,0x300
c000f491:	74 10                	je     c000f4a3 <kernel_main+0x96>
c000f493:	83 ec 0c             	sub    esp,0xc
c000f496:	68 db 80 02 c0       	push   0xc00280db
c000f49b:	e8 23 95 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c000f4a0:	83 c4 10             	add    esp,0x10
c000f4a3:	83 ec 0c             	sub    esp,0xc
c000f4a6:	89 1d 80 a4 02 c0    	mov    DWORD PTR ds:0xc002a480,ebx
c000f4ac:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f4b0:	53                   	push   ebx
c000f4b1:	e8 66 20 00 00       	call   c001151c <VAS::VAS()>
c000f4b6:	89 1d c4 a5 02 c0    	mov    DWORD PTR ds:0xc002a5c4,ebx
c000f4bc:	e8 5f 0b ff ff       	call   c0000020 <callGlobalConstructors>
c000f4c1:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f4c8:	e8 89 2c 00 00       	call   c0012156 <operator new(unsigned long)>
c000f4cd:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4d0:	89 c6                	mov    esi,eax
c000f4d2:	e8 57 ea ff ff       	call   c000df2e <Computer::Computer()>
c000f4d7:	6a 00                	push   0x0
c000f4d9:	89 35 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,esi
c000f4df:	6a 00                	push   0x0
c000f4e1:	6a 00                	push   0x0
c000f4e3:	56                   	push   esi
c000f4e4:	e8 7f f2 ff ff       	call   c000e768 <Computer::open(int, int, void*)>
c000f4e9:	83 c4 14             	add    esp,0x14
c000f4ec:	53                   	push   ebx
c000f4ed:	e8 c4 22 00 00       	call   c00117b6 <VAS::~VAS()>
c000f4f2:	c7 04 24 8c 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b8c
c000f4f9:	e8 c5 94 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c000f4fe:	83 c4 20             	add    esp,0x20
c000f501:	5b                   	pop    ebx
c000f502:	5e                   	pop    esi
c000f503:	5f                   	pop    edi
c000f504:	c3                   	ret    

c000f505 <Phys::allocateDMA(unsigned long)>:
c000f505:	55                   	push   ebp
c000f506:	31 d2                	xor    edx,edx
c000f508:	57                   	push   edi
c000f509:	31 ed                	xor    ebp,ebp
c000f50b:	56                   	push   esi
c000f50c:	31 c9                	xor    ecx,ecx
c000f50e:	53                   	push   ebx
c000f50f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f513:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f519:	31 c0                	xor    eax,eax
c000f51b:	c1 ee 0c             	shr    esi,0xc
c000f51e:	eb 17                	jmp    c000f537 <Phys::allocateDMA(unsigned long)+0x32>
c000f520:	85 c9                	test   ecx,ecx
c000f522:	75 04                	jne    c000f528 <Phys::allocateDMA(unsigned long)+0x23>
c000f524:	89 d5                	mov    ebp,edx
c000f526:	89 d0                	mov    eax,edx
c000f528:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f52b:	39 de                	cmp    esi,ebx
c000f52d:	74 20                	je     c000f54f <Phys::allocateDMA(unsigned long)+0x4a>
c000f52f:	42                   	inc    edx
c000f530:	89 d9                	mov    ecx,ebx
c000f532:	83 fa 2f             	cmp    edx,0x2f
c000f535:	7f 11                	jg     c000f548 <Phys::allocateDMA(unsigned long)+0x43>
c000f537:	80 ba c0 a4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd5b40],0x0
c000f53e:	74 e0                	je     c000f520 <Phys::allocateDMA(unsigned long)+0x1b>
c000f540:	31 c9                	xor    ecx,ecx
c000f542:	42                   	inc    edx
c000f543:	83 fa 2f             	cmp    edx,0x2f
c000f546:	7e ef                	jle    c000f537 <Phys::allocateDMA(unsigned long)+0x32>
c000f548:	5b                   	pop    ebx
c000f549:	31 c0                	xor    eax,eax
c000f54b:	5e                   	pop    esi
c000f54c:	5f                   	pop    edi
c000f54d:	5d                   	pop    ebp
c000f54e:	c3                   	ret    
c000f54f:	8d 14 30             	lea    edx,[eax+esi*1]
c000f552:	89 d7                	mov    edi,edx
c000f554:	4f                   	dec    edi
c000f555:	79 03                	jns    c000f55a <Phys::allocateDMA(unsigned long)+0x55>
c000f557:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f55a:	c1 ff 04             	sar    edi,0x4
c000f55d:	89 c2                	mov    edx,eax
c000f55f:	c1 fa 04             	sar    edx,0x4
c000f562:	39 fa                	cmp    edx,edi
c000f564:	75 2f                	jne    c000f595 <Phys::allocateDMA(unsigned long)+0x90>
c000f566:	85 db                	test   ebx,ebx
c000f568:	74 1a                	je     c000f584 <Phys::allocateDMA(unsigned long)+0x7f>
c000f56a:	be c0 a4 02 c0       	mov    esi,0xc002a4c0
c000f56f:	8d 90 c0 a4 02 c0    	lea    edx,[eax-0x3ffd5b40]
c000f575:	f7 d6                	not    esi
c000f577:	29 c6                	sub    esi,eax
c000f579:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f57c:	42                   	inc    edx
c000f57d:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f580:	39 d9                	cmp    ecx,ebx
c000f582:	7f f5                	jg     c000f579 <Phys::allocateDMA(unsigned long)+0x74>
c000f584:	85 ff                	test   edi,edi
c000f586:	74 13                	je     c000f59b <Phys::allocateDMA(unsigned long)+0x96>
c000f588:	5b                   	pop    ebx
c000f589:	05 50 20 0c 00       	add    eax,0xc2050
c000f58e:	5e                   	pop    esi
c000f58f:	c1 e0 0c             	shl    eax,0xc
c000f592:	5f                   	pop    edi
c000f593:	5d                   	pop    ebp
c000f594:	c3                   	ret    
c000f595:	89 ea                	mov    edx,ebp
c000f597:	31 c9                	xor    ecx,ecx
c000f599:	eb a7                	jmp    c000f542 <Phys::allocateDMA(unsigned long)+0x3d>
c000f59b:	5b                   	pop    ebx
c000f59c:	c1 e0 0c             	shl    eax,0xc
c000f59f:	5e                   	pop    esi
c000f5a0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f5a5:	5f                   	pop    edi
c000f5a6:	5d                   	pop    ebp
c000f5a7:	c3                   	ret    

c000f5a8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f5a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f5ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f5b0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f5b6:	c1 e9 0c             	shr    ecx,0xc
c000f5b9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f5be:	76 25                	jbe    c000f5e5 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f5c0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f5c5:	c1 e8 0c             	shr    eax,0xc
c000f5c8:	8d 50 10             	lea    edx,[eax+0x10]
c000f5cb:	85 c9                	test   ecx,ecx
c000f5cd:	74 15                	je     c000f5e4 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f5cf:	8d 82 c0 a4 02 c0    	lea    eax,[edx-0x3ffd5b40]
c000f5d5:	8d 94 11 c0 a4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd5b40]
c000f5dc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f5df:	40                   	inc    eax
c000f5e0:	39 d0                	cmp    eax,edx
c000f5e2:	75 f8                	jne    c000f5dc <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f5e4:	c3                   	ret    
c000f5e5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f5eb:	c1 ea 0c             	shr    edx,0xc
c000f5ee:	eb db                	jmp    c000f5cb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f5f0 <Phys::setPageState(unsigned long, bool)>:
c000f5f0:	56                   	push   esi
c000f5f1:	ba 01 00 00 00       	mov    edx,0x1
c000f5f6:	53                   	push   ebx
c000f5f7:	8b 35 00 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029400
c000f5fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f601:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f605:	89 c8                	mov    eax,ecx
c000f607:	83 e1 07             	and    ecx,0x7
c000f60a:	c1 e8 03             	shr    eax,0x3
c000f60d:	d3 e3                	shl    ebx,cl
c000f60f:	01 c6                	add    esi,eax
c000f611:	d3 e2                	shl    edx,cl
c000f613:	f7 d2                	not    edx
c000f615:	20 16                	and    BYTE PTR [esi],dl
c000f617:	03 05 00 94 02 c0    	add    eax,DWORD PTR ds:0xc0029400
c000f61d:	08 18                	or     BYTE PTR [eax],bl
c000f61f:	5b                   	pop    ebx
c000f620:	5e                   	pop    esi
c000f621:	c3                   	ret    

c000f622 <Phys::getPageState(unsigned long)>:
c000f622:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f626:	8b 15 00 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029400
c000f62c:	89 c8                	mov    eax,ecx
c000f62e:	83 e1 07             	and    ecx,0x7
c000f631:	c1 e8 03             	shr    eax,0x3
c000f634:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f638:	d3 f8                	sar    eax,cl
c000f63a:	83 e0 01             	and    eax,0x1
c000f63d:	c3                   	ret    

c000f63e <Phys::freePage(unsigned long)>:
c000f63e:	53                   	push   ebx
c000f63f:	83 ec 08             	sub    esp,0x8
c000f642:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f646:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f64c:	76 57                	jbe    c000f6a5 <Phys::freePage(unsigned long)+0x67>
c000f64e:	c1 eb 0c             	shr    ebx,0xc
c000f651:	53                   	push   ebx
c000f652:	e8 cb ff ff ff       	call   c000f622 <Phys::getPageState(unsigned long)>
c000f657:	5a                   	pop    edx
c000f658:	84 c0                	test   al,al
c000f65a:	74 5b                	je     c000f6b7 <Phys::freePage(unsigned long)+0x79>
c000f65c:	a1 ac a4 02 c0       	mov    eax,ds:0xc002a4ac
c000f661:	48                   	dec    eax
c000f662:	a3 ac a4 02 c0       	mov    ds:0xc002a4ac,eax
c000f667:	8d 04 80             	lea    eax,[eax+eax*4]
c000f66a:	8d 04 80             	lea    eax,[eax+eax*4]
c000f66d:	c1 e0 02             	shl    eax,0x2
c000f670:	99                   	cdq    
c000f671:	f7 3d b0 a4 02 c0    	idiv   DWORD PTR ds:0xc002a4b0
c000f677:	39 05 a8 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4a8,eax
c000f67d:	75 13                	jne    c000f692 <Phys::freePage(unsigned long)+0x54>
c000f67f:	83 ec 08             	sub    esp,0x8
c000f682:	6a 00                	push   0x0
c000f684:	53                   	push   ebx
c000f685:	e8 66 ff ff ff       	call   c000f5f0 <Phys::setPageState(unsigned long, bool)>
c000f68a:	83 c4 10             	add    esp,0x10
c000f68d:	83 c4 08             	add    esp,0x8
c000f690:	5b                   	pop    ebx
c000f691:	c3                   	ret    
c000f692:	83 ec 0c             	sub    esp,0xc
c000f695:	a3 a8 a4 02 c0       	mov    ds:0xc002a4a8,eax
c000f69a:	50                   	push   eax
c000f69b:	e8 00 0a 00 00       	call   c00100a0 <VgaText::updateRAMUsageDisplay(int)>
c000f6a0:	83 c4 10             	add    esp,0x10
c000f6a3:	eb da                	jmp    c000f67f <Phys::freePage(unsigned long)+0x41>
c000f6a5:	68 00 10 00 00       	push   0x1000
c000f6aa:	53                   	push   ebx
c000f6ab:	e8 f8 fe ff ff       	call   c000f5a8 <Phys::freeDMA(unsigned long, unsigned long)>
c000f6b0:	59                   	pop    ecx
c000f6b1:	5b                   	pop    ebx
c000f6b2:	83 c4 08             	add    esp,0x8
c000f6b5:	5b                   	pop    ebx
c000f6b6:	c3                   	ret    
c000f6b7:	c7 44 24 10 a7 6b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026ba7
c000f6bf:	83 c4 08             	add    esp,0x8
c000f6c2:	5b                   	pop    ebx
c000f6c3:	e9 fb 92 00 00       	jmp    c00189c3 <Krnl::panic(char const*)>

c000f6c8 <Phys::allocatePage()>:
c000f6c8:	56                   	push   esi
c000f6c9:	53                   	push   ebx
c000f6ca:	51                   	push   ecx
c000f6cb:	8b 35 a0 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a4a0
c000f6d1:	89 f3                	mov    ebx,esi
c000f6d3:	eb 0a                	jmp    c000f6df <Phys::allocatePage()+0x17>
c000f6d5:	89 1d a0 a4 02 c0    	mov    DWORD PTR ds:0xc002a4a0,ebx
c000f6db:	39 de                	cmp    esi,ebx
c000f6dd:	74 24                	je     c000f703 <Phys::allocatePage()+0x3b>
c000f6df:	53                   	push   ebx
c000f6e0:	e8 3d ff ff ff       	call   c000f622 <Phys::getPageState(unsigned long)>
c000f6e5:	5a                   	pop    edx
c000f6e6:	84 c0                	test   al,al
c000f6e8:	74 5a                	je     c000f744 <Phys::allocatePage()+0x7c>
c000f6ea:	43                   	inc    ebx
c000f6eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f6f1:	75 e2                	jne    c000f6d5 <Phys::allocatePage()+0xd>
c000f6f3:	31 db                	xor    ebx,ebx
c000f6f5:	c7 05 a0 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4a0,0x0
c000f6ff:	39 de                	cmp    esi,ebx
c000f701:	75 dc                	jne    c000f6df <Phys::allocatePage()+0x17>
c000f703:	83 ec 0c             	sub    esp,0xc
c000f706:	68 bd 6b 02 c0       	push   0xc0026bbd
c000f70b:	e8 35 2b 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000f710:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000f717:	e8 e9 fd ff ff       	call   c000f505 <Phys::allocateDMA(unsigned long)>
c000f71c:	83 c4 10             	add    esp,0x10
c000f71f:	85 c0                	test   eax,eax
c000f721:	75 56                	jne    c000f779 <Phys::allocatePage()+0xb1>
c000f723:	83 ec 0c             	sub    esp,0xc
c000f726:	68 ce 6b 02 c0       	push   0xc0026bce
c000f72b:	e8 93 92 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c000f730:	83 c4 10             	add    esp,0x10
c000f733:	8b 1d a0 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a4a0
c000f739:	53                   	push   ebx
c000f73a:	e8 e3 fe ff ff       	call   c000f622 <Phys::getPageState(unsigned long)>
c000f73f:	5a                   	pop    edx
c000f740:	84 c0                	test   al,al
c000f742:	75 a6                	jne    c000f6ea <Phys::allocatePage()+0x22>
c000f744:	6a 01                	push   0x1
c000f746:	53                   	push   ebx
c000f747:	e8 a4 fe ff ff       	call   c000f5f0 <Phys::setPageState(unsigned long, bool)>
c000f74c:	a1 ac a4 02 c0       	mov    eax,ds:0xc002a4ac
c000f751:	59                   	pop    ecx
c000f752:	40                   	inc    eax
c000f753:	5b                   	pop    ebx
c000f754:	a3 ac a4 02 c0       	mov    ds:0xc002a4ac,eax
c000f759:	8d 04 80             	lea    eax,[eax+eax*4]
c000f75c:	8d 04 80             	lea    eax,[eax+eax*4]
c000f75f:	c1 e0 02             	shl    eax,0x2
c000f762:	99                   	cdq    
c000f763:	f7 3d b0 a4 02 c0    	idiv   DWORD PTR ds:0xc002a4b0
c000f769:	39 05 a8 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4a8,eax
c000f76f:	75 0c                	jne    c000f77d <Phys::allocatePage()+0xb5>
c000f771:	a1 a0 a4 02 c0       	mov    eax,ds:0xc002a4a0
c000f776:	c1 e0 0c             	shl    eax,0xc
c000f779:	5a                   	pop    edx
c000f77a:	5b                   	pop    ebx
c000f77b:	5e                   	pop    esi
c000f77c:	c3                   	ret    
c000f77d:	83 ec 0c             	sub    esp,0xc
c000f780:	a3 a8 a4 02 c0       	mov    ds:0xc002a4a8,eax
c000f785:	50                   	push   eax
c000f786:	e8 15 09 00 00       	call   c00100a0 <VgaText::updateRAMUsageDisplay(int)>
c000f78b:	83 c4 10             	add    esp,0x10
c000f78e:	eb e1                	jmp    c000f771 <Phys::allocatePage()+0xa9>

c000f790 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f790:	56                   	push   esi
c000f791:	53                   	push   ebx
c000f792:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f796:	39 1d a4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4a4,ebx
c000f79c:	73 06                	jae    c000f7a4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f79e:	89 1d a4 a4 02 c0    	mov    DWORD PTR ds:0xc002a4a4,ebx
c000f7a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7a8:	c1 eb 0c             	shr    ebx,0xc
c000f7ab:	c1 e8 0c             	shr    eax,0xc
c000f7ae:	39 d8                	cmp    eax,ebx
c000f7b0:	73 13                	jae    c000f7c5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f7b2:	6a 00                	push   0x0
c000f7b4:	8d 70 01             	lea    esi,[eax+0x1]
c000f7b7:	50                   	push   eax
c000f7b8:	e8 33 fe ff ff       	call   c000f5f0 <Phys::setPageState(unsigned long, bool)>
c000f7bd:	5a                   	pop    edx
c000f7be:	89 f0                	mov    eax,esi
c000f7c0:	59                   	pop    ecx
c000f7c1:	39 f3                	cmp    ebx,esi
c000f7c3:	75 ed                	jne    c000f7b2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f7c5:	5b                   	pop    ebx
c000f7c6:	5e                   	pop    esi
c000f7c7:	c3                   	ret    

c000f7c8 <Phys::physicalMemorySetup(unsigned int)>:
c000f7c8:	55                   	push   ebp
c000f7c9:	57                   	push   edi
c000f7ca:	56                   	push   esi
c000f7cb:	53                   	push   ebx
c000f7cc:	31 db                	xor    ebx,ebx
c000f7ce:	83 ec 40             	sub    esp,0x40
c000f7d1:	6a 30                	push   0x30
c000f7d3:	6a 00                	push   0x0
c000f7d5:	68 c0 a4 02 c0       	push   0xc002a4c0
c000f7da:	e8 9e 0e ff ff       	call   c000067d <memset>
c000f7df:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7e8:	05 00 10 00 00       	add    eax,0x1000
c000f7ed:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f7f1:	83 c4 10             	add    esp,0x10
c000f7f4:	83 ec 08             	sub    esp,0x8
c000f7f7:	6a 01                	push   0x1
c000f7f9:	53                   	push   ebx
c000f7fa:	43                   	inc    ebx
c000f7fb:	e8 f0 fd ff ff       	call   c000f5f0 <Phys::setPageState(unsigned long, bool)>
c000f800:	83 c4 10             	add    esp,0x10
c000f803:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f809:	75 e9                	jne    c000f7f4 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000f80b:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000f812:	66 85 c0             	test   ax,ax
c000f815:	0f 84 8e 01 00 00    	je     c000f9a9 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000f81b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f81f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f827:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f82b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f830:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f834:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f83c:	eb 15                	jmp    c000f853 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000f83e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000f842:	83 c3 18             	add    ebx,0x18
c000f845:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f849:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f84d:	0f 84 66 01 00 00    	je     c000f9b9 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f853:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f856:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f859:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f85c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f860:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f864:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f866:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f869:	01 f0                	add    eax,esi
c000f86b:	55                   	push   ebp
c000f86c:	11 fa                	adc    edx,edi
c000f86e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f872:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f876:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f87a:	56                   	push   esi
c000f87b:	68 08 6c 02 c0       	push   0xc0026c08
c000f880:	e8 c0 29 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000f885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f889:	83 c4 10             	add    esp,0x10
c000f88c:	09 f8                	or     eax,edi
c000f88e:	0f 85 25 01 00 00    	jne    c000f9b9 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f894:	4d                   	dec    ebp
c000f895:	75 a7                	jne    c000f83e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f897:	ba 00 00 08 00       	mov    edx,0x80000
c000f89c:	89 c1                	mov    ecx,eax
c000f89e:	39 f2                	cmp    edx,esi
c000f8a0:	19 f9                	sbb    ecx,edi
c000f8a2:	0f 82 a7 00 00 00    	jb     c000f94f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8a8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f8ac:	89 c1                	mov    ecx,eax
c000f8ae:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f8b2:	0f 83 97 00 00 00    	jae    c000f94f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8b8:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f8bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f8c1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f8c5:	39 fa                	cmp    edx,edi
c000f8c7:	19 e8                	sbb    eax,ebp
c000f8c9:	0f 82 14 01 00 00    	jb     c000f9e3 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000f8cf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f8d3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f8d7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f8dd:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f8e2:	83 d5 ff             	adc    ebp,0xffffffff
c000f8e5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f8e9:	31 c0                	xor    eax,eax
c000f8eb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f8ef:	39 fa                	cmp    edx,edi
c000f8f1:	89 c1                	mov    ecx,eax
c000f8f3:	19 e9                	sbb    ecx,ebp
c000f8f5:	0f 83 43 ff ff ff    	jae    c000f83e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f8fb:	be 00 00 08 00       	mov    esi,0x80000
c000f900:	50                   	push   eax
c000f901:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f905:	57                   	push   edi
c000f906:	56                   	push   esi
c000f907:	68 2c 6c 02 c0       	push   0xc0026c2c
c000f90c:	e8 34 29 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000f911:	5a                   	pop    edx
c000f912:	59                   	pop    ecx
c000f913:	57                   	push   edi
c000f914:	56                   	push   esi
c000f915:	e8 76 fe ff ff       	call   c000f790 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f91a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f91e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f922:	83 c4 0c             	add    esp,0xc
c000f925:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f929:	03 05 b0 a4 02 c0    	add    eax,DWORD PTR ds:0xc002a4b0
c000f92f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f936:	a3 b0 a4 02 c0       	mov    ds:0xc002a4b0,eax
c000f93b:	52                   	push   edx
c000f93c:	50                   	push   eax
c000f93d:	68 ea 6b 02 c0       	push   0xc0026bea
c000f942:	e8 fe 28 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c000f947:	83 c4 10             	add    esp,0x10
c000f94a:	e9 ef fe ff ff       	jmp    c000f83e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f94f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f953:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f957:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f95b:	39 ea                	cmp    edx,ebp
c000f95d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f961:	0f 82 d7 fe ff ff    	jb     c000f83e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f967:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f96c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f970:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f974:	0f 83 c4 fe ff ff    	jae    c000f83e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f97a:	39 ee                	cmp    esi,ebp
c000f97c:	89 f8                	mov    eax,edi
c000f97e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f982:	0f 83 78 ff ff ff    	jae    c000f900 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f988:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f98c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f990:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f994:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f998:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f99c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f9a0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f9a4:	e9 57 ff ff ff       	jmp    c000f900 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9a9:	83 ec 0c             	sub    esp,0xc
c000f9ac:	68 dc 6b 02 c0       	push   0xc0026bdc
c000f9b1:	e8 0d 90 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c000f9b6:	83 c4 10             	add    esp,0x10
c000f9b9:	bb 40 01 00 00       	mov    ebx,0x140
c000f9be:	83 ec 08             	sub    esp,0x8
c000f9c1:	6a 00                	push   0x0
c000f9c3:	53                   	push   ebx
c000f9c4:	43                   	inc    ebx
c000f9c5:	e8 26 fc ff ff       	call   c000f5f0 <Phys::setPageState(unsigned long, bool)>
c000f9ca:	ff 05 b0 a4 02 c0    	inc    DWORD PTR ds:0xc002a4b0
c000f9d0:	83 c4 10             	add    esp,0x10
c000f9d3:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000f9d9:	75 e3                	jne    c000f9be <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000f9db:	83 c4 3c             	add    esp,0x3c
c000f9de:	5b                   	pop    ebx
c000f9df:	5e                   	pop    esi
c000f9e0:	5f                   	pop    edi
c000f9e1:	5d                   	pop    ebp
c000f9e2:	c3                   	ret    
c000f9e3:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000f9eb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f9f3:	e9 d7 fe ff ff       	jmp    c000f8cf <Phys::physicalMemorySetup(unsigned int)+0x107>

c000f9f8 <Pipe::isAtty()>:
c000f9f8:	31 c0                	xor    eax,eax
c000f9fa:	c3                   	ret    
c000f9fb:	90                   	nop

c000f9fc <Pipe::~Pipe()>:
c000f9fc:	83 ec 0c             	sub    esp,0xc
c000f9ff:	ba 98 6c 02 c0       	mov    edx,0xc0026c98
c000fa04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa08:	89 10                	mov    DWORD PTR [eax],edx
c000fa0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	50                   	push   eax
c000fa12:	e8 e9 15 00 00       	call   c0011000 <UnixFile::~UnixFile()>
c000fa17:	83 c4 10             	add    esp,0x10
c000fa1a:	90                   	nop
c000fa1b:	83 c4 0c             	add    esp,0xc
c000fa1e:	c3                   	ret    
c000fa1f:	90                   	nop

c000fa20 <Pipe::~Pipe()>:
c000fa20:	83 ec 0c             	sub    esp,0xc
c000fa23:	83 ec 0c             	sub    esp,0xc
c000fa26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa2a:	e8 cd ff ff ff       	call   c000f9fc <Pipe::~Pipe()>
c000fa2f:	83 c4 10             	add    esp,0x10
c000fa32:	83 ec 08             	sub    esp,0x8
c000fa35:	6a 20                	push   0x20
c000fa37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa3b:	e8 25 27 00 00       	call   c0012165 <operator delete(void*, unsigned long)>
c000fa40:	83 c4 10             	add    esp,0x10
c000fa43:	83 c4 0c             	add    esp,0xc
c000fa46:	c3                   	ret    
c000fa47:	90                   	nop

c000fa48 <Pipe::read(unsigned long long, void*, int*)>:
c000fa48:	55                   	push   ebp
c000fa49:	57                   	push   edi
c000fa4a:	56                   	push   esi
c000fa4b:	53                   	push   ebx
c000fa4c:	83 ec 1c             	sub    esp,0x1c
c000fa4f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fa53:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fa57:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fa5b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fa5e:	89 c8                	mov    eax,ecx
c000fa60:	99                   	cdq    
c000fa61:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fa65:	74 19                	je     c000fa80 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fa67:	39 f9                	cmp    ecx,edi
c000fa69:	89 d1                	mov    ecx,edx
c000fa6b:	19 f1                	sbb    ecx,esi
c000fa6d:	73 11                	jae    c000fa80 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fa6f:	e8 98 be 00 00       	call   c001b90c <lockScheduler()>
c000fa74:	e8 cf c1 00 00       	call   c001bc48 <schedule()>
c000fa79:	e8 90 be 00 00       	call   c001b90e <unlockScheduler()>
c000fa7e:	eb db                	jmp    c000fa5b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fa80:	39 f8                	cmp    eax,edi
c000fa82:	89 d1                	mov    ecx,edx
c000fa84:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fa88:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fa8c:	19 f1                	sbb    ecx,esi
c000fa8e:	73 08                	jae    c000fa98 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fa90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fa98:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fa9b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fa9e:	29 c6                	sub    esi,eax
c000faa0:	89 f1                	mov    ecx,esi
c000faa2:	c1 f9 1f             	sar    ecx,0x1f
c000faa5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000faa9:	89 ca                	mov    edx,ecx
c000faab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000faaf:	19 d1                	sbb    ecx,edx
c000fab1:	73 04                	jae    c000fab7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fab3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fab7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fabb:	89 fd                	mov    ebp,edi
c000fabd:	29 f5                	sub    ebp,esi
c000fabf:	85 f6                	test   esi,esi
c000fac1:	74 12                	je     c000fad5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fac3:	52                   	push   edx
c000fac4:	56                   	push   esi
c000fac5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fac8:	50                   	push   eax
c000fac9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000facd:	e8 75 0b ff ff       	call   c0000647 <memcpy>
c000fad2:	83 c4 10             	add    esp,0x10
c000fad5:	85 ed                	test   ebp,ebp
c000fad7:	74 12                	je     c000faeb <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fad9:	50                   	push   eax
c000fada:	55                   	push   ebp
c000fadb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fade:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fae2:	56                   	push   esi
c000fae3:	e8 5f 0b ff ff       	call   c0000647 <memcpy>
c000fae8:	83 c4 10             	add    esp,0x10
c000faeb:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000faee:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000faf1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000faf4:	99                   	cdq    
c000faf5:	89 f7                	mov    edi,esi
c000faf7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fafb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000faff:	c1 ff 1f             	sar    edi,0x1f
c000fb02:	57                   	push   edi
c000fb03:	56                   	push   esi
c000fb04:	52                   	push   edx
c000fb05:	50                   	push   eax
c000fb06:	e8 51 3a 01 00       	call   c002355c <__umoddi3>
c000fb0b:	83 c4 10             	add    esp,0x10
c000fb0e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fb11:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fb16:	75 10                	jne    c000fb28 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fb18:	83 ec 0c             	sub    esp,0xc
c000fb1b:	68 55 6c 02 c0       	push   0xc0026c55
c000fb20:	e8 9e 8e 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c000fb25:	83 c4 10             	add    esp,0x10
c000fb28:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb30:	89 10                	mov    DWORD PTR [eax],edx
c000fb32:	83 c4 1c             	add    esp,0x1c
c000fb35:	31 c0                	xor    eax,eax
c000fb37:	5b                   	pop    ebx
c000fb38:	5e                   	pop    esi
c000fb39:	5f                   	pop    edi
c000fb3a:	5d                   	pop    ebp
c000fb3b:	c3                   	ret    

c000fb3c <Pipe::write(unsigned long long, void*, int*)>:
c000fb3c:	55                   	push   ebp
c000fb3d:	57                   	push   edi
c000fb3e:	56                   	push   esi
c000fb3f:	53                   	push   ebx
c000fb40:	83 ec 1c             	sub    esp,0x1c
c000fb43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb47:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fb4b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fb4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb52:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000fb55:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000fb58:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fb5c:	89 de                	mov    esi,ebx
c000fb5e:	89 df                	mov    edi,ebx
c000fb60:	c1 ff 1f             	sar    edi,0x1f
c000fb63:	01 c6                	add    esi,eax
c000fb65:	89 c8                	mov    eax,ecx
c000fb67:	11 d7                	adc    edi,edx
c000fb69:	99                   	cdq    
c000fb6a:	39 f1                	cmp    ecx,esi
c000fb6c:	89 d0                	mov    eax,edx
c000fb6e:	19 f8                	sbb    eax,edi
c000fb70:	b8 01 00 00 00       	mov    eax,0x1
c000fb75:	0f 82 80 00 00 00    	jb     c000fbfb <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000fb7b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fb7e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fb81:	01 d8                	add    eax,ebx
c000fb83:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000fb87:	99                   	cdq    
c000fb88:	f7 f9                	idiv   ecx
c000fb8a:	29 d1                	sub    ecx,edx
c000fb8c:	89 d7                	mov    edi,edx
c000fb8e:	89 c8                	mov    eax,ecx
c000fb90:	99                   	cdq    
c000fb91:	39 ce                	cmp    esi,ecx
c000fb93:	19 d3                	sbb    ebx,edx
c000fb95:	bb 00 00 00 00       	mov    ebx,0x0
c000fb9a:	72 04                	jb     c000fba0 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000fb9c:	89 f3                	mov    ebx,esi
c000fb9e:	29 cb                	sub    ebx,ecx
c000fba0:	89 f1                	mov    ecx,esi
c000fba2:	29 d9                	sub    ecx,ebx
c000fba4:	74 1a                	je     c000fbc0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000fba6:	52                   	push   edx
c000fba7:	51                   	push   ecx
c000fba8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000fbac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fbb0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fbb3:	57                   	push   edi
c000fbb4:	e8 8e 0a ff ff       	call   c0000647 <memcpy>
c000fbb9:	83 c4 10             	add    esp,0x10
c000fbbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbc0:	85 db                	test   ebx,ebx
c000fbc2:	74 12                	je     c000fbd6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000fbc4:	50                   	push   eax
c000fbc5:	53                   	push   ebx
c000fbc6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000fbca:	51                   	push   ecx
c000fbcb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000fbce:	e8 74 0a ff ff       	call   c0000647 <memcpy>
c000fbd3:	83 c4 10             	add    esp,0x10
c000fbd6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000fbd9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fbde:	75 10                	jne    c000fbf0 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000fbe0:	83 ec 0c             	sub    esp,0xc
c000fbe3:	68 71 6c 02 c0       	push   0xc0026c71
c000fbe8:	e8 d6 8d 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c000fbed:	83 c4 10             	add    esp,0x10
c000fbf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbf4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000fbf7:	89 38                	mov    DWORD PTR [eax],edi
c000fbf9:	31 c0                	xor    eax,eax
c000fbfb:	83 c4 1c             	add    esp,0x1c
c000fbfe:	5b                   	pop    ebx
c000fbff:	5e                   	pop    esi
c000fc00:	5f                   	pop    edi
c000fc01:	5d                   	pop    ebp
c000fc02:	c3                   	ret    
c000fc03:	90                   	nop

c000fc04 <Pipe::Pipe(int)>:
c000fc04:	83 ec 0c             	sub    esp,0xc
c000fc07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc0b:	83 ec 08             	sub    esp,0x8
c000fc0e:	6a 00                	push   0x0
c000fc10:	50                   	push   eax
c000fc11:	e8 48 12 00 00       	call   c0010e5e <UnixFile::UnixFile(int)>
c000fc16:	83 c4 10             	add    esp,0x10
c000fc19:	ba 98 6c 02 c0       	mov    edx,0xc0026c98
c000fc1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc22:	89 10                	mov    DWORD PTR [eax],edx
c000fc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc2c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000fc2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc33:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000fc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc3e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000fc45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc49:	83 ec 0c             	sub    esp,0xc
c000fc4c:	50                   	push   eax
c000fc4d:	e8 cc f4 ff ff       	call   c000f11e <malloc>
c000fc52:	83 c4 10             	add    esp,0x10
c000fc55:	89 c2                	mov    edx,eax
c000fc57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc5b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fc5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc62:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000fc66:	90                   	nop
c000fc67:	83 c4 0c             	add    esp,0xc
c000fc6a:	c3                   	ret    
c000fc6b:	90                   	nop

c000fc6c <VgaText::isAtty()>:
c000fc6c:	b0 01                	mov    al,0x1
c000fc6e:	c3                   	ret    
c000fc6f:	90                   	nop

c000fc70 <VgaText::~VgaText()>:
c000fc70:	83 ec 0c             	sub    esp,0xc
c000fc73:	ba 54 6d 02 c0       	mov    edx,0xc0026d54
c000fc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc7c:	89 10                	mov    DWORD PTR [eax],edx
c000fc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc82:	83 ec 0c             	sub    esp,0xc
c000fc85:	50                   	push   eax
c000fc86:	e8 75 13 00 00       	call   c0011000 <UnixFile::~UnixFile()>
c000fc8b:	83 c4 10             	add    esp,0x10
c000fc8e:	90                   	nop
c000fc8f:	83 c4 0c             	add    esp,0xc
c000fc92:	c3                   	ret    
c000fc93:	90                   	nop

c000fc94 <VgaText::~VgaText()>:
c000fc94:	83 ec 0c             	sub    esp,0xc
c000fc97:	83 ec 0c             	sub    esp,0xc
c000fc9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc9e:	e8 cd ff ff ff       	call   c000fc70 <VgaText::~VgaText()>
c000fca3:	83 c4 10             	add    esp,0x10
c000fca6:	83 ec 08             	sub    esp,0x8
c000fca9:	68 60 12 00 00       	push   0x1260
c000fcae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcb2:	e8 ae 24 00 00       	call   c0012165 <operator delete(void*, unsigned long)>
c000fcb7:	83 c4 10             	add    esp,0x10
c000fcba:	83 c4 0c             	add    esp,0xc
c000fcbd:	c3                   	ret    

c000fcbe <VgaText::read(unsigned long long, void*, int*)>:
c000fcbe:	83 ec 10             	sub    esp,0x10
c000fcc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fccd:	e8 fe 56 00 00       	call   c00153d0 <readKeyboard(VgaText*, char*, unsigned long)>
c000fcd2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fcd6:	89 02                	mov    DWORD PTR [edx],eax
c000fcd8:	31 c0                	xor    eax,eax
c000fcda:	83 c4 1c             	add    esp,0x1c
c000fcdd:	c3                   	ret    

c000fcde <setTerminalScrollLock(bool)>:
c000fcde:	c3                   	ret    

c000fcdf <addToTerminalCycle(VgaText*)>:
c000fcdf:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c000fce5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fce9:	85 d2                	test   edx,edx
c000fceb:	75 0c                	jne    c000fcf9 <addToTerminalCycle(VgaText*)+0x1a>
c000fced:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fcf3:	a3 20 a5 02 c0       	mov    ds:0xc002a520,eax
c000fcf8:	c3                   	ret    
c000fcf9:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fcff:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fd05:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fd0b:	c3                   	ret    

c000fd0c <installVgaTextImplementation()>:
c000fd0c:	83 ec 10             	sub    esp,0x10
c000fd0f:	6a 20                	push   0x20
c000fd11:	6a 00                	push   0x0
c000fd13:	68 00 a5 02 c0       	push   0xc002a500
c000fd18:	e8 60 09 ff ff       	call   c000067d <memset>
c000fd1d:	83 c4 1c             	add    esp,0x1c
c000fd20:	c3                   	ret    

c000fd21 <scrollTerminalScrollLock(int)>:
c000fd21:	c3                   	ret    

c000fd22 <VgaText::load()>:
c000fd22:	53                   	push   ebx
c000fd23:	31 c0                	xor    eax,eax
c000fd25:	83 ec 58             	sub    esp,0x58
c000fd28:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fd2c:	89 e2                	mov    edx,esp
c000fd2e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fd32:	40                   	inc    eax
c000fd33:	83 f8 50             	cmp    eax,0x50
c000fd36:	75 f6                	jne    c000fd2e <VgaText::load()+0xc>
c000fd38:	31 c0                	xor    eax,eax
c000fd3a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fd41:	84 c9                	test   cl,cl
c000fd43:	74 06                	je     c000fd4b <VgaText::load()+0x29>
c000fd45:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fd48:	40                   	inc    eax
c000fd49:	eb ef                	jmp    c000fd3a <VgaText::load()+0x18>
c000fd4b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fd51:	85 c0                	test   eax,eax
c000fd53:	74 09                	je     c000fd5e <VgaText::load()+0x3c>
c000fd55:	51                   	push   ecx
c000fd56:	51                   	push   ecx
c000fd57:	52                   	push   edx
c000fd58:	53                   	push   ebx
c000fd59:	ff d0                	call   eax
c000fd5b:	83 c4 10             	add    esp,0x10
c000fd5e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fd64:	85 c0                	test   eax,eax
c000fd66:	74 09                	je     c000fd71 <VgaText::load()+0x4f>
c000fd68:	83 ec 0c             	sub    esp,0xc
c000fd6b:	53                   	push   ebx
c000fd6c:	ff d0                	call   eax
c000fd6e:	83 c4 10             	add    esp,0x10
c000fd71:	83 c4 58             	add    esp,0x58
c000fd74:	5b                   	pop    ebx
c000fd75:	c3                   	ret    

c000fd76 <VgaText::updateCursor()>:
c000fd76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd7a:	39 05 24 a5 02 c0    	cmp    DWORD PTR ds:0xc002a524,eax
c000fd80:	75 0c                	jne    c000fd8e <VgaText::updateCursor()+0x18>
c000fd82:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fd88:	85 c0                	test   eax,eax
c000fd8a:	74 02                	je     c000fd8e <VgaText::updateCursor()+0x18>
c000fd8c:	ff e0                	jmp    eax
c000fd8e:	c3                   	ret    
c000fd8f:	90                   	nop

c000fd90 <VgaText::showCursor(bool)>:
c000fd90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd98:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000fd9e:	c3                   	ret    
c000fd9f:	90                   	nop

c000fda0 <VgaText::disableBlink(bool)>:
c000fda0:	56                   	push   esi
c000fda1:	53                   	push   ebx
c000fda2:	51                   	push   ecx
c000fda3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fda7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fdab:	39 1d 24 a5 02 c0    	cmp    DWORD PTR ds:0xc002a524,ebx
c000fdb1:	75 18                	jne    c000fdcb <VgaText::disableBlink(bool)+0x2b>
c000fdb3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fdb9:	85 c0                	test   eax,eax
c000fdbb:	74 0e                	je     c000fdcb <VgaText::disableBlink(bool)+0x2b>
c000fdbd:	89 f1                	mov    ecx,esi
c000fdbf:	52                   	push   edx
c000fdc0:	52                   	push   edx
c000fdc1:	0f b6 d1             	movzx  edx,cl
c000fdc4:	52                   	push   edx
c000fdc5:	53                   	push   ebx
c000fdc6:	ff d0                	call   eax
c000fdc8:	83 c4 10             	add    esp,0x10
c000fdcb:	89 f0                	mov    eax,esi
c000fdcd:	83 f0 01             	xor    eax,0x1
c000fdd0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fdd6:	58                   	pop    eax
c000fdd7:	5b                   	pop    ebx
c000fdd8:	5e                   	pop    esi
c000fdd9:	c3                   	ret    

c000fdda <VgaText::doANSI_SGR(int)>:
c000fdda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fde2:	85 d2                	test   edx,edx
c000fde4:	75 14                	jne    c000fdfa <VgaText::doANSI_SGR(int)+0x20>
c000fde6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000fdec:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fdf2:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000fdf8:	eb 65                	jmp    c000fe5f <VgaText::doANSI_SGR(int)+0x85>
c000fdfa:	83 fa 07             	cmp    edx,0x7
c000fdfd:	75 14                	jne    c000fe13 <VgaText::doANSI_SGR(int)+0x39>
c000fdff:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fe05:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000fe0b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000fe11:	eb 4c                	jmp    c000fe5f <VgaText::doANSI_SGR(int)+0x85>
c000fe13:	83 fa 1b             	cmp    edx,0x1b
c000fe16:	74 ce                	je     c000fde6 <VgaText::doANSI_SGR(int)+0xc>
c000fe18:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000fe1b:	83 f9 07             	cmp    ecx,0x7
c000fe1e:	77 09                	ja     c000fe29 <VgaText::doANSI_SGR(int)+0x4f>
c000fe20:	8b 14 8d 40 94 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6bc0]
c000fe27:	eb 20                	jmp    c000fe49 <VgaText::doANSI_SGR(int)+0x6f>
c000fe29:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fe2c:	83 f9 07             	cmp    ecx,0x7
c000fe2f:	77 09                	ja     c000fe3a <VgaText::doANSI_SGR(int)+0x60>
c000fe31:	8b 14 8d 40 94 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6bc0]
c000fe38:	eb 25                	jmp    c000fe5f <VgaText::doANSI_SGR(int)+0x85>
c000fe3a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000fe3d:	83 f9 07             	cmp    ecx,0x7
c000fe40:	77 0e                	ja     c000fe50 <VgaText::doANSI_SGR(int)+0x76>
c000fe42:	8b 14 95 f8 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6d08]
c000fe49:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe4f:	c3                   	ret    
c000fe50:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000fe53:	83 f9 07             	cmp    ecx,0x7
c000fe56:	77 0d                	ja     c000fe65 <VgaText::doANSI_SGR(int)+0x8b>
c000fe58:	8b 14 95 d0 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6d30]
c000fe5f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fe65:	c3                   	ret    

c000fe66 <VgaText::setDefaultBgColour(VgaColour)>:
c000fe66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe6e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000fe74:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fe7a:	c3                   	ret    
c000fe7b:	90                   	nop

c000fe7c <VgaText::setDefaultFgColour(VgaColour)>:
c000fe7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe84:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000fe8a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe90:	c3                   	ret    
c000fe91:	90                   	nop

c000fe92 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000fe92:	53                   	push   ebx
c000fe93:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fe9b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fe9f:	51                   	push   ecx
c000fea0:	e8 c1 ff ff ff       	call   c000fe66 <VgaText::setDefaultBgColour(VgaColour)>
c000fea5:	58                   	pop    eax
c000fea6:	5a                   	pop    edx
c000fea7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000feab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000feaf:	5b                   	pop    ebx
c000feb0:	eb ca                	jmp    c000fe7c <VgaText::setDefaultFgColour(VgaColour)>

c000feb2 <VgaText::combineColours(unsigned char, unsigned char)>:
c000feb2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000feb6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000febb:	83 e0 0f             	and    eax,0xf
c000febe:	c1 e2 04             	shl    edx,0x4
c000fec1:	09 d0                	or     eax,edx
c000fec3:	c3                   	ret    

c000fec4 <VgaText::scrollScreen()>:
c000fec4:	57                   	push   edi
c000fec5:	56                   	push   esi
c000fec6:	be 01 00 00 00       	mov    esi,0x1
c000fecb:	53                   	push   ebx
c000fecc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fed0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000fed6:	31 ff                	xor    edi,edi
c000fed8:	01 d9                	add    ecx,ebx
c000feda:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000fedd:	83 fe 17             	cmp    esi,0x17
c000fee0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000fee6:	75 28                	jne    c000ff10 <VgaText::scrollScreen()+0x4c>
c000fee8:	f7 c7 01 00 00 00    	test   edi,0x1
c000feee:	74 1c                	je     c000ff0c <VgaText::scrollScreen()+0x48>
c000fef0:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000fef7:	50                   	push   eax
c000fef8:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000feff:	50                   	push   eax
c000ff00:	e8 ad ff ff ff       	call   c000feb2 <VgaText::combineColours(unsigned char, unsigned char)>
c000ff05:	5a                   	pop    edx
c000ff06:	5a                   	pop    edx
c000ff07:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ff0a:	eb 04                	jmp    c000ff10 <VgaText::scrollScreen()+0x4c>
c000ff0c:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ff10:	47                   	inc    edi
c000ff11:	41                   	inc    ecx
c000ff12:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ff18:	75 c0                	jne    c000feda <VgaText::scrollScreen()+0x16>
c000ff1a:	46                   	inc    esi
c000ff1b:	83 fe 18             	cmp    esi,0x18
c000ff1e:	75 b0                	jne    c000fed0 <VgaText::scrollScreen()+0xc>
c000ff20:	39 1d 24 a5 02 c0    	cmp    DWORD PTR ds:0xc002a524,ebx
c000ff26:	75 24                	jne    c000ff4c <VgaText::scrollScreen()+0x88>
c000ff28:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ff2f:	74 08                	je     c000ff39 <VgaText::scrollScreen()+0x75>
c000ff31:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ff37:	eb 13                	jmp    c000ff4c <VgaText::scrollScreen()+0x88>
c000ff39:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ff3f:	85 c0                	test   eax,eax
c000ff41:	74 09                	je     c000ff4c <VgaText::scrollScreen()+0x88>
c000ff43:	83 ec 0c             	sub    esp,0xc
c000ff46:	53                   	push   ebx
c000ff47:	ff d0                	call   eax
c000ff49:	83 c4 10             	add    esp,0x10
c000ff4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ff50:	5b                   	pop    ebx
c000ff51:	5e                   	pop    esi
c000ff52:	5f                   	pop    edi
c000ff53:	e9 1e fe ff ff       	jmp    c000fd76 <VgaText::updateCursor()>

c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ff58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ff5d:	c1 e0 08             	shl    eax,0x8
c000ff60:	89 c2                	mov    edx,eax
c000ff62:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ff67:	09 d0                	or     eax,edx
c000ff69:	c3                   	ret    

c000ff6a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ff6a:	53                   	push   ebx
c000ff6b:	83 ec 08             	sub    esp,0x8
c000ff6e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff72:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ff77:	50                   	push   eax
c000ff78:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ff7d:	50                   	push   eax
c000ff7e:	e8 2f ff ff ff       	call   c000feb2 <VgaText::combineColours(unsigned char, unsigned char)>
c000ff83:	5a                   	pop    edx
c000ff84:	0f b6 c0             	movzx  eax,al
c000ff87:	5b                   	pop    ebx
c000ff88:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ff8d:	50                   	push   eax
c000ff8e:	53                   	push   ebx
c000ff8f:	e8 c4 ff ff ff       	call   c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>
c000ff94:	5a                   	pop    edx
c000ff95:	5a                   	pop    edx
c000ff96:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ff9c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ffa0:	0f b7 d2             	movzx  edx,dx
c000ffa3:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ffa8:	39 0d 24 a5 02 c0    	cmp    DWORD PTR ds:0xc002a524,ecx
c000ffae:	75 14                	jne    c000ffc4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ffb0:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ffb6:	85 c0                	test   eax,eax
c000ffb8:	74 0a                	je     c000ffc4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ffba:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ffbe:	83 c4 08             	add    esp,0x8
c000ffc1:	5b                   	pop    ebx
c000ffc2:	ff e0                	jmp    eax
c000ffc4:	83 c4 08             	add    esp,0x8
c000ffc7:	5b                   	pop    ebx
c000ffc8:	c3                   	ret    
c000ffc9:	90                   	nop

c000ffca <VgaText::getCursorX()>:
c000ffca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffce:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ffd4:	c3                   	ret    
c000ffd5:	90                   	nop

c000ffd6 <VgaText::getCursorY()>:
c000ffd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffda:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ffe0:	c3                   	ret    
c000ffe1:	90                   	nop

c000ffe2 <VgaText::setCursor(int, int)>:
c000ffe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffe6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffea:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000fff0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fff4:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000fffa:	e9 77 fd ff ff       	jmp    c000fd76 <VgaText::updateCursor()>
c000ffff:	90                   	nop

c0010000 <VgaText::setCursorX(int)>:
c0010000:	83 ec 10             	sub    esp,0x10
c0010003:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010007:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001000d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010011:	50                   	push   eax
c0010012:	e8 cb ff ff ff       	call   c000ffe2 <VgaText::setCursor(int, int)>
c0010017:	83 c4 1c             	add    esp,0x1c
c001001a:	c3                   	ret    
c001001b:	90                   	nop

c001001c <VgaText::setCursorY(int)>:
c001001c:	83 ec 10             	sub    esp,0x10
c001001f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010023:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010027:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001002d:	50                   	push   eax
c001002e:	e8 af ff ff ff       	call   c000ffe2 <VgaText::setCursor(int, int)>
c0010033:	83 c4 1c             	add    esp,0x1c
c0010036:	c3                   	ret    
c0010037:	90                   	nop

c0010038 <VgaText::incrementCursor(bool)>:
c0010038:	56                   	push   esi
c0010039:	53                   	push   ebx
c001003a:	51                   	push   ecx
c001003b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001003f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010043:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010049:	40                   	inc    eax
c001004a:	83 f8 50             	cmp    eax,0x50
c001004d:	74 08                	je     c0010057 <VgaText::incrementCursor(bool)+0x1f>
c001004f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010055:	eb 33                	jmp    c001008a <VgaText::incrementCursor(bool)+0x52>
c0010057:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001005d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010067:	8d 50 01             	lea    edx,[eax+0x1]
c001006a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010070:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010076:	75 12                	jne    c001008a <VgaText::incrementCursor(bool)+0x52>
c0010078:	83 ec 0c             	sub    esp,0xc
c001007b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010081:	53                   	push   ebx
c0010082:	e8 3d fe ff ff       	call   c000fec4 <VgaText::scrollScreen()>
c0010087:	83 c4 10             	add    esp,0x10
c001008a:	89 f0                	mov    eax,esi
c001008c:	84 c0                	test   al,al
c001008e:	74 0c                	je     c001009c <VgaText::incrementCursor(bool)+0x64>
c0010090:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010094:	5a                   	pop    edx
c0010095:	5b                   	pop    ebx
c0010096:	5e                   	pop    esi
c0010097:	e9 da fc ff ff       	jmp    c000fd76 <VgaText::updateCursor()>
c001009c:	58                   	pop    eax
c001009d:	5b                   	pop    ebx
c001009e:	5e                   	pop    esi
c001009f:	c3                   	ret    

c00100a0 <VgaText::updateRAMUsageDisplay(int)>:
c00100a0:	53                   	push   ebx
c00100a1:	bb 0a 00 00 00       	mov    ebx,0xa
c00100a6:	6a 0f                	push   0xf
c00100a8:	6a 00                	push   0x0
c00100aa:	e8 03 fe ff ff       	call   c000feb2 <VgaText::combineColours(unsigned char, unsigned char)>
c00100af:	5a                   	pop    edx
c00100b0:	59                   	pop    ecx
c00100b1:	0f b6 c8             	movzx  ecx,al
c00100b4:	51                   	push   ecx
c00100b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100b9:	99                   	cdq    
c00100ba:	f7 fb                	idiv   ebx
c00100bc:	89 d3                	mov    ebx,edx
c00100be:	83 c0 30             	add    eax,0x30
c00100c1:	83 c3 30             	add    ebx,0x30
c00100c4:	0f be c0             	movsx  eax,al
c00100c7:	0f b6 db             	movzx  ebx,bl
c00100ca:	50                   	push   eax
c00100cb:	e8 88 fe ff ff       	call   c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>
c00100d0:	5a                   	pop    edx
c00100d1:	5a                   	pop    edx
c00100d2:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c00100d8:	51                   	push   ecx
c00100d9:	53                   	push   ebx
c00100da:	e8 79 fe ff ff       	call   c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>
c00100df:	5b                   	pop    ebx
c00100e0:	5a                   	pop    edx
c00100e1:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c00100e7:	51                   	push   ecx
c00100e8:	6a 25                	push   0x25
c00100ea:	e8 69 fe ff ff       	call   c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>
c00100ef:	59                   	pop    ecx
c00100f0:	5b                   	pop    ebx
c00100f1:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c00100f7:	5b                   	pop    ebx
c00100f8:	c3                   	ret    
c00100f9:	90                   	nop

c00100fa <VgaText::updateDiskUsage()>:
c00100fa:	55                   	push   ebp
c00100fb:	bd 10 27 00 00       	mov    ebp,0x2710
c0010100:	57                   	push   edi
c0010101:	56                   	push   esi
c0010102:	53                   	push   ebx
c0010103:	6a 0f                	push   0xf
c0010105:	6a 00                	push   0x0
c0010107:	e8 a6 fd ff ff       	call   c000feb2 <VgaText::combineColours(unsigned char, unsigned char)>
c001010c:	5a                   	pop    edx
c001010d:	0f b6 d8             	movzx  ebx,al
c0010110:	59                   	pop    ecx
c0010111:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0010116:	53                   	push   ebx
c0010117:	b9 0a 00 00 00       	mov    ecx,0xa
c001011c:	99                   	cdq    
c001011d:	f7 fd                	idiv   ebp
c001011f:	99                   	cdq    
c0010120:	f7 f9                	idiv   ecx
c0010122:	8d 42 30             	lea    eax,[edx+0x30]
c0010125:	0f b6 c0             	movzx  eax,al
c0010128:	50                   	push   eax
c0010129:	e8 2a fe ff ff       	call   c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>
c001012e:	5e                   	pop    esi
c001012f:	5f                   	pop    edi
c0010130:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c0010136:	bf e8 03 00 00       	mov    edi,0x3e8
c001013b:	53                   	push   ebx
c001013c:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0010141:	99                   	cdq    
c0010142:	f7 ff                	idiv   edi
c0010144:	99                   	cdq    
c0010145:	f7 f9                	idiv   ecx
c0010147:	8d 42 30             	lea    eax,[edx+0x30]
c001014a:	0f b6 c0             	movzx  eax,al
c001014d:	50                   	push   eax
c001014e:	e8 05 fe ff ff       	call   c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>
c0010153:	5a                   	pop    edx
c0010154:	5e                   	pop    esi
c0010155:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001015b:	be 64 00 00 00       	mov    esi,0x64
c0010160:	53                   	push   ebx
c0010161:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0010166:	99                   	cdq    
c0010167:	f7 fe                	idiv   esi
c0010169:	99                   	cdq    
c001016a:	f7 f9                	idiv   ecx
c001016c:	8d 42 30             	lea    eax,[edx+0x30]
c001016f:	0f b6 c0             	movzx  eax,al
c0010172:	50                   	push   eax
c0010173:	e8 e0 fd ff ff       	call   c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>
c0010178:	5a                   	pop    edx
c0010179:	5a                   	pop    edx
c001017a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c0010180:	53                   	push   ebx
c0010181:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0010186:	99                   	cdq    
c0010187:	f7 f9                	idiv   ecx
c0010189:	99                   	cdq    
c001018a:	f7 f9                	idiv   ecx
c001018c:	8d 42 30             	lea    eax,[edx+0x30]
c001018f:	0f b6 c0             	movzx  eax,al
c0010192:	50                   	push   eax
c0010193:	e8 c0 fd ff ff       	call   c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>
c0010198:	5a                   	pop    edx
c0010199:	5a                   	pop    edx
c001019a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00101a0:	53                   	push   ebx
c00101a1:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c00101a6:	99                   	cdq    
c00101a7:	f7 f9                	idiv   ecx
c00101a9:	8d 42 30             	lea    eax,[edx+0x30]
c00101ac:	0f b6 c0             	movzx  eax,al
c00101af:	50                   	push   eax
c00101b0:	e8 a3 fd ff ff       	call   c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>
c00101b5:	5a                   	pop    edx
c00101b6:	5a                   	pop    edx
c00101b7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00101bd:	53                   	push   ebx
c00101be:	a1 24 c7 02 c0       	mov    eax,ds:0xc002c724
c00101c3:	99                   	cdq    
c00101c4:	f7 fd                	idiv   ebp
c00101c6:	99                   	cdq    
c00101c7:	f7 f9                	idiv   ecx
c00101c9:	8d 42 30             	lea    eax,[edx+0x30]
c00101cc:	0f b6 c0             	movzx  eax,al
c00101cf:	50                   	push   eax
c00101d0:	e8 83 fd ff ff       	call   c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>
c00101d5:	5d                   	pop    ebp
c00101d6:	5a                   	pop    edx
c00101d7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c00101dd:	53                   	push   ebx
c00101de:	a1 24 c7 02 c0       	mov    eax,ds:0xc002c724
c00101e3:	99                   	cdq    
c00101e4:	f7 ff                	idiv   edi
c00101e6:	99                   	cdq    
c00101e7:	f7 f9                	idiv   ecx
c00101e9:	8d 42 30             	lea    eax,[edx+0x30]
c00101ec:	0f b6 c0             	movzx  eax,al
c00101ef:	50                   	push   eax
c00101f0:	e8 63 fd ff ff       	call   c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>
c00101f5:	5f                   	pop    edi
c00101f6:	5d                   	pop    ebp
c00101f7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c00101fd:	53                   	push   ebx
c00101fe:	a1 24 c7 02 c0       	mov    eax,ds:0xc002c724
c0010203:	99                   	cdq    
c0010204:	f7 fe                	idiv   esi
c0010206:	99                   	cdq    
c0010207:	f7 f9                	idiv   ecx
c0010209:	8d 42 30             	lea    eax,[edx+0x30]
c001020c:	0f b6 c0             	movzx  eax,al
c001020f:	50                   	push   eax
c0010210:	e8 43 fd ff ff       	call   c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>
c0010215:	5a                   	pop    edx
c0010216:	5e                   	pop    esi
c0010217:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001021d:	53                   	push   ebx
c001021e:	a1 24 c7 02 c0       	mov    eax,ds:0xc002c724
c0010223:	99                   	cdq    
c0010224:	f7 f9                	idiv   ecx
c0010226:	99                   	cdq    
c0010227:	f7 f9                	idiv   ecx
c0010229:	8d 42 30             	lea    eax,[edx+0x30]
c001022c:	0f b6 c0             	movzx  eax,al
c001022f:	50                   	push   eax
c0010230:	e8 23 fd ff ff       	call   c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>
c0010235:	5f                   	pop    edi
c0010236:	5d                   	pop    ebp
c0010237:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001023d:	53                   	push   ebx
c001023e:	a1 24 c7 02 c0       	mov    eax,ds:0xc002c724
c0010243:	99                   	cdq    
c0010244:	f7 f9                	idiv   ecx
c0010246:	83 c2 30             	add    edx,0x30
c0010249:	0f b6 d2             	movzx  edx,dl
c001024c:	52                   	push   edx
c001024d:	e8 06 fd ff ff       	call   c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>
c0010252:	5a                   	pop    edx
c0010253:	59                   	pop    ecx
c0010254:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001025a:	5b                   	pop    ebx
c001025b:	5e                   	pop    esi
c001025c:	5f                   	pop    edi
c001025d:	5d                   	pop    ebp
c001025e:	c3                   	ret    
c001025f:	90                   	nop

c0010260 <VgaText::updateTitle()>:
c0010260:	53                   	push   ebx
c0010261:	31 c0                	xor    eax,eax
c0010263:	83 ec 58             	sub    esp,0x58
c0010266:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001026a:	89 e1                	mov    ecx,esp
c001026c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010270:	40                   	inc    eax
c0010271:	83 f8 50             	cmp    eax,0x50
c0010274:	75 f6                	jne    c001026c <VgaText::updateTitle()+0xc>
c0010276:	31 c0                	xor    eax,eax
c0010278:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c001027f:	84 db                	test   bl,bl
c0010281:	74 06                	je     c0010289 <VgaText::updateTitle()+0x29>
c0010283:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010286:	40                   	inc    eax
c0010287:	eb ef                	jmp    c0010278 <VgaText::updateTitle()+0x18>
c0010289:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c001028f:	85 c0                	test   eax,eax
c0010291:	74 09                	je     c001029c <VgaText::updateTitle()+0x3c>
c0010293:	53                   	push   ebx
c0010294:	53                   	push   ebx
c0010295:	51                   	push   ecx
c0010296:	52                   	push   edx
c0010297:	ff d0                	call   eax
c0010299:	83 c4 10             	add    esp,0x10
c001029c:	e8 59 fe ff ff       	call   c00100fa <VgaText::updateDiskUsage()>
c00102a1:	83 c4 58             	add    esp,0x58
c00102a4:	5b                   	pop    ebx
c00102a5:	c3                   	ret    

c00102a6 <VgaText::setTitleTextColour(VgaColour)>:
c00102a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102ae:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00102b4:	eb aa                	jmp    c0010260 <VgaText::updateTitle()>

c00102b6 <VgaText::setTitleColour(VgaColour)>:
c00102b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102be:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00102c4:	eb 9a                	jmp    c0010260 <VgaText::updateTitle()>

c00102c6 <VgaText::setTitle(char*)>:
c00102c6:	53                   	push   ebx
c00102c7:	83 ec 10             	sub    esp,0x10
c00102ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00102ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d2:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00102d8:	50                   	push   eax
c00102d9:	e8 3e 04 ff ff       	call   c000071c <strcpy>
c00102de:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102e2:	83 c4 18             	add    esp,0x18
c00102e5:	5b                   	pop    ebx
c00102e6:	e9 75 ff ff ff       	jmp    c0010260 <VgaText::updateTitle()>
c00102eb:	90                   	nop

c00102ec <VgaText::decrementCursor(bool)>:
c00102ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00102f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102f4:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00102fa:	85 c0                	test   eax,eax
c00102fc:	74 07                	je     c0010305 <VgaText::decrementCursor(bool)+0x19>
c00102fe:	48                   	dec    eax
c00102ff:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010305:	84 c9                	test   cl,cl
c0010307:	74 09                	je     c0010312 <VgaText::decrementCursor(bool)+0x26>
c0010309:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001030d:	e9 64 fa ff ff       	jmp    c000fd76 <VgaText::updateCursor()>
c0010312:	c3                   	ret    
c0010313:	90                   	nop

c0010314 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010314:	53                   	push   ebx
c0010315:	83 ec 08             	sub    esp,0x8
c0010318:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001031c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010320:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010324:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010328:	3c 07                	cmp    al,0x7
c001032a:	75 2a                	jne    c0010356 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001032c:	a1 cc a5 02 c0       	mov    eax,ds:0xc002a5cc
c0010331:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010339:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010341:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010349:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001034d:	83 c4 08             	add    esp,0x8
c0010350:	5b                   	pop    ebx
c0010351:	e9 da 2c 00 00       	jmp    c0013030 <Buzzer::beep(int, int, bool)>
c0010356:	3c 0d                	cmp    al,0xd
c0010358:	75 0c                	jne    c0010366 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c001035a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010364:	eb 3b                	jmp    c00103a1 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010366:	3c 0a                	cmp    al,0xa
c0010368:	75 40                	jne    c00103aa <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c001036a:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010370:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001037a:	8d 50 01             	lea    edx,[eax+0x1]
c001037d:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010383:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010389:	75 12                	jne    c001039d <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c001038b:	83 ec 0c             	sub    esp,0xc
c001038e:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010394:	53                   	push   ebx
c0010395:	e8 2a fb ff ff       	call   c000fec4 <VgaText::scrollScreen()>
c001039a:	83 c4 10             	add    esp,0x10
c001039d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103a1:	83 c4 08             	add    esp,0x8
c00103a4:	5b                   	pop    ebx
c00103a5:	e9 cc f9 ff ff       	jmp    c000fd76 <VgaText::updateCursor()>
c00103aa:	3c 08                	cmp    al,0x8
c00103ac:	75 31                	jne    c00103df <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00103ae:	50                   	push   eax
c00103af:	50                   	push   eax
c00103b0:	6a 01                	push   0x1
c00103b2:	53                   	push   ebx
c00103b3:	e8 34 ff ff ff       	call   c00102ec <VgaText::decrementCursor(bool)>
c00103b8:	5a                   	pop    edx
c00103b9:	59                   	pop    ecx
c00103ba:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00103c0:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00103c6:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00103cc:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00103d2:	6a 20                	push   0x20
c00103d4:	53                   	push   ebx
c00103d5:	e8 90 fb ff ff       	call   c000ff6a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00103da:	83 c4 28             	add    esp,0x28
c00103dd:	5b                   	pop    ebx
c00103de:	c3                   	ret    
c00103df:	83 ec 08             	sub    esp,0x8
c00103e2:	0f be c0             	movsx  eax,al
c00103e5:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00103eb:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00103f1:	51                   	push   ecx
c00103f2:	52                   	push   edx
c00103f3:	50                   	push   eax
c00103f4:	53                   	push   ebx
c00103f5:	e8 70 fb ff ff       	call   c000ff6a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00103fa:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00103fe:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010406:	83 c4 28             	add    esp,0x28
c0010409:	5b                   	pop    ebx
c001040a:	e9 29 fc ff ff       	jmp    c0010038 <VgaText::incrementCursor(bool)>
c001040f:	90                   	nop

c0010410 <VgaText::isShowingCursor()>:
c0010410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010414:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c001041a:	c3                   	ret    
c001041b:	90                   	nop

c001041c <VgaText::isBlinkDisabled()>:
c001041c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010420:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010426:	83 f0 01             	xor    eax,0x1
c0010429:	c3                   	ret    

c001042a <VgaText::setCursorHeight(int)>:
c001042a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001042e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010432:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010438:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c001043f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010443:	e9 48 f9 ff ff       	jmp    c000fd90 <VgaText::showCursor(bool)>

c0010448 <VgaText::getCursorHeight()>:
c0010448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001044c:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010452:	c3                   	ret    

c0010453 <setActiveTerminal(VgaText*)>:
c0010453:	53                   	push   ebx
c0010454:	83 ec 08             	sub    esp,0x8
c0010457:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001045b:	85 db                	test   ebx,ebx
c001045d:	75 11                	jne    c0010470 <setActiveTerminal(VgaText*)+0x1d>
c001045f:	c7 44 24 10 ac 6c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026cac
c0010467:	83 c4 08             	add    esp,0x8
c001046a:	5b                   	pop    ebx
c001046b:	e9 53 85 00 00       	jmp    c00189c3 <Krnl::panic(char const*)>
c0010470:	50                   	push   eax
c0010471:	50                   	push   eax
c0010472:	53                   	push   ebx
c0010473:	68 ba 6c 02 c0       	push   0xc0026cba
c0010478:	e8 c8 1d 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001047d:	a1 24 a5 02 c0       	mov    eax,ds:0xc002a524
c0010482:	83 c4 10             	add    esp,0x10
c0010485:	85 c0                	test   eax,eax
c0010487:	74 0c                	je     c0010495 <setActiveTerminal(VgaText*)+0x42>
c0010489:	83 ec 0c             	sub    esp,0xc
c001048c:	50                   	push   eax
c001048d:	e8 e4 f8 ff ff       	call   c000fd76 <VgaText::updateCursor()>
c0010492:	83 c4 10             	add    esp,0x10
c0010495:	89 1d 24 a5 02 c0    	mov    DWORD PTR ds:0xc002a524,ebx
c001049b:	51                   	push   ecx
c001049c:	51                   	push   ecx
c001049d:	53                   	push   ebx
c001049e:	68 d2 6c 02 c0       	push   0xc0026cd2
c00104a3:	e8 9d 1d 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00104a8:	83 c4 0c             	add    esp,0xc
c00104ab:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00104b1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00104b7:	53                   	push   ebx
c00104b8:	e8 25 fb ff ff       	call   c000ffe2 <VgaText::setCursor(int, int)>
c00104bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00104c0:	e8 57 ff ff ff       	call   c001041c <VgaText::isBlinkDisabled()>
c00104c5:	5a                   	pop    edx
c00104c6:	0f b6 c0             	movzx  eax,al
c00104c9:	59                   	pop    ecx
c00104ca:	50                   	push   eax
c00104cb:	53                   	push   ebx
c00104cc:	e8 cf f8 ff ff       	call   c000fda0 <VgaText::disableBlink(bool)>
c00104d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00104d4:	e8 6f ff ff ff       	call   c0010448 <VgaText::getCursorHeight()>
c00104d9:	5a                   	pop    edx
c00104da:	59                   	pop    ecx
c00104db:	50                   	push   eax
c00104dc:	53                   	push   ebx
c00104dd:	e8 48 ff ff ff       	call   c001042a <VgaText::setCursorHeight(int)>
c00104e2:	83 c4 10             	add    esp,0x10
c00104e5:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00104ec:	75 0a                	jne    c00104f8 <setActiveTerminal(VgaText*)+0xa5>
c00104ee:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00104f8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104fc:	83 c4 08             	add    esp,0x8
c00104ff:	5b                   	pop    ebx
c0010500:	e9 1d f8 ff ff       	jmp    c000fd22 <VgaText::load()>

c0010505 <doTerminalCycle()>:
c0010505:	83 ec 18             	sub    esp,0x18
c0010508:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c001050d:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010513:	50                   	push   eax
c0010514:	a3 20 a5 02 c0       	mov    ds:0xc002a520,eax
c0010519:	e8 35 ff ff ff       	call   c0010453 <setActiveTerminal(VgaText*)>
c001051e:	83 c4 1c             	add    esp,0x1c
c0010521:	c3                   	ret    

c0010522 <VgaText::doUpdate()>:
c0010522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010526:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c001052c:	85 c0                	test   eax,eax
c001052e:	74 02                	je     c0010532 <VgaText::doUpdate()+0x10>
c0010530:	ff e0                	jmp    eax
c0010532:	c3                   	ret    
c0010533:	90                   	nop

c0010534 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010534:	55                   	push   ebp
c0010535:	57                   	push   edi
c0010536:	56                   	push   esi
c0010537:	53                   	push   ebx
c0010538:	83 ec 1c             	sub    esp,0x1c
c001053b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001053f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010544:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c001054b:	8d 7d 0c             	lea    edi,[ebp+0xc]
c001054e:	50                   	push   eax
c001054f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010554:	50                   	push   eax
c0010555:	e8 58 f9 ff ff       	call   c000feb2 <VgaText::combineColours(unsigned char, unsigned char)>
c001055a:	59                   	pop    ecx
c001055b:	0f b6 c0             	movzx  eax,al
c001055e:	5b                   	pop    ebx
c001055f:	31 c9                	xor    ecx,ecx
c0010561:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010569:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001056d:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010573:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010577:	0f b7 db             	movzx  ebx,bx
c001057a:	01 db                	add    ebx,ebx
c001057c:	01 fb                	add    ebx,edi
c001057e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010581:	84 c0                	test   al,al
c0010583:	0f 84 38 01 00 00    	je     c00106c1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010589:	3c 0d                	cmp    al,0xd
c001058b:	75 0f                	jne    c001059c <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c001058d:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010597:	e9 1f 01 00 00       	jmp    c00106bb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001059c:	3c 0a                	cmp    al,0xa
c001059e:	75 5b                	jne    c00105fb <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00105a0:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00105a6:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105b0:	8d 48 01             	lea    ecx,[eax+0x1]
c00105b3:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00105b9:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00105bf:	75 12                	jne    c00105d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00105c1:	83 ec 0c             	sub    esp,0xc
c00105c4:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00105ca:	55                   	push   ebp
c00105cb:	e8 f4 f8 ff ff       	call   c000fec4 <VgaText::scrollScreen()>
c00105d0:	83 c4 10             	add    esp,0x10
c00105d3:	83 ec 0c             	sub    esp,0xc
c00105d6:	55                   	push   ebp
c00105d7:	e8 9a f7 ff ff       	call   c000fd76 <VgaText::updateCursor()>
c00105dc:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00105e4:	83 c4 10             	add    esp,0x10
c00105e7:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00105ed:	31 c9                	xor    ecx,ecx
c00105ef:	0f b7 db             	movzx  ebx,bx
c00105f2:	01 db                	add    ebx,ebx
c00105f4:	01 fb                	add    ebx,edi
c00105f6:	e9 c0 00 00 00       	jmp    c00106bb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00105fb:	3c 08                	cmp    al,0x8
c00105fd:	75 4e                	jne    c001064d <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c00105ff:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010603:	53                   	push   ebx
c0010604:	53                   	push   ebx
c0010605:	6a 01                	push   0x1
c0010607:	55                   	push   ebp
c0010608:	e8 df fc ff ff       	call   c00102ec <VgaText::decrementCursor(bool)>
c001060d:	58                   	pop    eax
c001060e:	5a                   	pop    edx
c001060f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010615:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c001061b:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010621:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010627:	6a 20                	push   0x20
c0010629:	55                   	push   ebp
c001062a:	e8 3b f9 ff ff       	call   c000ff6a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001062f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010637:	83 c4 20             	add    esp,0x20
c001063a:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010640:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010644:	0f b7 db             	movzx  ebx,bx
c0010647:	01 db                	add    ebx,ebx
c0010649:	01 fb                	add    ebx,edi
c001064b:	eb 6e                	jmp    c00106bb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001064d:	51                   	push   ecx
c001064e:	51                   	push   ecx
c001064f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010653:	50                   	push   eax
c0010654:	e8 ff f8 ff ff       	call   c000ff58 <VgaText::combineCharAndColour(char, unsigned char)>
c0010659:	83 c4 10             	add    esp,0x10
c001065c:	66 89 03             	mov    WORD PTR [ebx],ax
c001065f:	39 2d 24 a5 02 c0    	cmp    DWORD PTR ds:0xc002a524,ebp
c0010665:	75 2a                	jne    c0010691 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010667:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c001066d:	85 c0                	test   eax,eax
c001066f:	74 20                	je     c0010691 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010671:	52                   	push   edx
c0010672:	52                   	push   edx
c0010673:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010679:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c001067f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010683:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010687:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c001068a:	51                   	push   ecx
c001068b:	55                   	push   ebp
c001068c:	ff d0                	call   eax
c001068e:	83 c4 20             	add    esp,0x20
c0010691:	83 c3 02             	add    ebx,0x2
c0010694:	50                   	push   eax
c0010695:	50                   	push   eax
c0010696:	6a 00                	push   0x0
c0010698:	55                   	push   ebp
c0010699:	e8 9a f9 ff ff       	call   c0010038 <VgaText::incrementCursor(bool)>
c001069e:	83 c4 10             	add    esp,0x10
c00106a1:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00106a8:	75 0f                	jne    c00106b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00106aa:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00106b2:	0f b7 db             	movzx  ebx,bx
c00106b5:	01 db                	add    ebx,ebx
c00106b7:	01 fb                	add    ebx,edi
c00106b9:	b1 01                	mov    cl,0x1
c00106bb:	46                   	inc    esi
c00106bc:	e9 bd fe ff ff       	jmp    c001057e <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c00106c1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00106c5:	83 ec 0c             	sub    esp,0xc
c00106c8:	55                   	push   ebp
c00106c9:	e8 a8 f6 ff ff       	call   c000fd76 <VgaText::updateCursor()>
c00106ce:	83 c4 10             	add    esp,0x10
c00106d1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00106d5:	84 c9                	test   cl,cl
c00106d7:	74 0c                	je     c00106e5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c00106d9:	83 ec 0c             	sub    esp,0xc
c00106dc:	55                   	push   ebp
c00106dd:	e8 40 fe ff ff       	call   c0010522 <VgaText::doUpdate()>
c00106e2:	83 c4 10             	add    esp,0x10
c00106e5:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c00106ec:	83 c4 1c             	add    esp,0x1c
c00106ef:	5b                   	pop    ebx
c00106f0:	5e                   	pop    esi
c00106f1:	5f                   	pop    edi
c00106f2:	5d                   	pop    ebp
c00106f3:	c3                   	ret    

c00106f4 <VgaText::clearScreen()>:
c00106f4:	57                   	push   edi
c00106f5:	56                   	push   esi
c00106f6:	31 f6                	xor    esi,esi
c00106f8:	53                   	push   ebx
c00106f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106fd:	52                   	push   edx
c00106fe:	6a 00                	push   0x0
c0010700:	6a 00                	push   0x0
c0010702:	53                   	push   ebx
c0010703:	e8 da f8 ff ff       	call   c000ffe2 <VgaText::setCursor(int, int)>
c0010708:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c001070f:	83 c4 10             	add    esp,0x10
c0010712:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010718:	7e 26                	jle    c0010740 <VgaText::clearScreen()+0x4c>
c001071a:	31 ff                	xor    edi,edi
c001071c:	50                   	push   eax
c001071d:	50                   	push   eax
c001071e:	56                   	push   esi
c001071f:	57                   	push   edi
c0010720:	47                   	inc    edi
c0010721:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010727:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001072d:	6a 20                	push   0x20
c001072f:	53                   	push   ebx
c0010730:	e8 35 f8 ff ff       	call   c000ff6a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010735:	83 c4 20             	add    esp,0x20
c0010738:	83 ff 50             	cmp    edi,0x50
c001073b:	75 df                	jne    c001071c <VgaText::clearScreen()+0x28>
c001073d:	46                   	inc    esi
c001073e:	eb d2                	jmp    c0010712 <VgaText::clearScreen()+0x1e>
c0010740:	83 ec 0c             	sub    esp,0xc
c0010743:	53                   	push   ebx
c0010744:	e8 d9 fd ff ff       	call   c0010522 <VgaText::doUpdate()>
c0010749:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010750:	83 c4 10             	add    esp,0x10
c0010753:	5b                   	pop    ebx
c0010754:	5e                   	pop    esi
c0010755:	5f                   	pop    edi
c0010756:	c3                   	ret    
c0010757:	90                   	nop

c0010758 <VgaText::putchar(char)>:
c0010758:	56                   	push   esi
c0010759:	53                   	push   ebx
c001075a:	83 ec 14             	sub    esp,0x14
c001075d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010761:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010765:	3c 5b                	cmp    al,0x5b
c0010767:	75 21                	jne    c001078a <VgaText::putchar(char)+0x32>
c0010769:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010770:	74 28                	je     c001079a <VgaText::putchar(char)+0x42>
c0010772:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c001077b:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010785:	e9 e2 00 00 00       	jmp    c001086c <VgaText::putchar(char)+0x114>
c001078a:	3c 1b                	cmp    al,0x1b
c001078c:	75 0c                	jne    c001079a <VgaText::putchar(char)+0x42>
c001078e:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010795:	e9 d2 00 00 00       	jmp    c001086c <VgaText::putchar(char)+0x114>
c001079a:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00107a0:	84 c9                	test   cl,cl
c00107a2:	0f 84 ab 00 00 00    	je     c0010853 <VgaText::putchar(char)+0xfb>
c00107a8:	8d 50 c0             	lea    edx,[eax-0x40]
c00107ab:	80 fa 3e             	cmp    dl,0x3e
c00107ae:	0f 87 82 00 00 00    	ja     c0010836 <VgaText::putchar(char)+0xde>
c00107b4:	3c 6d                	cmp    al,0x6d
c00107b6:	75 4d                	jne    c0010805 <VgaText::putchar(char)+0xad>
c00107b8:	31 f6                	xor    esi,esi
c00107ba:	31 d2                	xor    edx,edx
c00107bc:	31 c0                	xor    eax,eax
c00107be:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00107c4:	7e 30                	jle    c00107f6 <VgaText::putchar(char)+0x9e>
c00107c6:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00107ce:	80 fa 3b             	cmp    dl,0x3b
c00107d1:	75 17                	jne    c00107ea <VgaText::putchar(char)+0x92>
c00107d3:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00107d7:	50                   	push   eax
c00107d8:	53                   	push   ebx
c00107d9:	e8 fc f5 ff ff       	call   c000fdda <VgaText::doANSI_SGR(int)>
c00107de:	59                   	pop    ecx
c00107df:	31 d2                	xor    edx,edx
c00107e1:	58                   	pop    eax
c00107e2:	31 c0                	xor    eax,eax
c00107e4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107e8:	eb 09                	jmp    c00107f3 <VgaText::putchar(char)+0x9b>
c00107ea:	6b c0 0a             	imul   eax,eax,0xa
c00107ed:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107f1:	88 ca                	mov    dl,cl
c00107f3:	46                   	inc    esi
c00107f4:	eb c8                	jmp    c00107be <VgaText::putchar(char)+0x66>
c00107f6:	84 d2                	test   dl,dl
c00107f8:	74 31                	je     c001082b <VgaText::putchar(char)+0xd3>
c00107fa:	50                   	push   eax
c00107fb:	53                   	push   ebx
c00107fc:	e8 d9 f5 ff ff       	call   c000fdda <VgaText::doANSI_SGR(int)>
c0010801:	58                   	pop    eax
c0010802:	5a                   	pop    edx
c0010803:	eb 26                	jmp    c001082b <VgaText::putchar(char)+0xd3>
c0010805:	3c 4a                	cmp    al,0x4a
c0010807:	75 22                	jne    c001082b <VgaText::putchar(char)+0xd3>
c0010809:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010810:	75 19                	jne    c001082b <VgaText::putchar(char)+0xd3>
c0010812:	83 ec 0c             	sub    esp,0xc
c0010815:	53                   	push   ebx
c0010816:	e8 d9 fe ff ff       	call   c00106f4 <VgaText::clearScreen()>
c001081b:	83 c4 0c             	add    esp,0xc
c001081e:	6a 00                	push   0x0
c0010820:	6a 00                	push   0x0
c0010822:	53                   	push   ebx
c0010823:	e8 ba f7 ff ff       	call   c000ffe2 <VgaText::setCursor(int, int)>
c0010828:	83 c4 10             	add    esp,0x10
c001082b:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010834:	eb 36                	jmp    c001086c <VgaText::putchar(char)+0x114>
c0010836:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001083c:	83 fa 0e             	cmp    edx,0xe
c001083f:	7f 2b                	jg     c001086c <VgaText::putchar(char)+0x114>
c0010841:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010844:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001084a:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010851:	eb 19                	jmp    c001086c <VgaText::putchar(char)+0x114>
c0010853:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010859:	0f be c0             	movsx  eax,al
c001085c:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010862:	50                   	push   eax
c0010863:	53                   	push   ebx
c0010864:	e8 ab fa ff ff       	call   c0010314 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010869:	83 c4 10             	add    esp,0x10
c001086c:	83 c4 14             	add    esp,0x14
c001086f:	5b                   	pop    ebx
c0010870:	5e                   	pop    esi
c0010871:	c3                   	ret    

c0010872 <VgaText::puts(char const*)>:
c0010872:	53                   	push   ebx
c0010873:	83 ec 08             	sub    esp,0x8
c0010876:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001087a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001087d:	84 c0                	test   al,al
c001087f:	74 12                	je     c0010893 <VgaText::puts(char const*)+0x21>
c0010881:	43                   	inc    ebx
c0010882:	51                   	push   ecx
c0010883:	51                   	push   ecx
c0010884:	50                   	push   eax
c0010885:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010889:	e8 ca fe ff ff       	call   c0010758 <VgaText::putchar(char)>
c001088e:	83 c4 10             	add    esp,0x10
c0010891:	eb e7                	jmp    c001087a <VgaText::puts(char const*)+0x8>
c0010893:	83 c4 08             	add    esp,0x8
c0010896:	5b                   	pop    ebx
c0010897:	c3                   	ret    

c0010898 <VgaText::putx(unsigned int)>:
c0010898:	57                   	push   edi
c0010899:	b9 11 00 00 00       	mov    ecx,0x11
c001089e:	56                   	push   esi
c001089f:	be ee 6c 02 c0       	mov    esi,0xc0026cee
c00108a4:	53                   	push   ebx
c00108a5:	83 ec 20             	sub    esp,0x20
c00108a8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00108ac:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00108b0:	fc                   	cld    
c00108b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00108b3:	be 08 00 00 00       	mov    esi,0x8
c00108b8:	50                   	push   eax
c00108b9:	50                   	push   eax
c00108ba:	89 d8                	mov    eax,ebx
c00108bc:	c1 e3 04             	shl    ebx,0x4
c00108bf:	c1 e8 1c             	shr    eax,0x1c
c00108c2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00108c7:	50                   	push   eax
c00108c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00108cc:	e8 87 fe ff ff       	call   c0010758 <VgaText::putchar(char)>
c00108d1:	83 c4 10             	add    esp,0x10
c00108d4:	4e                   	dec    esi
c00108d5:	75 e1                	jne    c00108b8 <VgaText::putx(unsigned int)+0x20>
c00108d7:	83 c4 20             	add    esp,0x20
c00108da:	5b                   	pop    ebx
c00108db:	5e                   	pop    esi
c00108dc:	5f                   	pop    edi
c00108dd:	c3                   	ret    

c00108de <VgaText::VgaText(char const*)>:
c00108de:	57                   	push   edi
c00108df:	56                   	push   esi
c00108e0:	53                   	push   ebx
c00108e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e5:	83 ec 08             	sub    esp,0x8
c00108e8:	6a 00                	push   0x0
c00108ea:	50                   	push   eax
c00108eb:	e8 6e 05 00 00       	call   c0010e5e <UnixFile::UnixFile(int)>
c00108f0:	83 c4 10             	add    esp,0x10
c00108f3:	ba 54 6d 02 c0       	mov    edx,0xc0026d54
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	89 10                	mov    DWORD PTR [eax],edx
c00108fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010902:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001090c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010910:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001091a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091e:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010929:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010934:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001093e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010942:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001094c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010950:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095b:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010966:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001096c:	bb 00 a5 02 c0       	mov    ebx,0xc002a500
c0010971:	b8 08 00 00 00       	mov    eax,0x8
c0010976:	fc                   	cld    
c0010977:	89 d7                	mov    edi,edx
c0010979:	89 de                	mov    esi,ebx
c001097b:	89 c1                	mov    ecx,eax
c001097d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001097f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010983:	05 1e 10 00 00       	add    eax,0x101e
c0010988:	83 ec 08             	sub    esp,0x8
c001098b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001098f:	50                   	push   eax
c0010990:	e8 87 fd fe ff       	call   c000071c <strcpy>
c0010995:	83 c4 10             	add    esp,0x10
c0010998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099c:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00109a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109aa:	83 c0 0c             	add    eax,0xc
c00109ad:	83 ec 04             	sub    esp,0x4
c00109b0:	68 00 0f 00 00       	push   0xf00
c00109b5:	6a 00                	push   0x0
c00109b7:	50                   	push   eax
c00109b8:	e8 c0 fc fe ff       	call   c000067d <memset>
c00109bd:	83 c4 10             	add    esp,0x10
c00109c0:	83 ec 04             	sub    esp,0x4
c00109c3:	6a 00                	push   0x0
c00109c5:	6a 07                	push   0x7
c00109c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109cb:	e8 c2 f4 ff ff       	call   c000fe92 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00109d0:	83 c4 10             	add    esp,0x10
c00109d3:	83 ec 08             	sub    esp,0x8
c00109d6:	6a 02                	push   0x2
c00109d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109dc:	e8 49 fa ff ff       	call   c001042a <VgaText::setCursorHeight(int)>
c00109e1:	83 c4 10             	add    esp,0x10
c00109e4:	83 ec 04             	sub    esp,0x4
c00109e7:	6a 00                	push   0x0
c00109e9:	6a 00                	push   0x0
c00109eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109ef:	e8 ee f5 ff ff       	call   c000ffe2 <VgaText::setCursor(int, int)>
c00109f4:	83 c4 10             	add    esp,0x10
c00109f7:	83 ec 08             	sub    esp,0x8
c00109fa:	6a 01                	push   0x1
c00109fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a00:	e8 8b f3 ff ff       	call   c000fd90 <VgaText::showCursor(bool)>
c0010a05:	83 c4 10             	add    esp,0x10
c0010a08:	83 ec 08             	sub    esp,0x8
c0010a0b:	6a 01                	push   0x1
c0010a0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a11:	e8 8a f3 ff ff       	call   c000fda0 <VgaText::disableBlink(bool)>
c0010a16:	83 c4 10             	add    esp,0x10
c0010a19:	83 ec 0c             	sub    esp,0xc
c0010a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a20:	e8 cf fc ff ff       	call   c00106f4 <VgaText::clearScreen()>
c0010a25:	83 c4 10             	add    esp,0x10
c0010a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a2c:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a37:	05 9e 10 00 00       	add    eax,0x109e
c0010a3c:	83 ec 04             	sub    esp,0x4
c0010a3f:	68 96 00 00 00       	push   0x96
c0010a44:	6a 00                	push   0x0
c0010a46:	50                   	push   eax
c0010a47:	e8 31 fc fe ff       	call   c000067d <memset>
c0010a4c:	83 c4 10             	add    esp,0x10
c0010a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a53:	05 34 11 00 00       	add    eax,0x1134
c0010a58:	83 ec 04             	sub    esp,0x4
c0010a5b:	68 2c 01 00 00       	push   0x12c
c0010a60:	6a 00                	push   0x0
c0010a62:	50                   	push   eax
c0010a63:	e8 15 fc fe ff       	call   c000067d <memset>
c0010a68:	83 c4 10             	add    esp,0x10
c0010a6b:	90                   	nop
c0010a6c:	5b                   	pop    ebx
c0010a6d:	5e                   	pop    esi
c0010a6e:	5f                   	pop    edi
c0010a6f:	c3                   	ret    

c0010a70 <VgaText::receiveKey(unsigned char)>:
c0010a70:	55                   	push   ebp
c0010a71:	57                   	push   edi
c0010a72:	56                   	push   esi
c0010a73:	53                   	push   ebx
c0010a74:	83 ec 1c             	sub    esp,0x1c
c0010a77:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a7f:	84 db                	test   bl,bl
c0010a81:	0f 84 c9 00 00 00    	je     c0010b50 <VgaText::receiveKey(unsigned char)+0xe0>
c0010a87:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010a8d:	80 fb 08             	cmp    bl,0x8
c0010a90:	75 2c                	jne    c0010abe <VgaText::receiveKey(unsigned char)+0x4e>
c0010a92:	83 ec 0c             	sub    esp,0xc
c0010a95:	57                   	push   edi
c0010a96:	e8 ff fb fe ff       	call   c000069a <strlen>
c0010a9b:	83 c4 10             	add    esp,0x10
c0010a9e:	85 c0                	test   eax,eax
c0010aa0:	74 41                	je     c0010ae3 <VgaText::receiveKey(unsigned char)+0x73>
c0010aa2:	50                   	push   eax
c0010aa3:	50                   	push   eax
c0010aa4:	6a 08                	push   0x8
c0010aa6:	56                   	push   esi
c0010aa7:	e8 ac fc ff ff       	call   c0010758 <VgaText::putchar(char)>
c0010aac:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010aaf:	e8 e6 fb fe ff       	call   c000069a <strlen>
c0010ab4:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010abc:	eb 22                	jmp    c0010ae0 <VgaText::receiveKey(unsigned char)+0x70>
c0010abe:	0f be c3             	movsx  eax,bl
c0010ac1:	52                   	push   edx
c0010ac2:	52                   	push   edx
c0010ac3:	50                   	push   eax
c0010ac4:	56                   	push   esi
c0010ac5:	e8 8e fc ff ff       	call   c0010758 <VgaText::putchar(char)>
c0010aca:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010ace:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010ad3:	59                   	pop    ecx
c0010ad4:	5d                   	pop    ebp
c0010ad5:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010ad9:	50                   	push   eax
c0010ada:	57                   	push   edi
c0010adb:	e8 f3 fc fe ff       	call   c00007d3 <strcat>
c0010ae0:	83 c4 10             	add    esp,0x10
c0010ae3:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010aea:	75 05                	jne    c0010af1 <VgaText::receiveKey(unsigned char)+0x81>
c0010aec:	80 fb 0a             	cmp    bl,0xa
c0010aef:	75 53                	jne    c0010b44 <VgaText::receiveKey(unsigned char)+0xd4>
c0010af1:	83 ec 0c             	sub    esp,0xc
c0010af4:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010afa:	53                   	push   ebx
c0010afb:	e8 9a fb fe ff       	call   c000069a <strlen>
c0010b00:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b03:	89 c5                	mov    ebp,eax
c0010b05:	e8 90 fb fe ff       	call   c000069a <strlen>
c0010b0a:	83 c4 10             	add    esp,0x10
c0010b0d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010b11:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010b16:	76 10                	jbe    c0010b28 <VgaText::receiveKey(unsigned char)+0xb8>
c0010b18:	83 ec 0c             	sub    esp,0xc
c0010b1b:	68 ff 6c 02 c0       	push   0xc0026cff
c0010b20:	e8 9e 7e 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0010b25:	83 c4 10             	add    esp,0x10
c0010b28:	50                   	push   eax
c0010b29:	50                   	push   eax
c0010b2a:	57                   	push   edi
c0010b2b:	53                   	push   ebx
c0010b2c:	e8 a2 fc fe ff       	call   c00007d3 <strcat>
c0010b31:	83 c4 0c             	add    esp,0xc
c0010b34:	68 96 00 00 00       	push   0x96
c0010b39:	6a 00                	push   0x0
c0010b3b:	57                   	push   edi
c0010b3c:	e8 3c fb fe ff       	call   c000067d <memset>
c0010b41:	83 c4 10             	add    esp,0x10
c0010b44:	83 ec 0c             	sub    esp,0xc
c0010b47:	56                   	push   esi
c0010b48:	e8 d5 f9 ff ff       	call   c0010522 <VgaText::doUpdate()>
c0010b4d:	83 c4 10             	add    esp,0x10
c0010b50:	83 c4 1c             	add    esp,0x1c
c0010b53:	5b                   	pop    ebx
c0010b54:	5e                   	pop    esi
c0010b55:	5f                   	pop    edi
c0010b56:	5d                   	pop    ebp
c0010b57:	c3                   	ret    

c0010b58 <VgaText::write(unsigned long long, void*, int*)>:
c0010b58:	55                   	push   ebp
c0010b59:	57                   	push   edi
c0010b5a:	56                   	push   esi
c0010b5b:	53                   	push   ebx
c0010b5c:	83 ec 0c             	sub    esp,0xc
c0010b5f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010b63:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010b67:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010b6b:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010b72:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b75:	39 eb                	cmp    ebx,ebp
c0010b77:	74 13                	je     c0010b8c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b79:	43                   	inc    ebx
c0010b7a:	50                   	push   eax
c0010b7b:	50                   	push   eax
c0010b7c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b80:	50                   	push   eax
c0010b81:	56                   	push   esi
c0010b82:	e8 d1 fb ff ff       	call   c0010758 <VgaText::putchar(char)>
c0010b87:	83 c4 10             	add    esp,0x10
c0010b8a:	eb e9                	jmp    c0010b75 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b8c:	83 ec 0c             	sub    esp,0xc
c0010b8f:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010b96:	56                   	push   esi
c0010b97:	e8 86 f9 ff ff       	call   c0010522 <VgaText::doUpdate()>
c0010b9c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010ba0:	89 38                	mov    DWORD PTR [eax],edi
c0010ba2:	83 c4 1c             	add    esp,0x1c
c0010ba5:	31 c0                	xor    eax,eax
c0010ba7:	5b                   	pop    ebx
c0010ba8:	5e                   	pop    esi
c0010ba9:	5f                   	pop    edi
c0010baa:	5d                   	pop    ebp
c0010bab:	c3                   	ret    

c0010bac <newTerminal(char*)>:
c0010bac:	83 ec 28             	sub    esp,0x28
c0010baf:	68 60 12 00 00       	push   0x1260
c0010bb4:	e8 9d 15 00 00       	call   c0012156 <operator new(unsigned long)>
c0010bb9:	5a                   	pop    edx
c0010bba:	59                   	pop    ecx
c0010bbb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010bbf:	50                   	push   eax
c0010bc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010bc4:	e8 15 fd ff ff       	call   c00108de <VgaText::VgaText(char const*)>
c0010bc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010bcd:	83 c4 2c             	add    esp,0x2c
c0010bd0:	c3                   	ret    
c0010bd1:	90                   	nop

c0010bd2 <TSS::TSS()>:
c0010bd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bdd:	90                   	nop
c0010bde:	c3                   	ret    
c0010bdf:	90                   	nop

c0010be0 <TSS::setESP(unsigned long)>:
c0010be0:	55                   	push   ebp
c0010be1:	89 e5                	mov    ebp,esp
c0010be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bef:	90                   	nop
c0010bf0:	5d                   	pop    ebp
c0010bf1:	c3                   	ret    

c0010bf2 <TSS::flush()>:
c0010bf2:	55                   	push   ebp
c0010bf3:	89 e5                	mov    ebp,esp
c0010bf5:	83 ec 10             	sub    esp,0x10
c0010bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bfd:	83 c8 03             	or     eax,0x3
c0010c00:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010c04:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010c08:	66 89 d0             	mov    ax,dx
c0010c0b:	0f 00 d8             	ltr    ax
c0010c0e:	90                   	nop
c0010c0f:	c9                   	leave  
c0010c10:	c3                   	ret    
c0010c11:	90                   	nop

c0010c12 <TSS::setup(unsigned long, unsigned long)>:
c0010c12:	55                   	push   ebp
c0010c13:	89 e5                	mov    ebp,esp
c0010c15:	83 ec 18             	sub    esp,0x18
c0010c18:	83 ec 0c             	sub    esp,0xc
c0010c1b:	6a 68                	push   0x68
c0010c1d:	e8 fc e4 ff ff       	call   c000f11e <malloc>
c0010c22:	83 c4 10             	add    esp,0x10
c0010c25:	89 c2                	mov    edx,eax
c0010c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c33:	83 ec 04             	sub    esp,0x4
c0010c36:	6a 68                	push   0x68
c0010c38:	6a 00                	push   0x0
c0010c3a:	50                   	push   eax
c0010c3b:	e8 3d fa fe ff       	call   c000067d <memset>
c0010c40:	83 c4 10             	add    esp,0x10
c0010c43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c49:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c55:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010c5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c61:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c6d:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c79:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c85:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c91:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c9d:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010ca3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ca6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ca9:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010caf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cb5:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010cb8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cc1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010cc4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010cc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ccd:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cda:	0f 20 da             	mov    edx,cr3
c0010cdd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010ce0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010ce3:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010ce6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ce9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cec:	83 ec 08             	sub    esp,0x8
c0010cef:	50                   	push   eax
c0010cf0:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010cf3:	50                   	push   eax
c0010cf4:	e8 03 dc ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c0010cf9:	83 c4 10             	add    esp,0x10
c0010cfc:	83 ec 08             	sub    esp,0x8
c0010cff:	6a 68                	push   0x68
c0010d01:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010d04:	50                   	push   eax
c0010d05:	e8 0e dc ff ff       	call   c000e918 <GDTEntry::setLimit(unsigned int)>
c0010d0a:	83 c4 10             	add    esp,0x10
c0010d0d:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010d11:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010d14:	83 e0 0f             	and    eax,0xf
c0010d17:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010d1a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010d1d:	83 c8 40             	or     eax,0x40
c0010d20:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010d23:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0010d28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d2e:	05 78 01 00 00       	add    eax,0x178
c0010d33:	83 ec 04             	sub    esp,0x4
c0010d36:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010d39:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010d3c:	50                   	push   eax
c0010d3d:	e8 0a dc ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c0010d42:	83 c4 10             	add    esp,0x10
c0010d45:	89 c2                	mov    edx,eax
c0010d47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d4a:	89 10                	mov    DWORD PTR [eax],edx
c0010d4c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0010d51:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d57:	05 78 01 00 00       	add    eax,0x178
c0010d5c:	83 ec 0c             	sub    esp,0xc
c0010d5f:	50                   	push   eax
c0010d60:	e8 2b dc ff ff       	call   c000e990 <GDT::flush()>
c0010d65:	83 c4 10             	add    esp,0x10
c0010d68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d6d:	83 ec 08             	sub    esp,0x8
c0010d70:	50                   	push   eax
c0010d71:	68 68 6d 02 c0       	push   0xc0026d68
c0010d76:	e8 ca 14 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0010d7b:	83 c4 10             	add    esp,0x10
c0010d7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d81:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d83:	c9                   	leave  
c0010d84:	c3                   	ret    
c0010d85:	90                   	nop

c0010d86 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d8a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d91:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d96:	75 08                	jne    c0010da0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010d98:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d9e:	eb 38                	jmp    c0010dd8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010da0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010da5:	75 17                	jne    c0010dbe <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010da7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010daf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010db5:	8b 10                	mov    edx,DWORD PTR [eax]
c0010db7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dbb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010dbe:	89 c1                	mov    ecx,eax
c0010dc0:	83 e1 fd             	and    ecx,0xfffffffd
c0010dc3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010dc9:	74 cd                	je     c0010d98 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010dcb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dd0:	83 e0 ef             	and    eax,0xffffffef
c0010dd3:	83 f8 08             	cmp    eax,0x8
c0010dd6:	76 c0                	jbe    c0010d98 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010dd8:	31 c0                	xor    eax,eax
c0010dda:	c3                   	ret    
c0010ddb:	90                   	nop

c0010ddc <ReservedFilename::isAtty()>:
c0010ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010de0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010de3:	31 c0                	xor    eax,eax
c0010de5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010deb:	74 09                	je     c0010df6 <ReservedFilename::isAtty()+0x1a>
c0010ded:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010df3:	0f 94 c0             	sete   al
c0010df6:	c3                   	ret    
c0010df7:	90                   	nop

c0010df8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010df8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dfc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010e00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e07:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010e0c:	75 08                	jne    c0010e16 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010e0e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010e14:	eb 3d                	jmp    c0010e53 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e16:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010e1b:	75 17                	jne    c0010e34 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010e1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010e25:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010e2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e31:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010e34:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e39:	75 04                	jne    c0010e3f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010e3b:	89 0a                	mov    DWORD PTR [edx],ecx
c0010e3d:	eb 14                	jmp    c0010e53 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e3f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010e44:	74 c8                	je     c0010e0e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e46:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010e4b:	83 e0 ef             	and    eax,0xffffffef
c0010e4e:	83 f8 08             	cmp    eax,0x8
c0010e51:	76 bb                	jbe    c0010e0e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e53:	31 c0                	xor    eax,eax
c0010e55:	c3                   	ret    

c0010e56 <UnixFile::getFileDescriptor()>:
c0010e56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e5d:	c3                   	ret    

c0010e5e <UnixFile::UnixFile(int)>:
c0010e5e:	53                   	push   ebx
c0010e5f:	83 ec 18             	sub    esp,0x18
c0010e62:	ba 54 6e 02 c0       	mov    edx,0xc0026e54
c0010e67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e6b:	89 10                	mov    DWORD PTR [eax],edx
c0010e6d:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c0010e75:	0f 8f 4d 01 00 00    	jg     c0010fc8 <UnixFile::UnixFile(int)+0x16a>
c0010e7b:	a1 80 94 02 c0       	mov    eax,ds:0xc0029480
c0010e80:	8d 50 01             	lea    edx,[eax+0x1]
c0010e83:	89 15 80 94 02 c0    	mov    DWORD PTR ds:0xc0029480,edx
c0010e89:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010e8d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e90:	83 ec 08             	sub    esp,0x8
c0010e93:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010e97:	68 b8 a5 02 c0       	push   0xc002a5b8
c0010e9c:	e8 2f 43 01 00       	call   c00251d0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010ea1:	83 c4 10             	add    esp,0x10
c0010ea4:	a0 b4 a5 02 c0       	mov    al,ds:0xc002a5b4
c0010ea9:	83 f0 01             	xor    eax,0x1
c0010eac:	84 c0                	test   al,al
c0010eae:	0f 84 15 01 00 00    	je     c0010fc9 <UnixFile::UnixFile(int)+0x16b>
c0010eb4:	c6 05 b4 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a5b4,0x1
c0010ebb:	83 ec 0c             	sub    esp,0xc
c0010ebe:	6a 0c                	push   0xc
c0010ec0:	e8 91 12 00 00       	call   c0012156 <operator new(unsigned long)>
c0010ec5:	83 c4 10             	add    esp,0x10
c0010ec8:	89 c3                	mov    ebx,eax
c0010eca:	83 ec 08             	sub    esp,0x8
c0010ecd:	68 03 ff ff 0f       	push   0xfffff03
c0010ed2:	53                   	push   ebx
c0010ed3:	e8 f6 00 00 00       	call   c0010fce <ReservedFilename::ReservedFilename(int)>
c0010ed8:	83 c4 10             	add    esp,0x10
c0010edb:	89 1d ac a5 02 c0    	mov    DWORD PTR ds:0xc002a5ac,ebx
c0010ee1:	83 ec 0c             	sub    esp,0xc
c0010ee4:	6a 0c                	push   0xc
c0010ee6:	e8 6b 12 00 00       	call   c0012156 <operator new(unsigned long)>
c0010eeb:	83 c4 10             	add    esp,0x10
c0010eee:	89 c3                	mov    ebx,eax
c0010ef0:	83 ec 08             	sub    esp,0x8
c0010ef3:	68 01 ff ff 0f       	push   0xfffff01
c0010ef8:	53                   	push   ebx
c0010ef9:	e8 d0 00 00 00       	call   c0010fce <ReservedFilename::ReservedFilename(int)>
c0010efe:	83 c4 10             	add    esp,0x10
c0010f01:	89 1d b0 a5 02 c0    	mov    DWORD PTR ds:0xc002a5b0,ebx
c0010f07:	83 ec 0c             	sub    esp,0xc
c0010f0a:	6a 0c                	push   0xc
c0010f0c:	e8 45 12 00 00       	call   c0012156 <operator new(unsigned long)>
c0010f11:	83 c4 10             	add    esp,0x10
c0010f14:	89 c3                	mov    ebx,eax
c0010f16:	83 ec 08             	sub    esp,0x8
c0010f19:	68 00 ff ff 0f       	push   0xfffff00
c0010f1e:	53                   	push   ebx
c0010f1f:	e8 aa 00 00 00       	call   c0010fce <ReservedFilename::ReservedFilename(int)>
c0010f24:	83 c4 10             	add    esp,0x10
c0010f27:	89 1d a4 a5 02 c0    	mov    DWORD PTR ds:0xc002a5a4,ebx
c0010f2d:	83 ec 0c             	sub    esp,0xc
c0010f30:	6a 0c                	push   0xc
c0010f32:	e8 1f 12 00 00       	call   c0012156 <operator new(unsigned long)>
c0010f37:	83 c4 10             	add    esp,0x10
c0010f3a:	89 c3                	mov    ebx,eax
c0010f3c:	83 ec 08             	sub    esp,0x8
c0010f3f:	68 02 ff ff 0f       	push   0xfffff02
c0010f44:	53                   	push   ebx
c0010f45:	e8 84 00 00 00       	call   c0010fce <ReservedFilename::ReservedFilename(int)>
c0010f4a:	83 c4 10             	add    esp,0x10
c0010f4d:	89 1d a8 a5 02 c0    	mov    DWORD PTR ds:0xc002a5a8,ebx
c0010f53:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f5b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0010f60:	7f 67                	jg     c0010fc9 <UnixFile::UnixFile(int)+0x16b>
c0010f62:	83 ec 0c             	sub    esp,0xc
c0010f65:	6a 0c                	push   0xc
c0010f67:	e8 ea 11 00 00       	call   c0012156 <operator new(unsigned long)>
c0010f6c:	83 c4 10             	add    esp,0x10
c0010f6f:	89 c3                	mov    ebx,eax
c0010f71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f75:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f7a:	83 ec 08             	sub    esp,0x8
c0010f7d:	50                   	push   eax
c0010f7e:	53                   	push   ebx
c0010f7f:	e8 4a 00 00 00       	call   c0010fce <ReservedFilename::ReservedFilename(int)>
c0010f84:	83 c4 10             	add    esp,0x10
c0010f87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f8b:	89 1c 85 80 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a80],ebx
c0010f92:	83 ec 0c             	sub    esp,0xc
c0010f95:	6a 0c                	push   0xc
c0010f97:	e8 ba 11 00 00       	call   c0012156 <operator new(unsigned long)>
c0010f9c:	83 c4 10             	add    esp,0x10
c0010f9f:	89 c3                	mov    ebx,eax
c0010fa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fa5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010faa:	83 ec 08             	sub    esp,0x8
c0010fad:	50                   	push   eax
c0010fae:	53                   	push   ebx
c0010faf:	e8 1a 00 00 00       	call   c0010fce <ReservedFilename::ReservedFilename(int)>
c0010fb4:	83 c4 10             	add    esp,0x10
c0010fb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fbb:	89 1c 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],ebx
c0010fc2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010fc6:	eb 93                	jmp    c0010f5b <UnixFile::UnixFile(int)+0xfd>
c0010fc8:	90                   	nop
c0010fc9:	83 c4 18             	add    esp,0x18
c0010fcc:	5b                   	pop    ebx
c0010fcd:	c3                   	ret    

c0010fce <ReservedFilename::ReservedFilename(int)>:
c0010fce:	83 ec 0c             	sub    esp,0xc
c0010fd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fd5:	83 ec 08             	sub    esp,0x8
c0010fd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fdc:	50                   	push   eax
c0010fdd:	e8 7c fe ff ff       	call   c0010e5e <UnixFile::UnixFile(int)>
c0010fe2:	83 c4 10             	add    esp,0x10
c0010fe5:	ba 70 6e 02 c0       	mov    edx,0xc0026e70
c0010fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fee:	89 10                	mov    DWORD PTR [eax],edx
c0010ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010ff8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ffb:	90                   	nop
c0010ffc:	83 c4 0c             	add    esp,0xc
c0010fff:	c3                   	ret    

c0011000 <UnixFile::~UnixFile()>:
c0011000:	83 ec 1c             	sub    esp,0x1c
c0011003:	ba 54 6e 02 c0       	mov    edx,0xc0026e54
c0011008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001100c:	89 10                	mov    DWORD PTR [eax],edx
c001100e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011012:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011015:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001101a:	7f 73                	jg     c001108f <UnixFile::~UnixFile()+0x8f>
c001101c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011024:	83 ec 0c             	sub    esp,0xc
c0011027:	68 b8 a5 02 c0       	push   0xc002a5b8
c001102c:	e8 73 42 01 00       	call   c00252a4 <LinkedList<UnixFile>::getFirstElement()>
c0011031:	83 c4 10             	add    esp,0x10
c0011034:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011038:	83 ec 0c             	sub    esp,0xc
c001103b:	68 b8 a5 02 c0       	push   0xc002a5b8
c0011040:	e8 67 42 01 00       	call   c00252ac <LinkedList<UnixFile>::removeFirst()>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001104c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011050:	74 40                	je     c0011092 <UnixFile::~UnixFile()+0x92>
c0011052:	83 ec 08             	sub    esp,0x8
c0011055:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011059:	68 b8 a5 02 c0       	push   0xc002a5b8
c001105e:	e8 6d 41 01 00       	call   c00251d0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001106a:	8d 50 01             	lea    edx,[eax+0x1]
c001106d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011071:	3d 88 13 00 00       	cmp    eax,0x1388
c0011076:	0f 94 c0             	sete   al
c0011079:	84 c0                	test   al,al
c001107b:	74 a7                	je     c0011024 <UnixFile::~UnixFile()+0x24>
c001107d:	83 ec 0c             	sub    esp,0xc
c0011080:	68 2c 6e 02 c0       	push   0xc0026e2c
c0011085:	e8 39 79 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c001108a:	83 c4 10             	add    esp,0x10
c001108d:	eb 95                	jmp    c0011024 <UnixFile::~UnixFile()+0x24>
c001108f:	90                   	nop
c0011090:	eb 01                	jmp    c0011093 <UnixFile::~UnixFile()+0x93>
c0011092:	90                   	nop
c0011093:	90                   	nop
c0011094:	83 c4 1c             	add    esp,0x1c
c0011097:	c3                   	ret    

c0011098 <UnixFile::~UnixFile()>:
c0011098:	83 ec 0c             	sub    esp,0xc
c001109b:	83 ec 0c             	sub    esp,0xc
c001109e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110a2:	e8 59 ff ff ff       	call   c0011000 <UnixFile::~UnixFile()>
c00110a7:	83 c4 10             	add    esp,0x10
c00110aa:	83 ec 08             	sub    esp,0x8
c00110ad:	6a 0c                	push   0xc
c00110af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110b3:	e8 ad 10 00 00       	call   c0012165 <operator delete(void*, unsigned long)>
c00110b8:	83 c4 10             	add    esp,0x10
c00110bb:	83 c4 0c             	add    esp,0xc
c00110be:	c3                   	ret    
c00110bf:	90                   	nop

c00110c0 <ReservedFilename::~ReservedFilename()>:
c00110c0:	83 ec 0c             	sub    esp,0xc
c00110c3:	ba 70 6e 02 c0       	mov    edx,0xc0026e70
c00110c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110cc:	89 10                	mov    DWORD PTR [eax],edx
c00110ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d2:	83 ec 0c             	sub    esp,0xc
c00110d5:	50                   	push   eax
c00110d6:	e8 25 ff ff ff       	call   c0011000 <UnixFile::~UnixFile()>
c00110db:	83 c4 10             	add    esp,0x10
c00110de:	90                   	nop
c00110df:	83 c4 0c             	add    esp,0xc
c00110e2:	c3                   	ret    
c00110e3:	90                   	nop

c00110e4 <ReservedFilename::~ReservedFilename()>:
c00110e4:	83 ec 0c             	sub    esp,0xc
c00110e7:	83 ec 0c             	sub    esp,0xc
c00110ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ee:	e8 cd ff ff ff       	call   c00110c0 <ReservedFilename::~ReservedFilename()>
c00110f3:	83 c4 10             	add    esp,0x10
c00110f6:	83 ec 08             	sub    esp,0x8
c00110f9:	6a 0c                	push   0xc
c00110fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ff:	e8 61 10 00 00       	call   c0012165 <operator delete(void*, unsigned long)>
c0011104:	83 c4 10             	add    esp,0x10
c0011107:	83 c4 0c             	add    esp,0xc
c001110a:	c3                   	ret    

c001110b <getFromFileDescriptor(int)>:
c001110b:	53                   	push   ebx
c001110c:	83 ec 08             	sub    esp,0x8
c001110f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011113:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011119:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001111f:	7f 2c                	jg     c001114d <getFromFileDescriptor(int)+0x42>
c0011121:	83 ec 0c             	sub    esp,0xc
c0011124:	68 b8 a5 02 c0       	push   0xc002a5b8
c0011129:	e8 76 41 01 00       	call   c00252a4 <LinkedList<UnixFile>::getFirstElement()>
c001112e:	83 c4 10             	add    esp,0x10
c0011131:	85 c0                	test   eax,eax
c0011133:	75 04                	jne    c0011139 <getFromFileDescriptor(int)+0x2e>
c0011135:	31 c0                	xor    eax,eax
c0011137:	eb 6e                	jmp    c00111a7 <getFromFileDescriptor(int)+0x9c>
c0011139:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001113c:	74 69                	je     c00111a7 <getFromFileDescriptor(int)+0x9c>
c001113e:	52                   	push   edx
c001113f:	52                   	push   edx
c0011140:	50                   	push   eax
c0011141:	68 b8 a5 02 c0       	push   0xc002a5b8
c0011146:	e8 03 42 01 00       	call   c002534e <LinkedList<UnixFile>::getNext(UnixFile*)>
c001114b:	eb e1                	jmp    c001112e <getFromFileDescriptor(int)+0x23>
c001114d:	a1 ac a5 02 c0       	mov    eax,ds:0xc002a5ac
c0011152:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011158:	74 4d                	je     c00111a7 <getFromFileDescriptor(int)+0x9c>
c001115a:	a1 b0 a5 02 c0       	mov    eax,ds:0xc002a5b0
c001115f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011165:	74 40                	je     c00111a7 <getFromFileDescriptor(int)+0x9c>
c0011167:	a1 a8 a5 02 c0       	mov    eax,ds:0xc002a5a8
c001116c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011172:	74 33                	je     c00111a7 <getFromFileDescriptor(int)+0x9c>
c0011174:	a1 a4 a5 02 c0       	mov    eax,ds:0xc002a5a4
c0011179:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001117f:	74 26                	je     c00111a7 <getFromFileDescriptor(int)+0x9c>
c0011181:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011187:	83 f8 08             	cmp    eax,0x8
c001118a:	77 09                	ja     c0011195 <getFromFileDescriptor(int)+0x8a>
c001118c:	8b 04 85 80 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5a80]
c0011193:	eb 12                	jmp    c00111a7 <getFromFileDescriptor(int)+0x9c>
c0011195:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001119b:	83 fb 08             	cmp    ebx,0x8
c001119e:	77 95                	ja     c0011135 <getFromFileDescriptor(int)+0x2a>
c00111a0:	8b 04 9d 40 a5 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5ac0]
c00111a7:	83 c4 08             	add    esp,0x8
c00111aa:	5b                   	pop    ebx
c00111ab:	c3                   	ret    

c00111ac <__static_initialization_and_destruction_0(int, int)>:
c00111ac:	83 ec 0c             	sub    esp,0xc
c00111af:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00111b4:	75 34                	jne    c00111ea <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111b6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00111be:	75 2a                	jne    c00111ea <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111c0:	83 ec 0c             	sub    esp,0xc
c00111c3:	68 b8 a5 02 c0       	push   0xc002a5b8
c00111c8:	e8 ab 3f 01 00       	call   c0025178 <LinkedList<UnixFile>::LinkedList()>
c00111cd:	83 c4 10             	add    esp,0x10
c00111d0:	83 ec 04             	sub    esp,0x4
c00111d3:	68 f8 93 02 c0       	push   0xc00293f8
c00111d8:	68 b8 a5 02 c0       	push   0xc002a5b8
c00111dd:	68 76 51 02 c0       	push   0xc0025176
c00111e2:	e8 fa 0e 00 00       	call   c00120e1 <__cxa_atexit>
c00111e7:	83 c4 10             	add    esp,0x10
c00111ea:	90                   	nop
c00111eb:	83 c4 0c             	add    esp,0xc
c00111ee:	c3                   	ret    

c00111ef <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111ef:	83 ec 0c             	sub    esp,0xc
c00111f2:	83 ec 08             	sub    esp,0x8
c00111f5:	68 ff ff 00 00       	push   0xffff
c00111fa:	6a 01                	push   0x1
c00111fc:	e8 ab ff ff ff       	call   c00111ac <__static_initialization_and_destruction_0(int, int)>
c0011201:	83 c4 10             	add    esp,0x10
c0011204:	83 c4 0c             	add    esp,0xc
c0011207:	c3                   	ret    

c0011208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011208:	53                   	push   ebx
c0011209:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001120d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011211:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011217:	89 c8                	mov    eax,ecx
c0011219:	d1 e8                	shr    eax,1
c001121b:	03 05 88 94 02 c0    	add    eax,DWORD PTR ds:0xc0029488
c0011221:	83 e1 01             	and    ecx,0x1
c0011224:	8a 10                	mov    dl,BYTE PTR [eax]
c0011226:	75 09                	jne    c0011231 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011228:	83 e2 f0             	and    edx,0xfffffff0
c001122b:	09 da                	or     edx,ebx
c001122d:	88 10                	mov    BYTE PTR [eax],dl
c001122f:	5b                   	pop    ebx
c0011230:	c3                   	ret    
c0011231:	c1 e3 04             	shl    ebx,0x4
c0011234:	83 e2 0f             	and    edx,0xf
c0011237:	09 da                	or     edx,ebx
c0011239:	88 10                	mov    BYTE PTR [eax],dl
c001123b:	5b                   	pop    ebx
c001123c:	c3                   	ret    

c001123d <Virt::getPageState(unsigned long)>:
c001123d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011241:	8b 0d 88 94 02 c0    	mov    ecx,DWORD PTR ds:0xc0029488
c0011247:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001124d:	89 d0                	mov    eax,edx
c001124f:	d1 e8                	shr    eax,1
c0011251:	83 e2 01             	and    edx,0x1
c0011254:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011257:	75 04                	jne    c001125d <Virt::getPageState(unsigned long)+0x20>
c0011259:	83 e0 0f             	and    eax,0xf
c001125c:	c3                   	ret    
c001125d:	c0 e8 04             	shr    al,0x4
c0011260:	c3                   	ret    

c0011261 <Virt::allocateKernelVirtualPages(int)>:
c0011261:	55                   	push   ebp
c0011262:	31 ed                	xor    ebp,ebp
c0011264:	57                   	push   edi
c0011265:	56                   	push   esi
c0011266:	53                   	push   ebx
c0011267:	31 db                	xor    ebx,ebx
c0011269:	83 ec 1c             	sub    esp,0x1c
c001126c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011270:	8b 3d 84 94 02 c0    	mov    edi,DWORD PTR ds:0xc0029484
c0011276:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001127b:	57                   	push   edi
c001127c:	e8 bc ff ff ff       	call   c001123d <Virt::getPageState(unsigned long)>
c0011281:	5a                   	pop    edx
c0011282:	84 c0                	test   al,al
c0011284:	75 3a                	jne    c00112c0 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011286:	85 db                	test   ebx,ebx
c0011288:	75 02                	jne    c001128c <Virt::allocateKernelVirtualPages(int)+0x2b>
c001128a:	89 fd                	mov    ebp,edi
c001128c:	43                   	inc    ebx
c001128d:	39 f3                	cmp    ebx,esi
c001128f:	74 5a                	je     c00112eb <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011291:	47                   	inc    edi
c0011292:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011298:	76 31                	jbe    c00112cb <Virt::allocateKernelVirtualPages(int)+0x6a>
c001129a:	c7 05 84 94 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0029484,0xc8000
c00112a4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00112a9:	75 28                	jne    c00112d3 <Virt::allocateKernelVirtualPages(int)+0x72>
c00112ab:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00112b0:	bf 00 80 0c 00       	mov    edi,0xc8000
c00112b5:	57                   	push   edi
c00112b6:	e8 82 ff ff ff       	call   c001123d <Virt::getPageState(unsigned long)>
c00112bb:	5a                   	pop    edx
c00112bc:	84 c0                	test   al,al
c00112be:	74 c6                	je     c0011286 <Virt::allocateKernelVirtualPages(int)+0x25>
c00112c0:	31 db                	xor    ebx,ebx
c00112c2:	47                   	inc    edi
c00112c3:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112c9:	77 cf                	ja     c001129a <Virt::allocateKernelVirtualPages(int)+0x39>
c00112cb:	89 3d 84 94 02 c0    	mov    DWORD PTR ds:0xc0029484,edi
c00112d1:	eb a8                	jmp    c001127b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112d3:	83 ec 0c             	sub    esp,0xc
c00112d6:	68 84 6e 02 c0       	push   0xc0026e84
c00112db:	e8 e3 76 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c00112e0:	8b 3d 84 94 02 c0    	mov    edi,DWORD PTR ds:0xc0029484
c00112e6:	83 c4 10             	add    esp,0x10
c00112e9:	eb 90                	jmp    c001127b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112eb:	89 2d 84 94 02 c0    	mov    DWORD PTR ds:0xc0029484,ebp
c00112f1:	4b                   	dec    ebx
c00112f2:	74 5f                	je     c0011353 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00112f4:	85 f6                	test   esi,esi
c00112f6:	74 3d                	je     c0011335 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112f8:	89 e8                	mov    eax,ebp
c00112fa:	31 db                	xor    ebx,ebx
c00112fc:	8d 7e ff             	lea    edi,[esi-0x1]
c00112ff:	eb 14                	jmp    c0011315 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011301:	6a 01                	push   0x1
c0011303:	43                   	inc    ebx
c0011304:	50                   	push   eax
c0011305:	e8 fe fe ff ff       	call   c0011208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001130a:	58                   	pop    eax
c001130b:	39 f3                	cmp    ebx,esi
c001130d:	5a                   	pop    edx
c001130e:	74 25                	je     c0011335 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011310:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c0011315:	8d 50 01             	lea    edx,[eax+0x1]
c0011318:	85 db                	test   ebx,ebx
c001131a:	89 15 84 94 02 c0    	mov    DWORD PTR ds:0xc0029484,edx
c0011320:	74 20                	je     c0011342 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011322:	39 df                	cmp    edi,ebx
c0011324:	75 db                	jne    c0011301 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011326:	6a 03                	push   0x3
c0011328:	43                   	inc    ebx
c0011329:	50                   	push   eax
c001132a:	e8 d9 fe ff ff       	call   c0011208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001132f:	59                   	pop    ecx
c0011330:	39 f3                	cmp    ebx,esi
c0011332:	58                   	pop    eax
c0011333:	75 db                	jne    c0011310 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011335:	83 c4 1c             	add    esp,0x1c
c0011338:	89 e8                	mov    eax,ebp
c001133a:	5b                   	pop    ebx
c001133b:	c1 e0 0c             	shl    eax,0xc
c001133e:	5e                   	pop    esi
c001133f:	5f                   	pop    edi
c0011340:	5d                   	pop    ebp
c0011341:	c3                   	ret    
c0011342:	6a 02                	push   0x2
c0011344:	bb 01 00 00 00       	mov    ebx,0x1
c0011349:	50                   	push   eax
c001134a:	e8 b9 fe ff ff       	call   c0011208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001134f:	58                   	pop    eax
c0011350:	5a                   	pop    edx
c0011351:	eb bd                	jmp    c0011310 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011353:	6a 04                	push   0x4
c0011355:	8d 45 01             	lea    eax,[ebp+0x1]
c0011358:	55                   	push   ebp
c0011359:	a3 84 94 02 c0       	mov    ds:0xc0029484,eax
c001135e:	e8 a5 fe ff ff       	call   c0011208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011363:	59                   	pop    ecx
c0011364:	89 e8                	mov    eax,ebp
c0011366:	5b                   	pop    ebx
c0011367:	c1 e0 0c             	shl    eax,0xc
c001136a:	83 c4 1c             	add    esp,0x1c
c001136d:	5b                   	pop    ebx
c001136e:	5e                   	pop    esi
c001136f:	5f                   	pop    edi
c0011370:	5d                   	pop    ebp
c0011371:	c3                   	ret    

c0011372 <Virt::virtualMemorySetup()>:
c0011372:	53                   	push   ebx
c0011373:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011378:	83 ec 08             	sub    esp,0x8
c001137b:	6a 0f                	push   0xf
c001137d:	53                   	push   ebx
c001137e:	43                   	inc    ebx
c001137f:	e8 84 fe ff ff       	call   c0011208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011384:	59                   	pop    ecx
c0011385:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001138b:	58                   	pop    eax
c001138c:	75 ed                	jne    c001137b <Virt::virtualMemorySetup()+0x9>
c001138e:	83 ec 08             	sub    esp,0x8
c0011391:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011396:	68 00 00 00 c8       	push   0xc8000000
c001139b:	68 0b 70 02 c0       	push   0xc002700b
c00113a0:	e8 a0 0e 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00113a5:	58                   	pop    eax
c00113a6:	5a                   	pop    edx
c00113a7:	68 00 f0 ff ef       	push   0xeffff000
c00113ac:	68 1f 70 02 c0       	push   0xc002701f
c00113b1:	e8 8f 0e 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00113b6:	83 c4 10             	add    esp,0x10
c00113b9:	83 ec 08             	sub    esp,0x8
c00113bc:	6a 00                	push   0x0
c00113be:	53                   	push   ebx
c00113bf:	43                   	inc    ebx
c00113c0:	e8 43 fe ff ff       	call   c0011208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113c5:	83 c4 10             	add    esp,0x10
c00113c8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113ce:	75 e9                	jne    c00113b9 <Virt::virtualMemorySetup()+0x47>
c00113d0:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113d5:	83 ec 08             	sub    esp,0x8
c00113d8:	6a 0f                	push   0xf
c00113da:	53                   	push   ebx
c00113db:	43                   	inc    ebx
c00113dc:	e8 27 fe ff ff       	call   c0011208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113e1:	83 c4 10             	add    esp,0x10
c00113e4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00113ea:	75 e9                	jne    c00113d5 <Virt::virtualMemorySetup()+0x63>
c00113ec:	83 c4 08             	add    esp,0x8
c00113ef:	5b                   	pop    ebx
c00113f0:	c3                   	ret    

c00113f1 <Virt::getAKernelVAS()>:
c00113f1:	a1 c4 a5 02 c0       	mov    eax,ds:0xc002a5c4
c00113f6:	c3                   	ret    

c00113f7 <Virt::setupPageSwapping(int)>:
c00113f7:	57                   	push   edi
c00113f8:	56                   	push   esi
c00113f9:	53                   	push   ebx
c00113fa:	83 ec 1c             	sub    esp,0x1c
c00113fd:	68 14 01 00 00       	push   0x114
c0011402:	e8 4f 0d 00 00       	call   c0012156 <operator new(unsigned long)>
c0011407:	83 c4 0c             	add    esp,0xc
c001140a:	89 c6                	mov    esi,eax
c001140c:	ff 35 74 b9 02 c0    	push   DWORD PTR ds:0xc002b974
c0011412:	68 33 70 02 c0       	push   0xc0027033
c0011417:	50                   	push   eax
c0011418:	e8 57 13 00 00       	call   c0012774 <File::File(char const*, Process*)>
c001141d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011420:	e8 2b 15 00 00       	call   c0012950 <File::unlink()>
c0011425:	58                   	pop    eax
c0011426:	5a                   	pop    edx
c0011427:	6a 12                	push   0x12
c0011429:	56                   	push   esi
c001142a:	e8 a9 13 00 00       	call   c00127d8 <File::open(FileOpenMode)>
c001142f:	83 c4 10             	add    esp,0x10
c0011432:	85 c0                	test   eax,eax
c0011434:	0f 85 bf 00 00 00    	jne    c00114f9 <Virt::setupPageSwapping(int)+0x102>
c001143a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001143e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011446:	c1 e3 08             	shl    ebx,0x8
c0011449:	83 ec 0c             	sub    esp,0xc
c001144c:	68 00 00 01 00       	push   0x10000
c0011451:	e8 c8 dc ff ff       	call   c000f11e <malloc>
c0011456:	83 c4 0c             	add    esp,0xc
c0011459:	89 c7                	mov    edi,eax
c001145b:	68 00 00 01 00       	push   0x10000
c0011460:	6a 00                	push   0x0
c0011462:	50                   	push   eax
c0011463:	e8 15 f2 fe ff       	call   c000067d <memset>
c0011468:	83 c4 10             	add    esp,0x10
c001146b:	85 db                	test   ebx,ebx
c001146d:	79 03                	jns    c0011472 <Virt::setupPageSwapping(int)+0x7b>
c001146f:	83 c3 0f             	add    ebx,0xf
c0011472:	c1 fb 04             	sar    ebx,0x4
c0011475:	4b                   	dec    ebx
c0011476:	83 fb ff             	cmp    ebx,0xffffffff
c0011479:	74 4b                	je     c00114c6 <Virt::setupPageSwapping(int)+0xcf>
c001147b:	83 ec 0c             	sub    esp,0xc
c001147e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011480:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011484:	52                   	push   edx
c0011485:	57                   	push   edi
c0011486:	6a 00                	push   0x0
c0011488:	68 00 00 01 00       	push   0x10000
c001148d:	56                   	push   esi
c001148e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011491:	83 c4 20             	add    esp,0x20
c0011494:	85 c0                	test   eax,eax
c0011496:	75 4e                	jne    c00114e6 <Virt::setupPageSwapping(int)+0xef>
c0011498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001149c:	3d 00 00 01 00       	cmp    eax,0x10000
c00114a1:	74 d2                	je     c0011475 <Virt::setupPageSwapping(int)+0x7e>
c00114a3:	83 ec 08             	sub    esp,0x8
c00114a6:	4b                   	dec    ebx
c00114a7:	50                   	push   eax
c00114a8:	68 86 70 02 c0       	push   0xc0027086
c00114ad:	e8 93 0d 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00114b2:	c7 04 24 8f 70 02 c0 	mov    DWORD PTR [esp],0xc002708f
c00114b9:	e8 05 75 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c00114be:	83 c4 10             	add    esp,0x10
c00114c1:	83 fb ff             	cmp    ebx,0xffffffff
c00114c4:	75 b5                	jne    c001147b <Virt::setupPageSwapping(int)+0x84>
c00114c6:	83 ec 0c             	sub    esp,0xc
c00114c9:	56                   	push   esi
c00114ca:	e8 67 13 00 00       	call   c0012836 <File::close()>
c00114cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114d2:	e8 67 dc ff ff       	call   c000f13e <rfree>
c00114d7:	89 34 24             	mov    DWORD PTR [esp],esi
c00114da:	8b 06                	mov    eax,DWORD PTR [esi]
c00114dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114df:	83 c4 20             	add    esp,0x20
c00114e2:	5b                   	pop    ebx
c00114e3:	5e                   	pop    esi
c00114e4:	5f                   	pop    edi
c00114e5:	c3                   	ret    
c00114e6:	83 ec 08             	sub    esp,0x8
c00114e9:	50                   	push   eax
c00114ea:	68 6e 70 02 c0       	push   0xc002706e
c00114ef:	e8 51 0d 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00114f4:	83 c4 10             	add    esp,0x10
c00114f7:	eb 9f                	jmp    c0011498 <Virt::setupPageSwapping(int)+0xa1>
c00114f9:	83 ec 08             	sub    esp,0x8
c00114fc:	50                   	push   eax
c00114fd:	68 4a 70 02 c0       	push   0xc002704a
c0011502:	e8 3e 0d 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0011507:	c7 04 24 53 70 02 c0 	mov    DWORD PTR [esp],0xc0027053
c001150e:	e8 b0 74 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0011513:	83 c4 10             	add    esp,0x10
c0011516:	e9 1f ff ff ff       	jmp    c001143a <Virt::setupPageSwapping(int)+0x43>
c001151b:	90                   	nop

c001151c <VAS::VAS()>:
c001151c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011520:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001152b:	a3 c4 a5 02 c0       	mov    ds:0xc002a5c4,eax
c0011530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011534:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001153c:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001153f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011543:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c001154a:	90                   	nop
c001154b:	c3                   	ret    

c001154c <VAS::VAS(VAS*)>:
c001154c:	83 ec 0c             	sub    esp,0xc
c001154f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011553:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001155a:	83 ec 0c             	sub    esp,0xc
c001155d:	68 a4 6e 02 c0       	push   0xc0026ea4
c0011562:	e8 5c 74 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0011567:	83 c4 10             	add    esp,0x10
c001156a:	90                   	nop
c001156b:	83 c4 0c             	add    esp,0xc
c001156e:	c3                   	ret    
c001156f:	90                   	nop

c0011570 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011570:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011574:	89 c2                	mov    edx,eax
c0011576:	c1 e8 0a             	shr    eax,0xa
c0011579:	c1 ea 16             	shr    edx,0x16
c001157c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011581:	19 c9                	sbb    ecx,ecx
c0011583:	c1 e2 0c             	shl    edx,0xc
c0011586:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001158c:	25 fc 0f 00 00       	and    eax,0xffc
c0011591:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011598:	01 d0                	add    eax,edx
c001159a:	c3                   	ret    
c001159b:	90                   	nop

c001159c <VAS::getPageTableEntry(unsigned long)>:
c001159c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115a0:	89 ca                	mov    edx,ecx
c00115a2:	c1 e9 0a             	shr    ecx,0xa
c00115a5:	c1 ea 16             	shr    edx,0x16
c00115a8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115ae:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115b4:	c1 e0 0c             	shl    eax,0xc
c00115b7:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115ba:	c3                   	ret    

c00115bb <Virt::freeKernelVirtualPages(unsigned long)>:
c00115bb:	57                   	push   edi
c00115bc:	56                   	push   esi
c00115bd:	be 01 00 00 00       	mov    esi,0x1
c00115c2:	53                   	push   ebx
c00115c3:	83 ec 10             	sub    esp,0x10
c00115c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115ca:	c1 eb 0c             	shr    ebx,0xc
c00115cd:	eb 3f                	jmp    c001160e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115cf:	e8 1d fe ff ff       	call   c00113f1 <Virt::getAKernelVAS()>
c00115d4:	83 ec 08             	sub    esp,0x8
c00115d7:	57                   	push   edi
c00115d8:	50                   	push   eax
c00115d9:	e8 be ff ff ff       	call   c001159c <VAS::getPageTableEntry(unsigned long)>
c00115de:	83 c4 10             	add    esp,0x10
c00115e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00115e3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00115e7:	f6 c4 04             	test   ah,0x4
c00115ea:	75 5f                	jne    c001164b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00115ec:	80 fa 04             	cmp    dl,0x4
c00115ef:	74 78                	je     c0011669 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00115f1:	80 fa 02             	cmp    dl,0x2
c00115f4:	0f 84 88 00 00 00    	je     c0011682 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00115fa:	80 fa 03             	cmp    dl,0x3
c00115fd:	0f 84 ad 00 00 00    	je     c00116b0 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011603:	fe ca                	dec    dl
c0011605:	0f 84 92 00 00 00    	je     c001169d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001160b:	43                   	inc    ebx
c001160c:	31 f6                	xor    esi,esi
c001160e:	53                   	push   ebx
c001160f:	e8 29 fc ff ff       	call   c001123d <Virt::getPageState(unsigned long)>
c0011614:	5f                   	pop    edi
c0011615:	89 df                	mov    edi,ebx
c0011617:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001161b:	c1 e7 0c             	shl    edi,0xc
c001161e:	84 c0                	test   al,al
c0011620:	75 ad                	jne    c00115cf <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011622:	83 ec 0c             	sub    esp,0xc
c0011625:	68 95 70 02 c0       	push   0xc0027095
c001162a:	e8 94 73 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c001162f:	e8 bd fd ff ff       	call   c00113f1 <Virt::getAKernelVAS()>
c0011634:	5a                   	pop    edx
c0011635:	59                   	pop    ecx
c0011636:	57                   	push   edi
c0011637:	50                   	push   eax
c0011638:	e8 5f ff ff ff       	call   c001159c <VAS::getPageTableEntry(unsigned long)>
c001163d:	83 c4 10             	add    esp,0x10
c0011640:	8b 00                	mov    eax,DWORD PTR [eax]
c0011642:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011646:	f6 c4 04             	test   ah,0x4
c0011649:	74 c0                	je     c001160b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001164b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001164f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011654:	83 ec 0c             	sub    esp,0xc
c0011657:	50                   	push   eax
c0011658:	e8 e1 df ff ff       	call   c000f63e <Phys::freePage(unsigned long)>
c001165d:	83 c4 10             	add    esp,0x10
c0011660:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011664:	80 fa 04             	cmp    dl,0x4
c0011667:	75 88                	jne    c00115f1 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011669:	89 f0                	mov    eax,esi
c001166b:	84 c0                	test   al,al
c001166d:	75 47                	jne    c00116b6 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001166f:	c7 44 24 20 c8 6e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026ec8
c0011677:	83 c4 10             	add    esp,0x10
c001167a:	5b                   	pop    ebx
c001167b:	5e                   	pop    esi
c001167c:	5f                   	pop    edi
c001167d:	e9 41 73 00 00       	jmp    c00189c3 <Krnl::panic(char const*)>
c0011682:	89 f0                	mov    eax,esi
c0011684:	84 c0                	test   al,al
c0011686:	75 15                	jne    c001169d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011688:	83 ec 0c             	sub    esp,0xc
c001168b:	68 b1 70 02 c0       	push   0xc00270b1
c0011690:	e8 2e 73 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0011695:	83 c4 10             	add    esp,0x10
c0011698:	e9 6e ff ff ff       	jmp    c001160b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001169d:	83 ec 08             	sub    esp,0x8
c00116a0:	6a 00                	push   0x0
c00116a2:	53                   	push   ebx
c00116a3:	e8 60 fb ff ff       	call   c0011208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116a8:	83 c4 10             	add    esp,0x10
c00116ab:	e9 5b ff ff ff       	jmp    c001160b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116b0:	89 f0                	mov    eax,esi
c00116b2:	84 c0                	test   al,al
c00116b4:	75 15                	jne    c00116cb <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116b6:	83 ec 08             	sub    esp,0x8
c00116b9:	6a 00                	push   0x0
c00116bb:	53                   	push   ebx
c00116bc:	e8 47 fb ff ff       	call   c0011208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116c1:	83 c4 10             	add    esp,0x10
c00116c4:	83 c4 10             	add    esp,0x10
c00116c7:	5b                   	pop    ebx
c00116c8:	5e                   	pop    esi
c00116c9:	5f                   	pop    edi
c00116ca:	c3                   	ret    
c00116cb:	c7 44 24 20 cd 70 02 c0 	mov    DWORD PTR [esp+0x20],0xc00270cd
c00116d3:	83 c4 10             	add    esp,0x10
c00116d6:	5b                   	pop    ebx
c00116d7:	5e                   	pop    esi
c00116d8:	5f                   	pop    edi
c00116d9:	e9 e5 72 00 00       	jmp    c00189c3 <Krnl::panic(char const*)>

c00116de <VAS::freeAllocatedPages(unsigned long)>:
c00116de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00116e6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00116ea:	74 09                	je     c00116f5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00116ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00116f0:	e9 c6 fe ff ff       	jmp    c00115bb <Virt::freeKernelVirtualPages(unsigned long)>
c00116f5:	c7 44 24 04 ec 6e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026eec
c00116fd:	e9 43 0b 00 00       	jmp    c0012245 <Dbg::kprintf(char const*, ...)>

c0011702 <VAS::virtualToPhysical(unsigned long)>:
c0011702:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011706:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001170a:	e8 8d fe ff ff       	call   c001159c <VAS::getPageTableEntry(unsigned long)>
c001170f:	5a                   	pop    edx
c0011710:	8b 00                	mov    eax,DWORD PTR [eax]
c0011712:	59                   	pop    ecx
c0011713:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011718:	c3                   	ret    
c0011719:	90                   	nop

c001171a <VAS::reflagRange(unsigned long, int, int, int)>:
c001171a:	55                   	push   ebp
c001171b:	57                   	push   edi
c001171c:	56                   	push   esi
c001171d:	53                   	push   ebx
c001171e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011722:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011726:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001172a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001172e:	85 db                	test   ebx,ebx
c0011730:	7e 22                	jle    c0011754 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011732:	c1 e3 0c             	shl    ebx,0xc
c0011735:	01 f3                	add    ebx,esi
c0011737:	56                   	push   esi
c0011738:	81 c6 00 10 00 00    	add    esi,0x1000
c001173e:	55                   	push   ebp
c001173f:	e8 58 fe ff ff       	call   c001159c <VAS::getPageTableEntry(unsigned long)>
c0011744:	5a                   	pop    edx
c0011745:	59                   	pop    ecx
c0011746:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011748:	21 f9                	and    ecx,edi
c001174a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001174e:	39 f3                	cmp    ebx,esi
c0011750:	89 08                	mov    DWORD PTR [eax],ecx
c0011752:	75 e3                	jne    c0011737 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011754:	5b                   	pop    ebx
c0011755:	5e                   	pop    esi
c0011756:	5f                   	pop    edi
c0011757:	5d                   	pop    ebp
c0011758:	c3                   	ret    
c0011759:	90                   	nop

c001175a <VAS::setToWriteCombining(unsigned long, int)>:
c001175a:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001175f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011765:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001176c:	75 01                	jne    c001176f <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001176e:	c3                   	ret    
c001176f:	68 80 00 00 00       	push   0x80
c0011774:	6a ff                	push   0xffffffff
c0011776:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001177a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001177e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011782:	e8 93 ff ff ff       	call   c001171a <VAS::reflagRange(unsigned long, int, int, int)>
c0011787:	83 c4 14             	add    esp,0x14
c001178a:	c3                   	ret    
c001178b:	90                   	nop

c001178c <VAS::mapOtherVASIn(bool, VAS*)>:
c001178c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011791:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011795:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001179c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c001179f:	19 c0                	sbb    eax,eax
c00117a1:	83 ca 03             	or     edx,0x3
c00117a4:	83 e0 fc             	and    eax,0xfffffffc
c00117a7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117ae:	0f 20 d8             	mov    eax,cr3
c00117b1:	0f 22 d8             	mov    cr3,eax
c00117b4:	c3                   	ret    
c00117b5:	90                   	nop

c00117b6 <VAS::~VAS()>:
c00117b6:	83 ec 2c             	sub    esp,0x2c
c00117b9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117c1:	e8 46 a1 00 00       	call   c001b90c <lockScheduler()>
c00117c6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00117cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00117cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117d0:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00117d6:	83 ec 04             	sub    esp,0x4
c00117d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00117dd:	6a 01                	push   0x1
c00117df:	50                   	push   eax
c00117e0:	e8 a7 ff ff ff       	call   c001178c <VAS::mapOtherVASIn(bool, VAS*)>
c00117e5:	83 c4 10             	add    esp,0x10
c00117e8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00117f0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00117f8:	0f 8f d7 00 00 00    	jg     c00118d5 <VAS::~VAS()+0x11f>
c00117fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011802:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011805:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011809:	c1 e2 02             	shl    edx,0x2
c001180c:	01 d0                	add    eax,edx
c001180e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011810:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011818:	83 e0 01             	and    eax,0x1
c001181b:	0f 84 ab 00 00 00    	je     c00118cc <VAS::~VAS()+0x116>
c0011821:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011829:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011831:	7f 75                	jg     c00118a8 <VAS::~VAS()+0xf2>
c0011833:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011837:	c1 e0 0a             	shl    eax,0xa
c001183a:	89 c2                	mov    edx,eax
c001183c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011840:	01 d0                	add    eax,edx
c0011842:	c1 e0 0c             	shl    eax,0xc
c0011845:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011849:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001184e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011850:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011853:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011859:	83 ec 04             	sub    esp,0x4
c001185c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011860:	6a 01                	push   0x1
c0011862:	50                   	push   eax
c0011863:	e8 08 fd ff ff       	call   c0011570 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011868:	83 c4 10             	add    esp,0x10
c001186b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001186f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011873:	8b 00                	mov    eax,DWORD PTR [eax]
c0011875:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011879:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001187d:	25 01 04 00 00       	and    eax,0x401
c0011882:	3d 01 04 00 00       	cmp    eax,0x401
c0011887:	75 19                	jne    c00118a2 <VAS::~VAS()+0xec>
c0011889:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001188d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011892:	83 ec 0c             	sub    esp,0xc
c0011895:	50                   	push   eax
c0011896:	e8 a3 dd ff ff       	call   c000f63e <Phys::freePage(unsigned long)>
c001189b:	83 c4 10             	add    esp,0x10
c001189e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118a2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118a6:	eb 81                	jmp    c0011829 <VAS::~VAS()+0x73>
c00118a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ac:	25 00 04 00 00       	and    eax,0x400
c00118b1:	74 19                	je     c00118cc <VAS::~VAS()+0x116>
c00118b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118bc:	83 ec 0c             	sub    esp,0xc
c00118bf:	50                   	push   eax
c00118c0:	e8 79 dd ff ff       	call   c000f63e <Phys::freePage(unsigned long)>
c00118c5:	83 c4 10             	add    esp,0x10
c00118c8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118cc:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00118d0:	e9 1b ff ff ff       	jmp    c00117f0 <VAS::~VAS()+0x3a>
c00118d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00118dc:	83 ec 0c             	sub    esp,0xc
c00118df:	50                   	push   eax
c00118e0:	e8 d6 fc ff ff       	call   c00115bb <Virt::freeKernelVirtualPages(unsigned long)>
c00118e5:	83 c4 10             	add    esp,0x10
c00118e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118ef:	83 ec 0c             	sub    esp,0xc
c00118f2:	50                   	push   eax
c00118f3:	e8 46 dd ff ff       	call   c000f63e <Phys::freePage(unsigned long)>
c00118f8:	83 c4 10             	add    esp,0x10
c00118fb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011903:	c1 e0 02             	shl    eax,0x2
c0011906:	83 ec 08             	sub    esp,0x8
c0011909:	50                   	push   eax
c001190a:	68 10 6f 02 c0       	push   0xc0026f10
c001190f:	e8 31 09 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0011914:	83 c4 10             	add    esp,0x10
c0011917:	e8 f2 9f 00 00       	call   c001b90e <unlockScheduler()>
c001191c:	90                   	nop
c001191d:	83 c4 2c             	add    esp,0x2c
c0011920:	c3                   	ret    
c0011921:	90                   	nop

c0011922 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011922:	55                   	push   ebp
c0011923:	57                   	push   edi
c0011924:	56                   	push   esi
c0011925:	53                   	push   ebx
c0011926:	83 ec 1c             	sub    esp,0x1c
c0011929:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001192d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011931:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011937:	77 08                	ja     c0011941 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011939:	0f 20 d8             	mov    eax,cr3
c001193c:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001193f:	75 47                	jne    c0011988 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011941:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011945:	09 d8                	or     eax,ebx
c0011947:	a9 ff 0f 00 00       	test   eax,0xfff
c001194c:	75 57                	jne    c00119a5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001194e:	89 de                	mov    esi,ebx
c0011950:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011953:	c1 ee 16             	shr    esi,0x16
c0011956:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001195d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011961:	74 54                	je     c00119b7 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011963:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011967:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001196d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011971:	c1 e6 0c             	shl    esi,0xc
c0011974:	c1 eb 0a             	shr    ebx,0xa
c0011977:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001197d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011980:	83 c4 1c             	add    esp,0x1c
c0011983:	5b                   	pop    ebx
c0011984:	5e                   	pop    esi
c0011985:	5f                   	pop    edi
c0011986:	5d                   	pop    ebp
c0011987:	c3                   	ret    
c0011988:	83 ec 0c             	sub    esp,0xc
c001198b:	68 30 6f 02 c0       	push   0xc0026f30
c0011990:	e8 b0 08 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0011995:	83 c4 10             	add    esp,0x10
c0011998:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001199c:	09 d8                	or     eax,ebx
c001199e:	a9 ff 0f 00 00       	test   eax,0xfff
c00119a3:	74 a9                	je     c001194e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119a5:	83 ec 0c             	sub    esp,0xc
c00119a8:	68 98 6f 02 c0       	push   0xc0026f98
c00119ad:	e8 11 70 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c00119b2:	83 c4 10             	add    esp,0x10
c00119b5:	eb 97                	jmp    c001194e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119bb:	e8 08 dd ff ff       	call   c000f6c8 <Phys::allocatePage()>
c00119c0:	89 c5                	mov    ebp,eax
c00119c2:	e8 2a fa ff ff       	call   c00113f1 <Virt::getAKernelVAS()>
c00119c7:	83 ec 0c             	sub    esp,0xc
c00119ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00119ce:	6a 01                	push   0x1
c00119d0:	e8 8c f8 ff ff       	call   c0011261 <Virt::allocateKernelVirtualPages(int)>
c00119d5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00119dc:	6a 01                	push   0x1
c00119de:	50                   	push   eax
c00119df:	55                   	push   ebp
c00119e0:	81 cd 07 04 00 00    	or     ebp,0x407
c00119e6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00119ea:	51                   	push   ecx
c00119eb:	e8 26 02 00 00       	call   c0011c16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00119f0:	83 c4 1c             	add    esp,0x1c
c00119f3:	68 00 10 00 00       	push   0x1000
c00119f8:	6a 00                	push   0x0
c00119fa:	50                   	push   eax
c00119fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00119ff:	e8 79 ec fe ff       	call   c000067d <memset>
c0011a04:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a08:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a0b:	e8 ab fb ff ff       	call   c00115bb <Virt::freeKernelVirtualPages(unsigned long)>
c0011a10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a14:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011a17:	83 c4 10             	add    esp,0x10
c0011a1a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a1d:	e9 41 ff ff ff       	jmp    c0011963 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011a22 <VAS::allocatePages(int, int)>:
c0011a22:	55                   	push   ebp
c0011a23:	57                   	push   edi
c0011a24:	56                   	push   esi
c0011a25:	53                   	push   ebx
c0011a26:	83 ec 1c             	sub    esp,0x1c
c0011a29:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a2d:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011a32:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a38:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a3e:	83 e0 01             	and    eax,0x1
c0011a41:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a45:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a49:	0f 85 cc 00 00 00    	jne    c0011b1b <VAS::allocatePages(int, int)+0xf9>
c0011a4f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a56:	85 c0                	test   eax,eax
c0011a58:	0f 84 a1 00 00 00    	je     c0011aff <VAS::allocatePages(int, int)+0xdd>
c0011a5e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a62:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a66:	c1 e6 0c             	shl    esi,0xc
c0011a69:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011a6d:	85 c0                	test   eax,eax
c0011a6f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011a72:	7e 33                	jle    c0011aa7 <VAS::allocatePages(int, int)+0x85>
c0011a74:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011a78:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a7c:	81 cd 00 04 00 00    	or     ebp,0x400
c0011a82:	e8 41 dc ff ff       	call   c000f6c8 <Phys::allocatePage()>
c0011a87:	55                   	push   ebp
c0011a88:	53                   	push   ebx
c0011a89:	50                   	push   eax
c0011a8a:	57                   	push   edi
c0011a8b:	e8 92 fe ff ff       	call   c0011922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011a90:	83 c4 10             	add    esp,0x10
c0011a93:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011a98:	74 03                	je     c0011a9d <VAS::allocatePages(int, int)+0x7b>
c0011a9a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011a9d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011aa3:	39 de                	cmp    esi,ebx
c0011aa5:	75 db                	jne    c0011a82 <VAS::allocatePages(int, int)+0x60>
c0011aa7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011aac:	75 12                	jne    c0011ac0 <VAS::allocatePages(int, int)+0x9e>
c0011aae:	0f 20 d8             	mov    eax,cr3
c0011ab1:	0f 22 d8             	mov    cr3,eax
c0011ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ab8:	83 c4 1c             	add    esp,0x1c
c0011abb:	5b                   	pop    ebx
c0011abc:	5e                   	pop    esi
c0011abd:	5f                   	pop    edi
c0011abe:	5d                   	pop    ebp
c0011abf:	c3                   	ret    
c0011ac0:	c1 ee 0a             	shr    esi,0xa
c0011ac3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ac7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011acd:	c1 eb 0a             	shr    ebx,0xa
c0011ad0:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011ad6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011adc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ae2:	39 c3                	cmp    ebx,eax
c0011ae4:	77 ce                	ja     c0011ab4 <VAS::allocatePages(int, int)+0x92>
c0011ae6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ae9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011aef:	39 d8                	cmp    eax,ebx
c0011af1:	73 f3                	jae    c0011ae6 <VAS::allocatePages(int, int)+0xc4>
c0011af3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011af7:	83 c4 1c             	add    esp,0x1c
c0011afa:	5b                   	pop    ebx
c0011afb:	5e                   	pop    esi
c0011afc:	5f                   	pop    edi
c0011afd:	5d                   	pop    ebp
c0011afe:	c3                   	ret    
c0011aff:	83 ec 0c             	sub    esp,0xc
c0011b02:	68 bc 6f 02 c0       	push   0xc0026fbc
c0011b07:	e8 b7 6e 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0011b0c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b13:	83 c4 10             	add    esp,0x10
c0011b16:	e9 43 ff ff ff       	jmp    c0011a5e <VAS::allocatePages(int, int)+0x3c>
c0011b1b:	83 ec 0c             	sub    esp,0xc
c0011b1e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b22:	e8 3a f7 ff ff       	call   c0011261 <Virt::allocateKernelVirtualPages(int)>
c0011b27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b2b:	83 c4 10             	add    esp,0x10
c0011b2e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b33:	0f 87 9b 00 00 00    	ja     c0011bd4 <VAS::allocatePages(int, int)+0x1b2>
c0011b39:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b3d:	85 d2                	test   edx,edx
c0011b3f:	7e 3c                	jle    c0011b7d <VAS::allocatePages(int, int)+0x15b>
c0011b41:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b45:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b49:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b4d:	c1 e5 0c             	shl    ebp,0xc
c0011b50:	81 ce 00 04 00 00    	or     esi,0x400
c0011b56:	01 dd                	add    ebp,ebx
c0011b58:	e8 6b db ff ff       	call   c000f6c8 <Phys::allocatePage()>
c0011b5d:	56                   	push   esi
c0011b5e:	53                   	push   ebx
c0011b5f:	50                   	push   eax
c0011b60:	57                   	push   edi
c0011b61:	e8 bc fd ff ff       	call   c0011922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b66:	83 c4 10             	add    esp,0x10
c0011b69:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b6e:	74 03                	je     c0011b73 <VAS::allocatePages(int, int)+0x151>
c0011b70:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b73:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b79:	39 dd                	cmp    ebp,ebx
c0011b7b:	75 db                	jne    c0011b58 <VAS::allocatePages(int, int)+0x136>
c0011b7d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b82:	0f 84 26 ff ff ff    	je     c0011aae <VAS::allocatePages(int, int)+0x8c>
c0011b88:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b90:	89 d3                	mov    ebx,edx
c0011b92:	c1 e0 0c             	shl    eax,0xc
c0011b95:	c1 eb 0a             	shr    ebx,0xa
c0011b98:	01 d0                	add    eax,edx
c0011b9a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ba0:	c1 e8 0a             	shr    eax,0xa
c0011ba3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ba9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011bae:	2d 00 00 40 00       	sub    eax,0x400000
c0011bb3:	39 c3                	cmp    ebx,eax
c0011bb5:	0f 87 f9 fe ff ff    	ja     c0011ab4 <VAS::allocatePages(int, int)+0x92>
c0011bbb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bbe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bc4:	39 d8                	cmp    eax,ebx
c0011bc6:	73 f3                	jae    c0011bbb <VAS::allocatePages(int, int)+0x199>
c0011bc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bcc:	83 c4 1c             	add    esp,0x1c
c0011bcf:	5b                   	pop    ebx
c0011bd0:	5e                   	pop    esi
c0011bd1:	5f                   	pop    edi
c0011bd2:	5d                   	pop    ebp
c0011bd3:	c3                   	ret    
c0011bd4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011bd9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011bdf:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011be6:	0f 84 4d ff ff ff    	je     c0011b39 <VAS::allocatePages(int, int)+0x117>
c0011bec:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011bf4:	e9 40 ff ff ff       	jmp    c0011b39 <VAS::allocatePages(int, int)+0x117>
c0011bf9:	90                   	nop

c0011bfa <VAS::setCPUSpecific(unsigned long)>:
c0011bfa:	83 ec 0c             	sub    esp,0xc
c0011bfd:	6a 05                	push   0x5
c0011bff:	68 00 00 40 c2       	push   0xc2400000
c0011c04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c0c:	e8 11 fd ff ff       	call   c0011922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c11:	83 c4 1c             	add    esp,0x1c
c0011c14:	c3                   	ret    
c0011c15:	90                   	nop

c0011c16 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c16:	55                   	push   ebp
c0011c17:	57                   	push   edi
c0011c18:	56                   	push   esi
c0011c19:	53                   	push   ebx
c0011c1a:	83 ec 1c             	sub    esp,0x1c
c0011c1d:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011c22:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c26:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c2c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c30:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c36:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c3a:	83 e0 01             	and    eax,0x1
c0011c3d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c45:	85 c0                	test   eax,eax
c0011c47:	7e 39                	jle    c0011c82 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011c49:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c4d:	89 f3                	mov    ebx,esi
c0011c4f:	c1 e0 0c             	shl    eax,0xc
c0011c52:	01 f0                	add    eax,esi
c0011c54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c58:	55                   	push   ebp
c0011c59:	53                   	push   ebx
c0011c5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c5e:	29 f0                	sub    eax,esi
c0011c60:	01 d8                	add    eax,ebx
c0011c62:	50                   	push   eax
c0011c63:	57                   	push   edi
c0011c64:	e8 b9 fc ff ff       	call   c0011922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c69:	83 c4 10             	add    esp,0x10
c0011c6c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c71:	74 03                	je     c0011c76 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011c73:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c76:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c7c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011c80:	75 d6                	jne    c0011c58 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011c82:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c87:	75 10                	jne    c0011c99 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011c89:	0f 20 d8             	mov    eax,cr3
c0011c8c:	0f 22 d8             	mov    cr3,eax
c0011c8f:	83 c4 1c             	add    esp,0x1c
c0011c92:	89 f0                	mov    eax,esi
c0011c94:	5b                   	pop    ebx
c0011c95:	5e                   	pop    esi
c0011c96:	5f                   	pop    edi
c0011c97:	5d                   	pop    ebp
c0011c98:	c3                   	ret    
c0011c99:	89 f3                	mov    ebx,esi
c0011c9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c9f:	c1 eb 0a             	shr    ebx,0xa
c0011ca2:	c1 e0 0c             	shl    eax,0xc
c0011ca5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cab:	01 f0                	add    eax,esi
c0011cad:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cb3:	c1 e8 0a             	shr    eax,0xa
c0011cb6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cbb:	2d 00 00 40 00       	sub    eax,0x400000
c0011cc0:	39 c3                	cmp    ebx,eax
c0011cc2:	77 cb                	ja     c0011c8f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011cc4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cc7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ccd:	39 d8                	cmp    eax,ebx
c0011ccf:	73 f3                	jae    c0011cc4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011cd1:	83 c4 1c             	add    esp,0x1c
c0011cd4:	89 f0                	mov    eax,esi
c0011cd6:	5b                   	pop    ebx
c0011cd7:	5e                   	pop    esi
c0011cd8:	5f                   	pop    edi
c0011cd9:	5d                   	pop    ebp
c0011cda:	c3                   	ret    
c0011cdb:	90                   	nop

c0011cdc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011cdc:	55                   	push   ebp
c0011cdd:	57                   	push   edi
c0011cde:	56                   	push   esi
c0011cdf:	53                   	push   ebx
c0011ce0:	83 ec 1c             	sub    esp,0x1c
c0011ce3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ce7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011ceb:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011cef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011cf3:	a9 ff 0f 00 00       	test   eax,0xfff
c0011cf8:	75 4a                	jne    c0011d44 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011cfa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011cfe:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d01:	c1 eb 16             	shr    ebx,0x16
c0011d04:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d0b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d0f:	74 4d                	je     c0011d5e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d15:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d19:	c1 e8 0a             	shr    eax,0xa
c0011d1c:	80 fa 01             	cmp    dl,0x1
c0011d1f:	19 d2                	sbb    edx,edx
c0011d21:	c1 e3 0c             	shl    ebx,0xc
c0011d24:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d28:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d2e:	25 fc 0f 00 00       	and    eax,0xffc
c0011d33:	01 d8                	add    eax,ebx
c0011d35:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d3c:	83 c4 1c             	add    esp,0x1c
c0011d3f:	5b                   	pop    ebx
c0011d40:	5e                   	pop    esi
c0011d41:	5f                   	pop    edi
c0011d42:	5d                   	pop    ebp
c0011d43:	c3                   	ret    
c0011d44:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d48:	83 ec 0c             	sub    esp,0xc
c0011d4b:	68 e8 6f 02 c0       	push   0xc0026fe8
c0011d50:	e8 6e 6c 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0011d55:	83 c4 10             	add    esp,0x10
c0011d58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d5c:	eb 9c                	jmp    c0011cfa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011d5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d62:	e8 61 d9 ff ff       	call   c000f6c8 <Phys::allocatePage()>
c0011d67:	89 c5                	mov    ebp,eax
c0011d69:	e8 83 f6 ff ff       	call   c00113f1 <Virt::getAKernelVAS()>
c0011d6e:	83 ec 0c             	sub    esp,0xc
c0011d71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d75:	6a 01                	push   0x1
c0011d77:	e8 e5 f4 ff ff       	call   c0011261 <Virt::allocateKernelVirtualPages(int)>
c0011d7c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011d83:	6a 01                	push   0x1
c0011d85:	50                   	push   eax
c0011d86:	55                   	push   ebp
c0011d87:	81 cd 07 04 00 00    	or     ebp,0x407
c0011d8d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011d91:	51                   	push   ecx
c0011d92:	e8 7f fe ff ff       	call   c0011c16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011d97:	83 c4 1c             	add    esp,0x1c
c0011d9a:	68 00 10 00 00       	push   0x1000
c0011d9f:	6a 00                	push   0x0
c0011da1:	50                   	push   eax
c0011da2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011da6:	e8 d2 e8 fe ff       	call   c000067d <memset>
c0011dab:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011daf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011db2:	e8 04 f8 ff ff       	call   c00115bb <Virt::freeKernelVirtualPages(unsigned long)>
c0011db7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011dba:	83 c4 10             	add    esp,0x10
c0011dbd:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011dc4:	e9 48 ff ff ff       	jmp    c0011d11 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0011dc9:	90                   	nop

c0011dca <VAS::VAS(bool)>:
c0011dca:	53                   	push   ebx
c0011dcb:	83 ec 28             	sub    esp,0x28
c0011dce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dd2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011dd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011dda:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011de1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011de5:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011de9:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011dec:	e8 d7 d8 ff ff       	call   c000f6c8 <Phys::allocatePage()>
c0011df1:	89 c2                	mov    edx,eax
c0011df3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011df7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011dfa:	e8 f2 f5 ff ff       	call   c00113f1 <Virt::getAKernelVAS()>
c0011dff:	89 c3                	mov    ebx,eax
c0011e01:	83 ec 0c             	sub    esp,0xc
c0011e04:	6a 01                	push   0x1
c0011e06:	e8 56 f4 ff ff       	call   c0011261 <Virt::allocateKernelVirtualPages(int)>
c0011e0b:	83 c4 10             	add    esp,0x10
c0011e0e:	89 c2                	mov    edx,eax
c0011e10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e17:	83 ec 0c             	sub    esp,0xc
c0011e1a:	6a 03                	push   0x3
c0011e1c:	6a 01                	push   0x1
c0011e1e:	52                   	push   edx
c0011e1f:	50                   	push   eax
c0011e20:	53                   	push   ebx
c0011e21:	e8 f0 fd ff ff       	call   c0011c16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e26:	83 c4 20             	add    esp,0x20
c0011e29:	89 c2                	mov    edx,eax
c0011e2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e2f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011e32:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e3a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e42:	7f 1c                	jg     c0011e60 <VAS::VAS(bool)+0x96>
c0011e44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e4b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e4f:	c1 e2 02             	shl    edx,0x2
c0011e52:	01 d0                	add    eax,edx
c0011e54:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011e5a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e5e:	eb da                	jmp    c0011e3a <VAS::VAS(bool)+0x70>
c0011e60:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011e68:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011e70:	7f 7a                	jg     c0011eec <VAS::VAS(bool)+0x122>
c0011e72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e76:	2d 00 02 00 00       	sub    eax,0x200
c0011e7b:	c1 e0 0c             	shl    eax,0xc
c0011e7e:	83 c8 03             	or     eax,0x3
c0011e81:	89 c2                	mov    edx,eax
c0011e83:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011e88:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e8e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011e94:	83 e0 10             	and    eax,0x10
c0011e97:	84 c0                	test   al,al
c0011e99:	74 07                	je     c0011ea2 <VAS::VAS(bool)+0xd8>
c0011e9b:	b8 00 01 00 00       	mov    eax,0x100
c0011ea0:	eb 05                	jmp    c0011ea7 <VAS::VAS(bool)+0xdd>
c0011ea2:	b8 00 00 00 00       	mov    eax,0x0
c0011ea7:	09 d0                	or     eax,edx
c0011ea9:	89 c1                	mov    ecx,eax
c0011eab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eaf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011eb2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011eb6:	c1 e2 02             	shl    edx,0x2
c0011eb9:	01 d0                	add    eax,edx
c0011ebb:	89 ca                	mov    edx,ecx
c0011ebd:	89 10                	mov    DWORD PTR [eax],edx
c0011ebf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ec3:	2d 40 03 00 00       	sub    eax,0x340
c0011ec8:	83 f8 7f             	cmp    eax,0x7f
c0011ecb:	77 16                	ja     c0011ee3 <VAS::VAS(bool)+0x119>
c0011ecd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ed1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ed4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ed8:	c1 e2 02             	shl    edx,0x2
c0011edb:	01 d0                	add    eax,edx
c0011edd:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011ee3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011ee7:	e9 7c ff ff ff       	jmp    c0011e68 <VAS::VAS(bool)+0x9e>
c0011eec:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011ef1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ef7:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011efd:	83 e0 10             	and    eax,0x10
c0011f00:	84 c0                	test   al,al
c0011f02:	74 07                	je     c0011f0b <VAS::VAS(bool)+0x141>
c0011f04:	b8 03 41 00 00       	mov    eax,0x4103
c0011f09:	eb 05                	jmp    c0011f10 <VAS::VAS(bool)+0x146>
c0011f0b:	b8 03 40 00 00       	mov    eax,0x4003
c0011f10:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f14:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011f17:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f1d:	89 02                	mov    DWORD PTR [edx],eax
c0011f1f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011f24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f2a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f30:	83 ec 08             	sub    esp,0x8
c0011f33:	50                   	push   eax
c0011f34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f38:	e8 bd fc ff ff       	call   c0011bfa <VAS::setCPUSpecific(unsigned long)>
c0011f3d:	83 c4 10             	add    esp,0x10
c0011f40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f44:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011f47:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011f4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f52:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f58:	83 e0 10             	and    eax,0x10
c0011f5b:	84 c0                	test   al,al
c0011f5d:	74 07                	je     c0011f66 <VAS::VAS(bool)+0x19c>
c0011f5f:	b8 00 01 00 00       	mov    eax,0x100
c0011f64:	eb 05                	jmp    c0011f6b <VAS::VAS(bool)+0x1a1>
c0011f66:	b8 00 00 00 00       	mov    eax,0x0
c0011f6b:	09 c2                	or     edx,eax
c0011f6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f74:	05 fc 0f 00 00       	add    eax,0xffc
c0011f79:	83 ca 03             	or     edx,0x3
c0011f7c:	89 10                	mov    DWORD PTR [eax],edx
c0011f7e:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011f83:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f89:	83 ec 0c             	sub    esp,0xc
c0011f8c:	50                   	push   eax
c0011f8d:	e8 70 19 00 00       	call   c0013902 <Device::getName()>
c0011f92:	83 c4 10             	add    esp,0x10
c0011f95:	83 ec 08             	sub    esp,0x8
c0011f98:	68 e7 70 02 c0       	push   0xc00270e7
c0011f9d:	50                   	push   eax
c0011f9e:	e8 ca e7 fe ff       	call   c000076d <strcmp>
c0011fa3:	83 c4 10             	add    esp,0x10
c0011fa6:	85 c0                	test   eax,eax
c0011fa8:	0f 94 c0             	sete   al
c0011fab:	84 c0                	test   al,al
c0011fad:	74 70                	je     c001201f <VAS::VAS(bool)+0x255>
c0011faf:	e8 3b 99 00 00       	call   c001b8ef <disableIRQs()>
c0011fb4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011fb9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fbf:	05 7c 09 00 00       	add    eax,0x97c
c0011fc4:	83 ec 0c             	sub    esp,0xc
c0011fc7:	50                   	push   eax
c0011fc8:	e8 cd cb ff ff       	call   c000eb9a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011fcd:	83 c4 10             	add    esp,0x10
c0011fd0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fd5:	89 c3                	mov    ebx,eax
c0011fd7:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011fdc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fe2:	05 7c 09 00 00       	add    eax,0x97c
c0011fe7:	83 ec 0c             	sub    esp,0xc
c0011fea:	50                   	push   eax
c0011feb:	e8 aa cb ff ff       	call   c000eb9a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011ff0:	83 c4 10             	add    esp,0x10
c0011ff3:	83 ec 08             	sub    esp,0x8
c0011ff6:	50                   	push   eax
c0011ff7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011ffb:	e8 9c f5 ff ff       	call   c001159c <VAS::getPageTableEntry(unsigned long)>
c0012000:	83 c4 10             	add    esp,0x10
c0012003:	8b 00                	mov    eax,DWORD PTR [eax]
c0012005:	25 00 f0 ff ff       	and    eax,0xfffff000
c001200a:	6a 11                	push   0x11
c001200c:	53                   	push   ebx
c001200d:	50                   	push   eax
c001200e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012012:	e8 0b f9 ff ff       	call   c0011922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012017:	83 c4 10             	add    esp,0x10
c001201a:	e8 de 98 00 00       	call   c001b8fd <enableIRQs()>
c001201f:	90                   	nop
c0012020:	83 c4 28             	add    esp,0x28
c0012023:	5b                   	pop    ebx
c0012024:	c3                   	ret    

c0012025 <mapVASFirstTime>:
c0012025:	55                   	push   ebp
c0012026:	57                   	push   edi
c0012027:	56                   	push   esi
c0012028:	53                   	push   ebx
c0012029:	83 ec 0c             	sub    esp,0xc
c001202c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012031:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012034:	4a                   	dec    edx
c0012035:	0f 84 8e 00 00 00    	je     c00120c9 <mapVASFirstTime+0xa4>
c001203b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001203e:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012041:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012046:	c1 e5 15             	shl    ebp,0x15
c0012049:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001204e:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012054:	29 eb                	sub    ebx,ebp
c0012056:	29 ee                	sub    esi,ebp
c0012058:	e8 6b d6 ff ff       	call   c000f6c8 <Phys::allocatePage()>
c001205d:	83 ec 0c             	sub    esp,0xc
c0012060:	68 03 04 00 00       	push   0x403
c0012065:	6a 01                	push   0x1
c0012067:	53                   	push   ebx
c0012068:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001206e:	50                   	push   eax
c001206f:	57                   	push   edi
c0012070:	e8 a1 fb ff ff       	call   c0011c16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012075:	83 c4 20             	add    esp,0x20
c0012078:	39 f3                	cmp    ebx,esi
c001207a:	75 dc                	jne    c0012058 <mapVASFirstTime+0x33>
c001207c:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012081:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012086:	29 ee                	sub    esi,ebp
c0012088:	29 e8                	sub    eax,ebp
c001208a:	89 c5                	mov    ebp,eax
c001208c:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012090:	19 db                	sbb    ebx,ebx
c0012092:	e8 31 d6 ff ff       	call   c000f6c8 <Phys::allocatePage()>
c0012097:	83 e3 04             	and    ebx,0x4
c001209a:	83 ec 0c             	sub    esp,0xc
c001209d:	81 c3 03 04 00 00    	add    ebx,0x403
c00120a3:	53                   	push   ebx
c00120a4:	6a 01                	push   0x1
c00120a6:	56                   	push   esi
c00120a7:	81 ee 00 10 00 00    	sub    esi,0x1000
c00120ad:	50                   	push   eax
c00120ae:	57                   	push   edi
c00120af:	e8 62 fb ff ff       	call   c0011c16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120b4:	83 c4 20             	add    esp,0x20
c00120b7:	39 f5                	cmp    ebp,esi
c00120b9:	75 d1                	jne    c001208c <mapVASFirstTime+0x67>
c00120bb:	0f 20 d8             	mov    eax,cr3
c00120be:	0f 22 d8             	mov    cr3,eax
c00120c1:	83 c4 0c             	add    esp,0xc
c00120c4:	5b                   	pop    ebx
c00120c5:	5e                   	pop    esi
c00120c6:	5f                   	pop    edi
c00120c7:	5d                   	pop    ebp
c00120c8:	c3                   	ret    
c00120c9:	83 ec 0c             	sub    esp,0xc
c00120cc:	68 f5 70 02 c0       	push   0xc00270f5
c00120d1:	e8 6f 01 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00120d6:	83 c4 10             	add    esp,0x10
c00120d9:	83 c4 0c             	add    esp,0xc
c00120dc:	5b                   	pop    ebx
c00120dd:	5e                   	pop    esi
c00120de:	5f                   	pop    edi
c00120df:	5d                   	pop    ebp
c00120e0:	c3                   	ret    

c00120e1 <__cxa_atexit>:
c00120e1:	31 c0                	xor    eax,eax
c00120e3:	c3                   	ret    

c00120e4 <__cxa_finalize>:
c00120e4:	c3                   	ret    

c00120e5 <__stack_chk_fail>:
c00120e5:	55                   	push   ebp
c00120e6:	89 e5                	mov    ebp,esp
c00120e8:	83 ec 10             	sub    esp,0x10
c00120eb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00120ee:	68 0e 71 02 c0       	push   0xc002710e
c00120f3:	e8 4d 01 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00120f8:	58                   	pop    eax
c00120f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00120fc:	5a                   	pop    edx
c00120fd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012100:	68 0e 71 02 c0       	push   0xc002710e
c0012105:	e8 3b 01 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001210a:	59                   	pop    ecx
c001210b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001210e:	5a                   	pop    edx
c001210f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012111:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012114:	68 0e 71 02 c0       	push   0xc002710e
c0012119:	e8 27 01 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001211e:	59                   	pop    ecx
c001211f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012122:	5a                   	pop    edx
c0012123:	8b 00                	mov    eax,DWORD PTR [eax]
c0012125:	8b 00                	mov    eax,DWORD PTR [eax]
c0012127:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001212a:	68 0e 71 02 c0       	push   0xc002710e
c001212f:	e8 11 01 00 00       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0012134:	c7 04 24 16 71 02 c0 	mov    DWORD PTR [esp],0xc0027116
c001213b:	e8 83 68 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0012140:	83 c4 10             	add    esp,0x10
c0012143:	c9                   	leave  
c0012144:	c3                   	ret    

c0012145 <__cxa_pure_virtual>:
c0012145:	83 ec 18             	sub    esp,0x18
c0012148:	68 2e 71 02 c0       	push   0xc002712e
c001214d:	e8 71 68 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0012152:	83 c4 1c             	add    esp,0x1c
c0012155:	c3                   	ret    

c0012156 <operator new(unsigned long)>:
c0012156:	e9 c3 cf ff ff       	jmp    c000f11e <malloc>

c001215b <operator new[](unsigned long)>:
c001215b:	e9 be cf ff ff       	jmp    c000f11e <malloc>

c0012160 <operator delete(void*)>:
c0012160:	e9 d9 cf ff ff       	jmp    c000f13e <rfree>

c0012165 <operator delete(void*, unsigned long)>:
c0012165:	e9 d4 cf ff ff       	jmp    c000f13e <rfree>

c001216a <operator delete[](void*)>:
c001216a:	e9 cf cf ff ff       	jmp    c000f13e <rfree>

c001216f <operator delete[](void*, unsigned long)>:
c001216f:	e9 ca cf ff ff       	jmp    c000f13e <rfree>

c0012174 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012174:	57                   	push   edi
c0012175:	b9 3f 00 00 00       	mov    ecx,0x3f
c001217a:	56                   	push   esi
c001217b:	be 44 71 02 c0       	mov    esi,0xc0027144
c0012180:	53                   	push   ebx
c0012181:	83 ec 40             	sub    esp,0x40
c0012184:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012188:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001218c:	fc                   	cld    
c001218d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001218f:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012193:	83 f9 3e             	cmp    ecx,0x3e
c0012196:	7e 05                	jle    c001219d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012198:	b9 3e 00 00 00       	mov    ecx,0x3e
c001219d:	89 df                	mov    edi,ebx
c001219f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00121a3:	eb 02                	jmp    c00121a7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00121a5:	89 c7                	mov    edi,eax
c00121a7:	31 d2                	xor    edx,edx
c00121a9:	46                   	inc    esi
c00121aa:	89 f8                	mov    eax,edi
c00121ac:	f7 f1                	div    ecx
c00121ae:	39 cf                	cmp    edi,ecx
c00121b0:	73 f3                	jae    c00121a5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00121b2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121b5:	eb 02                	jmp    c00121b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00121b7:	89 c3                	mov    ebx,eax
c00121b9:	31 d2                	xor    edx,edx
c00121bb:	4e                   	dec    esi
c00121bc:	89 d8                	mov    eax,ebx
c00121be:	f7 f1                	div    ecx
c00121c0:	39 cb                	cmp    ebx,ecx
c00121c2:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00121c6:	88 16                	mov    BYTE PTR [esi],dl
c00121c8:	73 ed                	jae    c00121b7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00121ca:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00121ce:	83 c4 40             	add    esp,0x40
c00121d1:	5b                   	pop    ebx
c00121d2:	5e                   	pop    esi
c00121d3:	5f                   	pop    edi
c00121d4:	c3                   	ret    

c00121d5 <Dbg::logc(char)>:
c00121d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00121d9:	ba fd 03 00 00       	mov    edx,0x3fd
c00121de:	ec                   	in     al,dx
c00121df:	a8 20                	test   al,0x20
c00121e1:	74 fb                	je     c00121de <Dbg::logc(char)+0x9>
c00121e3:	ba f8 03 00 00       	mov    edx,0x3f8
c00121e8:	88 c8                	mov    al,cl
c00121ea:	ee                   	out    dx,al
c00121eb:	c3                   	ret    

c00121ec <Dbg::logs(char*)>:
c00121ec:	53                   	push   ebx
c00121ed:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00121f1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00121f4:	84 c0                	test   al,al
c00121f6:	74 0f                	je     c0012207 <Dbg::logs(char*)+0x1b>
c00121f8:	50                   	push   eax
c00121f9:	43                   	inc    ebx
c00121fa:	e8 d6 ff ff ff       	call   c00121d5 <Dbg::logc(char)>
c00121ff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012202:	5a                   	pop    edx
c0012203:	84 c0                	test   al,al
c0012205:	75 f1                	jne    c00121f8 <Dbg::logs(char*)+0xc>
c0012207:	5b                   	pop    ebx
c0012208:	c3                   	ret    

c0012209 <Dbg::logWriteInt(unsigned int)>:
c0012209:	83 ec 10             	sub    esp,0x10
c001220c:	6a 0a                	push   0xa
c001220e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012212:	50                   	push   eax
c0012213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012217:	e8 58 ff ff ff       	call   c0012174 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001221c:	50                   	push   eax
c001221d:	e8 ca ff ff ff       	call   c00121ec <Dbg::logs(char*)>
c0012222:	83 c4 20             	add    esp,0x20
c0012225:	c3                   	ret    

c0012226 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012226:	83 ec 10             	sub    esp,0x10
c0012229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001222d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012231:	50                   	push   eax
c0012232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012236:	e8 39 ff ff ff       	call   c0012174 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001223b:	50                   	push   eax
c001223c:	e8 ab ff ff ff       	call   c00121ec <Dbg::logs(char*)>
c0012241:	83 c4 20             	add    esp,0x20
c0012244:	c3                   	ret    

c0012245 <Dbg::kprintf(char const*, ...)>:
c0012245:	55                   	push   ebp
c0012246:	57                   	push   edi
c0012247:	56                   	push   esi
c0012248:	53                   	push   ebx
c0012249:	83 ec 0c             	sub    esp,0xc
c001224c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012250:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012254:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012258:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001225b:	84 c0                	test   al,al
c001225d:	74 4a                	je     c00122a9 <Dbg::kprintf(char const*, ...)+0x64>
c001225f:	31 db                	xor    ebx,ebx
c0012261:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012264:	3c 25                	cmp    al,0x25
c0012266:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012269:	0f 85 e4 00 00 00    	jne    c0012353 <Dbg::kprintf(char const*, ...)+0x10e>
c001226f:	83 c3 02             	add    ebx,0x2
c0012272:	8a 07                	mov    al,BYTE PTR [edi]
c0012274:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012277:	83 e8 25             	sub    eax,0x25
c001227a:	3c 53                	cmp    al,0x53
c001227c:	0f 87 ba 00 00 00    	ja     c001233c <Dbg::kprintf(char const*, ...)+0xf7>
c0012282:	0f b6 c0             	movzx  eax,al
c0012285:	ff 24 85 84 71 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd8e7c]
c001228c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012290:	89 c8                	mov    eax,ecx
c0012292:	83 c1 04             	add    ecx,0x4
c0012295:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012299:	ff 30                	push   DWORD PTR [eax]
c001229b:	e8 4c ff ff ff       	call   c00121ec <Dbg::logs(char*)>
c00122a0:	58                   	pop    eax
c00122a1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00122a5:	84 c0                	test   al,al
c00122a7:	75 b8                	jne    c0012261 <Dbg::kprintf(char const*, ...)+0x1c>
c00122a9:	83 c4 0c             	add    esp,0xc
c00122ac:	5b                   	pop    ebx
c00122ad:	5e                   	pop    esi
c00122ae:	5f                   	pop    edi
c00122af:	5d                   	pop    ebp
c00122b0:	c3                   	ret    
c00122b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122b5:	89 d0                	mov    eax,edx
c00122b7:	83 c2 04             	add    edx,0x4
c00122ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122be:	ff 30                	push   DWORD PTR [eax]
c00122c0:	e8 44 ff ff ff       	call   c0012209 <Dbg::logWriteInt(unsigned int)>
c00122c5:	58                   	pop    eax
c00122c6:	eb d9                	jmp    c00122a1 <Dbg::kprintf(char const*, ...)+0x5c>
c00122c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122cc:	89 d0                	mov    eax,edx
c00122ce:	83 c2 04             	add    edx,0x4
c00122d1:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00122d4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122d8:	50                   	push   eax
c00122d9:	e8 f7 fe ff ff       	call   c00121d5 <Dbg::logc(char)>
c00122de:	58                   	pop    eax
c00122df:	eb c0                	jmp    c00122a1 <Dbg::kprintf(char const*, ...)+0x5c>
c00122e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122e5:	89 c8                	mov    eax,ecx
c00122e7:	83 c1 04             	add    ecx,0x4
c00122ea:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122ee:	ff 30                	push   DWORD PTR [eax]
c00122f0:	e8 14 ff ff ff       	call   c0012209 <Dbg::logWriteInt(unsigned int)>
c00122f5:	5f                   	pop    edi
c00122f6:	eb a9                	jmp    c00122a1 <Dbg::kprintf(char const*, ...)+0x5c>
c00122f8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122fc:	89 c8                	mov    eax,ecx
c00122fe:	83 c1 04             	add    ecx,0x4
c0012301:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012305:	6a 10                	push   0x10
c0012307:	ff 30                	push   DWORD PTR [eax]
c0012309:	e8 18 ff ff ff       	call   c0012226 <Dbg::logWriteIntBase(unsigned int, int)>
c001230e:	59                   	pop    ecx
c001230f:	5f                   	pop    edi
c0012310:	eb 8f                	jmp    c00122a1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012312:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012316:	89 d0                	mov    eax,edx
c0012318:	83 c2 08             	add    edx,0x8
c001231b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001231f:	6a 10                	push   0x10
c0012321:	ff 30                	push   DWORD PTR [eax]
c0012323:	e8 fe fe ff ff       	call   c0012226 <Dbg::logWriteIntBase(unsigned int, int)>
c0012328:	58                   	pop    eax
c0012329:	5a                   	pop    edx
c001232a:	e9 72 ff ff ff       	jmp    c00122a1 <Dbg::kprintf(char const*, ...)+0x5c>
c001232f:	6a 25                	push   0x25
c0012331:	e8 9f fe ff ff       	call   c00121d5 <Dbg::logc(char)>
c0012336:	58                   	pop    eax
c0012337:	e9 65 ff ff ff       	jmp    c00122a1 <Dbg::kprintf(char const*, ...)+0x5c>
c001233c:	6a 25                	push   0x25
c001233e:	e8 92 fe ff ff       	call   c00121d5 <Dbg::logc(char)>
c0012343:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012346:	50                   	push   eax
c0012347:	e8 89 fe ff ff       	call   c00121d5 <Dbg::logc(char)>
c001234c:	5a                   	pop    edx
c001234d:	59                   	pop    ecx
c001234e:	e9 4e ff ff ff       	jmp    c00122a1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012353:	50                   	push   eax
c0012354:	89 eb                	mov    ebx,ebp
c0012356:	e8 7a fe ff ff       	call   c00121d5 <Dbg::logc(char)>
c001235b:	89 fd                	mov    ebp,edi
c001235d:	58                   	pop    eax
c001235e:	e9 3e ff ff ff       	jmp    c00122a1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012363:	90                   	nop

c0012364 <File::read(unsigned long long, void*, int*)>:
c0012364:	53                   	push   ebx
c0012365:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012369:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001236d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012374:	3c 19                	cmp    al,0x19
c0012376:	77 35                	ja     c00123ad <File::read(unsigned long long, void*, int*)+0x49>
c0012378:	8b 04 85 60 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55a0]
c001237f:	85 c0                	test   eax,eax
c0012381:	74 2a                	je     c00123ad <File::read(unsigned long long, void*, int*)+0x49>
c0012383:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012389:	85 c0                	test   eax,eax
c001238b:	74 20                	je     c00123ad <File::read(unsigned long long, void*, int*)+0x49>
c001238d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012391:	74 21                	je     c00123b4 <File::read(unsigned long long, void*, int*)+0x50>
c0012393:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012395:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012399:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001239f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123a7:	5b                   	pop    ebx
c00123a8:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00123ab:	ff e0                	jmp    eax
c00123ad:	b8 0b 00 00 00       	mov    eax,0xb
c00123b2:	eb 05                	jmp    c00123b9 <File::read(unsigned long long, void*, int*)+0x55>
c00123b4:	b8 05 00 00 00       	mov    eax,0x5
c00123b9:	5b                   	pop    ebx
c00123ba:	c3                   	ret    
c00123bb:	90                   	nop

c00123bc <File::write(unsigned long long, void*, int*)>:
c00123bc:	53                   	push   ebx
c00123bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123c5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00123cc:	3c 19                	cmp    al,0x19
c00123ce:	77 35                	ja     c0012405 <File::write(unsigned long long, void*, int*)+0x49>
c00123d0:	8b 04 85 60 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55a0]
c00123d7:	85 c0                	test   eax,eax
c00123d9:	74 2a                	je     c0012405 <File::write(unsigned long long, void*, int*)+0x49>
c00123db:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00123e1:	85 c0                	test   eax,eax
c00123e3:	74 20                	je     c0012405 <File::write(unsigned long long, void*, int*)+0x49>
c00123e5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00123e9:	74 21                	je     c001240c <File::write(unsigned long long, void*, int*)+0x50>
c00123eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123f1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00123f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123ff:	5b                   	pop    ebx
c0012400:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012403:	ff e0                	jmp    eax
c0012405:	b8 0b 00 00 00       	mov    eax,0xb
c001240a:	eb 05                	jmp    c0012411 <File::write(unsigned long long, void*, int*)+0x55>
c001240c:	b8 05 00 00 00       	mov    eax,0x5
c0012411:	5b                   	pop    ebx
c0012412:	c3                   	ret    
c0012413:	90                   	nop

c0012414 <Directory::read(unsigned long long, void*, int*)>:
c0012414:	53                   	push   ebx
c0012415:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012419:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001241d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012424:	3c 19                	cmp    al,0x19
c0012426:	77 35                	ja     c001245d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012428:	8b 04 85 60 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55a0]
c001242f:	85 c0                	test   eax,eax
c0012431:	74 2a                	je     c001245d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012433:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012439:	85 c0                	test   eax,eax
c001243b:	74 20                	je     c001245d <Directory::read(unsigned long long, void*, int*)+0x49>
c001243d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012441:	74 21                	je     c0012464 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012443:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012445:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012449:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001244f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012453:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012457:	5b                   	pop    ebx
c0012458:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001245b:	ff e0                	jmp    eax
c001245d:	b8 0b 00 00 00       	mov    eax,0xb
c0012462:	eb 05                	jmp    c0012469 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012464:	b8 05 00 00 00       	mov    eax,0x5
c0012469:	5b                   	pop    ebx
c001246a:	c3                   	ret    
c001246b:	90                   	nop

c001246c <Directory::write(unsigned long long, void*, int*)>:
c001246c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012470:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012477:	b8 0b 00 00 00       	mov    eax,0xb
c001247c:	80 fa 19             	cmp    dl,0x19
c001247f:	77 18                	ja     c0012499 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012481:	8b 14 95 60 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd55a0]
c0012488:	85 d2                	test   edx,edx
c001248a:	74 0d                	je     c0012499 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001248c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012493:	19 c0                	sbb    eax,eax
c0012495:	83 e0 0a             	and    eax,0xa
c0012498:	40                   	inc    eax
c0012499:	c3                   	ret    

c001249a <File::isAtty()>:
c001249a:	31 c0                	xor    eax,eax
c001249c:	c3                   	ret    
c001249d:	90                   	nop

c001249e <Directory::isAtty()>:
c001249e:	31 c0                	xor    eax,eax
c00124a0:	c3                   	ret    
c00124a1:	90                   	nop

c00124a2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00124a2:	b8 0a 00 00 00       	mov    eax,0xa
c00124a7:	c3                   	ret    

c00124a8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00124a8:	b8 0a 00 00 00       	mov    eax,0xa
c00124ad:	c3                   	ret    

c00124ae <File::~File()>:
c00124ae:	83 ec 0c             	sub    esp,0xc
c00124b1:	ba 40 73 02 c0       	mov    edx,0xc0027340
c00124b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ba:	89 10                	mov    DWORD PTR [eax],edx
c00124bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c0:	83 ec 0c             	sub    esp,0xc
c00124c3:	50                   	push   eax
c00124c4:	e8 37 eb ff ff       	call   c0011000 <UnixFile::~UnixFile()>
c00124c9:	83 c4 10             	add    esp,0x10
c00124cc:	90                   	nop
c00124cd:	83 c4 0c             	add    esp,0xc
c00124d0:	c3                   	ret    
c00124d1:	90                   	nop

c00124d2 <File::~File()>:
c00124d2:	83 ec 0c             	sub    esp,0xc
c00124d5:	83 ec 0c             	sub    esp,0xc
c00124d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124dc:	e8 cd ff ff ff       	call   c00124ae <File::~File()>
c00124e1:	83 c4 10             	add    esp,0x10
c00124e4:	83 ec 08             	sub    esp,0x8
c00124e7:	68 14 01 00 00       	push   0x114
c00124ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124f0:	e8 70 fc ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c00124f5:	83 c4 10             	add    esp,0x10
c00124f8:	83 c4 0c             	add    esp,0xc
c00124fb:	c3                   	ret    

c00124fc <Directory::~Directory()>:
c00124fc:	83 ec 0c             	sub    esp,0xc
c00124ff:	ba 5c 73 02 c0       	mov    edx,0xc002735c
c0012504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012508:	89 10                	mov    DWORD PTR [eax],edx
c001250a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001250e:	83 ec 0c             	sub    esp,0xc
c0012511:	50                   	push   eax
c0012512:	e8 e9 ea ff ff       	call   c0011000 <UnixFile::~UnixFile()>
c0012517:	83 c4 10             	add    esp,0x10
c001251a:	90                   	nop
c001251b:	83 c4 0c             	add    esp,0xc
c001251e:	c3                   	ret    
c001251f:	90                   	nop

c0012520 <Directory::~Directory()>:
c0012520:	83 ec 0c             	sub    esp,0xc
c0012523:	83 ec 0c             	sub    esp,0xc
c0012526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001252a:	e8 cd ff ff ff       	call   c00124fc <Directory::~Directory()>
c001252f:	83 c4 10             	add    esp,0x10
c0012532:	83 ec 08             	sub    esp,0x8
c0012535:	68 14 01 00 00       	push   0x114
c001253a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001253e:	e8 22 fc ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0012543:	83 c4 10             	add    esp,0x10
c0012546:	83 c4 0c             	add    esp,0xc
c0012549:	c3                   	ret    

c001254a <Filesystem::Filesystem()>:
c001254a:	ba dc 72 02 c0       	mov    edx,0xc00272dc
c001254f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012553:	89 10                	mov    DWORD PTR [eax],edx
c0012555:	8b 15 c8 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a5c8
c001255b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001255f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012566:	a3 c8 a5 02 c0       	mov    ds:0xc002a5c8,eax
c001256b:	90                   	nop
c001256c:	c3                   	ret    
c001256d:	90                   	nop

c001256e <Filesystem::~Filesystem()>:
c001256e:	ba dc 72 02 c0       	mov    edx,0xc00272dc
c0012573:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012577:	89 10                	mov    DWORD PTR [eax],edx
c0012579:	90                   	nop
c001257a:	c3                   	ret    
c001257b:	90                   	nop

c001257c <Filesystem::~Filesystem()>:
c001257c:	83 ec 0c             	sub    esp,0xc
c001257f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012583:	e8 e6 ff ff ff       	call   c001256e <Filesystem::~Filesystem()>
c0012588:	83 c4 04             	add    esp,0x4
c001258b:	83 ec 08             	sub    esp,0x8
c001258e:	6a 08                	push   0x8
c0012590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012594:	e8 cc fb ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0012599:	83 c4 10             	add    esp,0x10
c001259c:	83 c4 0c             	add    esp,0xc
c001259f:	c3                   	ret    

c00125a0 <initVFS()>:
c00125a0:	83 ec 18             	sub    esp,0x18
c00125a3:	6a 08                	push   0x8
c00125a5:	e8 ac fb ff ff       	call   c0012156 <operator new(unsigned long)>
c00125aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00125ad:	e8 40 c1 00 00       	call   c001e6f2 <FAT::FAT()>
c00125b2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00125b9:	e8 98 fb ff ff       	call   c0012156 <operator new(unsigned long)>
c00125be:	89 04 24             	mov    DWORD PTR [esp],eax
c00125c1:	e8 a2 d3 00 00       	call   c001f968 <ISO9660::ISO9660()>
c00125c6:	83 c4 1c             	add    esp,0x1c
c00125c9:	c3                   	ret    

c00125ca <standardiseFiles(char*, char const*, char const*)>:
c00125ca:	55                   	push   ebp
c00125cb:	57                   	push   edi
c00125cc:	56                   	push   esi
c00125cd:	53                   	push   ebx
c00125ce:	81 ec 10 04 00 00    	sub    esp,0x410
c00125d4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00125db:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00125e2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00125e9:	68 00 04 00 00       	push   0x400
c00125ee:	6a 00                	push   0x0
c00125f0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00125f4:	56                   	push   esi
c00125f5:	e8 83 e0 fe ff       	call   c000067d <memset>
c00125fa:	83 c4 10             	add    esp,0x10
c00125fd:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012601:	75 0b                	jne    c001260e <standardiseFiles(char*, char const*, char const*)+0x44>
c0012603:	50                   	push   eax
c0012604:	50                   	push   eax
c0012605:	57                   	push   edi
c0012606:	56                   	push   esi
c0012607:	e8 10 e1 fe ff       	call   c000071c <strcpy>
c001260c:	eb 41                	jmp    c001264f <standardiseFiles(char*, char const*, char const*)+0x85>
c001260e:	8a 07                	mov    al,BYTE PTR [edi]
c0012610:	3c 5c                	cmp    al,0x5c
c0012612:	74 04                	je     c0012618 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012614:	3c 2f                	cmp    al,0x2f
c0012616:	75 18                	jne    c0012630 <standardiseFiles(char*, char const*, char const*)+0x66>
c0012618:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001261b:	3c 60                	cmp    al,0x60
c001261d:	7e 03                	jle    c0012622 <standardiseFiles(char*, char const*, char const*)+0x58>
c001261f:	83 e8 20             	sub    eax,0x20
c0012622:	88 04 24             	mov    BYTE PTR [esp],al
c0012625:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001262c:	50                   	push   eax
c001262d:	50                   	push   eax
c001262e:	eb 18                	jmp    c0012648 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012630:	50                   	push   eax
c0012631:	50                   	push   eax
c0012632:	55                   	push   ebp
c0012633:	56                   	push   esi
c0012634:	e8 e3 e0 fe ff       	call   c000071c <strcpy>
c0012639:	5a                   	pop    edx
c001263a:	59                   	pop    ecx
c001263b:	68 28 86 02 c0       	push   0xc0028628
c0012640:	56                   	push   esi
c0012641:	e8 8d e1 fe ff       	call   c00007d3 <strcat>
c0012646:	5d                   	pop    ebp
c0012647:	58                   	pop    eax
c0012648:	57                   	push   edi
c0012649:	56                   	push   esi
c001264a:	e8 84 e1 fe ff       	call   c00007d3 <strcat>
c001264f:	83 c4 10             	add    esp,0x10
c0012652:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012655:	3c 60                	cmp    al,0x60
c0012657:	7e 03                	jle    c001265c <standardiseFiles(char*, char const*, char const*)+0x92>
c0012659:	83 e8 20             	sub    eax,0x20
c001265c:	88 04 24             	mov    BYTE PTR [esp],al
c001265f:	88 03                	mov    BYTE PTR [ebx],al
c0012661:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012668:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001266e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012672:	bf 03 00 00 00       	mov    edi,0x3
c0012677:	b8 03 00 00 00       	mov    eax,0x3
c001267c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001267f:	84 d2                	test   dl,dl
c0012681:	0f 84 91 00 00 00    	je     c0012718 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012687:	8d 4f 01             	lea    ecx,[edi+0x1]
c001268a:	80 fa 5c             	cmp    dl,0x5c
c001268d:	74 05                	je     c0012694 <standardiseFiles(char*, char const*, char const*)+0xca>
c001268f:	80 fa 2f             	cmp    dl,0x2f
c0012692:	75 12                	jne    c00126a6 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012694:	89 c5                	mov    ebp,eax
c0012696:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001269b:	74 09                	je     c00126a6 <standardiseFiles(char*, char const*, char const*)+0xdc>
c001269d:	40                   	inc    eax
c001269e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00126a2:	89 cf                	mov    edi,ecx
c00126a4:	eb d6                	jmp    c001267c <standardiseFiles(char*, char const*, char const*)+0xb2>
c00126a6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00126ab:	75 5b                	jne    c0012708 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126ad:	80 fa 2e             	cmp    dl,0x2e
c00126b0:	75 56                	jne    c0012708 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126b2:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00126b6:	74 19                	je     c00126d1 <standardiseFiles(char*, char const*, char const*)+0x107>
c00126b8:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126bd:	74 53                	je     c0012712 <standardiseFiles(char*, char const*, char const*)+0x148>
c00126bf:	89 f9                	mov    ecx,edi
c00126c1:	41                   	inc    ecx
c00126c2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126c5:	80 fa 2f             	cmp    dl,0x2f
c00126c8:	74 f7                	je     c00126c1 <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126ca:	80 fa 5c             	cmp    dl,0x5c
c00126cd:	74 f2                	je     c00126c1 <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126cf:	eb d1                	jmp    c00126a2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126d1:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126d6:	74 3a                	je     c0012712 <standardiseFiles(char*, char const*, char const*)+0x148>
c00126d8:	83 f8 03             	cmp    eax,0x3
c00126db:	74 c5                	je     c00126a2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126dd:	41                   	inc    ecx
c00126de:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126e1:	80 fa 2f             	cmp    dl,0x2f
c00126e4:	74 f7                	je     c00126dd <standardiseFiles(char*, char const*, char const*)+0x113>
c00126e6:	80 fa 5c             	cmp    dl,0x5c
c00126e9:	74 f2                	je     c00126dd <standardiseFiles(char*, char const*, char const*)+0x113>
c00126eb:	48                   	dec    eax
c00126ec:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00126f0:	75 06                	jne    c00126f8 <standardiseFiles(char*, char const*, char const*)+0x12e>
c00126f2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00126f6:	eb f3                	jmp    c00126eb <standardiseFiles(char*, char const*, char const*)+0x121>
c00126f8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00126fc:	74 07                	je     c0012705 <standardiseFiles(char*, char const*, char const*)+0x13b>
c00126fe:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012702:	48                   	dec    eax
c0012703:	eb f3                	jmp    c00126f8 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012705:	40                   	inc    eax
c0012706:	eb 9a                	jmp    c00126a2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012708:	80 fa 2f             	cmp    dl,0x2f
c001270b:	74 95                	je     c00126a2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001270d:	80 fa 5c             	cmp    dl,0x5c
c0012710:	74 90                	je     c00126a2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012712:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012715:	40                   	inc    eax
c0012716:	eb 8a                	jmp    c00126a2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012718:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001271c:	83 ec 0c             	sub    esp,0xc
c001271f:	53                   	push   ebx
c0012720:	e8 75 df fe ff       	call   c000069a <strlen>
c0012725:	83 c4 10             	add    esp,0x10
c0012728:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001272d:	75 26                	jne    c0012755 <standardiseFiles(char*, char const*, char const*)+0x18b>
c001272f:	83 ec 0c             	sub    esp,0xc
c0012732:	53                   	push   ebx
c0012733:	e8 62 df fe ff       	call   c000069a <strlen>
c0012738:	83 c4 10             	add    esp,0x10
c001273b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012740:	74 26                	je     c0012768 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012742:	83 ec 0c             	sub    esp,0xc
c0012745:	53                   	push   ebx
c0012746:	e8 4f df fe ff       	call   c000069a <strlen>
c001274b:	83 c4 10             	add    esp,0x10
c001274e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012753:	eb c7                	jmp    c001271c <standardiseFiles(char*, char const*, char const*)+0x152>
c0012755:	83 ec 0c             	sub    esp,0xc
c0012758:	53                   	push   ebx
c0012759:	e8 3c df fe ff       	call   c000069a <strlen>
c001275e:	83 c4 10             	add    esp,0x10
c0012761:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012766:	74 c7                	je     c001272f <standardiseFiles(char*, char const*, char const*)+0x165>
c0012768:	81 c4 0c 04 00 00    	add    esp,0x40c
c001276e:	5b                   	pop    ebx
c001276f:	5e                   	pop    esi
c0012770:	5f                   	pop    edi
c0012771:	5d                   	pop    ebp
c0012772:	c3                   	ret    
c0012773:	90                   	nop

c0012774 <File::File(char const*, Process*)>:
c0012774:	83 ec 0c             	sub    esp,0xc
c0012777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001277b:	83 ec 08             	sub    esp,0x8
c001277e:	6a 00                	push   0x0
c0012780:	50                   	push   eax
c0012781:	e8 d8 e6 ff ff       	call   c0010e5e <UnixFile::UnixFile(int)>
c0012786:	83 c4 10             	add    esp,0x10
c0012789:	ba 40 73 02 c0       	mov    edx,0xc0027340
c001278e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012792:	89 10                	mov    DWORD PTR [eax],edx
c0012794:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012798:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001279e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a2:	83 c0 0d             	add    eax,0xd
c00127a5:	83 ec 04             	sub    esp,0x4
c00127a8:	52                   	push   edx
c00127a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127ad:	50                   	push   eax
c00127ae:	e8 17 fe ff ff       	call   c00125ca <standardiseFiles(char*, char const*, char const*)>
c00127b3:	83 c4 10             	add    esp,0x10
c00127b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ba:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00127bd:	8d 50 bf             	lea    edx,[eax-0x41]
c00127c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127c4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00127ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ce:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00127d2:	90                   	nop
c00127d3:	83 c4 0c             	add    esp,0xc
c00127d6:	c3                   	ret    
c00127d7:	90                   	nop

c00127d8 <File::open(FileOpenMode)>:
c00127d8:	53                   	push   ebx
c00127d9:	b8 0b 00 00 00       	mov    eax,0xb
c00127de:	83 ec 08             	sub    esp,0x8
c00127e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127e5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00127ec:	80 fa 19             	cmp    dl,0x19
c00127ef:	77 40                	ja     c0012831 <File::open(FileOpenMode)+0x59>
c00127f1:	8b 14 95 60 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd55a0]
c00127f8:	85 d2                	test   edx,edx
c00127fa:	74 35                	je     c0012831 <File::open(FileOpenMode)+0x59>
c00127fc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012802:	85 d2                	test   edx,edx
c0012804:	74 2b                	je     c0012831 <File::open(FileOpenMode)+0x59>
c0012806:	b8 06 00 00 00       	mov    eax,0x6
c001280b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001280f:	75 20                	jne    c0012831 <File::open(FileOpenMode)+0x59>
c0012811:	8b 02                	mov    eax,DWORD PTR [edx]
c0012813:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001281d:	51                   	push   ecx
c001281e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012821:	51                   	push   ecx
c0012822:	52                   	push   edx
c0012823:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012826:	83 c4 10             	add    esp,0x10
c0012829:	85 c0                	test   eax,eax
c001282b:	75 04                	jne    c0012831 <File::open(FileOpenMode)+0x59>
c001282d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012831:	83 c4 08             	add    esp,0x8
c0012834:	5b                   	pop    ebx
c0012835:	c3                   	ret    

c0012836 <File::close()>:
c0012836:	53                   	push   ebx
c0012837:	b8 0b 00 00 00       	mov    eax,0xb
c001283c:	83 ec 08             	sub    esp,0x8
c001283f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012843:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001284a:	80 fa 19             	cmp    dl,0x19
c001284d:	77 41                	ja     c0012890 <File::close()+0x5a>
c001284f:	8b 1c 95 60 aa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd55a0]
c0012856:	85 db                	test   ebx,ebx
c0012858:	74 36                	je     c0012890 <File::close()+0x5a>
c001285a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012861:	74 2d                	je     c0012890 <File::close()+0x5a>
c0012863:	b8 05 00 00 00       	mov    eax,0x5
c0012868:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001286c:	74 22                	je     c0012890 <File::close()+0x5a>
c001286e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012872:	8b 04 95 60 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd55a0]
c0012879:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001287f:	53                   	push   ebx
c0012880:	53                   	push   ebx
c0012881:	8b 10                	mov    edx,DWORD PTR [eax]
c0012883:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012889:	50                   	push   eax
c001288a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001288d:	83 c4 10             	add    esp,0x10
c0012890:	83 c4 08             	add    esp,0x8
c0012893:	5b                   	pop    ebx
c0012894:	c3                   	ret    
c0012895:	90                   	nop

c0012896 <File::seek(unsigned long long)>:
c0012896:	56                   	push   esi
c0012897:	53                   	push   ebx
c0012898:	b8 0b 00 00 00       	mov    eax,0xb
c001289d:	51                   	push   ecx
c001289e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128a2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128a6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00128ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128b1:	80 fa 19             	cmp    dl,0x19
c00128b4:	77 31                	ja     c00128e7 <File::seek(unsigned long long)+0x51>
c00128b6:	8b 14 95 60 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd55a0]
c00128bd:	85 d2                	test   edx,edx
c00128bf:	74 26                	je     c00128e7 <File::seek(unsigned long long)+0x51>
c00128c1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00128c7:	85 d2                	test   edx,edx
c00128c9:	74 1c                	je     c00128e7 <File::seek(unsigned long long)+0x51>
c00128cb:	b8 05 00 00 00       	mov    eax,0x5
c00128d0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00128d4:	74 11                	je     c00128e7 <File::seek(unsigned long long)+0x51>
c00128d6:	8b 02                	mov    eax,DWORD PTR [edx]
c00128d8:	53                   	push   ebx
c00128d9:	51                   	push   ecx
c00128da:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00128e0:	52                   	push   edx
c00128e1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00128e4:	83 c4 10             	add    esp,0x10
c00128e7:	5a                   	pop    edx
c00128e8:	5b                   	pop    ebx
c00128e9:	5e                   	pop    esi
c00128ea:	c3                   	ret    
c00128eb:	90                   	nop

c00128ec <File::tell(unsigned long long*)>:
c00128ec:	83 ec 0c             	sub    esp,0xc
c00128ef:	b8 0b 00 00 00       	mov    eax,0xb
c00128f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00128f8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00128ff:	80 fa 19             	cmp    dl,0x19
c0012902:	77 34                	ja     c0012938 <File::tell(unsigned long long*)+0x4c>
c0012904:	8b 14 95 60 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd55a0]
c001290b:	85 d2                	test   edx,edx
c001290d:	74 29                	je     c0012938 <File::tell(unsigned long long*)+0x4c>
c001290f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012915:	85 d2                	test   edx,edx
c0012917:	74 1f                	je     c0012938 <File::tell(unsigned long long*)+0x4c>
c0012919:	b8 05 00 00 00       	mov    eax,0x5
c001291e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012922:	74 14                	je     c0012938 <File::tell(unsigned long long*)+0x4c>
c0012924:	50                   	push   eax
c0012925:	8b 02                	mov    eax,DWORD PTR [edx]
c0012927:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001292b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012931:	52                   	push   edx
c0012932:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012935:	83 c4 10             	add    esp,0x10
c0012938:	83 c4 0c             	add    esp,0xc
c001293b:	c3                   	ret    

c001293c <File::rewind()>:
c001293c:	83 ec 10             	sub    esp,0x10
c001293f:	6a 00                	push   0x0
c0012941:	6a 00                	push   0x0
c0012943:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012947:	e8 4a ff ff ff       	call   c0012896 <File::seek(unsigned long long)>
c001294c:	83 c4 1c             	add    esp,0x1c
c001294f:	c3                   	ret    

c0012950 <File::unlink()>:
c0012950:	83 ec 0c             	sub    esp,0xc
c0012953:	b8 0b 00 00 00       	mov    eax,0xb
c0012958:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001295c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012963:	80 f9 19             	cmp    cl,0x19
c0012966:	77 2f                	ja     c0012997 <File::unlink()+0x47>
c0012968:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c001296f:	85 c9                	test   ecx,ecx
c0012971:	74 24                	je     c0012997 <File::unlink()+0x47>
c0012973:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012979:	85 c9                	test   ecx,ecx
c001297b:	74 1a                	je     c0012997 <File::unlink()+0x47>
c001297d:	b8 06 00 00 00       	mov    eax,0x6
c0012982:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012986:	75 0f                	jne    c0012997 <File::unlink()+0x47>
c0012988:	83 c2 0d             	add    edx,0xd
c001298b:	50                   	push   eax
c001298c:	50                   	push   eax
c001298d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001298f:	52                   	push   edx
c0012990:	51                   	push   ecx
c0012991:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012994:	83 c4 10             	add    esp,0x10
c0012997:	83 c4 0c             	add    esp,0xc
c001299a:	c3                   	ret    
c001299b:	90                   	nop

c001299c <File::rename(char const*)>:
c001299c:	83 ec 0c             	sub    esp,0xc
c001299f:	b8 0b 00 00 00       	mov    eax,0xb
c00129a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00129a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00129af:	80 f9 19             	cmp    cl,0x19
c00129b2:	77 32                	ja     c00129e6 <File::rename(char const*)+0x4a>
c00129b4:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c00129bb:	85 c9                	test   ecx,ecx
c00129bd:	74 27                	je     c00129e6 <File::rename(char const*)+0x4a>
c00129bf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00129c5:	85 c9                	test   ecx,ecx
c00129c7:	74 1d                	je     c00129e6 <File::rename(char const*)+0x4a>
c00129c9:	b8 06 00 00 00       	mov    eax,0x6
c00129ce:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129d2:	75 12                	jne    c00129e6 <File::rename(char const*)+0x4a>
c00129d4:	83 c2 0d             	add    edx,0xd
c00129d7:	50                   	push   eax
c00129d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129de:	52                   	push   edx
c00129df:	51                   	push   ecx
c00129e0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00129e3:	83 c4 10             	add    esp,0x10
c00129e6:	83 c4 0c             	add    esp,0xc
c00129e9:	c3                   	ret    

c00129ea <File::chfatattr(unsigned char, unsigned char)>:
c00129ea:	57                   	push   edi
c00129eb:	b8 0b 00 00 00       	mov    eax,0xb
c00129f0:	56                   	push   esi
c00129f1:	53                   	push   ebx
c00129f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00129f6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a01:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012a05:	80 f9 19             	cmp    cl,0x19
c0012a08:	77 37                	ja     c0012a41 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a0a:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c0012a11:	85 c9                	test   ecx,ecx
c0012a13:	74 2c                	je     c0012a41 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a15:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a1b:	85 c9                	test   ecx,ecx
c0012a1d:	74 22                	je     c0012a41 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a1f:	b8 06 00 00 00       	mov    eax,0x6
c0012a24:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a28:	75 17                	jne    c0012a41 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a2a:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012a2c:	89 f0                	mov    eax,esi
c0012a2e:	83 c2 0d             	add    edx,0xd
c0012a31:	0f b6 f0             	movzx  esi,al
c0012a34:	0f b6 db             	movzx  ebx,bl
c0012a37:	56                   	push   esi
c0012a38:	53                   	push   ebx
c0012a39:	52                   	push   edx
c0012a3a:	51                   	push   ecx
c0012a3b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012a3e:	83 c4 10             	add    esp,0x10
c0012a41:	5b                   	pop    ebx
c0012a42:	5e                   	pop    esi
c0012a43:	5f                   	pop    edi
c0012a44:	c3                   	ret    
c0012a45:	90                   	nop

c0012a46 <File::exists()>:
c0012a46:	83 ec 0c             	sub    esp,0xc
c0012a49:	31 c0                	xor    eax,eax
c0012a4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a4f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a56:	80 f9 19             	cmp    cl,0x19
c0012a59:	77 24                	ja     c0012a7f <File::exists()+0x39>
c0012a5b:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c0012a62:	85 c9                	test   ecx,ecx
c0012a64:	74 19                	je     c0012a7f <File::exists()+0x39>
c0012a66:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a6c:	85 c9                	test   ecx,ecx
c0012a6e:	74 0f                	je     c0012a7f <File::exists()+0x39>
c0012a70:	83 c2 0d             	add    edx,0xd
c0012a73:	50                   	push   eax
c0012a74:	50                   	push   eax
c0012a75:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a77:	52                   	push   edx
c0012a78:	51                   	push   ecx
c0012a79:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012a7c:	83 c4 10             	add    esp,0x10
c0012a7f:	83 c4 0c             	add    esp,0xc
c0012a82:	c3                   	ret    
c0012a83:	90                   	nop

c0012a84 <File::stat(unsigned long long*, bool*)>:
c0012a84:	56                   	push   esi
c0012a85:	53                   	push   ebx
c0012a86:	50                   	push   eax
c0012a87:	b8 0b 00 00 00       	mov    eax,0xb
c0012a8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a90:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012a94:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012a9f:	80 f9 19             	cmp    cl,0x19
c0012aa2:	77 3d                	ja     c0012ae1 <File::stat(unsigned long long*, bool*)+0x5d>
c0012aa4:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c0012aab:	85 c9                	test   ecx,ecx
c0012aad:	74 32                	je     c0012ae1 <File::stat(unsigned long long*, bool*)+0x5d>
c0012aaf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ab5:	85 c9                	test   ecx,ecx
c0012ab7:	74 28                	je     c0012ae1 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ab9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012abb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012abf:	74 13                	je     c0012ad4 <File::stat(unsigned long long*, bool*)+0x50>
c0012ac1:	83 ec 04             	sub    esp,0x4
c0012ac4:	56                   	push   esi
c0012ac5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012acb:	51                   	push   ecx
c0012acc:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012acf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012ad2:	eb 0a                	jmp    c0012ade <File::stat(unsigned long long*, bool*)+0x5a>
c0012ad4:	53                   	push   ebx
c0012ad5:	83 c2 0d             	add    edx,0xd
c0012ad8:	56                   	push   esi
c0012ad9:	52                   	push   edx
c0012ada:	51                   	push   ecx
c0012adb:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012ade:	83 c4 10             	add    esp,0x10
c0012ae1:	5a                   	pop    edx
c0012ae2:	5b                   	pop    ebx
c0012ae3:	5e                   	pop    esi
c0012ae4:	c3                   	ret    

c0012ae5 <getcwd(Process*, char*, int)>:
c0012ae5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ae9:	31 c0                	xor    eax,eax
c0012aeb:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012aee:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012af2:	7d 15                	jge    c0012b09 <getcwd(Process*, char*, int)+0x24>
c0012af4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012af8:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012aff:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012b02:	84 c9                	test   cl,cl
c0012b04:	74 06                	je     c0012b0c <getcwd(Process*, char*, int)+0x27>
c0012b06:	40                   	inc    eax
c0012b07:	eb e2                	jmp    c0012aeb <getcwd(Process*, char*, int)+0x6>
c0012b09:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b0c:	31 c0                	xor    eax,eax
c0012b0e:	c3                   	ret    

c0012b0f <setcwd(Process*, char*)>:
c0012b0f:	55                   	push   ebp
c0012b10:	57                   	push   edi
c0012b11:	56                   	push   esi
c0012b12:	53                   	push   ebx
c0012b13:	81 ec 20 02 00 00    	sub    esp,0x220
c0012b19:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012b20:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012b26:	57                   	push   edi
c0012b27:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012b2e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012b32:	56                   	push   esi
c0012b33:	e8 92 fa ff ff       	call   c00125ca <standardiseFiles(char*, char const*, char const*)>
c0012b38:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b3b:	e8 5a db fe ff       	call   c000069a <strlen>
c0012b40:	83 c4 10             	add    esp,0x10
c0012b43:	83 f8 02             	cmp    eax,0x2
c0012b46:	77 17                	ja     c0012b5f <setcwd(Process*, char*)+0x50>
c0012b48:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012b4d:	83 e8 41             	sub    eax,0x41
c0012b50:	83 f8 19             	cmp    eax,0x19
c0012b53:	76 24                	jbe    c0012b79 <setcwd(Process*, char*)+0x6a>
c0012b55:	b8 03 00 00 00       	mov    eax,0x3
c0012b5a:	e9 cb 00 00 00       	jmp    c0012c2a <setcwd(Process*, char*)+0x11b>
c0012b5f:	83 ec 0c             	sub    esp,0xc
c0012b62:	56                   	push   esi
c0012b63:	e8 32 db fe ff       	call   c000069a <strlen>
c0012b68:	83 c4 10             	add    esp,0x10
c0012b6b:	83 f8 03             	cmp    eax,0x3
c0012b6e:	75 33                	jne    c0012ba3 <setcwd(Process*, char*)+0x94>
c0012b70:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012b75:	75 2c                	jne    c0012ba3 <setcwd(Process*, char*)+0x94>
c0012b77:	eb cf                	jmp    c0012b48 <setcwd(Process*, char*)+0x39>
c0012b79:	8b 14 85 60 aa 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd55a0]
c0012b80:	b8 05 00 00 00       	mov    eax,0x5
c0012b85:	85 d2                	test   edx,edx
c0012b87:	0f 84 9d 00 00 00    	je     c0012c2a <setcwd(Process*, char*)+0x11b>
c0012b8d:	b8 06 00 00 00       	mov    eax,0x6
c0012b92:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012b99:	0f 84 8b 00 00 00    	je     c0012c2a <setcwd(Process*, char*)+0x11b>
c0012b9f:	51                   	push   ecx
c0012ba0:	51                   	push   ecx
c0012ba1:	eb 7b                	jmp    c0012c1e <setcwd(Process*, char*)+0x10f>
c0012ba3:	83 ec 0c             	sub    esp,0xc
c0012ba6:	68 14 01 00 00       	push   0x114
c0012bab:	e8 a6 f5 ff ff       	call   c0012156 <operator new(unsigned long)>
c0012bb0:	83 c4 0c             	add    esp,0xc
c0012bb3:	89 c3                	mov    ebx,eax
c0012bb5:	55                   	push   ebp
c0012bb6:	56                   	push   esi
c0012bb7:	50                   	push   eax
c0012bb8:	e8 b7 fb ff ff       	call   c0012774 <File::File(char const*, Process*)>
c0012bbd:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012bc2:	83 c4 0c             	add    esp,0xc
c0012bc5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012bc9:	50                   	push   eax
c0012bca:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012bce:	50                   	push   eax
c0012bcf:	53                   	push   ebx
c0012bd0:	e8 af fe ff ff       	call   c0012a84 <File::stat(unsigned long long*, bool*)>
c0012bd5:	83 c4 10             	add    esp,0x10
c0012bd8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012bda:	83 f8 02             	cmp    eax,0x2
c0012bdd:	75 09                	jne    c0012be8 <setcwd(Process*, char*)+0xd9>
c0012bdf:	83 ec 0c             	sub    esp,0xc
c0012be2:	53                   	push   ebx
c0012be3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012be6:	eb 0d                	jmp    c0012bf5 <setcwd(Process*, char*)+0xe6>
c0012be8:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012beb:	85 c0                	test   eax,eax
c0012bed:	74 10                	je     c0012bff <setcwd(Process*, char*)+0xf0>
c0012bef:	83 ec 0c             	sub    esp,0xc
c0012bf2:	53                   	push   ebx
c0012bf3:	ff d2                	call   edx
c0012bf5:	83 c4 10             	add    esp,0x10
c0012bf8:	b8 01 00 00 00       	mov    eax,0x1
c0012bfd:	eb 2b                	jmp    c0012c2a <setcwd(Process*, char*)+0x11b>
c0012bff:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012c04:	75 10                	jne    c0012c16 <setcwd(Process*, char*)+0x107>
c0012c06:	83 ec 0c             	sub    esp,0xc
c0012c09:	53                   	push   ebx
c0012c0a:	ff d2                	call   edx
c0012c0c:	83 c4 10             	add    esp,0x10
c0012c0f:	b8 02 00 00 00       	mov    eax,0x2
c0012c14:	eb 14                	jmp    c0012c2a <setcwd(Process*, char*)+0x11b>
c0012c16:	83 ec 0c             	sub    esp,0xc
c0012c19:	53                   	push   ebx
c0012c1a:	ff d2                	call   edx
c0012c1c:	58                   	pop    eax
c0012c1d:	5a                   	pop    edx
c0012c1e:	56                   	push   esi
c0012c1f:	57                   	push   edi
c0012c20:	e8 f7 da fe ff       	call   c000071c <strcpy>
c0012c25:	83 c4 10             	add    esp,0x10
c0012c28:	31 c0                	xor    eax,eax
c0012c2a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012c30:	5b                   	pop    ebx
c0012c31:	5e                   	pop    esi
c0012c32:	5f                   	pop    edi
c0012c33:	5d                   	pop    ebp
c0012c34:	c3                   	ret    
c0012c35:	90                   	nop

c0012c36 <Directory::Directory(char const*, Process*)>:
c0012c36:	83 ec 0c             	sub    esp,0xc
c0012c39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c3d:	83 ec 08             	sub    esp,0x8
c0012c40:	6a 00                	push   0x0
c0012c42:	50                   	push   eax
c0012c43:	e8 16 e2 ff ff       	call   c0010e5e <UnixFile::UnixFile(int)>
c0012c48:	83 c4 10             	add    esp,0x10
c0012c4b:	ba 5c 73 02 c0       	mov    edx,0xc002735c
c0012c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c54:	89 10                	mov    DWORD PTR [eax],edx
c0012c56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c5a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c64:	83 c0 0d             	add    eax,0xd
c0012c67:	83 ec 04             	sub    esp,0x4
c0012c6a:	52                   	push   edx
c0012c6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c6f:	50                   	push   eax
c0012c70:	e8 55 f9 ff ff       	call   c00125ca <standardiseFiles(char*, char const*, char const*)>
c0012c75:	83 c4 10             	add    esp,0x10
c0012c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c7c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c7f:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c86:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c90:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c94:	90                   	nop
c0012c95:	83 c4 0c             	add    esp,0xc
c0012c98:	c3                   	ret    
c0012c99:	90                   	nop

c0012c9a <Directory::open()>:
c0012c9a:	53                   	push   ebx
c0012c9b:	b8 0b 00 00 00       	mov    eax,0xb
c0012ca0:	83 ec 08             	sub    esp,0x8
c0012ca3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ca7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012cae:	80 fa 19             	cmp    dl,0x19
c0012cb1:	77 3d                	ja     c0012cf0 <Directory::open()+0x56>
c0012cb3:	8b 14 95 60 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd55a0]
c0012cba:	85 d2                	test   edx,edx
c0012cbc:	74 32                	je     c0012cf0 <Directory::open()+0x56>
c0012cbe:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cc4:	85 d2                	test   edx,edx
c0012cc6:	74 28                	je     c0012cf0 <Directory::open()+0x56>
c0012cc8:	b8 06 00 00 00       	mov    eax,0x6
c0012ccd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012cd1:	75 1d                	jne    c0012cf0 <Directory::open()+0x56>
c0012cd3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012cd9:	50                   	push   eax
c0012cda:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cdc:	51                   	push   ecx
c0012cdd:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012ce0:	51                   	push   ecx
c0012ce1:	52                   	push   edx
c0012ce2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012ce5:	83 c4 10             	add    esp,0x10
c0012ce8:	85 c0                	test   eax,eax
c0012cea:	75 04                	jne    c0012cf0 <Directory::open()+0x56>
c0012cec:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012cf0:	83 c4 08             	add    esp,0x8
c0012cf3:	5b                   	pop    ebx
c0012cf4:	c3                   	ret    
c0012cf5:	90                   	nop

c0012cf6 <Directory::close()>:
c0012cf6:	53                   	push   ebx
c0012cf7:	b8 0b 00 00 00       	mov    eax,0xb
c0012cfc:	83 ec 08             	sub    esp,0x8
c0012cff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d03:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d0a:	80 fa 19             	cmp    dl,0x19
c0012d0d:	77 41                	ja     c0012d50 <Directory::close()+0x5a>
c0012d0f:	8b 1c 95 60 aa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd55a0]
c0012d16:	85 db                	test   ebx,ebx
c0012d18:	74 36                	je     c0012d50 <Directory::close()+0x5a>
c0012d1a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d21:	74 2d                	je     c0012d50 <Directory::close()+0x5a>
c0012d23:	b8 05 00 00 00       	mov    eax,0x5
c0012d28:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d2c:	74 22                	je     c0012d50 <Directory::close()+0x5a>
c0012d2e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d32:	8b 04 95 60 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd55a0]
c0012d39:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d3f:	53                   	push   ebx
c0012d40:	53                   	push   ebx
c0012d41:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d43:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d49:	50                   	push   eax
c0012d4a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012d4d:	83 c4 10             	add    esp,0x10
c0012d50:	83 c4 08             	add    esp,0x8
c0012d53:	5b                   	pop    ebx
c0012d54:	c3                   	ret    
c0012d55:	90                   	nop

c0012d56 <Directory::unlink()>:
c0012d56:	83 ec 0c             	sub    esp,0xc
c0012d59:	b8 0b 00 00 00       	mov    eax,0xb
c0012d5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d62:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d69:	80 f9 19             	cmp    cl,0x19
c0012d6c:	77 2f                	ja     c0012d9d <Directory::unlink()+0x47>
c0012d6e:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c0012d75:	85 c9                	test   ecx,ecx
c0012d77:	74 24                	je     c0012d9d <Directory::unlink()+0x47>
c0012d79:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d7f:	85 c9                	test   ecx,ecx
c0012d81:	74 1a                	je     c0012d9d <Directory::unlink()+0x47>
c0012d83:	b8 06 00 00 00       	mov    eax,0x6
c0012d88:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d8c:	75 0f                	jne    c0012d9d <Directory::unlink()+0x47>
c0012d8e:	83 c2 0d             	add    edx,0xd
c0012d91:	50                   	push   eax
c0012d92:	50                   	push   eax
c0012d93:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d95:	52                   	push   edx
c0012d96:	51                   	push   ecx
c0012d97:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012d9a:	83 c4 10             	add    esp,0x10
c0012d9d:	83 c4 0c             	add    esp,0xc
c0012da0:	c3                   	ret    
c0012da1:	90                   	nop

c0012da2 <Directory::rename(char const*)>:
c0012da2:	83 ec 0c             	sub    esp,0xc
c0012da5:	b8 0b 00 00 00       	mov    eax,0xb
c0012daa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012db5:	80 f9 19             	cmp    cl,0x19
c0012db8:	77 32                	ja     c0012dec <Directory::rename(char const*)+0x4a>
c0012dba:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c0012dc1:	85 c9                	test   ecx,ecx
c0012dc3:	74 27                	je     c0012dec <Directory::rename(char const*)+0x4a>
c0012dc5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dcb:	85 c9                	test   ecx,ecx
c0012dcd:	74 1d                	je     c0012dec <Directory::rename(char const*)+0x4a>
c0012dcf:	b8 06 00 00 00       	mov    eax,0x6
c0012dd4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dd8:	75 12                	jne    c0012dec <Directory::rename(char const*)+0x4a>
c0012dda:	83 c2 0d             	add    edx,0xd
c0012ddd:	50                   	push   eax
c0012dde:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012de0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012de4:	52                   	push   edx
c0012de5:	51                   	push   ecx
c0012de6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012de9:	83 c4 10             	add    esp,0x10
c0012dec:	83 c4 0c             	add    esp,0xc
c0012def:	c3                   	ret    

c0012df0 <Directory::exists()>:
c0012df0:	83 ec 0c             	sub    esp,0xc
c0012df3:	31 c0                	xor    eax,eax
c0012df5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012df9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e00:	80 f9 19             	cmp    cl,0x19
c0012e03:	77 24                	ja     c0012e29 <Directory::exists()+0x39>
c0012e05:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c0012e0c:	85 c9                	test   ecx,ecx
c0012e0e:	74 19                	je     c0012e29 <Directory::exists()+0x39>
c0012e10:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e16:	85 c9                	test   ecx,ecx
c0012e18:	74 0f                	je     c0012e29 <Directory::exists()+0x39>
c0012e1a:	83 c2 0d             	add    edx,0xd
c0012e1d:	50                   	push   eax
c0012e1e:	50                   	push   eax
c0012e1f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e21:	52                   	push   edx
c0012e22:	51                   	push   ecx
c0012e23:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e26:	83 c4 10             	add    esp,0x10
c0012e29:	83 c4 0c             	add    esp,0xc
c0012e2c:	c3                   	ret    
c0012e2d:	90                   	nop

c0012e2e <Directory::read(dirent*)>:
c0012e2e:	83 ec 1c             	sub    esp,0x1c
c0012e31:	b8 0b 00 00 00       	mov    eax,0xb
c0012e36:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012e3a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e41:	80 fa 19             	cmp    dl,0x19
c0012e44:	77 30                	ja     c0012e76 <Directory::read(dirent*)+0x48>
c0012e46:	8b 14 95 60 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd55a0]
c0012e4d:	85 d2                	test   edx,edx
c0012e4f:	74 25                	je     c0012e76 <Directory::read(dirent*)+0x48>
c0012e51:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012e58:	74 1c                	je     c0012e76 <Directory::read(dirent*)+0x48>
c0012e5a:	83 ec 0c             	sub    esp,0xc
c0012e5d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e5f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012e63:	52                   	push   edx
c0012e64:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012e68:	6a 00                	push   0x0
c0012e6a:	68 10 01 00 00       	push   0x110
c0012e6f:	51                   	push   ecx
c0012e70:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012e73:	83 c4 20             	add    esp,0x20
c0012e76:	83 c4 1c             	add    esp,0x1c
c0012e79:	c3                   	ret    

c0012e7a <Directory::create()>:
c0012e7a:	83 ec 0c             	sub    esp,0xc
c0012e7d:	b8 0b 00 00 00       	mov    eax,0xb
c0012e82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e86:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e8d:	80 f9 19             	cmp    cl,0x19
c0012e90:	77 2f                	ja     c0012ec1 <Directory::create()+0x47>
c0012e92:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c0012e99:	85 c9                	test   ecx,ecx
c0012e9b:	74 24                	je     c0012ec1 <Directory::create()+0x47>
c0012e9d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ea3:	85 c9                	test   ecx,ecx
c0012ea5:	74 1a                	je     c0012ec1 <Directory::create()+0x47>
c0012ea7:	b8 06 00 00 00       	mov    eax,0x6
c0012eac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012eb0:	75 0f                	jne    c0012ec1 <Directory::create()+0x47>
c0012eb2:	83 c2 0d             	add    edx,0xd
c0012eb5:	50                   	push   eax
c0012eb6:	50                   	push   eax
c0012eb7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012eb9:	52                   	push   edx
c0012eba:	51                   	push   ecx
c0012ebb:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012ebe:	83 c4 10             	add    esp,0x10
c0012ec1:	83 c4 0c             	add    esp,0xc
c0012ec4:	c3                   	ret    
c0012ec5:	90                   	nop

c0012ec6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0012ecb:	c3                   	ret    

c0012ecc <Bus::Bus(char const*)>:
c0012ecc:	83 ec 0c             	sub    esp,0xc
c0012ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ed3:	83 ec 08             	sub    esp,0x8
c0012ed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eda:	50                   	push   eax
c0012edb:	e8 30 09 00 00       	call   c0013810 <Device::Device(char const*)>
c0012ee0:	83 c4 10             	add    esp,0x10
c0012ee3:	ba 78 73 02 c0       	mov    edx,0xc0027378
c0012ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eec:	89 10                	mov    DWORD PTR [eax],edx
c0012eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012efc:	90                   	nop
c0012efd:	83 c4 0c             	add    esp,0xc
c0012f00:	c3                   	ret    
c0012f01:	90                   	nop

c0012f02 <Bus::~Bus()>:
c0012f02:	83 ec 0c             	sub    esp,0xc
c0012f05:	ba 78 73 02 c0       	mov    edx,0xc0027378
c0012f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f0e:	89 10                	mov    DWORD PTR [eax],edx
c0012f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f14:	83 ec 0c             	sub    esp,0xc
c0012f17:	50                   	push   eax
c0012f18:	e8 d5 05 00 00       	call   c00134f2 <Device::~Device()>
c0012f1d:	83 c4 10             	add    esp,0x10
c0012f20:	90                   	nop
c0012f21:	83 c4 0c             	add    esp,0xc
c0012f24:	c3                   	ret    
c0012f25:	90                   	nop

c0012f26 <Bus::~Bus()>:
c0012f26:	83 ec 0c             	sub    esp,0xc
c0012f29:	83 ec 0c             	sub    esp,0xc
c0012f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f30:	e8 cd ff ff ff       	call   c0012f02 <Bus::~Bus()>
c0012f35:	83 c4 10             	add    esp,0x10
c0012f38:	83 ec 08             	sub    esp,0x8
c0012f3b:	68 58 01 00 00       	push   0x158
c0012f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f44:	e8 1c f2 ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0012f49:	83 c4 10             	add    esp,0x10
c0012f4c:	83 c4 0c             	add    esp,0xc
c0012f4f:	c3                   	ret    

c0012f50 <Buzzer::Buzzer(char const*)>:
c0012f50:	83 ec 0c             	sub    esp,0xc
c0012f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f57:	83 ec 08             	sub    esp,0x8
c0012f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f5e:	50                   	push   eax
c0012f5f:	e8 ac 08 00 00       	call   c0013810 <Device::Device(char const*)>
c0012f64:	83 c4 10             	add    esp,0x10
c0012f67:	ba a4 73 02 c0       	mov    edx,0xc00273a4
c0012f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f70:	89 10                	mov    DWORD PTR [eax],edx
c0012f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f76:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f84:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012f8e:	90                   	nop
c0012f8f:	83 c4 0c             	add    esp,0xc
c0012f92:	c3                   	ret    
c0012f93:	90                   	nop

c0012f94 <Buzzer::~Buzzer()>:
c0012f94:	83 ec 0c             	sub    esp,0xc
c0012f97:	ba a4 73 02 c0       	mov    edx,0xc00273a4
c0012f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fa0:	89 10                	mov    DWORD PTR [eax],edx
c0012fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fa6:	83 ec 0c             	sub    esp,0xc
c0012fa9:	50                   	push   eax
c0012faa:	e8 43 05 00 00       	call   c00134f2 <Device::~Device()>
c0012faf:	83 c4 10             	add    esp,0x10
c0012fb2:	90                   	nop
c0012fb3:	83 c4 0c             	add    esp,0xc
c0012fb6:	c3                   	ret    
c0012fb7:	90                   	nop

c0012fb8 <Buzzer::~Buzzer()>:
c0012fb8:	83 ec 0c             	sub    esp,0xc
c0012fbb:	83 ec 0c             	sub    esp,0xc
c0012fbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fc2:	e8 cd ff ff ff       	call   c0012f94 <Buzzer::~Buzzer()>
c0012fc7:	83 c4 10             	add    esp,0x10
c0012fca:	83 ec 08             	sub    esp,0x8
c0012fcd:	68 5c 01 00 00       	push   0x15c
c0012fd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fd6:	e8 8a f1 ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0012fdb:	83 c4 10             	add    esp,0x10
c0012fde:	83 c4 0c             	add    esp,0xc
c0012fe1:	c3                   	ret    

c0012fe2 <Buzzer::stop()>:
c0012fe2:	83 ec 14             	sub    esp,0x14
c0012fe5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012fe9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012feb:	6a 00                	push   0x0
c0012fed:	50                   	push   eax
c0012fee:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012ff1:	83 c4 1c             	add    esp,0x1c
c0012ff4:	c3                   	ret    

c0012ff5 <beepThread(void*)>:
c0012ff5:	53                   	push   ebx
c0012ff6:	83 ec 08             	sub    esp,0x8
c0012ff9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ffd:	e8 0c 89 00 00       	call   c001b90e <unlockScheduler()>
c0013002:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013007:	52                   	push   edx
c0013008:	52                   	push   edx
c0013009:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001300f:	52                   	push   edx
c0013010:	50                   	push   eax
c0013011:	e8 46 8e 00 00       	call   c001be5c <nanoSleep(unsigned long long)>
c0013016:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013019:	e8 c4 ff ff ff       	call   c0012fe2 <Buzzer::stop()>
c001301e:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013026:	83 c4 18             	add    esp,0x18
c0013029:	5b                   	pop    ebx
c001302a:	e9 73 8d 00 00       	jmp    c001bda2 <blockTask(TaskState)>
c001302f:	90                   	nop

c0013030 <Buzzer::beep(int, int, bool)>:
c0013030:	57                   	push   edi
c0013031:	56                   	push   esi
c0013032:	53                   	push   ebx
c0013033:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013037:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001303b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001303f:	52                   	push   edx
c0013040:	52                   	push   edx
c0013041:	8b 06                	mov    eax,DWORD PTR [esi]
c0013043:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013047:	56                   	push   esi
c0013048:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001304b:	83 c4 10             	add    esp,0x10
c001304e:	89 f8                	mov    eax,edi
c0013050:	84 c0                	test   al,al
c0013052:	74 1f                	je     c0013073 <Buzzer::beep(int, int, bool)+0x43>
c0013054:	50                   	push   eax
c0013055:	50                   	push   eax
c0013056:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001305c:	99                   	cdq    
c001305d:	52                   	push   edx
c001305e:	50                   	push   eax
c001305f:	e8 f8 8d 00 00       	call   c001be5c <nanoSleep(unsigned long long)>
c0013064:	83 c4 10             	add    esp,0x10
c0013067:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001306b:	5b                   	pop    ebx
c001306c:	5e                   	pop    esi
c001306d:	5f                   	pop    edi
c001306e:	e9 6f ff ff ff       	jmp    c0012fe2 <Buzzer::stop()>
c0013073:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013079:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001307e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013086:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001308a:	c7 44 24 14 f5 2f 01 c0 	mov    DWORD PTR [esp+0x14],0xc0012ff5
c0013092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013096:	5b                   	pop    ebx
c0013097:	5e                   	pop    esi
c0013098:	5f                   	pop    edi
c0013099:	e9 a0 89 00 00       	jmp    c001ba3e <Process::createThread(void (*)(void*), void*, int)>

c001309e <loadClockSettings()>:
c001309e:	c7 05 d4 a5 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002a5d4,0xa
c00130a8:	c6 05 d1 a5 02 c0 00 	mov    BYTE PTR ds:0xc002a5d1,0x0
c00130af:	c6 05 d0 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a5d0,0x1
c00130b6:	c3                   	ret    
c00130b7:	90                   	nop

c00130b8 <Clock::Clock(char const*)>:
c00130b8:	83 ec 0c             	sub    esp,0xc
c00130bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130bf:	83 ec 08             	sub    esp,0x8
c00130c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130c6:	50                   	push   eax
c00130c7:	e8 44 07 00 00       	call   c0013810 <Device::Device(char const*)>
c00130cc:	83 c4 10             	add    esp,0x10
c00130cf:	ba d4 73 02 c0       	mov    edx,0xc00273d4
c00130d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d8:	89 10                	mov    DWORD PTR [eax],edx
c00130da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130de:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00130e8:	90                   	nop
c00130e9:	83 c4 0c             	add    esp,0xc
c00130ec:	c3                   	ret    
c00130ed:	90                   	nop

c00130ee <Clock::~Clock()>:
c00130ee:	83 ec 0c             	sub    esp,0xc
c00130f1:	ba d4 73 02 c0       	mov    edx,0xc00273d4
c00130f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130fa:	89 10                	mov    DWORD PTR [eax],edx
c00130fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013100:	83 ec 0c             	sub    esp,0xc
c0013103:	50                   	push   eax
c0013104:	e8 e9 03 00 00       	call   c00134f2 <Device::~Device()>
c0013109:	83 c4 10             	add    esp,0x10
c001310c:	90                   	nop
c001310d:	83 c4 0c             	add    esp,0xc
c0013110:	c3                   	ret    
c0013111:	90                   	nop

c0013112 <Clock::~Clock()>:
c0013112:	83 ec 0c             	sub    esp,0xc
c0013115:	83 ec 0c             	sub    esp,0xc
c0013118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001311c:	e8 cd ff ff ff       	call   c00130ee <Clock::~Clock()>
c0013121:	83 c4 10             	add    esp,0x10
c0013124:	83 ec 08             	sub    esp,0x8
c0013127:	68 58 01 00 00       	push   0x158
c001312c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013130:	e8 30 f0 ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0013135:	83 c4 10             	add    esp,0x10
c0013138:	83 c4 0c             	add    esp,0xc
c001313b:	c3                   	ret    

c001313c <Clock::timeInSecondsLocal()>:
c001313c:	53                   	push   ebx
c001313d:	83 ec 14             	sub    esp,0x14
c0013140:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013144:	8b 10                	mov    edx,DWORD PTR [eax]
c0013146:	50                   	push   eax
c0013147:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001314a:	0f b6 0d d0 a5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a5d0
c0013151:	03 0d d4 a5 02 c0    	add    ecx,DWORD PTR ds:0xc002a5d4
c0013157:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001315d:	89 cb                	mov    ebx,ecx
c001315f:	c1 fb 1f             	sar    ebx,0x1f
c0013162:	01 c8                	add    eax,ecx
c0013164:	11 da                	adc    edx,ebx
c0013166:	83 c4 10             	add    esp,0x10
c0013169:	31 c9                	xor    ecx,ecx
c001316b:	80 3d d1 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a5d1,0x0
c0013172:	74 05                	je     c0013179 <Clock::timeInSecondsLocal()+0x3d>
c0013174:	b9 08 07 00 00       	mov    ecx,0x708
c0013179:	31 db                	xor    ebx,ebx
c001317b:	01 c8                	add    eax,ecx
c001317d:	11 da                	adc    edx,ebx
c001317f:	83 c4 08             	add    esp,0x8
c0013182:	5b                   	pop    ebx
c0013183:	c3                   	ret    

c0013184 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013184:	57                   	push   edi
c0013185:	56                   	push   esi
c0013186:	53                   	push   ebx
c0013187:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001318b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001318f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013191:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013195:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013198:	0f b6 05 d0 a5 02 c0 	movzx  eax,BYTE PTR ds:0xc002a5d0
c001319f:	03 05 d4 a5 02 c0    	add    eax,DWORD PTR ds:0xc002a5d4
c00131a5:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00131ab:	99                   	cdq    
c00131ac:	29 c6                	sub    esi,eax
c00131ae:	19 d7                	sbb    edi,edx
c00131b0:	89 f0                	mov    eax,esi
c00131b2:	89 fa                	mov    edx,edi
c00131b4:	31 f6                	xor    esi,esi
c00131b6:	80 3d d1 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a5d1,0x0
c00131bd:	74 05                	je     c00131c4 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00131bf:	be 08 07 00 00       	mov    esi,0x708
c00131c4:	31 ff                	xor    edi,edi
c00131c6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00131ca:	29 f0                	sub    eax,esi
c00131cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00131d0:	19 fa                	sbb    edx,edi
c00131d2:	89 d8                	mov    eax,ebx
c00131d4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131d8:	5b                   	pop    ebx
c00131d9:	5e                   	pop    esi
c00131da:	5f                   	pop    edi
c00131db:	ff e0                	jmp    eax

c00131dd <datetimeToSeconds(datetime_t)>:
c00131dd:	55                   	push   ebp
c00131de:	57                   	push   edi
c00131df:	56                   	push   esi
c00131e0:	53                   	push   ebx
c00131e1:	83 ec 14             	sub    esp,0x14
c00131e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00131e8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00131ec:	89 d3                	mov    ebx,edx
c00131ee:	0f b6 c6             	movzx  eax,dh
c00131f1:	c1 eb 10             	shr    ebx,0x10
c00131f4:	48                   	dec    eax
c00131f5:	66 81 eb 6c 07       	sub    bx,0x76c
c00131fa:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00131fe:	0f b6 f5             	movzx  esi,ch
c0013201:	89 cf                	mov    edi,ecx
c0013203:	6b f6 3c             	imul   esi,esi,0x3c
c0013206:	c1 ef 10             	shr    edi,0x10
c0013209:	0f b6 c9             	movzx  ecx,cl
c001320c:	89 f8                	mov    eax,edi
c001320e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013214:	0f b6 f8             	movzx  edi,al
c0013217:	0f b6 d2             	movzx  edx,dl
c001321a:	01 fe                	add    esi,edi
c001321c:	01 f1                	add    ecx,esi
c001321e:	0f b7 f3             	movzx  esi,bx
c0013221:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013225:	c1 f9 1f             	sar    ecx,0x1f
c0013228:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001322d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013231:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013236:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c001323d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013241:	76 29                	jbe    c001326c <datetimeToSeconds(datetime_t)+0x8f>
c0013243:	f6 c3 03             	test   bl,0x3
c0013246:	75 24                	jne    c001326c <datetimeToSeconds(datetime_t)+0x8f>
c0013248:	31 d2                	xor    edx,edx
c001324a:	bf 64 00 00 00       	mov    edi,0x64
c001324f:	89 d8                	mov    eax,ebx
c0013251:	66 f7 f7             	div    di
c0013254:	66 85 d2             	test   dx,dx
c0013257:	75 12                	jne    c001326b <datetimeToSeconds(datetime_t)+0x8e>
c0013259:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001325f:	bf 90 01 00 00       	mov    edi,0x190
c0013264:	99                   	cdq    
c0013265:	f7 ff                	idiv   edi
c0013267:	85 d2                	test   edx,edx
c0013269:	75 01                	jne    c001326c <datetimeToSeconds(datetime_t)+0x8f>
c001326b:	41                   	inc    ecx
c001326c:	66 83 fb 46          	cmp    bx,0x46
c0013270:	76 45                	jbe    c00132b7 <datetimeToSeconds(datetime_t)+0xda>
c0013272:	bb 46 00 00 00       	mov    ebx,0x46
c0013277:	bf 64 00 00 00       	mov    edi,0x64
c001327c:	bd 90 01 00 00       	mov    ebp,0x190
c0013281:	b8 6d 01 00 00       	mov    eax,0x16d
c0013286:	f6 c3 03             	test   bl,0x3
c0013289:	75 23                	jne    c00132ae <datetimeToSeconds(datetime_t)+0xd1>
c001328b:	89 d8                	mov    eax,ebx
c001328d:	99                   	cdq    
c001328e:	f7 ff                	idiv   edi
c0013290:	b8 6e 01 00 00       	mov    eax,0x16e
c0013295:	85 d2                	test   edx,edx
c0013297:	75 15                	jne    c00132ae <datetimeToSeconds(datetime_t)+0xd1>
c0013299:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001329f:	99                   	cdq    
c00132a0:	f7 fd                	idiv   ebp
c00132a2:	83 fa 01             	cmp    edx,0x1
c00132a5:	19 c0                	sbb    eax,eax
c00132a7:	f7 d0                	not    eax
c00132a9:	05 6e 01 00 00       	add    eax,0x16e
c00132ae:	01 c1                	add    ecx,eax
c00132b0:	43                   	inc    ebx
c00132b1:	39 f3                	cmp    ebx,esi
c00132b3:	7c cc                	jl     c0013281 <datetimeToSeconds(datetime_t)+0xa4>
c00132b5:	eb 35                	jmp    c00132ec <datetimeToSeconds(datetime_t)+0x10f>
c00132b7:	74 33                	je     c00132ec <datetimeToSeconds(datetime_t)+0x10f>
c00132b9:	b8 45 00 00 00       	mov    eax,0x45
c00132be:	89 c2                	mov    edx,eax
c00132c0:	83 e2 03             	and    edx,0x3
c00132c3:	39 f0                	cmp    eax,esi
c00132c5:	7e 0f                	jle    c00132d6 <datetimeToSeconds(datetime_t)+0xf9>
c00132c7:	83 fa 01             	cmp    edx,0x1
c00132ca:	19 d2                	sbb    edx,edx
c00132cc:	48                   	dec    eax
c00132cd:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00132d4:	eb e8                	jmp    c00132be <datetimeToSeconds(datetime_t)+0xe1>
c00132d6:	b8 6d 01 00 00       	mov    eax,0x16d
c00132db:	85 d2                	test   edx,edx
c00132dd:	75 0b                	jne    c00132ea <datetimeToSeconds(datetime_t)+0x10d>
c00132df:	66 83 fb 01          	cmp    bx,0x1
c00132e3:	19 c0                	sbb    eax,eax
c00132e5:	05 6e 01 00 00       	add    eax,0x16e
c00132ea:	29 c1                	sub    ecx,eax
c00132ec:	b8 80 51 01 00       	mov    eax,0x15180
c00132f1:	f7 e9                	imul   ecx
c00132f3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00132f7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00132fb:	83 c4 14             	add    esp,0x14
c00132fe:	5b                   	pop    ebx
c00132ff:	5e                   	pop    esi
c0013300:	5f                   	pop    edi
c0013301:	5d                   	pop    ebp
c0013302:	c3                   	ret    
c0013303:	90                   	nop

c0013304 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013304:	57                   	push   edi
c0013305:	56                   	push   esi
c0013306:	53                   	push   ebx
c0013307:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001330b:	8b 06                	mov    eax,DWORD PTR [esi]
c001330d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013310:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013314:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013318:	e8 c0 fe ff ff       	call   c00131dd <datetimeToSeconds(datetime_t)>
c001331d:	59                   	pop    ecx
c001331e:	0f b6 0d d0 a5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a5d0
c0013325:	5b                   	pop    ebx
c0013326:	03 0d d4 a5 02 c0    	add    ecx,DWORD PTR ds:0xc002a5d4
c001332c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013332:	89 cb                	mov    ebx,ecx
c0013334:	c1 fb 1f             	sar    ebx,0x1f
c0013337:	29 c8                	sub    eax,ecx
c0013339:	19 da                	sbb    edx,ebx
c001333b:	31 c9                	xor    ecx,ecx
c001333d:	80 3d d1 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a5d1,0x0
c0013344:	74 05                	je     c001334b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013346:	b9 08 07 00 00       	mov    ecx,0x708
c001334b:	31 db                	xor    ebx,ebx
c001334d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013351:	29 c8                	sub    eax,ecx
c0013353:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013357:	19 da                	sbb    edx,ebx
c0013359:	89 f8                	mov    eax,edi
c001335b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001335f:	5b                   	pop    ebx
c0013360:	5e                   	pop    esi
c0013361:	5f                   	pop    edi
c0013362:	ff e0                	jmp    eax

c0013364 <secondsToDatetime(unsigned long long)>:
c0013364:	55                   	push   ebp
c0013365:	57                   	push   edi
c0013366:	56                   	push   esi
c0013367:	53                   	push   ebx
c0013368:	83 ec 1c             	sub    esp,0x1c
c001336b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001336f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013373:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013377:	6a 00                	push   0x0
c0013379:	68 80 51 01 00       	push   0x15180
c001337e:	55                   	push   ebp
c001337f:	57                   	push   edi
c0013380:	e8 d7 00 01 00       	call   c002345c <__udivdi3>
c0013385:	83 c4 10             	add    esp,0x10
c0013388:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001338e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013392:	6a 00                	push   0x0
c0013394:	68 80 51 01 00       	push   0x15180
c0013399:	55                   	push   ebp
c001339a:	57                   	push   edi
c001339b:	bf 10 0e 00 00       	mov    edi,0xe10
c00133a0:	e8 b7 01 01 00       	call   c002355c <__umoddi3>
c00133a5:	83 c4 10             	add    esp,0x10
c00133a8:	99                   	cdq    
c00133a9:	f7 ff                	idiv   edi
c00133ab:	bf 3c 00 00 00       	mov    edi,0x3c
c00133b0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00133b3:	89 d0                	mov    eax,edx
c00133b5:	99                   	cdq    
c00133b6:	f7 ff                	idiv   edi
c00133b8:	85 db                	test   ebx,ebx
c00133ba:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00133bd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00133c0:	79 11                	jns    c00133d3 <secondsToDatetime(unsigned long long)+0x6f>
c00133c2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00133c6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00133cc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133d1:	eb 07                	jmp    c00133da <secondsToDatetime(unsigned long long)+0x76>
c00133d3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133d8:	89 d8                	mov    eax,ebx
c00133da:	bf b4 05 00 00       	mov    edi,0x5b4
c00133df:	99                   	cdq    
c00133e0:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00133e5:	f7 f9                	idiv   ecx
c00133e7:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00133ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133f0:	31 d2                	xor    edx,edx
c00133f2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00133fa:	01 c3                	add    ebx,eax
c00133fc:	89 d8                	mov    eax,ebx
c00133fe:	f7 f1                	div    ecx
c0013400:	31 d2                	xor    edx,edx
c0013402:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013405:	89 d8                	mov    eax,ebx
c0013407:	f7 f7                	div    edi
c0013409:	31 d2                	xor    edx,edx
c001340b:	29 c1                	sub    ecx,eax
c001340d:	89 d8                	mov    eax,ebx
c001340f:	f7 f5                	div    ebp
c0013411:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013416:	29 c1                	sub    ecx,eax
c0013418:	31 d2                	xor    edx,edx
c001341a:	89 c8                	mov    eax,ecx
c001341c:	f7 f5                	div    ebp
c001341e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013423:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013427:	31 d2                	xor    edx,edx
c0013429:	89 c8                	mov    eax,ecx
c001342b:	f7 f5                	div    ebp
c001342d:	31 d2                	xor    edx,edx
c001342f:	01 c3                	add    ebx,eax
c0013431:	89 c8                	mov    eax,ecx
c0013433:	f7 f7                	div    edi
c0013435:	bf 99 00 00 00       	mov    edi,0x99
c001343a:	29 c3                	sub    ebx,eax
c001343c:	31 d2                	xor    edx,edx
c001343e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013446:	29 c3                	sub    ebx,eax
c0013448:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001344b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001344e:	bb 05 00 00 00       	mov    ebx,0x5
c0013453:	83 c1 02             	add    ecx,0x2
c0013456:	89 c8                	mov    eax,ecx
c0013458:	f7 f7                	div    edi
c001345a:	31 d2                	xor    edx,edx
c001345c:	89 c7                	mov    edi,eax
c001345e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013464:	83 c0 02             	add    eax,0x2
c0013467:	f7 f3                	div    ebx
c0013469:	89 eb                	mov    ebx,ebp
c001346b:	29 c3                	sub    ebx,eax
c001346d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013473:	88 1e                	mov    BYTE PTR [esi],bl
c0013475:	19 c0                	sbb    eax,eax
c0013477:	31 d2                	xor    edx,edx
c0013479:	83 e0 0c             	and    eax,0xc
c001347c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013480:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013488:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001348c:	83 f9 01             	cmp    ecx,0x1
c001348f:	0f 96 c2             	setbe  dl
c0013492:	41                   	inc    ecx
c0013493:	01 d0                	add    eax,edx
c0013495:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013498:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001349c:	83 c4 1c             	add    esp,0x1c
c001349f:	89 f0                	mov    eax,esi
c00134a1:	5b                   	pop    ebx
c00134a2:	5e                   	pop    esi
c00134a3:	5f                   	pop    edi
c00134a4:	5d                   	pop    ebp
c00134a5:	c2 04 00             	ret    0x4

c00134a8 <Clock::timeInDatetimeLocal()>:
c00134a8:	53                   	push   ebx
c00134a9:	83 ec 14             	sub    esp,0x14
c00134ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134b0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00134b4:	e8 83 fc ff ff       	call   c001313c <Clock::timeInSecondsLocal()>
c00134b9:	83 c4 0c             	add    esp,0xc
c00134bc:	52                   	push   edx
c00134bd:	50                   	push   eax
c00134be:	53                   	push   ebx
c00134bf:	e8 a0 fe ff ff       	call   c0013364 <secondsToDatetime(unsigned long long)>
c00134c4:	89 d8                	mov    eax,ebx
c00134c6:	83 c4 14             	add    esp,0x14
c00134c9:	5b                   	pop    ebx
c00134ca:	c2 04 00             	ret    0x4
c00134cd:	90                   	nop

c00134ce <Device::hibernate()>:
c00134ce:	c3                   	ret    
c00134cf:	90                   	nop

c00134d0 <Device::wake()>:
c00134d0:	c3                   	ret    
c00134d1:	90                   	nop

c00134d2 <Device::detect()>:
c00134d2:	c3                   	ret    
c00134d3:	90                   	nop

c00134d4 <Device::disableLegacy()>:
c00134d4:	c3                   	ret    
c00134d5:	90                   	nop

c00134d6 <Device::powerSaving(PowerSavingLevel)>:
c00134d6:	c3                   	ret    
c00134d7:	90                   	nop

c00134d8 <DriverlessDevice::close(int, int, void*)>:
c00134d8:	31 c0                	xor    eax,eax
c00134da:	c3                   	ret    
c00134db:	90                   	nop

c00134dc <DriverlessDevice::detect()>:
c00134dc:	c3                   	ret    
c00134dd:	90                   	nop

c00134de <DriverlessDevice::open(int, int, void*)>:
c00134de:	83 ec 18             	sub    esp,0x18
c00134e1:	68 50 74 02 c0       	push   0xc0027450
c00134e6:	e8 d8 54 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c00134eb:	83 c8 ff             	or     eax,0xffffffff
c00134ee:	83 c4 1c             	add    esp,0x1c
c00134f1:	c3                   	ret    

c00134f2 <Device::~Device()>:
c00134f2:	ba 78 74 02 c0       	mov    edx,0xc0027478
c00134f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134fb:	89 10                	mov    DWORD PTR [eax],edx
c00134fd:	90                   	nop
c00134fe:	c3                   	ret    
c00134ff:	90                   	nop

c0013500 <Device::~Device()>:
c0013500:	83 ec 0c             	sub    esp,0xc
c0013503:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013507:	e8 e6 ff ff ff       	call   c00134f2 <Device::~Device()>
c001350c:	83 c4 04             	add    esp,0x4
c001350f:	83 ec 08             	sub    esp,0x8
c0013512:	68 58 01 00 00       	push   0x158
c0013517:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001351b:	e8 45 ec ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0013520:	83 c4 10             	add    esp,0x10
c0013523:	83 c4 0c             	add    esp,0xc
c0013526:	c3                   	ret    
c0013527:	90                   	nop

c0013528 <Device::findAndLoadDriver()>:
c0013528:	c3                   	ret    
c0013529:	90                   	nop

c001352a <Device::preOpenPCI(PCIDeviceInfo)>:
c001352a:	57                   	push   edi
c001352b:	b9 09 00 00 00       	mov    ecx,0x9
c0013530:	56                   	push   esi
c0013531:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013535:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013539:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013543:	81 c7 18 01 00 00    	add    edi,0x118
c0013549:	fc                   	cld    
c001354a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001354c:	5e                   	pop    esi
c001354d:	5f                   	pop    edi
c001354e:	c3                   	ret    
c001354f:	90                   	nop

c0013550 <Device::preOpenACPI(void*, char*, char*)>:
c0013550:	56                   	push   esi
c0013551:	53                   	push   ebx
c0013552:	83 ec 08             	sub    esp,0x8
c0013555:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013559:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001355d:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013567:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001356b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013571:	6a 1e                	push   0x1e
c0013573:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013579:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001357d:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013583:	50                   	push   eax
c0013584:	e8 be d0 fe ff       	call   c0000647 <memcpy>
c0013589:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001358d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013591:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013599:	83 c4 14             	add    esp,0x14
c001359c:	5b                   	pop    ebx
c001359d:	5e                   	pop    esi
c001359e:	e9 a4 d0 fe ff       	jmp    c0000647 <memcpy>
c00135a3:	90                   	nop

c00135a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00135a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135a8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00135ad:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00135b4:	75 0b                	jne    c00135c1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00135b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00135b8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00135bc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00135bf:	eb 1e                	jmp    c00135df <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00135c1:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00135c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00135cc:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00135d2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00135d4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00135d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00135dc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00135df:	ff e0                	jmp    eax
c00135e1:	90                   	nop

c00135e2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00135e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135e6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00135eb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00135f2:	75 0b                	jne    c00135ff <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00135f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00135f6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00135fa:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00135fd:	eb 1e                	jmp    c001361d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00135ff:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0013604:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001360a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013610:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013612:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013616:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001361a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001361d:	ff e0                	jmp    eax
c001361f:	90                   	nop

c0013620 <Device::addChild(Device*)>:
c0013620:	53                   	push   ebx
c0013621:	83 ec 08             	sub    esp,0x8
c0013624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013628:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001362c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013632:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013638:	8b 13                	mov    edx,DWORD PTR [ebx]
c001363a:	85 d2                	test   edx,edx
c001363c:	74 04                	je     c0013642 <Device::addChild(Device*)+0x22>
c001363e:	89 d3                	mov    ebx,edx
c0013640:	eb f6                	jmp    c0013638 <Device::addChild(Device*)+0x18>
c0013642:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013645:	83 ec 0c             	sub    esp,0xc
c0013648:	6a 08                	push   0x8
c001364a:	e8 07 eb ff ff       	call   c0012156 <operator new(unsigned long)>
c001364f:	89 03                	mov    DWORD PTR [ebx],eax
c0013651:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013657:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001365e:	83 c4 18             	add    esp,0x18
c0013661:	5b                   	pop    ebx
c0013662:	c3                   	ret    
c0013663:	90                   	nop

c0013664 <Device::removeAllChildren()>:
c0013664:	56                   	push   esi
c0013665:	53                   	push   ebx
c0013666:	52                   	push   edx
c0013667:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001366b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013671:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013674:	74 17                	je     c001368d <Device::removeAllChildren()+0x29>
c0013676:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013679:	85 c0                	test   eax,eax
c001367b:	74 0c                	je     c0013689 <Device::removeAllChildren()+0x25>
c001367d:	83 ec 0c             	sub    esp,0xc
c0013680:	8b 10                	mov    edx,DWORD PTR [eax]
c0013682:	50                   	push   eax
c0013683:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013686:	83 c4 10             	add    esp,0x10
c0013689:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001368b:	eb e4                	jmp    c0013671 <Device::removeAllChildren()+0xd>
c001368d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013693:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013699:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001369f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136a6:	58                   	pop    eax
c00136a7:	5b                   	pop    ebx
c00136a8:	5e                   	pop    esi
c00136a9:	c3                   	ret    

c00136aa <Device::hibernateAll()>:
c00136aa:	53                   	push   ebx
c00136ab:	83 ec 14             	sub    esp,0x14
c00136ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136b4:	53                   	push   ebx
c00136b5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00136b8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00136be:	83 c4 10             	add    esp,0x10
c00136c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136c4:	74 0f                	je     c00136d5 <Device::hibernateAll()+0x2b>
c00136c6:	83 ec 0c             	sub    esp,0xc
c00136c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00136cc:	e8 d9 ff ff ff       	call   c00136aa <Device::hibernateAll()>
c00136d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00136d3:	eb e9                	jmp    c00136be <Device::hibernateAll()+0x14>
c00136d5:	83 c4 08             	add    esp,0x8
c00136d8:	5b                   	pop    ebx
c00136d9:	c3                   	ret    

c00136da <Device::wakeAll()>:
c00136da:	53                   	push   ebx
c00136db:	83 ec 14             	sub    esp,0x14
c00136de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136e4:	53                   	push   ebx
c00136e5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00136e8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00136ee:	83 c4 10             	add    esp,0x10
c00136f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136f4:	74 0f                	je     c0013705 <Device::wakeAll()+0x2b>
c00136f6:	83 ec 0c             	sub    esp,0xc
c00136f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00136fc:	e8 d9 ff ff ff       	call   c00136da <Device::wakeAll()>
c0013701:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013703:	eb e9                	jmp    c00136ee <Device::wakeAll()+0x14>
c0013705:	83 c4 08             	add    esp,0x8
c0013708:	5b                   	pop    ebx
c0013709:	c3                   	ret    

c001370a <Device::detectAll()>:
c001370a:	53                   	push   ebx
c001370b:	83 ec 14             	sub    esp,0x14
c001370e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013712:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013714:	53                   	push   ebx
c0013715:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013718:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001371e:	83 c4 10             	add    esp,0x10
c0013721:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013724:	74 0f                	je     c0013735 <Device::detectAll()+0x2b>
c0013726:	83 ec 0c             	sub    esp,0xc
c0013729:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001372c:	e8 d9 ff ff ff       	call   c001370a <Device::detectAll()>
c0013731:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013733:	eb e9                	jmp    c001371e <Device::detectAll()+0x14>
c0013735:	83 c4 08             	add    esp,0x8
c0013738:	5b                   	pop    ebx
c0013739:	c3                   	ret    

c001373a <Device::disableLegacyAll()>:
c001373a:	53                   	push   ebx
c001373b:	83 ec 14             	sub    esp,0x14
c001373e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013742:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013744:	53                   	push   ebx
c0013745:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013748:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001374e:	83 c4 10             	add    esp,0x10
c0013751:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013754:	74 0f                	je     c0013765 <Device::disableLegacyAll()+0x2b>
c0013756:	83 ec 0c             	sub    esp,0xc
c0013759:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001375c:	e8 d9 ff ff ff       	call   c001373a <Device::disableLegacyAll()>
c0013761:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013763:	eb e9                	jmp    c001374e <Device::disableLegacyAll()+0x14>
c0013765:	83 c4 08             	add    esp,0x8
c0013768:	5b                   	pop    ebx
c0013769:	c3                   	ret    

c001376a <Device::loadDriversForAll()>:
c001376a:	53                   	push   ebx
c001376b:	83 ec 08             	sub    esp,0x8
c001376e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013772:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013778:	8b 18                	mov    ebx,DWORD PTR [eax]
c001377a:	85 db                	test   ebx,ebx
c001377c:	74 12                	je     c0013790 <Device::loadDriversForAll()+0x26>
c001377e:	83 ec 0c             	sub    esp,0xc
c0013781:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013784:	e8 e1 ff ff ff       	call   c001376a <Device::loadDriversForAll()>
c0013789:	83 c4 10             	add    esp,0x10
c001378c:	89 d8                	mov    eax,ebx
c001378e:	eb e8                	jmp    c0013778 <Device::loadDriversForAll()+0xe>
c0013790:	83 c4 08             	add    esp,0x8
c0013793:	5b                   	pop    ebx
c0013794:	c3                   	ret    
c0013795:	90                   	nop

c0013796 <Device::closeAll()>:
c0013796:	53                   	push   ebx
c0013797:	83 ec 08             	sub    esp,0x8
c001379a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001379e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137a0:	6a 00                	push   0x0
c00137a2:	6a 00                	push   0x0
c00137a4:	6a 00                	push   0x0
c00137a6:	53                   	push   ebx
c00137a7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137b0:	83 c4 10             	add    esp,0x10
c00137b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137b6:	74 0f                	je     c00137c7 <Device::closeAll()+0x31>
c00137b8:	83 ec 0c             	sub    esp,0xc
c00137bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137be:	e8 d3 ff ff ff       	call   c0013796 <Device::closeAll()>
c00137c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137c5:	eb e9                	jmp    c00137b0 <Device::closeAll()+0x1a>
c00137c7:	83 c4 08             	add    esp,0x8
c00137ca:	5b                   	pop    ebx
c00137cb:	c3                   	ret    

c00137cc <Device::powerSavingAll(PowerSavingLevel)>:
c00137cc:	56                   	push   esi
c00137cd:	53                   	push   ebx
c00137ce:	83 ec 0c             	sub    esp,0xc
c00137d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137d5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00137d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137db:	56                   	push   esi
c00137dc:	53                   	push   ebx
c00137dd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00137e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137e6:	83 c4 10             	add    esp,0x10
c00137e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137ec:	74 0f                	je     c00137fd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00137ee:	52                   	push   edx
c00137ef:	52                   	push   edx
c00137f0:	56                   	push   esi
c00137f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137f4:	e8 d3 ff ff ff       	call   c00137cc <Device::powerSavingAll(PowerSavingLevel)>
c00137f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137fb:	eb e9                	jmp    c00137e6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00137fd:	58                   	pop    eax
c00137fe:	5b                   	pop    ebx
c00137ff:	5e                   	pop    esi
c0013800:	c3                   	ret    
c0013801:	90                   	nop

c0013802 <Device::setName(char const*)>:
c0013802:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001380a:	e9 0d cf fe ff       	jmp    c000071c <strcpy>
c001380f:	90                   	nop

c0013810 <Device::Device(char const*)>:
c0013810:	83 ec 0c             	sub    esp,0xc
c0013813:	ba 78 74 02 c0       	mov    edx,0xc0027478
c0013818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001381c:	89 10                	mov    DWORD PTR [eax],edx
c001381e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013822:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001382c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013830:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001383a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001383e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001384c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013856:	83 ec 08             	sub    esp,0x8
c0013859:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001385d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013861:	e8 9c ff ff ff       	call   c0013802 <Device::setName(char const*)>
c0013866:	83 c4 10             	add    esp,0x10
c0013869:	83 ec 0c             	sub    esp,0xc
c001386c:	6a 08                	push   0x8
c001386e:	e8 e3 e8 ff ff       	call   c0012156 <operator new(unsigned long)>
c0013873:	83 c4 10             	add    esp,0x10
c0013876:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001387c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013883:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013887:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001388d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013891:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013897:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001389d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00138b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138bd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00138c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00138d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00138e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00138ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f2:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00138fc:	90                   	nop
c00138fd:	83 c4 0c             	add    esp,0xc
c0013900:	c3                   	ret    
c0013901:	90                   	nop

c0013902 <Device::getName()>:
c0013902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013906:	05 d0 00 00 00       	add    eax,0xd0
c001390b:	c3                   	ret    

c001390c <DriverlessDevice::DriverlessDevice(char const*)>:
c001390c:	83 ec 0c             	sub    esp,0xc
c001390f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013913:	83 ec 08             	sub    esp,0x8
c0013916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001391a:	50                   	push   eax
c001391b:	e8 f0 fe ff ff       	call   c0013810 <Device::Device(char const*)>
c0013920:	83 c4 10             	add    esp,0x10
c0013923:	ba a4 74 02 c0       	mov    edx,0xc00274a4
c0013928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392c:	89 10                	mov    DWORD PTR [eax],edx
c001392e:	90                   	nop
c001392f:	83 c4 0c             	add    esp,0xc
c0013932:	c3                   	ret    
c0013933:	90                   	nop

c0013934 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013934:	57                   	push   edi
c0013935:	56                   	push   esi
c0013936:	53                   	push   ebx
c0013937:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001393b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001393f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013943:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013949:	75 0c                	jne    c0013957 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001394b:	52                   	push   edx
c001394c:	52                   	push   edx
c001394d:	53                   	push   ebx
c001394e:	56                   	push   esi
c001394f:	e8 46 1a 01 00       	call   c002539a <LinkedList<Device>::addElement(Device*)>
c0013954:	83 c4 10             	add    esp,0x10
c0013957:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001395d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013960:	74 12                	je     c0013974 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013962:	50                   	push   eax
c0013963:	57                   	push   edi
c0013964:	56                   	push   esi
c0013965:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013968:	e8 c7 ff ff ff       	call   c0013934 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001396d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001396f:	83 c4 10             	add    esp,0x10
c0013972:	eb e9                	jmp    c001395d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013974:	5b                   	pop    ebx
c0013975:	5e                   	pop    esi
c0013976:	5f                   	pop    edi
c0013977:	c3                   	ret    

c0013978 <getDevicesOfType(DeviceType)>:
c0013978:	53                   	push   ebx
c0013979:	83 ec 14             	sub    esp,0x14
c001397c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013980:	53                   	push   ebx
c0013981:	e8 f0 1a 01 00       	call   c0025476 <LinkedList<Device>::LinkedList()>
c0013986:	83 c4 0c             	add    esp,0xc
c0013989:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001398d:	53                   	push   ebx
c001398e:	ff 35 68 a4 02 c0    	push   DWORD PTR ds:0xc002a468
c0013994:	e8 9b ff ff ff       	call   c0013934 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013999:	89 d8                	mov    eax,ebx
c001399b:	83 c4 18             	add    esp,0x18
c001399e:	5b                   	pop    ebx
c001399f:	c2 04 00             	ret    0x4

c00139a2 <HardDiskController::HardDiskController(char const*)>:
c00139a2:	83 ec 0c             	sub    esp,0xc
c00139a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139a9:	83 ec 08             	sub    esp,0x8
c00139ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139b0:	50                   	push   eax
c00139b1:	e8 5a fe ff ff       	call   c0013810 <Device::Device(char const*)>
c00139b6:	83 c4 10             	add    esp,0x10
c00139b9:	ba d0 74 02 c0       	mov    edx,0xc00274d0
c00139be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139c2:	89 10                	mov    DWORD PTR [eax],edx
c00139c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139c8:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00139d2:	90                   	nop
c00139d3:	83 c4 0c             	add    esp,0xc
c00139d6:	c3                   	ret    
c00139d7:	90                   	nop

c00139d8 <HardDiskController::~HardDiskController()>:
c00139d8:	83 ec 0c             	sub    esp,0xc
c00139db:	ba d0 74 02 c0       	mov    edx,0xc00274d0
c00139e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139e4:	89 10                	mov    DWORD PTR [eax],edx
c00139e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ea:	83 ec 0c             	sub    esp,0xc
c00139ed:	50                   	push   eax
c00139ee:	e8 ff fa ff ff       	call   c00134f2 <Device::~Device()>
c00139f3:	83 c4 10             	add    esp,0x10
c00139f6:	90                   	nop
c00139f7:	83 c4 0c             	add    esp,0xc
c00139fa:	c3                   	ret    
c00139fb:	90                   	nop

c00139fc <HardDiskController::~HardDiskController()>:
c00139fc:	83 ec 0c             	sub    esp,0xc
c00139ff:	83 ec 0c             	sub    esp,0xc
c0013a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a06:	e8 cd ff ff ff       	call   c00139d8 <HardDiskController::~HardDiskController()>
c0013a0b:	83 c4 10             	add    esp,0x10
c0013a0e:	83 ec 08             	sub    esp,0x8
c0013a11:	68 58 01 00 00       	push   0x158
c0013a16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a1a:	e8 46 e7 ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0013a1f:	83 c4 10             	add    esp,0x10
c0013a22:	83 c4 0c             	add    esp,0xc
c0013a25:	c3                   	ret    

c0013a26 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013a26:	83 ec 0c             	sub    esp,0xc
c0013a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a2d:	83 ec 08             	sub    esp,0x8
c0013a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a34:	50                   	push   eax
c0013a35:	e8 d6 fd ff ff       	call   c0013810 <Device::Device(char const*)>
c0013a3a:	83 c4 10             	add    esp,0x10
c0013a3d:	ba fc 74 02 c0       	mov    edx,0xc00274fc
c0013a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a46:	89 10                	mov    DWORD PTR [eax],edx
c0013a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a4c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a57:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a62:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a74:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a7e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013a88:	90                   	nop
c0013a89:	83 c4 0c             	add    esp,0xc
c0013a8c:	c3                   	ret    
c0013a8d:	90                   	nop

c0013a8e <PhysicalDisk::startCache()>:
c0013a8e:	56                   	push   esi
c0013a8f:	53                   	push   ebx
c0013a90:	83 ec 10             	sub    esp,0x10
c0013a93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a97:	6a 30                	push   0x30
c0013a99:	e8 b8 e6 ff ff       	call   c0012156 <operator new(unsigned long)>
c0013a9e:	89 c6                	mov    esi,eax
c0013aa0:	58                   	pop    eax
c0013aa1:	5a                   	pop    edx
c0013aa2:	53                   	push   ebx
c0013aa3:	56                   	push   esi
c0013aa4:	e8 cf 24 00 00       	call   c0015f78 <VCache::VCache(PhysicalDisk*)>
c0013aa9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013aaf:	83 c4 14             	add    esp,0x14
c0013ab2:	5b                   	pop    ebx
c0013ab3:	5e                   	pop    esi
c0013ab4:	c3                   	ret    
c0013ab5:	90                   	nop

c0013ab6 <PhysicalDisk::~PhysicalDisk()>:
c0013ab6:	83 ec 0c             	sub    esp,0xc
c0013ab9:	ba fc 74 02 c0       	mov    edx,0xc00274fc
c0013abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ac2:	89 10                	mov    DWORD PTR [eax],edx
c0013ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ac8:	83 ec 0c             	sub    esp,0xc
c0013acb:	50                   	push   eax
c0013acc:	e8 21 fa ff ff       	call   c00134f2 <Device::~Device()>
c0013ad1:	83 c4 10             	add    esp,0x10
c0013ad4:	90                   	nop
c0013ad5:	83 c4 0c             	add    esp,0xc
c0013ad8:	c3                   	ret    
c0013ad9:	90                   	nop

c0013ada <PhysicalDisk::~PhysicalDisk()>:
c0013ada:	83 ec 0c             	sub    esp,0xc
c0013add:	83 ec 0c             	sub    esp,0xc
c0013ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ae4:	e8 cd ff ff ff       	call   c0013ab6 <PhysicalDisk::~PhysicalDisk()>
c0013ae9:	83 c4 10             	add    esp,0x10
c0013aec:	83 ec 08             	sub    esp,0x8
c0013aef:	68 6c 01 00 00       	push   0x16c
c0013af4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013af8:	e8 68 e6 ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0013afd:	83 c4 10             	add    esp,0x10
c0013b00:	83 c4 0c             	add    esp,0xc
c0013b03:	c3                   	ret    

c0013b04 <FPU::FPU(char const*)>:
c0013b04:	83 ec 0c             	sub    esp,0xc
c0013b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b0b:	83 ec 08             	sub    esp,0x8
c0013b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b12:	50                   	push   eax
c0013b13:	e8 f8 fc ff ff       	call   c0013810 <Device::Device(char const*)>
c0013b18:	83 c4 10             	add    esp,0x10
c0013b1b:	ba 3c 75 02 c0       	mov    edx,0xc002753c
c0013b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b24:	89 10                	mov    DWORD PTR [eax],edx
c0013b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b2a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013b34:	90                   	nop
c0013b35:	83 c4 0c             	add    esp,0xc
c0013b38:	c3                   	ret    
c0013b39:	90                   	nop

c0013b3a <FPU::~FPU()>:
c0013b3a:	83 ec 0c             	sub    esp,0xc
c0013b3d:	ba 3c 75 02 c0       	mov    edx,0xc002753c
c0013b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b46:	89 10                	mov    DWORD PTR [eax],edx
c0013b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b4c:	83 ec 0c             	sub    esp,0xc
c0013b4f:	50                   	push   eax
c0013b50:	e8 9d f9 ff ff       	call   c00134f2 <Device::~Device()>
c0013b55:	83 c4 10             	add    esp,0x10
c0013b58:	90                   	nop
c0013b59:	83 c4 0c             	add    esp,0xc
c0013b5c:	c3                   	ret    
c0013b5d:	90                   	nop

c0013b5e <FPU::~FPU()>:
c0013b5e:	83 ec 0c             	sub    esp,0xc
c0013b61:	83 ec 0c             	sub    esp,0xc
c0013b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b68:	e8 cd ff ff ff       	call   c0013b3a <FPU::~FPU()>
c0013b6d:	83 c4 10             	add    esp,0x10
c0013b70:	83 ec 08             	sub    esp,0x8
c0013b73:	68 58 01 00 00       	push   0x158
c0013b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b7c:	e8 e4 e5 ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0013b81:	83 c4 10             	add    esp,0x10
c0013b84:	83 c4 0c             	add    esp,0xc
c0013b87:	c3                   	ret    

c0013b88 <setupFPU()>:
c0013b88:	53                   	push   ebx
c0013b89:	83 ec 08             	sub    esp,0x8
c0013b8c:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0013b92:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013b99:	74 19                	je     c0013bb4 <setupFPU()+0x2c>
c0013b9b:	83 ec 0c             	sub    esp,0xc
c0013b9e:	68 58 01 00 00       	push   0x158
c0013ba3:	e8 ae e5 ff ff       	call   c0012156 <operator new(unsigned long)>
c0013ba8:	89 c3                	mov    ebx,eax
c0013baa:	89 04 24             	mov    DWORD PTR [esp],eax
c0013bad:	e8 4e e4 00 00       	call   c0022000 <AVX::AVX()>
c0013bb2:	eb 5b                	jmp    c0013c0f <setupFPU()+0x87>
c0013bb4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013bba:	84 c0                	test   al,al
c0013bbc:	79 19                	jns    c0013bd7 <setupFPU()+0x4f>
c0013bbe:	83 ec 0c             	sub    esp,0xc
c0013bc1:	68 58 01 00 00       	push   0x158
c0013bc6:	e8 8b e5 ff ff       	call   c0012156 <operator new(unsigned long)>
c0013bcb:	89 c3                	mov    ebx,eax
c0013bcd:	89 04 24             	mov    DWORD PTR [esp],eax
c0013bd0:	e8 51 e5 00 00       	call   c0022126 <SSE::SSE()>
c0013bd5:	eb 38                	jmp    c0013c0f <setupFPU()+0x87>
c0013bd7:	a8 20                	test   al,0x20
c0013bd9:	74 19                	je     c0013bf4 <setupFPU()+0x6c>
c0013bdb:	83 ec 0c             	sub    esp,0xc
c0013bde:	68 58 01 00 00       	push   0x158
c0013be3:	e8 6e e5 ff ff       	call   c0012156 <operator new(unsigned long)>
c0013be8:	89 c3                	mov    ebx,eax
c0013bea:	89 04 24             	mov    DWORD PTR [esp],eax
c0013bed:	e8 9e e4 00 00       	call   c0022090 <MMX::MMX()>
c0013bf2:	eb 1b                	jmp    c0013c0f <setupFPU()+0x87>
c0013bf4:	a8 10                	test   al,0x10
c0013bf6:	74 1c                	je     c0013c14 <setupFPU()+0x8c>
c0013bf8:	83 ec 0c             	sub    esp,0xc
c0013bfb:	68 58 01 00 00       	push   0x158
c0013c00:	e8 51 e5 ff ff       	call   c0012156 <operator new(unsigned long)>
c0013c05:	89 c3                	mov    ebx,eax
c0013c07:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c0a:	e8 a5 e5 00 00       	call   c00221b4 <x87::x87()>
c0013c0f:	83 c4 10             	add    esp,0x10
c0013c12:	eb 24                	jmp    c0013c38 <setupFPU()+0xb0>
c0013c14:	83 e0 ef             	and    eax,0xffffffef
c0013c17:	83 ec 0c             	sub    esp,0xc
c0013c1a:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013c20:	68 28 75 02 c0       	push   0xc0027528
c0013c25:	e8 1b e6 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0013c2a:	0f 20 c0             	mov    eax,cr0
c0013c2d:	83 c8 04             	or     eax,0x4
c0013c30:	0f 22 c0             	mov    cr0,eax
c0013c33:	31 db                	xor    ebx,ebx
c0013c35:	83 c4 10             	add    esp,0x10
c0013c38:	89 d8                	mov    eax,ebx
c0013c3a:	83 c4 08             	add    esp,0x8
c0013c3d:	5b                   	pop    ebx
c0013c3e:	c3                   	ret    
c0013c3f:	90                   	nop

c0013c40 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013c40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013c44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c48:	c1 e0 04             	shl    eax,0x4
c0013c4b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013c4f:	8d 50 10             	lea    edx,[eax+0x10]
c0013c52:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013c58:	74 08                	je     c0013c62 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013c5a:	83 c0 04             	add    eax,0x4
c0013c5d:	39 d0                	cmp    eax,edx
c0013c5f:	75 f1                	jne    c0013c52 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013c61:	c3                   	ret    
c0013c62:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c6c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013c76:	eb e2                	jmp    c0013c5a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013c78 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013c78:	57                   	push   edi
c0013c79:	31 c0                	xor    eax,eax
c0013c7b:	56                   	push   esi
c0013c7c:	53                   	push   ebx
c0013c7d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013c81:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013c85:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013c89:	89 da                	mov    edx,ebx
c0013c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c8f:	c1 e2 04             	shl    edx,0x4
c0013c92:	01 ca                	add    edx,ecx
c0013c94:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013c9c:	74 16                	je     c0013cb4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013c9e:	40                   	inc    eax
c0013c9f:	83 f8 04             	cmp    eax,0x4
c0013ca2:	75 f0                	jne    c0013c94 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013ca4:	c7 44 24 10 6c 75 02 c0 	mov    DWORD PTR [esp+0x10],0xc002756c
c0013cac:	5b                   	pop    ebx
c0013cad:	5e                   	pop    esi
c0013cae:	5f                   	pop    edi
c0013caf:	e9 0f 4d 00 00       	jmp    c00189c3 <Krnl::panic(char const*)>
c0013cb4:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013cb7:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013cba:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013cc0:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013cc6:	5b                   	pop    ebx
c0013cc7:	5e                   	pop    esi
c0013cc8:	5f                   	pop    edi
c0013cc9:	c3                   	ret    

c0013cca <doubleFault(regs*, void*)>:
c0013cca:	55                   	push   ebp
c0013ccb:	89 e5                	mov    ebp,esp
c0013ccd:	83 ec 08             	sub    esp,0x8
c0013cd0:	83 ec 0c             	sub    esp,0xc
c0013cd3:	68 a7 75 02 c0       	push   0xc00275a7
c0013cd8:	e8 e6 4c 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0013cdd:	83 c4 10             	add    esp,0x10
c0013ce0:	90                   	nop
c0013ce1:	c9                   	leave  
c0013ce2:	c3                   	ret    
c0013ce3:	90                   	nop

c0013ce4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013ce4:	56                   	push   esi
c0013ce5:	53                   	push   ebx
c0013ce6:	50                   	push   eax
c0013ce7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ceb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013cef:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013cf4:	75 35                	jne    c0013d2b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013cf6:	8d 43 20             	lea    eax,[ebx+0x20]
c0013cf9:	31 d2                	xor    edx,edx
c0013cfb:	89 c1                	mov    ecx,eax
c0013cfd:	c1 e1 04             	shl    ecx,0x4
c0013d00:	01 f1                	add    ecx,esi
c0013d02:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013d0a:	74 3e                	je     c0013d4a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013d0c:	42                   	inc    edx
c0013d0d:	83 fa 04             	cmp    edx,0x4
c0013d10:	75 f0                	jne    c0013d02 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013d12:	83 ec 0c             	sub    esp,0xc
c0013d15:	68 ec 75 02 c0       	push   0xc00275ec
c0013d1a:	e8 a4 4c 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0013d1f:	83 c4 10             	add    esp,0x10
c0013d22:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013d27:	5a                   	pop    edx
c0013d28:	5b                   	pop    ebx
c0013d29:	5e                   	pop    esi
c0013d2a:	c3                   	ret    
c0013d2b:	83 ec 0c             	sub    esp,0xc
c0013d2e:	56                   	push   esi
c0013d2f:	e8 ce fb ff ff       	call   c0013902 <Device::getName()>
c0013d34:	83 c4 10             	add    esp,0x10
c0013d37:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013d3a:	75 ba                	jne    c0013cf6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d3c:	83 fb 0f             	cmp    ebx,0xf
c0013d3f:	7f 29                	jg     c0013d6a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013d41:	0f b6 9b 40 97 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd68c0]
c0013d48:	eb ac                	jmp    c0013cf6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d4a:	8d 04 82             	lea    eax,[edx+eax*4]
c0013d4d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d51:	8d 04 86             	lea    eax,[esi+eax*4]
c0013d54:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013d5a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d5e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013d64:	89 d8                	mov    eax,ebx
c0013d66:	5a                   	pop    edx
c0013d67:	5b                   	pop    ebx
c0013d68:	5e                   	pop    esi
c0013d69:	c3                   	ret    
c0013d6a:	83 ec 0c             	sub    esp,0xc
c0013d6d:	68 b4 75 02 c0       	push   0xc00275b4
c0013d72:	e8 4c 4c 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0013d77:	83 c4 10             	add    esp,0x10
c0013d7a:	e9 77 ff ff ff       	jmp    c0013cf6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d7f:	90                   	nop

c0013d80 <InterruptController::clearAllHandlers(int, bool)>:
c0013d80:	56                   	push   esi
c0013d81:	53                   	push   ebx
c0013d82:	52                   	push   edx
c0013d83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d8b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013d90:	75 61                	jne    c0013df3 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013d92:	8d 46 20             	lea    eax,[esi+0x20]
c0013d95:	c1 e6 04             	shl    esi,0x4
c0013d98:	c1 e0 04             	shl    eax,0x4
c0013d9b:	01 de                	add    esi,ebx
c0013d9d:	01 d8                	add    eax,ebx
c0013d9f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013da9:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013db3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013dbd:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013dc7:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013dd1:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013ddb:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013de5:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013def:	58                   	pop    eax
c0013df0:	5b                   	pop    ebx
c0013df1:	5e                   	pop    esi
c0013df2:	c3                   	ret    
c0013df3:	83 ec 0c             	sub    esp,0xc
c0013df6:	53                   	push   ebx
c0013df7:	e8 06 fb ff ff       	call   c0013902 <Device::getName()>
c0013dfc:	83 c4 10             	add    esp,0x10
c0013dff:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e02:	75 8e                	jne    c0013d92 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e04:	83 fe 0f             	cmp    esi,0xf
c0013e07:	7f 09                	jg     c0013e12 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013e09:	0f b6 b6 40 97 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd68c0]
c0013e10:	eb 80                	jmp    c0013d92 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e12:	83 ec 0c             	sub    esp,0xc
c0013e15:	68 28 76 02 c0       	push   0xc0027628
c0013e1a:	e8 a4 4b 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0013e1f:	83 c4 10             	add    esp,0x10
c0013e22:	e9 6b ff ff ff       	jmp    c0013d92 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e27:	90                   	nop

c0013e28 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013e28:	56                   	push   esi
c0013e29:	53                   	push   ebx
c0013e2a:	52                   	push   edx
c0013e2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e2f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e33:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013e38:	75 3a                	jne    c0013e74 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013e3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e3e:	8d 50 20             	lea    edx,[eax+0x20]
c0013e41:	c1 e2 04             	shl    edx,0x4
c0013e44:	8d 04 16             	lea    eax,[esi+edx*1]
c0013e47:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013e4b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013e51:	74 0b                	je     c0013e5e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013e53:	83 c0 04             	add    eax,0x4
c0013e56:	39 d0                	cmp    eax,edx
c0013e58:	75 f1                	jne    c0013e4b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013e5a:	58                   	pop    eax
c0013e5b:	5b                   	pop    ebx
c0013e5c:	5e                   	pop    esi
c0013e5d:	c3                   	ret    
c0013e5e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013e68:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013e72:	eb df                	jmp    c0013e53 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013e74:	83 ec 0c             	sub    esp,0xc
c0013e77:	56                   	push   esi
c0013e78:	e8 85 fa ff ff       	call   c0013902 <Device::getName()>
c0013e7d:	83 c4 10             	add    esp,0x10
c0013e80:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e83:	75 b5                	jne    c0013e3a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013e85:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013e8a:	7f 11                	jg     c0013e9d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013e8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e90:	0f b6 80 40 97 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd68c0]
c0013e97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e9b:	eb 9d                	jmp    c0013e3a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013e9d:	83 ec 0c             	sub    esp,0xc
c0013ea0:	68 28 76 02 c0       	push   0xc0027628
c0013ea5:	e8 19 4b 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0013eaa:	83 c4 10             	add    esp,0x10
c0013ead:	eb 8b                	jmp    c0013e3a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013eaf <nmiHandler(regs*, void*)>:
c0013eaf:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0013eb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013eb8:	e9 ad a9 ff ff       	jmp    c000e86a <Computer::handleNMI()>

c0013ebd <int_handler>:
c0013ebd:	55                   	push   ebp
c0013ebe:	57                   	push   edi
c0013ebf:	56                   	push   esi
c0013ec0:	53                   	push   ebx
c0013ec1:	83 ec 0c             	sub    esp,0xc
c0013ec4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013ec8:	80 3d 74 af 02 c0 00 	cmp    BYTE PTR ds:0xc002af74,0x0
c0013ecf:	74 0b                	je     c0013edc <int_handler+0x1f>
c0013ed1:	fa                   	cli    
c0013ed2:	f4                   	hlt    
c0013ed3:	80 3d 74 af 02 c0 00 	cmp    BYTE PTR ds:0xc002af74,0x0
c0013eda:	75 f5                	jne    c0013ed1 <int_handler+0x14>
c0013edc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0013ee1:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013ee4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013eea:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013ef0:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013ef3:	83 f8 17             	cmp    eax,0x17
c0013ef6:	77 13                	ja     c0013f0b <int_handler+0x4e>
c0013ef8:	83 ec 08             	sub    esp,0x8
c0013efb:	8b 17                	mov    edx,DWORD PTR [edi]
c0013efd:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f00:	0f b6 c0             	movzx  eax,al
c0013f03:	50                   	push   eax
c0013f04:	57                   	push   edi
c0013f05:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013f08:	83 c4 10             	add    esp,0x10
c0013f0b:	83 c3 15             	add    ebx,0x15
c0013f0e:	c1 e3 04             	shl    ebx,0x4
c0013f11:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013f15:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013f1c:	31 db                	xor    ebx,ebx
c0013f1e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013f22:	85 c0                	test   eax,eax
c0013f24:	74 13                	je     c0013f39 <int_handler+0x7c>
c0013f26:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013f29:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013f2d:	74 1c                	je     c0013f4b <int_handler+0x8e>
c0013f2f:	83 ec 08             	sub    esp,0x8
c0013f32:	52                   	push   edx
c0013f33:	56                   	push   esi
c0013f34:	ff d0                	call   eax
c0013f36:	83 c4 10             	add    esp,0x10
c0013f39:	43                   	inc    ebx
c0013f3a:	83 fb 04             	cmp    ebx,0x4
c0013f3d:	75 df                	jne    c0013f1e <int_handler+0x61>
c0013f3f:	83 c4 0c             	add    esp,0xc
c0013f42:	31 c0                	xor    eax,eax
c0013f44:	5b                   	pop    ebx
c0013f45:	31 d2                	xor    edx,edx
c0013f47:	5e                   	pop    esi
c0013f48:	5f                   	pop    edi
c0013f49:	5d                   	pop    ebp
c0013f4a:	c3                   	ret    
c0013f4b:	83 ec 08             	sub    esp,0x8
c0013f4e:	52                   	push   edx
c0013f4f:	56                   	push   esi
c0013f50:	ff d0                	call   eax
c0013f52:	83 c4 10             	add    esp,0x10
c0013f55:	83 c4 0c             	add    esp,0xc
c0013f58:	5b                   	pop    ebx
c0013f59:	5e                   	pop    esi
c0013f5a:	5f                   	pop    edi
c0013f5b:	5d                   	pop    ebp
c0013f5c:	c3                   	ret    
c0013f5d:	90                   	nop

c0013f5e <InterruptController::InterruptController(char const*)>:
c0013f5e:	83 ec 1c             	sub    esp,0x1c
c0013f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f65:	83 ec 08             	sub    esp,0x8
c0013f68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f6c:	50                   	push   eax
c0013f6d:	e8 9e f8 ff ff       	call   c0013810 <Device::Device(char const*)>
c0013f72:	83 c4 10             	add    esp,0x10
c0013f75:	ba 5c 78 02 c0       	mov    edx,0xc002785c
c0013f7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f7e:	89 10                	mov    DWORD PTR [eax],edx
c0013f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f84:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013f8e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013f96:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0013f9e:	7f 5e                	jg     c0013ffe <InterruptController::InterruptController(char const*)+0xa0>
c0013fa0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013fa8:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0013fad:	7f 49                	jg     c0013ff8 <InterruptController::InterruptController(char const*)+0x9a>
c0013faf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013fb7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013fbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013fc2:	01 ca                	add    edx,ecx
c0013fc4:	83 c2 54             	add    edx,0x54
c0013fc7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0013fcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013fd7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013fde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013fe2:	01 ca                	add    edx,ecx
c0013fe4:	81 c2 54 04 00 00    	add    edx,0x454
c0013fea:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0013ff2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013ff6:	eb b0                	jmp    c0013fa8 <InterruptController::InterruptController(char const*)+0x4a>
c0013ff8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013ffc:	eb 98                	jmp    c0013f96 <InterruptController::InterruptController(char const*)+0x38>
c0013ffe:	90                   	nop
c0013fff:	83 c4 1c             	add    esp,0x1c
c0014002:	c3                   	ret    
c0014003:	90                   	nop

c0014004 <InterruptController::~InterruptController()>:
c0014004:	83 ec 0c             	sub    esp,0xc
c0014007:	ba 5c 78 02 c0       	mov    edx,0xc002785c
c001400c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014010:	89 10                	mov    DWORD PTR [eax],edx
c0014012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014016:	83 ec 0c             	sub    esp,0xc
c0014019:	50                   	push   eax
c001401a:	e8 d3 f4 ff ff       	call   c00134f2 <Device::~Device()>
c001401f:	83 c4 10             	add    esp,0x10
c0014022:	90                   	nop
c0014023:	83 c4 0c             	add    esp,0xc
c0014026:	c3                   	ret    
c0014027:	90                   	nop

c0014028 <InterruptController::~InterruptController()>:
c0014028:	83 ec 0c             	sub    esp,0xc
c001402b:	83 ec 0c             	sub    esp,0xc
c001402e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014032:	e8 cd ff ff ff       	call   c0014004 <InterruptController::~InterruptController()>
c0014037:	83 c4 10             	add    esp,0x10
c001403a:	83 ec 08             	sub    esp,0x8
c001403d:	68 58 21 00 00       	push   0x2158
c0014042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014046:	e8 1a e1 ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c001404b:	83 c4 10             	add    esp,0x10
c001404e:	83 c4 0c             	add    esp,0xc
c0014051:	c3                   	ret    

c0014052 <displayDebugInfo(regs*)>:
c0014052:	55                   	push   ebp
c0014053:	57                   	push   edi
c0014054:	56                   	push   esi
c0014055:	53                   	push   ebx
c0014056:	83 ec 24             	sub    esp,0x24
c0014059:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001405d:	0f 20 c2             	mov    edx,cr0
c0014060:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014064:	0f 20 d7             	mov    edi,cr2
c0014067:	0f 20 de             	mov    esi,cr3
c001406a:	0f 20 e5             	mov    ebp,cr4
c001406d:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014070:	68 62 76 02 c0       	push   0xc0027662
c0014075:	e8 cb e1 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001407a:	58                   	pop    eax
c001407b:	5a                   	pop    edx
c001407c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001407f:	68 6d 76 02 c0       	push   0xc002766d
c0014084:	e8 bc e1 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0014089:	59                   	pop    ecx
c001408a:	58                   	pop    eax
c001408b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001408e:	68 78 76 02 c0       	push   0xc0027678
c0014093:	e8 ad e1 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0014098:	58                   	pop    eax
c0014099:	5a                   	pop    edx
c001409a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001409d:	68 83 76 02 c0       	push   0xc0027683
c00140a2:	e8 9e e1 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00140a7:	59                   	pop    ecx
c00140a8:	58                   	pop    eax
c00140a9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00140ac:	68 8e 76 02 c0       	push   0xc002768e
c00140b1:	e8 8f e1 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00140b6:	58                   	pop    eax
c00140b7:	5a                   	pop    edx
c00140b8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00140bb:	68 99 76 02 c0       	push   0xc0027699
c00140c0:	e8 80 e1 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00140c5:	59                   	pop    ecx
c00140c6:	58                   	pop    eax
c00140c7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00140ca:	68 a4 76 02 c0       	push   0xc00276a4
c00140cf:	e8 71 e1 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00140d4:	58                   	pop    eax
c00140d5:	5a                   	pop    edx
c00140d6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00140d9:	68 af 76 02 c0       	push   0xc00276af
c00140de:	e8 62 e1 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00140e3:	59                   	pop    ecx
c00140e4:	58                   	pop    eax
c00140e5:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00140e8:	68 ba 76 02 c0       	push   0xc00276ba
c00140ed:	e8 53 e1 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00140f2:	58                   	pop    eax
c00140f3:	5a                   	pop    edx
c00140f4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00140f7:	68 c9 76 02 c0       	push   0xc00276c9
c00140fc:	e8 44 e1 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0014101:	59                   	pop    ecx
c0014102:	58                   	pop    eax
c0014103:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014106:	68 d4 76 02 c0       	push   0xc00276d4
c001410b:	e8 35 e1 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0014110:	58                   	pop    eax
c0014111:	5a                   	pop    edx
c0014112:	57                   	push   edi
c0014113:	68 df 76 02 c0       	push   0xc00276df
c0014118:	e8 28 e1 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001411d:	59                   	pop    ecx
c001411e:	58                   	pop    eax
c001411f:	56                   	push   esi
c0014120:	68 ea 76 02 c0       	push   0xc00276ea
c0014125:	e8 1b e1 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001412a:	58                   	pop    eax
c001412b:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014130:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014136:	e8 18 c3 ff ff       	call   c0010453 <setActiveTerminal(VgaText*)>
c001413b:	58                   	pop    eax
c001413c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001413f:	5a                   	pop    edx
c0014140:	c1 e0 05             	shl    eax,0x5
c0014143:	05 a0 94 02 c0       	add    eax,0xc00294a0
c0014148:	50                   	push   eax
c0014149:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001414e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014154:	e8 19 c7 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0014159:	59                   	pop    ecx
c001415a:	58                   	pop    eax
c001415b:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014160:	68 f5 76 02 c0       	push   0xc00276f5
c0014165:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001416b:	e8 02 c7 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0014170:	58                   	pop    eax
c0014171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014176:	5a                   	pop    edx
c0014177:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001417a:	83 c0 0c             	add    eax,0xc
c001417d:	50                   	push   eax
c001417e:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014183:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014189:	e8 e4 c6 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c001418e:	59                   	pop    ecx
c001418f:	58                   	pop    eax
c0014190:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014195:	68 fe 76 02 c0       	push   0xc00276fe
c001419a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141a0:	e8 cd c6 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c00141a5:	58                   	pop    eax
c00141a6:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00141ab:	5a                   	pop    edx
c00141ac:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00141af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141b5:	e8 de c6 ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c00141ba:	59                   	pop    ecx
c00141bb:	58                   	pop    eax
c00141bc:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00141c1:	68 06 77 02 c0       	push   0xc0027706
c00141c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141cc:	e8 a1 c6 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c00141d1:	58                   	pop    eax
c00141d2:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00141d7:	5a                   	pop    edx
c00141d8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00141db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141e1:	e8 b2 c6 ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c00141e6:	59                   	pop    ecx
c00141e7:	58                   	pop    eax
c00141e8:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00141ed:	68 0e 77 02 c0       	push   0xc002770e
c00141f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141f8:	e8 75 c6 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c00141fd:	58                   	pop    eax
c00141fe:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014203:	5a                   	pop    edx
c0014204:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014207:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001420d:	e8 86 c6 ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c0014212:	59                   	pop    ecx
c0014213:	58                   	pop    eax
c0014214:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014219:	68 16 77 02 c0       	push   0xc0027716
c001421e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014224:	e8 49 c6 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0014229:	58                   	pop    eax
c001422a:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001422f:	5a                   	pop    edx
c0014230:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014233:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014239:	e8 5a c6 ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c001423e:	59                   	pop    ecx
c001423f:	58                   	pop    eax
c0014240:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014245:	68 1e 77 02 c0       	push   0xc002771e
c001424a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014250:	e8 1d c6 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0014255:	58                   	pop    eax
c0014256:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001425b:	5a                   	pop    edx
c001425c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001425f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014265:	e8 2e c6 ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c001426a:	59                   	pop    ecx
c001426b:	58                   	pop    eax
c001426c:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014271:	68 26 77 02 c0       	push   0xc0027726
c0014276:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001427c:	e8 f1 c5 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0014281:	58                   	pop    eax
c0014282:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014287:	5a                   	pop    edx
c0014288:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001428b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014291:	e8 02 c6 ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c0014296:	59                   	pop    ecx
c0014297:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001429c:	5b                   	pop    ebx
c001429d:	68 2e 77 02 c0       	push   0xc002772e
c00142a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142a8:	e8 c5 c5 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c00142ad:	58                   	pop    eax
c00142ae:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00142b3:	5a                   	pop    edx
c00142b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00142b8:	52                   	push   edx
c00142b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142bf:	e8 d4 c5 ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c00142c4:	59                   	pop    ecx
c00142c5:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00142ca:	5b                   	pop    ebx
c00142cb:	68 37 77 02 c0       	push   0xc0027737
c00142d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142d6:	e8 97 c5 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c00142db:	58                   	pop    eax
c00142dc:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00142e1:	5a                   	pop    edx
c00142e2:	57                   	push   edi
c00142e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142e9:	e8 aa c5 ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c00142ee:	59                   	pop    ecx
c00142ef:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00142f4:	5b                   	pop    ebx
c00142f5:	68 3f 77 02 c0       	push   0xc002773f
c00142fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014300:	e8 6d c5 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0014305:	5f                   	pop    edi
c0014306:	58                   	pop    eax
c0014307:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001430c:	56                   	push   esi
c001430d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014313:	e8 80 c5 ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c0014318:	58                   	pop    eax
c0014319:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001431e:	5a                   	pop    edx
c001431f:	68 47 77 02 c0       	push   0xc0027747
c0014324:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001432a:	e8 43 c5 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c001432f:	59                   	pop    ecx
c0014330:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014335:	5b                   	pop    ebx
c0014336:	55                   	push   ebp
c0014337:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001433d:	e8 56 c5 ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c0014342:	5e                   	pop    esi
c0014343:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014348:	5f                   	pop    edi
c0014349:	68 4f 77 02 c0       	push   0xc002774f
c001434e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014354:	e8 19 c5 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0014359:	0f 21 c0             	mov    eax,db0
c001435c:	5d                   	pop    ebp
c001435d:	5a                   	pop    edx
c001435e:	50                   	push   eax
c001435f:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014364:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001436a:	e8 29 c5 ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c001436f:	59                   	pop    ecx
c0014370:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014375:	5b                   	pop    ebx
c0014376:	68 58 77 02 c0       	push   0xc0027758
c001437b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014381:	e8 ec c4 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0014386:	0f 21 c8             	mov    eax,db1
c0014389:	5e                   	pop    esi
c001438a:	5f                   	pop    edi
c001438b:	50                   	push   eax
c001438c:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014391:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014397:	e8 fc c4 ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c001439c:	5d                   	pop    ebp
c001439d:	58                   	pop    eax
c001439e:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00143a3:	68 60 77 02 c0       	push   0xc0027760
c00143a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143ae:	e8 bf c4 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c00143b3:	0f 21 d0             	mov    eax,db2
c00143b6:	5a                   	pop    edx
c00143b7:	59                   	pop    ecx
c00143b8:	50                   	push   eax
c00143b9:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00143be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143c4:	e8 cf c4 ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c00143c9:	5b                   	pop    ebx
c00143ca:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00143cf:	5e                   	pop    esi
c00143d0:	68 68 77 02 c0       	push   0xc0027768
c00143d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143db:	e8 92 c4 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c00143e0:	0f 21 d8             	mov    eax,db3
c00143e3:	5f                   	pop    edi
c00143e4:	5d                   	pop    ebp
c00143e5:	50                   	push   eax
c00143e6:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00143eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143f1:	e8 a2 c4 ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c00143f6:	58                   	pop    eax
c00143f7:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00143fc:	5a                   	pop    edx
c00143fd:	68 70 77 02 c0       	push   0xc0027770
c0014402:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014408:	e8 65 c4 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c001440d:	0f 21 f0             	mov    eax,db6
c0014410:	59                   	pop    ecx
c0014411:	5b                   	pop    ebx
c0014412:	50                   	push   eax
c0014413:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014418:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001441e:	e8 75 c4 ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c0014423:	5e                   	pop    esi
c0014424:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014429:	5f                   	pop    edi
c001442a:	68 78 77 02 c0       	push   0xc0027778
c001442f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014435:	e8 38 c4 ff ff       	call   c0010872 <VgaText::puts(char const*)>
c001443a:	0f 21 f8             	mov    eax,db7
c001443d:	5d                   	pop    ebp
c001443e:	5a                   	pop    edx
c001443f:	50                   	push   eax
c0014440:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014445:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001444b:	e8 48 c4 ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c0014450:	fa                   	cli    
c0014451:	f4                   	hlt    
c0014452:	83 c4 10             	add    esp,0x10
c0014455:	eb fe                	jmp    c0014455 <displayDebugInfo(regs*)+0x403>

c0014457 <x87EmulHandler(regs*, void*)>:
c0014457:	53                   	push   ebx
c0014458:	83 ec 14             	sub    esp,0x14
c001445b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001445f:	53                   	push   ebx
c0014460:	e8 ae 8d 00 00       	call   c001d213 <Vm::x87Handler(regs*)>
c0014465:	83 c4 10             	add    esp,0x10
c0014468:	84 c0                	test   al,al
c001446a:	74 05                	je     c0014471 <x87EmulHandler(regs*, void*)+0x1a>
c001446c:	83 c4 08             	add    esp,0x8
c001446f:	5b                   	pop    ebx
c0014470:	c3                   	ret    
c0014471:	83 ec 0c             	sub    esp,0xc
c0014474:	68 80 77 02 c0       	push   0xc0027780
c0014479:	e8 c7 dd ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001447e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014481:	e8 cc fb ff ff       	call   c0014052 <displayDebugInfo(regs*)>

c0014486 <gpFault(regs*, void*)>:
c0014486:	53                   	push   ebx
c0014487:	83 ec 14             	sub    esp,0x14
c001448a:	c7 05 f0 a5 02 c0 87 c7 01 c0 	mov    DWORD PTR ds:0xc002a5f0,0xc001c787
c0014494:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014498:	53                   	push   ebx
c0014499:	e8 e9 82 00 00       	call   c001c787 <Vm::faultHandler(regs*)>
c001449e:	83 c4 10             	add    esp,0x10
c00144a1:	84 c0                	test   al,al
c00144a3:	74 05                	je     c00144aa <gpFault(regs*, void*)+0x24>
c00144a5:	83 c4 08             	add    esp,0x8
c00144a8:	5b                   	pop    ebx
c00144a9:	c3                   	ret    
c00144aa:	83 ec 0c             	sub    esp,0xc
c00144ad:	68 96 77 02 c0       	push   0xc0027796
c00144b2:	e8 8e dd ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00144b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144ba:	e8 93 fb ff ff       	call   c0014052 <displayDebugInfo(regs*)>

c00144bf <pgFault(regs*, void*)>:
c00144bf:	83 ec 18             	sub    esp,0x18
c00144c2:	68 b1 77 02 c0       	push   0xc00277b1
c00144c7:	e8 79 dd ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00144cc:	58                   	pop    eax
c00144cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144d1:	e8 7c fb ff ff       	call   c0014052 <displayDebugInfo(regs*)>

c00144d6 <otherISRHandler(regs*, void*)>:
c00144d6:	53                   	push   ebx
c00144d7:	83 ec 0c             	sub    esp,0xc
c00144da:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00144de:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00144e1:	50                   	push   eax
c00144e2:	50                   	push   eax
c00144e3:	68 be 77 02 c0       	push   0xc00277be
c00144e8:	e8 58 dd ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00144ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144f0:	e8 5d fb ff ff       	call   c0014052 <displayDebugInfo(regs*)>

c00144f5 <opcodeFault(regs*, void*)>:
c00144f5:	55                   	push   ebp
c00144f6:	89 e5                	mov    ebp,esp
c00144f8:	56                   	push   esi
c00144f9:	53                   	push   ebx
c00144fa:	83 ec 40             	sub    esp,0x40
c00144fd:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0014502:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014508:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001450e:	84 c0                	test   al,al
c0014510:	74 24                	je     c0014536 <opcodeFault(regs*, void*)+0x41>
c0014512:	83 ec 0c             	sub    esp,0xc
c0014515:	68 dc 77 02 c0       	push   0xc00277dc
c001451a:	e8 26 dd ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001451f:	83 c4 10             	add    esp,0x10
c0014522:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014525:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014528:	8d 50 19             	lea    edx,[eax+0x19]
c001452b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001452e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014531:	e9 77 05 00 00       	jmp    c0014aad <opcodeFault(regs*, void*)+0x5b8>
c0014536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014539:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001453c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001453f:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014543:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001454a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001454d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014550:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014553:	8a 00                	mov    al,BYTE PTR [eax]
c0014555:	3c f0                	cmp    al,0xf0
c0014557:	75 17                	jne    c0014570 <opcodeFault(regs*, void*)+0x7b>
c0014559:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001455c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001455f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014562:	8d 50 01             	lea    edx,[eax+0x1]
c0014565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014568:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001456b:	e9 da 00 00 00       	jmp    c001464a <opcodeFault(regs*, void*)+0x155>
c0014570:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014573:	8a 00                	mov    al,BYTE PTR [eax]
c0014575:	3c f2                	cmp    al,0xf2
c0014577:	74 09                	je     c0014582 <opcodeFault(regs*, void*)+0x8d>
c0014579:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001457c:	8a 00                	mov    al,BYTE PTR [eax]
c001457e:	3c f3                	cmp    al,0xf3
c0014580:	75 1b                	jne    c001459d <opcodeFault(regs*, void*)+0xa8>
c0014582:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014586:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001458c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001458f:	8d 50 01             	lea    edx,[eax+0x1]
c0014592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014595:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014598:	e9 ad 00 00 00       	jmp    c001464a <opcodeFault(regs*, void*)+0x155>
c001459d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145a0:	8a 00                	mov    al,BYTE PTR [eax]
c00145a2:	3c 66                	cmp    al,0x66
c00145a4:	75 1f                	jne    c00145c5 <opcodeFault(regs*, void*)+0xd0>
c00145a6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145aa:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00145ae:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145b7:	8d 50 01             	lea    edx,[eax+0x1]
c00145ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145bd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145c0:	e9 85 00 00 00       	jmp    c001464a <opcodeFault(regs*, void*)+0x155>
c00145c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145c8:	8a 00                	mov    al,BYTE PTR [eax]
c00145ca:	3c 67                	cmp    al,0x67
c00145cc:	75 18                	jne    c00145e6 <opcodeFault(regs*, void*)+0xf1>
c00145ce:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145d2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145d8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145db:	8d 50 01             	lea    edx,[eax+0x1]
c00145de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145e1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145e4:	eb 64                	jmp    c001464a <opcodeFault(regs*, void*)+0x155>
c00145e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145e9:	8a 00                	mov    al,BYTE PTR [eax]
c00145eb:	3c 2e                	cmp    al,0x2e
c00145ed:	74 09                	je     c00145f8 <opcodeFault(regs*, void*)+0x103>
c00145ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145f2:	8a 00                	mov    al,BYTE PTR [eax]
c00145f4:	3c 3e                	cmp    al,0x3e
c00145f6:	75 18                	jne    c0014610 <opcodeFault(regs*, void*)+0x11b>
c00145f8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145fc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014602:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014605:	8d 50 01             	lea    edx,[eax+0x1]
c0014608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001460b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001460e:	eb 3a                	jmp    c001464a <opcodeFault(regs*, void*)+0x155>
c0014610:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014613:	8a 00                	mov    al,BYTE PTR [eax]
c0014615:	3c 36                	cmp    al,0x36
c0014617:	74 1b                	je     c0014634 <opcodeFault(regs*, void*)+0x13f>
c0014619:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001461c:	8a 00                	mov    al,BYTE PTR [eax]
c001461e:	3c 26                	cmp    al,0x26
c0014620:	74 12                	je     c0014634 <opcodeFault(regs*, void*)+0x13f>
c0014622:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014625:	8a 00                	mov    al,BYTE PTR [eax]
c0014627:	3c 64                	cmp    al,0x64
c0014629:	74 09                	je     c0014634 <opcodeFault(regs*, void*)+0x13f>
c001462b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001462e:	8a 00                	mov    al,BYTE PTR [eax]
c0014630:	3c 65                	cmp    al,0x65
c0014632:	75 16                	jne    c001464a <opcodeFault(regs*, void*)+0x155>
c0014634:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014638:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001463b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001463e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014641:	8d 50 01             	lea    edx,[eax+0x1]
c0014644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014647:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001464a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001464d:	8a 00                	mov    al,BYTE PTR [eax]
c001464f:	3c 0f                	cmp    al,0xf
c0014651:	0f 85 ad 00 00 00    	jne    c0014704 <opcodeFault(regs*, void*)+0x20f>
c0014657:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001465a:	40                   	inc    eax
c001465b:	8a 00                	mov    al,BYTE PTR [eax]
c001465d:	3c c2                	cmp    al,0xc2
c001465f:	74 0e                	je     c001466f <opcodeFault(regs*, void*)+0x17a>
c0014661:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014664:	40                   	inc    eax
c0014665:	8a 00                	mov    al,BYTE PTR [eax]
c0014667:	3c c3                	cmp    al,0xc3
c0014669:	0f 85 95 00 00 00    	jne    c0014704 <opcodeFault(regs*, void*)+0x20f>
c001466f:	83 ec 0c             	sub    esp,0xc
c0014672:	68 ff 77 02 c0       	push   0xc00277ff
c0014677:	e8 c9 db ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001467c:	83 c4 10             	add    esp,0x10
c001467f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014682:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014685:	8d 50 01             	lea    edx,[eax+0x1]
c0014688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001468b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001468e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014691:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014694:	8a 00                	mov    al,BYTE PTR [eax]
c0014696:	8d 50 fe             	lea    edx,[eax-0x2]
c0014699:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001469c:	88 10                	mov    BYTE PTR [eax],dl
c001469e:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00146a1:	50                   	push   eax
c00146a2:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00146a5:	50                   	push   eax
c00146a6:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00146a9:	50                   	push   eax
c00146aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00146ad:	e8 16 41 00 00       	call   c00187c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00146b2:	83 c4 10             	add    esp,0x10
c00146b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146bb:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00146be:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00146c1:	01 d0                	add    eax,edx
c00146c3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00146c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146cc:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00146cf:	48                   	dec    eax
c00146d0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00146d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146d6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00146d9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00146dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146df:	83 ec 04             	sub    esp,0x4
c00146e2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00146e5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00146e8:	50                   	push   eax
c00146e9:	e8 7b ba fe ff       	call   c0000169 <voodooXADD>
c00146ee:	83 c4 10             	add    esp,0x10
c00146f1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00146f4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00146f7:	01 c2                	add    edx,eax
c00146f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146fc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00146ff:	e9 a9 03 00 00       	jmp    c0014aad <opcodeFault(regs*, void*)+0x5b8>
c0014704:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014707:	8a 00                	mov    al,BYTE PTR [eax]
c0014709:	3c 0f                	cmp    al,0xf
c001470b:	0f 85 8b 01 00 00    	jne    c001489c <opcodeFault(regs*, void*)+0x3a7>
c0014711:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014714:	40                   	inc    eax
c0014715:	8a 00                	mov    al,BYTE PTR [eax]
c0014717:	3c c7                	cmp    al,0xc7
c0014719:	0f 86 7d 01 00 00    	jbe    c001489c <opcodeFault(regs*, void*)+0x3a7>
c001471f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014722:	40                   	inc    eax
c0014723:	8a 00                	mov    al,BYTE PTR [eax]
c0014725:	3c cf                	cmp    al,0xcf
c0014727:	0f 87 6f 01 00 00    	ja     c001489c <opcodeFault(regs*, void*)+0x3a7>
c001472d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014730:	40                   	inc    eax
c0014731:	8a 00                	mov    al,BYTE PTR [eax]
c0014733:	83 c0 38             	add    eax,0x38
c0014736:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014739:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001473d:	75 0b                	jne    c001474a <opcodeFault(regs*, void*)+0x255>
c001473f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014742:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014745:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014748:	eb 75                	jmp    c00147bf <opcodeFault(regs*, void*)+0x2ca>
c001474a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001474e:	75 0b                	jne    c001475b <opcodeFault(regs*, void*)+0x266>
c0014750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014753:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014756:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014759:	eb 64                	jmp    c00147bf <opcodeFault(regs*, void*)+0x2ca>
c001475b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001475f:	75 0b                	jne    c001476c <opcodeFault(regs*, void*)+0x277>
c0014761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014764:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014767:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001476a:	eb 53                	jmp    c00147bf <opcodeFault(regs*, void*)+0x2ca>
c001476c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014770:	75 0b                	jne    c001477d <opcodeFault(regs*, void*)+0x288>
c0014772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014775:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014778:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001477b:	eb 42                	jmp    c00147bf <opcodeFault(regs*, void*)+0x2ca>
c001477d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014781:	75 0b                	jne    c001478e <opcodeFault(regs*, void*)+0x299>
c0014783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014786:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014789:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001478c:	eb 31                	jmp    c00147bf <opcodeFault(regs*, void*)+0x2ca>
c001478e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014792:	75 0b                	jne    c001479f <opcodeFault(regs*, void*)+0x2aa>
c0014794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014797:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001479a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001479d:	eb 20                	jmp    c00147bf <opcodeFault(regs*, void*)+0x2ca>
c001479f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00147a3:	75 0b                	jne    c00147b0 <opcodeFault(regs*, void*)+0x2bb>
c00147a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147a8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00147ab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147ae:	eb 0f                	jmp    c00147bf <opcodeFault(regs*, void*)+0x2ca>
c00147b0:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00147b4:	75 09                	jne    c00147bf <opcodeFault(regs*, void*)+0x2ca>
c00147b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00147bc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147bf:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00147c3:	74 10                	je     c00147d5 <opcodeFault(regs*, void*)+0x2e0>
c00147c5:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00147cc:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00147d3:	eb 2d                	jmp    c0014802 <opcodeFault(regs*, void*)+0x30d>
c00147d5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00147d8:	c1 e0 18             	shl    eax,0x18
c00147db:	89 c2                	mov    edx,eax
c00147dd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00147e0:	c1 e0 08             	shl    eax,0x8
c00147e3:	25 00 00 ff 00       	and    eax,0xff0000
c00147e8:	09 c2                	or     edx,eax
c00147ea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00147ed:	c1 e8 08             	shr    eax,0x8
c00147f0:	25 00 ff 00 00       	and    eax,0xff00
c00147f5:	09 c2                	or     edx,eax
c00147f7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00147fa:	c1 e8 18             	shr    eax,0x18
c00147fd:	09 d0                	or     eax,edx
c00147ff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014802:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014806:	75 0b                	jne    c0014813 <opcodeFault(regs*, void*)+0x31e>
c0014808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001480b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001480e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014811:	eb 75                	jmp    c0014888 <opcodeFault(regs*, void*)+0x393>
c0014813:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014817:	75 0b                	jne    c0014824 <opcodeFault(regs*, void*)+0x32f>
c0014819:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001481c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001481f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014822:	eb 64                	jmp    c0014888 <opcodeFault(regs*, void*)+0x393>
c0014824:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014828:	75 0b                	jne    c0014835 <opcodeFault(regs*, void*)+0x340>
c001482a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001482d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014830:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014833:	eb 53                	jmp    c0014888 <opcodeFault(regs*, void*)+0x393>
c0014835:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014839:	75 0b                	jne    c0014846 <opcodeFault(regs*, void*)+0x351>
c001483b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001483e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014841:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014844:	eb 42                	jmp    c0014888 <opcodeFault(regs*, void*)+0x393>
c0014846:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001484a:	75 0b                	jne    c0014857 <opcodeFault(regs*, void*)+0x362>
c001484c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001484f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014852:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014855:	eb 31                	jmp    c0014888 <opcodeFault(regs*, void*)+0x393>
c0014857:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001485b:	75 0b                	jne    c0014868 <opcodeFault(regs*, void*)+0x373>
c001485d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014860:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014863:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014866:	eb 20                	jmp    c0014888 <opcodeFault(regs*, void*)+0x393>
c0014868:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001486c:	75 0b                	jne    c0014879 <opcodeFault(regs*, void*)+0x384>
c001486e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014871:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014874:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014877:	eb 0f                	jmp    c0014888 <opcodeFault(regs*, void*)+0x393>
c0014879:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001487d:	75 09                	jne    c0014888 <opcodeFault(regs*, void*)+0x393>
c001487f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014882:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014885:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001488b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001488e:	8d 50 02             	lea    edx,[eax+0x2]
c0014891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014894:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014897:	e9 11 02 00 00       	jmp    c0014aad <opcodeFault(regs*, void*)+0x5b8>
c001489c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001489f:	8a 00                	mov    al,BYTE PTR [eax]
c00148a1:	3c 0f                	cmp    al,0xf
c00148a3:	0f 85 76 01 00 00    	jne    c0014a1f <opcodeFault(regs*, void*)+0x52a>
c00148a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00148ac:	40                   	inc    eax
c00148ad:	8a 00                	mov    al,BYTE PTR [eax]
c00148af:	3c c7                	cmp    al,0xc7
c00148b1:	0f 85 68 01 00 00    	jne    c0014a1f <opcodeFault(regs*, void*)+0x52a>
c00148b7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00148ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00148c0:	8d 50 01             	lea    edx,[eax+0x1]
c00148c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00148c9:	8d 45 ba             	lea    eax,[ebp-0x46]
c00148cc:	50                   	push   eax
c00148cd:	8d 45 bb             	lea    eax,[ebp-0x45]
c00148d0:	50                   	push   eax
c00148d1:	8d 45 bc             	lea    eax,[ebp-0x44]
c00148d4:	50                   	push   eax
c00148d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00148d8:	e8 eb 3e 00 00       	call   c00187c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00148dd:	83 c4 10             	add    esp,0x10
c00148e0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00148e3:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00148e6:	83 f0 01             	xor    eax,0x1
c00148e9:	84 c0                	test   al,al
c00148eb:	0f 84 2e 01 00 00    	je     c0014a1f <opcodeFault(regs*, void*)+0x52a>
c00148f1:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00148f4:	3c 01                	cmp    al,0x1
c00148f6:	0f 85 23 01 00 00    	jne    c0014a1f <opcodeFault(regs*, void*)+0x52a>
c00148fc:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00148ff:	83 f0 01             	xor    eax,0x1
c0014902:	84 c0                	test   al,al
c0014904:	0f 84 15 01 00 00    	je     c0014a1f <opcodeFault(regs*, void*)+0x52a>
c001490a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001490d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014910:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014913:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001491a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001491d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014920:	89 c2                	mov    edx,eax
c0014922:	b8 00 00 00 00       	mov    eax,0x0
c0014927:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001492a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001492d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014930:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014933:	ba 00 00 00 00       	mov    edx,0x0
c0014938:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001493b:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001493e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014941:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014944:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014947:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001494e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014951:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014954:	89 c2                	mov    edx,eax
c0014956:	b8 00 00 00 00       	mov    eax,0x0
c001495b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001495e:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014964:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014967:	ba 00 00 00 00       	mov    edx,0x0
c001496c:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001496f:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014972:	e8 95 6f 00 00       	call   c001b90c <lockScheduler()>
c0014977:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001497a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001497d:	8b 00                	mov    eax,DWORD PTR [eax]
c001497f:	89 c1                	mov    ecx,eax
c0014981:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014984:	89 cb                	mov    ebx,ecx
c0014986:	89 d0                	mov    eax,edx
c0014988:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001498b:	89 c6                	mov    esi,eax
c001498d:	89 f0                	mov    eax,esi
c001498f:	09 d8                	or     eax,ebx
c0014991:	85 c0                	test   eax,eax
c0014993:	75 21                	jne    c00149b6 <opcodeFault(regs*, void*)+0x4c1>
c0014995:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014998:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001499b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001499e:	89 01                	mov    DWORD PTR [ecx],eax
c00149a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00149a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149a9:	83 c8 40             	or     eax,0x40
c00149ac:	89 c2                	mov    edx,eax
c00149ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00149b4:	eb 3e                	jmp    c00149f4 <opcodeFault(regs*, void*)+0x4ff>
c00149b6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00149b9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00149bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00149be:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00149c1:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00149c4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00149c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ca:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00149cd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00149d0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00149d3:	89 d0                	mov    eax,edx
c00149d5:	31 d2                	xor    edx,edx
c00149d7:	89 c3                	mov    ebx,eax
c00149d9:	89 d6                	mov    esi,edx
c00149db:	89 da                	mov    edx,ebx
c00149dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149e0:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00149e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149e9:	83 e0 bf             	and    eax,0xffffffbf
c00149ec:	89 c2                	mov    edx,eax
c00149ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00149f4:	e8 15 6f 00 00       	call   c001b90e <unlockScheduler()>
c00149f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149fc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149ff:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014a02:	01 c2                	add    edx,eax
c0014a04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a07:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a0a:	83 ec 0c             	sub    esp,0xc
c0014a0d:	68 0e 78 02 c0       	push   0xc002780e
c0014a12:	e8 2e d8 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0014a17:	83 c4 10             	add    esp,0x10
c0014a1a:	e9 8e 00 00 00       	jmp    c0014aad <opcodeFault(regs*, void*)+0x5b8>
c0014a1f:	83 ec 0c             	sub    esp,0xc
c0014a22:	68 21 78 02 c0       	push   0xc0027821
c0014a27:	e8 19 d8 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0014a2c:	83 c4 10             	add    esp,0x10
c0014a2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a32:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a38:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a3b:	c1 e0 04             	shl    eax,0x4
c0014a3e:	01 d0                	add    eax,edx
c0014a40:	83 c0 03             	add    eax,0x3
c0014a43:	8a 00                	mov    al,BYTE PTR [eax]
c0014a45:	0f b6 d8             	movzx  ebx,al
c0014a48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a4b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a51:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a54:	c1 e0 04             	shl    eax,0x4
c0014a57:	01 d0                	add    eax,edx
c0014a59:	83 c0 02             	add    eax,0x2
c0014a5c:	8a 00                	mov    al,BYTE PTR [eax]
c0014a5e:	0f b6 c8             	movzx  ecx,al
c0014a61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a64:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a6a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a6d:	c1 e0 04             	shl    eax,0x4
c0014a70:	01 d0                	add    eax,edx
c0014a72:	40                   	inc    eax
c0014a73:	8a 00                	mov    al,BYTE PTR [eax]
c0014a75:	0f b6 d0             	movzx  edx,al
c0014a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a7b:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014a7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a81:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a84:	c1 e0 04             	shl    eax,0x4
c0014a87:	01 f0                	add    eax,esi
c0014a89:	8a 00                	mov    al,BYTE PTR [eax]
c0014a8b:	0f b6 c0             	movzx  eax,al
c0014a8e:	83 ec 0c             	sub    esp,0xc
c0014a91:	53                   	push   ebx
c0014a92:	51                   	push   ecx
c0014a93:	52                   	push   edx
c0014a94:	50                   	push   eax
c0014a95:	68 34 78 02 c0       	push   0xc0027834
c0014a9a:	e8 a6 d7 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0014a9f:	83 c4 20             	add    esp,0x20
c0014aa2:	83 ec 0c             	sub    esp,0xc
c0014aa5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014aa8:	e8 a5 f5 ff ff       	call   c0014052 <displayDebugInfo(regs*)>
c0014aad:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014ab0:	5b                   	pop    ebx
c0014ab1:	5e                   	pop    esi
c0014ab2:	5d                   	pop    ebp
c0014ab3:	c3                   	ret    

c0014ab4 <displayProgramFault(char const*)>:
c0014ab4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ab9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014abc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014ac2:	85 c0                	test   eax,eax
c0014ac4:	74 15                	je     c0014adb <displayProgramFault(char const*)+0x27>
c0014ac6:	83 ec 0c             	sub    esp,0xc
c0014ac9:	6a 04                	push   0x4
c0014acb:	6a 0f                	push   0xf
c0014acd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ad1:	50                   	push   eax
c0014ad2:	e8 5d ba ff ff       	call   c0010534 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014ad7:	83 c4 1c             	add    esp,0x1c
c0014ada:	c3                   	ret    
c0014adb:	c3                   	ret    

c0014adc <setupInterruptController()>:
c0014adc:	55                   	push   ebp
c0014add:	89 e5                	mov    ebp,esp
c0014adf:	53                   	push   ebx
c0014ae0:	83 ec 14             	sub    esp,0x14
c0014ae3:	b8 00 00 00 00       	mov    eax,0x0
c0014ae8:	85 c0                	test   eax,eax
c0014aea:	0f 95 c0             	setne  al
c0014aed:	84 c0                	test   al,al
c0014aef:	74 56                	je     c0014b47 <setupInterruptController()+0x6b>
c0014af1:	83 ec 0c             	sub    esp,0xc
c0014af4:	68 58 21 00 00       	push   0x2158
c0014af9:	e8 58 d6 ff ff       	call   c0012156 <operator new(unsigned long)>
c0014afe:	83 c4 10             	add    esp,0x10
c0014b01:	89 c3                	mov    ebx,eax
c0014b03:	83 ec 0c             	sub    esp,0xc
c0014b06:	53                   	push   ebx
c0014b07:	e8 e6 d8 00 00       	call   c00223f2 <APIC::APIC()>
c0014b0c:	83 c4 10             	add    esp,0x10
c0014b0f:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014b12:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014b15:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b18:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b1a:	83 c0 08             	add    eax,0x8
c0014b1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b1f:	6a 00                	push   0x0
c0014b21:	6a 00                	push   0x0
c0014b23:	6a 00                	push   0x0
c0014b25:	52                   	push   edx
c0014b26:	ff d0                	call   eax
c0014b28:	83 c4 10             	add    esp,0x10
c0014b2b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0014b30:	83 ec 08             	sub    esp,0x8
c0014b33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014b36:	50                   	push   eax
c0014b37:	e8 e4 ea ff ff       	call   c0013620 <Device::addChild(Device*)>
c0014b3c:	83 c4 10             	add    esp,0x10
c0014b3f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b42:	e9 48 03 00 00       	jmp    c0014e8f <setupInterruptController()+0x3b3>
c0014b47:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0014b4c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014b52:	83 e0 01             	and    eax,0x1
c0014b55:	84 c0                	test   al,al
c0014b57:	0f 95 c0             	setne  al
c0014b5a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014b5d:	83 ec 0c             	sub    esp,0xc
c0014b60:	68 58 21 00 00       	push   0x2158
c0014b65:	e8 ec d5 ff ff       	call   c0012156 <operator new(unsigned long)>
c0014b6a:	83 c4 10             	add    esp,0x10
c0014b6d:	89 c3                	mov    ebx,eax
c0014b6f:	83 ec 0c             	sub    esp,0xc
c0014b72:	53                   	push   ebx
c0014b73:	e8 c6 dd 00 00       	call   c002293e <PIC::PIC()>
c0014b78:	83 c4 10             	add    esp,0x10
c0014b7b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014b7e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014b81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b84:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b86:	83 c0 08             	add    eax,0x8
c0014b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b8b:	6a 00                	push   0x0
c0014b8d:	6a 00                	push   0x0
c0014b8f:	6a 00                	push   0x0
c0014b91:	52                   	push   edx
c0014b92:	ff d0                	call   eax
c0014b94:	83 c4 10             	add    esp,0x10
c0014b97:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0014b9b:	74 6e                	je     c0014c0b <setupInterruptController()+0x12f>
c0014b9d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014ba0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ba3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ba5:	83 c0 0c             	add    eax,0xc
c0014ba8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014baa:	6a 00                	push   0x0
c0014bac:	6a 00                	push   0x0
c0014bae:	6a 00                	push   0x0
c0014bb0:	52                   	push   edx
c0014bb1:	ff d0                	call   eax
c0014bb3:	83 c4 10             	add    esp,0x10
c0014bb6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014bba:	74 15                	je     c0014bd1 <setupInterruptController()+0xf5>
c0014bbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bc1:	83 c0 04             	add    eax,0x4
c0014bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bc6:	83 ec 0c             	sub    esp,0xc
c0014bc9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014bcc:	ff d0                	call   eax
c0014bce:	83 c4 10             	add    esp,0x10
c0014bd1:	83 ec 0c             	sub    esp,0xc
c0014bd4:	68 58 21 00 00       	push   0x2158
c0014bd9:	e8 78 d5 ff ff       	call   c0012156 <operator new(unsigned long)>
c0014bde:	83 c4 10             	add    esp,0x10
c0014be1:	89 c3                	mov    ebx,eax
c0014be3:	83 ec 0c             	sub    esp,0xc
c0014be6:	53                   	push   ebx
c0014be7:	e8 06 d8 00 00       	call   c00223f2 <APIC::APIC()>
c0014bec:	83 c4 10             	add    esp,0x10
c0014bef:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014bf2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014bf5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bfa:	83 c0 08             	add    eax,0x8
c0014bfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bff:	6a 00                	push   0x0
c0014c01:	6a 00                	push   0x0
c0014c03:	6a 00                	push   0x0
c0014c05:	52                   	push   edx
c0014c06:	ff d0                	call   eax
c0014c08:	83 c4 10             	add    esp,0x10
c0014c0b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0014c10:	83 ec 08             	sub    esp,0x8
c0014c13:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c16:	50                   	push   eax
c0014c17:	e8 04 ea ff ff       	call   c0013620 <Device::addChild(Device*)>
c0014c1c:	83 c4 10             	add    esp,0x10
c0014c1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c24:	83 c0 24             	add    eax,0x24
c0014c27:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c29:	6a 00                	push   0x0
c0014c2b:	68 d6 44 01 c0       	push   0xc00144d6
c0014c30:	6a 00                	push   0x0
c0014c32:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c35:	ff d0                	call   eax
c0014c37:	83 c4 10             	add    esp,0x10
c0014c3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c3f:	83 c0 24             	add    eax,0x24
c0014c42:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c44:	6a 00                	push   0x0
c0014c46:	68 d6 44 01 c0       	push   0xc00144d6
c0014c4b:	6a 01                	push   0x1
c0014c4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c50:	ff d0                	call   eax
c0014c52:	83 c4 10             	add    esp,0x10
c0014c55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c5a:	83 c0 24             	add    eax,0x24
c0014c5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c5f:	6a 00                	push   0x0
c0014c61:	68 af 3e 01 c0       	push   0xc0013eaf
c0014c66:	6a 02                	push   0x2
c0014c68:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c6b:	ff d0                	call   eax
c0014c6d:	83 c4 10             	add    esp,0x10
c0014c70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c73:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c75:	83 c0 24             	add    eax,0x24
c0014c78:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c7a:	6a 00                	push   0x0
c0014c7c:	68 d6 44 01 c0       	push   0xc00144d6
c0014c81:	6a 03                	push   0x3
c0014c83:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c86:	ff d0                	call   eax
c0014c88:	83 c4 10             	add    esp,0x10
c0014c8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c90:	83 c0 24             	add    eax,0x24
c0014c93:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c95:	6a 00                	push   0x0
c0014c97:	68 d6 44 01 c0       	push   0xc00144d6
c0014c9c:	6a 04                	push   0x4
c0014c9e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ca1:	ff d0                	call   eax
c0014ca3:	83 c4 10             	add    esp,0x10
c0014ca6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ca9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cab:	83 c0 24             	add    eax,0x24
c0014cae:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cb0:	6a 00                	push   0x0
c0014cb2:	68 d6 44 01 c0       	push   0xc00144d6
c0014cb7:	6a 05                	push   0x5
c0014cb9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cbc:	ff d0                	call   eax
c0014cbe:	83 c4 10             	add    esp,0x10
c0014cc1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cc6:	83 c0 24             	add    eax,0x24
c0014cc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ccb:	6a 00                	push   0x0
c0014ccd:	68 f5 44 01 c0       	push   0xc00144f5
c0014cd2:	6a 06                	push   0x6
c0014cd4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cd7:	ff d0                	call   eax
c0014cd9:	83 c4 10             	add    esp,0x10
c0014cdc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ce1:	83 c0 24             	add    eax,0x24
c0014ce4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ce6:	6a 00                	push   0x0
c0014ce8:	68 57 44 01 c0       	push   0xc0014457
c0014ced:	6a 07                	push   0x7
c0014cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cf2:	ff d0                	call   eax
c0014cf4:	83 c4 10             	add    esp,0x10
c0014cf7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cfc:	83 c0 24             	add    eax,0x24
c0014cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d01:	6a 00                	push   0x0
c0014d03:	68 ca 3c 01 c0       	push   0xc0013cca
c0014d08:	6a 08                	push   0x8
c0014d0a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d0d:	ff d0                	call   eax
c0014d0f:	83 c4 10             	add    esp,0x10
c0014d12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d15:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d17:	83 c0 24             	add    eax,0x24
c0014d1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d1c:	6a 00                	push   0x0
c0014d1e:	68 d6 44 01 c0       	push   0xc00144d6
c0014d23:	6a 09                	push   0x9
c0014d25:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d28:	ff d0                	call   eax
c0014d2a:	83 c4 10             	add    esp,0x10
c0014d2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d30:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d32:	83 c0 24             	add    eax,0x24
c0014d35:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d37:	6a 00                	push   0x0
c0014d39:	68 d6 44 01 c0       	push   0xc00144d6
c0014d3e:	6a 0a                	push   0xa
c0014d40:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d43:	ff d0                	call   eax
c0014d45:	83 c4 10             	add    esp,0x10
c0014d48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d4d:	83 c0 24             	add    eax,0x24
c0014d50:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d52:	6a 00                	push   0x0
c0014d54:	68 d6 44 01 c0       	push   0xc00144d6
c0014d59:	6a 0b                	push   0xb
c0014d5b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d5e:	ff d0                	call   eax
c0014d60:	83 c4 10             	add    esp,0x10
c0014d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d66:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d68:	83 c0 24             	add    eax,0x24
c0014d6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d6d:	6a 00                	push   0x0
c0014d6f:	68 d6 44 01 c0       	push   0xc00144d6
c0014d74:	6a 0c                	push   0xc
c0014d76:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d79:	ff d0                	call   eax
c0014d7b:	83 c4 10             	add    esp,0x10
c0014d7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d81:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d83:	83 c0 24             	add    eax,0x24
c0014d86:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d88:	6a 00                	push   0x0
c0014d8a:	68 86 44 01 c0       	push   0xc0014486
c0014d8f:	6a 0d                	push   0xd
c0014d91:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d94:	ff d0                	call   eax
c0014d96:	83 c4 10             	add    esp,0x10
c0014d99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d9e:	83 c0 24             	add    eax,0x24
c0014da1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014da3:	6a 00                	push   0x0
c0014da5:	68 bf 44 01 c0       	push   0xc00144bf
c0014daa:	6a 0e                	push   0xe
c0014dac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014daf:	ff d0                	call   eax
c0014db1:	83 c4 10             	add    esp,0x10
c0014db4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014db9:	83 c0 24             	add    eax,0x24
c0014dbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dbe:	6a 00                	push   0x0
c0014dc0:	68 d6 44 01 c0       	push   0xc00144d6
c0014dc5:	6a 0f                	push   0xf
c0014dc7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dca:	ff d0                	call   eax
c0014dcc:	83 c4 10             	add    esp,0x10
c0014dcf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dd4:	83 c0 24             	add    eax,0x24
c0014dd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dd9:	6a 00                	push   0x0
c0014ddb:	68 d6 44 01 c0       	push   0xc00144d6
c0014de0:	6a 10                	push   0x10
c0014de2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014de5:	ff d0                	call   eax
c0014de7:	83 c4 10             	add    esp,0x10
c0014dea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ded:	8b 00                	mov    eax,DWORD PTR [eax]
c0014def:	83 c0 24             	add    eax,0x24
c0014df2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014df4:	6a 00                	push   0x0
c0014df6:	68 d6 44 01 c0       	push   0xc00144d6
c0014dfb:	6a 11                	push   0x11
c0014dfd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e00:	ff d0                	call   eax
c0014e02:	83 c4 10             	add    esp,0x10
c0014e05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e08:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e0a:	83 c0 24             	add    eax,0x24
c0014e0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e0f:	6a 00                	push   0x0
c0014e11:	68 d6 44 01 c0       	push   0xc00144d6
c0014e16:	6a 12                	push   0x12
c0014e18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e1b:	ff d0                	call   eax
c0014e1d:	83 c4 10             	add    esp,0x10
c0014e20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e23:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e25:	83 c0 24             	add    eax,0x24
c0014e28:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e2a:	6a 00                	push   0x0
c0014e2c:	68 d6 44 01 c0       	push   0xc00144d6
c0014e31:	6a 13                	push   0x13
c0014e33:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e36:	ff d0                	call   eax
c0014e38:	83 c4 10             	add    esp,0x10
c0014e3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e40:	83 c0 24             	add    eax,0x24
c0014e43:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e45:	6a 00                	push   0x0
c0014e47:	68 d6 44 01 c0       	push   0xc00144d6
c0014e4c:	6a 14                	push   0x14
c0014e4e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e51:	ff d0                	call   eax
c0014e53:	83 c4 10             	add    esp,0x10
c0014e56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e59:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e5b:	83 c0 24             	add    eax,0x24
c0014e5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e60:	6a 00                	push   0x0
c0014e62:	68 d6 44 01 c0       	push   0xc00144d6
c0014e67:	6a 1e                	push   0x1e
c0014e69:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e6c:	ff d0                	call   eax
c0014e6e:	83 c4 10             	add    esp,0x10
c0014e71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e74:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e76:	83 c0 24             	add    eax,0x24
c0014e79:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e7b:	6a 00                	push   0x0
c0014e7d:	68 21 a3 01 c0       	push   0xc001a321
c0014e82:	6a 60                	push   0x60
c0014e84:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e87:	ff d0                	call   eax
c0014e89:	83 c4 10             	add    esp,0x10
c0014e8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e8f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014e92:	c9                   	leave  
c0014e93:	c3                   	ret    

c0014e94 <InterruptController::convertLegacyIRQNumber(int)>:
c0014e94:	55                   	push   ebp
c0014e95:	89 e5                	mov    ebp,esp
c0014e97:	83 ec 08             	sub    esp,0x8
c0014e9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9d:	83 ec 0c             	sub    esp,0xc
c0014ea0:	50                   	push   eax
c0014ea1:	e8 5c ea ff ff       	call   c0013902 <Device::getName()>
c0014ea6:	83 c4 10             	add    esp,0x10
c0014ea9:	8a 00                	mov    al,BYTE PTR [eax]
c0014eab:	3c 41                	cmp    al,0x41
c0014ead:	0f 94 c0             	sete   al
c0014eb0:	84 c0                	test   al,al
c0014eb2:	74 28                	je     c0014edc <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014eb4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0014eb8:	7f 12                	jg     c0014ecc <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0014eba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014ebd:	05 40 97 02 c0       	add    eax,0xc0029740
c0014ec2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ec4:	0f b6 c0             	movzx  eax,al
c0014ec7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0014eca:	eb 10                	jmp    c0014edc <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014ecc:	83 ec 0c             	sub    esp,0xc
c0014ecf:	68 b4 75 02 c0       	push   0xc00275b4
c0014ed4:	e8 ea 3a 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0014ed9:	83 c4 10             	add    esp,0x10
c0014edc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014edf:	c9                   	leave  
c0014ee0:	c3                   	ret    
c0014ee1:	90                   	nop

c0014ee2 <startGUI(void*)>:
c0014ee2:	55                   	push   ebp
c0014ee3:	89 e5                	mov    ebp,esp
c0014ee5:	53                   	push   ebx
c0014ee6:	83 ec 04             	sub    esp,0x4
c0014ee9:	e8 20 6a 00 00       	call   c001b90e <unlockScheduler()>
c0014eee:	e8 04 6a 00 00       	call   c001b8f7 <getIRQNestingLevel()>
c0014ef3:	83 ec 08             	sub    esp,0x8
c0014ef6:	50                   	push   eax
c0014ef7:	68 9c 78 02 c0       	push   0xc002789c
c0014efc:	e8 44 d3 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0014f01:	83 c4 10             	add    esp,0x10
c0014f04:	8b 1d 68 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a468
c0014f0a:	83 ec 08             	sub    esp,0x8
c0014f0d:	6a 01                	push   0x1
c0014f0f:	68 b6 78 02 c0       	push   0xc00278b6
c0014f14:	e8 21 64 00 00       	call   c001b33a <Thr::loadDLL(char const*, bool)>
c0014f19:	83 c4 10             	add    esp,0x10
c0014f1c:	83 ec 08             	sub    esp,0x8
c0014f1f:	53                   	push   ebx
c0014f20:	50                   	push   eax
c0014f21:	e8 da 65 00 00       	call   c001b500 <Thr::executeDLL(unsigned long, void*)>
c0014f26:	83 c4 10             	add    esp,0x10
c0014f29:	8b 1d 68 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a468
c0014f2f:	83 ec 08             	sub    esp,0x8
c0014f32:	6a 01                	push   0x1
c0014f34:	68 d0 78 02 c0       	push   0xc00278d0
c0014f39:	e8 fc 63 00 00       	call   c001b33a <Thr::loadDLL(char const*, bool)>
c0014f3e:	83 c4 10             	add    esp,0x10
c0014f41:	83 ec 08             	sub    esp,0x8
c0014f44:	53                   	push   ebx
c0014f45:	50                   	push   eax
c0014f46:	e8 b5 65 00 00       	call   c001b500 <Thr::executeDLL(unsigned long, void*)>
c0014f4b:	83 c4 10             	add    esp,0x10
c0014f4e:	90                   	nop
c0014f4f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014f52:	c9                   	leave  
c0014f53:	c3                   	ret    

c0014f54 <sendKeyToTerminal(unsigned char)>:
c0014f54:	55                   	push   ebp
c0014f55:	89 e5                	mov    ebp,esp
c0014f57:	83 ec 28             	sub    esp,0x28
c0014f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0014f60:	a1 24 a5 02 c0       	mov    eax,ds:0xc002a524
c0014f65:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014f69:	83 ec 08             	sub    esp,0x8
c0014f6c:	52                   	push   edx
c0014f6d:	50                   	push   eax
c0014f6e:	e8 fd ba ff ff       	call   c0010a70 <VgaText::receiveKey(unsigned char)>
c0014f73:	83 c4 10             	add    esp,0x10
c0014f76:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0014f7a:	75 41                	jne    c0014fbd <sendKeyToTerminal(unsigned char)+0x69>
c0014f7c:	e8 b2 69 00 00       	call   c001b933 <lockStuff()>
c0014f81:	a1 00 a6 02 c0       	mov    eax,ds:0xc002a600
c0014f86:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014f89:	c7 05 00 a6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a600,0x0
c0014f93:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014f97:	74 1f                	je     c0014fb8 <sendKeyToTerminal(unsigned char)+0x64>
c0014f99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f9c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0014f9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fa2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014fa5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014fa8:	83 ec 0c             	sub    esp,0xc
c0014fab:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014fae:	e8 71 6f 00 00       	call   c001bf24 <unblockTask(ThreadControlBlock*)>
c0014fb3:	83 c4 10             	add    esp,0x10
c0014fb6:	eb db                	jmp    c0014f93 <sendKeyToTerminal(unsigned char)+0x3f>
c0014fb8:	e8 10 6d 00 00       	call   c001bccd <unlockStuff()>
c0014fbd:	90                   	nop
c0014fbe:	c9                   	leave  
c0014fbf:	c3                   	ret    

c0014fc0 <sendKeyboardToken(KeyboardToken)>:
c0014fc0:	55                   	push   ebp
c0014fc1:	89 e5                	mov    ebp,esp
c0014fc3:	83 ec 18             	sub    esp,0x18
c0014fc6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0014fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcc:	0f b7 c0             	movzx  eax,ax
c0014fcf:	83 f2 01             	xor    edx,0x1
c0014fd2:	88 90 20 a6 02 c0    	mov    BYTE PTR [eax-0x3ffd59e0],dl
c0014fd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fdb:	66 3d 03 02          	cmp    ax,0x203
c0014fdf:	75 07                	jne    c0014fe8 <sendKeyboardToken(KeyboardToken)+0x28>
c0014fe1:	a0 20 a7 02 c0       	mov    al,ds:0xc002a720
c0014fe6:	84 c0                	test   al,al
c0014fe8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0014fec:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0014fef:	a0 28 aa 02 c0       	mov    al,ds:0xc002aa28
c0014ff4:	38 c2                	cmp    dl,al
c0014ff6:	74 1c                	je     c0015014 <sendKeyboardToken(KeyboardToken)+0x54>
c0014ff8:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0014ffb:	a2 28 aa 02 c0       	mov    ds:0xc002aa28,al
c0015000:	a0 28 aa 02 c0       	mov    al,ds:0xc002aa28
c0015005:	0f b6 c0             	movzx  eax,al
c0015008:	83 ec 0c             	sub    esp,0xc
c001500b:	50                   	push   eax
c001500c:	e8 cd ac ff ff       	call   c000fcde <setTerminalScrollLock(bool)>
c0015011:	83 c4 10             	add    esp,0x10
c0015014:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015017:	84 c0                	test   al,al
c0015019:	0f 84 ae 00 00 00    	je     c00150cd <sendKeyboardToken(KeyboardToken)+0x10d>
c001501f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015022:	66 3d 10 03          	cmp    ax,0x310
c0015026:	75 06                	jne    c001502e <sendKeyboardToken(KeyboardToken)+0x6e>
c0015028:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001502e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015031:	66 3d 11 03          	cmp    ax,0x311
c0015035:	75 06                	jne    c001503d <sendKeyboardToken(KeyboardToken)+0x7d>
c0015037:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001503d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015040:	66 3d 12 03          	cmp    ax,0x312
c0015044:	75 06                	jne    c001504c <sendKeyboardToken(KeyboardToken)+0x8c>
c0015046:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001504c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504f:	66 3d 13 03          	cmp    ax,0x313
c0015053:	75 06                	jne    c001505b <sendKeyboardToken(KeyboardToken)+0x9b>
c0015055:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001505b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505e:	66 3d 14 03          	cmp    ax,0x314
c0015062:	75 06                	jne    c001506a <sendKeyboardToken(KeyboardToken)+0xaa>
c0015064:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001506a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001506d:	66 3d 15 03          	cmp    ax,0x315
c0015071:	75 06                	jne    c0015079 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015073:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507c:	66 3d 16 03          	cmp    ax,0x316
c0015080:	75 06                	jne    c0015088 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015082:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508b:	66 3d 17 03          	cmp    ax,0x317
c001508f:	75 06                	jne    c0015097 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015091:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509a:	66 3d 18 03          	cmp    ax,0x318
c001509e:	75 06                	jne    c00150a6 <sendKeyboardToken(KeyboardToken)+0xe6>
c00150a0:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00150a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a9:	66 3d 19 03          	cmp    ax,0x319
c00150ad:	75 06                	jne    c00150b5 <sendKeyboardToken(KeyboardToken)+0xf5>
c00150af:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00150b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b8:	66 3d 1a 03          	cmp    ax,0x31a
c00150bc:	0f 85 c9 00 00 00    	jne    c001518b <sendKeyboardToken(KeyboardToken)+0x1cb>
c00150c2:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00150c8:	e9 be 00 00 00       	jmp    c001518b <sendKeyboardToken(KeyboardToken)+0x1cb>
c00150cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d0:	66 3d 10 03          	cmp    ax,0x310
c00150d4:	75 0a                	jne    c00150e0 <sendKeyboardToken(KeyboardToken)+0x120>
c00150d6:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00150dc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00150e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e3:	66 3d 11 03          	cmp    ax,0x311
c00150e7:	75 0a                	jne    c00150f3 <sendKeyboardToken(KeyboardToken)+0x133>
c00150e9:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00150ef:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00150f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f6:	66 3d 12 03          	cmp    ax,0x312
c00150fa:	75 0a                	jne    c0015106 <sendKeyboardToken(KeyboardToken)+0x146>
c00150fc:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015102:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015106:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015109:	66 3d 13 03          	cmp    ax,0x313
c001510d:	75 0a                	jne    c0015119 <sendKeyboardToken(KeyboardToken)+0x159>
c001510f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015115:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015119:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001511c:	66 3d 14 03          	cmp    ax,0x314
c0015120:	75 0a                	jne    c001512c <sendKeyboardToken(KeyboardToken)+0x16c>
c0015122:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015128:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001512c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512f:	66 3d 15 03          	cmp    ax,0x315
c0015133:	75 0a                	jne    c001513f <sendKeyboardToken(KeyboardToken)+0x17f>
c0015135:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001513b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001513f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015142:	66 3d 16 03          	cmp    ax,0x316
c0015146:	75 0a                	jne    c0015152 <sendKeyboardToken(KeyboardToken)+0x192>
c0015148:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001514e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015152:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015155:	66 3d 17 03          	cmp    ax,0x317
c0015159:	75 0a                	jne    c0015165 <sendKeyboardToken(KeyboardToken)+0x1a5>
c001515b:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015161:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015165:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015168:	66 3d 18 03          	cmp    ax,0x318
c001516c:	75 0a                	jne    c0015178 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001516e:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015174:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015178:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001517b:	66 3d 19 03          	cmp    ax,0x319
c001517f:	75 0a                	jne    c001518b <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015181:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015187:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001518b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001518e:	66 3d 00 02          	cmp    ax,0x200
c0015192:	75 2a                	jne    c00151be <sendKeyboardToken(KeyboardToken)+0x1fe>
c0015194:	a0 20 aa 02 c0       	mov    al,ds:0xc002aa20
c0015199:	83 f0 01             	xor    eax,0x1
c001519c:	84 c0                	test   al,al
c001519e:	74 1e                	je     c00151be <sendKeyboardToken(KeyboardToken)+0x1fe>
c00151a0:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00151a5:	6a 01                	push   0x1
c00151a7:	6a 00                	push   0x0
c00151a9:	68 e2 4e 01 c0       	push   0xc0014ee2
c00151ae:	50                   	push   eax
c00151af:	e8 8a 68 00 00       	call   c001ba3e <Process::createThread(void (*)(void*), void*, int)>
c00151b4:	83 c4 10             	add    esp,0x10
c00151b7:	c6 05 20 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aa20,0x1
c00151be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c1:	66 3d 1d 03          	cmp    ax,0x31d
c00151c5:	75 06                	jne    c00151cd <sendKeyboardToken(KeyboardToken)+0x20d>
c00151c7:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00151cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d0:	66 3d 1c 03          	cmp    ax,0x31c
c00151d4:	75 06                	jne    c00151dc <sendKeyboardToken(KeyboardToken)+0x21c>
c00151d6:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00151dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151df:	66 3d 1b 03          	cmp    ax,0x31b
c00151e3:	75 06                	jne    c00151eb <sendKeyboardToken(KeyboardToken)+0x22b>
c00151e5:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00151eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ee:	66 3d 1e 03          	cmp    ax,0x31e
c00151f2:	75 06                	jne    c00151fa <sendKeyboardToken(KeyboardToken)+0x23a>
c00151f4:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00151fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151fd:	66 3d 1f 03          	cmp    ax,0x31f
c0015201:	75 06                	jne    c0015209 <sendKeyboardToken(KeyboardToken)+0x249>
c0015203:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520c:	66 3d 1a 03          	cmp    ax,0x31a
c0015210:	75 06                	jne    c0015218 <sendKeyboardToken(KeyboardToken)+0x258>
c0015212:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015218:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001521c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001521f:	83 f0 01             	xor    eax,0x1
c0015222:	84 c0                	test   al,al
c0015224:	74 77                	je     c001529d <sendKeyboardToken(KeyboardToken)+0x2dd>
c0015226:	a0 21 a7 02 c0       	mov    al,ds:0xc002a721
c001522b:	84 c0                	test   al,al
c001522d:	74 41                	je     c0015270 <sendKeyboardToken(KeyboardToken)+0x2b0>
c001522f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015233:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015237:	74 2b                	je     c0015264 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0015239:	8b 15 24 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa24
c001523f:	89 d0                	mov    eax,edx
c0015241:	c1 e0 02             	shl    eax,0x2
c0015244:	01 d0                	add    eax,edx
c0015246:	01 c0                	add    eax,eax
c0015248:	a3 24 aa 02 c0       	mov    ds:0xc002aa24,eax
c001524d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015250:	0f b7 c0             	movzx  eax,ax
c0015253:	8d 50 d0             	lea    edx,[eax-0x30]
c0015256:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c001525b:	01 d0                	add    eax,edx
c001525d:	a3 24 aa 02 c0       	mov    ds:0xc002aa24,eax
c0015262:	eb 6d                	jmp    c00152d1 <sendKeyboardToken(KeyboardToken)+0x311>
c0015264:	c7 05 24 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa24,0x0
c001526e:	eb 61                	jmp    c00152d1 <sendKeyboardToken(KeyboardToken)+0x311>
c0015270:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c0015275:	85 c0                	test   eax,eax
c0015277:	74 18                	je     c0015291 <sendKeyboardToken(KeyboardToken)+0x2d1>
c0015279:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c001527e:	0f b6 c0             	movzx  eax,al
c0015281:	83 ec 0c             	sub    esp,0xc
c0015284:	50                   	push   eax
c0015285:	e8 ca fc ff ff       	call   c0014f54 <sendKeyToTerminal(unsigned char)>
c001528a:	83 c4 10             	add    esp,0x10
c001528d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015291:	c7 05 24 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa24,0x0
c001529b:	eb 34                	jmp    c00152d1 <sendKeyboardToken(KeyboardToken)+0x311>
c001529d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a0:	66 3d 01 01          	cmp    ax,0x101
c00152a4:	75 2b                	jne    c00152d1 <sendKeyboardToken(KeyboardToken)+0x311>
c00152a6:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c00152ab:	85 c0                	test   eax,eax
c00152ad:	74 18                	je     c00152c7 <sendKeyboardToken(KeyboardToken)+0x307>
c00152af:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c00152b4:	0f b6 c0             	movzx  eax,al
c00152b7:	83 ec 0c             	sub    esp,0xc
c00152ba:	50                   	push   eax
c00152bb:	e8 94 fc ff ff       	call   c0014f54 <sendKeyToTerminal(unsigned char)>
c00152c0:	83 c4 10             	add    esp,0x10
c00152c3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00152c7:	c7 05 24 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa24,0x0
c00152d1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00152d4:	83 f0 01             	xor    eax,0x1
c00152d7:	84 c0                	test   al,al
c00152d9:	74 4c                	je     c0015327 <sendKeyboardToken(KeyboardToken)+0x367>
c00152db:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00152de:	83 f0 01             	xor    eax,0x1
c00152e1:	84 c0                	test   al,al
c00152e3:	74 42                	je     c0015327 <sendKeyboardToken(KeyboardToken)+0x367>
c00152e5:	a0 20 a7 02 c0       	mov    al,ds:0xc002a720
c00152ea:	83 f0 01             	xor    eax,0x1
c00152ed:	84 c0                	test   al,al
c00152ef:	74 36                	je     c0015327 <sendKeyboardToken(KeyboardToken)+0x367>
c00152f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f4:	66 83 f8 1f          	cmp    ax,0x1f
c00152f8:	76 09                	jbe    c0015303 <sendKeyboardToken(KeyboardToken)+0x343>
c00152fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152fd:	66 83 f8 7e          	cmp    ax,0x7e
c0015301:	76 12                	jbe    c0015315 <sendKeyboardToken(KeyboardToken)+0x355>
c0015303:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015306:	66 83 f8 0a          	cmp    ax,0xa
c001530a:	74 09                	je     c0015315 <sendKeyboardToken(KeyboardToken)+0x355>
c001530c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530f:	66 83 f8 08          	cmp    ax,0x8
c0015313:	75 12                	jne    c0015327 <sendKeyboardToken(KeyboardToken)+0x367>
c0015315:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015318:	0f b6 c0             	movzx  eax,al
c001531b:	83 ec 0c             	sub    esp,0xc
c001531e:	50                   	push   eax
c001531f:	e8 30 fc ff ff       	call   c0014f54 <sendKeyToTerminal(unsigned char)>
c0015324:	83 c4 10             	add    esp,0x10
c0015327:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001532a:	83 f0 01             	xor    eax,0x1
c001532d:	84 c0                	test   al,al
c001532f:	74 4f                	je     c0015380 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015331:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015334:	83 f0 01             	xor    eax,0x1
c0015337:	84 c0                	test   al,al
c0015339:	74 45                	je     c0015380 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001533b:	a0 20 a7 02 c0       	mov    al,ds:0xc002a720
c0015340:	84 c0                	test   al,al
c0015342:	74 3c                	je     c0015380 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015347:	66 83 f8 3f          	cmp    ax,0x3f
c001534b:	76 33                	jbe    c0015380 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001534d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015350:	66 83 f8 7f          	cmp    ax,0x7f
c0015354:	77 2a                	ja     c0015380 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015359:	88 c2                	mov    dl,al
c001535b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535e:	66 83 f8 5f          	cmp    ax,0x5f
c0015362:	76 04                	jbe    c0015368 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0015364:	b0 20                	mov    al,0x20
c0015366:	eb 02                	jmp    c001536a <sendKeyboardToken(KeyboardToken)+0x3aa>
c0015368:	b0 00                	mov    al,0x0
c001536a:	29 c2                	sub    edx,eax
c001536c:	88 d0                	mov    al,dl
c001536e:	83 e8 40             	sub    eax,0x40
c0015371:	0f b6 c0             	movzx  eax,al
c0015374:	83 ec 0c             	sub    esp,0xc
c0015377:	50                   	push   eax
c0015378:	e8 d7 fb ff ff       	call   c0014f54 <sendKeyToTerminal(unsigned char)>
c001537d:	83 c4 10             	add    esp,0x10
c0015380:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015383:	66 3d 00 03          	cmp    ax,0x300
c0015387:	75 0f                	jne    c0015398 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0015389:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001538c:	83 f0 01             	xor    eax,0x1
c001538f:	84 c0                	test   al,al
c0015391:	74 05                	je     c0015398 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0015393:	e8 6d b1 ff ff       	call   c0010505 <doTerminalCycle()>
c0015398:	90                   	nop
c0015399:	c9                   	leave  
c001539a:	c3                   	ret    

c001539b <clearInternalKeybuffer(VgaText*)>:
c001539b:	55                   	push   ebp
c001539c:	89 e5                	mov    ebp,esp
c001539e:	83 ec 08             	sub    esp,0x8
c00153a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a4:	05 34 11 00 00       	add    eax,0x1134
c00153a9:	83 ec 0c             	sub    esp,0xc
c00153ac:	50                   	push   eax
c00153ad:	e8 e8 b2 fe ff       	call   c000069a <strlen>
c00153b2:	83 c4 10             	add    esp,0x10
c00153b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00153b8:	81 c2 34 11 00 00    	add    edx,0x1134
c00153be:	83 ec 04             	sub    esp,0x4
c00153c1:	50                   	push   eax
c00153c2:	6a 00                	push   0x0
c00153c4:	52                   	push   edx
c00153c5:	e8 b3 b2 fe ff       	call   c000067d <memset>
c00153ca:	83 c4 10             	add    esp,0x10
c00153cd:	90                   	nop
c00153ce:	c9                   	leave  
c00153cf:	c3                   	ret    

c00153d0 <readKeyboard(VgaText*, char*, unsigned long)>:
c00153d0:	55                   	push   ebp
c00153d1:	89 e5                	mov    ebp,esp
c00153d3:	83 ec 18             	sub    esp,0x18
c00153d6:	fb                   	sti    
c00153d7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00153de:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00153e2:	0f 84 8a 00 00 00    	je     c0015472 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00153e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153eb:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00153f1:	84 c0                	test   al,al
c00153f3:	75 11                	jne    c0015406 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00153f5:	e8 12 65 00 00       	call   c001b90c <lockScheduler()>
c00153fa:	e8 49 68 00 00       	call   c001bc48 <schedule()>
c00153ff:	e8 0a 65 00 00       	call   c001b90e <unlockScheduler()>
c0015404:	eb e2                	jmp    c00153e8 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015406:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015409:	8d 50 01             	lea    edx,[eax+0x1]
c001540c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001540f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015412:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015418:	88 10                	mov    BYTE PTR [eax],dl
c001541a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541d:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015423:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015429:	05 34 11 00 00       	add    eax,0x1134
c001542e:	83 ec 0c             	sub    esp,0xc
c0015431:	50                   	push   eax
c0015432:	e8 63 b2 fe ff       	call   c000069a <strlen>
c0015437:	83 c4 10             	add    esp,0x10
c001543a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001543d:	81 c2 34 11 00 00    	add    edx,0x1134
c0015443:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015446:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015449:	81 c2 34 11 00 00    	add    edx,0x1134
c001544f:	83 ec 04             	sub    esp,0x4
c0015452:	50                   	push   eax
c0015453:	51                   	push   ecx
c0015454:	52                   	push   edx
c0015455:	e8 b5 b1 fe ff       	call   c000060f <memmove>
c001545a:	83 c4 10             	add    esp,0x10
c001545d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015460:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015463:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015467:	0f 85 71 ff ff ff    	jne    c00153de <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001546d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015470:	eb 03                	jmp    c0015475 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015472:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015475:	c9                   	leave  
c0015476:	c3                   	ret    
c0015477:	90                   	nop

c0015478 <Keyboard::Keyboard(char const*)>:
c0015478:	83 ec 0c             	sub    esp,0xc
c001547b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001547f:	83 ec 08             	sub    esp,0x8
c0015482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015486:	50                   	push   eax
c0015487:	e8 84 e3 ff ff       	call   c0013810 <Device::Device(char const*)>
c001548c:	83 c4 10             	add    esp,0x10
c001548f:	ba f4 78 02 c0       	mov    edx,0xc00278f4
c0015494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015498:	89 10                	mov    DWORD PTR [eax],edx
c001549a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001549e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00154a8:	c6 05 04 a6 02 c0 01 	mov    BYTE PTR ds:0xc002a604,0x1
c00154af:	90                   	nop
c00154b0:	83 c4 0c             	add    esp,0xc
c00154b3:	c3                   	ret    

c00154b4 <Keyboard::~Keyboard()>:
c00154b4:	83 ec 0c             	sub    esp,0xc
c00154b7:	ba f4 78 02 c0       	mov    edx,0xc00278f4
c00154bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154c0:	89 10                	mov    DWORD PTR [eax],edx
c00154c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154c6:	83 ec 0c             	sub    esp,0xc
c00154c9:	50                   	push   eax
c00154ca:	e8 23 e0 ff ff       	call   c00134f2 <Device::~Device()>
c00154cf:	83 c4 10             	add    esp,0x10
c00154d2:	90                   	nop
c00154d3:	83 c4 0c             	add    esp,0xc
c00154d6:	c3                   	ret    
c00154d7:	90                   	nop

c00154d8 <Keyboard::~Keyboard()>:
c00154d8:	83 ec 0c             	sub    esp,0xc
c00154db:	83 ec 0c             	sub    esp,0xc
c00154de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154e2:	e8 cd ff ff ff       	call   c00154b4 <Keyboard::~Keyboard()>
c00154e7:	83 c4 10             	add    esp,0x10
c00154ea:	83 ec 08             	sub    esp,0x8
c00154ed:	68 5c 01 00 00       	push   0x15c
c00154f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154f6:	e8 6a cc ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c00154fb:	83 c4 10             	add    esp,0x10
c00154fe:	83 c4 0c             	add    esp,0xc
c0015501:	c3                   	ret    

c0015502 <LogicalDisk::close(int, int, void*)>:
c0015502:	83 c8 ff             	or     eax,0xffffffff
c0015505:	c3                   	ret    

c0015506 <LogicalDisk::~LogicalDisk()>:
c0015506:	83 ec 0c             	sub    esp,0xc
c0015509:	ba a4 79 02 c0       	mov    edx,0xc00279a4
c001550e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015512:	89 10                	mov    DWORD PTR [eax],edx
c0015514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015518:	83 ec 0c             	sub    esp,0xc
c001551b:	50                   	push   eax
c001551c:	e8 d1 df ff ff       	call   c00134f2 <Device::~Device()>
c0015521:	83 c4 10             	add    esp,0x10
c0015524:	90                   	nop
c0015525:	83 c4 0c             	add    esp,0xc
c0015528:	c3                   	ret    
c0015529:	90                   	nop

c001552a <LogicalDisk::~LogicalDisk()>:
c001552a:	83 ec 0c             	sub    esp,0xc
c001552d:	83 ec 0c             	sub    esp,0xc
c0015530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015534:	e8 cd ff ff ff       	call   c0015506 <LogicalDisk::~LogicalDisk()>
c0015539:	83 c4 10             	add    esp,0x10
c001553c:	83 ec 08             	sub    esp,0x8
c001553f:	68 74 01 00 00       	push   0x174
c0015544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015548:	e8 18 cc ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c001554d:	83 c4 10             	add    esp,0x10
c0015550:	83 c4 0c             	add    esp,0xc
c0015553:	c3                   	ret    

c0015554 <LogicalDisk::open(int, int, void*)>:
c0015554:	83 ec 18             	sub    esp,0x18
c0015557:	68 20 79 02 c0       	push   0xc0027920
c001555c:	e8 62 34 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0015561:	83 c8 ff             	or     eax,0xffffffff
c0015564:	83 c4 1c             	add    esp,0x1c
c0015567:	c3                   	ret    

c0015568 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015568:	53                   	push   ebx
c0015569:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001556d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015571:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015575:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001557b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015581:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015587:	77 10                	ja     c0015599 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015589:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001558f:	89 d3                	mov    ebx,edx
c0015591:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015597:	72 05                	jb     c001559e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015599:	83 c8 ff             	or     eax,0xffffffff
c001559c:	89 c2                	mov    edx,eax
c001559e:	5b                   	pop    ebx
c001559f:	c3                   	ret    

c00155a0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00155a0:	56                   	push   esi
c00155a1:	83 c8 ff             	or     eax,0xffffffff
c00155a4:	53                   	push   ebx
c00155a5:	89 c2                	mov    edx,eax
c00155a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00155ab:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00155af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00155b3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00155b9:	77 27                	ja     c00155e2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00155bb:	89 d8                	mov    eax,ebx
c00155bd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00155c3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00155c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00155ce:	89 c2                	mov    edx,eax
c00155d0:	73 10                	jae    c00155e2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00155d2:	89 c8                	mov    eax,ecx
c00155d4:	89 da                	mov    edx,ebx
c00155d6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00155dc:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00155e2:	5b                   	pop    ebx
c00155e3:	5e                   	pop    esi
c00155e4:	c3                   	ret    
c00155e5:	90                   	nop

c00155e6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00155e6:	83 ec 1c             	sub    esp,0x1c
c00155e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00155ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00155f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00155f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00155f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00155fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0015600:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015604:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015608:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001560c:	83 ec 08             	sub    esp,0x8
c001560f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015613:	50                   	push   eax
c0015614:	e8 f7 e1 ff ff       	call   c0013810 <Device::Device(char const*)>
c0015619:	83 c4 10             	add    esp,0x10
c001561c:	ba a4 79 02 c0       	mov    edx,0xc00279a4
c0015621:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015625:	89 10                	mov    DWORD PTR [eax],edx
c0015627:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001562b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015636:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001563d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015641:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001564b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001564f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015653:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015657:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001565d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015663:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015667:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001566a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001566e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015674:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001567a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001567e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015682:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001568c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015696:	90                   	nop
c0015697:	83 c4 1c             	add    esp,0x1c
c001569a:	c3                   	ret    
c001569b:	90                   	nop

c001569c <LogicalDisk::assignDriveLetter()>:
c001569c:	55                   	push   ebp
c001569d:	57                   	push   edi
c001569e:	56                   	push   esi
c001569f:	53                   	push   ebx
c00156a0:	83 ec 14             	sub    esp,0x14
c00156a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00156a7:	8b 3d 40 aa 02 c0    	mov    edi,DWORD PTR ds:0xc002aa40
c00156ad:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00156b3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00156b7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00156bd:	8b 3d 44 aa 02 c0    	mov    edi,DWORD PTR ds:0xc002aa44
c00156c3:	3c 01                	cmp    al,0x1
c00156c5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00156c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00156cd:	19 c0                	sbb    eax,eax
c00156cf:	83 e0 02             	and    eax,0x2
c00156d2:	83 c0 41             	add    eax,0x41
c00156d5:	0f be e8             	movsx  ebp,al
c00156d8:	3c 43                	cmp    al,0x43
c00156da:	75 10                	jne    c00156ec <LogicalDisk::assignDriveLetter()+0x50>
c00156dc:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00156e3:	75 5d                	jne    c0015742 <LogicalDisk::assignDriveLetter()+0xa6>
c00156e5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00156ea:	75 56                	jne    c0015742 <LogicalDisk::assignDriveLetter()+0xa6>
c00156ec:	8d 75 bf             	lea    esi,[ebp-0x41]
c00156ef:	ba 01 00 00 00       	mov    edx,0x1
c00156f4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00156f8:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00156fc:	d3 e2                	shl    edx,cl
c00156fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015702:	89 d7                	mov    edi,edx
c0015704:	89 d6                	mov    esi,edx
c0015706:	c1 ff 1f             	sar    edi,0x1f
c0015709:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001570d:	21 f9                	and    ecx,edi
c001570f:	09 d1                	or     ecx,edx
c0015711:	75 2f                	jne    c0015742 <LogicalDisk::assignDriveLetter()+0xa6>
c0015713:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015717:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001571b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015721:	09 f2                	or     edx,esi
c0015723:	89 15 40 aa 02 c0    	mov    DWORD PTR ds:0xc002aa40,edx
c0015729:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001572d:	09 fa                	or     edx,edi
c001572f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015733:	89 15 44 aa 02 c0    	mov    DWORD PTR ds:0xc002aa44,edx
c0015739:	89 1c bd 60 aa 02 c0 	mov    DWORD PTR [edi*4-0x3ffd55a0],ebx
c0015740:	eb 08                	jmp    c001574a <LogicalDisk::assignDriveLetter()+0xae>
c0015742:	45                   	inc    ebp
c0015743:	40                   	inc    eax
c0015744:	3c 5b                	cmp    al,0x5b
c0015746:	75 90                	jne    c00156d8 <LogicalDisk::assignDriveLetter()+0x3c>
c0015748:	31 c0                	xor    eax,eax
c001574a:	83 c4 14             	add    esp,0x14
c001574d:	5b                   	pop    ebx
c001574e:	5e                   	pop    esi
c001574f:	5f                   	pop    edi
c0015750:	5d                   	pop    ebp
c0015751:	c3                   	ret    

c0015752 <LogicalDisk::mount()>:
c0015752:	56                   	push   esi
c0015753:	53                   	push   ebx
c0015754:	51                   	push   ecx
c0015755:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015759:	8b 1d c8 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a5c8
c001575f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015769:	85 db                	test   ebx,ebx
c001576b:	74 50                	je     c00157bd <LogicalDisk::mount()+0x6b>
c001576d:	e8 85 61 00 00       	call   c001b8f7 <getIRQNestingLevel()>
c0015772:	52                   	push   edx
c0015773:	52                   	push   edx
c0015774:	50                   	push   eax
c0015775:	68 44 79 02 c0       	push   0xc0027944
c001577a:	e8 c6 ca ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001577f:	83 c4 0c             	add    esp,0xc
c0015782:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015789:	8b 13                	mov    edx,DWORD PTR [ebx]
c001578b:	83 e8 41             	sub    eax,0x41
c001578e:	50                   	push   eax
c001578f:	56                   	push   esi
c0015790:	53                   	push   ebx
c0015791:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015794:	83 c4 10             	add    esp,0x10
c0015797:	84 c0                	test   al,al
c0015799:	74 08                	je     c00157a3 <LogicalDisk::mount()+0x51>
c001579b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00157a1:	eb 1c                	jmp    c00157bf <LogicalDisk::mount()+0x6d>
c00157a3:	e8 4f 61 00 00       	call   c001b8f7 <getIRQNestingLevel()>
c00157a8:	51                   	push   ecx
c00157a9:	51                   	push   ecx
c00157aa:	50                   	push   eax
c00157ab:	68 5f 79 02 c0       	push   0xc002795f
c00157b0:	e8 90 ca ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00157b5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00157b8:	83 c4 10             	add    esp,0x10
c00157bb:	eb ac                	jmp    c0015769 <LogicalDisk::mount()+0x17>
c00157bd:	31 c0                	xor    eax,eax
c00157bf:	5a                   	pop    edx
c00157c0:	5b                   	pop    ebx
c00157c1:	5e                   	pop    esi
c00157c2:	c3                   	ret    
c00157c3:	90                   	nop

c00157c4 <LogicalDisk::unmount()>:
c00157c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157c8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00157d2:	c3                   	ret    
c00157d3:	90                   	nop

c00157d4 <LogicalDisk::unassignDriveLetter()>:
c00157d4:	57                   	push   edi
c00157d5:	56                   	push   esi
c00157d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00157da:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00157e1:	84 c9                	test   cl,cl
c00157e3:	75 0f                	jne    c00157f4 <LogicalDisk::unassignDriveLetter()+0x20>
c00157e5:	c7 44 24 0c 7a 79 02 c0 	mov    DWORD PTR [esp+0xc],0xc002797a
c00157ed:	5e                   	pop    esi
c00157ee:	5f                   	pop    edi
c00157ef:	e9 cf 31 00 00       	jmp    c00189c3 <Krnl::panic(char const*)>
c00157f4:	83 e9 41             	sub    ecx,0x41
c00157f7:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00157fe:	b8 01 00 00 00       	mov    eax,0x1
c0015803:	c7 04 8d 60 aa 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd55a0],0x0
c001580e:	d3 e0                	shl    eax,cl
c0015810:	89 c7                	mov    edi,eax
c0015812:	f7 d0                	not    eax
c0015814:	c1 ff 1f             	sar    edi,0x1f
c0015817:	21 05 40 aa 02 c0    	and    DWORD PTR ds:0xc002aa40,eax
c001581d:	89 fe                	mov    esi,edi
c001581f:	f7 d6                	not    esi
c0015821:	21 35 44 aa 02 c0    	and    DWORD PTR ds:0xc002aa44,esi
c0015827:	5e                   	pop    esi
c0015828:	5f                   	pop    edi
c0015829:	c3                   	ret    

c001582a <LogicalDisk::read(unsigned long long, int, void*)>:
c001582a:	57                   	push   edi
c001582b:	56                   	push   esi
c001582c:	53                   	push   ebx
c001582d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015831:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015835:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015839:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001583d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015843:	77 41                	ja     c0015886 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015845:	99                   	cdq    
c0015846:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001584c:	01 c8                	add    eax,ecx
c001584e:	11 da                	adc    edx,ebx
c0015850:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015856:	19 d7                	sbb    edi,edx
c0015858:	72 33                	jb     c001588d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001585a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015860:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015866:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001586a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001586e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015874:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001587a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001587e:	5b                   	pop    ebx
c001587f:	5e                   	pop    esi
c0015880:	5f                   	pop    edi
c0015881:	e9 6a 09 00 00       	jmp    c00161f0 <VCache::read(unsigned long long, int, void*)>
c0015886:	b8 05 00 00 00       	mov    eax,0x5
c001588b:	eb 05                	jmp    c0015892 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001588d:	b8 07 00 00 00       	mov    eax,0x7
c0015892:	5b                   	pop    ebx
c0015893:	5e                   	pop    esi
c0015894:	5f                   	pop    edi
c0015895:	c3                   	ret    

c0015896 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015896:	57                   	push   edi
c0015897:	56                   	push   esi
c0015898:	53                   	push   ebx
c0015899:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001589d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158a1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00158a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158a9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00158af:	77 41                	ja     c00158f2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00158b1:	99                   	cdq    
c00158b2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00158b8:	01 c8                	add    eax,ecx
c00158ba:	11 da                	adc    edx,ebx
c00158bc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00158c2:	19 d7                	sbb    edi,edx
c00158c4:	72 33                	jb     c00158f9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00158c6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00158cc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00158d2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00158d6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00158da:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00158e0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00158e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00158ea:	5b                   	pop    ebx
c00158eb:	5e                   	pop    esi
c00158ec:	5f                   	pop    edi
c00158ed:	e9 1a 08 00 00       	jmp    c001610c <VCache::write(unsigned long long, int, void*)>
c00158f2:	b8 05 00 00 00       	mov    eax,0x5
c00158f7:	eb 05                	jmp    c00158fe <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00158f9:	b8 07 00 00 00       	mov    eax,0x7
c00158fe:	5b                   	pop    ebx
c00158ff:	5e                   	pop    esi
c0015900:	5f                   	pop    edi
c0015901:	c3                   	ret    

c0015902 <Mouse::Mouse(char const*)>:
c0015902:	83 ec 0c             	sub    esp,0xc
c0015905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015909:	83 ec 08             	sub    esp,0x8
c001590c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015910:	50                   	push   eax
c0015911:	e8 fa de ff ff       	call   c0013810 <Device::Device(char const*)>
c0015916:	83 c4 10             	add    esp,0x10
c0015919:	ba d0 79 02 c0       	mov    edx,0xc00279d0
c001591e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015922:	89 10                	mov    DWORD PTR [eax],edx
c0015924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015928:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015932:	90                   	nop
c0015933:	83 c4 0c             	add    esp,0xc
c0015936:	c3                   	ret    
c0015937:	90                   	nop

c0015938 <Mouse::~Mouse()>:
c0015938:	83 ec 0c             	sub    esp,0xc
c001593b:	ba d0 79 02 c0       	mov    edx,0xc00279d0
c0015940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015944:	89 10                	mov    DWORD PTR [eax],edx
c0015946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001594a:	83 ec 0c             	sub    esp,0xc
c001594d:	50                   	push   eax
c001594e:	e8 9f db ff ff       	call   c00134f2 <Device::~Device()>
c0015953:	83 c4 10             	add    esp,0x10
c0015956:	90                   	nop
c0015957:	83 c4 0c             	add    esp,0xc
c001595a:	c3                   	ret    
c001595b:	90                   	nop

c001595c <Mouse::~Mouse()>:
c001595c:	83 ec 0c             	sub    esp,0xc
c001595f:	83 ec 0c             	sub    esp,0xc
c0015962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015966:	e8 cd ff ff ff       	call   c0015938 <Mouse::~Mouse()>
c001596b:	83 c4 10             	add    esp,0x10
c001596e:	83 ec 08             	sub    esp,0x8
c0015971:	68 58 01 00 00       	push   0x158
c0015976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001597a:	e8 e6 c7 ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c001597f:	83 c4 10             	add    esp,0x10
c0015982:	83 c4 0c             	add    esp,0xc
c0015985:	c3                   	ret    

c0015986 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015986:	55                   	push   ebp
c0015987:	57                   	push   edi
c0015988:	56                   	push   esi
c0015989:	53                   	push   ebx
c001598a:	81 ec 28 01 00 00    	sub    esp,0x128
c0015990:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015997:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001599e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00159a5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00159ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00159b0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00159b4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00159bb:	e8 42 df ff ff       	call   c0013902 <Device::getName()>
c00159c0:	5a                   	pop    edx
c00159c1:	59                   	pop    ecx
c00159c2:	50                   	push   eax
c00159c3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00159c7:	55                   	push   ebp
c00159c8:	e8 4f ad fe ff       	call   c000071c <strcpy>
c00159cd:	5b                   	pop    ebx
c00159ce:	58                   	pop    eax
c00159cf:	68 f4 79 02 c0       	push   0xc00279f4
c00159d4:	55                   	push   ebp
c00159d5:	e8 f9 ad fe ff       	call   c00007d3 <strcat>
c00159da:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00159e1:	e8 70 c7 ff ff       	call   c0012156 <operator new(unsigned long)>
c00159e6:	83 c4 0c             	add    esp,0xc
c00159e9:	89 c3                	mov    ebx,eax
c00159eb:	57                   	push   edi
c00159ec:	56                   	push   esi
c00159ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00159f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00159f5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00159fc:	55                   	push   ebp
c00159fd:	50                   	push   eax
c00159fe:	e8 e3 fb ff ff       	call   c00155e6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015a03:	83 c4 14             	add    esp,0x14
c0015a06:	53                   	push   ebx
c0015a07:	e8 90 fc ff ff       	call   c001569c <LogicalDisk::assignDriveLetter()>
c0015a0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a0f:	e8 3e fd ff ff       	call   c0015752 <LogicalDisk::mount()>
c0015a14:	58                   	pop    eax
c0015a15:	5a                   	pop    edx
c0015a16:	53                   	push   ebx
c0015a17:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a1e:	e8 fd db ff ff       	call   c0013620 <Device::addChild(Device*)>
c0015a23:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015a29:	5b                   	pop    ebx
c0015a2a:	5e                   	pop    esi
c0015a2b:	5f                   	pop    edi
c0015a2c:	5d                   	pop    ebp
c0015a2d:	c3                   	ret    

c0015a2e <createPartitionsForDisk(PhysicalDisk*)>:
c0015a2e:	55                   	push   ebp
c0015a2f:	57                   	push   edi
c0015a30:	56                   	push   esi
c0015a31:	53                   	push   ebx
c0015a32:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015a38:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015a3f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015a45:	3d 00 02 00 00       	cmp    eax,0x200
c0015a4a:	74 27                	je     c0015a73 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015a4c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015a52:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015a58:	83 ec 10             	sub    esp,0x10
c0015a5b:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015a5f:	99                   	cdq    
c0015a60:	c1 e6 0a             	shl    esi,0xa
c0015a63:	52                   	push   edx
c0015a64:	89 fd                	mov    ebp,edi
c0015a66:	50                   	push   eax
c0015a67:	55                   	push   ebp
c0015a68:	56                   	push   esi
c0015a69:	e8 ee d9 00 00       	call   c002345c <__udivdi3>
c0015a6e:	e9 b1 00 00 00       	jmp    c0015b24 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015a73:	83 ec 0c             	sub    esp,0xc
c0015a76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a78:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015a7c:	56                   	push   esi
c0015a7d:	6a 01                	push   0x1
c0015a7f:	6a 00                	push   0x0
c0015a81:	6a 00                	push   0x0
c0015a83:	53                   	push   ebx
c0015a84:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015a87:	83 c4 20             	add    esp,0x20
c0015a8a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015a92:	75 0a                	jne    c0015a9e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015a94:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015a9c:	74 2c                	je     c0015aca <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015a9e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015aa4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015aaa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015ab0:	83 ec 10             	sub    esp,0x10
c0015ab3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015ab7:	89 f7                	mov    edi,esi
c0015ab9:	c1 e0 0a             	shl    eax,0xa
c0015abc:	c1 ff 1f             	sar    edi,0x1f
c0015abf:	57                   	push   edi
c0015ac0:	56                   	push   esi
c0015ac1:	52                   	push   edx
c0015ac2:	50                   	push   eax
c0015ac3:	e8 94 d9 00 00       	call   c002345c <__udivdi3>
c0015ac8:	eb 5a                	jmp    c0015b24 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015aca:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015ad1:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015ad8:	83 e1 7f             	and    ecx,0x7f
c0015adb:	83 e0 7f             	and    eax,0x7f
c0015ade:	01 c1                	add    ecx,eax
c0015ae0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015ae7:	83 e0 7f             	and    eax,0x7f
c0015aea:	01 c1                	add    ecx,eax
c0015aec:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015af3:	83 e0 7f             	and    eax,0x7f
c0015af6:	00 c1                	add    cl,al
c0015af8:	74 41                	je     c0015b3b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015afa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b00:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b06:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b0c:	83 ec 10             	sub    esp,0x10
c0015b0f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b13:	89 f7                	mov    edi,esi
c0015b15:	c1 e0 0a             	shl    eax,0xa
c0015b18:	c1 ff 1f             	sar    edi,0x1f
c0015b1b:	57                   	push   edi
c0015b1c:	56                   	push   esi
c0015b1d:	52                   	push   edx
c0015b1e:	50                   	push   eax
c0015b1f:	e8 38 d9 00 00       	call   c002345c <__udivdi3>
c0015b24:	83 c4 14             	add    esp,0x14
c0015b27:	52                   	push   edx
c0015b28:	50                   	push   eax
c0015b29:	6a 00                	push   0x0
c0015b2b:	6a 00                	push   0x0
c0015b2d:	53                   	push   ebx
c0015b2e:	e8 53 fe ff ff       	call   c0015986 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015b33:	83 c4 20             	add    esp,0x20
c0015b36:	e9 79 01 00 00       	jmp    c0015cb4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015b3b:	89 f0                	mov    eax,esi
c0015b3d:	31 f6                	xor    esi,esi
c0015b3f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015b46:	75 02                	jne    c0015b4a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015b48:	89 f1                	mov    ecx,esi
c0015b4a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015b51:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015b58:	c1 e2 08             	shl    edx,0x8
c0015b5b:	c1 e7 10             	shl    edi,0x10
c0015b5e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015b66:	09 fa                	or     edx,edi
c0015b68:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015b70:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015b77:	83 c0 10             	add    eax,0x10
c0015b7a:	09 fa                	or     edx,edi
c0015b7c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015b83:	c1 e7 18             	shl    edi,0x18
c0015b86:	09 fa                	or     edx,edi
c0015b88:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015b8f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015b93:	c1 e7 10             	shl    edi,0x10
c0015b96:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015b9d:	c1 e2 08             	shl    edx,0x8
c0015ba0:	09 fa                	or     edx,edi
c0015ba2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015ba9:	09 fa                	or     edx,edi
c0015bab:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015bb2:	c1 e7 18             	shl    edi,0x18
c0015bb5:	09 fa                	or     edx,edi
c0015bb7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015bbb:	46                   	inc    esi
c0015bbc:	83 fe 04             	cmp    esi,0x4
c0015bbf:	0f 85 7a ff ff ff    	jne    c0015b3f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bc9:	83 f0 01             	xor    eax,0x1
c0015bcc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015bd0:	75 57                	jne    c0015c29 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015bd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bd6:	83 f0 01             	xor    eax,0x1
c0015bd9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015bdd:	75 4a                	jne    c0015c29 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015bdf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0015be3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015beb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015bf3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015bf9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015bff:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015c05:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015c09:	89 f7                	mov    edi,esi
c0015c0b:	c1 e0 0a             	shl    eax,0xa
c0015c0e:	c1 ff 1f             	sar    edi,0x1f
c0015c11:	57                   	push   edi
c0015c12:	56                   	push   esi
c0015c13:	52                   	push   edx
c0015c14:	50                   	push   eax
c0015c15:	e8 42 d8 00 00       	call   c002345c <__udivdi3>
c0015c1a:	83 c4 10             	add    esp,0x10
c0015c1d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c21:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c25:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015c29:	84 c9                	test   cl,cl
c0015c2b:	74 53                	je     c0015c80 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015c2d:	0f b6 c9             	movzx  ecx,cl
c0015c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015c38:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015c3c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015c48:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015c4c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015c50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015c54:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015c58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c5c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c60:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015c64:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0015c68:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0015c6c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015c70:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c78:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0015c7c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015c80:	31 ed                	xor    ebp,ebp
c0015c82:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015c86:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0015c8a:	89 f8                	mov    eax,edi
c0015c8c:	09 f0                	or     eax,esi
c0015c8e:	74 1e                	je     c0015cae <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015c90:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0015c94:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0015c98:	89 d1                	mov    ecx,edx
c0015c9a:	09 c1                	or     ecx,eax
c0015c9c:	74 10                	je     c0015cae <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015c9e:	83 ec 0c             	sub    esp,0xc
c0015ca1:	57                   	push   edi
c0015ca2:	56                   	push   esi
c0015ca3:	52                   	push   edx
c0015ca4:	50                   	push   eax
c0015ca5:	53                   	push   ebx
c0015ca6:	e8 db fc ff ff       	call   c0015986 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015cab:	83 c4 20             	add    esp,0x20
c0015cae:	45                   	inc    ebp
c0015caf:	83 fd 04             	cmp    ebp,0x4
c0015cb2:	75 ce                	jne    c0015c82 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0015cb4:	81 c4 5c 02 00 00    	add    esp,0x25c
c0015cba:	5b                   	pop    ebx
c0015cbb:	5e                   	pop    esi
c0015cbc:	5f                   	pop    edi
c0015cbd:	5d                   	pop    ebp
c0015cbe:	c3                   	ret    
c0015cbf:	90                   	nop

c0015cc0 <Timer::Timer(char const*)>:
c0015cc0:	83 ec 0c             	sub    esp,0xc
c0015cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cc7:	83 ec 08             	sub    esp,0x8
c0015cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cce:	50                   	push   eax
c0015ccf:	e8 3c db ff ff       	call   c0013810 <Device::Device(char const*)>
c0015cd4:	83 c4 10             	add    esp,0x10
c0015cd7:	ba 08 7a 02 c0       	mov    edx,0xc0027a08
c0015cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ce0:	89 10                	mov    DWORD PTR [eax],edx
c0015ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ce6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0015cf0:	90                   	nop
c0015cf1:	83 c4 0c             	add    esp,0xc
c0015cf4:	c3                   	ret    
c0015cf5:	90                   	nop

c0015cf6 <Timer::~Timer()>:
c0015cf6:	83 ec 0c             	sub    esp,0xc
c0015cf9:	ba 08 7a 02 c0       	mov    edx,0xc0027a08
c0015cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d02:	89 10                	mov    DWORD PTR [eax],edx
c0015d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d08:	83 ec 0c             	sub    esp,0xc
c0015d0b:	50                   	push   eax
c0015d0c:	e8 e1 d7 ff ff       	call   c00134f2 <Device::~Device()>
c0015d11:	83 c4 10             	add    esp,0x10
c0015d14:	90                   	nop
c0015d15:	83 c4 0c             	add    esp,0xc
c0015d18:	c3                   	ret    
c0015d19:	90                   	nop

c0015d1a <Timer::~Timer()>:
c0015d1a:	83 ec 0c             	sub    esp,0xc
c0015d1d:	83 ec 0c             	sub    esp,0xc
c0015d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d24:	e8 cd ff ff ff       	call   c0015cf6 <Timer::~Timer()>
c0015d29:	83 c4 10             	add    esp,0x10
c0015d2c:	83 ec 08             	sub    esp,0x8
c0015d2f:	68 5c 01 00 00       	push   0x15c
c0015d34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d38:	e8 28 c4 ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0015d3d:	83 c4 10             	add    esp,0x10
c0015d40:	83 c4 0c             	add    esp,0xc
c0015d43:	c3                   	ret    

c0015d44 <Timer::read()>:
c0015d44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d48:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d4e:	c3                   	ret    

c0015d4f <timerHandler(unsigned long long)>:
c0015d4f:	55                   	push   ebp
c0015d50:	57                   	push   edi
c0015d51:	56                   	push   esi
c0015d52:	53                   	push   ebx
c0015d53:	83 ec 0c             	sub    esp,0xc
c0015d56:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015d5a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015d5e:	01 35 d0 aa 02 c0    	add    DWORD PTR ds:0xc002aad0,esi
c0015d64:	11 3d d4 aa 02 c0    	adc    DWORD PTR ds:0xc002aad4,edi
c0015d6a:	80 3d 6d a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a46d,0x0
c0015d71:	0f 84 07 01 00 00    	je     c0015e7e <timerHandler(unsigned long long)+0x12f>
c0015d77:	e8 b7 5b 00 00       	call   c001b933 <lockStuff()>
c0015d7c:	83 ec 0c             	sub    esp,0xc
c0015d7f:	68 5c b9 02 c0       	push   0xc002b95c
c0015d84:	e8 45 f7 00 00       	call   c00254ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d89:	c7 04 24 5c b9 02 c0 	mov    DWORD PTR [esp],0xc002b95c
c0015d90:	89 c3                	mov    ebx,eax
c0015d92:	e8 3f f7 00 00       	call   c00254d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015d97:	83 c4 10             	add    esp,0x10
c0015d9a:	84 c0                	test   al,al
c0015d9c:	74 60                	je     c0015dfe <timerHandler(unsigned long long)+0xaf>
c0015d9e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015da4:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0015da7:	85 c0                	test   eax,eax
c0015da9:	0f 85 91 00 00 00    	jne    c0015e40 <timerHandler(unsigned long long)+0xf1>
c0015daf:	e9 be 00 00 00       	jmp    c0015e72 <timerHandler(unsigned long long)+0x123>
c0015db4:	83 ec 0c             	sub    esp,0xc
c0015db7:	55                   	push   ebp
c0015db8:	e8 67 61 00 00       	call   c001bf24 <unblockTask(ThreadControlBlock*)>
c0015dbd:	83 c4 10             	add    esp,0x10
c0015dc0:	39 eb                	cmp    ebx,ebp
c0015dc2:	75 12                	jne    c0015dd6 <timerHandler(unsigned long long)+0x87>
c0015dc4:	83 ec 0c             	sub    esp,0xc
c0015dc7:	68 5c b9 02 c0       	push   0xc002b95c
c0015dcc:	e8 fd f6 00 00       	call   c00254ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015dd1:	89 c3                	mov    ebx,eax
c0015dd3:	83 c4 10             	add    esp,0x10
c0015dd6:	83 ec 0c             	sub    esp,0xc
c0015dd9:	68 5c b9 02 c0       	push   0xc002b95c
c0015dde:	e8 f3 f6 00 00       	call   c00254d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015de3:	83 c4 10             	add    esp,0x10
c0015de6:	84 c0                	test   al,al
c0015de8:	75 b4                	jne    c0015d9e <timerHandler(unsigned long long)+0x4f>
c0015dea:	83 ec 0c             	sub    esp,0xc
c0015ded:	68 5c b9 02 c0       	push   0xc002b95c
c0015df2:	e8 d7 f6 00 00       	call   c00254ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015df7:	83 c4 10             	add    esp,0x10
c0015dfa:	39 d8                	cmp    eax,ebx
c0015dfc:	74 a0                	je     c0015d9e <timerHandler(unsigned long long)+0x4f>
c0015dfe:	83 ec 0c             	sub    esp,0xc
c0015e01:	68 5c b9 02 c0       	push   0xc002b95c
c0015e06:	e8 c3 f6 00 00       	call   c00254ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e0b:	c7 04 24 5c b9 02 c0 	mov    DWORD PTR [esp],0xc002b95c
c0015e12:	89 c5                	mov    ebp,eax
c0015e14:	e8 d9 f6 00 00       	call   c00254f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e19:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015e1c:	83 c4 10             	add    esp,0x10
c0015e1f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015e22:	39 15 d0 aa 02 c0    	cmp    DWORD PTR ds:0xc002aad0,edx
c0015e28:	a1 d4 aa 02 c0       	mov    eax,ds:0xc002aad4
c0015e2d:	19 c8                	sbb    eax,ecx
c0015e2f:	73 83                	jae    c0015db4 <timerHandler(unsigned long long)+0x65>
c0015e31:	50                   	push   eax
c0015e32:	50                   	push   eax
c0015e33:	55                   	push   ebp
c0015e34:	68 5c b9 02 c0       	push   0xc002b95c
c0015e39:	e8 62 f7 00 00       	call   c00255a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e3e:	eb 93                	jmp    c0015dd3 <timerHandler(unsigned long long)+0x84>
c0015e40:	80 3d 6c a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a46c,0x0
c0015e47:	74 29                	je     c0015e72 <timerHandler(unsigned long long)+0x123>
c0015e49:	39 c6                	cmp    esi,eax
c0015e4b:	bb 00 00 00 00       	mov    ebx,0x0
c0015e50:	19 df                	sbb    edi,ebx
c0015e52:	72 19                	jb     c0015e6d <timerHandler(unsigned long long)+0x11e>
c0015e54:	e8 b3 5a 00 00       	call   c001b90c <lockScheduler()>
c0015e59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e5e:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015e61:	e8 e2 5d 00 00       	call   c001bc48 <schedule()>
c0015e66:	e8 a3 5a 00 00       	call   c001b90e <unlockScheduler()>
c0015e6b:	eb 05                	jmp    c0015e72 <timerHandler(unsigned long long)+0x123>
c0015e6d:	29 f0                	sub    eax,esi
c0015e6f:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015e72:	83 c4 0c             	add    esp,0xc
c0015e75:	5b                   	pop    ebx
c0015e76:	5e                   	pop    esi
c0015e77:	5f                   	pop    edi
c0015e78:	5d                   	pop    ebp
c0015e79:	e9 4f 5e 00 00       	jmp    c001bccd <unlockStuff()>
c0015e7e:	83 c4 0c             	add    esp,0xc
c0015e81:	5b                   	pop    ebx
c0015e82:	5e                   	pop    esi
c0015e83:	5f                   	pop    edi
c0015e84:	5d                   	pop    ebp
c0015e85:	c3                   	ret    

c0015e86 <setupTimer(int)>:
c0015e86:	57                   	push   edi
c0015e87:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015e8c:	56                   	push   esi
c0015e8d:	53                   	push   ebx
c0015e8e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015e98:	83 ec 0c             	sub    esp,0xc
c0015e9b:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015ea1:	e8 5c da ff ff       	call   c0013902 <Device::getName()>
c0015ea6:	83 c4 10             	add    esp,0x10
c0015ea9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0015eac:	0f 85 8d 00 00 00    	jne    c0015f3f <setupTimer(int)+0xb9>
c0015eb2:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015eb7:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0015ebe:	74 7f                	je     c0015f3f <setupTimer(int)+0xb9>
c0015ec0:	83 ec 0c             	sub    esp,0xc
c0015ec3:	68 5c 01 00 00       	push   0x15c
c0015ec8:	e8 89 c2 ff ff       	call   c0012156 <operator new(unsigned long)>
c0015ecd:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ed0:	89 c3                	mov    ebx,eax
c0015ed2:	e8 71 d1 00 00       	call   c0023048 <PIT::PIT()>
c0015ed7:	59                   	pop    ecx
c0015ed8:	5f                   	pop    edi
c0015ed9:	53                   	push   ebx
c0015eda:	ff 35 68 a4 02 c0    	push   DWORD PTR ds:0xc002a468
c0015ee0:	e8 3b d7 ff ff       	call   c0013620 <Device::addChild(Device*)>
c0015ee5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ee7:	6a 00                	push   0x0
c0015ee9:	6a 00                	push   0x0
c0015eeb:	56                   	push   esi
c0015eec:	53                   	push   ebx
c0015eed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ef0:	83 c4 14             	add    esp,0x14
c0015ef3:	68 60 01 00 00       	push   0x160
c0015ef8:	e8 59 c2 ff ff       	call   c0012156 <operator new(unsigned long)>
c0015efd:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f00:	89 c7                	mov    edi,eax
c0015f02:	e8 f1 cf 00 00       	call   c0022ef8 <APICTimer::APICTimer()>
c0015f07:	6a 00                	push   0x0
c0015f09:	6a 00                	push   0x0
c0015f0b:	56                   	push   esi
c0015f0c:	57                   	push   edi
c0015f0d:	e8 e8 ce 00 00       	call   c0022dfa <APICTimer::open(int, int, void*)>
c0015f12:	83 c4 20             	add    esp,0x20
c0015f15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f17:	6a 00                	push   0x0
c0015f19:	6a 00                	push   0x0
c0015f1b:	6a 00                	push   0x0
c0015f1d:	53                   	push   ebx
c0015f1e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015f21:	58                   	pop    eax
c0015f22:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f27:	5a                   	pop    edx
c0015f28:	57                   	push   edi
c0015f29:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015f2f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015f35:	e8 e6 d6 ff ff       	call   c0013620 <Device::addChild(Device*)>
c0015f3a:	83 c4 10             	add    esp,0x10
c0015f3d:	eb 33                	jmp    c0015f72 <setupTimer(int)+0xec>
c0015f3f:	83 ec 0c             	sub    esp,0xc
c0015f42:	68 5c 01 00 00       	push   0x15c
c0015f47:	e8 0a c2 ff ff       	call   c0012156 <operator new(unsigned long)>
c0015f4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f4f:	89 c3                	mov    ebx,eax
c0015f51:	e8 f2 d0 00 00       	call   c0023048 <PIT::PIT()>
c0015f56:	58                   	pop    eax
c0015f57:	5a                   	pop    edx
c0015f58:	53                   	push   ebx
c0015f59:	ff 35 68 a4 02 c0    	push   DWORD PTR ds:0xc002a468
c0015f5f:	e8 bc d6 ff ff       	call   c0013620 <Device::addChild(Device*)>
c0015f64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f66:	6a 00                	push   0x0
c0015f68:	6a 00                	push   0x0
c0015f6a:	56                   	push   esi
c0015f6b:	53                   	push   ebx
c0015f6c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f6f:	83 c4 20             	add    esp,0x20
c0015f72:	89 d8                	mov    eax,ebx
c0015f74:	5b                   	pop    ebx
c0015f75:	5e                   	pop    esi
c0015f76:	5f                   	pop    edi
c0015f77:	c3                   	ret    

c0015f78 <VCache::VCache(PhysicalDisk*)>:
c0015f78:	53                   	push   ebx
c0015f79:	83 ec 08             	sub    esp,0x8
c0015f7c:	ba 38 7a 02 c0       	mov    edx,0xc0027a38
c0015f81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f85:	89 10                	mov    DWORD PTR [eax],edx
c0015f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f8b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0015f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f96:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0015f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fa1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0015fa8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015faf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fb3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0015fba:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fc5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0015fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fd0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0015fd4:	83 ec 0c             	sub    esp,0xc
c0015fd7:	6a 10                	push   0x10
c0015fd9:	e8 78 c1 ff ff       	call   c0012156 <operator new(unsigned long)>
c0015fde:	83 c4 10             	add    esp,0x10
c0015fe1:	89 c3                	mov    ebx,eax
c0015fe3:	83 ec 0c             	sub    esp,0xc
c0015fe6:	53                   	push   ebx
c0015fe7:	e8 40 5a 00 00       	call   c001ba2c <Mutex::Mutex()>
c0015fec:	83 c4 10             	add    esp,0x10
c0015fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ff3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0015ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ffa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015ffe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016005:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001600c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016010:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001601a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001601d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016021:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016027:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001602d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016031:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016034:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001603b:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001603f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016043:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016049:	c1 e0 06             	shl    eax,0x6
c001604c:	83 ec 0c             	sub    esp,0xc
c001604f:	50                   	push   eax
c0016050:	e8 c9 90 ff ff       	call   c000f11e <malloc>
c0016055:	83 c4 10             	add    esp,0x10
c0016058:	89 c2                	mov    edx,eax
c001605a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001605e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016061:	90                   	nop
c0016062:	83 c4 08             	add    esp,0x8
c0016065:	5b                   	pop    ebx
c0016066:	c3                   	ret    
c0016067:	90                   	nop

c0016068 <VCache::writeWriteBuffer()>:
c0016068:	53                   	push   ebx
c0016069:	83 ec 14             	sub    esp,0x14
c001606c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016070:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016073:	8b 10                	mov    edx,DWORD PTR [eax]
c0016075:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016078:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001607b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001607e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016081:	50                   	push   eax
c0016082:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016085:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001608c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016093:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016097:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001609e:	83 c4 28             	add    esp,0x28
c00160a1:	5b                   	pop    ebx
c00160a2:	c3                   	ret    
c00160a3:	90                   	nop

c00160a4 <VCache::~VCache()>:
c00160a4:	83 ec 0c             	sub    esp,0xc
c00160a7:	ba 38 7a 02 c0       	mov    edx,0xc0027a38
c00160ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160b0:	89 10                	mov    DWORD PTR [eax],edx
c00160b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160b6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00160b9:	84 c0                	test   al,al
c00160bb:	74 0f                	je     c00160cc <VCache::~VCache()+0x28>
c00160bd:	83 ec 0c             	sub    esp,0xc
c00160c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160c4:	e8 9f ff ff ff       	call   c0016068 <VCache::writeWriteBuffer()>
c00160c9:	83 c4 10             	add    esp,0x10
c00160cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160d0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00160d3:	83 ec 0c             	sub    esp,0xc
c00160d6:	50                   	push   eax
c00160d7:	e8 52 90 ff ff       	call   c000f12e <free>
c00160dc:	83 c4 10             	add    esp,0x10
c00160df:	90                   	nop
c00160e0:	83 c4 0c             	add    esp,0xc
c00160e3:	c3                   	ret    

c00160e4 <VCache::~VCache()>:
c00160e4:	83 ec 0c             	sub    esp,0xc
c00160e7:	83 ec 0c             	sub    esp,0xc
c00160ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160ee:	e8 b1 ff ff ff       	call   c00160a4 <VCache::~VCache()>
c00160f3:	83 c4 10             	add    esp,0x10
c00160f6:	83 ec 08             	sub    esp,0x8
c00160f9:	6a 30                	push   0x30
c00160fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160ff:	e8 61 c0 ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0016104:	83 c4 10             	add    esp,0x10
c0016107:	83 c4 0c             	add    esp,0xc
c001610a:	c3                   	ret    
c001610b:	90                   	nop

c001610c <VCache::write(unsigned long long, int, void*)>:
c001610c:	55                   	push   ebp
c001610d:	57                   	push   edi
c001610e:	56                   	push   esi
c001610f:	53                   	push   ebx
c0016110:	83 ec 28             	sub    esp,0x28
c0016113:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016117:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001611b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001611f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016123:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016126:	e8 63 5d 00 00       	call   c001be8e <Semaphore::acquire()>
c001612b:	83 c4 10             	add    esp,0x10
c001612e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016132:	74 66                	je     c001619a <VCache::write(unsigned long long, int, void*)+0x8e>
c0016134:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016137:	99                   	cdq    
c0016138:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001613c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001613f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016142:	89 c1                	mov    ecx,eax
c0016144:	89 d0                	mov    eax,edx
c0016146:	31 f1                	xor    ecx,esi
c0016148:	31 f8                	xor    eax,edi
c001614a:	89 ca                	mov    edx,ecx
c001614c:	09 c2                	or     edx,eax
c001614e:	75 3e                	jne    c001618e <VCache::write(unsigned long long, int, void*)+0x82>
c0016150:	83 fd 01             	cmp    ebp,0x1
c0016153:	75 39                	jne    c001618e <VCache::write(unsigned long long, int, void*)+0x82>
c0016155:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016158:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001615e:	51                   	push   ecx
c001615f:	50                   	push   eax
c0016160:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016164:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016168:	0f af c8             	imul   ecx,eax
c001616b:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001616e:	51                   	push   ecx
c001616f:	e8 d3 a4 fe ff       	call   c0000647 <memcpy>
c0016174:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016177:	83 c4 10             	add    esp,0x10
c001617a:	40                   	inc    eax
c001617b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001617e:	83 f8 40             	cmp    eax,0x40
c0016181:	75 57                	jne    c00161da <VCache::write(unsigned long long, int, void*)+0xce>
c0016183:	83 ec 0c             	sub    esp,0xc
c0016186:	53                   	push   ebx
c0016187:	e8 dc fe ff ff       	call   c0016068 <VCache::writeWriteBuffer()>
c001618c:	eb 34                	jmp    c00161c2 <VCache::write(unsigned long long, int, void*)+0xb6>
c001618e:	83 ec 0c             	sub    esp,0xc
c0016191:	53                   	push   ebx
c0016192:	e8 d1 fe ff ff       	call   c0016068 <VCache::writeWriteBuffer()>
c0016197:	83 c4 10             	add    esp,0x10
c001619a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001619d:	83 fd 3f             	cmp    ebp,0x3f
c00161a0:	7f 25                	jg     c00161c7 <VCache::write(unsigned long long, int, void*)+0xbb>
c00161a2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00161a5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00161a8:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00161ab:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00161af:	52                   	push   edx
c00161b0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00161b6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161ba:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00161bd:	e8 85 a4 fe ff       	call   c0000647 <memcpy>
c00161c2:	83 c4 10             	add    esp,0x10
c00161c5:	eb 13                	jmp    c00161da <VCache::write(unsigned long long, int, void*)+0xce>
c00161c7:	83 ec 0c             	sub    esp,0xc
c00161ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00161cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00161d0:	55                   	push   ebp
c00161d1:	57                   	push   edi
c00161d2:	56                   	push   esi
c00161d3:	50                   	push   eax
c00161d4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00161d7:	83 c4 20             	add    esp,0x20
c00161da:	83 ec 0c             	sub    esp,0xc
c00161dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00161e0:	e8 31 62 00 00       	call   c001c416 <Semaphore::release()>
c00161e5:	83 c4 2c             	add    esp,0x2c
c00161e8:	31 c0                	xor    eax,eax
c00161ea:	5b                   	pop    ebx
c00161eb:	5e                   	pop    esi
c00161ec:	5f                   	pop    edi
c00161ed:	5d                   	pop    ebp
c00161ee:	c3                   	ret    
c00161ef:	90                   	nop

c00161f0 <VCache::read(unsigned long long, int, void*)>:
c00161f0:	57                   	push   edi
c00161f1:	56                   	push   esi
c00161f2:	53                   	push   ebx
c00161f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00161f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00161fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00161ff:	83 ec 0c             	sub    esp,0xc
c0016202:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016205:	e8 84 5c 00 00       	call   c001be8e <Semaphore::acquire()>
c001620a:	83 c4 10             	add    esp,0x10
c001620d:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016211:	74 0c                	je     c001621f <VCache::read(unsigned long long, int, void*)+0x2f>
c0016213:	83 ec 0c             	sub    esp,0xc
c0016216:	53                   	push   ebx
c0016217:	e8 4c fe ff ff       	call   c0016068 <VCache::writeWriteBuffer()>
c001621c:	83 c4 10             	add    esp,0x10
c001621f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016222:	83 ec 0c             	sub    esp,0xc
c0016225:	8b 10                	mov    edx,DWORD PTR [eax]
c0016227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001622b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001622f:	57                   	push   edi
c0016230:	56                   	push   esi
c0016231:	50                   	push   eax
c0016232:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016235:	83 c4 14             	add    esp,0x14
c0016238:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001623b:	e8 d6 61 00 00       	call   c001c416 <Semaphore::release()>
c0016240:	83 c4 10             	add    esp,0x10
c0016243:	31 c0                	xor    eax,eax
c0016245:	5b                   	pop    ebx
c0016246:	5e                   	pop    esi
c0016247:	5f                   	pop    edi
c0016248:	c3                   	ret    
c0016249:	90                   	nop

c001624a <Video::putrect(int, int, int, int, unsigned int)>:
c001624a:	55                   	push   ebp
c001624b:	57                   	push   edi
c001624c:	56                   	push   esi
c001624d:	53                   	push   ebx
c001624e:	83 ec 1c             	sub    esp,0x1c
c0016251:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016255:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016259:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001625d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016261:	01 e8                	add    eax,ebp
c0016263:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016267:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001626b:	01 df                	add    edi,ebx
c001626d:	39 fb                	cmp    ebx,edi
c001626f:	7d 1b                	jge    c001628c <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0016271:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016275:	7d 12                	jge    c0016289 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0016277:	8b 16                	mov    edx,DWORD PTR [esi]
c0016279:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001627d:	53                   	push   ebx
c001627e:	55                   	push   ebp
c001627f:	45                   	inc    ebp
c0016280:	56                   	push   esi
c0016281:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016284:	83 c4 10             	add    esp,0x10
c0016287:	eb e8                	jmp    c0016271 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0016289:	43                   	inc    ebx
c001628a:	eb e1                	jmp    c001626d <Video::putrect(int, int, int, int, unsigned int)+0x23>
c001628c:	83 c4 1c             	add    esp,0x1c
c001628f:	5b                   	pop    ebx
c0016290:	5e                   	pop    esi
c0016291:	5f                   	pop    edi
c0016292:	5d                   	pop    ebp
c0016293:	c3                   	ret    

c0016294 <Video::blit(unsigned int*, int, int, int, int)>:
c0016294:	55                   	push   ebp
c0016295:	57                   	push   edi
c0016296:	56                   	push   esi
c0016297:	53                   	push   ebx
c0016298:	83 ec 1c             	sub    esp,0x1c
c001629b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001629f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00162a3:	85 c0                	test   eax,eax
c00162a5:	79 02                	jns    c00162a9 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00162a7:	31 c0                	xor    eax,eax
c00162a9:	c1 e0 02             	shl    eax,0x2
c00162ac:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00162b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00162b8:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00162bc:	39 d8                	cmp    eax,ebx
c00162be:	7e 49                	jle    c0016309 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00162c0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00162c6:	7c 41                	jl     c0016309 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00162c8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00162cc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00162d0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00162d4:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00162d8:	39 f9                	cmp    ecx,edi
c00162da:	7e 22                	jle    c00162fe <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00162dc:	83 c5 04             	add    ebp,0x4
c00162df:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00162e5:	7c 14                	jl     c00162fb <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00162e7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00162e9:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00162ec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00162f0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00162f4:	56                   	push   esi
c00162f5:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00162f8:	83 c4 10             	add    esp,0x10
c00162fb:	47                   	inc    edi
c00162fc:	eb d2                	jmp    c00162d0 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00162fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016302:	43                   	inc    ebx
c0016303:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016307:	eb ab                	jmp    c00162b4 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016309:	83 c4 1c             	add    esp,0x1c
c001630c:	5b                   	pop    ebx
c001630d:	5e                   	pop    esi
c001630e:	5f                   	pop    edi
c001630f:	5d                   	pop    ebp
c0016310:	c3                   	ret    
c0016311:	90                   	nop

c0016312 <Video::clearScreen(unsigned int)>:
c0016312:	57                   	push   edi
c0016313:	56                   	push   esi
c0016314:	53                   	push   ebx
c0016315:	31 db                	xor    ebx,ebx
c0016317:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001631b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016321:	7e 1f                	jle    c0016342 <Video::clearScreen(unsigned int)+0x30>
c0016323:	31 ff                	xor    edi,edi
c0016325:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001632b:	7e 12                	jle    c001633f <Video::clearScreen(unsigned int)+0x2d>
c001632d:	8b 06                	mov    eax,DWORD PTR [esi]
c001632f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016333:	53                   	push   ebx
c0016334:	57                   	push   edi
c0016335:	47                   	inc    edi
c0016336:	56                   	push   esi
c0016337:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001633a:	83 c4 10             	add    esp,0x10
c001633d:	eb e6                	jmp    c0016325 <Video::clearScreen(unsigned int)+0x13>
c001633f:	43                   	inc    ebx
c0016340:	eb d9                	jmp    c001631b <Video::clearScreen(unsigned int)+0x9>
c0016342:	5b                   	pop    ebx
c0016343:	5e                   	pop    esi
c0016344:	5f                   	pop    edi
c0016345:	c3                   	ret    

c0016346 <Video::putpixel(int, int, unsigned int)>:
c0016346:	c7 44 24 04 40 7a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027a40
c001634e:	e9 f2 be ff ff       	jmp    c0012245 <Dbg::kprintf(char const*, ...)>
c0016353:	90                   	nop

c0016354 <Video::Video(char const*)>:
c0016354:	83 ec 0c             	sub    esp,0xc
c0016357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001635b:	83 ec 08             	sub    esp,0x8
c001635e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016362:	50                   	push   eax
c0016363:	e8 a8 d4 ff ff       	call   c0013810 <Device::Device(char const*)>
c0016368:	83 c4 10             	add    esp,0x10
c001636b:	ba 58 7a 02 c0       	mov    edx,0xc0027a58
c0016370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016374:	89 10                	mov    DWORD PTR [eax],edx
c0016376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001637a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016384:	90                   	nop
c0016385:	83 c4 0c             	add    esp,0xc
c0016388:	c3                   	ret    
c0016389:	90                   	nop

c001638a <Video::~Video()>:
c001638a:	83 ec 0c             	sub    esp,0xc
c001638d:	ba 58 7a 02 c0       	mov    edx,0xc0027a58
c0016392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016396:	89 10                	mov    DWORD PTR [eax],edx
c0016398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001639c:	83 ec 0c             	sub    esp,0xc
c001639f:	50                   	push   eax
c00163a0:	e8 4d d1 ff ff       	call   c00134f2 <Device::~Device()>
c00163a5:	83 c4 10             	add    esp,0x10
c00163a8:	90                   	nop
c00163a9:	83 c4 0c             	add    esp,0xc
c00163ac:	c3                   	ret    
c00163ad:	90                   	nop

c00163ae <Video::~Video()>:
c00163ae:	83 ec 0c             	sub    esp,0xc
c00163b1:	83 ec 0c             	sub    esp,0xc
c00163b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b8:	e8 cd ff ff ff       	call   c001638a <Video::~Video()>
c00163bd:	83 c4 10             	add    esp,0x10
c00163c0:	83 ec 08             	sub    esp,0x8
c00163c3:	68 64 01 00 00       	push   0x164
c00163c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163cc:	e8 94 bd ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c00163d1:	83 c4 10             	add    esp,0x10
c00163d4:	83 c4 0c             	add    esp,0xc
c00163d7:	c3                   	ret    

c00163d8 <Video::isMonochrome()>:
c00163d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163dc:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00163e2:	c3                   	ret    
c00163e3:	90                   	nop

c00163e4 <Video::getWidth()>:
c00163e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163e8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163ee:	c3                   	ret    
c00163ef:	90                   	nop

c00163f0 <Video::getHeight()>:
c00163f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163f4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00163fa:	c3                   	ret    
c00163fb:	90                   	nop

c00163fc <Video::drawCursor(int, int, unsigned char*, int)>:
c00163fc:	55                   	push   ebp
c00163fd:	57                   	push   edi
c00163fe:	56                   	push   esi
c00163ff:	53                   	push   ebx
c0016400:	83 ec 2c             	sub    esp,0x2c
c0016403:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016407:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001640b:	83 f8 01             	cmp    eax,0x1
c001640e:	19 c9                	sbb    ecx,ecx
c0016410:	31 db                	xor    ebx,ebx
c0016412:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016416:	89 cd                	mov    ebp,ecx
c0016418:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016420:	f7 d5                	not    ebp
c0016422:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016428:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001642c:	01 d8                	add    eax,ebx
c001642e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016432:	56                   	push   esi
c0016433:	e8 b8 ff ff ff       	call   c00163f0 <Video::getHeight()>
c0016438:	59                   	pop    ecx
c0016439:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001643d:	7e 70                	jle    c00164af <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001643f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016443:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016447:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001644a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001644e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016452:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016459:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001645d:	89 f8                	mov    eax,edi
c001645f:	83 c0 20             	add    eax,0x20
c0016462:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016466:	56                   	push   esi
c0016467:	e8 78 ff ff ff       	call   c00163e4 <Video::getWidth()>
c001646c:	5a                   	pop    edx
c001646d:	39 c7                	cmp    edi,eax
c001646f:	7d 34                	jge    c00164a5 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016471:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016476:	74 05                	je     c001647d <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016478:	8b 06                	mov    eax,DWORD PTR [esi]
c001647a:	55                   	push   ebp
c001647b:	eb 0d                	jmp    c001648a <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001647d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016482:	74 12                	je     c0016496 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016484:	8b 06                	mov    eax,DWORD PTR [esi]
c0016486:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001648a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001648e:	57                   	push   edi
c001648f:	56                   	push   esi
c0016490:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016493:	83 c4 10             	add    esp,0x10
c0016496:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001649a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001649e:	47                   	inc    edi
c001649f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00164a3:	75 c1                	jne    c0016466 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00164a5:	43                   	inc    ebx
c00164a6:	83 fb 20             	cmp    ebx,0x20
c00164a9:	0f 85 79 ff ff ff    	jne    c0016428 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00164af:	83 c4 2c             	add    esp,0x2c
c00164b2:	5b                   	pop    ebx
c00164b3:	5e                   	pop    esi
c00164b4:	5f                   	pop    edi
c00164b5:	5d                   	pop    ebp
c00164b6:	c3                   	ret    
c00164b7:	90                   	nop

c00164b8 <ACPI::close(int, int, void*)>:
c00164b8:	83 ec 1c             	sub    esp,0x1c
c00164bb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00164c3:	74 0a                	je     c00164cf <ACPI::close(int, int, void*)+0x17>
c00164c5:	b8 00 00 00 00       	mov    eax,0x0
c00164ca:	e9 9a 00 00 00       	jmp    c0016569 <ACPI::close(int, int, void*)+0xb1>
c00164cf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00164d4:	75 37                	jne    c001650d <ACPI::close(int, int, void*)+0x55>
c00164d6:	83 ec 0c             	sub    esp,0xc
c00164d9:	68 90 7a 02 c0       	push   0xc0027a90
c00164de:	e8 62 bd ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00164e3:	83 c4 10             	add    esp,0x10
c00164e6:	a1 e8 aa 02 c0       	mov    eax,ds:0xc002aae8
c00164eb:	85 c0                	test   eax,eax
c00164ed:	74 07                	je     c00164f6 <ACPI::close(int, int, void*)+0x3e>
c00164ef:	a1 e8 aa 02 c0       	mov    eax,ds:0xc002aae8
c00164f4:	ff d0                	call   eax
c00164f6:	83 ec 0c             	sub    esp,0xc
c00164f9:	68 44 7b 02 c0       	push   0xc0027b44
c00164fe:	e8 c0 24 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0016503:	83 c4 10             	add    esp,0x10
c0016506:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001650b:	eb 5c                	jmp    c0016569 <ACPI::close(int, int, void*)+0xb1>
c001650d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016512:	75 50                	jne    c0016564 <ACPI::close(int, int, void*)+0xac>
c0016514:	a1 e4 aa 02 c0       	mov    eax,ds:0xc002aae4
c0016519:	85 c0                	test   eax,eax
c001651b:	74 07                	je     c0016524 <ACPI::close(int, int, void*)+0x6c>
c001651d:	a1 e4 aa 02 c0       	mov    eax,ds:0xc002aae4
c0016522:	ff d0                	call   eax
c0016524:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016529:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001652e:	83 e0 02             	and    eax,0x2
c0016531:	74 1c                	je     c001654f <ACPI::close(int, int, void*)+0x97>
c0016533:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001653a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001653e:	89 c2                	mov    edx,eax
c0016540:	ec                   	in     al,dx
c0016541:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016545:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016549:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001654d:	eb da                	jmp    c0016529 <ACPI::close(int, int, void*)+0x71>
c001654f:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016556:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001655b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001655f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016563:	ee                   	out    dx,al
c0016564:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016569:	83 c4 1c             	add    esp,0x1c
c001656c:	c3                   	ret    

c001656d <findRSDP()>:
c001656d:	83 ec 1c             	sub    esp,0x1c
c0016570:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016575:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001657b:	83 e0 04             	and    eax,0x4
c001657e:	84 c0                	test   al,al
c0016580:	75 07                	jne    c0016589 <findRSDP()+0x1c>
c0016582:	b8 00 00 00 00       	mov    eax,0x0
c0016587:	eb 6a                	jmp    c00165f3 <findRSDP()+0x86>
c0016589:	a1 b0 a4 02 c0       	mov    eax,ds:0xc002a4b0
c001658e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016593:	7f 1b                	jg     c00165b0 <findRSDP()+0x43>
c0016595:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001659a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00165a0:	83 e2 fb             	and    edx,0xfffffffb
c00165a3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00165a9:	b8 00 00 00 00       	mov    eax,0x0
c00165ae:	eb 43                	jmp    c00165f3 <findRSDP()+0x86>
c00165b0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00165b8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00165c0:	77 2c                	ja     c00165ee <findRSDP()+0x81>
c00165c2:	83 ec 04             	sub    esp,0x4
c00165c5:	6a 08                	push   0x8
c00165c7:	68 9d 7a 02 c0       	push   0xc0027a9d
c00165cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00165d0:	e8 0f a0 fe ff       	call   c00005e4 <memcmp>
c00165d5:	83 c4 10             	add    esp,0x10
c00165d8:	85 c0                	test   eax,eax
c00165da:	0f 94 c0             	sete   al
c00165dd:	84 c0                	test   al,al
c00165df:	74 06                	je     c00165e7 <findRSDP()+0x7a>
c00165e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00165e5:	eb 0c                	jmp    c00165f3 <findRSDP()+0x86>
c00165e7:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00165ec:	eb ca                	jmp    c00165b8 <findRSDP()+0x4b>
c00165ee:	b8 00 00 00 00       	mov    eax,0x0
c00165f3:	83 c4 1c             	add    esp,0x1c
c00165f6:	c3                   	ret    

c00165f7 <loadACPITables(unsigned char*)>:
c00165f7:	56                   	push   esi
c00165f8:	53                   	push   ebx
c00165f9:	83 ec 44             	sub    esp,0x44
c00165fc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016601:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016607:	83 e0 04             	and    eax,0x4
c001660a:	84 c0                	test   al,al
c001660c:	0f 84 05 02 00 00    	je     c0016817 <loadACPITables(unsigned char*)+0x220>
c0016612:	a0 00 ad 02 c0       	mov    al,ds:0xc002ad00
c0016617:	84 c0                	test   al,al
c0016619:	74 75                	je     c0016690 <loadACPITables(unsigned char*)+0x99>
c001661b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001661f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016623:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016627:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001662a:	83 e8 24             	sub    eax,0x24
c001662d:	c1 e8 03             	shr    eax,0x3
c0016630:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016634:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001663c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016640:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016644:	0f 8d b2 00 00 00    	jge    c00166fc <loadACPITables(unsigned char*)+0x105>
c001664a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001664e:	83 c0 24             	add    eax,0x24
c0016651:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016655:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016659:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001665d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016661:	c1 e0 03             	shl    eax,0x3
c0016664:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016668:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001666c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001666f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016671:	89 c1                	mov    ecx,eax
c0016673:	a1 ec aa 02 c0       	mov    eax,ds:0xc002aaec
c0016678:	8d 50 01             	lea    edx,[eax+0x1]
c001667b:	89 15 ec aa 02 c0    	mov    DWORD PTR ds:0xc002aaec,edx
c0016681:	89 ca                	mov    edx,ecx
c0016683:	89 14 c5 04 ab 02 c0 	mov    DWORD PTR [eax*8-0x3ffd54fc],edx
c001668a:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c001668e:	eb ac                	jmp    c001663c <loadACPITables(unsigned char*)+0x45>
c0016690:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016694:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001669c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001669f:	83 e8 24             	sub    eax,0x24
c00166a2:	c1 e8 02             	shr    eax,0x2
c00166a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00166a9:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00166b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00166b5:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00166b9:	7d 41                	jge    c00166fc <loadACPITables(unsigned char*)+0x105>
c00166bb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166bf:	83 c0 24             	add    eax,0x24
c00166c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00166c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00166ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00166d2:	c1 e0 02             	shl    eax,0x2
c00166d5:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00166d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00166dd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00166df:	a1 ec aa 02 c0       	mov    eax,ds:0xc002aaec
c00166e4:	8d 50 01             	lea    edx,[eax+0x1]
c00166e7:	89 15 ec aa 02 c0    	mov    DWORD PTR ds:0xc002aaec,edx
c00166ed:	89 ca                	mov    edx,ecx
c00166ef:	89 14 c5 04 ab 02 c0 	mov    DWORD PTR [eax*8-0x3ffd54fc],edx
c00166f6:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00166fa:	eb b5                	jmp    c00166b1 <loadACPITables(unsigned char*)+0xba>
c00166fc:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016704:	a1 ec aa 02 c0       	mov    eax,ds:0xc002aaec
c0016709:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001670d:	0f 8d 05 01 00 00    	jge    c0016818 <loadACPITables(unsigned char*)+0x221>
c0016713:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016717:	8b 04 c5 04 ab 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd54fc]
c001671e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016726:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001672a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001672e:	25 ff 0f 00 00       	and    eax,0xfff
c0016733:	89 c6                	mov    esi,eax
c0016735:	e8 b7 ac ff ff       	call   c00113f1 <Virt::getAKernelVAS()>
c001673a:	89 c3                	mov    ebx,eax
c001673c:	83 ec 0c             	sub    esp,0xc
c001673f:	6a 01                	push   0x1
c0016741:	e8 1b ab ff ff       	call   c0011261 <Virt::allocateKernelVirtualPages(int)>
c0016746:	83 c4 10             	add    esp,0x10
c0016749:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001674d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016753:	83 ec 0c             	sub    esp,0xc
c0016756:	6a 01                	push   0x1
c0016758:	6a 01                	push   0x1
c001675a:	50                   	push   eax
c001675b:	52                   	push   edx
c001675c:	53                   	push   ebx
c001675d:	e8 b4 b4 ff ff       	call   c0011c16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016762:	83 c4 20             	add    esp,0x20
c0016765:	09 f0                	or     eax,esi
c0016767:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001676b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001676f:	c1 e0 03             	shl    eax,0x3
c0016772:	05 00 ab 02 c0       	add    eax,0xc002ab00
c0016777:	83 ec 04             	sub    esp,0x4
c001677a:	6a 04                	push   0x4
c001677c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016780:	50                   	push   eax
c0016781:	e8 c1 9e fe ff       	call   c0000647 <memcpy>
c0016786:	83 c4 10             	add    esp,0x10
c0016789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001678d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016790:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016798:	05 00 10 00 00       	add    eax,0x1000
c001679d:	c1 e8 0c             	shr    eax,0xc
c00167a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00167ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167af:	25 ff 0f 00 00       	and    eax,0xfff
c00167b4:	89 c6                	mov    esi,eax
c00167b6:	e8 36 ac ff ff       	call   c00113f1 <Virt::getAKernelVAS()>
c00167bb:	89 c3                	mov    ebx,eax
c00167bd:	83 ec 0c             	sub    esp,0xc
c00167c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00167c4:	e8 98 aa ff ff       	call   c0011261 <Virt::allocateKernelVirtualPages(int)>
c00167c9:	83 c4 10             	add    esp,0x10
c00167cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167d0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00167d6:	83 ec 0c             	sub    esp,0xc
c00167d9:	6a 01                	push   0x1
c00167db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00167df:	50                   	push   eax
c00167e0:	52                   	push   edx
c00167e1:	53                   	push   ebx
c00167e2:	e8 2f b4 ff ff       	call   c0011c16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00167e7:	83 c4 20             	add    esp,0x20
c00167ea:	09 f0                	or     eax,esi
c00167ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167f0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00167f3:	83 ec 0c             	sub    esp,0xc
c00167f6:	50                   	push   eax
c00167f7:	e8 bf ad ff ff       	call   c00115bb <Virt::freeKernelVirtualPages(unsigned long)>
c00167fc:	83 c4 10             	add    esp,0x10
c00167ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016803:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016807:	89 14 c5 04 ab 02 c0 	mov    DWORD PTR [eax*8-0x3ffd54fc],edx
c001680e:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016812:	e9 ed fe ff ff       	jmp    c0016704 <loadACPITables(unsigned char*)+0x10d>
c0016817:	90                   	nop
c0016818:	83 c4 44             	add    esp,0x44
c001681b:	5b                   	pop    ebx
c001681c:	5e                   	pop    esi
c001681d:	c3                   	ret    

c001681e <findRSDT(unsigned char*)>:
c001681e:	56                   	push   esi
c001681f:	53                   	push   ebx
c0016820:	83 ec 44             	sub    esp,0x44
c0016823:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016828:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001682e:	83 e0 04             	and    eax,0x4
c0016831:	84 c0                	test   al,al
c0016833:	75 0a                	jne    c001683f <findRSDT(unsigned char*)+0x21>
c0016835:	b8 00 00 00 00       	mov    eax,0x0
c001683a:	e9 f7 00 00 00       	jmp    c0016936 <findRSDT(unsigned char*)+0x118>
c001683f:	83 ec 04             	sub    esp,0x4
c0016842:	6a 24                	push   0x24
c0016844:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0016848:	8d 44 24 18          	lea    eax,[esp+0x18]
c001684c:	50                   	push   eax
c001684d:	e8 f5 9d fe ff       	call   c0000647 <memcpy>
c0016852:	83 c4 10             	add    esp,0x10
c0016855:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016859:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001685d:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016865:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016869:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001686d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016871:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016875:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016879:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001687d:	25 ff 0f 00 00       	and    eax,0xfff
c0016882:	89 c6                	mov    esi,eax
c0016884:	e8 68 ab ff ff       	call   c00113f1 <Virt::getAKernelVAS()>
c0016889:	89 c3                	mov    ebx,eax
c001688b:	83 ec 0c             	sub    esp,0xc
c001688e:	6a 02                	push   0x2
c0016890:	e8 cc a9 ff ff       	call   c0011261 <Virt::allocateKernelVirtualPages(int)>
c0016895:	83 c4 10             	add    esp,0x10
c0016898:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001689c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00168a2:	83 ec 0c             	sub    esp,0xc
c00168a5:	6a 01                	push   0x1
c00168a7:	6a 02                	push   0x2
c00168a9:	50                   	push   eax
c00168aa:	52                   	push   edx
c00168ab:	53                   	push   ebx
c00168ac:	e8 65 b3 ff ff       	call   c0011c16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00168b1:	83 c4 20             	add    esp,0x20
c00168b4:	09 f0                	or     eax,esi
c00168b6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00168ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168be:	25 ff 0f 00 00       	and    eax,0xfff
c00168c3:	89 c6                	mov    esi,eax
c00168c5:	e8 27 ab ff ff       	call   c00113f1 <Virt::getAKernelVAS()>
c00168ca:	89 c3                	mov    ebx,eax
c00168cc:	83 ec 0c             	sub    esp,0xc
c00168cf:	6a 02                	push   0x2
c00168d1:	e8 8b a9 ff ff       	call   c0011261 <Virt::allocateKernelVirtualPages(int)>
c00168d6:	83 c4 10             	add    esp,0x10
c00168d9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00168dd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00168e3:	83 ec 0c             	sub    esp,0xc
c00168e6:	6a 01                	push   0x1
c00168e8:	6a 02                	push   0x2
c00168ea:	50                   	push   eax
c00168eb:	52                   	push   edx
c00168ec:	53                   	push   ebx
c00168ed:	e8 24 b3 ff ff       	call   c0011c16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00168f2:	83 c4 20             	add    esp,0x20
c00168f5:	09 f0                	or     eax,esi
c00168f7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00168fb:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016900:	75 11                	jne    c0016913 <findRSDT(unsigned char*)+0xf5>
c0016902:	c6 05 00 ad 02 c0 00 	mov    BYTE PTR ds:0xc002ad00,0x0
c0016909:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001690d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016911:	eb 1f                	jmp    c0016932 <findRSDT(unsigned char*)+0x114>
c0016913:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0016918:	75 11                	jne    c001692b <findRSDT(unsigned char*)+0x10d>
c001691a:	c6 05 00 ad 02 c0 01 	mov    BYTE PTR ds:0xc002ad00,0x1
c0016921:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016925:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016929:	eb 07                	jmp    c0016932 <findRSDT(unsigned char*)+0x114>
c001692b:	b8 00 00 00 00       	mov    eax,0x0
c0016930:	eb 04                	jmp    c0016936 <findRSDT(unsigned char*)+0x118>
c0016932:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016936:	83 c4 44             	add    esp,0x44
c0016939:	5b                   	pop    ebx
c001693a:	5e                   	pop    esi
c001693b:	c3                   	ret    

c001693c <findDataTable(unsigned char*, char*)>:
c001693c:	83 ec 1c             	sub    esp,0x1c
c001693f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016944:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001694a:	83 e0 04             	and    eax,0x4
c001694d:	84 c0                	test   al,al
c001694f:	75 07                	jne    c0016958 <findDataTable(unsigned char*, char*)+0x1c>
c0016951:	b8 00 00 00 00       	mov    eax,0x0
c0016956:	eb 7c                	jmp    c00169d4 <findDataTable(unsigned char*, char*)+0x98>
c0016958:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016960:	a1 ec aa 02 c0       	mov    eax,ds:0xc002aaec
c0016965:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016969:	7d 3a                	jge    c00169a5 <findDataTable(unsigned char*, char*)+0x69>
c001696b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001696f:	c1 e0 03             	shl    eax,0x3
c0016972:	05 00 ab 02 c0       	add    eax,0xc002ab00
c0016977:	83 ec 04             	sub    esp,0x4
c001697a:	6a 04                	push   0x4
c001697c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016980:	50                   	push   eax
c0016981:	e8 5e 9c fe ff       	call   c00005e4 <memcmp>
c0016986:	83 c4 10             	add    esp,0x10
c0016989:	85 c0                	test   eax,eax
c001698b:	0f 94 c0             	sete   al
c001698e:	84 c0                	test   al,al
c0016990:	74 0d                	je     c001699f <findDataTable(unsigned char*, char*)+0x63>
c0016992:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016996:	8b 04 c5 04 ab 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd54fc]
c001699d:	eb 35                	jmp    c00169d4 <findDataTable(unsigned char*, char*)+0x98>
c001699f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00169a3:	eb bb                	jmp    c0016960 <findDataTable(unsigned char*, char*)+0x24>
c00169a5:	a0 00 ad 02 c0       	mov    al,ds:0xc002ad00
c00169aa:	84 c0                	test   al,al
c00169ac:	74 07                	je     c00169b5 <findDataTable(unsigned char*, char*)+0x79>
c00169ae:	b8 58 00 00 00       	mov    eax,0x58
c00169b3:	eb 05                	jmp    c00169ba <findDataTable(unsigned char*, char*)+0x7e>
c00169b5:	b8 52 00 00 00       	mov    eax,0x52
c00169ba:	83 ec 04             	sub    esp,0x4
c00169bd:	50                   	push   eax
c00169be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169c2:	68 68 7b 02 c0       	push   0xc0027b68
c00169c7:	e8 79 b8 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00169cc:	83 c4 10             	add    esp,0x10
c00169cf:	b8 00 00 00 00       	mov    eax,0x0
c00169d4:	83 c4 1c             	add    esp,0x1c
c00169d7:	c3                   	ret    

c00169d8 <scanMADT()>:
c00169d8:	53                   	push   ebx
c00169d9:	83 ec 38             	sub    esp,0x38
c00169dc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00169e1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00169e7:	83 e0 04             	and    eax,0x4
c00169ea:	84 c0                	test   al,al
c00169ec:	0f 84 63 04 00 00    	je     c0016e55 <scanMADT()+0x47d>
c00169f2:	e8 76 fb ff ff       	call   c001656d <findRSDP()>
c00169f7:	a3 0c ad 02 c0       	mov    ds:0xc002ad0c,eax
c00169fc:	a1 0c ad 02 c0       	mov    eax,ds:0xc002ad0c
c0016a01:	85 c0                	test   eax,eax
c0016a03:	75 19                	jne    c0016a1e <scanMADT()+0x46>
c0016a05:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016a0a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016a10:	83 e2 fb             	and    edx,0xfffffffb
c0016a13:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016a19:	e9 3b 04 00 00       	jmp    c0016e59 <scanMADT()+0x481>
c0016a1e:	a1 0c ad 02 c0       	mov    eax,ds:0xc002ad0c
c0016a23:	83 ec 0c             	sub    esp,0xc
c0016a26:	50                   	push   eax
c0016a27:	e8 f2 fd ff ff       	call   c001681e <findRSDT(unsigned char*)>
c0016a2c:	83 c4 10             	add    esp,0x10
c0016a2f:	a3 08 ad 02 c0       	mov    ds:0xc002ad08,eax
c0016a34:	a1 08 ad 02 c0       	mov    eax,ds:0xc002ad08
c0016a39:	85 c0                	test   eax,eax
c0016a3b:	75 19                	jne    c0016a56 <scanMADT()+0x7e>
c0016a3d:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016a42:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016a48:	83 e2 fb             	and    edx,0xfffffffb
c0016a4b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016a51:	e9 03 04 00 00       	jmp    c0016e59 <scanMADT()+0x481>
c0016a56:	a1 08 ad 02 c0       	mov    eax,ds:0xc002ad08
c0016a5b:	83 ec 0c             	sub    esp,0xc
c0016a5e:	50                   	push   eax
c0016a5f:	e8 93 fb ff ff       	call   c00165f7 <loadACPITables(unsigned char*)>
c0016a64:	83 c4 10             	add    esp,0x10
c0016a67:	a1 08 ad 02 c0       	mov    eax,ds:0xc002ad08
c0016a6c:	83 ec 08             	sub    esp,0x8
c0016a6f:	68 a6 7a 02 c0       	push   0xc0027aa6
c0016a74:	50                   	push   eax
c0016a75:	e8 c2 fe ff ff       	call   c001693c <findDataTable(unsigned char*, char*)>
c0016a7a:	83 c4 10             	add    esp,0x10
c0016a7d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016a81:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0016a86:	75 19                	jne    c0016aa1 <scanMADT()+0xc9>
c0016a88:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016a8d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016a93:	83 e2 fe             	and    edx,0xfffffffe
c0016a96:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016a9c:	e9 b8 03 00 00       	jmp    c0016e59 <scanMADT()+0x481>
c0016aa1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016aa9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016aad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ab0:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0016ab4:	0f 87 9f 03 00 00    	ja     c0016e59 <scanMADT()+0x481>
c0016aba:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0016ac2:	0f 87 91 03 00 00    	ja     c0016e59 <scanMADT()+0x481>
c0016ac8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016acc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016ad0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016ad4:	8d 50 01             	lea    edx,[eax+0x1]
c0016ad7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016adb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016adf:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016ae3:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0016ae7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016aeb:	8d 50 01             	lea    edx,[eax+0x1]
c0016aee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016af2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016af6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016afa:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0016afe:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0016b03:	0f 86 4f 03 00 00    	jbe    c0016e58 <scanMADT()+0x480>
c0016b09:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0016b0e:	75 57                	jne    c0016b67 <scanMADT()+0x18f>
c0016b10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b14:	8d 50 01             	lea    edx,[eax+0x1]
c0016b17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016b1b:	8a 15 00 af 02 c0    	mov    dl,BYTE PTR ds:0xc002af00
c0016b21:	0f b6 d2             	movzx  edx,dl
c0016b24:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016b28:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016b2c:	88 82 40 af 02 c0    	mov    BYTE PTR [edx-0x3ffd50c0],al
c0016b32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b36:	8d 50 01             	lea    edx,[eax+0x1]
c0016b39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016b3d:	8a 15 00 af 02 c0    	mov    dl,BYTE PTR ds:0xc002af00
c0016b43:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016b46:	88 0d 00 af 02 c0    	mov    BYTE PTR ds:0xc002af00,cl
c0016b4c:	0f b6 d2             	movzx  edx,dl
c0016b4f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016b53:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016b57:	88 82 20 af 02 c0    	mov    BYTE PTR [edx-0x3ffd50e0],al
c0016b5d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016b62:	e9 da 02 00 00       	jmp    c0016e41 <scanMADT()+0x469>
c0016b67:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0016b6c:	0f 85 14 01 00 00    	jne    c0016c86 <scanMADT()+0x2ae>
c0016b72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b76:	8d 50 01             	lea    edx,[eax+0x1]
c0016b79:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016b7d:	8a 15 c0 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002adc0
c0016b83:	0f b6 d2             	movzx  edx,dl
c0016b86:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016b8a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016b8e:	88 82 e0 ad 02 c0    	mov    BYTE PTR [edx-0x3ffd5220],al
c0016b94:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0016b98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016b9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016ba0:	01 d0                	add    eax,edx
c0016ba2:	83 c0 2c             	add    eax,0x2c
c0016ba5:	8a 00                	mov    al,BYTE PTR [eax]
c0016ba7:	0f b6 d0             	movzx  edx,al
c0016baa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016bae:	8d 48 01             	lea    ecx,[eax+0x1]
c0016bb1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016bb5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016bb9:	0f b6 c0             	movzx  eax,al
c0016bbc:	c1 e0 08             	shl    eax,0x8
c0016bbf:	89 d1                	mov    ecx,edx
c0016bc1:	09 c1                	or     ecx,eax
c0016bc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016bc7:	8d 50 02             	lea    edx,[eax+0x2]
c0016bca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016bce:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016bd2:	0f b6 c0             	movzx  eax,al
c0016bd5:	c1 e0 10             	shl    eax,0x10
c0016bd8:	09 c1                	or     ecx,eax
c0016bda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016bde:	8d 50 03             	lea    edx,[eax+0x3]
c0016be1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016be5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016be9:	0f b6 c0             	movzx  eax,al
c0016bec:	c1 e0 18             	shl    eax,0x18
c0016bef:	09 c1                	or     ecx,eax
c0016bf1:	89 ca                	mov    edx,ecx
c0016bf3:	a0 c0 ad 02 c0       	mov    al,ds:0xc002adc0
c0016bf8:	0f b6 c0             	movzx  eax,al
c0016bfb:	89 14 85 00 ae 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5200],edx
c0016c02:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016c07:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016c0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c0f:	01 d0                	add    eax,edx
c0016c11:	83 c0 2c             	add    eax,0x2c
c0016c14:	8a 00                	mov    al,BYTE PTR [eax]
c0016c16:	0f b6 d0             	movzx  edx,al
c0016c19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c1d:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c24:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016c28:	0f b6 c0             	movzx  eax,al
c0016c2b:	c1 e0 08             	shl    eax,0x8
c0016c2e:	89 d1                	mov    ecx,edx
c0016c30:	09 c1                	or     ecx,eax
c0016c32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c36:	8d 50 02             	lea    edx,[eax+0x2]
c0016c39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c3d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c41:	0f b6 c0             	movzx  eax,al
c0016c44:	c1 e0 10             	shl    eax,0x10
c0016c47:	09 c1                	or     ecx,eax
c0016c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c4d:	8d 50 03             	lea    edx,[eax+0x3]
c0016c50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c54:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c58:	0f b6 c0             	movzx  eax,al
c0016c5b:	c1 e0 18             	shl    eax,0x18
c0016c5e:	09 c1                	or     ecx,eax
c0016c60:	89 ca                	mov    edx,ecx
c0016c62:	a0 c0 ad 02 c0       	mov    al,ds:0xc002adc0
c0016c67:	0f b6 c0             	movzx  eax,al
c0016c6a:	89 14 85 80 ae 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5180],edx
c0016c71:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016c76:	a0 c0 ad 02 c0       	mov    al,ds:0xc002adc0
c0016c7b:	40                   	inc    eax
c0016c7c:	a2 c0 ad 02 c0       	mov    ds:0xc002adc0,al
c0016c81:	e9 bb 01 00 00       	jmp    c0016e41 <scanMADT()+0x469>
c0016c86:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0016c8b:	0f 85 e9 00 00 00    	jne    c0016d7a <scanMADT()+0x3a2>
c0016c91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c95:	8d 50 01             	lea    edx,[eax+0x1]
c0016c98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016c9c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016ca0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016ca4:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0016ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cac:	8d 50 01             	lea    edx,[eax+0x1]
c0016caf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016cb3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016cb7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016cbb:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0016cbf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016cc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cc7:	01 d0                	add    eax,edx
c0016cc9:	83 c0 2c             	add    eax,0x2c
c0016ccc:	8a 00                	mov    al,BYTE PTR [eax]
c0016cce:	0f b6 d0             	movzx  edx,al
c0016cd1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cd5:	8d 48 01             	lea    ecx,[eax+0x1]
c0016cd8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016cdc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016ce0:	0f b6 c0             	movzx  eax,al
c0016ce3:	c1 e0 08             	shl    eax,0x8
c0016ce6:	89 d1                	mov    ecx,edx
c0016ce8:	09 c1                	or     ecx,eax
c0016cea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cee:	8d 50 02             	lea    edx,[eax+0x2]
c0016cf1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016cf5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016cf9:	0f b6 c0             	movzx  eax,al
c0016cfc:	c1 e0 10             	shl    eax,0x10
c0016cff:	09 c1                	or     ecx,eax
c0016d01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d05:	8d 50 03             	lea    edx,[eax+0x3]
c0016d08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d0c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d10:	0f b6 c0             	movzx  eax,al
c0016d13:	c1 e0 18             	shl    eax,0x18
c0016d16:	09 c8                	or     eax,ecx
c0016d18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d1c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016d21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016d25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d29:	01 d0                	add    eax,edx
c0016d2b:	83 c0 2c             	add    eax,0x2c
c0016d2e:	8a 00                	mov    al,BYTE PTR [eax]
c0016d30:	0f b6 c0             	movzx  eax,al
c0016d33:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016d37:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016d3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016d3e:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0016d42:	0f b6 d2             	movzx  edx,dl
c0016d45:	c1 e2 08             	shl    edx,0x8
c0016d48:	09 d0                	or     eax,edx
c0016d4a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0016d4f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0016d54:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0016d59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016d5d:	88 90 40 97 02 c0    	mov    BYTE PTR [eax-0x3ffd68c0],dl
c0016d63:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0016d68:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0016d6d:	66 89 84 12 a0 ad 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd5260],ax
c0016d75:	e9 c7 00 00 00       	jmp    c0016e41 <scanMADT()+0x469>
c0016d7a:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0016d7f:	0f 85 b0 00 00 00    	jne    c0016e35 <scanMADT()+0x45d>
c0016d85:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d89:	8d 50 01             	lea    edx,[eax+0x1]
c0016d8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016d90:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016d94:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d98:	0f b6 c0             	movzx  eax,al
c0016d9b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d9f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016da3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016da7:	01 d0                	add    eax,edx
c0016da9:	83 c0 2c             	add    eax,0x2c
c0016dac:	8a 00                	mov    al,BYTE PTR [eax]
c0016dae:	0f b6 d0             	movzx  edx,al
c0016db1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016db5:	8d 48 01             	lea    ecx,[eax+0x1]
c0016db8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016dbc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016dc0:	0f b6 c0             	movzx  eax,al
c0016dc3:	c1 e0 08             	shl    eax,0x8
c0016dc6:	09 d0                	or     eax,edx
c0016dc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016dcc:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0016dd1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016dd5:	8d 50 01             	lea    edx,[eax+0x1]
c0016dd8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016ddc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016de0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016de4:	0f b6 c0             	movzx  eax,al
c0016de7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016def:	c1 e0 08             	shl    eax,0x8
c0016df2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016df6:	89 c1                	mov    ecx,eax
c0016df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dfc:	c1 e0 18             	shl    eax,0x18
c0016dff:	89 c3                	mov    ebx,eax
c0016e01:	a1 10 ad 02 c0       	mov    eax,ds:0xc002ad10
c0016e06:	8d 50 01             	lea    edx,[eax+0x1]
c0016e09:	89 15 10 ad 02 c0    	mov    DWORD PTR ds:0xc002ad10,edx
c0016e0f:	09 d9                	or     ecx,ebx
c0016e11:	89 ca                	mov    edx,ecx
c0016e13:	89 14 85 20 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd52e0],edx
c0016e1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016e1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e26:	68 98 7b 02 c0       	push   0xc0027b98
c0016e2b:	e8 15 b4 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0016e30:	83 c4 10             	add    esp,0x10
c0016e33:	eb 0c                	jmp    c0016e41 <scanMADT()+0x469>
c0016e35:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0016e3a:	75 05                	jne    c0016e41 <scanMADT()+0x469>
c0016e3c:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0016e41:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0016e46:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e4a:	01 d0                	add    eax,edx
c0016e4c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016e50:	e9 54 fc ff ff       	jmp    c0016aa9 <scanMADT()+0xd1>
c0016e55:	90                   	nop
c0016e56:	eb 01                	jmp    c0016e59 <scanMADT()+0x481>
c0016e58:	90                   	nop
c0016e59:	83 c4 38             	add    esp,0x38
c0016e5c:	5b                   	pop    ebx
c0016e5d:	c3                   	ret    

c0016e5e <ACPI::ACPI()>:
c0016e5e:	83 ec 0c             	sub    esp,0xc
c0016e61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e65:	83 ec 08             	sub    esp,0x8
c0016e68:	68 ab 7a 02 c0       	push   0xc0027aab
c0016e6d:	50                   	push   eax
c0016e6e:	e8 9d c9 ff ff       	call   c0013810 <Device::Device(char const*)>
c0016e73:	83 c4 10             	add    esp,0x10
c0016e76:	ba 70 7c 02 c0       	mov    edx,0xc0027c70
c0016e7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e7f:	89 10                	mov    DWORD PTR [eax],edx
c0016e81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e85:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0016e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e90:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0016e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e9e:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016eac:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0016eb3:	e8 20 fb ff ff       	call   c00169d8 <scanMADT()>
c0016eb8:	90                   	nop
c0016eb9:	83 c4 0c             	add    esp,0xc
c0016ebc:	c3                   	ret    
c0016ebd:	90                   	nop

c0016ebe <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0016ebe:	83 ec 2c             	sub    esp,0x2c
c0016ec1:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016ec5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ec9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016ecd:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016ed1:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016ed6:	88 d0                	mov    al,dl
c0016ed8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016edc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016ee1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016ee9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016eed:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016ef3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016ef7:	0f 8d 97 00 00 00    	jge    c0016f94 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016efd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f05:	83 c2 2a             	add    edx,0x2a
c0016f08:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016f0c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016f11:	75 78                	jne    c0016f8b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016f13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f1b:	83 c2 2a             	add    edx,0x2a
c0016f1e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016f22:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016f26:	75 63                	jne    c0016f8b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016f28:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016f2d:	74 3a                	je     c0016f69 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0016f2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f37:	83 c2 2a             	add    edx,0x2a
c0016f3a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0016f3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016f45:	39 c2                	cmp    edx,eax
c0016f47:	74 10                	je     c0016f59 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016f49:	83 ec 0c             	sub    esp,0xc
c0016f4c:	68 d4 7b 02 c0       	push   0xc0027bd4
c0016f51:	e8 6d 1a 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0016f56:	83 c4 10             	add    esp,0x10
c0016f59:	83 ec 0c             	sub    esp,0xc
c0016f5c:	68 b0 7a 02 c0       	push   0xc0027ab0
c0016f61:	e8 5d 1a 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c0016f66:	83 c4 10             	add    esp,0x10
c0016f69:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016f6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f71:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f75:	83 c2 2a             	add    edx,0x2a
c0016f78:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0016f7c:	8b 02                	mov    eax,DWORD PTR [edx]
c0016f7e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0016f81:	89 01                	mov    DWORD PTR [ecx],eax
c0016f83:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016f86:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0016f8b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016f8f:	e9 55 ff ff ff       	jmp    c0016ee9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0016f94:	90                   	nop
c0016f95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f99:	83 c4 2c             	add    esp,0x2c
c0016f9c:	c2 04 00             	ret    0x4
c0016f9f:	90                   	nop

c0016fa0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0016fa0:	56                   	push   esi
c0016fa1:	53                   	push   ebx
c0016fa2:	83 ec 14             	sub    esp,0x14
c0016fa5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fa9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016fad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016fb1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016fb6:	88 c8                	mov    al,cl
c0016fb8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016fbc:	88 d0                	mov    al,dl
c0016fbe:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016fc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc6:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0016fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd0:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0016fd6:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0016fdb:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016fe0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0016fe5:	83 ec 04             	sub    esp,0x4
c0016fe8:	56                   	push   esi
c0016fe9:	53                   	push   ebx
c0016fea:	51                   	push   ecx
c0016feb:	52                   	push   edx
c0016fec:	50                   	push   eax
c0016fed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016ff1:	68 04 7c 02 c0       	push   0xc0027c04
c0016ff6:	e8 4a b2 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0016ffb:	83 c4 20             	add    esp,0x20
c0016ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017002:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700c:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001700f:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017013:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017021:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017025:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017028:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001702c:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017035:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001703b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001703f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017046:	83 c2 2a             	add    edx,0x2a
c0017049:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001704d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017051:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017057:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001705e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017062:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706a:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017070:	8d 50 01             	lea    edx,[eax+0x1]
c0017073:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017077:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001707d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017081:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017087:	3d 00 08 00 00       	cmp    eax,0x800
c001708c:	75 10                	jne    c001709e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c001708e:	83 ec 0c             	sub    esp,0xc
c0017091:	68 bf 7a 02 c0       	push   0xc0027abf
c0017096:	e8 28 19 00 00       	call   c00189c3 <Krnl::panic(char const*)>
c001709b:	83 c4 10             	add    esp,0x10
c001709e:	90                   	nop
c001709f:	83 c4 14             	add    esp,0x14
c00170a2:	5b                   	pop    ebx
c00170a3:	5e                   	pop    esi
c00170a4:	c3                   	ret    
c00170a5:	90                   	nop

c00170a6 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00170a6:	b8 00 00 00 00       	mov    eax,0x0
c00170ab:	c3                   	ret    

c00170ac <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00170ac:	83 ec 1c             	sub    esp,0x1c
c00170af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170b3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00170b6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00170ba:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00170bf:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00170c4:	83 ec 08             	sub    esp,0x8
c00170c7:	52                   	push   edx
c00170c8:	50                   	push   eax
c00170c9:	e8 68 76 ff ff       	call   c000e736 <Computer::readCMOS(unsigned char)>
c00170ce:	83 c4 10             	add    esp,0x10
c00170d1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00170d5:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00170da:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00170df:	83 ec 04             	sub    esp,0x4
c00170e2:	6a 01                	push   0x1
c00170e4:	52                   	push   edx
c00170e5:	50                   	push   eax
c00170e6:	e8 61 77 ff ff       	call   c000e84c <Computer::writeCMOS(unsigned char, unsigned char)>
c00170eb:	83 c4 10             	add    esp,0x10
c00170ee:	90                   	nop
c00170ef:	83 c4 1c             	add    esp,0x1c
c00170f2:	c3                   	ret    
c00170f3:	90                   	nop

c00170f4 <ACPI::open(int, int, void*)>:
c00170f4:	53                   	push   ebx
c00170f5:	83 ec 18             	sub    esp,0x18
c00170f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fc:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017103:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017107:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c001710d:	84 c0                	test   al,al
c001710f:	74 60                	je     c0017171 <ACPI::open(int, int, void*)+0x7d>
c0017111:	83 ec 0c             	sub    esp,0xc
c0017114:	68 58 01 00 00       	push   0x158
c0017119:	e8 38 b0 ff ff       	call   c0012156 <operator new(unsigned long)>
c001711e:	83 c4 10             	add    esp,0x10
c0017121:	89 c3                	mov    ebx,eax
c0017123:	83 ec 0c             	sub    esp,0xc
c0017126:	53                   	push   ebx
c0017127:	e8 74 8f 00 00       	call   c00200a0 <PCI::PCI()>
c001712c:	83 c4 10             	add    esp,0x10
c001712f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017133:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017137:	83 ec 08             	sub    esp,0x8
c001713a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001713e:	50                   	push   eax
c001713f:	e8 dc c4 ff ff       	call   c0013620 <Device::addChild(Device*)>
c0017144:	83 c4 10             	add    esp,0x10
c0017147:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001714b:	8b 00                	mov    eax,DWORD PTR [eax]
c001714d:	83 c0 08             	add    eax,0x8
c0017150:	8b 00                	mov    eax,DWORD PTR [eax]
c0017152:	6a 00                	push   0x0
c0017154:	6a 00                	push   0x0
c0017156:	6a 00                	push   0x0
c0017158:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001715c:	ff d0                	call   eax
c001715e:	83 c4 10             	add    esp,0x10
c0017161:	83 ec 0c             	sub    esp,0xc
c0017164:	68 dc 7a 02 c0       	push   0xc0027adc
c0017169:	e8 d7 b0 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001716e:	83 c4 10             	add    esp,0x10
c0017171:	83 ec 0c             	sub    esp,0xc
c0017174:	68 e7 7a 02 c0       	push   0xc0027ae7
c0017179:	e8 da 36 00 00       	call   c001a858 <Thr::loadKernelSymbolTable(char const*)>
c001717e:	83 c4 10             	add    esp,0x10
c0017181:	8b 1d 68 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a468
c0017187:	83 ec 08             	sub    esp,0x8
c001718a:	6a 01                	push   0x1
c001718c:	68 05 7b 02 c0       	push   0xc0027b05
c0017191:	e8 a4 41 00 00       	call   c001b33a <Thr::loadDLL(char const*, bool)>
c0017196:	83 c4 10             	add    esp,0x10
c0017199:	83 ec 08             	sub    esp,0x8
c001719c:	53                   	push   ebx
c001719d:	50                   	push   eax
c001719e:	e8 5d 43 00 00       	call   c001b500 <Thr::executeDLL(unsigned long, void*)>
c00171a3:	83 c4 10             	add    esp,0x10
c00171a6:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00171ab:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00171b1:	83 e0 04             	and    eax,0x4
c00171b4:	84 c0                	test   al,al
c00171b6:	0f 84 cf 00 00 00    	je     c001728b <ACPI::open(int, int, void*)+0x197>
c00171bc:	83 ec 0c             	sub    esp,0xc
c00171bf:	68 14 01 00 00       	push   0x114
c00171c4:	e8 8d af ff ff       	call   c0012156 <operator new(unsigned long)>
c00171c9:	83 c4 10             	add    esp,0x10
c00171cc:	89 c3                	mov    ebx,eax
c00171ce:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00171d3:	83 ec 04             	sub    esp,0x4
c00171d6:	50                   	push   eax
c00171d7:	68 22 7b 02 c0       	push   0xc0027b22
c00171dc:	53                   	push   ebx
c00171dd:	e8 92 b5 ff ff       	call   c0012774 <File::File(char const*, Process*)>
c00171e2:	83 c4 10             	add    esp,0x10
c00171e5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00171e9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00171ee:	74 17                	je     c0017207 <ACPI::open(int, int, void*)+0x113>
c00171f0:	83 ec 0c             	sub    esp,0xc
c00171f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00171f7:	e8 4a b8 ff ff       	call   c0012a46 <File::exists()>
c00171fc:	83 c4 10             	add    esp,0x10
c00171ff:	84 c0                	test   al,al
c0017201:	74 04                	je     c0017207 <ACPI::open(int, int, void*)+0x113>
c0017203:	b0 01                	mov    al,0x1
c0017205:	eb 02                	jmp    c0017209 <ACPI::open(int, int, void*)+0x115>
c0017207:	b0 00                	mov    al,0x0
c0017209:	84 c0                	test   al,al
c001720b:	74 25                	je     c0017232 <ACPI::open(int, int, void*)+0x13e>
c001720d:	8b 1d 68 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a468
c0017213:	83 ec 08             	sub    esp,0x8
c0017216:	6a 01                	push   0x1
c0017218:	68 22 7b 02 c0       	push   0xc0027b22
c001721d:	e8 18 41 00 00       	call   c001b33a <Thr::loadDLL(char const*, bool)>
c0017222:	83 c4 10             	add    esp,0x10
c0017225:	83 ec 08             	sub    esp,0x8
c0017228:	53                   	push   ebx
c0017229:	50                   	push   eax
c001722a:	e8 d1 42 00 00       	call   c001b500 <Thr::executeDLL(unsigned long, void*)>
c001722f:	83 c4 10             	add    esp,0x10
c0017232:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017237:	74 1e                	je     c0017257 <ACPI::open(int, int, void*)+0x163>
c0017239:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001723e:	74 17                	je     c0017257 <ACPI::open(int, int, void*)+0x163>
c0017240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017244:	8b 00                	mov    eax,DWORD PTR [eax]
c0017246:	83 c0 08             	add    eax,0x8
c0017249:	8b 00                	mov    eax,DWORD PTR [eax]
c001724b:	83 ec 0c             	sub    esp,0xc
c001724e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017252:	ff d0                	call   eax
c0017254:	83 c4 10             	add    esp,0x10
c0017257:	a1 08 ad 02 c0       	mov    eax,ds:0xc002ad08
c001725c:	83 ec 08             	sub    esp,0x8
c001725f:	68 3f 7b 02 c0       	push   0xc0027b3f
c0017264:	50                   	push   eax
c0017265:	e8 d2 f6 ff ff       	call   c001693c <findDataTable(unsigned char*, char*)>
c001726a:	83 c4 10             	add    esp,0x10
c001726d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017271:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0017276:	74 13                	je     c001728b <ACPI::open(int, int, void*)+0x197>
c0017278:	83 ec 08             	sub    esp,0x8
c001727b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001727f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017283:	e8 24 fe ff ff       	call   c00170ac <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017288:	83 c4 10             	add    esp,0x10
c001728b:	b8 00 00 00 00       	mov    eax,0x0
c0017290:	83 c4 18             	add    esp,0x18
c0017293:	5b                   	pop    ebx
c0017294:	c3                   	ret    
c0017295:	90                   	nop

c0017296 <ACPI::sleep()>:
c0017296:	83 ec 0c             	sub    esp,0xc
c0017299:	a1 e0 aa 02 c0       	mov    eax,ds:0xc002aae0
c001729e:	85 c0                	test   eax,eax
c00172a0:	74 07                	je     c00172a9 <ACPI::sleep()+0x13>
c00172a2:	a1 e0 aa 02 c0       	mov    eax,ds:0xc002aae0
c00172a7:	ff d0                	call   eax
c00172a9:	90                   	nop
c00172aa:	83 c4 0c             	add    esp,0xc
c00172ad:	c3                   	ret    

c00172ae <CPU::close(int, int, void*)>:
c00172ae:	31 c0                	xor    eax,eax
c00172b0:	c3                   	ret    
c00172b1:	90                   	nop

c00172b2 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00172b2:	55                   	push   ebp
c00172b3:	57                   	push   edi
c00172b4:	56                   	push   esi
c00172b5:	53                   	push   ebx
c00172b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00172ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00172be:	89 ce                	mov    esi,ecx
c00172c0:	89 d5                	mov    ebp,edx
c00172c2:	80 f9 04             	cmp    cl,0x4
c00172c5:	75 28                	jne    c00172ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00172c7:	8d 42 f9             	lea    eax,[edx-0x7]
c00172ca:	3c 03                	cmp    al,0x3
c00172cc:	0f 86 63 01 00 00    	jbe    c0017435 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00172d2:	80 fa 03             	cmp    dl,0x3
c00172d5:	0f 84 5a 01 00 00    	je     c0017435 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00172db:	8d 7a f2             	lea    edi,[edx-0xe]
c00172de:	b8 10 99 02 c0       	mov    eax,0xc0029910
c00172e3:	89 fb                	mov    ebx,edi
c00172e5:	80 fb 01             	cmp    bl,0x1
c00172e8:	77 4e                	ja     c0017338 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00172ea:	e9 52 01 00 00       	jmp    c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00172ef:	80 f9 05             	cmp    cl,0x5
c00172f2:	75 4d                	jne    c0017341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00172f4:	b8 20 99 02 c0       	mov    eax,0xc0029920
c00172f9:	80 fa 03             	cmp    dl,0x3
c00172fc:	0f 86 3f 01 00 00    	jbe    c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017302:	8d 7a fa             	lea    edi,[edx-0x6]
c0017305:	b8 30 99 02 c0       	mov    eax,0xc0029930
c001730a:	89 fb                	mov    ebx,edi
c001730c:	80 fb 01             	cmp    bl,0x1
c001730f:	0f 86 2c 01 00 00    	jbe    c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017315:	b8 40 99 02 c0       	mov    eax,0xc0029940
c001731a:	80 fa 08             	cmp    dl,0x8
c001731d:	0f 84 1e 01 00 00    	je     c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017323:	89 d7                	mov    edi,edx
c0017325:	b8 50 99 02 c0       	mov    eax,0xc0029950
c001732a:	83 e7 fb             	and    edi,0xfffffffb
c001732d:	89 fb                	mov    ebx,edi
c001732f:	80 fb 09             	cmp    bl,0x9
c0017332:	0f 84 09 01 00 00    	je     c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017338:	31 c0                	xor    eax,eax
c001733a:	89 eb                	mov    ebx,ebp
c001733c:	0f b6 fb             	movzx  edi,bl
c001733f:	eb 30                	jmp    c0017371 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017341:	31 c0                	xor    eax,eax
c0017343:	80 f9 06             	cmp    cl,0x6
c0017346:	75 f2                	jne    c001733a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017348:	80 fa 0a             	cmp    dl,0xa
c001734b:	77 ed                	ja     c001733a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001734d:	bf de 05 00 00       	mov    edi,0x5de
c0017352:	0f a3 d7             	bt     edi,edx
c0017355:	73 e3                	jae    c001733a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017357:	b8 60 99 02 c0       	mov    eax,0xc0029960
c001735c:	e9 e0 00 00 00       	jmp    c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017361:	39 c7                	cmp    edi,eax
c0017363:	0f 84 d3 00 00 00    	je     c001743c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017369:	40                   	inc    eax
c001736a:	3d d0 00 00 00       	cmp    eax,0xd0
c001736f:	74 09                	je     c001737a <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017371:	89 f3                	mov    ebx,esi
c0017373:	80 fb 0f             	cmp    bl,0xf
c0017376:	75 f1                	jne    c0017369 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017378:	eb e7                	jmp    c0017361 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001737a:	80 f9 10             	cmp    cl,0x10
c001737d:	75 14                	jne    c0017393 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001737f:	8d 42 fc             	lea    eax,[edx-0x4]
c0017382:	83 e0 fb             	and    eax,0xfffffffb
c0017385:	3c 02                	cmp    al,0x2
c0017387:	76 34                	jbe    c00173bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017389:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c001738e:	80 fa 02             	cmp    dl,0x2
c0017391:	eb 24                	jmp    c00173b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017393:	80 f9 11             	cmp    cl,0x11
c0017396:	75 13                	jne    c00173ab <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017398:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c001739d:	80 fa 03             	cmp    dl,0x3
c00173a0:	0f 85 9b 00 00 00    	jne    c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173a6:	e9 91 00 00 00       	jmp    c001743c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00173ab:	80 f9 12             	cmp    cl,0x12
c00173ae:	75 14                	jne    c00173c4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00173b0:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c00173b5:	fe ca                	dec    dl
c00173b7:	0f 85 84 00 00 00    	jne    c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173bd:	b8 80 99 02 c0       	mov    eax,0xc0029980
c00173c2:	eb 7d                	jmp    c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173c4:	80 f9 14             	cmp    cl,0x14
c00173c7:	75 12                	jne    c00173db <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00173c9:	4a                   	dec    edx
c00173ca:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c00173cf:	80 fa 01             	cmp    dl,0x1
c00173d2:	77 6d                	ja     c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173d4:	b8 90 99 02 c0       	mov    eax,0xc0029990
c00173d9:	eb 66                	jmp    c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173db:	80 f9 15             	cmp    cl,0x15
c00173de:	75 31                	jne    c0017411 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00173e0:	b8 a0 99 02 c0       	mov    eax,0xc00299a0
c00173e5:	80 fa 01             	cmp    dl,0x1
c00173e8:	74 57                	je     c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173ea:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c00173ef:	80 fa 13             	cmp    dl,0x13
c00173f2:	76 0c                	jbe    c0017400 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00173f4:	80 fa 30             	cmp    dl,0x30
c00173f7:	75 48                	jne    c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173f9:	b8 c0 99 02 c0       	mov    eax,0xc00299c0
c00173fe:	eb 41                	jmp    c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017400:	b9 04 00 09 00       	mov    ecx,0x90004
c0017405:	0f a3 d1             	bt     ecx,edx
c0017408:	73 37                	jae    c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001740a:	b8 b0 99 02 c0       	mov    eax,0xc00299b0
c001740f:	eb 30                	jmp    c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017411:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c0017416:	80 f9 16             	cmp    cl,0x16
c0017419:	75 26                	jne    c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001741b:	b8 d0 99 02 c0       	mov    eax,0xc00299d0
c0017420:	84 d2                	test   dl,dl
c0017422:	74 1d                	je     c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017424:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c0017429:	80 fa 30             	cmp    dl,0x30
c001742c:	75 13                	jne    c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001742e:	b8 e0 99 02 c0       	mov    eax,0xc00299e0
c0017433:	eb 0c                	jmp    c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017435:	b8 00 99 02 c0       	mov    eax,0xc0029900
c001743a:	eb 05                	jmp    c0017441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001743c:	b8 70 99 02 c0       	mov    eax,0xc0029970
c0017441:	5b                   	pop    ebx
c0017442:	5e                   	pop    esi
c0017443:	5f                   	pop    edi
c0017444:	5d                   	pop    ebp
c0017445:	c3                   	ret    

c0017446 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017446:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001744a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001744e:	80 f9 04             	cmp    cl,0x4
c0017451:	75 6b                	jne    c00174be <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017453:	b8 60 97 02 c0       	mov    eax,0xc0029760
c0017458:	80 fa 01             	cmp    dl,0x1
c001745b:	0f 86 92 02 00 00    	jbe    c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017461:	b8 70 97 02 c0       	mov    eax,0xc0029770
c0017466:	80 fa 02             	cmp    dl,0x2
c0017469:	0f 84 84 02 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001746f:	b8 80 97 02 c0       	mov    eax,0xc0029780
c0017474:	80 fa 03             	cmp    dl,0x3
c0017477:	0f 84 76 02 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001747d:	b8 90 97 02 c0       	mov    eax,0xc0029790
c0017482:	80 fa 04             	cmp    dl,0x4
c0017485:	0f 84 68 02 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001748b:	b8 a0 97 02 c0       	mov    eax,0xc00297a0
c0017490:	80 fa 05             	cmp    dl,0x5
c0017493:	0f 84 5a 02 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017499:	b8 80 97 02 c0       	mov    eax,0xc0029780
c001749e:	80 fa 07             	cmp    dl,0x7
c00174a1:	0f 84 4c 02 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174a7:	83 ea 08             	sub    edx,0x8
c00174aa:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c00174af:	80 fa 01             	cmp    dl,0x1
c00174b2:	0f 87 3b 02 00 00    	ja     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174b8:	b8 b0 97 02 c0       	mov    eax,0xc00297b0
c00174bd:	c3                   	ret    
c00174be:	80 f9 05             	cmp    cl,0x5
c00174c1:	75 45                	jne    c0017508 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00174c3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00174c6:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c00174cb:	80 f9 02             	cmp    cl,0x2
c00174ce:	0f 86 1f 02 00 00    	jbe    c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174d4:	80 fa 04             	cmp    dl,0x4
c00174d7:	0f 84 f3 01 00 00    	je     c00176d0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00174dd:	80 fa 07             	cmp    dl,0x7
c00174e0:	0f 84 0d 02 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174e6:	b8 d0 97 02 c0       	mov    eax,0xc00297d0
c00174eb:	80 fa 08             	cmp    dl,0x8
c00174ee:	0f 84 ff 01 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174f4:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c00174f9:	80 fa 09             	cmp    dl,0x9
c00174fc:	0f 85 f1 01 00 00    	jne    c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017502:	b8 e0 97 02 c0       	mov    eax,0xc00297e0
c0017507:	c3                   	ret    
c0017508:	80 f9 06             	cmp    cl,0x6
c001750b:	0f 85 85 01 00 00    	jne    c0017696 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017511:	b8 f0 97 02 c0       	mov    eax,0xc00297f0
c0017516:	80 fa 01             	cmp    dl,0x1
c0017519:	0f 84 d4 01 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001751f:	8d 42 fb             	lea    eax,[edx-0x5]
c0017522:	3c 01                	cmp    al,0x1
c0017524:	0f 86 ac 01 00 00    	jbe    c00176d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001752a:	80 fa 03             	cmp    dl,0x3
c001752d:	0f 84 a3 01 00 00    	je     c00176d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017533:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017536:	b8 10 98 02 c0       	mov    eax,0xc0029810
c001753b:	80 f9 01             	cmp    cl,0x1
c001753e:	0f 86 af 01 00 00    	jbe    c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017544:	80 fa 09             	cmp    dl,0x9
c0017547:	0f 84 8f 01 00 00    	je     c00176dc <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001754d:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017550:	80 f9 01             	cmp    cl,0x1
c0017553:	0f 86 9a 01 00 00    	jbe    c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017559:	b8 20 98 02 c0       	mov    eax,0xc0029820
c001755e:	80 fa 0d             	cmp    dl,0xd
c0017561:	0f 84 8c 01 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017567:	b8 30 98 02 c0       	mov    eax,0xc0029830
c001756c:	80 fa 0e             	cmp    dl,0xe
c001756f:	0f 84 7e 01 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017575:	b8 40 98 02 c0       	mov    eax,0xc0029840
c001757a:	80 fa 0f             	cmp    dl,0xf
c001757d:	0f 84 70 01 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017583:	b8 20 98 02 c0       	mov    eax,0xc0029820
c0017588:	80 fa 15             	cmp    dl,0x15
c001758b:	0f 84 62 01 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017591:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017594:	b8 40 98 02 c0       	mov    eax,0xc0029840
c0017599:	80 f9 01             	cmp    cl,0x1
c001759c:	0f 86 51 01 00 00    	jbe    c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175a2:	80 fa 1a             	cmp    dl,0x1a
c00175a5:	0f 84 37 01 00 00    	je     c00176e2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00175ab:	80 fa 1c             	cmp    dl,0x1c
c00175ae:	0f 84 34 01 00 00    	je     c00176e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00175b4:	80 fa 1d             	cmp    dl,0x1d
c00175b7:	0f 84 36 01 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175bd:	b8 70 98 02 c0       	mov    eax,0xc0029870
c00175c2:	80 fa 25             	cmp    dl,0x25
c00175c5:	0f 84 28 01 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175cb:	8d 4a da             	lea    ecx,[edx-0x26]
c00175ce:	b8 60 98 02 c0       	mov    eax,0xc0029860
c00175d3:	80 f9 01             	cmp    cl,0x1
c00175d6:	0f 86 17 01 00 00    	jbe    c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175dc:	b8 80 98 02 c0       	mov    eax,0xc0029880
c00175e1:	80 fa 2a             	cmp    dl,0x2a
c00175e4:	0f 84 09 01 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175ea:	b8 70 98 02 c0       	mov    eax,0xc0029870
c00175ef:	80 fa 2c             	cmp    dl,0x2c
c00175f2:	0f 84 fb 00 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175f8:	b8 80 98 02 c0       	mov    eax,0xc0029880
c00175fd:	80 fa 2d             	cmp    dl,0x2d
c0017600:	0f 84 ed 00 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017606:	b8 50 98 02 c0       	mov    eax,0xc0029850
c001760b:	80 fa 2e             	cmp    dl,0x2e
c001760e:	0f 84 df 00 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017614:	b8 70 98 02 c0       	mov    eax,0xc0029870
c0017619:	80 fa 2f             	cmp    dl,0x2f
c001761c:	0f 84 d1 00 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017622:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017625:	b8 60 98 02 c0       	mov    eax,0xc0029860
c001762a:	80 f9 01             	cmp    cl,0x1
c001762d:	0f 86 c0 00 00 00    	jbe    c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017633:	b8 90 98 02 c0       	mov    eax,0xc0029890
c0017638:	80 fa 37             	cmp    dl,0x37
c001763b:	0f 84 b2 00 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017641:	b8 a0 98 02 c0       	mov    eax,0xc00298a0
c0017646:	80 fa 3a             	cmp    dl,0x3a
c0017649:	0f 84 a4 00 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001764f:	b8 b0 98 02 c0       	mov    eax,0xc00298b0
c0017654:	80 fa 3c             	cmp    dl,0x3c
c0017657:	0f 84 96 00 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001765d:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c0017662:	80 fa 3d             	cmp    dl,0x3d
c0017665:	0f 84 88 00 00 00    	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001766b:	b8 a0 98 02 c0       	mov    eax,0xc00298a0
c0017670:	80 fa 3e             	cmp    dl,0x3e
c0017673:	74 7e                	je     c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017675:	8d 42 bb             	lea    eax,[edx-0x45]
c0017678:	3c 01                	cmp    al,0x1
c001767a:	76 72                	jbe    c00176ee <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001767c:	80 fa 3f             	cmp    dl,0x3f
c001767f:	74 6d                	je     c00176ee <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017681:	80 fa 4a             	cmp    dl,0x4a
c0017684:	74 0a                	je     c0017690 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017686:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c001768b:	80 fa 4d             	cmp    dl,0x4d
c001768e:	75 63                	jne    c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017690:	b8 90 98 02 c0       	mov    eax,0xc0029890
c0017695:	c3                   	ret    
c0017696:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c001769b:	80 f9 0b             	cmp    cl,0xb
c001769e:	75 0a                	jne    c00176aa <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00176a0:	fe ca                	dec    dl
c00176a2:	75 4f                	jne    c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176a4:	b8 d0 98 02 c0       	mov    eax,0xc00298d0
c00176a9:	c3                   	ret    
c00176aa:	80 f9 0f             	cmp    cl,0xf
c00176ad:	75 44                	jne    c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176af:	b8 e0 98 02 c0       	mov    eax,0xc00298e0
c00176b4:	80 fa 02             	cmp    dl,0x2
c00176b7:	76 3a                	jbe    c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176b9:	8d 42 fd             	lea    eax,[edx-0x3]
c00176bc:	3c 01                	cmp    al,0x1
c00176be:	76 0a                	jbe    c00176ca <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00176c0:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c00176c5:	80 fa 06             	cmp    dl,0x6
c00176c8:	75 29                	jne    c00176f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176ca:	b8 f0 98 02 c0       	mov    eax,0xc00298f0
c00176cf:	c3                   	ret    
c00176d0:	b8 d0 97 02 c0       	mov    eax,0xc00297d0
c00176d5:	c3                   	ret    
c00176d6:	b8 00 98 02 c0       	mov    eax,0xc0029800
c00176db:	c3                   	ret    
c00176dc:	b8 20 98 02 c0       	mov    eax,0xc0029820
c00176e1:	c3                   	ret    
c00176e2:	b8 50 98 02 c0       	mov    eax,0xc0029850
c00176e7:	c3                   	ret    
c00176e8:	b8 60 98 02 c0       	mov    eax,0xc0029860
c00176ed:	c3                   	ret    
c00176ee:	b8 b0 98 02 c0       	mov    eax,0xc00298b0
c00176f3:	c3                   	ret    

c00176f4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00176f4:	60                   	pusha  
c00176f5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017701:	9c                   	pushf  
c0017702:	fa                   	cli    
c0017703:	0f 09                	wbinvd 
c0017705:	0f 30                	wrmsr  
c0017707:	9d                   	popf   
c0017708:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001770c:	89 02                	mov    DWORD PTR [edx],eax
c001770e:	61                   	popa   
c001770f:	c3                   	ret    

c0017710 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0017710:	60                   	pusha  
c0017711:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017715:	9c                   	pushf  
c0017716:	fa                   	cli    
c0017717:	0f 09                	wbinvd 
c0017719:	31 c0                	xor    eax,eax
c001771b:	31 d2                	xor    edx,edx
c001771d:	0f 32                	rdmsr  
c001771f:	9d                   	popf   
c0017720:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017724:	89 02                	mov    DWORD PTR [edx],eax
c0017726:	61                   	popa   
c0017727:	c3                   	ret    

c0017728 <CPU::AMD_K6_writeback(int, int, int)>:
c0017728:	56                   	push   esi
c0017729:	53                   	push   ebx
c001772a:	83 ec 10             	sub    esp,0x10
c001772d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017731:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017736:	75 5d                	jne    c0017795 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017738:	83 f8 08             	cmp    eax,0x8
c001773b:	75 09                	jne    c0017746 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001773d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0017742:	7e 13                	jle    c0017757 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017744:	eb 30                	jmp    c0017776 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017746:	83 f8 06             	cmp    eax,0x6
c0017749:	7c 4a                	jl     c0017795 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001774b:	83 f8 07             	cmp    eax,0x7
c001774e:	7e 07                	jle    c0017757 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017750:	83 f8 09             	cmp    eax,0x9
c0017753:	74 21                	je     c0017776 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017755:	eb 3e                	jmp    c0017795 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017757:	89 e6                	mov    esi,esp
c0017759:	8b 1d a4 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a4a4
c001775f:	56                   	push   esi
c0017760:	c1 eb 15             	shr    ebx,0x15
c0017763:	68 82 00 00 c0       	push   0xc0000082
c0017768:	83 e3 7e             	and    ebx,0x7e
c001776b:	e8 a0 ff ff ff       	call   c0017710 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017770:	56                   	push   esi
c0017771:	6a 00                	push   0x0
c0017773:	53                   	push   ebx
c0017774:	eb 12                	jmp    c0017788 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0017776:	89 e3                	mov    ebx,esp
c0017778:	53                   	push   ebx
c0017779:	68 82 00 00 c0       	push   0xc0000082
c001777e:	e8 8d ff ff ff       	call   c0017710 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017783:	53                   	push   ebx
c0017784:	6a 00                	push   0x0
c0017786:	6a 00                	push   0x0
c0017788:	68 82 00 00 c0       	push   0xc0000082
c001778d:	e8 62 ff ff ff       	call   c00176f4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0017792:	83 c4 18             	add    esp,0x18
c0017795:	83 c4 10             	add    esp,0x10
c0017798:	5b                   	pop    ebx
c0017799:	5e                   	pop    esi
c001779a:	c3                   	ret    
c001779b:	90                   	nop

c001779c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001779c:	55                   	push   ebp
c001779d:	57                   	push   edi
c001779e:	56                   	push   esi
c001779f:	53                   	push   ebx
c00177a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177a4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00177a8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00177ac:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00177b0:	39 05 00 9a 02 c0    	cmp    DWORD PTR ds:0xc0029a00,eax
c00177b6:	75 23                	jne    c00177db <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00177b8:	a1 6c af 02 c0       	mov    eax,ds:0xc002af6c
c00177bd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00177c1:	89 06                	mov    DWORD PTR [esi],eax
c00177c3:	a1 68 af 02 c0       	mov    eax,ds:0xc002af68
c00177c8:	89 07                	mov    DWORD PTR [edi],eax
c00177ca:	a1 64 af 02 c0       	mov    eax,ds:0xc002af64
c00177cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00177d2:	a1 60 af 02 c0       	mov    eax,ds:0xc002af60
c00177d7:	89 02                	mov    DWORD PTR [edx],eax
c00177d9:	eb 3f                	jmp    c001781a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00177db:	31 c9                	xor    ecx,ecx
c00177dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177e1:	0f a2                	cpuid  
c00177e3:	89 06                	mov    DWORD PTR [esi],eax
c00177e5:	89 1f                	mov    DWORD PTR [edi],ebx
c00177e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00177eb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00177ee:	89 10                	mov    DWORD PTR [eax],edx
c00177f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177f4:	a3 00 9a 02 c0       	mov    ds:0xc0029a00,eax
c00177f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00177fb:	a3 6c af 02 c0       	mov    ds:0xc002af6c,eax
c0017800:	8b 07                	mov    eax,DWORD PTR [edi]
c0017802:	a3 68 af 02 c0       	mov    ds:0xc002af68,eax
c0017807:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001780a:	a3 64 af 02 c0       	mov    ds:0xc002af64,eax
c001780f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017813:	8b 00                	mov    eax,DWORD PTR [eax]
c0017815:	a3 60 af 02 c0       	mov    ds:0xc002af60,eax
c001781a:	5b                   	pop    ebx
c001781b:	5e                   	pop    esi
c001781c:	5f                   	pop    edi
c001781d:	5d                   	pop    ebp
c001781e:	c3                   	ret    
c001781f:	90                   	nop

c0017820 <CPU::cpuidCheckEDX(unsigned int)>:
c0017820:	83 ec 10             	sub    esp,0x10
c0017823:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017827:	50                   	push   eax
c0017828:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001782c:	50                   	push   eax
c001782d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017831:	50                   	push   eax
c0017832:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017836:	50                   	push   eax
c0017837:	6a 01                	push   0x1
c0017839:	e8 5e ff ff ff       	call   c001779c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001783e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017842:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0017846:	0f 95 c0             	setne  al
c0017849:	83 c4 24             	add    esp,0x24
c001784c:	c3                   	ret    
c001784d:	90                   	nop

c001784e <CPU::cpuidCheckECX(unsigned int)>:
c001784e:	83 ec 10             	sub    esp,0x10
c0017851:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017855:	50                   	push   eax
c0017856:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001785a:	50                   	push   eax
c001785b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001785f:	50                   	push   eax
c0017860:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017864:	50                   	push   eax
c0017865:	6a 01                	push   0x1
c0017867:	e8 30 ff ff ff       	call   c001779c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001786c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017870:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017874:	0f 95 c0             	setne  al
c0017877:	83 c4 24             	add    esp,0x24
c001787a:	c3                   	ret    
c001787b:	90                   	nop

c001787c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001787c:	83 ec 10             	sub    esp,0x10
c001787f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017883:	50                   	push   eax
c0017884:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017888:	50                   	push   eax
c0017889:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001788d:	50                   	push   eax
c001788e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017892:	50                   	push   eax
c0017893:	6a 07                	push   0x7
c0017895:	e8 02 ff ff ff       	call   c001779c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001789a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001789e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00178a2:	0f 95 c0             	setne  al
c00178a5:	83 c4 24             	add    esp,0x24
c00178a8:	c3                   	ret    
c00178a9:	90                   	nop

c00178aa <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00178aa:	83 ec 10             	sub    esp,0x10
c00178ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178b1:	50                   	push   eax
c00178b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178b6:	50                   	push   eax
c00178b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178bb:	50                   	push   eax
c00178bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178c0:	50                   	push   eax
c00178c1:	6a 07                	push   0x7
c00178c3:	e8 d4 fe ff ff       	call   c001779c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00178c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178cc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00178d0:	0f 95 c0             	setne  al
c00178d3:	83 c4 24             	add    esp,0x24
c00178d6:	c3                   	ret    
c00178d7:	90                   	nop

c00178d8 <CPU::CPU()>:
c00178d8:	83 ec 0c             	sub    esp,0xc
c00178db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178df:	83 ec 08             	sub    esp,0x8
c00178e2:	68 86 7f 02 c0       	push   0xc0027f86
c00178e7:	50                   	push   eax
c00178e8:	e8 23 bf ff ff       	call   c0013810 <Device::Device(char const*)>
c00178ed:	83 c4 10             	add    esp,0x10
c00178f0:	ba 60 80 02 c0       	mov    edx,0xc0028060
c00178f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f9:	89 10                	mov    DWORD PTR [eax],edx
c00178fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ff:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0017909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001790d:	05 78 01 00 00       	add    eax,0x178
c0017912:	83 ec 0c             	sub    esp,0xc
c0017915:	50                   	push   eax
c0017916:	e8 1b 70 ff ff       	call   c000e936 <GDT::GDT()>
c001791b:	83 c4 10             	add    esp,0x10
c001791e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017922:	05 7c 09 00 00       	add    eax,0x97c
c0017927:	83 ec 0c             	sub    esp,0xc
c001792a:	50                   	push   eax
c001792b:	e8 68 72 ff ff       	call   c000eb98 <IDT::IDT()>
c0017930:	83 c4 10             	add    esp,0x10
c0017933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017937:	05 7c 11 00 00       	add    eax,0x117c
c001793c:	83 ec 0c             	sub    esp,0xc
c001793f:	50                   	push   eax
c0017940:	e8 8d 92 ff ff       	call   c0010bd2 <TSS::TSS()>
c0017945:	83 c4 10             	add    esp,0x10
c0017948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001794c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0017953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017957:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0017961:	90                   	nop
c0017962:	83 c4 0c             	add    esp,0xc
c0017965:	c3                   	ret    

c0017966 <CPU::displayFeatures()>:
c0017966:	53                   	push   ebx
c0017967:	83 ec 10             	sub    esp,0x10
c001796a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001796e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0017974:	68 94 7c 02 c0       	push   0xc0027c94
c0017979:	e8 c7 a8 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001797e:	59                   	pop    ecx
c001797f:	58                   	pop    eax
c0017980:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0017986:	50                   	push   eax
c0017987:	68 a5 7c 02 c0       	push   0xc0027ca5
c001798c:	e8 b4 a8 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0017991:	58                   	pop    eax
c0017992:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017998:	5a                   	pop    edx
c0017999:	c1 e8 0e             	shr    eax,0xe
c001799c:	0f b6 c0             	movzx  eax,al
c001799f:	50                   	push   eax
c00179a0:	68 b6 7c 02 c0       	push   0xc0027cb6
c00179a5:	e8 9b a8 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00179aa:	59                   	pop    ecx
c00179ab:	58                   	pop    eax
c00179ac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00179b2:	66 c1 e8 06          	shr    ax,0x6
c00179b6:	0f b6 c0             	movzx  eax,al
c00179b9:	50                   	push   eax
c00179ba:	68 c7 7c 02 c0       	push   0xc0027cc7
c00179bf:	e8 81 a8 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00179c4:	c7 04 24 da 80 02 c0 	mov    DWORD PTR [esp],0xc00280da
c00179cb:	e8 75 a8 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00179d0:	83 c4 10             	add    esp,0x10
c00179d3:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c00179d8:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00179df:	74 05                	je     c00179e6 <CPU::displayFeatures()+0x80>
c00179e1:	b8 78 69 02 c0       	mov    eax,0xc0026978
c00179e6:	52                   	push   edx
c00179e7:	52                   	push   edx
c00179e8:	50                   	push   eax
c00179e9:	68 d8 7c 02 c0       	push   0xc0027cd8
c00179ee:	e8 52 a8 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00179f3:	83 c4 10             	add    esp,0x10
c00179f6:	b8 78 69 02 c0       	mov    eax,0xc0026978
c00179fb:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0017a02:	78 05                	js     c0017a09 <CPU::displayFeatures()+0xa3>
c0017a04:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017a09:	51                   	push   ecx
c0017a0a:	51                   	push   ecx
c0017a0b:	50                   	push   eax
c0017a0c:	68 ef 7c 02 c0       	push   0xc0027cef
c0017a11:	e8 2f a8 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0017a16:	83 c4 10             	add    esp,0x10
c0017a19:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017a1e:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017a25:	75 05                	jne    c0017a2c <CPU::displayFeatures()+0xc6>
c0017a27:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017a2c:	52                   	push   edx
c0017a2d:	52                   	push   edx
c0017a2e:	50                   	push   eax
c0017a2f:	68 06 7d 02 c0       	push   0xc0027d06
c0017a34:	e8 0c a8 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0017a39:	83 c4 10             	add    esp,0x10
c0017a3c:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017a41:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0017a48:	75 05                	jne    c0017a4f <CPU::displayFeatures()+0xe9>
c0017a4a:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017a4f:	51                   	push   ecx
c0017a50:	51                   	push   ecx
c0017a51:	50                   	push   eax
c0017a52:	68 1d 7d 02 c0       	push   0xc0027d1d
c0017a57:	e8 e9 a7 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0017a5c:	83 c4 10             	add    esp,0x10
c0017a5f:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017a64:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017a6b:	75 05                	jne    c0017a72 <CPU::displayFeatures()+0x10c>
c0017a6d:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017a72:	52                   	push   edx
c0017a73:	52                   	push   edx
c0017a74:	50                   	push   eax
c0017a75:	68 34 7d 02 c0       	push   0xc0027d34
c0017a7a:	e8 c6 a7 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0017a7f:	83 c4 10             	add    esp,0x10
c0017a82:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017a87:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017a8e:	75 05                	jne    c0017a95 <CPU::displayFeatures()+0x12f>
c0017a90:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017a95:	51                   	push   ecx
c0017a96:	51                   	push   ecx
c0017a97:	50                   	push   eax
c0017a98:	68 4b 7d 02 c0       	push   0xc0027d4b
c0017a9d:	e8 a3 a7 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0017aa2:	83 c4 10             	add    esp,0x10
c0017aa5:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017aaa:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017ab1:	75 05                	jne    c0017ab8 <CPU::displayFeatures()+0x152>
c0017ab3:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017ab8:	52                   	push   edx
c0017ab9:	52                   	push   edx
c0017aba:	50                   	push   eax
c0017abb:	68 62 7d 02 c0       	push   0xc0027d62
c0017ac0:	e8 80 a7 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0017ac5:	83 c4 10             	add    esp,0x10
c0017ac8:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017acd:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017ad4:	75 05                	jne    c0017adb <CPU::displayFeatures()+0x175>
c0017ad6:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017adb:	51                   	push   ecx
c0017adc:	51                   	push   ecx
c0017add:	50                   	push   eax
c0017ade:	68 79 7d 02 c0       	push   0xc0027d79
c0017ae3:	e8 5d a7 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0017ae8:	83 c4 10             	add    esp,0x10
c0017aeb:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017af0:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017af7:	75 05                	jne    c0017afe <CPU::displayFeatures()+0x198>
c0017af9:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017afe:	52                   	push   edx
c0017aff:	52                   	push   edx
c0017b00:	50                   	push   eax
c0017b01:	68 90 7d 02 c0       	push   0xc0027d90
c0017b06:	e8 3a a7 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0017b0b:	83 c4 10             	add    esp,0x10
c0017b0e:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017b13:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0017b1a:	75 05                	jne    c0017b21 <CPU::displayFeatures()+0x1bb>
c0017b1c:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017b21:	51                   	push   ecx
c0017b22:	51                   	push   ecx
c0017b23:	50                   	push   eax
c0017b24:	68 a7 7d 02 c0       	push   0xc0027da7
c0017b29:	e8 17 a7 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0017b2e:	83 c4 10             	add    esp,0x10
c0017b31:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017b36:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017b3d:	75 05                	jne    c0017b44 <CPU::displayFeatures()+0x1de>
c0017b3f:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017b44:	52                   	push   edx
c0017b45:	52                   	push   edx
c0017b46:	50                   	push   eax
c0017b47:	68 be 7d 02 c0       	push   0xc0027dbe
c0017b4c:	e8 f4 a6 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0017b51:	83 c4 10             	add    esp,0x10
c0017b54:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017b59:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0017b60:	75 05                	jne    c0017b67 <CPU::displayFeatures()+0x201>
c0017b62:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017b67:	51                   	push   ecx
c0017b68:	51                   	push   ecx
c0017b69:	50                   	push   eax
c0017b6a:	68 d5 7d 02 c0       	push   0xc0027dd5
c0017b6f:	e8 d1 a6 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0017b74:	83 c4 10             	add    esp,0x10
c0017b77:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017b7c:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0017b83:	75 05                	jne    c0017b8a <CPU::displayFeatures()+0x224>
c0017b85:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017b8a:	52                   	push   edx
c0017b8b:	52                   	push   edx
c0017b8c:	50                   	push   eax
c0017b8d:	68 ec 7d 02 c0       	push   0xc0027dec
c0017b92:	e8 ae a6 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0017b97:	83 c4 10             	add    esp,0x10
c0017b9a:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017b9f:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0017ba6:	78 05                	js     c0017bad <CPU::displayFeatures()+0x247>
c0017ba8:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017bad:	51                   	push   ecx
c0017bae:	51                   	push   ecx
c0017baf:	50                   	push   eax
c0017bb0:	68 03 7e 02 c0       	push   0xc0027e03
c0017bb5:	e8 8b a6 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0017bba:	83 c4 10             	add    esp,0x10
c0017bbd:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017bc2:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0017bc9:	75 05                	jne    c0017bd0 <CPU::displayFeatures()+0x26a>
c0017bcb:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017bd0:	52                   	push   edx
c0017bd1:	52                   	push   edx
c0017bd2:	50                   	push   eax
c0017bd3:	68 1a 7e 02 c0       	push   0xc0027e1a
c0017bd8:	e8 68 a6 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0017bdd:	83 c4 18             	add    esp,0x18
c0017be0:	5b                   	pop    ebx
c0017be1:	c3                   	ret    

c0017be2 <CPU::detectFeatures()>:
c0017be2:	55                   	push   ebp
c0017be3:	57                   	push   edi
c0017be4:	56                   	push   esi
c0017be5:	53                   	push   ebx
c0017be6:	83 ec 50             	sub    esp,0x50
c0017be9:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0017bed:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0017bf7:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017bfe:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0017c04:	6a 0d                	push   0xd
c0017c06:	6a 00                	push   0x0
c0017c08:	57                   	push   edi
c0017c09:	e8 6f 8a fe ff       	call   c000067d <memset>
c0017c0e:	83 c4 10             	add    esp,0x10
c0017c11:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0017c16:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017c1d:	0f 84 20 09 00 00    	je     c0018543 <CPU::detectFeatures()+0x961>
c0017c23:	83 ec 0c             	sub    esp,0xc
c0017c26:	6a 10                	push   0x10
c0017c28:	e8 f3 fb ff ff       	call   c0017820 <CPU::cpuidCheckEDX(unsigned int)>
c0017c2d:	83 e0 01             	and    eax,0x1
c0017c30:	8d 14 00             	lea    edx,[eax+eax*1]
c0017c33:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c39:	83 e0 fd             	and    eax,0xfffffffd
c0017c3c:	09 d0                	or     eax,edx
c0017c3e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c44:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0017c4b:	e8 d0 fb ff ff       	call   c0017820 <CPU::cpuidCheckEDX(unsigned int)>
c0017c50:	83 e0 01             	and    eax,0x1
c0017c53:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017c5a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c60:	83 e0 fb             	and    eax,0xfffffffb
c0017c63:	09 d0                	or     eax,edx
c0017c65:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c6b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0017c72:	e8 a9 fb ff ff       	call   c0017820 <CPU::cpuidCheckEDX(unsigned int)>
c0017c77:	83 e0 01             	and    eax,0x1
c0017c7a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017c81:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c87:	83 e0 f7             	and    eax,0xfffffff7
c0017c8a:	09 d0                	or     eax,edx
c0017c8c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c92:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017c99:	e8 82 fb ff ff       	call   c0017820 <CPU::cpuidCheckEDX(unsigned int)>
c0017c9e:	83 e0 01             	and    eax,0x1
c0017ca1:	c1 e0 04             	shl    eax,0x4
c0017ca4:	88 c2                	mov    dl,al
c0017ca6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017cac:	83 e0 ef             	and    eax,0xffffffef
c0017caf:	09 d0                	or     eax,edx
c0017cb1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017cb7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017cbe:	e8 5d fb ff ff       	call   c0017820 <CPU::cpuidCheckEDX(unsigned int)>
c0017cc3:	83 e0 01             	and    eax,0x1
c0017cc6:	c1 e0 05             	shl    eax,0x5
c0017cc9:	88 c2                	mov    dl,al
c0017ccb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017cd1:	83 e0 df             	and    eax,0xffffffdf
c0017cd4:	09 d0                	or     eax,edx
c0017cd6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017cdc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0017ce3:	e8 38 fb ff ff       	call   c0017820 <CPU::cpuidCheckEDX(unsigned int)>
c0017ce8:	83 e0 01             	and    eax,0x1
c0017ceb:	8d 14 00             	lea    edx,[eax+eax*1]
c0017cee:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017cf4:	83 e0 fd             	and    eax,0xfffffffd
c0017cf7:	09 d0                	or     eax,edx
c0017cf9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017cff:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0017d06:	e8 15 fb ff ff       	call   c0017820 <CPU::cpuidCheckEDX(unsigned int)>
c0017d0b:	83 e0 01             	and    eax,0x1
c0017d0e:	c1 e0 06             	shl    eax,0x6
c0017d11:	88 c2                	mov    dl,al
c0017d13:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017d19:	83 e0 bf             	and    eax,0xffffffbf
c0017d1c:	09 d0                	or     eax,edx
c0017d1e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017d24:	58                   	pop    eax
c0017d25:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017d29:	56                   	push   esi
c0017d2a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017d2e:	55                   	push   ebp
c0017d2f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017d33:	50                   	push   eax
c0017d34:	8d 54 24 28          	lea    edx,[esp+0x28]
c0017d38:	52                   	push   edx
c0017d39:	6a 00                	push   0x0
c0017d3b:	e8 5c fa ff ff       	call   c001779c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017d40:	83 c4 1c             	add    esp,0x1c
c0017d43:	6a 04                	push   0x4
c0017d45:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017d49:	50                   	push   eax
c0017d4a:	57                   	push   edi
c0017d4b:	e8 f7 88 fe ff       	call   c0000647 <memcpy>
c0017d50:	83 c4 0c             	add    esp,0xc
c0017d53:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0017d59:	6a 04                	push   0x4
c0017d5b:	56                   	push   esi
c0017d5c:	50                   	push   eax
c0017d5d:	e8 e5 88 fe ff       	call   c0000647 <memcpy>
c0017d62:	83 c4 0c             	add    esp,0xc
c0017d65:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0017d6b:	6a 04                	push   0x4
c0017d6d:	55                   	push   ebp
c0017d6e:	50                   	push   eax
c0017d6f:	e8 d3 88 fe ff       	call   c0000647 <memcpy>
c0017d74:	58                   	pop    eax
c0017d75:	5a                   	pop    edx
c0017d76:	68 31 7e 02 c0       	push   0xc0027e31
c0017d7b:	57                   	push   edi
c0017d7c:	e8 ec 89 fe ff       	call   c000076d <strcmp>
c0017d81:	83 c4 10             	add    esp,0x10
c0017d84:	85 c0                	test   eax,eax
c0017d86:	75 0f                	jne    c0017d97 <CPU::detectFeatures()+0x1b5>
c0017d88:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0017d92:	e9 22 02 00 00       	jmp    c0017fb9 <CPU::detectFeatures()+0x3d7>
c0017d97:	50                   	push   eax
c0017d98:	50                   	push   eax
c0017d99:	68 3e 7e 02 c0       	push   0xc0027e3e
c0017d9e:	57                   	push   edi
c0017d9f:	e8 c9 89 fe ff       	call   c000076d <strcmp>
c0017da4:	83 c4 10             	add    esp,0x10
c0017da7:	85 c0                	test   eax,eax
c0017da9:	74 dd                	je     c0017d88 <CPU::detectFeatures()+0x1a6>
c0017dab:	51                   	push   ecx
c0017dac:	51                   	push   ecx
c0017dad:	68 4b 7e 02 c0       	push   0xc0027e4b
c0017db2:	57                   	push   edi
c0017db3:	e8 b5 89 fe ff       	call   c000076d <strcmp>
c0017db8:	83 c4 10             	add    esp,0x10
c0017dbb:	85 c0                	test   eax,eax
c0017dbd:	74 2a                	je     c0017de9 <CPU::detectFeatures()+0x207>
c0017dbf:	52                   	push   edx
c0017dc0:	52                   	push   edx
c0017dc1:	68 58 7e 02 c0       	push   0xc0027e58
c0017dc6:	57                   	push   edi
c0017dc7:	e8 a1 89 fe ff       	call   c000076d <strcmp>
c0017dcc:	83 c4 10             	add    esp,0x10
c0017dcf:	85 c0                	test   eax,eax
c0017dd1:	74 16                	je     c0017de9 <CPU::detectFeatures()+0x207>
c0017dd3:	50                   	push   eax
c0017dd4:	50                   	push   eax
c0017dd5:	68 65 7e 02 c0       	push   0xc0027e65
c0017dda:	57                   	push   edi
c0017ddb:	e8 8d 89 fe ff       	call   c000076d <strcmp>
c0017de0:	83 c4 10             	add    esp,0x10
c0017de3:	85 c0                	test   eax,eax
c0017de5:	74 48                	je     c0017e2f <CPU::detectFeatures()+0x24d>
c0017de7:	eb 0f                	jmp    c0017df8 <CPU::detectFeatures()+0x216>
c0017de9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0017df3:	e9 c1 01 00 00       	jmp    c0017fb9 <CPU::detectFeatures()+0x3d7>
c0017df8:	50                   	push   eax
c0017df9:	50                   	push   eax
c0017dfa:	68 72 7e 02 c0       	push   0xc0027e72
c0017dff:	57                   	push   edi
c0017e00:	e8 68 89 fe ff       	call   c000076d <strcmp>
c0017e05:	83 c4 10             	add    esp,0x10
c0017e08:	85 c0                	test   eax,eax
c0017e0a:	74 23                	je     c0017e2f <CPU::detectFeatures()+0x24d>
c0017e0c:	50                   	push   eax
c0017e0d:	50                   	push   eax
c0017e0e:	68 7f 7e 02 c0       	push   0xc0027e7f
c0017e13:	57                   	push   edi
c0017e14:	e8 54 89 fe ff       	call   c000076d <strcmp>
c0017e19:	83 c4 10             	add    esp,0x10
c0017e1c:	85 c0                	test   eax,eax
c0017e1e:	75 1e                	jne    c0017e3e <CPU::detectFeatures()+0x25c>
c0017e20:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017e2a:	e9 8a 01 00 00       	jmp    c0017fb9 <CPU::detectFeatures()+0x3d7>
c0017e2f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0017e39:	e9 7b 01 00 00       	jmp    c0017fb9 <CPU::detectFeatures()+0x3d7>
c0017e3e:	50                   	push   eax
c0017e3f:	50                   	push   eax
c0017e40:	68 8c 7e 02 c0       	push   0xc0027e8c
c0017e45:	57                   	push   edi
c0017e46:	e8 22 89 fe ff       	call   c000076d <strcmp>
c0017e4b:	83 c4 10             	add    esp,0x10
c0017e4e:	85 c0                	test   eax,eax
c0017e50:	75 0f                	jne    c0017e61 <CPU::detectFeatures()+0x27f>
c0017e52:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0017e5c:	e9 58 01 00 00       	jmp    c0017fb9 <CPU::detectFeatures()+0x3d7>
c0017e61:	50                   	push   eax
c0017e62:	50                   	push   eax
c0017e63:	68 4b 7e 02 c0       	push   0xc0027e4b
c0017e68:	57                   	push   edi
c0017e69:	e8 ff 88 fe ff       	call   c000076d <strcmp>
c0017e6e:	83 c4 10             	add    esp,0x10
c0017e71:	85 c0                	test   eax,eax
c0017e73:	75 0f                	jne    c0017e84 <CPU::detectFeatures()+0x2a2>
c0017e75:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0017e7f:	e9 35 01 00 00       	jmp    c0017fb9 <CPU::detectFeatures()+0x3d7>
c0017e84:	50                   	push   eax
c0017e85:	50                   	push   eax
c0017e86:	68 99 7e 02 c0       	push   0xc0027e99
c0017e8b:	57                   	push   edi
c0017e8c:	e8 dc 88 fe ff       	call   c000076d <strcmp>
c0017e91:	83 c4 10             	add    esp,0x10
c0017e94:	85 c0                	test   eax,eax
c0017e96:	75 0f                	jne    c0017ea7 <CPU::detectFeatures()+0x2c5>
c0017e98:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0017ea2:	e9 12 01 00 00       	jmp    c0017fb9 <CPU::detectFeatures()+0x3d7>
c0017ea7:	51                   	push   ecx
c0017ea8:	51                   	push   ecx
c0017ea9:	68 a6 7e 02 c0       	push   0xc0027ea6
c0017eae:	57                   	push   edi
c0017eaf:	e8 b9 88 fe ff       	call   c000076d <strcmp>
c0017eb4:	83 c4 10             	add    esp,0x10
c0017eb7:	85 c0                	test   eax,eax
c0017eb9:	75 0f                	jne    c0017eca <CPU::detectFeatures()+0x2e8>
c0017ebb:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0017ec5:	e9 ef 00 00 00       	jmp    c0017fb9 <CPU::detectFeatures()+0x3d7>
c0017eca:	52                   	push   edx
c0017ecb:	52                   	push   edx
c0017ecc:	68 b3 7e 02 c0       	push   0xc0027eb3
c0017ed1:	57                   	push   edi
c0017ed2:	e8 96 88 fe ff       	call   c000076d <strcmp>
c0017ed7:	83 c4 10             	add    esp,0x10
c0017eda:	85 c0                	test   eax,eax
c0017edc:	75 0f                	jne    c0017eed <CPU::detectFeatures()+0x30b>
c0017ede:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017ee8:	e9 cc 00 00 00       	jmp    c0017fb9 <CPU::detectFeatures()+0x3d7>
c0017eed:	50                   	push   eax
c0017eee:	50                   	push   eax
c0017eef:	68 c0 7e 02 c0       	push   0xc0027ec0
c0017ef4:	57                   	push   edi
c0017ef5:	e8 73 88 fe ff       	call   c000076d <strcmp>
c0017efa:	83 c4 10             	add    esp,0x10
c0017efd:	85 c0                	test   eax,eax
c0017eff:	75 0f                	jne    c0017f10 <CPU::detectFeatures()+0x32e>
c0017f01:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017f0b:	e9 a9 00 00 00       	jmp    c0017fb9 <CPU::detectFeatures()+0x3d7>
c0017f10:	50                   	push   eax
c0017f11:	50                   	push   eax
c0017f12:	68 cd 7e 02 c0       	push   0xc0027ecd
c0017f17:	57                   	push   edi
c0017f18:	e8 50 88 fe ff       	call   c000076d <strcmp>
c0017f1d:	83 c4 10             	add    esp,0x10
c0017f20:	85 c0                	test   eax,eax
c0017f22:	75 0f                	jne    c0017f33 <CPU::detectFeatures()+0x351>
c0017f24:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017f2e:	e9 86 00 00 00       	jmp    c0017fb9 <CPU::detectFeatures()+0x3d7>
c0017f33:	50                   	push   eax
c0017f34:	50                   	push   eax
c0017f35:	68 da 7e 02 c0       	push   0xc0027eda
c0017f3a:	57                   	push   edi
c0017f3b:	e8 2d 88 fe ff       	call   c000076d <strcmp>
c0017f40:	83 c4 10             	add    esp,0x10
c0017f43:	85 c0                	test   eax,eax
c0017f45:	75 0c                	jne    c0017f53 <CPU::detectFeatures()+0x371>
c0017f47:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0017f51:	eb 66                	jmp    c0017fb9 <CPU::detectFeatures()+0x3d7>
c0017f53:	50                   	push   eax
c0017f54:	50                   	push   eax
c0017f55:	68 e7 7e 02 c0       	push   0xc0027ee7
c0017f5a:	57                   	push   edi
c0017f5b:	e8 0d 88 fe ff       	call   c000076d <strcmp>
c0017f60:	83 c4 10             	add    esp,0x10
c0017f63:	85 c0                	test   eax,eax
c0017f65:	75 0c                	jne    c0017f73 <CPU::detectFeatures()+0x391>
c0017f67:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0017f71:	eb 46                	jmp    c0017fb9 <CPU::detectFeatures()+0x3d7>
c0017f73:	50                   	push   eax
c0017f74:	50                   	push   eax
c0017f75:	68 f4 7e 02 c0       	push   0xc0027ef4
c0017f7a:	57                   	push   edi
c0017f7b:	e8 ed 87 fe ff       	call   c000076d <strcmp>
c0017f80:	83 c4 10             	add    esp,0x10
c0017f83:	85 c0                	test   eax,eax
c0017f85:	74 e0                	je     c0017f67 <CPU::detectFeatures()+0x385>
c0017f87:	50                   	push   eax
c0017f88:	50                   	push   eax
c0017f89:	68 01 7f 02 c0       	push   0xc0027f01
c0017f8e:	57                   	push   edi
c0017f8f:	e8 d9 87 fe ff       	call   c000076d <strcmp>
c0017f94:	83 c4 10             	add    esp,0x10
c0017f97:	85 c0                	test   eax,eax
c0017f99:	74 cc                	je     c0017f67 <CPU::detectFeatures()+0x385>
c0017f9b:	51                   	push   ecx
c0017f9c:	51                   	push   ecx
c0017f9d:	68 0e 7f 02 c0       	push   0xc0027f0e
c0017fa2:	57                   	push   edi
c0017fa3:	e8 c5 87 fe ff       	call   c000076d <strcmp>
c0017fa8:	83 c4 10             	add    esp,0x10
c0017fab:	85 c0                	test   eax,eax
c0017fad:	74 b8                	je     c0017f67 <CPU::detectFeatures()+0x385>
c0017faf:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0017fb9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017fbe:	0f 86 be 00 00 00    	jbe    c0018082 <CPU::detectFeatures()+0x4a0>
c0017fc4:	83 ec 0c             	sub    esp,0xc
c0017fc7:	68 80 00 00 00       	push   0x80
c0017fcc:	e8 ab f8 ff ff       	call   c001787c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0017fd1:	83 e0 01             	and    eax,0x1
c0017fd4:	c1 e0 06             	shl    eax,0x6
c0017fd7:	88 c2                	mov    dl,al
c0017fd9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017fdf:	83 e0 bf             	and    eax,0xffffffbf
c0017fe2:	09 d0                	or     eax,edx
c0017fe4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017fea:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017ff1:	e8 86 f8 ff ff       	call   c001787c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0017ff6:	83 e0 01             	and    eax,0x1
c0017ff9:	c1 e0 04             	shl    eax,0x4
c0017ffc:	88 c2                	mov    dl,al
c0017ffe:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018004:	83 e0 ef             	and    eax,0xffffffef
c0018007:	09 d0                	or     eax,edx
c0018009:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001800f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018016:	e8 61 f8 ff ff       	call   c001787c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001801b:	c1 e0 07             	shl    eax,0x7
c001801e:	88 c2                	mov    dl,al
c0018020:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018026:	83 e0 7f             	and    eax,0x7f
c0018029:	09 d0                	or     eax,edx
c001802b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018031:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018038:	e8 6d f8 ff ff       	call   c00178aa <CPU::cpuidCheckExtendedECX(unsigned int)>
c001803d:	83 e0 01             	and    eax,0x1
c0018040:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018047:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001804d:	83 e0 f7             	and    eax,0xfffffff7
c0018050:	09 d0                	or     eax,edx
c0018052:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018058:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001805f:	e8 46 f8 ff ff       	call   c00178aa <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018064:	83 c4 10             	add    esp,0x10
c0018067:	83 e0 01             	and    eax,0x1
c001806a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018071:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018077:	83 e0 fb             	and    eax,0xfffffffb
c001807a:	09 d0                	or     eax,edx
c001807c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018082:	83 ec 0c             	sub    esp,0xc
c0018085:	56                   	push   esi
c0018086:	55                   	push   ebp
c0018087:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001808b:	57                   	push   edi
c001808c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018090:	50                   	push   eax
c0018091:	6a 01                	push   0x1
c0018093:	e8 04 f7 ff ff       	call   c001779c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018098:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001809c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00180a2:	88 ca                	mov    dl,cl
c00180a4:	83 e0 f0             	and    eax,0xfffffff0
c00180a7:	83 e2 0f             	and    edx,0xf
c00180aa:	09 d0                	or     eax,edx
c00180ac:	88 ca                	mov    dl,cl
c00180ae:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00180b4:	c0 ea 04             	shr    dl,0x4
c00180b7:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00180bb:	0f b6 c2             	movzx  eax,dl
c00180be:	83 c4 20             	add    esp,0x20
c00180c1:	c1 e0 06             	shl    eax,0x6
c00180c4:	89 c5                	mov    ebp,eax
c00180c6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00180cc:	66 25 3f c0          	and    ax,0xc03f
c00180d0:	09 e8                	or     eax,ebp
c00180d2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00180d9:	89 c8                	mov    eax,ecx
c00180db:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00180e1:	c1 e8 08             	shr    eax,0x8
c00180e4:	83 e2 3f             	and    edx,0x3f
c00180e7:	83 e0 0f             	and    eax,0xf
c00180ea:	89 c5                	mov    ebp,eax
c00180ec:	c1 e5 06             	shl    ebp,0x6
c00180ef:	09 d5                	or     ebp,edx
c00180f1:	89 ea                	mov    edx,ebp
c00180f3:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00180f9:	88 c2                	mov    dl,al
c00180fb:	c0 ea 02             	shr    dl,0x2
c00180fe:	89 d5                	mov    ebp,edx
c0018100:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018106:	83 e2 c0             	and    edx,0xffffffc0
c0018109:	09 d5                	or     ebp,edx
c001810b:	89 ea                	mov    edx,ebp
c001810d:	89 cd                	mov    ebp,ecx
c001810f:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018115:	c1 ed 0c             	shr    ebp,0xc
c0018118:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001811e:	83 e5 03             	and    ebp,0x3
c0018121:	83 e2 cf             	and    edx,0xffffffcf
c0018124:	c1 e5 04             	shl    ebp,0x4
c0018127:	09 d5                	or     ebp,edx
c0018129:	3c 06                	cmp    al,0x6
c001812b:	89 ea                	mov    edx,ebp
c001812d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018133:	74 04                	je     c0018139 <CPU::detectFeatures()+0x557>
c0018135:	3c 0f                	cmp    al,0xf
c0018137:	75 5c                	jne    c0018195 <CPU::detectFeatures()+0x5b3>
c0018139:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001813d:	89 cd                	mov    ebp,ecx
c001813f:	c1 ed 10             	shr    ebp,0x10
c0018142:	c1 e5 04             	shl    ebp,0x4
c0018145:	09 ea                	or     edx,ebp
c0018147:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001814d:	0f b6 d2             	movzx  edx,dl
c0018150:	66 81 e5 3f c0       	and    bp,0xc03f
c0018155:	c1 e2 06             	shl    edx,0x6
c0018158:	09 ea                	or     edx,ebp
c001815a:	3c 0f                	cmp    al,0xf
c001815c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018163:	75 30                	jne    c0018195 <CPU::detectFeatures()+0x5b3>
c0018165:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001816b:	c1 e9 14             	shr    ecx,0x14
c001816e:	83 e0 3f             	and    eax,0x3f
c0018171:	83 c1 0f             	add    ecx,0xf
c0018174:	88 ca                	mov    dl,cl
c0018176:	c0 e9 02             	shr    cl,0x2
c0018179:	c1 e2 06             	shl    edx,0x6
c001817c:	09 d0                	or     eax,edx
c001817e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018184:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001818a:	83 e0 c0             	and    eax,0xffffffc0
c001818d:	09 c1                	or     ecx,eax
c001818f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018195:	83 ec 0c             	sub    esp,0xc
c0018198:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001819f:	56                   	push   esi
c00181a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00181a4:	50                   	push   eax
c00181a5:	57                   	push   edi
c00181a6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00181aa:	55                   	push   ebp
c00181ab:	68 00 00 00 80       	push   0x80000000
c00181b0:	e8 e7 f5 ff ff       	call   c001779c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181b5:	83 c4 20             	add    esp,0x20
c00181b8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00181c0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00181c4:	76 1e                	jbe    c00181e4 <CPU::detectFeatures()+0x602>
c00181c6:	83 ec 0c             	sub    esp,0xc
c00181c9:	56                   	push   esi
c00181ca:	50                   	push   eax
c00181cb:	57                   	push   edi
c00181cc:	55                   	push   ebp
c00181cd:	68 01 00 00 80       	push   0x80000001
c00181d2:	e8 c5 f5 ff ff       	call   c001779c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181d7:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00181e1:	83 c4 20             	add    esp,0x20
c00181e4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00181ea:	83 f8 01             	cmp    eax,0x1
c00181ed:	75 6f                	jne    c001825e <CPU::detectFeatures()+0x67c>
c00181ef:	51                   	push   ecx
c00181f0:	51                   	push   ecx
c00181f1:	68 1a 7f 02 c0       	push   0xc0027f1a
c00181f6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00181fa:	56                   	push   esi
c00181fb:	e8 1c 85 fe ff       	call   c000071c <strcpy>
c0018200:	5f                   	pop    edi
c0018201:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018207:	5d                   	pop    ebp
c0018208:	66 c1 e8 06          	shr    ax,0x6
c001820c:	0f b6 c0             	movzx  eax,al
c001820f:	50                   	push   eax
c0018210:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018216:	c1 e8 0e             	shr    eax,0xe
c0018219:	0f b6 c0             	movzx  eax,al
c001821c:	50                   	push   eax
c001821d:	e8 24 f2 ff ff       	call   c0017446 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018222:	5a                   	pop    edx
c0018223:	59                   	pop    ecx
c0018224:	50                   	push   eax
c0018225:	56                   	push   esi
c0018226:	e8 a8 85 fe ff       	call   c00007d3 <strcat>
c001822b:	5f                   	pop    edi
c001822c:	5d                   	pop    ebp
c001822d:	56                   	push   esi
c001822e:	53                   	push   ebx
c001822f:	e8 ce b5 ff ff       	call   c0013802 <Device::setName(char const*)>
c0018234:	58                   	pop    eax
c0018235:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001823b:	5a                   	pop    edx
c001823c:	68 21 7f 02 c0       	push   0xc0027f21
c0018241:	50                   	push   eax
c0018242:	e8 26 85 fe ff       	call   c000076d <strcmp>
c0018247:	83 c4 10             	add    esp,0x10
c001824a:	85 c0                	test   eax,eax
c001824c:	0f 85 71 03 00 00    	jne    c00185c3 <CPU::detectFeatures()+0x9e1>
c0018252:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018259:	e9 65 03 00 00       	jmp    c00185c3 <CPU::detectFeatures()+0x9e1>
c001825e:	83 f8 02             	cmp    eax,0x2
c0018261:	0f 85 b5 00 00 00    	jne    c001831c <CPU::detectFeatures()+0x73a>
c0018267:	57                   	push   edi
c0018268:	57                   	push   edi
c0018269:	68 33 7f 02 c0       	push   0xc0027f33
c001826e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018272:	56                   	push   esi
c0018273:	e8 a4 84 fe ff       	call   c000071c <strcpy>
c0018278:	5d                   	pop    ebp
c0018279:	58                   	pop    eax
c001827a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018280:	66 c1 e8 06          	shr    ax,0x6
c0018284:	0f b6 c0             	movzx  eax,al
c0018287:	50                   	push   eax
c0018288:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001828e:	c1 e8 0e             	shr    eax,0xe
c0018291:	0f b6 c0             	movzx  eax,al
c0018294:	50                   	push   eax
c0018295:	e8 18 f0 ff ff       	call   c00172b2 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001829a:	5a                   	pop    edx
c001829b:	59                   	pop    ecx
c001829c:	50                   	push   eax
c001829d:	56                   	push   esi
c001829e:	e8 30 85 fe ff       	call   c00007d3 <strcat>
c00182a3:	5f                   	pop    edi
c00182a4:	5d                   	pop    ebp
c00182a5:	56                   	push   esi
c00182a6:	53                   	push   ebx
c00182a7:	e8 56 b5 ff ff       	call   c0013802 <Device::setName(char const*)>
c00182ac:	58                   	pop    eax
c00182ad:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00182b3:	5a                   	pop    edx
c00182b4:	68 38 7f 02 c0       	push   0xc0027f38
c00182b9:	50                   	push   eax
c00182ba:	e8 ae 84 fe ff       	call   c000076d <strcmp>
c00182bf:	83 c4 10             	add    esp,0x10
c00182c2:	85 c0                	test   eax,eax
c00182c4:	75 20                	jne    c00182e6 <CPU::detectFeatures()+0x704>
c00182c6:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c00182cc:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00182d2:	a8 01                	test   al,0x1
c00182d4:	74 10                	je     c00182e6 <CPU::detectFeatures()+0x704>
c00182d6:	83 e0 fe             	and    eax,0xfffffffe
c00182d9:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00182df:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00182e6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182ec:	c1 e8 0e             	shr    eax,0xe
c00182ef:	3c 05                	cmp    al,0x5
c00182f1:	0f 85 cc 02 00 00    	jne    c00185c3 <CPU::detectFeatures()+0x9e1>
c00182f7:	56                   	push   esi
c00182f8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00182fe:	83 e0 0f             	and    eax,0xf
c0018301:	50                   	push   eax
c0018302:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018308:	66 c1 e8 06          	shr    ax,0x6
c001830c:	0f b6 c0             	movzx  eax,al
c001830f:	50                   	push   eax
c0018310:	6a 05                	push   0x5
c0018312:	e8 11 f4 ff ff       	call   c0017728 <CPU::AMD_K6_writeback(int, int, int)>
c0018317:	e9 1f 02 00 00       	jmp    c001853b <CPU::detectFeatures()+0x959>
c001831c:	8d 50 fd             	lea    edx,[eax-0x3]
c001831f:	83 fa 01             	cmp    edx,0x1
c0018322:	76 09                	jbe    c001832d <CPU::detectFeatures()+0x74b>
c0018324:	83 f8 06             	cmp    eax,0x6
c0018327:	0f 85 91 01 00 00    	jne    c00184be <CPU::detectFeatures()+0x8dc>
c001832d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018333:	c1 ea 0e             	shr    edx,0xe
c0018336:	80 fa 05             	cmp    dl,0x5
c0018339:	75 7b                	jne    c00183b6 <CPU::detectFeatures()+0x7d4>
c001833b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018341:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018346:	66 81 fa 00 01       	cmp    dx,0x100
c001834b:	75 0c                	jne    c0018359 <CPU::detectFeatures()+0x777>
c001834d:	51                   	push   ecx
c001834e:	51                   	push   ecx
c001834f:	68 3f 7f 02 c0       	push   0xc0027f3f
c0018354:	e9 dc 01 00 00       	jmp    c0018535 <CPU::detectFeatures()+0x953>
c0018359:	66 81 fa 00 02       	cmp    dx,0x200
c001835e:	75 0c                	jne    c001836c <CPU::detectFeatures()+0x78a>
c0018360:	52                   	push   edx
c0018361:	52                   	push   edx
c0018362:	68 52 7f 02 c0       	push   0xc0027f52
c0018367:	e9 c9 01 00 00       	jmp    c0018535 <CPU::detectFeatures()+0x953>
c001836c:	66 81 fa 40 02       	cmp    dx,0x240
c0018371:	75 0c                	jne    c001837f <CPU::detectFeatures()+0x79d>
c0018373:	50                   	push   eax
c0018374:	50                   	push   eax
c0018375:	68 64 7f 02 c0       	push   0xc0027f64
c001837a:	e9 b6 01 00 00       	jmp    c0018535 <CPU::detectFeatures()+0x953>
c001837f:	83 f8 06             	cmp    eax,0x6
c0018382:	75 0c                	jne    c0018390 <CPU::detectFeatures()+0x7ae>
c0018384:	50                   	push   eax
c0018385:	50                   	push   eax
c0018386:	68 76 7f 02 c0       	push   0xc0027f76
c001838b:	e9 a5 01 00 00       	jmp    c0018535 <CPU::detectFeatures()+0x953>
c0018390:	83 f8 04             	cmp    eax,0x4
c0018393:	75 0c                	jne    c00183a1 <CPU::detectFeatures()+0x7bf>
c0018395:	50                   	push   eax
c0018396:	50                   	push   eax
c0018397:	68 82 7f 02 c0       	push   0xc0027f82
c001839c:	e9 94 01 00 00       	jmp    c0018535 <CPU::detectFeatures()+0x953>
c00183a1:	83 f8 03             	cmp    eax,0x3
c00183a4:	0f 85 19 02 00 00    	jne    c00185c3 <CPU::detectFeatures()+0x9e1>
c00183aa:	50                   	push   eax
c00183ab:	50                   	push   eax
c00183ac:	68 8a 7f 02 c0       	push   0xc0027f8a
c00183b1:	e9 7f 01 00 00       	jmp    c0018535 <CPU::detectFeatures()+0x953>
c00183b6:	80 fa 06             	cmp    dl,0x6
c00183b9:	0f 85 db 00 00 00    	jne    c001849a <CPU::detectFeatures()+0x8b8>
c00183bf:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00183c5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00183ca:	66 81 fa 80 01       	cmp    dx,0x180
c00183cf:	75 0c                	jne    c00183dd <CPU::detectFeatures()+0x7fb>
c00183d1:	50                   	push   eax
c00183d2:	50                   	push   eax
c00183d3:	68 95 7f 02 c0       	push   0xc0027f95
c00183d8:	e9 58 01 00 00       	jmp    c0018535 <CPU::detectFeatures()+0x953>
c00183dd:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00183e3:	66 f7 c1 80 ff       	test   cx,0xff80
c00183e8:	75 0c                	jne    c00183f6 <CPU::detectFeatures()+0x814>
c00183ea:	50                   	push   eax
c00183eb:	50                   	push   eax
c00183ec:	68 a5 7f 02 c0       	push   0xc0027fa5
c00183f1:	e9 3f 01 00 00       	jmp    c0018535 <CPU::detectFeatures()+0x953>
c00183f6:	66 81 fa 40 02       	cmp    dx,0x240
c00183fb:	75 0c                	jne    c0018409 <CPU::detectFeatures()+0x827>
c00183fd:	55                   	push   ebp
c00183fe:	55                   	push   ebp
c00183ff:	68 ac 7f 02 c0       	push   0xc0027fac
c0018404:	e9 2c 01 00 00       	jmp    c0018535 <CPU::detectFeatures()+0x953>
c0018409:	66 81 fa 80 02       	cmp    dx,0x280
c001840e:	75 0c                	jne    c001841c <CPU::detectFeatures()+0x83a>
c0018410:	57                   	push   edi
c0018411:	57                   	push   edi
c0018412:	68 b5 7f 02 c0       	push   0xc0027fb5
c0018417:	e9 19 01 00 00       	jmp    c0018535 <CPU::detectFeatures()+0x953>
c001841c:	66 81 fa 40 03       	cmp    dx,0x340
c0018421:	74 ed                	je     c0018410 <CPU::detectFeatures()+0x82e>
c0018423:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018428:	75 0c                	jne    c0018436 <CPU::detectFeatures()+0x854>
c001842a:	56                   	push   esi
c001842b:	56                   	push   esi
c001842c:	68 bc 7f 02 c0       	push   0xc0027fbc
c0018431:	e9 ff 00 00 00       	jmp    c0018535 <CPU::detectFeatures()+0x953>
c0018436:	83 f8 06             	cmp    eax,0x6
c0018439:	0f 84 45 ff ff ff    	je     c0018384 <CPU::detectFeatures()+0x7a2>
c001843f:	83 f8 04             	cmp    eax,0x4
c0018442:	0f 84 4d ff ff ff    	je     c0018395 <CPU::detectFeatures()+0x7b3>
c0018448:	83 f8 03             	cmp    eax,0x3
c001844b:	0f 85 72 01 00 00    	jne    c00185c3 <CPU::detectFeatures()+0x9e1>
c0018451:	51                   	push   ecx
c0018452:	51                   	push   ecx
c0018453:	68 c5 7f 02 c0       	push   0xc0027fc5
c0018458:	53                   	push   ebx
c0018459:	e8 a4 b3 ff ff       	call   c0013802 <Device::setName(char const*)>
c001845e:	b1 c1                	mov    cl,0xc1
c0018460:	88 c8                	mov    al,cl
c0018462:	e6 22                	out    0x22,al
c0018464:	e4 23                	in     al,0x23
c0018466:	88 c2                	mov    dl,al
c0018468:	88 c8                	mov    al,cl
c001846a:	e6 22                	out    0x22,al
c001846c:	88 d0                	mov    al,dl
c001846e:	83 c8 10             	or     eax,0x10
c0018471:	e6 23                	out    0x23,al
c0018473:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001847a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001847d:	89 d0                	mov    eax,edx
c001847f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018485:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018489:	40                   	inc    eax
c001848a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018490:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018495:	e9 a1 00 00 00       	jmp    c001853b <CPU::detectFeatures()+0x959>
c001849a:	83 f8 06             	cmp    eax,0x6
c001849d:	0f 84 e1 fe ff ff    	je     c0018384 <CPU::detectFeatures()+0x7a2>
c00184a3:	83 f8 04             	cmp    eax,0x4
c00184a6:	0f 84 e9 fe ff ff    	je     c0018395 <CPU::detectFeatures()+0x7b3>
c00184ac:	83 f8 03             	cmp    eax,0x3
c00184af:	0f 85 0e 01 00 00    	jne    c00185c3 <CPU::detectFeatures()+0x9e1>
c00184b5:	52                   	push   edx
c00184b6:	52                   	push   edx
c00184b7:	68 d0 7f 02 c0       	push   0xc0027fd0
c00184bc:	eb 77                	jmp    c0018535 <CPU::detectFeatures()+0x953>
c00184be:	83 f8 07             	cmp    eax,0x7
c00184c1:	75 09                	jne    c00184cc <CPU::detectFeatures()+0x8ea>
c00184c3:	50                   	push   eax
c00184c4:	50                   	push   eax
c00184c5:	68 da 7f 02 c0       	push   0xc0027fda
c00184ca:	eb 69                	jmp    c0018535 <CPU::detectFeatures()+0x953>
c00184cc:	83 f8 0a             	cmp    eax,0xa
c00184cf:	75 09                	jne    c00184da <CPU::detectFeatures()+0x8f8>
c00184d1:	50                   	push   eax
c00184d2:	50                   	push   eax
c00184d3:	68 e5 7f 02 c0       	push   0xc0027fe5
c00184d8:	eb 5b                	jmp    c0018535 <CPU::detectFeatures()+0x953>
c00184da:	83 f8 0b             	cmp    eax,0xb
c00184dd:	75 09                	jne    c00184e8 <CPU::detectFeatures()+0x906>
c00184df:	50                   	push   eax
c00184e0:	50                   	push   eax
c00184e1:	68 ed 7f 02 c0       	push   0xc0027fed
c00184e6:	eb 4d                	jmp    c0018535 <CPU::detectFeatures()+0x953>
c00184e8:	83 f8 08             	cmp    eax,0x8
c00184eb:	75 09                	jne    c00184f6 <CPU::detectFeatures()+0x914>
c00184ed:	50                   	push   eax
c00184ee:	50                   	push   eax
c00184ef:	68 f6 7f 02 c0       	push   0xc0027ff6
c00184f4:	eb 3f                	jmp    c0018535 <CPU::detectFeatures()+0x953>
c00184f6:	83 f8 09             	cmp    eax,0x9
c00184f9:	75 09                	jne    c0018504 <CPU::detectFeatures()+0x922>
c00184fb:	50                   	push   eax
c00184fc:	50                   	push   eax
c00184fd:	68 fe 7f 02 c0       	push   0xc0027ffe
c0018502:	eb 31                	jmp    c0018535 <CPU::detectFeatures()+0x953>
c0018504:	83 f8 05             	cmp    eax,0x5
c0018507:	75 09                	jne    c0018512 <CPU::detectFeatures()+0x930>
c0018509:	50                   	push   eax
c001850a:	50                   	push   eax
c001850b:	68 06 80 02 c0       	push   0xc0028006
c0018510:	eb 23                	jmp    c0018535 <CPU::detectFeatures()+0x953>
c0018512:	83 f8 0c             	cmp    eax,0xc
c0018515:	75 09                	jne    c0018520 <CPU::detectFeatures()+0x93e>
c0018517:	55                   	push   ebp
c0018518:	55                   	push   ebp
c0018519:	68 14 80 02 c0       	push   0xc0028014
c001851e:	eb 15                	jmp    c0018535 <CPU::detectFeatures()+0x953>
c0018520:	83 f8 0d             	cmp    eax,0xd
c0018523:	75 09                	jne    c001852e <CPU::detectFeatures()+0x94c>
c0018525:	57                   	push   edi
c0018526:	57                   	push   edi
c0018527:	68 1f 80 02 c0       	push   0xc002801f
c001852c:	eb 07                	jmp    c0018535 <CPU::detectFeatures()+0x953>
c001852e:	56                   	push   esi
c001852f:	56                   	push   esi
c0018530:	68 33 80 02 c0       	push   0xc0028033
c0018535:	53                   	push   ebx
c0018536:	e8 c7 b2 ff ff       	call   c0013802 <Device::setName(char const*)>
c001853b:	83 c4 10             	add    esp,0x10
c001853e:	e9 80 00 00 00       	jmp    c00185c3 <CPU::detectFeatures()+0x9e1>
c0018543:	51                   	push   ecx
c0018544:	51                   	push   ecx
c0018545:	68 7f 7e 02 c0       	push   0xc0027e7f
c001854a:	57                   	push   edi
c001854b:	e8 cc 81 fe ff       	call   c000071c <strcpy>
c0018550:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001855a:	e8 04 7d fe ff       	call   c0000263 <is486>
c001855f:	83 c4 10             	add    esp,0x10
c0018562:	85 c0                	test   eax,eax
c0018564:	74 2b                	je     c0018591 <CPU::detectFeatures()+0x9af>
c0018566:	52                   	push   edx
c0018567:	52                   	push   edx
c0018568:	68 3f 80 02 c0       	push   0xc002803f
c001856d:	53                   	push   ebx
c001856e:	e8 8f b2 ff ff       	call   c0013802 <Device::setName(char const*)>
c0018573:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001857a:	0f 20 c0             	mov    eax,cr0
c001857d:	83 e0 14             	and    eax,0x14
c0018580:	83 c4 10             	add    esp,0x10
c0018583:	83 f8 04             	cmp    eax,0x4
c0018586:	75 1f                	jne    c00185a7 <CPU::detectFeatures()+0x9c5>
c0018588:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001858f:	eb 32                	jmp    c00185c3 <CPU::detectFeatures()+0x9e1>
c0018591:	50                   	push   eax
c0018592:	50                   	push   eax
c0018593:	68 4a 80 02 c0       	push   0xc002804a
c0018598:	53                   	push   ebx
c0018599:	e8 64 b2 ff ff       	call   c0013802 <Device::setName(char const*)>
c001859e:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00185a5:	eb d3                	jmp    c001857a <CPU::detectFeatures()+0x998>
c00185a7:	e8 92 7c fe ff       	call   c000023e <hasLegacyFPU>
c00185ac:	83 e0 01             	and    eax,0x1
c00185af:	8d 14 00             	lea    edx,[eax+eax*1]
c00185b2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00185b8:	83 e0 fd             	and    eax,0xfffffffd
c00185bb:	09 d0                	or     eax,edx
c00185bd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00185c3:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00185ca:	83 c4 4c             	add    esp,0x4c
c00185cd:	5b                   	pop    ebx
c00185ce:	5e                   	pop    esi
c00185cf:	5f                   	pop    edi
c00185d0:	5d                   	pop    ebp
c00185d1:	c3                   	ret    

c00185d2 <CPU::setupSMEP()>:
c00185d2:	0f 20 e0             	mov    eax,cr4
c00185d5:	0d 00 00 10 00       	or     eax,0x100000
c00185da:	0f 22 e0             	mov    cr4,eax
c00185dd:	c3                   	ret    

c00185de <CPU::setupUMIP()>:
c00185de:	0f 20 e0             	mov    eax,cr4
c00185e1:	80 cc 08             	or     ah,0x8
c00185e4:	0f 22 e0             	mov    cr4,eax
c00185e7:	c3                   	ret    

c00185e8 <CPU::setupTSC()>:
c00185e8:	0f 20 e0             	mov    eax,cr4
c00185eb:	83 c8 04             	or     eax,0x4
c00185ee:	0f 22 e0             	mov    cr4,eax
c00185f1:	c3                   	ret    

c00185f2 <CPU::setupLargePages()>:
c00185f2:	0f 20 e0             	mov    eax,cr4
c00185f5:	83 c8 10             	or     eax,0x10
c00185f8:	0f 22 e0             	mov    cr4,eax
c00185fb:	c3                   	ret    

c00185fc <CPU::setupPAT()>:
c00185fc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0018601:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018608:	74 2c                	je     c0018636 <CPU::setupPAT()+0x3a>
c001860a:	53                   	push   ebx
c001860b:	83 ec 10             	sub    esp,0x10
c001860e:	68 77 02 00 00       	push   0x277
c0018613:	50                   	push   eax
c0018614:	e8 ad 60 ff ff       	call   c000e6c6 <Computer::rdmsr(unsigned int)>
c0018619:	83 e2 f8             	and    edx,0xfffffff8
c001861c:	83 ca 01             	or     edx,0x1
c001861f:	52                   	push   edx
c0018620:	50                   	push   eax
c0018621:	68 77 02 00 00       	push   0x277
c0018626:	ff 35 68 a4 02 c0    	push   DWORD PTR ds:0xc002a468
c001862c:	e8 c1 60 ff ff       	call   c000e6f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018631:	83 c4 28             	add    esp,0x28
c0018634:	5b                   	pop    ebx
c0018635:	c3                   	ret    
c0018636:	c3                   	ret    
c0018637:	90                   	nop

c0018638 <CPU::setupMTRR()>:
c0018638:	c3                   	ret    
c0018639:	90                   	nop

c001863a <CPU::setupGlobalPages()>:
c001863a:	0f 20 e0             	mov    eax,cr4
c001863d:	0c 80                	or     al,0x80
c001863f:	0f 22 e0             	mov    cr4,eax
c0018642:	c3                   	ret    
c0018643:	90                   	nop

c0018644 <CPU::allowUsermodeDataAccess()>:
c0018644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018648:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001864f:	74 03                	je     c0018654 <CPU::allowUsermodeDataAccess()+0x10>
c0018651:	0f 01 cb             	stac   
c0018654:	c3                   	ret    
c0018655:	90                   	nop

c0018656 <CPU::prohibitUsermodeDataAccess()>:
c0018656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001865a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018661:	74 03                	je     c0018666 <CPU::prohibitUsermodeDataAccess()+0x10>
c0018663:	0f 01 ca             	clac   
c0018666:	c3                   	ret    
c0018667:	90                   	nop

c0018668 <CPU::setupSMAP()>:
c0018668:	0f 20 e0             	mov    eax,cr4
c001866b:	0d 00 00 20 00       	or     eax,0x200000
c0018670:	0f 22 e0             	mov    cr4,eax
c0018673:	eb e1                	jmp    c0018656 <CPU::prohibitUsermodeDataAccess()>
c0018675:	90                   	nop

c0018676 <CPU::setupFeatures()>:
c0018676:	83 ec 0c             	sub    esp,0xc
c0018679:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001867d:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018684:	74 07                	je     c001868d <CPU::setupFeatures()+0x17>
c0018686:	52                   	push   edx
c0018687:	e8 46 ff ff ff       	call   c00185d2 <CPU::setupSMEP()>
c001868c:	58                   	pop    eax
c001868d:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018694:	74 07                	je     c001869d <CPU::setupFeatures()+0x27>
c0018696:	52                   	push   edx
c0018697:	e8 cc ff ff ff       	call   c0018668 <CPU::setupSMAP()>
c001869c:	58                   	pop    eax
c001869d:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00186a4:	74 07                	je     c00186ad <CPU::setupFeatures()+0x37>
c00186a6:	52                   	push   edx
c00186a7:	e8 32 ff ff ff       	call   c00185de <CPU::setupUMIP()>
c00186ac:	58                   	pop    eax
c00186ad:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00186b4:	74 07                	je     c00186bd <CPU::setupFeatures()+0x47>
c00186b6:	52                   	push   edx
c00186b7:	e8 2c ff ff ff       	call   c00185e8 <CPU::setupTSC()>
c00186bc:	58                   	pop    eax
c00186bd:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00186c4:	74 07                	je     c00186cd <CPU::setupFeatures()+0x57>
c00186c6:	52                   	push   edx
c00186c7:	e8 26 ff ff ff       	call   c00185f2 <CPU::setupLargePages()>
c00186cc:	59                   	pop    ecx
c00186cd:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00186d4:	74 07                	je     c00186dd <CPU::setupFeatures()+0x67>
c00186d6:	52                   	push   edx
c00186d7:	e8 5e ff ff ff       	call   c001863a <CPU::setupGlobalPages()>
c00186dc:	58                   	pop    eax
c00186dd:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00186e4:	74 0c                	je     c00186f2 <CPU::setupFeatures()+0x7c>
c00186e6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00186ea:	83 c4 0c             	add    esp,0xc
c00186ed:	e9 0a ff ff ff       	jmp    c00185fc <CPU::setupPAT()>
c00186f2:	83 c4 0c             	add    esp,0xc
c00186f5:	c3                   	ret    

c00186f6 <CPU::open(int, int, void*)>:
c00186f6:	57                   	push   edi
c00186f7:	56                   	push   esi
c00186f8:	53                   	push   ebx
c00186f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00186fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018701:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018707:	83 ec 0c             	sub    esp,0xc
c001870a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018710:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018716:	50                   	push   eax
c0018717:	e8 96 62 ff ff       	call   c000e9b2 <GDT::setup()>
c001871c:	83 c4 0c             	add    esp,0xc
c001871f:	6a 00                	push   0x0
c0018721:	68 ef be ad de       	push   0xdeadbeef
c0018726:	57                   	push   edi
c0018727:	e8 e6 84 ff ff       	call   c0010c12 <TSS::setup(unsigned long, unsigned long)>
c001872c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001872f:	e8 be 84 ff ff       	call   c0010bf2 <TSS::flush()>
c0018734:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001873a:	89 04 24             	mov    DWORD PTR [esp],eax
c001873d:	e8 cc 64 ff ff       	call   c000ec0e <IDT::setup()>
c0018742:	b8 00 04 00 00       	mov    eax,0x400
c0018747:	0f 23 f8             	mov    db7,eax
c001874a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018754:	e8 6f 6f ff ff       	call   c000f6c8 <Phys::allocatePage()>
c0018759:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001875f:	89 30                	mov    DWORD PTR [eax],esi
c0018761:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018767:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001876a:	58                   	pop    eax
c001876b:	5a                   	pop    edx
c001876c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0018772:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018776:	e8 7f 94 ff ff       	call   c0011bfa <VAS::setCPUSpecific(unsigned long)>
c001877b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001877e:	e8 5f f4 ff ff       	call   c0017be2 <CPU::detectFeatures()>
c0018783:	e8 54 c3 ff ff       	call   c0014adc <setupInterruptController()>
c0018788:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001878e:	a1 80 a4 02 c0       	mov    eax,ds:0xc002a480
c0018793:	83 e0 10             	and    eax,0x10
c0018796:	83 f8 01             	cmp    eax,0x1
c0018799:	19 c0                	sbb    eax,eax
c001879b:	83 e0 46             	and    eax,0x46
c001879e:	83 c0 1e             	add    eax,0x1e
c00187a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00187a4:	e8 dd d6 ff ff       	call   c0015e86 <setupTimer(int)>
c00187a9:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00187af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187b2:	e8 bf fe ff ff       	call   c0018676 <CPU::setupFeatures()>
c00187b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187ba:	e8 a7 f1 ff ff       	call   c0017966 <CPU::displayFeatures()>
c00187bf:	83 c4 10             	add    esp,0x10
c00187c2:	31 c0                	xor    eax,eax
c00187c4:	5b                   	pop    ebx
c00187c5:	5e                   	pop    esi
c00187c6:	5f                   	pop    edi
c00187c7:	c3                   	ret    

c00187c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00187c8:	57                   	push   edi
c00187c9:	56                   	push   esi
c00187ca:	53                   	push   ebx
c00187cb:	51                   	push   ecx
c00187cc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00187d0:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00187d3:	0f 02 c0             	lar    eax,ax
c00187d6:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00187d9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00187dd:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00187e0:	88 ca                	mov    dl,cl
c00187e2:	c0 ea 06             	shr    dl,0x6
c00187e5:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00187e9:	89 ca                	mov    edx,ecx
c00187eb:	66 c1 ea 03          	shr    dx,0x3
c00187ef:	83 e2 07             	and    edx,0x7
c00187f2:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00187f7:	88 17                	mov    BYTE PTR [edi],dl
c00187f9:	0f 84 a6 01 00 00    	je     c00189a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00187ff:	83 e1 07             	and    ecx,0x7
c0018802:	80 f9 04             	cmp    cl,0x4
c0018805:	0f 84 98 00 00 00    	je     c00188a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001880b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018810:	0f 95 c0             	setne  al
c0018813:	80 f9 05             	cmp    cl,0x5
c0018816:	0f 95 c2             	setne  dl
c0018819:	08 c2                	or     dl,al
c001881b:	74 79                	je     c0018896 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001881d:	84 c9                	test   cl,cl
c001881f:	75 05                	jne    c0018826 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0018821:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018824:	eb 3c                	jmp    c0018862 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018826:	80 f9 01             	cmp    cl,0x1
c0018829:	75 05                	jne    c0018830 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001882b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001882e:	eb 32                	jmp    c0018862 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018830:	80 f9 02             	cmp    cl,0x2
c0018833:	75 05                	jne    c001883a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0018835:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018838:	eb 28                	jmp    c0018862 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001883a:	31 c0                	xor    eax,eax
c001883c:	80 f9 03             	cmp    cl,0x3
c001883f:	75 05                	jne    c0018846 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0018841:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018844:	eb 1c                	jmp    c0018862 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018846:	80 f9 05             	cmp    cl,0x5
c0018849:	75 05                	jne    c0018850 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001884b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001884e:	eb 12                	jmp    c0018862 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018850:	80 f9 06             	cmp    cl,0x6
c0018853:	75 05                	jne    c001885a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0018855:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018858:	eb 08                	jmp    c0018862 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001885a:	80 f9 07             	cmp    cl,0x7
c001885d:	75 03                	jne    c0018862 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001885f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018862:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018867:	75 10                	jne    c0018879 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0018869:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001886d:	b9 03 00 00 00       	mov    ecx,0x3
c0018872:	01 d0                	add    eax,edx
c0018874:	e9 37 01 00 00       	jmp    c00189b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018879:	b9 02 00 00 00       	mov    ecx,0x2
c001887e:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0018883:	0f 85 27 01 00 00    	jne    c00189b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018889:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001888c:	b9 06 00 00 00       	mov    ecx,0x6
c0018891:	e9 1a 01 00 00       	jmp    c00189b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018896:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0018899:	b9 06 00 00 00       	mov    ecx,0x6
c001889e:	e9 0f 01 00 00       	jmp    c00189b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00188a3:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00188a6:	88 ca                	mov    dl,cl
c00188a8:	c0 ea 06             	shr    dl,0x6
c00188ab:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00188af:	89 ca                	mov    edx,ecx
c00188b1:	66 c1 ea 03          	shr    dx,0x3
c00188b5:	83 e2 07             	and    edx,0x7
c00188b8:	80 e1 07             	and    cl,0x7
c00188bb:	75 05                	jne    c00188c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00188bd:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00188c0:	eb 4c                	jmp    c001890e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188c2:	80 f9 01             	cmp    cl,0x1
c00188c5:	75 05                	jne    c00188cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00188c7:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00188ca:	eb 42                	jmp    c001890e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188cc:	80 f9 02             	cmp    cl,0x2
c00188cf:	75 05                	jne    c00188d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00188d1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00188d4:	eb 38                	jmp    c001890e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188d6:	80 f9 03             	cmp    cl,0x3
c00188d9:	75 05                	jne    c00188e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00188db:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00188de:	eb 2e                	jmp    c001890e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188e0:	80 f9 04             	cmp    cl,0x4
c00188e3:	75 12                	jne    c00188f7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00188e5:	f6 c4 60             	test   ah,0x60
c00188e8:	75 08                	jne    c00188f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00188ea:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00188ed:	8d 78 14             	lea    edi,[eax+0x14]
c00188f0:	eb 1c                	jmp    c001890e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188f2:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00188f5:	eb 17                	jmp    c001890e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188f7:	80 f9 05             	cmp    cl,0x5
c00188fa:	75 05                	jne    c0018901 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00188fc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00188ff:	eb 0d                	jmp    c001890e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018901:	80 f9 06             	cmp    cl,0x6
c0018904:	75 05                	jne    c001890b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018906:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018909:	eb 03                	jmp    c001890e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001890b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001890e:	84 d2                	test   dl,dl
c0018910:	75 05                	jne    c0018917 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0018912:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018915:	eb 3c                	jmp    c0018953 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018917:	80 fa 01             	cmp    dl,0x1
c001891a:	75 05                	jne    c0018921 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001891c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001891f:	eb 32                	jmp    c0018953 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018921:	80 fa 02             	cmp    dl,0x2
c0018924:	75 05                	jne    c001892b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0018926:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018929:	eb 28                	jmp    c0018953 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001892b:	80 fa 03             	cmp    dl,0x3
c001892e:	75 05                	jne    c0018935 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0018930:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018933:	eb 1e                	jmp    c0018953 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018935:	31 c0                	xor    eax,eax
c0018937:	80 fa 04             	cmp    dl,0x4
c001893a:	74 17                	je     c0018953 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001893c:	80 fa 05             	cmp    dl,0x5
c001893f:	75 05                	jne    c0018946 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0018941:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018944:	eb 0d                	jmp    c0018953 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018946:	80 fa 06             	cmp    dl,0x6
c0018949:	75 05                	jne    c0018950 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001894b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001894e:	eb 03                	jmp    c0018953 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018950:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018953:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018958:	0f 94 c2             	sete   dl
c001895b:	80 f9 05             	cmp    cl,0x5
c001895e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0018962:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0018967:	d3 e0                	shl    eax,cl
c0018969:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001896d:	74 0a                	je     c0018979 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001896f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018972:	b9 07 00 00 00       	mov    ecx,0x7
c0018977:	eb 37                	jmp    c00189b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018979:	01 f8                	add    eax,edi
c001897b:	b9 03 00 00 00       	mov    ecx,0x3
c0018980:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018985:	74 2b                	je     c00189b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018987:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001898c:	75 0d                	jne    c001899b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001898e:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0018992:	01 c8                	add    eax,ecx
c0018994:	b9 04 00 00 00       	mov    ecx,0x4
c0018999:	eb 17                	jmp    c00189b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001899b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001899e:	b9 07 00 00 00       	mov    ecx,0x7
c00189a3:	eb 0d                	jmp    c00189b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189a5:	b9 02 00 00 00       	mov    ecx,0x2
c00189aa:	b2 01                	mov    dl,0x1
c00189ac:	31 c0                	xor    eax,eax
c00189ae:	eb 02                	jmp    c00189b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189b0:	31 d2                	xor    edx,edx
c00189b2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00189b6:	89 0b                	mov    DWORD PTR [ebx],ecx
c00189b8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00189bc:	88 11                	mov    BYTE PTR [ecx],dl
c00189be:	5a                   	pop    edx
c00189bf:	5b                   	pop    ebx
c00189c0:	5e                   	pop    esi
c00189c1:	5f                   	pop    edi
c00189c2:	c3                   	ret    

c00189c3 <Krnl::panic(char const*)>:
c00189c3:	55                   	push   ebp
c00189c4:	89 e5                	mov    ebp,esp
c00189c6:	53                   	push   ebx
c00189c7:	50                   	push   eax
c00189c8:	a1 70 af 02 c0       	mov    eax,ds:0xc002af70
c00189cd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00189d0:	85 c0                	test   eax,eax
c00189d2:	74 02                	je     c00189d6 <Krnl::panic(char const*)+0x13>
c00189d4:	ff d0                	call   eax
c00189d6:	fa                   	cli    
c00189d7:	c6 05 74 af 02 c0 01 	mov    BYTE PTR ds:0xc002af74,0x1
c00189de:	83 ec 08             	sub    esp,0x8
c00189e1:	c6 05 20 94 02 c0 00 	mov    BYTE PTR ds:0xc0029420,0x0
c00189e8:	53                   	push   ebx
c00189e9:	68 84 80 02 c0       	push   0xc0028084
c00189ee:	e8 52 98 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00189f3:	58                   	pop    eax
c00189f4:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00189f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00189ff:	e8 4f 7a ff ff       	call   c0010453 <setActiveTerminal(VgaText*)>
c0018a04:	83 c4 0c             	add    esp,0xc
c0018a07:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018a0c:	6a 01                	push   0x1
c0018a0e:	6a 0f                	push   0xf
c0018a10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a16:	e8 77 74 ff ff       	call   c000fe92 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018a1b:	5a                   	pop    edx
c0018a1c:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018a21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a27:	e8 c8 7c ff ff       	call   c00106f4 <VgaText::clearScreen()>
c0018a2c:	59                   	pop    ecx
c0018a2d:	58                   	pop    eax
c0018a2e:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018a33:	68 9d 80 02 c0       	push   0xc002809d
c0018a38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a3e:	e8 2f 7e ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018a43:	58                   	pop    eax
c0018a44:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018a49:	5a                   	pop    edx
c0018a4a:	68 44 81 02 c0       	push   0xc0028144
c0018a4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a55:	e8 18 7e ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018a5a:	59                   	pop    ecx
c0018a5b:	58                   	pop    eax
c0018a5c:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018a61:	68 b9 80 02 c0       	push   0xc00280b9
c0018a66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a6c:	e8 01 7e ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018a71:	58                   	pop    eax
c0018a72:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018a77:	5a                   	pop    edx
c0018a78:	53                   	push   ebx
c0018a79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a7f:	e8 ee 7d ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018a84:	59                   	pop    ecx
c0018a85:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018a8a:	5b                   	pop    ebx
c0018a8b:	68 d9 80 02 c0       	push   0xc00280d9
c0018a90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a96:	e8 d7 7d ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018a9b:	58                   	pop    eax
c0018a9c:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018aa1:	5a                   	pop    edx
c0018aa2:	68 80 81 02 c0       	push   0xc0028180
c0018aa7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018aad:	e8 c0 7d ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018ab2:	59                   	pop    ecx
c0018ab3:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018ab8:	5b                   	pop    ebx
c0018ab9:	68 b9 80 02 c0       	push   0xc00280b9
c0018abe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ac4:	e8 a9 7d ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018ac9:	58                   	pop    eax
c0018aca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018acf:	5a                   	pop    edx
c0018ad0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018ad3:	83 c0 0c             	add    eax,0xc
c0018ad6:	50                   	push   eax
c0018ad7:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018adc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ae2:	e8 8b 7d ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018ae7:	59                   	pop    ecx
c0018ae8:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018aed:	5b                   	pop    ebx
c0018aee:	68 d8 80 02 c0       	push   0xc00280d8
c0018af3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018af9:	e8 74 7d ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018afe:	58                   	pop    eax
c0018aff:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018b04:	5a                   	pop    edx
c0018b05:	68 ac 81 02 c0       	push   0xc00281ac
c0018b0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b10:	e8 5d 7d ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018b15:	59                   	pop    ecx
c0018b16:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018b1b:	5b                   	pop    ebx
c0018b1c:	68 ec 81 02 c0       	push   0xc00281ec
c0018b21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b27:	e8 46 7d ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018b2c:	58                   	pop    eax
c0018b2d:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018b32:	5a                   	pop    edx
c0018b33:	68 c4 80 02 c0       	push   0xc00280c4
c0018b38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b3e:	e8 2f 7d ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018b43:	59                   	pop    ecx
c0018b44:	5b                   	pop    ebx
c0018b45:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018b48:	68 dc 80 02 c0       	push   0xc00280dc
c0018b4d:	e8 f3 96 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0018b52:	58                   	pop    eax
c0018b53:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b56:	5a                   	pop    edx
c0018b57:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018b5a:	68 e5 80 02 c0       	push   0xc00280e5
c0018b5f:	e8 e1 96 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0018b64:	59                   	pop    ecx
c0018b65:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b68:	5b                   	pop    ebx
c0018b69:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b6b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018b6e:	68 ee 80 02 c0       	push   0xc00280ee
c0018b73:	e8 cd 96 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0018b78:	58                   	pop    eax
c0018b79:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018b7e:	5a                   	pop    edx
c0018b7f:	68 30 82 02 c0       	push   0xc0028230
c0018b84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b8a:	e8 e3 7c ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018b8f:	59                   	pop    ecx
c0018b90:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018b95:	5b                   	pop    ebx
c0018b96:	68 f7 80 02 c0       	push   0xc00280f7
c0018b9b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ba1:	e8 cc 7c ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018ba6:	0f 20 c0             	mov    eax,cr0
c0018ba9:	5a                   	pop    edx
c0018baa:	59                   	pop    ecx
c0018bab:	50                   	push   eax
c0018bac:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018bb1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bb7:	e8 dc 7c ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c0018bbc:	5b                   	pop    ebx
c0018bbd:	58                   	pop    eax
c0018bbe:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018bc3:	68 01 81 02 c0       	push   0xc0028101
c0018bc8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bce:	e8 9f 7c ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018bd3:	0f 20 d0             	mov    eax,cr2
c0018bd6:	5a                   	pop    edx
c0018bd7:	59                   	pop    ecx
c0018bd8:	50                   	push   eax
c0018bd9:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018bde:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018be4:	e8 af 7c ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c0018be9:	5b                   	pop    ebx
c0018bea:	58                   	pop    eax
c0018beb:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018bf0:	68 0b 81 02 c0       	push   0xc002810b
c0018bf5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bfb:	e8 72 7c ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018c00:	0f 20 d8             	mov    eax,cr3
c0018c03:	5a                   	pop    edx
c0018c04:	59                   	pop    ecx
c0018c05:	50                   	push   eax
c0018c06:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018c0b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c11:	e8 82 7c ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c0018c16:	5b                   	pop    ebx
c0018c17:	58                   	pop    eax
c0018c18:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018c1d:	68 1e 81 02 c0       	push   0xc002811e
c0018c22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c28:	e8 45 7c ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018c2d:	0f 20 e0             	mov    eax,cr4
c0018c30:	5a                   	pop    edx
c0018c31:	59                   	pop    ecx
c0018c32:	50                   	push   eax
c0018c33:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018c38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c3e:	e8 55 7c ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c0018c43:	5b                   	pop    ebx
c0018c44:	58                   	pop    eax
c0018c45:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018c4a:	68 28 81 02 c0       	push   0xc0028128
c0018c4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c55:	e8 18 7c ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018c5a:	5a                   	pop    edx
c0018c5b:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018c60:	59                   	pop    ecx
c0018c61:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018c67:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018c6a:	50                   	push   eax
c0018c6b:	e8 28 7c ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c0018c70:	5b                   	pop    ebx
c0018c71:	58                   	pop    eax
c0018c72:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018c77:	68 3f 81 02 c0       	push   0xc002813f
c0018c7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c82:	e8 eb 7b ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018c87:	5a                   	pop    edx
c0018c88:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018c8d:	59                   	pop    ecx
c0018c8e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018c94:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018c97:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018c9a:	50                   	push   eax
c0018c9b:	e8 f8 7b ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c0018ca0:	5b                   	pop    ebx
c0018ca1:	58                   	pop    eax
c0018ca2:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018ca7:	68 3f 81 02 c0       	push   0xc002813f
c0018cac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018cb2:	e8 bb 7b ff ff       	call   c0010872 <VgaText::puts(char const*)>
c0018cb7:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018cbc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018cbf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018cc5:	8b 12                	mov    edx,DWORD PTR [edx]
c0018cc7:	59                   	pop    ecx
c0018cc8:	5b                   	pop    ebx
c0018cc9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018ccc:	50                   	push   eax
c0018ccd:	e8 c6 7b ff ff       	call   c0010898 <VgaText::putx(unsigned int)>
c0018cd2:	83 c4 10             	add    esp,0x10
c0018cd5:	b2 fe                	mov    dl,0xfe
c0018cd7:	e4 60                	in     al,0x60
c0018cd9:	3c 1c                	cmp    al,0x1c
c0018cdb:	74 04                	je     c0018ce1 <Krnl::panic(char const*)+0x31e>
c0018cdd:	3c 5a                	cmp    al,0x5a
c0018cdf:	75 f6                	jne    c0018cd7 <Krnl::panic(char const*)+0x314>
c0018ce1:	e4 64                	in     al,0x64
c0018ce3:	a8 02                	test   al,0x2
c0018ce5:	75 fa                	jne    c0018ce1 <Krnl::panic(char const*)+0x31e>
c0018ce7:	88 d0                	mov    al,dl
c0018ce9:	e6 64                	out    0x64,al
c0018ceb:	fa                   	cli    
c0018cec:	f4                   	hlt    
c0018ced:	eb e8                	jmp    c0018cd7 <Krnl::panic(char const*)+0x314>

c0018cef <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0018cef:	55                   	push   ebp
c0018cf0:	57                   	push   edi
c0018cf1:	56                   	push   esi
c0018cf2:	53                   	push   ebx
c0018cf3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018cf9:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0018d00:	8a 1e                	mov    bl,BYTE PTR [esi]
c0018d02:	8d 6e 01             	lea    ebp,[esi+0x1]
c0018d05:	80 fb 40             	cmp    bl,0x40
c0018d08:	75 1b                	jne    c0018d25 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0018d0a:	8a 16                	mov    dl,BYTE PTR [esi]
c0018d0c:	84 d2                	test   dl,dl
c0018d0e:	0f 84 f1 00 00 00    	je     c0018e05 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d14:	8d 46 01             	lea    eax,[esi+0x1]
c0018d17:	80 fa 3a             	cmp    dl,0x3a
c0018d1a:	74 04                	je     c0018d20 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0018d1c:	89 c6                	mov    esi,eax
c0018d1e:	eb ea                	jmp    c0018d0a <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0018d20:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018d23:	89 c6                	mov    esi,eax
c0018d25:	50                   	push   eax
c0018d26:	6a 40                	push   0x40
c0018d28:	6a 00                	push   0x0
c0018d2a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018d2e:	50                   	push   eax
c0018d2f:	e8 49 79 fe ff       	call   c000067d <memset>
c0018d34:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0018d3b:	31 c0                	xor    eax,eax
c0018d3d:	83 c4 10             	add    esp,0x10
c0018d40:	8a 0f                	mov    cl,BYTE PTR [edi]
c0018d42:	84 c9                	test   cl,cl
c0018d44:	0f 84 bb 00 00 00    	je     c0018e05 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d4a:	3d c7 00 00 00       	cmp    eax,0xc7
c0018d4f:	0f 8f b0 00 00 00    	jg     c0018e05 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d55:	80 f9 0a             	cmp    cl,0xa
c0018d58:	0f 85 98 00 00 00    	jne    c0018df6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0018d5e:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0018d63:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0018d67:	a8 df                	test   al,0xdf
c0018d69:	0f 94 c1             	sete   cl
c0018d6c:	3c 23                	cmp    al,0x23
c0018d6e:	0f 94 c2             	sete   dl
c0018d71:	08 d1                	or     cl,dl
c0018d73:	75 4a                	jne    c0018dbf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018d75:	8d 50 f7             	lea    edx,[eax-0x9]
c0018d78:	80 fa 01             	cmp    dl,0x1
c0018d7b:	76 42                	jbe    c0018dbf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018d7d:	3c 5b                	cmp    al,0x5b
c0018d7f:	75 42                	jne    c0018dc3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0018d81:	80 fb 40             	cmp    bl,0x40
c0018d84:	75 39                	jne    c0018dbf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018d86:	83 ec 0c             	sub    esp,0xc
c0018d89:	8d 54 24 65          	lea    edx,[esp+0x65]
c0018d8d:	52                   	push   edx
c0018d8e:	e8 07 79 fe ff       	call   c000069a <strlen>
c0018d93:	83 c4 10             	add    esp,0x10
c0018d96:	83 f8 3f             	cmp    eax,0x3f
c0018d99:	77 6a                	ja     c0018e05 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d9b:	50                   	push   eax
c0018d9c:	50                   	push   eax
c0018d9d:	8d 54 24 61          	lea    edx,[esp+0x61]
c0018da1:	52                   	push   edx
c0018da2:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018da6:	52                   	push   edx
c0018da7:	e8 70 79 fe ff       	call   c000071c <strcpy>
c0018dac:	58                   	pop    eax
c0018dad:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018db1:	52                   	push   edx
c0018db2:	e8 e3 78 fe ff       	call   c000069a <strlen>
c0018db7:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0018dbc:	83 c4 10             	add    esp,0x10
c0018dbf:	31 d2                	xor    edx,edx
c0018dc1:	eb 3a                	jmp    c0018dfd <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0018dc3:	80 fb 40             	cmp    bl,0x40
c0018dc6:	74 06                	je     c0018dce <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0018dc8:	8d 44 24 58          	lea    eax,[esp+0x58]
c0018dcc:	eb 20                	jmp    c0018dee <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0018dce:	50                   	push   eax
c0018dcf:	50                   	push   eax
c0018dd0:	55                   	push   ebp
c0018dd1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018dd5:	50                   	push   eax
c0018dd6:	e8 92 79 fe ff       	call   c000076d <strcmp>
c0018ddb:	83 c4 10             	add    esp,0x10
c0018dde:	85 c0                	test   eax,eax
c0018de0:	75 dd                	jne    c0018dbf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018de2:	eb e4                	jmp    c0018dc8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0018de4:	8d 50 01             	lea    edx,[eax+0x1]
c0018de7:	80 f9 3d             	cmp    cl,0x3d
c0018dea:	74 1d                	je     c0018e09 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0018dec:	89 d0                	mov    eax,edx
c0018dee:	8a 08                	mov    cl,BYTE PTR [eax]
c0018df0:	84 c9                	test   cl,cl
c0018df2:	75 f0                	jne    c0018de4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0018df4:	eb 0f                	jmp    c0018e05 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018df6:	8d 50 01             	lea    edx,[eax+0x1]
c0018df9:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0018dfd:	47                   	inc    edi
c0018dfe:	89 d0                	mov    eax,edx
c0018e00:	e9 3b ff ff ff       	jmp    c0018d40 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0018e05:	31 c0                	xor    eax,eax
c0018e07:	eb 33                	jmp    c0018e3c <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0018e09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018e0d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018e10:	50                   	push   eax
c0018e11:	50                   	push   eax
c0018e12:	8d 44 24 60          	lea    eax,[esp+0x60]
c0018e16:	50                   	push   eax
c0018e17:	56                   	push   esi
c0018e18:	e8 50 79 fe ff       	call   c000076d <strcmp>
c0018e1d:	83 c4 10             	add    esp,0x10
c0018e20:	85 c0                	test   eax,eax
c0018e22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e26:	75 97                	jne    c0018dbf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e28:	51                   	push   ecx
c0018e29:	51                   	push   ecx
c0018e2a:	52                   	push   edx
c0018e2b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018e32:	e8 e5 78 fe ff       	call   c000071c <strcpy>
c0018e37:	83 c4 10             	add    esp,0x10
c0018e3a:	b0 01                	mov    al,0x1
c0018e3c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018e42:	5b                   	pop    ebx
c0018e43:	5e                   	pop    esi
c0018e44:	5f                   	pop    edi
c0018e45:	5d                   	pop    ebp
c0018e46:	c3                   	ret    

c0018e47 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0018e47:	57                   	push   edi
c0018e48:	56                   	push   esi
c0018e49:	53                   	push   ebx
c0018e4a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018e50:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0018e57:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0018e5e:	53                   	push   ebx
c0018e5f:	e8 36 78 fe ff       	call   c000069a <strlen>
c0018e64:	89 34 24             	mov    DWORD PTR [esp],esi
c0018e67:	89 c7                	mov    edi,eax
c0018e69:	e8 2c 78 fe ff       	call   c000069a <strlen>
c0018e6e:	83 c4 10             	add    esp,0x10
c0018e71:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0018e75:	31 ff                	xor    edi,edi
c0018e77:	3d ff 00 00 00       	cmp    eax,0xff
c0018e7c:	0f 87 18 01 00 00    	ja     c0018f9a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018e82:	51                   	push   ecx
c0018e83:	51                   	push   ecx
c0018e84:	56                   	push   esi
c0018e85:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0018e89:	56                   	push   esi
c0018e8a:	e8 8d 78 fe ff       	call   c000071c <strcpy>
c0018e8f:	58                   	pop    eax
c0018e90:	5a                   	pop    edx
c0018e91:	68 28 86 02 c0       	push   0xc0028628
c0018e96:	56                   	push   esi
c0018e97:	e8 37 79 fe ff       	call   c00007d3 <strcat>
c0018e9c:	59                   	pop    ecx
c0018e9d:	58                   	pop    eax
c0018e9e:	53                   	push   ebx
c0018e9f:	56                   	push   esi
c0018ea0:	e8 2e 79 fe ff       	call   c00007d3 <strcat>
c0018ea5:	58                   	pop    eax
c0018ea6:	5a                   	pop    edx
c0018ea7:	68 56 82 02 c0       	push   0xc0028256
c0018eac:	56                   	push   esi
c0018ead:	e8 21 79 fe ff       	call   c00007d3 <strcat>
c0018eb2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018eb9:	e8 98 92 ff ff       	call   c0012156 <operator new(unsigned long)>
c0018ebe:	83 c4 0c             	add    esp,0xc
c0018ec1:	89 c3                	mov    ebx,eax
c0018ec3:	ff 35 74 b9 02 c0    	push   DWORD PTR ds:0xc002b974
c0018ec9:	56                   	push   esi
c0018eca:	50                   	push   eax
c0018ecb:	e8 a4 98 ff ff       	call   c0012774 <File::File(char const*, Process*)>
c0018ed0:	59                   	pop    ecx
c0018ed1:	5e                   	pop    esi
c0018ed2:	6a 01                	push   0x1
c0018ed4:	53                   	push   ebx
c0018ed5:	e8 fe 98 ff ff       	call   c00127d8 <File::open(FileOpenMode)>
c0018eda:	83 c4 10             	add    esp,0x10
c0018edd:	85 c0                	test   eax,eax
c0018edf:	74 08                	je     c0018ee9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0018ee1:	83 ec 0c             	sub    esp,0xc
c0018ee4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018ee6:	53                   	push   ebx
c0018ee7:	eb 2e                	jmp    c0018f17 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0018ee9:	52                   	push   edx
c0018eea:	8d 44 24 07          	lea    eax,[esp+0x7]
c0018eee:	50                   	push   eax
c0018eef:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018ef3:	50                   	push   eax
c0018ef4:	53                   	push   ebx
c0018ef5:	e8 8a 9b ff ff       	call   c0012a84 <File::stat(unsigned long long*, bool*)>
c0018efa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018efe:	83 c4 10             	add    esp,0x10
c0018f01:	89 c1                	mov    ecx,eax
c0018f03:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0018f07:	75 13                	jne    c0018f1c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0018f09:	83 ec 0c             	sub    esp,0xc
c0018f0c:	53                   	push   ebx
c0018f0d:	e8 24 99 ff ff       	call   c0012836 <File::close()>
c0018f12:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f17:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018f1a:	eb 7b                	jmp    c0018f97 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0018f1c:	83 ec 0c             	sub    esp,0xc
c0018f1f:	50                   	push   eax
c0018f20:	e8 f9 61 ff ff       	call   c000f11e <malloc>
c0018f25:	89 c6                	mov    esi,eax
c0018f27:	58                   	pop    eax
c0018f28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f2a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018f2e:	52                   	push   edx
c0018f2f:	56                   	push   esi
c0018f30:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f34:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f38:	53                   	push   ebx
c0018f39:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018f3c:	83 c4 20             	add    esp,0x20
c0018f3f:	85 c0                	test   eax,eax
c0018f41:	75 0a                	jne    c0018f4d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0018f43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f47:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018f4b:	74 18                	je     c0018f65 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0018f4d:	83 ec 0c             	sub    esp,0xc
c0018f50:	31 ff                	xor    edi,edi
c0018f52:	53                   	push   ebx
c0018f53:	e8 de 98 ff ff       	call   c0012836 <File::close()>
c0018f58:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018f60:	83 c4 10             	add    esp,0x10
c0018f63:	eb 35                	jmp    c0018f9a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018f65:	83 ec 0c             	sub    esp,0xc
c0018f68:	53                   	push   ebx
c0018f69:	e8 c8 98 ff ff       	call   c0012836 <File::close()>
c0018f6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018f76:	83 c4 0c             	add    esp,0xc
c0018f79:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018f80:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018f87:	56                   	push   esi
c0018f88:	e8 62 fd ff ff       	call   c0018cef <Reg::findLineFromLoadedData(char*, char*, char*)>
c0018f8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0018f90:	89 c7                	mov    edi,eax
c0018f92:	e8 97 61 ff ff       	call   c000f12e <free>
c0018f97:	83 c4 10             	add    esp,0x10
c0018f9a:	81 c4 10 01 00 00    	add    esp,0x110
c0018fa0:	89 f8                	mov    eax,edi
c0018fa2:	5b                   	pop    ebx
c0018fa3:	5e                   	pop    esi
c0018fa4:	5f                   	pop    edi
c0018fa5:	c3                   	ret    

c0018fa6 <Reg::getLine(char*, char*, char*)>:
c0018fa6:	57                   	push   edi
c0018fa7:	56                   	push   esi
c0018fa8:	53                   	push   ebx
c0018fa9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018fad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018fb1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0018fb5:	57                   	push   edi
c0018fb6:	56                   	push   esi
c0018fb7:	53                   	push   ebx
c0018fb8:	68 5b 82 02 c0       	push   0xc002825b
c0018fbd:	e8 85 fe ff ff       	call   c0018e47 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0018fc2:	83 c4 10             	add    esp,0x10
c0018fc5:	84 c0                	test   al,al
c0018fc7:	75 10                	jne    c0018fd9 <Reg::getLine(char*, char*, char*)+0x33>
c0018fc9:	57                   	push   edi
c0018fca:	56                   	push   esi
c0018fcb:	53                   	push   ebx
c0018fcc:	68 80 82 02 c0       	push   0xc0028280
c0018fd1:	e8 71 fe ff ff       	call   c0018e47 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0018fd6:	83 c4 10             	add    esp,0x10
c0018fd9:	5b                   	pop    ebx
c0018fda:	5e                   	pop    esi
c0018fdb:	5f                   	pop    edi
c0018fdc:	c3                   	ret    

c0018fdd <Reg::readInt(char*, char*, int*)>:
c0018fdd:	55                   	push   ebp
c0018fde:	57                   	push   edi
c0018fdf:	56                   	push   esi
c0018fe0:	53                   	push   ebx
c0018fe1:	81 ec f0 00 00 00    	sub    esp,0xf0
c0018fe7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0018feb:	57                   	push   edi
c0018fec:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0018ff3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0018ffa:	e8 a7 ff ff ff       	call   c0018fa6 <Reg::getLine(char*, char*, char*)>
c0018fff:	83 c4 10             	add    esp,0x10
c0019002:	84 c0                	test   al,al
c0019004:	0f 84 b3 00 00 00    	je     c00190bd <Reg::readInt(char*, char*, int*)+0xe0>
c001900a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001900e:	80 fa 2b             	cmp    dl,0x2b
c0019011:	74 0c                	je     c001901f <Reg::readInt(char*, char*, int*)+0x42>
c0019013:	80 fa 2d             	cmp    dl,0x2d
c0019016:	75 0e                	jne    c0019026 <Reg::readInt(char*, char*, int*)+0x49>
c0019018:	ba 01 00 00 00       	mov    edx,0x1
c001901d:	eb 0b                	jmp    c001902a <Reg::readInt(char*, char*, int*)+0x4d>
c001901f:	ba 01 00 00 00       	mov    edx,0x1
c0019024:	eb 02                	jmp    c0019028 <Reg::readInt(char*, char*, int*)+0x4b>
c0019026:	31 d2                	xor    edx,edx
c0019028:	31 c0                	xor    eax,eax
c001902a:	be 0a 00 00 00       	mov    esi,0xa
c001902f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0019034:	75 20                	jne    c0019056 <Reg::readInt(char*, char*, int*)+0x79>
c0019036:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001903a:	80 f9 78             	cmp    cl,0x78
c001903d:	75 0a                	jne    c0019049 <Reg::readInt(char*, char*, int*)+0x6c>
c001903f:	83 c2 02             	add    edx,0x2
c0019042:	be 10 00 00 00       	mov    esi,0x10
c0019047:	eb 0d                	jmp    c0019056 <Reg::readInt(char*, char*, int*)+0x79>
c0019049:	80 f9 62             	cmp    cl,0x62
c001904c:	75 08                	jne    c0019056 <Reg::readInt(char*, char*, int*)+0x79>
c001904e:	83 c2 02             	add    edx,0x2
c0019051:	be 02 00 00 00       	mov    esi,0x2
c0019056:	01 d7                	add    edi,edx
c0019058:	31 d2                	xor    edx,edx
c001905a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001905c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0019060:	80 fb 0d             	cmp    bl,0xd
c0019063:	0f 94 c3             	sete   bl
c0019066:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001906b:	0f 94 c1             	sete   cl
c001906e:	08 cb                	or     bl,cl
c0019070:	75 3a                	jne    c00190ac <Reg::readInt(char*, char*, int*)+0xcf>
c0019072:	0f af d6             	imul   edx,esi
c0019075:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001907a:	83 fe 10             	cmp    esi,0x10
c001907d:	75 26                	jne    c00190a5 <Reg::readInt(char*, char*, int*)+0xc8>
c001907f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0019083:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0019086:	89 e9                	mov    ecx,ebp
c0019088:	80 f9 05             	cmp    cl,0x5
c001908b:	77 06                	ja     c0019093 <Reg::readInt(char*, char*, int*)+0xb6>
c001908d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0019091:	eb 16                	jmp    c00190a9 <Reg::readInt(char*, char*, int*)+0xcc>
c0019093:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0019097:	83 e9 61             	sub    ecx,0x61
c001909a:	80 f9 05             	cmp    cl,0x5
c001909d:	77 06                	ja     c00190a5 <Reg::readInt(char*, char*, int*)+0xc8>
c001909f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00190a3:	eb 04                	jmp    c00190a9 <Reg::readInt(char*, char*, int*)+0xcc>
c00190a5:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00190a9:	47                   	inc    edi
c00190aa:	eb ae                	jmp    c001905a <Reg::readInt(char*, char*, int*)+0x7d>
c00190ac:	84 c0                	test   al,al
c00190ae:	74 02                	je     c00190b2 <Reg::readInt(char*, char*, int*)+0xd5>
c00190b0:	f7 da                	neg    edx
c00190b2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00190b9:	89 10                	mov    DWORD PTR [eax],edx
c00190bb:	88 d8                	mov    al,bl
c00190bd:	81 c4 ec 00 00 00    	add    esp,0xec
c00190c3:	5b                   	pop    ebx
c00190c4:	5e                   	pop    esi
c00190c5:	5f                   	pop    edi
c00190c6:	5d                   	pop    ebp
c00190c7:	c3                   	ret    

c00190c8 <Reg::readString(char*, char*, char*, int)>:
c00190c8:	57                   	push   edi
c00190c9:	56                   	push   esi
c00190ca:	53                   	push   ebx
c00190cb:	81 ec d4 00 00 00    	sub    esp,0xd4
c00190d1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00190d8:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00190dc:	57                   	push   edi
c00190dd:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00190e4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00190eb:	e8 b6 fe ff ff       	call   c0018fa6 <Reg::getLine(char*, char*, char*)>
c00190f0:	83 c4 10             	add    esp,0x10
c00190f3:	89 c6                	mov    esi,eax
c00190f5:	84 c0                	test   al,al
c00190f7:	74 44                	je     c001913d <Reg::readString(char*, char*, char*, int)+0x75>
c00190f9:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0019100:	31 c0                	xor    eax,eax
c0019102:	4a                   	dec    edx
c0019103:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0019106:	84 c9                	test   cl,cl
c0019108:	74 0f                	je     c0019119 <Reg::readString(char*, char*, char*, int)+0x51>
c001910a:	39 c2                	cmp    edx,eax
c001910c:	7e 0b                	jle    c0019119 <Reg::readString(char*, char*, char*, int)+0x51>
c001910e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0019111:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0019116:	40                   	inc    eax
c0019117:	eb ea                	jmp    c0019103 <Reg::readString(char*, char*, char*, int)+0x3b>
c0019119:	83 ec 0c             	sub    esp,0xc
c001911c:	53                   	push   ebx
c001911d:	e8 78 75 fe ff       	call   c000069a <strlen>
c0019122:	83 c4 10             	add    esp,0x10
c0019125:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001912a:	75 11                	jne    c001913d <Reg::readString(char*, char*, char*, int)+0x75>
c001912c:	83 ec 0c             	sub    esp,0xc
c001912f:	53                   	push   ebx
c0019130:	e8 65 75 fe ff       	call   c000069a <strlen>
c0019135:	83 c4 10             	add    esp,0x10
c0019138:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001913d:	81 c4 d0 00 00 00    	add    esp,0xd0
c0019143:	89 f0                	mov    eax,esi
c0019145:	5b                   	pop    ebx
c0019146:	5e                   	pop    esi
c0019147:	5f                   	pop    edi
c0019148:	c3                   	ret    

c0019149 <Reg::readBool(char*, char*, bool*)>:
c0019149:	83 ec 20             	sub    esp,0x20
c001914c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019150:	50                   	push   eax
c0019151:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019155:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019159:	e8 7f fe ff ff       	call   c0018fdd <Reg::readInt(char*, char*, int*)>
c001915e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019163:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019167:	0f 95 02             	setne  BYTE PTR [edx]
c001916a:	83 c4 2c             	add    esp,0x2c
c001916d:	c3                   	ret    

c001916e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001916e:	53                   	push   ebx
c001916f:	83 ec 1c             	sub    esp,0x1c
c0019172:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0019176:	8d 44 24 13          	lea    eax,[esp+0x13]
c001917a:	50                   	push   eax
c001917b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001917f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019183:	e8 c1 ff ff ff       	call   c0019149 <Reg::readBool(char*, char*, bool*)>
c0019188:	83 c4 10             	add    esp,0x10
c001918b:	84 c0                	test   al,al
c001918d:	74 04                	je     c0019193 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001918f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0019193:	88 d8                	mov    al,bl
c0019195:	83 c4 18             	add    esp,0x18
c0019198:	5b                   	pop    ebx
c0019199:	c3                   	ret    

c001919a <Reg::readIntWithDefault(char*, char*, int)>:
c001919a:	53                   	push   ebx
c001919b:	83 ec 1c             	sub    esp,0x1c
c001919e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00191a2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191a6:	50                   	push   eax
c00191a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191af:	e8 29 fe ff ff       	call   c0018fdd <Reg::readInt(char*, char*, int*)>
c00191b4:	83 c4 10             	add    esp,0x10
c00191b7:	84 c0                	test   al,al
c00191b9:	74 04                	je     c00191bf <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00191bb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00191bf:	89 d8                	mov    eax,ebx
c00191c1:	83 c4 18             	add    esp,0x18
c00191c4:	5b                   	pop    ebx
c00191c5:	c3                   	ret    

c00191c6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00191c6:	56                   	push   esi
c00191c7:	53                   	push   ebx
c00191c8:	51                   	push   ecx
c00191c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00191cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00191d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00191d5:	56                   	push   esi
c00191d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00191da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00191de:	e8 e5 fe ff ff       	call   c00190c8 <Reg::readString(char*, char*, char*, int)>
c00191e3:	83 c4 10             	add    esp,0x10
c00191e6:	84 c0                	test   al,al
c00191e8:	74 02                	je     c00191ec <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00191ea:	89 f3                	mov    ebx,esi
c00191ec:	89 d8                	mov    eax,ebx
c00191ee:	5a                   	pop    edx
c00191ef:	5b                   	pop    ebx
c00191f0:	5e                   	pop    esi
c00191f1:	c3                   	ret    

c00191f2 <Sys::exit(regs*)>:
c00191f2:	83 ec 18             	sub    esp,0x18
c00191f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00191f9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00191fc:	e8 29 31 00 00       	call   c001c32a <terminateTask(int)>
c0019201:	83 c8 ff             	or     eax,0xffffffff
c0019204:	83 c4 1c             	add    esp,0x1c
c0019207:	89 c2                	mov    edx,eax
c0019209:	c3                   	ret    

c001920a <Sys::loadDLL(regs*)>:
c001920a:	56                   	push   esi
c001920b:	53                   	push   ebx
c001920c:	31 d2                	xor    edx,edx
c001920e:	51                   	push   ecx
c001920f:	b8 01 00 00 00       	mov    eax,0x1
c0019214:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019218:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001921c:	74 7d                	je     c001929b <Sys::loadDLL(regs*)+0x91>
c001921e:	83 ec 0c             	sub    esp,0xc
c0019221:	68 14 01 00 00       	push   0x114
c0019226:	e8 2b 8f ff ff       	call   c0012156 <operator new(unsigned long)>
c001922b:	83 c4 0c             	add    esp,0xc
c001922e:	89 c3                	mov    ebx,eax
c0019230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019235:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019238:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001923b:	53                   	push   ebx
c001923c:	e8 33 95 ff ff       	call   c0012774 <File::File(char const*, Process*)>
c0019241:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019244:	e8 fd 97 ff ff       	call   c0012a46 <File::exists()>
c0019249:	83 c4 10             	add    esp,0x10
c001924c:	84 c0                	test   al,al
c001924e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019250:	75 11                	jne    c0019263 <Sys::loadDLL(regs*)+0x59>
c0019252:	83 ec 0c             	sub    esp,0xc
c0019255:	53                   	push   ebx
c0019256:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019259:	83 c4 10             	add    esp,0x10
c001925c:	b8 03 00 00 00       	mov    eax,0x3
c0019261:	eb 36                	jmp    c0019299 <Sys::loadDLL(regs*)+0x8f>
c0019263:	83 ec 0c             	sub    esp,0xc
c0019266:	53                   	push   ebx
c0019267:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001926a:	58                   	pop    eax
c001926b:	5a                   	pop    edx
c001926c:	6a 00                	push   0x0
c001926e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019271:	e8 c4 20 00 00       	call   c001b33a <Thr::loadDLL(char const*, bool)>
c0019276:	83 c4 10             	add    esp,0x10
c0019279:	89 c1                	mov    ecx,eax
c001927b:	31 d2                	xor    edx,edx
c001927d:	b8 04 00 00 00       	mov    eax,0x4
c0019282:	85 c9                	test   ecx,ecx
c0019284:	74 15                	je     c001929b <Sys::loadDLL(regs*)+0x91>
c0019286:	53                   	push   ebx
c0019287:	53                   	push   ebx
c0019288:	ff 35 68 a4 02 c0    	push   DWORD PTR ds:0xc002a468
c001928e:	51                   	push   ecx
c001928f:	e8 6c 22 00 00       	call   c001b500 <Thr::executeDLL(unsigned long, void*)>
c0019294:	83 c4 10             	add    esp,0x10
c0019297:	31 c0                	xor    eax,eax
c0019299:	31 d2                	xor    edx,edx
c001929b:	59                   	pop    ecx
c001929c:	5b                   	pop    ebx
c001929d:	5e                   	pop    esi
c001929e:	c3                   	ret    

c001929f <Sys::read(regs*)>:
c001929f:	57                   	push   edi
c00192a0:	56                   	push   esi
c00192a1:	53                   	push   ebx
c00192a2:	83 ec 10             	sub    esp,0x10
c00192a5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00192a9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00192ac:	83 f8 02             	cmp    eax,0x2
c00192af:	77 10                	ja     c00192c1 <Sys::read(regs*)+0x22>
c00192b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00192b9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00192bf:	eb 0e                	jmp    c00192cf <Sys::read(regs*)+0x30>
c00192c1:	83 ec 0c             	sub    esp,0xc
c00192c4:	50                   	push   eax
c00192c5:	e8 41 7e ff ff       	call   c001110b <getFromFileDescriptor(int)>
c00192ca:	83 c4 10             	add    esp,0x10
c00192cd:	89 c1                	mov    ecx,eax
c00192cf:	83 c8 ff             	or     eax,0xffffffff
c00192d2:	85 c9                	test   ecx,ecx
c00192d4:	89 c2                	mov    edx,eax
c00192d6:	74 28                	je     c0019300 <Sys::read(regs*)+0x61>
c00192d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00192e0:	31 ff                	xor    edi,edi
c00192e2:	83 ec 0c             	sub    esp,0xc
c00192e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00192e7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00192eb:	52                   	push   edx
c00192ec:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00192ef:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00192f2:	57                   	push   edi
c00192f3:	56                   	push   esi
c00192f4:	51                   	push   ecx
c00192f5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00192f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00192fc:	83 c4 20             	add    esp,0x20
c00192ff:	99                   	cdq    
c0019300:	83 c4 10             	add    esp,0x10
c0019303:	5b                   	pop    ebx
c0019304:	5e                   	pop    esi
c0019305:	5f                   	pop    edi
c0019306:	c3                   	ret    

c0019307 <Sys::sbrk(regs*)>:
c0019307:	56                   	push   esi
c0019308:	53                   	push   ebx
c0019309:	50                   	push   eax
c001930a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001930f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019313:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019316:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019319:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001931f:	85 db                	test   ebx,ebx
c0019321:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0019324:	74 02                	je     c0019328 <Sys::sbrk(regs*)+0x21>
c0019326:	79 06                	jns    c001932e <Sys::sbrk(regs*)+0x27>
c0019328:	89 f0                	mov    eax,esi
c001932a:	31 d2                	xor    edx,edx
c001932c:	eb 2a                	jmp    c0019358 <Sys::sbrk(regs*)+0x51>
c001932e:	83 c8 ff             	or     eax,0xffffffff
c0019331:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0019337:	89 c2                	mov    edx,eax
c0019339:	77 1d                	ja     c0019358 <Sys::sbrk(regs*)+0x51>
c001933b:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0019341:	50                   	push   eax
c0019342:	c1 ea 0c             	shr    edx,0xc
c0019345:	68 07 04 00 00       	push   0x407
c001934a:	52                   	push   edx
c001934b:	51                   	push   ecx
c001934c:	e8 d1 86 ff ff       	call   c0011a22 <VAS::allocatePages(int, int)>
c0019351:	89 f0                	mov    eax,esi
c0019353:	31 d2                	xor    edx,edx
c0019355:	83 c4 10             	add    esp,0x10
c0019358:	59                   	pop    ecx
c0019359:	5b                   	pop    ebx
c001935a:	5e                   	pop    esi
c001935b:	c3                   	ret    

c001935c <Sys::write(regs*)>:
c001935c:	57                   	push   edi
c001935d:	56                   	push   esi
c001935e:	53                   	push   ebx
c001935f:	83 ec 10             	sub    esp,0x10
c0019362:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019366:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019369:	83 f8 02             	cmp    eax,0x2
c001936c:	77 10                	ja     c001937e <Sys::write(regs*)+0x22>
c001936e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019373:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019376:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001937c:	eb 0e                	jmp    c001938c <Sys::write(regs*)+0x30>
c001937e:	83 ec 0c             	sub    esp,0xc
c0019381:	50                   	push   eax
c0019382:	e8 84 7d ff ff       	call   c001110b <getFromFileDescriptor(int)>
c0019387:	83 c4 10             	add    esp,0x10
c001938a:	89 c1                	mov    ecx,eax
c001938c:	83 c8 ff             	or     eax,0xffffffff
c001938f:	85 c9                	test   ecx,ecx
c0019391:	89 c2                	mov    edx,eax
c0019393:	74 28                	je     c00193bd <Sys::write(regs*)+0x61>
c0019395:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001939d:	31 ff                	xor    edi,edi
c001939f:	83 ec 0c             	sub    esp,0xc
c00193a2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00193a4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00193a8:	52                   	push   edx
c00193a9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00193ac:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00193af:	57                   	push   edi
c00193b0:	56                   	push   esi
c00193b1:	51                   	push   ecx
c00193b2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00193b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00193b9:	83 c4 20             	add    esp,0x20
c00193bc:	99                   	cdq    
c00193bd:	83 c4 10             	add    esp,0x10
c00193c0:	5b                   	pop    ebx
c00193c1:	5e                   	pop    esi
c00193c2:	5f                   	pop    edi
c00193c3:	c3                   	ret    

c00193c4 <Sys::yield(regs*)>:
c00193c4:	83 ec 0c             	sub    esp,0xc
c00193c7:	e8 40 25 00 00       	call   c001b90c <lockScheduler()>
c00193cc:	e8 77 28 00 00       	call   c001bc48 <schedule()>
c00193d1:	e8 38 25 00 00       	call   c001b90e <unlockScheduler()>
c00193d6:	31 c0                	xor    eax,eax
c00193d8:	31 d2                	xor    edx,edx
c00193da:	83 c4 0c             	add    esp,0xc
c00193dd:	c3                   	ret    

c00193de <sysCallGetPID(regs*)>:
c00193de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00193e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00193e8:	99                   	cdq    
c00193e9:	c3                   	ret    

c00193ea <sysCallSeekDir(regs*)>:
c00193ea:	31 c0                	xor    eax,eax
c00193ec:	31 d2                	xor    edx,edx
c00193ee:	c3                   	ret    

c00193ef <sysCallTellDir(regs*)>:
c00193ef:	31 c0                	xor    eax,eax
c00193f1:	31 d2                	xor    edx,edx
c00193f3:	c3                   	ret    

c00193f4 <sysCallVerify(regs*)>:
c00193f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193f8:	31 d2                	xor    edx,edx
c00193fa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00193fd:	c3                   	ret    

c00193fe <sysCallFork(regs*)>:
c00193fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019403:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019408:	c3                   	ret    

c0019409 <sysCallExecve(regs*)>:
c0019409:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001940e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019413:	c3                   	ret    

c0019414 <sysCallGetArgc(regs*)>:
c0019414:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019419:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001941c:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0019422:	99                   	cdq    
c0019423:	c3                   	ret    

c0019424 <sysFormatDisk(regs*)>:
c0019424:	56                   	push   esi
c0019425:	53                   	push   ebx
c0019426:	53                   	push   ebx
c0019427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001942b:	8b 1d c8 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a5c8
c0019431:	eb 25                	jmp    c0019458 <sysFormatDisk(regs*)+0x34>
c0019433:	83 ec 0c             	sub    esp,0xc
c0019436:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019439:	8b 13                	mov    edx,DWORD PTR [ebx]
c001943b:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001943e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019441:	50                   	push   eax
c0019442:	ff 34 85 60 aa 02 c0 	push   DWORD PTR [eax*4-0x3ffd55a0]
c0019449:	53                   	push   ebx
c001944a:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001944d:	83 c4 20             	add    esp,0x20
c0019450:	83 f8 08             	cmp    eax,0x8
c0019453:	75 12                	jne    c0019467 <sysFormatDisk(regs*)+0x43>
c0019455:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0019458:	85 db                	test   ebx,ebx
c001945a:	75 d7                	jne    c0019433 <sysFormatDisk(regs*)+0xf>
c001945c:	59                   	pop    ecx
c001945d:	b8 03 00 00 00       	mov    eax,0x3
c0019462:	31 d2                	xor    edx,edx
c0019464:	5b                   	pop    ebx
c0019465:	5e                   	pop    esi
c0019466:	c3                   	ret    
c0019467:	85 c0                	test   eax,eax
c0019469:	74 1b                	je     c0019486 <sysFormatDisk(regs*)+0x62>
c001946b:	83 f8 09             	cmp    eax,0x9
c001946e:	74 0b                	je     c001947b <sysFormatDisk(regs*)+0x57>
c0019470:	59                   	pop    ecx
c0019471:	b8 02 00 00 00       	mov    eax,0x2
c0019476:	31 d2                	xor    edx,edx
c0019478:	5b                   	pop    ebx
c0019479:	5e                   	pop    esi
c001947a:	c3                   	ret    
c001947b:	59                   	pop    ecx
c001947c:	b8 01 00 00 00       	mov    eax,0x1
c0019481:	31 d2                	xor    edx,edx
c0019483:	5b                   	pop    ebx
c0019484:	5e                   	pop    esi
c0019485:	c3                   	ret    
c0019486:	59                   	pop    ecx
c0019487:	31 c0                	xor    eax,eax
c0019489:	31 d2                	xor    edx,edx
c001948b:	5b                   	pop    ebx
c001948c:	5e                   	pop    esi
c001948d:	c3                   	ret    

c001948e <sysSetDiskVolumeLabel(regs*)>:
c001948e:	56                   	push   esi
c001948f:	53                   	push   ebx
c0019490:	53                   	push   ebx
c0019491:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019495:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0019498:	83 f8 19             	cmp    eax,0x19
c001949b:	77 29                	ja     c00194c6 <sysSetDiskVolumeLabel(regs*)+0x38>
c001949d:	8b 0c 85 60 aa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd55a0]
c00194a4:	85 c9                	test   ecx,ecx
c00194a6:	74 1e                	je     c00194c6 <sysSetDiskVolumeLabel(regs*)+0x38>
c00194a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00194ab:	85 d2                	test   edx,edx
c00194ad:	74 17                	je     c00194c6 <sysSetDiskVolumeLabel(regs*)+0x38>
c00194af:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00194b5:	8b 33                	mov    esi,DWORD PTR [ebx]
c00194b7:	52                   	push   edx
c00194b8:	50                   	push   eax
c00194b9:	51                   	push   ecx
c00194ba:	53                   	push   ebx
c00194bb:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00194be:	83 c4 10             	add    esp,0x10
c00194c1:	99                   	cdq    
c00194c2:	59                   	pop    ecx
c00194c3:	5b                   	pop    ebx
c00194c4:	5e                   	pop    esi
c00194c5:	c3                   	ret    
c00194c6:	59                   	pop    ecx
c00194c7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00194cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00194d1:	5b                   	pop    ebx
c00194d2:	5e                   	pop    esi
c00194d3:	c3                   	ret    

c00194d4 <sysGetDiskVolumeLabel(regs*)>:
c00194d4:	57                   	push   edi
c00194d5:	56                   	push   esi
c00194d6:	53                   	push   ebx
c00194d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194db:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00194de:	83 fa 19             	cmp    edx,0x19
c00194e1:	77 34                	ja     c0019517 <sysGetDiskVolumeLabel(regs*)+0x43>
c00194e3:	8b 0c 95 60 aa 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd55a0]
c00194ea:	85 c9                	test   ecx,ecx
c00194ec:	74 29                	je     c0019517 <sysGetDiskVolumeLabel(regs*)+0x43>
c00194ee:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00194f1:	85 db                	test   ebx,ebx
c00194f3:	74 22                	je     c0019517 <sysGetDiskVolumeLabel(regs*)+0x43>
c00194f5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00194f8:	85 c0                	test   eax,eax
c00194fa:	74 1b                	je     c0019517 <sysGetDiskVolumeLabel(regs*)+0x43>
c00194fc:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0019502:	83 ec 0c             	sub    esp,0xc
c0019505:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019507:	50                   	push   eax
c0019508:	53                   	push   ebx
c0019509:	52                   	push   edx
c001950a:	51                   	push   ecx
c001950b:	56                   	push   esi
c001950c:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001950f:	83 c4 20             	add    esp,0x20
c0019512:	99                   	cdq    
c0019513:	5b                   	pop    ebx
c0019514:	5e                   	pop    esi
c0019515:	5f                   	pop    edi
c0019516:	c3                   	ret    
c0019517:	5b                   	pop    ebx
c0019518:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001951d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019522:	5e                   	pop    esi
c0019523:	5f                   	pop    edi
c0019524:	c3                   	ret    

c0019525 <sysShutdown(regs*)>:
c0019525:	83 ec 0c             	sub    esp,0xc
c0019528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001952c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001952f:	85 c0                	test   eax,eax
c0019531:	74 18                	je     c001954b <sysShutdown(regs*)+0x26>
c0019533:	83 f8 01             	cmp    eax,0x1
c0019536:	74 38                	je     c0019570 <sysShutdown(regs*)+0x4b>
c0019538:	83 f8 02             	cmp    eax,0x2
c001953b:	74 24                	je     c0019561 <sysShutdown(regs*)+0x3c>
c001953d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019542:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019547:	83 c4 0c             	add    esp,0xc
c001954a:	c3                   	ret    
c001954b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0019550:	8b 10                	mov    edx,DWORD PTR [eax]
c0019552:	6a 00                	push   0x0
c0019554:	6a 00                	push   0x0
c0019556:	6a 00                	push   0x0
c0019558:	50                   	push   eax
c0019559:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001955c:	83 c4 10             	add    esp,0x10
c001955f:	eb dc                	jmp    c001953d <sysShutdown(regs*)+0x18>
c0019561:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0019566:	8b 10                	mov    edx,DWORD PTR [eax]
c0019568:	6a 00                	push   0x0
c001956a:	6a 00                	push   0x0
c001956c:	6a 01                	push   0x1
c001956e:	eb e8                	jmp    c0019558 <sysShutdown(regs*)+0x33>
c0019570:	a1 e0 aa 02 c0       	mov    eax,ds:0xc002aae0
c0019575:	85 c0                	test   eax,eax
c0019577:	74 02                	je     c001957b <sysShutdown(regs*)+0x56>
c0019579:	ff d0                	call   eax
c001957b:	31 c0                	xor    eax,eax
c001957d:	31 d2                	xor    edx,edx
c001957f:	83 c4 0c             	add    esp,0xc
c0019582:	c3                   	ret    

c0019583 <sysCallGetCwd(regs*)>:
c0019583:	83 ec 10             	sub    esp,0x10
c0019586:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001958a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001958d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019590:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019595:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019598:	e8 48 95 ff ff       	call   c0012ae5 <getcwd(Process*, char*, int)>
c001959d:	83 c4 1c             	add    esp,0x1c
c00195a0:	99                   	cdq    
c00195a1:	c3                   	ret    

c00195a2 <sysCallSetCwd(regs*)>:
c00195a2:	83 ec 14             	sub    esp,0x14
c00195a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195a9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00195ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195b1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00195b4:	e8 56 95 ff ff       	call   c0012b0f <setcwd(Process*, char*)>
c00195b9:	83 c4 1c             	add    esp,0x1c
c00195bc:	99                   	cdq    
c00195bd:	c3                   	ret    

c00195be <sysCallRealpath(regs*)>:
c00195be:	83 ec 0c             	sub    esp,0xc
c00195c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195c5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00195c8:	85 d2                	test   edx,edx
c00195ca:	74 07                	je     c00195d3 <sysCallRealpath(regs*)+0x15>
c00195cc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00195cf:	85 c0                	test   eax,eax
c00195d1:	75 0b                	jne    c00195de <sysCallRealpath(regs*)+0x20>
c00195d3:	b8 01 00 00 00       	mov    eax,0x1
c00195d8:	31 d2                	xor    edx,edx
c00195da:	83 c4 0c             	add    esp,0xc
c00195dd:	c3                   	ret    
c00195de:	51                   	push   ecx
c00195df:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00195e5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00195e8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00195ee:	51                   	push   ecx
c00195ef:	52                   	push   edx
c00195f0:	50                   	push   eax
c00195f1:	e8 d4 8f ff ff       	call   c00125ca <standardiseFiles(char*, char const*, char const*)>
c00195f6:	83 c4 10             	add    esp,0x10
c00195f9:	31 c0                	xor    eax,eax
c00195fb:	31 d2                	xor    edx,edx
c00195fd:	83 c4 0c             	add    esp,0xc
c0019600:	c3                   	ret    

c0019601 <sysCallReadDir(regs*)>:
c0019601:	53                   	push   ebx
c0019602:	83 ec 18             	sub    esp,0x18
c0019605:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019609:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001960c:	83 f8 02             	cmp    eax,0x2
c001960f:	76 53                	jbe    c0019664 <sysCallReadDir(regs*)+0x63>
c0019611:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019614:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001961a:	77 4f                	ja     c001966b <sysCallReadDir(regs*)+0x6a>
c001961c:	83 ec 0c             	sub    esp,0xc
c001961f:	50                   	push   eax
c0019620:	e8 e6 7a ff ff       	call   c001110b <getFromFileDescriptor(int)>
c0019625:	83 c4 10             	add    esp,0x10
c0019628:	85 c0                	test   eax,eax
c001962a:	74 50                	je     c001967c <sysCallReadDir(regs*)+0x7b>
c001962c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019634:	83 ec 0c             	sub    esp,0xc
c0019637:	8b 10                	mov    edx,DWORD PTR [eax]
c0019639:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001963d:	51                   	push   ecx
c001963e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019641:	6a 00                	push   0x0
c0019643:	68 10 01 00 00       	push   0x110
c0019648:	50                   	push   eax
c0019649:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001964c:	83 c4 20             	add    esp,0x20
c001964f:	85 c0                	test   eax,eax
c0019651:	74 38                	je     c001968b <sysCallReadDir(regs*)+0x8a>
c0019653:	83 f8 07             	cmp    eax,0x7
c0019656:	74 0c                	je     c0019664 <sysCallReadDir(regs*)+0x63>
c0019658:	b8 02 00 00 00       	mov    eax,0x2
c001965d:	31 d2                	xor    edx,edx
c001965f:	83 c4 18             	add    esp,0x18
c0019662:	5b                   	pop    ebx
c0019663:	c3                   	ret    
c0019664:	b8 01 00 00 00       	mov    eax,0x1
c0019669:	eb f2                	jmp    c001965d <sysCallReadDir(regs*)+0x5c>
c001966b:	83 ec 08             	sub    esp,0x8
c001966e:	52                   	push   edx
c001966f:	68 9c 82 02 c0       	push   0xc002829c
c0019674:	e8 cc 8b ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0019679:	83 c4 10             	add    esp,0x10
c001967c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019681:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019686:	83 c4 18             	add    esp,0x18
c0019689:	5b                   	pop    ebx
c001968a:	c3                   	ret    
c001968b:	31 c0                	xor    eax,eax
c001968d:	eb ce                	jmp    c001965d <sysCallReadDir(regs*)+0x5c>

c001968f <sysCallIsATTY(regs*)>:
c001968f:	83 ec 0c             	sub    esp,0xc
c0019692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019696:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019699:	83 f8 02             	cmp    eax,0x2
c001969c:	76 07                	jbe    c00196a5 <sysCallIsATTY(regs*)+0x16>
c001969e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00196a3:	75 26                	jne    c00196cb <sysCallIsATTY(regs*)+0x3c>
c00196a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00196ad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00196b3:	85 c0                	test   eax,eax
c00196b5:	74 24                	je     c00196db <sysCallIsATTY(regs*)+0x4c>
c00196b7:	83 ec 0c             	sub    esp,0xc
c00196ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00196bc:	50                   	push   eax
c00196bd:	ff 12                	call   DWORD PTR [edx]
c00196bf:	31 d2                	xor    edx,edx
c00196c1:	0f b6 c0             	movzx  eax,al
c00196c4:	83 c4 10             	add    esp,0x10
c00196c7:	83 c4 0c             	add    esp,0xc
c00196ca:	c3                   	ret    
c00196cb:	83 ec 0c             	sub    esp,0xc
c00196ce:	50                   	push   eax
c00196cf:	e8 37 7a ff ff       	call   c001110b <getFromFileDescriptor(int)>
c00196d4:	83 c4 10             	add    esp,0x10
c00196d7:	85 c0                	test   eax,eax
c00196d9:	75 dc                	jne    c00196b7 <sysCallIsATTY(regs*)+0x28>
c00196db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00196e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00196e5:	83 c4 0c             	add    esp,0xc
c00196e8:	c3                   	ret    

c00196e9 <sysCallSeek(regs*)>:
c00196e9:	53                   	push   ebx
c00196ea:	83 ec 08             	sub    esp,0x8
c00196ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00196f1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00196f4:	83 f8 02             	cmp    eax,0x2
c00196f7:	76 4a                	jbe    c0019743 <sysCallSeek(regs*)+0x5a>
c00196f9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00196fe:	77 32                	ja     c0019732 <sysCallSeek(regs*)+0x49>
c0019700:	83 ec 0c             	sub    esp,0xc
c0019703:	50                   	push   eax
c0019704:	e8 02 7a ff ff       	call   c001110b <getFromFileDescriptor(int)>
c0019709:	83 c4 0c             	add    esp,0xc
c001970c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001970f:	31 db                	xor    ebx,ebx
c0019711:	53                   	push   ebx
c0019712:	51                   	push   ecx
c0019713:	50                   	push   eax
c0019714:	e8 7d 91 ff ff       	call   c0012896 <File::seek(unsigned long long)>
c0019719:	83 c4 10             	add    esp,0x10
c001971c:	85 c0                	test   eax,eax
c001971e:	0f 95 c0             	setne  al
c0019721:	31 d2                	xor    edx,edx
c0019723:	0f b6 c0             	movzx  eax,al
c0019726:	f7 d8                	neg    eax
c0019728:	83 d2 00             	adc    edx,0x0
c001972b:	83 c4 08             	add    esp,0x8
c001972e:	f7 da                	neg    edx
c0019730:	5b                   	pop    ebx
c0019731:	c3                   	ret    
c0019732:	83 ec 08             	sub    esp,0x8
c0019735:	50                   	push   eax
c0019736:	68 58 83 02 c0       	push   0xc0028358
c001973b:	e8 05 8b ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0019740:	83 c4 10             	add    esp,0x10
c0019743:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019748:	ba ff ff ff ff       	mov    edx,0xffffffff
c001974d:	83 c4 08             	add    esp,0x8
c0019750:	5b                   	pop    ebx
c0019751:	c3                   	ret    

c0019752 <sysCallTell(regs*)>:
c0019752:	53                   	push   ebx
c0019753:	83 ec 08             	sub    esp,0x8
c0019756:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001975a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001975d:	83 f8 02             	cmp    eax,0x2
c0019760:	76 5e                	jbe    c00197c0 <sysCallTell(regs*)+0x6e>
c0019762:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019767:	77 2d                	ja     c0019796 <sysCallTell(regs*)+0x44>
c0019769:	83 ec 0c             	sub    esp,0xc
c001976c:	50                   	push   eax
c001976d:	e8 99 79 ff ff       	call   c001110b <getFromFileDescriptor(int)>
c0019772:	5a                   	pop    edx
c0019773:	59                   	pop    ecx
c0019774:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019777:	50                   	push   eax
c0019778:	e8 6f 91 ff ff       	call   c00128ec <File::tell(unsigned long long*)>
c001977d:	83 c4 10             	add    esp,0x10
c0019780:	85 c0                	test   eax,eax
c0019782:	0f 95 c0             	setne  al
c0019785:	31 d2                	xor    edx,edx
c0019787:	0f b6 c0             	movzx  eax,al
c001978a:	f7 d8                	neg    eax
c001978c:	83 d2 00             	adc    edx,0x0
c001978f:	83 c4 08             	add    esp,0x8
c0019792:	f7 da                	neg    edx
c0019794:	5b                   	pop    ebx
c0019795:	c3                   	ret    
c0019796:	83 ec 08             	sub    esp,0x8
c0019799:	50                   	push   eax
c001979a:	68 72 83 02 c0       	push   0xc0028372
c001979f:	e8 a1 8a ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00197a4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00197a7:	83 c4 10             	add    esp,0x10
c00197aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00197b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00197b7:	31 d2                	xor    edx,edx
c00197b9:	31 c0                	xor    eax,eax
c00197bb:	83 c4 08             	add    esp,0x8
c00197be:	5b                   	pop    ebx
c00197bf:	c3                   	ret    
c00197c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00197c5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00197ca:	83 c4 08             	add    esp,0x8
c00197cd:	5b                   	pop    ebx
c00197ce:	c3                   	ret    

c00197cf <sysCallSizeFromFilename(regs*)>:
c00197cf:	57                   	push   edi
c00197d0:	56                   	push   esi
c00197d1:	53                   	push   ebx
c00197d2:	83 ec 10             	sub    esp,0x10
c00197d5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00197d9:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00197dc:	83 fb 02             	cmp    ebx,0x2
c00197df:	0f 86 8a 00 00 00    	jbe    c001986f <sysCallSizeFromFilename(regs*)+0xa0>
c00197e5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00197eb:	77 56                	ja     c0019843 <sysCallSizeFromFilename(regs*)+0x74>
c00197ed:	83 ec 0c             	sub    esp,0xc
c00197f0:	68 14 01 00 00       	push   0x114
c00197f5:	e8 5c 89 ff ff       	call   c0012156 <operator new(unsigned long)>
c00197fa:	83 c4 0c             	add    esp,0xc
c00197fd:	89 c7                	mov    edi,eax
c00197ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019804:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019807:	53                   	push   ebx
c0019808:	57                   	push   edi
c0019809:	e8 66 8f ff ff       	call   c0012774 <File::File(char const*, Process*)>
c001980e:	83 c4 0c             	add    esp,0xc
c0019811:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019815:	50                   	push   eax
c0019816:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019819:	57                   	push   edi
c001981a:	e8 65 92 ff ff       	call   c0012a84 <File::stat(unsigned long long*, bool*)>
c001981f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019822:	89 c3                	mov    ebx,eax
c0019824:	8b 07                	mov    eax,DWORD PTR [edi]
c0019826:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019829:	83 c4 10             	add    esp,0x10
c001982c:	31 c0                	xor    eax,eax
c001982e:	85 db                	test   ebx,ebx
c0019830:	0f 95 c0             	setne  al
c0019833:	31 d2                	xor    edx,edx
c0019835:	f7 d8                	neg    eax
c0019837:	83 d2 00             	adc    edx,0x0
c001983a:	83 c4 10             	add    esp,0x10
c001983d:	f7 da                	neg    edx
c001983f:	5b                   	pop    ebx
c0019840:	5e                   	pop    esi
c0019841:	5f                   	pop    edi
c0019842:	c3                   	ret    
c0019843:	83 ec 08             	sub    esp,0x8
c0019846:	53                   	push   ebx
c0019847:	68 8c 83 02 c0       	push   0xc002838c
c001984c:	e8 f4 89 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0019851:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019854:	83 c4 10             	add    esp,0x10
c0019857:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001985d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019864:	31 d2                	xor    edx,edx
c0019866:	83 c4 10             	add    esp,0x10
c0019869:	31 c0                	xor    eax,eax
c001986b:	5b                   	pop    ebx
c001986c:	5e                   	pop    esi
c001986d:	5f                   	pop    edi
c001986e:	c3                   	ret    
c001986f:	83 c4 10             	add    esp,0x10
c0019872:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019877:	5b                   	pop    ebx
c0019878:	ba ff ff ff ff       	mov    edx,0xffffffff
c001987d:	5e                   	pop    esi
c001987e:	5f                   	pop    edi
c001987f:	c3                   	ret    

c0019880 <sysCallSize(regs*)>:
c0019880:	53                   	push   ebx
c0019881:	83 ec 18             	sub    esp,0x18
c0019884:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019888:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001988b:	83 f8 02             	cmp    eax,0x2
c001988e:	76 64                	jbe    c00198f4 <sysCallSize(regs*)+0x74>
c0019890:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019895:	77 33                	ja     c00198ca <sysCallSize(regs*)+0x4a>
c0019897:	83 ec 0c             	sub    esp,0xc
c001989a:	50                   	push   eax
c001989b:	e8 6b 78 ff ff       	call   c001110b <getFromFileDescriptor(int)>
c00198a0:	83 c4 0c             	add    esp,0xc
c00198a3:	8d 54 24 13          	lea    edx,[esp+0x13]
c00198a7:	52                   	push   edx
c00198a8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00198ab:	50                   	push   eax
c00198ac:	e8 d3 91 ff ff       	call   c0012a84 <File::stat(unsigned long long*, bool*)>
c00198b1:	83 c4 10             	add    esp,0x10
c00198b4:	85 c0                	test   eax,eax
c00198b6:	0f 95 c0             	setne  al
c00198b9:	31 d2                	xor    edx,edx
c00198bb:	0f b6 c0             	movzx  eax,al
c00198be:	f7 d8                	neg    eax
c00198c0:	83 d2 00             	adc    edx,0x0
c00198c3:	83 c4 18             	add    esp,0x18
c00198c6:	f7 da                	neg    edx
c00198c8:	5b                   	pop    ebx
c00198c9:	c3                   	ret    
c00198ca:	83 ec 08             	sub    esp,0x8
c00198cd:	50                   	push   eax
c00198ce:	68 8c 83 02 c0       	push   0xc002838c
c00198d3:	e8 6d 89 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00198d8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00198db:	83 c4 10             	add    esp,0x10
c00198de:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00198e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00198eb:	31 d2                	xor    edx,edx
c00198ed:	31 c0                	xor    eax,eax
c00198ef:	83 c4 18             	add    esp,0x18
c00198f2:	5b                   	pop    ebx
c00198f3:	c3                   	ret    
c00198f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00198f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00198fe:	83 c4 18             	add    esp,0x18
c0019901:	5b                   	pop    ebx
c0019902:	c3                   	ret    

c0019903 <sysCallClose(regs*)>:
c0019903:	53                   	push   ebx
c0019904:	83 ec 08             	sub    esp,0x8
c0019907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001990b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001990e:	83 f8 02             	cmp    eax,0x2
c0019911:	76 50                	jbe    c0019963 <sysCallClose(regs*)+0x60>
c0019913:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019918:	74 58                	je     c0019972 <sysCallClose(regs*)+0x6f>
c001991a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001991f:	74 60                	je     c0019981 <sysCallClose(regs*)+0x7e>
c0019921:	77 2f                	ja     c0019952 <sysCallClose(regs*)+0x4f>
c0019923:	83 ec 0c             	sub    esp,0xc
c0019926:	50                   	push   eax
c0019927:	e8 df 77 ff ff       	call   c001110b <getFromFileDescriptor(int)>
c001992c:	89 c3                	mov    ebx,eax
c001992e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019931:	e8 00 8f ff ff       	call   c0012836 <File::close()>
c0019936:	83 c4 10             	add    esp,0x10
c0019939:	85 db                	test   ebx,ebx
c001993b:	74 0c                	je     c0019949 <sysCallClose(regs*)+0x46>
c001993d:	83 ec 0c             	sub    esp,0xc
c0019940:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019942:	53                   	push   ebx
c0019943:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019946:	83 c4 10             	add    esp,0x10
c0019949:	31 c0                	xor    eax,eax
c001994b:	31 d2                	xor    edx,edx
c001994d:	83 c4 08             	add    esp,0x8
c0019950:	5b                   	pop    ebx
c0019951:	c3                   	ret    
c0019952:	83 ec 08             	sub    esp,0x8
c0019955:	50                   	push   eax
c0019956:	68 c0 82 02 c0       	push   0xc00282c0
c001995b:	e8 e5 88 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0019960:	83 c4 10             	add    esp,0x10
c0019963:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019968:	ba ff ff ff ff       	mov    edx,0xffffffff
c001996d:	83 c4 08             	add    esp,0x8
c0019970:	5b                   	pop    ebx
c0019971:	c3                   	ret    
c0019972:	83 ec 0c             	sub    esp,0xc
c0019975:	68 a7 83 02 c0       	push   0xc00283a7
c001997a:	e8 c6 88 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001997f:	eb c5                	jmp    c0019946 <sysCallClose(regs*)+0x43>
c0019981:	83 ec 0c             	sub    esp,0xc
c0019984:	68 b5 83 02 c0       	push   0xc00283b5
c0019989:	eb ef                	jmp    c001997a <sysCallClose(regs*)+0x77>

c001998b <sysCallOpenDir(regs*)>:
c001998b:	56                   	push   esi
c001998c:	53                   	push   ebx
c001998d:	53                   	push   ebx
c001998e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019992:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0019995:	85 f6                	test   esi,esi
c0019997:	74 51                	je     c00199ea <sysCallOpenDir(regs*)+0x5f>
c0019999:	83 ec 0c             	sub    esp,0xc
c001999c:	68 14 01 00 00       	push   0x114
c00199a1:	e8 b0 87 ff ff       	call   c0012156 <operator new(unsigned long)>
c00199a6:	83 c4 0c             	add    esp,0xc
c00199a9:	89 c6                	mov    esi,eax
c00199ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199b0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00199b3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00199b6:	56                   	push   esi
c00199b7:	e8 7a 92 ff ff       	call   c0012c36 <Directory::Directory(char const*, Process*)>
c00199bc:	89 34 24             	mov    DWORD PTR [esp],esi
c00199bf:	e8 d6 92 ff ff       	call   c0012c9a <Directory::open()>
c00199c4:	83 c4 10             	add    esp,0x10
c00199c7:	85 c0                	test   eax,eax
c00199c9:	75 1f                	jne    c00199ea <sysCallOpenDir(regs*)+0x5f>
c00199cb:	83 ec 0c             	sub    esp,0xc
c00199ce:	56                   	push   esi
c00199cf:	e8 82 74 ff ff       	call   c0010e56 <UnixFile::getFileDescriptor()>
c00199d4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00199d7:	83 c4 10             	add    esp,0x10
c00199da:	89 02                	mov    DWORD PTR [edx],eax
c00199dc:	c1 f8 1f             	sar    eax,0x1f
c00199df:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00199e2:	31 c0                	xor    eax,eax
c00199e4:	59                   	pop    ecx
c00199e5:	31 d2                	xor    edx,edx
c00199e7:	5b                   	pop    ebx
c00199e8:	5e                   	pop    esi
c00199e9:	c3                   	ret    
c00199ea:	59                   	pop    ecx
c00199eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00199f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00199f5:	5b                   	pop    ebx
c00199f6:	5e                   	pop    esi
c00199f7:	c3                   	ret    

c00199f8 <sysCallMakeDir(regs*)>:
c00199f8:	56                   	push   esi
c00199f9:	53                   	push   ebx
c00199fa:	83 ec 10             	sub    esp,0x10
c00199fd:	68 14 01 00 00       	push   0x114
c0019a02:	e8 4f 87 ff ff       	call   c0012156 <operator new(unsigned long)>
c0019a07:	83 c4 0c             	add    esp,0xc
c0019a0a:	89 c3                	mov    ebx,eax
c0019a0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a11:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019a18:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019a1b:	53                   	push   ebx
c0019a1c:	e8 15 92 ff ff       	call   c0012c36 <Directory::Directory(char const*, Process*)>
c0019a21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a24:	e8 51 94 ff ff       	call   c0012e7a <Directory::create()>
c0019a29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a2c:	89 c6                	mov    esi,eax
c0019a2e:	e8 c3 92 ff ff       	call   c0012cf6 <Directory::close()>
c0019a33:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a3b:	31 c0                	xor    eax,eax
c0019a3d:	85 f6                	test   esi,esi
c0019a3f:	0f 95 c0             	setne  al
c0019a42:	31 d2                	xor    edx,edx
c0019a44:	f7 d8                	neg    eax
c0019a46:	83 d2 00             	adc    edx,0x0
c0019a49:	83 c4 14             	add    esp,0x14
c0019a4c:	f7 da                	neg    edx
c0019a4e:	5b                   	pop    ebx
c0019a4f:	5e                   	pop    esi
c0019a50:	c3                   	ret    

c0019a51 <sysCallCloseDir(regs*)>:
c0019a51:	53                   	push   ebx
c0019a52:	83 ec 08             	sub    esp,0x8
c0019a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a59:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019a5c:	83 f8 02             	cmp    eax,0x2
c0019a5f:	76 47                	jbe    c0019aa8 <sysCallCloseDir(regs*)+0x57>
c0019a61:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019a66:	77 2f                	ja     c0019a97 <sysCallCloseDir(regs*)+0x46>
c0019a68:	83 ec 0c             	sub    esp,0xc
c0019a6b:	50                   	push   eax
c0019a6c:	e8 9a 76 ff ff       	call   c001110b <getFromFileDescriptor(int)>
c0019a71:	89 c3                	mov    ebx,eax
c0019a73:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a76:	e8 7b 92 ff ff       	call   c0012cf6 <Directory::close()>
c0019a7b:	83 c4 10             	add    esp,0x10
c0019a7e:	85 db                	test   ebx,ebx
c0019a80:	74 0c                	je     c0019a8e <sysCallCloseDir(regs*)+0x3d>
c0019a82:	83 ec 0c             	sub    esp,0xc
c0019a85:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a87:	53                   	push   ebx
c0019a88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a8b:	83 c4 10             	add    esp,0x10
c0019a8e:	31 c0                	xor    eax,eax
c0019a90:	31 d2                	xor    edx,edx
c0019a92:	83 c4 08             	add    esp,0x8
c0019a95:	5b                   	pop    ebx
c0019a96:	c3                   	ret    
c0019a97:	83 ec 08             	sub    esp,0x8
c0019a9a:	50                   	push   eax
c0019a9b:	68 e8 82 02 c0       	push   0xc00282e8
c0019aa0:	e8 a0 87 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0019aa5:	83 c4 10             	add    esp,0x10
c0019aa8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019aad:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019ab2:	83 c4 08             	add    esp,0x8
c0019ab5:	5b                   	pop    ebx
c0019ab6:	c3                   	ret    

c0019ab7 <sysCallWait(regs*)>:
c0019ab7:	83 ec 10             	sub    esp,0x10
c0019aba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019abe:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0019ac1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019ac4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019ac7:	e8 f7 22 00 00       	call   c001bdc3 <waitTask(int, int*, int)>
c0019acc:	83 c4 1c             	add    esp,0x1c
c0019acf:	99                   	cdq    
c0019ad0:	c3                   	ret    

c0019ad1 <sysCallRmdir(regs*)>:
c0019ad1:	56                   	push   esi
c0019ad2:	53                   	push   ebx
c0019ad3:	83 ec 10             	sub    esp,0x10
c0019ad6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ada:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019add:	68 14 01 00 00       	push   0x114
c0019ae2:	e8 6f 86 ff ff       	call   c0012156 <operator new(unsigned long)>
c0019ae7:	83 c4 0c             	add    esp,0xc
c0019aea:	89 c3                	mov    ebx,eax
c0019aec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019af1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019af4:	56                   	push   esi
c0019af5:	53                   	push   ebx
c0019af6:	e8 79 8c ff ff       	call   c0012774 <File::File(char const*, Process*)>
c0019afb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019afe:	e8 4d 8e ff ff       	call   c0012950 <File::unlink()>
c0019b03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b06:	89 c6                	mov    esi,eax
c0019b08:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b0a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b0d:	31 c0                	xor    eax,eax
c0019b0f:	85 f6                	test   esi,esi
c0019b11:	0f 95 c0             	setne  al
c0019b14:	31 d2                	xor    edx,edx
c0019b16:	f7 d8                	neg    eax
c0019b18:	83 d2 00             	adc    edx,0x0
c0019b1b:	83 c4 14             	add    esp,0x14
c0019b1e:	f7 da                	neg    edx
c0019b20:	5b                   	pop    ebx
c0019b21:	5e                   	pop    esi
c0019b22:	c3                   	ret    

c0019b23 <sysCallUnlink(regs*)>:
c0019b23:	56                   	push   esi
c0019b24:	53                   	push   ebx
c0019b25:	83 ec 10             	sub    esp,0x10
c0019b28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b2c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019b2f:	68 14 01 00 00       	push   0x114
c0019b34:	e8 1d 86 ff ff       	call   c0012156 <operator new(unsigned long)>
c0019b39:	83 c4 0c             	add    esp,0xc
c0019b3c:	89 c3                	mov    ebx,eax
c0019b3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b43:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b46:	56                   	push   esi
c0019b47:	53                   	push   ebx
c0019b48:	e8 27 8c ff ff       	call   c0012774 <File::File(char const*, Process*)>
c0019b4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b50:	e8 fb 8d ff ff       	call   c0012950 <File::unlink()>
c0019b55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b58:	89 c6                	mov    esi,eax
c0019b5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b5c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b5f:	31 c0                	xor    eax,eax
c0019b61:	85 f6                	test   esi,esi
c0019b63:	0f 95 c0             	setne  al
c0019b66:	31 d2                	xor    edx,edx
c0019b68:	f7 d8                	neg    eax
c0019b6a:	83 d2 00             	adc    edx,0x0
c0019b6d:	83 c4 14             	add    esp,0x14
c0019b70:	f7 da                	neg    edx
c0019b72:	5b                   	pop    ebx
c0019b73:	5e                   	pop    esi
c0019b74:	c3                   	ret    

c0019b75 <sysCallGetArgv(regs*)>:
c0019b75:	83 ec 0c             	sub    esp,0xc
c0019b78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b7c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0019b7f:	85 c0                	test   eax,eax
c0019b81:	78 2b                	js     c0019bae <sysCallGetArgv(regs*)+0x39>
c0019b83:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b89:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019b8c:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0019b92:	7d 1a                	jge    c0019bae <sysCallGetArgv(regs*)+0x39>
c0019b94:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0019b9b:	85 c0                	test   eax,eax
c0019b9d:	74 17                	je     c0019bb6 <sysCallGetArgv(regs*)+0x41>
c0019b9f:	83 ec 08             	sub    esp,0x8
c0019ba2:	50                   	push   eax
c0019ba3:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0019ba6:	e8 71 6b fe ff       	call   c000071c <strcpy>
c0019bab:	83 c4 10             	add    esp,0x10
c0019bae:	31 c0                	xor    eax,eax
c0019bb0:	31 d2                	xor    edx,edx
c0019bb2:	83 c4 0c             	add    esp,0xc
c0019bb5:	c3                   	ret    
c0019bb6:	b8 01 00 00 00       	mov    eax,0x1
c0019bbb:	31 d2                	xor    edx,edx
c0019bbd:	83 c4 0c             	add    esp,0xc
c0019bc0:	c3                   	ret    

c0019bc1 <sysCallTTYName(regs*)>:
c0019bc1:	56                   	push   esi
c0019bc2:	53                   	push   ebx
c0019bc3:	53                   	push   ebx
c0019bc4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019bc8:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019bcb:	85 c0                	test   eax,eax
c0019bcd:	74 5f                	je     c0019c2e <sysCallTTYName(regs*)+0x6d>
c0019bcf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019bd2:	83 f8 02             	cmp    eax,0x2
c0019bd5:	77 3e                	ja     c0019c15 <sysCallTTYName(regs*)+0x54>
c0019bd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019bdc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019bdf:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0019be5:	85 db                	test   ebx,ebx
c0019be7:	74 45                	je     c0019c2e <sysCallTTYName(regs*)+0x6d>
c0019be9:	83 ec 0c             	sub    esp,0xc
c0019bec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bee:	53                   	push   ebx
c0019bef:	ff 10                	call   DWORD PTR [eax]
c0019bf1:	83 c4 10             	add    esp,0x10
c0019bf4:	84 c0                	test   al,al
c0019bf6:	74 41                	je     c0019c39 <sysCallTTYName(regs*)+0x78>
c0019bf8:	83 ec 08             	sub    esp,0x8
c0019bfb:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0019c01:	53                   	push   ebx
c0019c02:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019c05:	e8 12 6b fe ff       	call   c000071c <strcpy>
c0019c0a:	83 c4 10             	add    esp,0x10
c0019c0d:	31 c0                	xor    eax,eax
c0019c0f:	59                   	pop    ecx
c0019c10:	31 d2                	xor    edx,edx
c0019c12:	5b                   	pop    ebx
c0019c13:	5e                   	pop    esi
c0019c14:	c3                   	ret    
c0019c15:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019c1a:	74 bb                	je     c0019bd7 <sysCallTTYName(regs*)+0x16>
c0019c1c:	83 ec 0c             	sub    esp,0xc
c0019c1f:	50                   	push   eax
c0019c20:	e8 e6 74 ff ff       	call   c001110b <getFromFileDescriptor(int)>
c0019c25:	83 c4 10             	add    esp,0x10
c0019c28:	89 c3                	mov    ebx,eax
c0019c2a:	85 db                	test   ebx,ebx
c0019c2c:	75 bb                	jne    c0019be9 <sysCallTTYName(regs*)+0x28>
c0019c2e:	59                   	pop    ecx
c0019c2f:	b8 01 00 00 00       	mov    eax,0x1
c0019c34:	31 d2                	xor    edx,edx
c0019c36:	5b                   	pop    ebx
c0019c37:	5e                   	pop    esi
c0019c38:	c3                   	ret    
c0019c39:	59                   	pop    ecx
c0019c3a:	b8 02 00 00 00       	mov    eax,0x2
c0019c3f:	31 d2                	xor    edx,edx
c0019c41:	5b                   	pop    ebx
c0019c42:	5e                   	pop    esi
c0019c43:	c3                   	ret    

c0019c44 <sysCallGetEnv(regs*)>:
c0019c44:	83 ec 0c             	sub    esp,0xc
c0019c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c4b:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0019c4e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019c51:	85 c9                	test   ecx,ecx
c0019c53:	75 22                	jne    c0019c77 <sysCallGetEnv(regs*)+0x33>
c0019c55:	85 d2                	test   edx,edx
c0019c57:	74 08                	je     c0019c61 <sysCallGetEnv(regs*)+0x1d>
c0019c59:	31 c0                	xor    eax,eax
c0019c5b:	31 d2                	xor    edx,edx
c0019c5d:	83 c4 0c             	add    esp,0xc
c0019c60:	c3                   	ret    
c0019c61:	83 ec 0c             	sub    esp,0xc
c0019c64:	68 0c 83 02 c0       	push   0xc002830c
c0019c69:	e8 2c 6a fe ff       	call   c000069a <strlen>
c0019c6e:	83 c4 10             	add    esp,0x10
c0019c71:	31 d2                	xor    edx,edx
c0019c73:	83 c4 0c             	add    esp,0xc
c0019c76:	c3                   	ret    
c0019c77:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019c7a:	85 d2                	test   edx,edx
c0019c7c:	74 05                	je     c0019c83 <sysCallGetEnv(regs*)+0x3f>
c0019c7e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019c81:	eb d6                	jmp    c0019c59 <sysCallGetEnv(regs*)+0x15>
c0019c83:	83 ec 08             	sub    esp,0x8
c0019c86:	68 0c 83 02 c0       	push   0xc002830c
c0019c8b:	50                   	push   eax
c0019c8c:	e8 8b 6a fe ff       	call   c000071c <strcpy>
c0019c91:	83 c4 10             	add    esp,0x10
c0019c94:	eb c3                	jmp    c0019c59 <sysCallGetEnv(regs*)+0x15>

c0019c96 <sysCallUSleep(regs*)>:
c0019c96:	83 ec 14             	sub    esp,0x14
c0019c99:	b8 e8 03 00 00       	mov    eax,0x3e8
c0019c9e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019ca2:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0019ca9:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0019cac:	01 ca                	add    edx,ecx
c0019cae:	52                   	push   edx
c0019caf:	50                   	push   eax
c0019cb0:	e8 a7 21 00 00       	call   c001be5c <nanoSleep(unsigned long long)>
c0019cb5:	31 c0                	xor    eax,eax
c0019cb7:	31 d2                	xor    edx,edx
c0019cb9:	83 c4 1c             	add    esp,0x1c
c0019cbc:	c3                   	ret    

c0019cbd <sysCallSpawn(regs*)>:
c0019cbd:	56                   	push   esi
c0019cbe:	53                   	push   ebx
c0019cbf:	53                   	push   ebx
c0019cc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019cc4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019cc7:	85 f6                	test   esi,esi
c0019cc9:	75 08                	jne    c0019cd3 <sysCallSpawn(regs*)+0x16>
c0019ccb:	59                   	pop    ecx
c0019ccc:	31 c0                	xor    eax,eax
c0019cce:	31 d2                	xor    edx,edx
c0019cd0:	5b                   	pop    ebx
c0019cd1:	5e                   	pop    esi
c0019cd2:	c3                   	ret    
c0019cd3:	83 ec 0c             	sub    esp,0xc
c0019cd6:	68 3b 07 00 00       	push   0x73b
c0019cdb:	e8 76 84 ff ff       	call   c0012156 <operator new(unsigned long)>
c0019ce0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019ce3:	89 c6                	mov    esi,eax
c0019ce5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019cea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019ced:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019cf0:	56                   	push   esi
c0019cf1:	e8 be 18 00 00       	call   c001b5b4 <Process::Process(char const*, Process*, char**)>
c0019cf6:	83 c4 20             	add    esp,0x20
c0019cf9:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0019d00:	75 c9                	jne    c0019ccb <sysCallSpawn(regs*)+0xe>
c0019d02:	83 ec 0c             	sub    esp,0xc
c0019d05:	56                   	push   esi
c0019d06:	e8 17 1e 00 00       	call   c001bb22 <Process::createUserThread()>
c0019d0b:	8b 06                	mov    eax,DWORD PTR [esi]
c0019d0d:	83 c4 10             	add    esp,0x10
c0019d10:	99                   	cdq    
c0019d11:	59                   	pop    ecx
c0019d12:	5b                   	pop    ebx
c0019d13:	5e                   	pop    esi
c0019d14:	c3                   	ret    

c0019d15 <sysAppSettings(regs*)>:
c0019d15:	53                   	push   ebx
c0019d16:	83 ec 08             	sub    esp,0x8
c0019d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d1d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019d20:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0019d26:	25 e0 1f 00 00       	and    eax,0x1fe0
c0019d2b:	66 3d c0 09          	cmp    ax,0x9c0
c0019d2f:	75 2f                	jne    c0019d60 <sysAppSettings(regs*)+0x4b>
c0019d31:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0019d37:	83 e0 1f             	and    eax,0x1f
c0019d3a:	3c 01                	cmp    al,0x1
c0019d3c:	74 2e                	je     c0019d6c <sysAppSettings(regs*)+0x57>
c0019d3e:	3c 07                	cmp    al,0x7
c0019d40:	0f 84 bd 00 00 00    	je     c0019e03 <sysAppSettings(regs*)+0xee>
c0019d46:	84 c0                	test   al,al
c0019d48:	0f 84 dc 00 00 00    	je     c0019e2a <sysAppSettings(regs*)+0x115>
c0019d4e:	3c 08                	cmp    al,0x8
c0019d50:	74 6d                	je     c0019dbf <sysAppSettings(regs*)+0xaa>
c0019d52:	0f b6 c0             	movzx  eax,al
c0019d55:	83 c4 08             	add    esp,0x8
c0019d58:	05 e8 03 00 00       	add    eax,0x3e8
c0019d5d:	5b                   	pop    ebx
c0019d5e:	99                   	cdq    
c0019d5f:	c3                   	ret    
c0019d60:	b8 01 00 00 00       	mov    eax,0x1
c0019d65:	31 d2                	xor    edx,edx
c0019d67:	83 c4 08             	add    esp,0x8
c0019d6a:	5b                   	pop    ebx
c0019d6b:	c3                   	ret    
c0019d6c:	51                   	push   ecx
c0019d6d:	68 00 01 00 00       	push   0x100
c0019d72:	6a 00                	push   0x0
c0019d74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019d79:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019d7c:	83 c0 0c             	add    eax,0xc
c0019d7f:	50                   	push   eax
c0019d80:	e8 f8 68 fe ff       	call   c000067d <memset>
c0019d85:	83 c4 0c             	add    esp,0xc
c0019d88:	68 ff 00 00 00       	push   0xff
c0019d8d:	53                   	push   ebx
c0019d8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019d93:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019d96:	83 c0 0c             	add    eax,0xc
c0019d99:	50                   	push   eax
c0019d9a:	e8 a8 68 fe ff       	call   c0000647 <memcpy>
c0019d9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019da4:	5b                   	pop    ebx
c0019da5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019da8:	5a                   	pop    edx
c0019da9:	8d 50 0c             	lea    edx,[eax+0xc]
c0019dac:	52                   	push   edx
c0019dad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019db3:	e8 0e 65 ff ff       	call   c00102c6 <VgaText::setTitle(char*)>
c0019db8:	83 c4 10             	add    esp,0x10
c0019dbb:	31 c0                	xor    eax,eax
c0019dbd:	eb a6                	jmp    c0019d65 <sysAppSettings(regs*)+0x50>
c0019dbf:	83 ec 08             	sub    esp,0x8
c0019dc2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019dc8:	83 e0 0f             	and    eax,0xf
c0019dcb:	50                   	push   eax
c0019dcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019dd1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019dd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dda:	e8 d7 64 ff ff       	call   c00102b6 <VgaText::setTitleColour(VgaColour)>
c0019ddf:	58                   	pop    eax
c0019de0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019de6:	5a                   	pop    edx
c0019de7:	c1 e8 04             	shr    eax,0x4
c0019dea:	83 e0 0f             	and    eax,0xf
c0019ded:	50                   	push   eax
c0019dee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019df3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019df6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dfc:	e8 a5 64 ff ff       	call   c00102a6 <VgaText::setTitleTextColour(VgaColour)>
c0019e01:	eb b5                	jmp    c0019db8 <sysAppSettings(regs*)+0xa3>
c0019e03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e08:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e0b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019e11:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0019e17:	c0 e8 06             	shr    al,0x6
c0019e1a:	83 e0 01             	and    eax,0x1
c0019e1d:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0019e23:	31 c0                	xor    eax,eax
c0019e25:	e9 3b ff ff ff       	jmp    c0019d65 <sysAppSettings(regs*)+0x50>
c0019e2a:	b8 02 00 00 00       	mov    eax,0x2
c0019e2f:	e9 31 ff ff ff       	jmp    c0019d65 <sysAppSettings(regs*)+0x50>

c0019e34 <sysSetFatAttrib(regs*)>:
c0019e34:	57                   	push   edi
c0019e35:	56                   	push   esi
c0019e36:	53                   	push   ebx
c0019e37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e3b:	83 ec 0c             	sub    esp,0xc
c0019e3e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e41:	68 14 01 00 00       	push   0x114
c0019e46:	e8 0b 83 ff ff       	call   c0012156 <operator new(unsigned long)>
c0019e4b:	83 c4 0c             	add    esp,0xc
c0019e4e:	89 c3                	mov    ebx,eax
c0019e50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e55:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019e58:	57                   	push   edi
c0019e59:	53                   	push   ebx
c0019e5a:	e8 15 89 ff ff       	call   c0012774 <File::File(char const*, Process*)>
c0019e5f:	83 c4 0c             	add    esp,0xc
c0019e62:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e65:	0f b6 d4             	movzx  edx,ah
c0019e68:	0f b6 c0             	movzx  eax,al
c0019e6b:	52                   	push   edx
c0019e6c:	50                   	push   eax
c0019e6d:	53                   	push   ebx
c0019e6e:	e8 77 8b ff ff       	call   c00129ea <File::chfatattr(unsigned char, unsigned char)>
c0019e73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e76:	89 c6                	mov    esi,eax
c0019e78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e7a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e7d:	83 c4 10             	add    esp,0x10
c0019e80:	31 c0                	xor    eax,eax
c0019e82:	5b                   	pop    ebx
c0019e83:	85 f6                	test   esi,esi
c0019e85:	5e                   	pop    esi
c0019e86:	0f 95 c0             	setne  al
c0019e89:	5f                   	pop    edi
c0019e8a:	31 d2                	xor    edx,edx
c0019e8c:	f7 d8                	neg    eax
c0019e8e:	83 d2 00             	adc    edx,0x0
c0019e91:	f7 da                	neg    edx
c0019e93:	c3                   	ret    

c0019e94 <sysPanic(regs*)>:
c0019e94:	83 ec 18             	sub    esp,0x18
c0019e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e9b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019e9e:	e8 20 eb ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c0019ea3:	c7 04 24 c3 83 02 c0 	mov    DWORD PTR [esp],0xc00283c3
c0019eaa:	e8 14 eb ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c0019eaf:	b8 01 00 00 00       	mov    eax,0x1
c0019eb4:	31 d2                	xor    edx,edx
c0019eb6:	83 c4 1c             	add    esp,0x1c
c0019eb9:	c3                   	ret    

c0019eba <sysPipe(regs*)>:
c0019eba:	57                   	push   edi
c0019ebb:	56                   	push   esi
c0019ebc:	53                   	push   ebx
c0019ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ec1:	83 ec 0c             	sub    esp,0xc
c0019ec4:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0019ec7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0019eca:	6a 20                	push   0x20
c0019ecc:	e8 85 82 ff ff       	call   c0012156 <operator new(unsigned long)>
c0019ed1:	89 c3                	mov    ebx,eax
c0019ed3:	58                   	pop    eax
c0019ed4:	5a                   	pop    edx
c0019ed5:	68 00 50 00 00       	push   0x5000
c0019eda:	53                   	push   ebx
c0019edb:	e8 24 5d ff ff       	call   c000fc04 <Pipe::Pipe(int)>
c0019ee0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ee3:	e8 6e 6f ff ff       	call   c0010e56 <UnixFile::getFileDescriptor()>
c0019ee8:	89 07                	mov    DWORD PTR [edi],eax
c0019eea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019eed:	e8 64 6f ff ff       	call   c0010e56 <UnixFile::getFileDescriptor()>
c0019ef2:	83 c4 10             	add    esp,0x10
c0019ef5:	89 06                	mov    DWORD PTR [esi],eax
c0019ef7:	31 d2                	xor    edx,edx
c0019ef9:	5b                   	pop    ebx
c0019efa:	31 c0                	xor    eax,eax
c0019efc:	5e                   	pop    esi
c0019efd:	5f                   	pop    edi
c0019efe:	c3                   	ret    

c0019eff <sysGetUnixTime(regs*)>:
c0019eff:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0019f04:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019f0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f0e:	e9 29 92 ff ff       	jmp    c001313c <Clock::timeInSecondsLocal()>

c0019f13 <string_ends_with(char const*, char const*)>:
c0019f13:	57                   	push   edi
c0019f14:	56                   	push   esi
c0019f15:	53                   	push   ebx
c0019f16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f1a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019f1e:	83 ec 0c             	sub    esp,0xc
c0019f21:	53                   	push   ebx
c0019f22:	e8 73 67 fe ff       	call   c000069a <strlen>
c0019f27:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f2a:	89 c6                	mov    esi,eax
c0019f2c:	e8 69 67 fe ff       	call   c000069a <strlen>
c0019f31:	83 c4 10             	add    esp,0x10
c0019f34:	39 c6                	cmp    esi,eax
c0019f36:	7d 06                	jge    c0019f3e <string_ends_with(char const*, char const*)+0x2b>
c0019f38:	5b                   	pop    ebx
c0019f39:	31 c0                	xor    eax,eax
c0019f3b:	5e                   	pop    esi
c0019f3c:	5f                   	pop    edi
c0019f3d:	c3                   	ret    
c0019f3e:	83 ec 08             	sub    esp,0x8
c0019f41:	29 c6                	sub    esi,eax
c0019f43:	57                   	push   edi
c0019f44:	01 f3                	add    ebx,esi
c0019f46:	53                   	push   ebx
c0019f47:	e8 21 68 fe ff       	call   c000076d <strcmp>
c0019f4c:	83 c4 10             	add    esp,0x10
c0019f4f:	85 c0                	test   eax,eax
c0019f51:	5b                   	pop    ebx
c0019f52:	0f 94 c0             	sete   al
c0019f55:	5e                   	pop    esi
c0019f56:	0f b6 c0             	movzx  eax,al
c0019f59:	5f                   	pop    edi
c0019f5a:	c3                   	ret    

c0019f5b <sysCallOpen(regs*)>:
c0019f5b:	56                   	push   esi
c0019f5c:	53                   	push   ebx
c0019f5d:	81 ec 04 01 00 00    	sub    esp,0x104
c0019f63:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0019f6a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0019f6d:	85 c9                	test   ecx,ecx
c0019f6f:	0f 84 b3 00 00 00    	je     c001a028 <sysCallOpen(regs*)+0xcd>
c0019f75:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0019f78:	85 c0                	test   eax,eax
c0019f7a:	0f 84 a8 00 00 00    	je     c001a028 <sysCallOpen(regs*)+0xcd>
c0019f80:	52                   	push   edx
c0019f81:	68 d2 83 02 c0       	push   0xc00283d2
c0019f86:	50                   	push   eax
c0019f87:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019f8b:	56                   	push   esi
c0019f8c:	e8 39 86 ff ff       	call   c00125ca <standardiseFiles(char*, char const*, char const*)>
c0019f91:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f94:	e8 01 67 fe ff       	call   c000069a <strlen>
c0019f99:	83 c4 10             	add    esp,0x10
c0019f9c:	48                   	dec    eax
c0019f9d:	74 1d                	je     c0019fbc <sysCallOpen(regs*)+0x61>
c0019f9f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0019fa2:	eb 0f                	jmp    c0019fb3 <sysCallOpen(regs*)+0x58>
c0019fa4:	80 fa 3a             	cmp    dl,0x3a
c0019fa7:	74 0f                	je     c0019fb8 <sysCallOpen(regs*)+0x5d>
c0019fa9:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0019fad:	48                   	dec    eax
c0019fae:	74 0c                	je     c0019fbc <sysCallOpen(regs*)+0x61>
c0019fb0:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0019fb3:	80 fa 2e             	cmp    dl,0x2e
c0019fb6:	75 ec                	jne    c0019fa4 <sysCallOpen(regs*)+0x49>
c0019fb8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0019fbc:	83 ec 08             	sub    esp,0x8
c0019fbf:	68 d6 83 02 c0       	push   0xc00283d6
c0019fc4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019fc7:	e8 47 ff ff ff       	call   c0019f13 <string_ends_with(char const*, char const*)>
c0019fcc:	83 c4 10             	add    esp,0x10
c0019fcf:	85 c0                	test   eax,eax
c0019fd1:	75 17                	jne    c0019fea <sysCallOpen(regs*)+0x8f>
c0019fd3:	83 ec 08             	sub    esp,0x8
c0019fd6:	68 f7 83 02 c0       	push   0xc00283f7
c0019fdb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019fde:	e8 30 ff ff ff       	call   c0019f13 <string_ends_with(char const*, char const*)>
c0019fe3:	83 c4 10             	add    esp,0x10
c0019fe6:	85 c0                	test   eax,eax
c0019fe8:	74 51                	je     c001a03b <sysCallOpen(regs*)+0xe0>
c0019fea:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019fed:	83 ec 08             	sub    esp,0x8
c0019ff0:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0019ff6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019ffd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a000:	ff 30                	push   DWORD PTR [eax]
c001a002:	68 db 83 02 c0       	push   0xc00283db
c001a007:	e8 39 82 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001a00c:	c7 04 24 ea 83 02 c0 	mov    DWORD PTR [esp],0xc00283ea
c001a013:	e8 2d 82 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001a018:	83 c4 10             	add    esp,0x10
c001a01b:	81 c4 04 01 00 00    	add    esp,0x104
c001a021:	31 c0                	xor    eax,eax
c001a023:	31 d2                	xor    edx,edx
c001a025:	5b                   	pop    ebx
c001a026:	5e                   	pop    esi
c001a027:	c3                   	ret    
c001a028:	81 c4 04 01 00 00    	add    esp,0x104
c001a02e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a033:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a038:	5b                   	pop    ebx
c001a039:	5e                   	pop    esi
c001a03a:	c3                   	ret    
c001a03b:	83 ec 08             	sub    esp,0x8
c001a03e:	68 d7 83 02 c0       	push   0xc00283d7
c001a043:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a046:	e8 22 67 fe ff       	call   c000076d <strcmp>
c001a04b:	83 c4 10             	add    esp,0x10
c001a04e:	85 c0                	test   eax,eax
c001a050:	74 98                	je     c0019fea <sysCallOpen(regs*)+0x8f>
c001a052:	83 ec 08             	sub    esp,0x8
c001a055:	68 d6 83 02 c0       	push   0xc00283d6
c001a05a:	56                   	push   esi
c001a05b:	e8 b3 fe ff ff       	call   c0019f13 <string_ends_with(char const*, char const*)>
c001a060:	83 c4 10             	add    esp,0x10
c001a063:	85 c0                	test   eax,eax
c001a065:	75 83                	jne    c0019fea <sysCallOpen(regs*)+0x8f>
c001a067:	83 ec 08             	sub    esp,0x8
c001a06a:	68 fc 83 02 c0       	push   0xc00283fc
c001a06f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a072:	e8 9c fe ff ff       	call   c0019f13 <string_ends_with(char const*, char const*)>
c001a077:	83 c4 10             	add    esp,0x10
c001a07a:	85 c0                	test   eax,eax
c001a07c:	0f 85 d1 00 00 00    	jne    c001a153 <sysCallOpen(regs*)+0x1f8>
c001a082:	83 ec 08             	sub    esp,0x8
c001a085:	68 01 84 02 c0       	push   0xc0028401
c001a08a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a08d:	e8 81 fe ff ff       	call   c0019f13 <string_ends_with(char const*, char const*)>
c001a092:	83 c4 10             	add    esp,0x10
c001a095:	85 c0                	test   eax,eax
c001a097:	0f 85 b6 00 00 00    	jne    c001a153 <sysCallOpen(regs*)+0x1f8>
c001a09d:	83 ec 08             	sub    esp,0x8
c001a0a0:	68 fd 83 02 c0       	push   0xc00283fd
c001a0a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0a8:	e8 c0 66 fe ff       	call   c000076d <strcmp>
c001a0ad:	83 c4 10             	add    esp,0x10
c001a0b0:	85 c0                	test   eax,eax
c001a0b2:	0f 84 9b 00 00 00    	je     c001a153 <sysCallOpen(regs*)+0x1f8>
c001a0b8:	83 ec 08             	sub    esp,0x8
c001a0bb:	68 fc 83 02 c0       	push   0xc00283fc
c001a0c0:	56                   	push   esi
c001a0c1:	e8 4d fe ff ff       	call   c0019f13 <string_ends_with(char const*, char const*)>
c001a0c6:	83 c4 10             	add    esp,0x10
c001a0c9:	85 c0                	test   eax,eax
c001a0cb:	0f 85 82 00 00 00    	jne    c001a153 <sysCallOpen(regs*)+0x1f8>
c001a0d1:	83 ec 0c             	sub    esp,0xc
c001a0d4:	68 14 01 00 00       	push   0x114
c001a0d9:	e8 78 80 ff ff       	call   c0012156 <operator new(unsigned long)>
c001a0de:	83 c4 0c             	add    esp,0xc
c001a0e1:	89 c6                	mov    esi,eax
c001a0e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a0e8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a0eb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0ee:	56                   	push   esi
c001a0ef:	e8 80 86 ff ff       	call   c0012774 <File::File(char const*, Process*)>
c001a0f4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a0f7:	83 c4 10             	add    esp,0x10
c001a0fa:	0f b6 c2             	movzx  eax,dl
c001a0fd:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a100:	89 d0                	mov    eax,edx
c001a102:	83 e0 01             	and    eax,0x1
c001a105:	f6 c2 02             	test   dl,0x2
c001a108:	74 03                	je     c001a10d <sysCallOpen(regs*)+0x1b2>
c001a10a:	83 c8 02             	or     eax,0x2
c001a10d:	f6 c2 04             	test   dl,0x4
c001a110:	74 03                	je     c001a115 <sysCallOpen(regs*)+0x1ba>
c001a112:	83 c8 04             	or     eax,0x4
c001a115:	f6 c2 08             	test   dl,0x8
c001a118:	74 03                	je     c001a11d <sysCallOpen(regs*)+0x1c2>
c001a11a:	83 c8 0a             	or     eax,0xa
c001a11d:	83 e2 10             	and    edx,0x10
c001a120:	74 03                	je     c001a125 <sysCallOpen(regs*)+0x1ca>
c001a122:	83 c8 12             	or     eax,0x12
c001a125:	83 ec 08             	sub    esp,0x8
c001a128:	50                   	push   eax
c001a129:	56                   	push   esi
c001a12a:	e8 a9 86 ff ff       	call   c00127d8 <File::open(FileOpenMode)>
c001a12f:	83 c4 10             	add    esp,0x10
c001a132:	85 c0                	test   eax,eax
c001a134:	0f 85 ee fe ff ff    	jne    c001a028 <sysCallOpen(regs*)+0xcd>
c001a13a:	83 ec 0c             	sub    esp,0xc
c001a13d:	56                   	push   esi
c001a13e:	e8 13 6d ff ff       	call   c0010e56 <UnixFile::getFileDescriptor()>
c001a143:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a146:	89 02                	mov    DWORD PTR [edx],eax
c001a148:	c1 f8 1f             	sar    eax,0x1f
c001a14b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a14e:	e9 c5 fe ff ff       	jmp    c001a018 <sysCallOpen(regs*)+0xbd>
c001a153:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a156:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001a15c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a163:	e9 b3 fe ff ff       	jmp    c001a01b <sysCallOpen(regs*)+0xc0>

c001a168 <setupSystemCalls()>:
c001a168:	c7 05 80 af 02 c0 c4 93 01 c0 	mov    DWORD PTR ds:0xc002af80,0xc00193c4
c001a172:	c7 05 84 af 02 c0 f2 91 01 c0 	mov    DWORD PTR ds:0xc002af84,0xc00191f2
c001a17c:	c7 05 88 af 02 c0 07 93 01 c0 	mov    DWORD PTR ds:0xc002af88,0xc0019307
c001a186:	c7 05 8c af 02 c0 5c 93 01 c0 	mov    DWORD PTR ds:0xc002af8c,0xc001935c
c001a190:	c7 05 90 af 02 c0 9f 92 01 c0 	mov    DWORD PTR ds:0xc002af90,0xc001929f
c001a19a:	c7 05 94 af 02 c0 de 93 01 c0 	mov    DWORD PTR ds:0xc002af94,0xc00193de
c001a1a4:	c7 05 98 af 02 c0 83 95 01 c0 	mov    DWORD PTR ds:0xc002af98,0xc0019583
c001a1ae:	c7 05 9c af 02 c0 a2 95 01 c0 	mov    DWORD PTR ds:0xc002af9c,0xc00195a2
c001a1b8:	c7 05 a4 af 02 c0 03 99 01 c0 	mov    DWORD PTR ds:0xc002afa4,0xc0019903
c001a1c2:	c7 05 a0 af 02 c0 5b 9f 01 c0 	mov    DWORD PTR ds:0xc002afa0,0xc0019f5b
c001a1cc:	c7 05 a8 af 02 c0 8b 99 01 c0 	mov    DWORD PTR ds:0xc002afa8,0xc001998b
c001a1d6:	c7 05 ac af 02 c0 01 96 01 c0 	mov    DWORD PTR ds:0xc002afac,0xc0019601
c001a1e0:	c7 05 b0 af 02 c0 ea 93 01 c0 	mov    DWORD PTR ds:0xc002afb0,0xc00193ea
c001a1ea:	c7 05 b4 af 02 c0 ef 93 01 c0 	mov    DWORD PTR ds:0xc002afb4,0xc00193ef
c001a1f4:	c7 05 b8 af 02 c0 f8 99 01 c0 	mov    DWORD PTR ds:0xc002afb8,0xc00199f8
c001a1fe:	c7 05 bc af 02 c0 51 9a 01 c0 	mov    DWORD PTR ds:0xc002afbc,0xc0019a51
c001a208:	c7 05 c0 af 02 c0 e9 96 01 c0 	mov    DWORD PTR ds:0xc002afc0,0xc00196e9
c001a212:	c7 05 c4 af 02 c0 52 97 01 c0 	mov    DWORD PTR ds:0xc002afc4,0xc0019752
c001a21c:	c7 05 c8 af 02 c0 80 98 01 c0 	mov    DWORD PTR ds:0xc002afc8,0xc0019880
c001a226:	c7 05 cc af 02 c0 f4 93 01 c0 	mov    DWORD PTR ds:0xc002afcc,0xc00193f4
c001a230:	c7 05 d0 af 02 c0 b7 9a 01 c0 	mov    DWORD PTR ds:0xc002afd0,0xc0019ab7
c001a23a:	c7 05 d4 af 02 c0 fe 93 01 c0 	mov    DWORD PTR ds:0xc002afd4,0xc00193fe
c001a244:	c7 05 d8 af 02 c0 09 94 01 c0 	mov    DWORD PTR ds:0xc002afd8,0xc0019409
c001a24e:	c7 05 dc af 02 c0 d1 9a 01 c0 	mov    DWORD PTR ds:0xc002afdc,0xc0019ad1
c001a258:	c7 05 e0 af 02 c0 23 9b 01 c0 	mov    DWORD PTR ds:0xc002afe0,0xc0019b23
c001a262:	c7 05 e4 af 02 c0 14 94 01 c0 	mov    DWORD PTR ds:0xc002afe4,0xc0019414
c001a26c:	c7 05 e8 af 02 c0 75 9b 01 c0 	mov    DWORD PTR ds:0xc002afe8,0xc0019b75
c001a276:	c7 05 ec af 02 c0 be 95 01 c0 	mov    DWORD PTR ds:0xc002afec,0xc00195be
c001a280:	c7 05 f0 af 02 c0 c1 9b 01 c0 	mov    DWORD PTR ds:0xc002aff0,0xc0019bc1
c001a28a:	c7 05 f4 af 02 c0 8f 96 01 c0 	mov    DWORD PTR ds:0xc002aff4,0xc001968f
c001a294:	c7 05 f8 af 02 c0 96 9c 01 c0 	mov    DWORD PTR ds:0xc002aff8,0xc0019c96
c001a29e:	c7 05 fc af 02 c0 cf 97 01 c0 	mov    DWORD PTR ds:0xc002affc,0xc00197cf
c001a2a8:	c7 05 00 b0 02 c0 bd 9c 01 c0 	mov    DWORD PTR ds:0xc002b000,0xc0019cbd
c001a2b2:	c7 05 04 b0 02 c0 44 9c 01 c0 	mov    DWORD PTR ds:0xc002b004,0xc0019c44
c001a2bc:	c7 05 08 b0 02 c0 15 9d 01 c0 	mov    DWORD PTR ds:0xc002b008,0xc0019d15
c001a2c6:	c7 05 0c b0 02 c0 24 94 01 c0 	mov    DWORD PTR ds:0xc002b00c,0xc0019424
c001a2d0:	c7 05 10 b0 02 c0 8e 94 01 c0 	mov    DWORD PTR ds:0xc002b010,0xc001948e
c001a2da:	c7 05 14 b0 02 c0 d4 94 01 c0 	mov    DWORD PTR ds:0xc002b014,0xc00194d4
c001a2e4:	c7 05 18 b0 02 c0 34 9e 01 c0 	mov    DWORD PTR ds:0xc002b018,0xc0019e34
c001a2ee:	c7 05 1c b0 02 c0 94 9e 01 c0 	mov    DWORD PTR ds:0xc002b01c,0xc0019e94
c001a2f8:	c7 05 20 b0 02 c0 25 95 01 c0 	mov    DWORD PTR ds:0xc002b020,0xc0019525
c001a302:	c7 05 24 b0 02 c0 ba 9e 01 c0 	mov    DWORD PTR ds:0xc002b024,0xc0019eba
c001a30c:	c7 05 28 b0 02 c0 ff 9e 01 c0 	mov    DWORD PTR ds:0xc002b028,0xc0019eff
c001a316:	c7 05 2c b0 02 c0 0a 92 01 c0 	mov    DWORD PTR ds:0xc002b02c,0xc001920a
c001a320:	c3                   	ret    

c001a321 <systemCall(regs*, void*)>:
c001a321:	53                   	push   ebx
c001a322:	83 ec 08             	sub    esp,0x8
c001a325:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a329:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a32c:	83 f8 7f             	cmp    eax,0x7f
c001a32f:	77 16                	ja     c001a347 <systemCall(regs*, void*)+0x26>
c001a331:	8b 14 85 80 af 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5080]
c001a338:	85 d2                	test   edx,edx
c001a33a:	74 0b                	je     c001a347 <systemCall(regs*, void*)+0x26>
c001a33c:	83 ec 0c             	sub    esp,0xc
c001a33f:	53                   	push   ebx
c001a340:	ff d2                	call   edx
c001a342:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a345:	eb 0d                	jmp    c001a354 <systemCall(regs*, void*)+0x33>
c001a347:	52                   	push   edx
c001a348:	52                   	push   edx
c001a349:	50                   	push   eax
c001a34a:	68 06 84 02 c0       	push   0xc0028406
c001a34f:	e8 f1 7e ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001a354:	83 c4 10             	add    esp,0x10
c001a357:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a35c:	31 d2                	xor    edx,edx
c001a35e:	83 c4 08             	add    esp,0x8
c001a361:	5b                   	pop    ebx
c001a362:	c3                   	ret    

c001a363 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001a363:	55                   	push   ebp
c001a364:	89 e5                	mov    ebp,esp
c001a366:	57                   	push   edi
c001a367:	56                   	push   esi
c001a368:	53                   	push   ebx
c001a369:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001a36f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001a372:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001a375:	85 c0                	test   eax,eax
c001a377:	0f 95 c1             	setne  cl
c001a37a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001a37e:	0f 94 c2             	sete   dl
c001a381:	84 d1                	test   cl,dl
c001a383:	74 26                	je     c001a3ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a385:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001a38c:	74 1d                	je     c001a3ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a38e:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001a391:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001a397:	89 d6                	mov    esi,edx
c001a399:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001a39f:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001a3a5:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001a3a8:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001a3ab:	83 ec 0c             	sub    esp,0xc
c001a3ae:	05 ff 0f 00 00       	add    eax,0xfff
c001a3b3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001a3b6:	6a 01                	push   0x1
c001a3b8:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001a3be:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001a3c4:	e8 98 6e ff ff       	call   c0011261 <Virt::allocateKernelVirtualPages(int)>
c001a3c9:	83 c4 10             	add    esp,0x10
c001a3cc:	89 c6                	mov    esi,eax
c001a3ce:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001a3d4:	0f 86 21 01 00 00    	jbe    c001a4fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001a3da:	c1 eb 0c             	shr    ebx,0xc
c001a3dd:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001a3e7:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001a3ed:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a3f0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001a3f3:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001a3f9:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001a3fc:	29 d8                	sub    eax,ebx
c001a3fe:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001a404:	0f 83 f4 00 00 00    	jae    c001a4fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001a40a:	83 ec 0c             	sub    esp,0xc
c001a40d:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001a413:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001a416:	3d 00 10 00 00       	cmp    eax,0x1000
c001a41b:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001a41d:	52                   	push   edx
c001a41e:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001a424:	52                   	push   edx
c001a425:	76 05                	jbe    c001a42c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001a427:	b8 00 10 00 00       	mov    eax,0x1000
c001a42c:	31 d2                	xor    edx,edx
c001a42e:	52                   	push   edx
c001a42f:	50                   	push   eax
c001a430:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001a433:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a436:	83 c4 20             	add    esp,0x20
c001a439:	85 c0                	test   eax,eax
c001a43b:	74 1f                	je     c001a45c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001a43d:	51                   	push   ecx
c001a43e:	51                   	push   ecx
c001a43f:	50                   	push   eax
c001a440:	68 1a 84 02 c0       	push   0xc002841a
c001a445:	e8 fb 7d ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001a44a:	89 34 24             	mov    DWORD PTR [esp],esi
c001a44d:	e8 69 71 ff ff       	call   c00115bb <Virt::freeKernelVirtualPages(unsigned long)>
c001a452:	83 c4 10             	add    esp,0x10
c001a455:	31 c0                	xor    eax,eax
c001a457:	e9 7c 01 00 00       	jmp    c001a5d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001a45c:	e8 ab 14 00 00       	call   c001b90c <lockScheduler()>
c001a461:	e8 62 52 ff ff       	call   c000f6c8 <Phys::allocatePage()>
c001a466:	6a 07                	push   0x7
c001a468:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001a46e:	56                   	push   esi
c001a46f:	50                   	push   eax
c001a470:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a476:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a479:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a47f:	e8 9e 74 ff ff       	call   c0011922 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a484:	83 c4 0c             	add    esp,0xc
c001a487:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a48d:	6a 00                	push   0x0
c001a48f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a495:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a498:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a49e:	e8 e9 72 ff ff       	call   c001178c <VAS::mapOtherVASIn(bool, VAS*)>
c001a4a3:	58                   	pop    eax
c001a4a4:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001a4aa:	5a                   	pop    edx
c001a4ab:	68 07 04 00 00       	push   0x407
c001a4b0:	53                   	push   ebx
c001a4b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a4b7:	50                   	push   eax
c001a4b8:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a4be:	6a 00                	push   0x0
c001a4c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a4c8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a4ce:	e8 09 78 ff ff       	call   c0011cdc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a4d3:	83 c4 1c             	add    esp,0x1c
c001a4d6:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001a4dc:	68 00 10 00 00       	push   0x1000
c001a4e1:	50                   	push   eax
c001a4e2:	56                   	push   esi
c001a4e3:	e8 5f 61 fe ff       	call   c0000647 <memcpy>
c001a4e8:	e8 21 14 00 00       	call   c001b90e <unlockScheduler()>
c001a4ed:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001a4f3:	83 c4 10             	add    esp,0x10
c001a4f6:	e9 f5 fe ff ff       	jmp    c001a3f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001a4fb:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a4fe:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001a508:	0f 86 bc 00 00 00    	jbe    c001a5ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001a50e:	e8 f9 13 00 00       	call   c001b90c <lockScheduler()>
c001a513:	51                   	push   ecx
c001a514:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a51a:	6a 00                	push   0x0
c001a51c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a521:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a524:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a52a:	e8 5d 72 ff ff       	call   c001178c <VAS::mapOtherVASIn(bool, VAS*)>
c001a52f:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001a535:	83 c4 10             	add    esp,0x10
c001a538:	c1 e8 0c             	shr    eax,0xc
c001a53b:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001a545:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001a54b:	e8 78 51 ff ff       	call   c000f6c8 <Phys::allocatePage()>
c001a550:	6a 07                	push   0x7
c001a552:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001a558:	56                   	push   esi
c001a559:	50                   	push   eax
c001a55a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a560:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a563:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001a569:	e8 b4 73 ff ff       	call   c0011922 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a56e:	58                   	pop    eax
c001a56f:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001a575:	5a                   	pop    edx
c001a576:	68 07 04 00 00       	push   0x407
c001a57b:	53                   	push   ebx
c001a57c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a582:	50                   	push   eax
c001a583:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a589:	6a 00                	push   0x0
c001a58b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a590:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a593:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a599:	e8 3e 77 ff ff       	call   c0011cdc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a59e:	83 c4 1c             	add    esp,0x1c
c001a5a1:	68 00 10 00 00       	push   0x1000
c001a5a6:	6a 00                	push   0x0
c001a5a8:	56                   	push   esi
c001a5a9:	e8 cf 60 fe ff       	call   c000067d <memset>
c001a5ae:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001a5b4:	83 c4 10             	add    esp,0x10
c001a5b7:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001a5bd:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001a5c3:	77 86                	ja     c001a54b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001a5c5:	e8 44 13 00 00       	call   c001b90e <unlockScheduler()>
c001a5ca:	83 ec 0c             	sub    esp,0xc
c001a5cd:	56                   	push   esi
c001a5ce:	e8 e8 6f ff ff       	call   c00115bb <Virt::freeKernelVirtualPages(unsigned long)>
c001a5d3:	83 c4 10             	add    esp,0x10
c001a5d6:	b0 01                	mov    al,0x1
c001a5d8:	8d 65 f4             	lea    esp,[ebp-0xc]
c001a5db:	5b                   	pop    ebx
c001a5dc:	5e                   	pop    esi
c001a5dd:	5f                   	pop    edi
c001a5de:	5d                   	pop    ebp
c001a5df:	c3                   	ret    

c001a5e0 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001a5e0:	55                   	push   ebp
c001a5e1:	57                   	push   edi
c001a5e2:	56                   	push   esi
c001a5e3:	53                   	push   ebx
c001a5e4:	83 ec 48             	sub    esp,0x48
c001a5e7:	68 14 01 00 00       	push   0x114
c001a5ec:	e8 65 7b ff ff       	call   c0012156 <operator new(unsigned long)>
c001a5f1:	83 c4 0c             	add    esp,0xc
c001a5f4:	89 c6                	mov    esi,eax
c001a5f6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001a5fa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a5fe:	50                   	push   eax
c001a5ff:	e8 70 81 ff ff       	call   c0012774 <File::File(char const*, Process*)>
c001a604:	58                   	pop    eax
c001a605:	5a                   	pop    edx
c001a606:	6a 01                	push   0x1
c001a608:	56                   	push   esi
c001a609:	e8 ca 81 ff ff       	call   c00127d8 <File::open(FileOpenMode)>
c001a60e:	83 c4 10             	add    esp,0x10
c001a611:	85 c0                	test   eax,eax
c001a613:	0f 85 47 01 00 00    	jne    c001a760 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a619:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001a621:	83 ec 0c             	sub    esp,0xc
c001a624:	6a 34                	push   0x34
c001a626:	e8 f3 4a ff ff       	call   c000f11e <malloc>
c001a62b:	89 c3                	mov    ebx,eax
c001a62d:	58                   	pop    eax
c001a62e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a630:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001a634:	57                   	push   edi
c001a635:	53                   	push   ebx
c001a636:	6a 00                	push   0x0
c001a638:	6a 34                	push   0x34
c001a63a:	56                   	push   esi
c001a63b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a63e:	83 c4 20             	add    esp,0x20
c001a641:	85 c0                	test   eax,eax
c001a643:	0f 85 17 01 00 00    	jne    c001a760 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a649:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001a64f:	0f 85 0b 01 00 00    	jne    c001a760 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a655:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a658:	85 c0                	test   eax,eax
c001a65a:	0f 84 00 01 00 00    	je     c001a760 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a660:	31 d2                	xor    edx,edx
c001a662:	55                   	push   ebp
c001a663:	52                   	push   edx
c001a664:	50                   	push   eax
c001a665:	56                   	push   esi
c001a666:	e8 2b 82 ff ff       	call   c0012896 <File::seek(unsigned long long)>
c001a66b:	83 c4 10             	add    esp,0x10
c001a66e:	85 c0                	test   eax,eax
c001a670:	0f 85 ea 00 00 00    	jne    c001a760 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a676:	83 ec 0c             	sub    esp,0xc
c001a679:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001a67c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a680:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a684:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a688:	0f af c2             	imul   eax,edx
c001a68b:	50                   	push   eax
c001a68c:	e8 8d 4a ff ff       	call   c000f11e <malloc>
c001a691:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a694:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a698:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a69a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a69e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a6a2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a6a6:	0f af c2             	imul   eax,edx
c001a6a9:	99                   	cdq    
c001a6aa:	52                   	push   edx
c001a6ab:	50                   	push   eax
c001a6ac:	56                   	push   esi
c001a6ad:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a6b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001a6b3:	83 c4 20             	add    esp,0x20
c001a6b6:	85 c0                	test   eax,eax
c001a6b8:	0f 84 a2 00 00 00    	je     c001a760 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a6be:	31 d2                	xor    edx,edx
c001a6c0:	51                   	push   ecx
c001a6c1:	52                   	push   edx
c001a6c2:	50                   	push   eax
c001a6c3:	56                   	push   esi
c001a6c4:	e8 cd 81 ff ff       	call   c0012896 <File::seek(unsigned long long)>
c001a6c9:	83 c4 10             	add    esp,0x10
c001a6cc:	85 c0                	test   eax,eax
c001a6ce:	0f 85 8c 00 00 00    	jne    c001a760 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a6d4:	83 ec 0c             	sub    esp,0xc
c001a6d7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a6db:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a6df:	31 ed                	xor    ebp,ebp
c001a6e1:	0f af c2             	imul   eax,edx
c001a6e4:	50                   	push   eax
c001a6e5:	e8 34 4a ff ff       	call   c000f11e <malloc>
c001a6ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a6ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a6f1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a6f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6f7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a6fb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a6ff:	0f af c2             	imul   eax,edx
c001a702:	99                   	cdq    
c001a703:	52                   	push   edx
c001a704:	50                   	push   eax
c001a705:	56                   	push   esi
c001a706:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a709:	83 c4 20             	add    esp,0x20
c001a70c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a714:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001a718:	0f 86 80 00 00 00    	jbe    c001a79e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001a71e:	0f b7 fd             	movzx  edi,bp
c001a721:	c1 e7 05             	shl    edi,0x5
c001a724:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001a728:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001a72b:	75 6b                	jne    c001a798 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a72d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001a730:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a734:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001a737:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a73b:	52                   	push   edx
c001a73c:	31 d2                	xor    edx,edx
c001a73e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001a741:	52                   	push   edx
c001a742:	50                   	push   eax
c001a743:	56                   	push   esi
c001a744:	e8 4d 81 ff ff       	call   c0012896 <File::seek(unsigned long long)>
c001a749:	83 c4 10             	add    esp,0x10
c001a74c:	85 c0                	test   eax,eax
c001a74e:	74 17                	je     c001a767 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001a750:	83 ec 0c             	sub    esp,0xc
c001a753:	68 45 84 02 c0       	push   0xc0028445
c001a758:	e8 e8 7a ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001a75d:	83 c4 10             	add    esp,0x10
c001a760:	31 c0                	xor    eax,eax
c001a762:	e9 87 00 00 00       	jmp    c001a7ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001a767:	83 ec 0c             	sub    esp,0xc
c001a76a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001a76d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001a770:	50                   	push   eax
c001a771:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a775:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a779:	56                   	push   esi
c001a77a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001a77e:	e8 e0 fb ff ff       	call   c001a363 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001a783:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a787:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001a78b:	83 c4 20             	add    esp,0x20
c001a78e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a792:	73 04                	jae    c001a798 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a794:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a798:	45                   	inc    ebp
c001a799:	e9 76 ff ff ff       	jmp    c001a714 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001a79e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001a7a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7aa:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001a7b0:	83 ec 0c             	sub    esp,0xc
c001a7b3:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001a7b9:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a7be:	05 00 10 00 00       	add    eax,0x1000
c001a7c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a7c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7ca:	e8 5f 49 ff ff       	call   c000f12e <free>
c001a7cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7d2:	e8 57 49 ff ff       	call   c000f12e <free>
c001a7d7:	58                   	pop    eax
c001a7d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7dc:	e8 4d 49 ff ff       	call   c000f12e <free>
c001a7e1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a7e4:	e8 4d 80 ff ff       	call   c0012836 <File::close()>
c001a7e9:	83 c4 10             	add    esp,0x10
c001a7ec:	b0 01                	mov    al,0x1
c001a7ee:	83 c4 3c             	add    esp,0x3c
c001a7f1:	5b                   	pop    ebx
c001a7f2:	5e                   	pop    esi
c001a7f3:	5f                   	pop    edi
c001a7f4:	5d                   	pop    ebp
c001a7f5:	c3                   	ret    

c001a7f6 <Thr::runtimeReferenceHelper()>:
c001a7f6:	83 ec 18             	sub    esp,0x18
c001a7f9:	68 4d 84 02 c0       	push   0xc002844d
c001a7fe:	e8 42 7a ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001a803:	fa                   	cli    
c001a804:	83 c4 10             	add    esp,0x10
c001a807:	eb fe                	jmp    c001a807 <Thr::runtimeReferenceHelper()+0x11>

c001a809 <Thr::getAddressOfKernelSymbol(char const*)>:
c001a809:	57                   	push   edi
c001a80a:	56                   	push   esi
c001a80b:	53                   	push   ebx
c001a80c:	31 db                	xor    ebx,ebx
c001a80e:	39 1d 20 b9 02 c0    	cmp    DWORD PTR ds:0xc002b920,ebx
c001a814:	7e 3c                	jle    c001a852 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001a816:	8b 34 9d a0 b8 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd4760]
c001a81d:	31 ff                	xor    edi,edi
c001a81f:	39 3c 9d a0 b7 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd4860],edi
c001a826:	7e 27                	jle    c001a84f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001a828:	50                   	push   eax
c001a829:	50                   	push   eax
c001a82a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a82e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a830:	03 04 9d 20 b8 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd47e0]
c001a837:	50                   	push   eax
c001a838:	e8 30 5f fe ff       	call   c000076d <strcmp>
c001a83d:	83 c4 10             	add    esp,0x10
c001a840:	85 c0                	test   eax,eax
c001a842:	75 05                	jne    c001a849 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001a844:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a847:	eb 0b                	jmp    c001a854 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001a849:	83 c6 10             	add    esi,0x10
c001a84c:	47                   	inc    edi
c001a84d:	eb d0                	jmp    c001a81f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001a84f:	43                   	inc    ebx
c001a850:	eb bc                	jmp    c001a80e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001a852:	31 c0                	xor    eax,eax
c001a854:	5b                   	pop    ebx
c001a855:	5e                   	pop    esi
c001a856:	5f                   	pop    edi
c001a857:	c3                   	ret    

c001a858 <Thr::loadKernelSymbolTable(char const*)>:
c001a858:	55                   	push   ebp
c001a859:	57                   	push   edi
c001a85a:	56                   	push   esi
c001a85b:	53                   	push   ebx
c001a85c:	83 ec 68             	sub    esp,0x68
c001a85f:	8b 35 74 b9 02 c0    	mov    esi,DWORD PTR ds:0xc002b974
c001a865:	68 14 01 00 00       	push   0x114
c001a86a:	e8 e7 78 ff ff       	call   c0012156 <operator new(unsigned long)>
c001a86f:	83 c4 0c             	add    esp,0xc
c001a872:	89 c3                	mov    ebx,eax
c001a874:	56                   	push   esi
c001a875:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a879:	50                   	push   eax
c001a87a:	e8 f5 7e ff ff       	call   c0012774 <File::File(char const*, Process*)>
c001a87f:	5e                   	pop    esi
c001a880:	5f                   	pop    edi
c001a881:	6a 01                	push   0x1
c001a883:	53                   	push   ebx
c001a884:	e8 4f 7f ff ff       	call   c00127d8 <File::open(FileOpenMode)>
c001a889:	83 c4 10             	add    esp,0x10
c001a88c:	31 d2                	xor    edx,edx
c001a88e:	85 c0                	test   eax,eax
c001a890:	0f 85 79 02 00 00    	jne    c001ab0f <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a896:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001a89e:	83 ec 0c             	sub    esp,0xc
c001a8a1:	6a 34                	push   0x34
c001a8a3:	e8 76 48 ff ff       	call   c000f11e <malloc>
c001a8a8:	59                   	pop    ecx
c001a8a9:	89 c7                	mov    edi,eax
c001a8ab:	8d 74 24 34          	lea    esi,[esp+0x34]
c001a8af:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8b1:	56                   	push   esi
c001a8b2:	57                   	push   edi
c001a8b3:	6a 00                	push   0x0
c001a8b5:	6a 34                	push   0x34
c001a8b7:	53                   	push   ebx
c001a8b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a8bb:	83 c4 20             	add    esp,0x20
c001a8be:	85 c0                	test   eax,eax
c001a8c0:	74 17                	je     c001a8d9 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001a8c2:	83 ec 0c             	sub    esp,0xc
c001a8c5:	68 6f 84 02 c0       	push   0xc002846f
c001a8ca:	e8 f4 e0 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001a8cf:	83 c4 10             	add    esp,0x10
c001a8d2:	31 d2                	xor    edx,edx
c001a8d4:	e9 36 02 00 00       	jmp    c001ab0f <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a8d9:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001a8df:	75 e1                	jne    c001a8c2 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a8e1:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001a8e4:	85 c0                	test   eax,eax
c001a8e6:	74 da                	je     c001a8c2 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a8e8:	52                   	push   edx
c001a8e9:	31 d2                	xor    edx,edx
c001a8eb:	52                   	push   edx
c001a8ec:	50                   	push   eax
c001a8ed:	53                   	push   ebx
c001a8ee:	e8 a3 7f ff ff       	call   c0012896 <File::seek(unsigned long long)>
c001a8f3:	83 c4 10             	add    esp,0x10
c001a8f6:	85 c0                	test   eax,eax
c001a8f8:	75 c8                	jne    c001a8c2 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a8fa:	83 ec 0c             	sub    esp,0xc
c001a8fd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001a901:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001a905:	31 ed                	xor    ebp,ebp
c001a907:	0f af c2             	imul   eax,edx
c001a90a:	50                   	push   eax
c001a90b:	e8 0e 48 ff ff       	call   c000f11e <malloc>
c001a910:	89 34 24             	mov    DWORD PTR [esp],esi
c001a913:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a917:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001a919:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a91d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001a921:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001a925:	0f af c2             	imul   eax,edx
c001a928:	99                   	cdq    
c001a929:	52                   	push   edx
c001a92a:	50                   	push   eax
c001a92b:	53                   	push   ebx
c001a92c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a92f:	83 c4 20             	add    esp,0x20
c001a932:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a93a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001a942:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a94a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a952:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001a956:	0f 86 aa 00 00 00    	jbe    c001aa06 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001a95c:	0f b7 f5             	movzx  esi,bp
c001a95f:	6b f6 28             	imul   esi,esi,0x28
c001a962:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001a966:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a969:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a96d:	50                   	push   eax
c001a96e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a972:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001a976:	8b 16                	mov    edx,DWORD PTR [esi]
c001a978:	6b c0 28             	imul   eax,eax,0x28
c001a97b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001a97f:	89 d0                	mov    eax,edx
c001a981:	31 d2                	xor    edx,edx
c001a983:	52                   	push   edx
c001a984:	50                   	push   eax
c001a985:	53                   	push   ebx
c001a986:	e8 0b 7f ff ff       	call   c0012896 <File::seek(unsigned long long)>
c001a98b:	83 c4 0c             	add    esp,0xc
c001a98e:	6a 20                	push   0x20
c001a990:	6a 00                	push   0x0
c001a992:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001a996:	52                   	push   edx
c001a997:	e8 e1 5c fe ff       	call   c000067d <memset>
c001a99c:	58                   	pop    eax
c001a99d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a99f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001a9a3:	51                   	push   ecx
c001a9a4:	8d 54 24 40          	lea    edx,[esp+0x40]
c001a9a8:	52                   	push   edx
c001a9a9:	6a 00                	push   0x0
c001a9ab:	6a 1f                	push   0x1f
c001a9ad:	53                   	push   ebx
c001a9ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a9b1:	83 c4 18             	add    esp,0x18
c001a9b4:	68 86 84 02 c0       	push   0xc0028486
c001a9b9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001a9bd:	52                   	push   edx
c001a9be:	e8 aa 5d fe ff       	call   c000076d <strcmp>
c001a9c3:	83 c4 10             	add    esp,0x10
c001a9c6:	85 c0                	test   eax,eax
c001a9c8:	75 0f                	jne    c001a9d9 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001a9ca:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a9cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a9d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a9d9:	50                   	push   eax
c001a9da:	50                   	push   eax
c001a9db:	68 8e 84 02 c0       	push   0xc002848e
c001a9e0:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001a9e4:	50                   	push   eax
c001a9e5:	e8 83 5d fe ff       	call   c000076d <strcmp>
c001a9ea:	83 c4 10             	add    esp,0x10
c001a9ed:	85 c0                	test   eax,eax
c001a9ef:	75 0f                	jne    c001aa00 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001a9f1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a9f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a9f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a9fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa00:	45                   	inc    ebp
c001aa01:	e9 4c ff ff ff       	jmp    c001a952 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001aa06:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001aa0b:	75 10                	jne    c001aa1d <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001aa0d:	83 ec 0c             	sub    esp,0xc
c001aa10:	68 96 84 02 c0       	push   0xc0028496
c001aa15:	e8 a9 df ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001aa1a:	83 c4 10             	add    esp,0x10
c001aa1d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa22:	75 10                	jne    c001aa34 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001aa24:	83 ec 0c             	sub    esp,0xc
c001aa27:	68 96 84 02 c0       	push   0xc0028496
c001aa2c:	e8 92 df ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001aa31:	83 c4 10             	add    esp,0x10
c001aa34:	31 d2                	xor    edx,edx
c001aa36:	50                   	push   eax
c001aa37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa3b:	52                   	push   edx
c001aa3c:	50                   	push   eax
c001aa3d:	53                   	push   ebx
c001aa3e:	e8 53 7e ff ff       	call   c0012896 <File::seek(unsigned long long)>
c001aa43:	5a                   	pop    edx
c001aa44:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aa48:	e8 d1 46 ff ff       	call   c000f11e <malloc>
c001aa4d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001aa55:	89 c1                	mov    ecx,eax
c001aa57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa5f:	5e                   	pop    esi
c001aa60:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa62:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001aa66:	55                   	push   ebp
c001aa67:	51                   	push   ecx
c001aa68:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001aa6c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa70:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa74:	53                   	push   ebx
c001aa75:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aa78:	83 c4 14             	add    esp,0x14
c001aa7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aa7f:	e8 9a 46 ff ff       	call   c000f11e <malloc>
c001aa84:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001aa87:	89 c6                	mov    esi,eax
c001aa89:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa8b:	56                   	push   esi
c001aa8c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa90:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa94:	53                   	push   ebx
c001aa95:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aa98:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aa9c:	8b 15 20 b9 02 c0    	mov    edx,DWORD PTR ds:0xc002b920
c001aaa2:	83 c4 1c             	add    esp,0x1c
c001aaa5:	c1 e8 04             	shr    eax,0x4
c001aaa8:	89 04 95 a0 b7 02 c0 	mov    DWORD PTR [edx*4-0x3ffd4860],eax
c001aaaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aab3:	31 d2                	xor    edx,edx
c001aab5:	52                   	push   edx
c001aab6:	50                   	push   eax
c001aab7:	53                   	push   ebx
c001aab8:	e8 d9 7d ff ff       	call   c0012896 <File::seek(unsigned long long)>
c001aabd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001aac0:	31 d2                	xor    edx,edx
c001aac2:	56                   	push   esi
c001aac3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aac7:	52                   	push   edx
c001aac8:	50                   	push   eax
c001aac9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aacb:	53                   	push   ebx
c001aacc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aacf:	83 c4 14             	add    esp,0x14
c001aad2:	53                   	push   ebx
c001aad3:	e8 5e 7d ff ff       	call   c0012836 <File::close()>
c001aad8:	5d                   	pop    ebp
c001aad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aadd:	e8 4c 46 ff ff       	call   c000f12e <free>
c001aae2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001aae5:	e8 44 46 ff ff       	call   c000f12e <free>
c001aaea:	a1 20 b9 02 c0       	mov    eax,ds:0xc002b920
c001aaef:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001aaf3:	8d 50 01             	lea    edx,[eax+0x1]
c001aaf6:	89 0c 85 a0 b8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4760],ecx
c001aafd:	89 15 20 b9 02 c0    	mov    DWORD PTR ds:0xc002b920,edx
c001ab03:	89 34 85 20 b8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd47e0],esi
c001ab0a:	83 c4 10             	add    esp,0x10
c001ab0d:	b2 01                	mov    dl,0x1
c001ab0f:	83 c4 5c             	add    esp,0x5c
c001ab12:	88 d0                	mov    al,dl
c001ab14:	5b                   	pop    ebx
c001ab15:	5e                   	pop    esi
c001ab16:	5f                   	pop    edi
c001ab17:	5d                   	pop    ebp
c001ab18:	c3                   	ret    

c001ab19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ab19:	55                   	push   ebp
c001ab1a:	57                   	push   edi
c001ab1b:	56                   	push   esi
c001ab1c:	53                   	push   ebx
c001ab1d:	81 ec 68 03 00 00    	sub    esp,0x368
c001ab23:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ab2a:	8b 1d 74 b9 02 c0    	mov    ebx,DWORD PTR ds:0xc002b974
c001ab30:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ab34:	68 14 01 00 00       	push   0x114
c001ab39:	e8 18 76 ff ff       	call   c0012156 <operator new(unsigned long)>
c001ab3e:	83 c4 0c             	add    esp,0xc
c001ab41:	89 c7                	mov    edi,eax
c001ab43:	53                   	push   ebx
c001ab44:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ab4b:	50                   	push   eax
c001ab4c:	e8 23 7c ff ff       	call   c0012774 <File::File(char const*, Process*)>
c001ab51:	5e                   	pop    esi
c001ab52:	5d                   	pop    ebp
c001ab53:	6a 01                	push   0x1
c001ab55:	57                   	push   edi
c001ab56:	e8 7d 7c ff ff       	call   c00127d8 <File::open(FileOpenMode)>
c001ab5b:	83 c4 10             	add    esp,0x10
c001ab5e:	85 c0                	test   eax,eax
c001ab60:	0f 85 10 07 00 00    	jne    c001b276 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ab66:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ab6e:	83 ec 0c             	sub    esp,0xc
c001ab71:	6a 34                	push   0x34
c001ab73:	e8 a6 45 ff ff       	call   c000f11e <malloc>
c001ab78:	5b                   	pop    ebx
c001ab79:	89 c5                	mov    ebp,eax
c001ab7b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ab7f:	8b 07                	mov    eax,DWORD PTR [edi]
c001ab81:	53                   	push   ebx
c001ab82:	55                   	push   ebp
c001ab83:	6a 00                	push   0x0
c001ab85:	6a 34                	push   0x34
c001ab87:	57                   	push   edi
c001ab88:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab8b:	83 c4 20             	add    esp,0x20
c001ab8e:	85 c0                	test   eax,eax
c001ab90:	0f 85 e0 06 00 00    	jne    c001b276 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ab96:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c001ab9d:	0f 85 d3 06 00 00    	jne    c001b276 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001aba3:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001aba6:	85 c0                	test   eax,eax
c001aba8:	0f 84 c8 06 00 00    	je     c001b276 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abae:	31 d2                	xor    edx,edx
c001abb0:	51                   	push   ecx
c001abb1:	52                   	push   edx
c001abb2:	50                   	push   eax
c001abb3:	57                   	push   edi
c001abb4:	e8 dd 7c ff ff       	call   c0012896 <File::seek(unsigned long long)>
c001abb9:	83 c4 10             	add    esp,0x10
c001abbc:	85 c0                	test   eax,eax
c001abbe:	0f 85 b2 06 00 00    	jne    c001b276 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abc4:	83 ec 0c             	sub    esp,0xc
c001abc7:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001abca:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001abce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001abd2:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001abd6:	0f af c2             	imul   eax,edx
c001abd9:	50                   	push   eax
c001abda:	e8 3f 45 ff ff       	call   c000f11e <malloc>
c001abdf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abe2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abe6:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001abe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abec:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001abf0:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001abf4:	0f af c2             	imul   eax,edx
c001abf7:	99                   	cdq    
c001abf8:	52                   	push   edx
c001abf9:	50                   	push   eax
c001abfa:	57                   	push   edi
c001abfb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001abfe:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001ac01:	83 c4 20             	add    esp,0x20
c001ac04:	85 c0                	test   eax,eax
c001ac06:	0f 84 6a 06 00 00    	je     c001b276 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac0c:	52                   	push   edx
c001ac0d:	31 d2                	xor    edx,edx
c001ac0f:	52                   	push   edx
c001ac10:	50                   	push   eax
c001ac11:	57                   	push   edi
c001ac12:	e8 7f 7c ff ff       	call   c0012896 <File::seek(unsigned long long)>
c001ac17:	83 c4 10             	add    esp,0x10
c001ac1a:	85 c0                	test   eax,eax
c001ac1c:	0f 85 54 06 00 00    	jne    c001b276 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac22:	83 ec 0c             	sub    esp,0xc
c001ac25:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ac29:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ac2d:	31 f6                	xor    esi,esi
c001ac2f:	0f af c2             	imul   eax,edx
c001ac32:	50                   	push   eax
c001ac33:	e8 e6 44 ff ff       	call   c000f11e <malloc>
c001ac38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac3b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ac3f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ac41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac45:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ac49:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ac4d:	0f af c2             	imul   eax,edx
c001ac50:	99                   	cdq    
c001ac51:	52                   	push   edx
c001ac52:	50                   	push   eax
c001ac53:	57                   	push   edi
c001ac54:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ac57:	83 c4 20             	add    esp,0x20
c001ac5a:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c001ac5e:	0f 86 af 00 00 00    	jbe    c001ad13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c001ac64:	0f b7 de             	movzx  ebx,si
c001ac67:	c1 e3 05             	shl    ebx,0x5
c001ac6a:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001ac6e:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001ac71:	0f 85 96 00 00 00    	jne    c001ad0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c001ac77:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ac7a:	31 d2                	xor    edx,edx
c001ac7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac80:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ac83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac87:	50                   	push   eax
c001ac88:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001ac8b:	52                   	push   edx
c001ac8c:	50                   	push   eax
c001ac8d:	57                   	push   edi
c001ac8e:	e8 03 7c ff ff       	call   c0012896 <File::seek(unsigned long long)>
c001ac93:	83 c4 10             	add    esp,0x10
c001ac96:	85 c0                	test   eax,eax
c001ac98:	0f 85 d8 05 00 00    	jne    c001b276 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac9e:	52                   	push   edx
c001ac9f:	52                   	push   edx
c001aca0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001aca4:	68 b0 84 02 c0       	push   0xc00284b0
c001aca9:	e8 97 75 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001acae:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c001acb5:	31 d2                	xor    edx,edx
c001acb7:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c001acbb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001acbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001acc3:	59                   	pop    ecx
c001acc4:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001acc6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001accd:	50                   	push   eax
c001acce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001acd2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001acd6:	52                   	push   edx
c001acd7:	50                   	push   eax
c001acd8:	57                   	push   edi
c001acd9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001acdc:	83 c4 18             	add    esp,0x18
c001acdf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ace2:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ace5:	50                   	push   eax
c001ace6:	68 d4 84 02 c0       	push   0xc00284d4
c001aceb:	e8 55 75 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001acf0:	83 c4 0c             	add    esp,0xc
c001acf3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001acf6:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001acf9:	50                   	push   eax
c001acfa:	6a 00                	push   0x0
c001acfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad00:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ad04:	50                   	push   eax
c001ad05:	e8 73 59 fe ff       	call   c000067d <memset>
c001ad0a:	83 c4 10             	add    esp,0x10
c001ad0d:	46                   	inc    esi
c001ad0e:	e9 47 ff ff ff       	jmp    c001ac5a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c001ad13:	31 db                	xor    ebx,ebx
c001ad15:	50                   	push   eax
c001ad16:	68 00 01 00 00       	push   0x100
c001ad1b:	6a 00                	push   0x0
c001ad1d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ad21:	50                   	push   eax
c001ad22:	e8 56 59 fe ff       	call   c000067d <memset>
c001ad27:	83 c4 0c             	add    esp,0xc
c001ad2a:	68 00 01 00 00       	push   0x100
c001ad2f:	6a 00                	push   0x0
c001ad31:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ad38:	50                   	push   eax
c001ad39:	e8 3f 59 fe ff       	call   c000067d <memset>
c001ad3e:	83 c4 10             	add    esp,0x10
c001ad41:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ad49:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ad51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ad59:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ad61:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ad69:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c001ad6d:	0f 86 2f 01 00 00    	jbe    c001aea2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c001ad73:	0f b7 f3             	movzx  esi,bx
c001ad76:	6b f6 28             	imul   esi,esi,0x28
c001ad79:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001ad7d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ad80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad84:	50                   	push   eax
c001ad85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad89:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001ad8d:	8b 06                	mov    eax,DWORD PTR [esi]
c001ad8f:	6b d2 28             	imul   edx,edx,0x28
c001ad92:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001ad96:	31 d2                	xor    edx,edx
c001ad98:	52                   	push   edx
c001ad99:	50                   	push   eax
c001ad9a:	57                   	push   edi
c001ad9b:	e8 f6 7a ff ff       	call   c0012896 <File::seek(unsigned long long)>
c001ada0:	83 c4 0c             	add    esp,0xc
c001ada3:	6a 20                	push   0x20
c001ada5:	6a 00                	push   0x0
c001ada7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001adae:	51                   	push   ecx
c001adaf:	e8 c9 58 fe ff       	call   c000067d <memset>
c001adb4:	58                   	pop    eax
c001adb5:	8b 07                	mov    eax,DWORD PTR [edi]
c001adb7:	8d 54 24 58          	lea    edx,[esp+0x58]
c001adbb:	52                   	push   edx
c001adbc:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001adc3:	51                   	push   ecx
c001adc4:	6a 00                	push   0x0
c001adc6:	6a 1f                	push   0x1f
c001adc8:	57                   	push   edi
c001adc9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001adcc:	83 c4 1c             	add    esp,0x1c
c001adcf:	6a 09                	push   0x9
c001add1:	68 f1 84 02 c0       	push   0xc00284f1
c001add6:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001addd:	51                   	push   ecx
c001adde:	e8 01 58 fe ff       	call   c00005e4 <memcmp>
c001ade3:	83 c4 10             	add    esp,0x10
c001ade6:	85 c0                	test   eax,eax
c001ade8:	75 21                	jne    c001ae0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c001adea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001adf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adf6:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001adfa:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001adfd:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001ae04:	89 c8                	mov    eax,ecx
c001ae06:	40                   	inc    eax
c001ae07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae0b:	50                   	push   eax
c001ae0c:	6a 09                	push   0x9
c001ae0e:	68 fb 84 02 c0       	push   0xc00284fb
c001ae13:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ae1a:	50                   	push   eax
c001ae1b:	e8 c4 57 fe ff       	call   c00005e4 <memcmp>
c001ae20:	83 c4 10             	add    esp,0x10
c001ae23:	85 c0                	test   eax,eax
c001ae25:	75 21                	jne    c001ae48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c001ae27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae2b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ae2f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae33:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ae37:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae3a:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001ae41:	89 c8                	mov    eax,ecx
c001ae43:	40                   	inc    eax
c001ae44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae48:	50                   	push   eax
c001ae49:	50                   	push   eax
c001ae4a:	68 86 84 02 c0       	push   0xc0028486
c001ae4f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ae56:	50                   	push   eax
c001ae57:	e8 11 59 fe ff       	call   c000076d <strcmp>
c001ae5c:	83 c4 10             	add    esp,0x10
c001ae5f:	85 c0                	test   eax,eax
c001ae61:	75 0f                	jne    c001ae72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c001ae63:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ae6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae72:	50                   	push   eax
c001ae73:	50                   	push   eax
c001ae74:	68 8e 84 02 c0       	push   0xc002848e
c001ae79:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ae80:	50                   	push   eax
c001ae81:	e8 e7 58 fe ff       	call   c000076d <strcmp>
c001ae86:	83 c4 10             	add    esp,0x10
c001ae89:	85 c0                	test   eax,eax
c001ae8b:	75 0f                	jne    c001ae9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c001ae8d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae90:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae98:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae9c:	43                   	inc    ebx
c001ae9d:	e9 c7 fe ff ff       	jmp    c001ad69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c001aea2:	31 d2                	xor    edx,edx
c001aea4:	50                   	push   eax
c001aea5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aea9:	52                   	push   edx
c001aeaa:	50                   	push   eax
c001aeab:	57                   	push   edi
c001aeac:	e8 e5 79 ff ff       	call   c0012896 <File::seek(unsigned long long)>
c001aeb1:	5a                   	pop    edx
c001aeb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aeb6:	e8 63 42 ff ff       	call   c000f11e <malloc>
c001aebb:	31 d2                	xor    edx,edx
c001aebd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001aec1:	59                   	pop    ecx
c001aec2:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001aec4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001aec8:	53                   	push   ebx
c001aec9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aecd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aed1:	52                   	push   edx
c001aed2:	50                   	push   eax
c001aed3:	57                   	push   edi
c001aed4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001aed7:	83 c4 14             	add    esp,0x14
c001aeda:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aede:	e8 3b 42 ff ff       	call   c000f11e <malloc>
c001aee3:	31 d2                	xor    edx,edx
c001aee5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aee9:	83 c4 0c             	add    esp,0xc
c001aeec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aef0:	52                   	push   edx
c001aef1:	50                   	push   eax
c001aef2:	57                   	push   edi
c001aef3:	e8 9e 79 ff ff       	call   c0012896 <File::seek(unsigned long long)>
c001aef8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aefb:	31 d2                	xor    edx,edx
c001aefd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af01:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001af03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af07:	52                   	push   edx
c001af08:	50                   	push   eax
c001af09:	57                   	push   edi
c001af0a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af0d:	83 c4 20             	add    esp,0x20
c001af10:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001af18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001af1c:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001af20:	0f 84 54 03 00 00    	je     c001b27a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c001af26:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001af2d:	31 d2                	xor    edx,edx
c001af2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af33:	c1 e8 03             	shr    eax,0x3
c001af36:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001af3a:	50                   	push   eax
c001af3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af3f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001af43:	52                   	push   edx
c001af44:	50                   	push   eax
c001af45:	57                   	push   edi
c001af46:	e8 4b 79 ff ff       	call   c0012896 <File::seek(unsigned long long)>
c001af4b:	58                   	pop    eax
c001af4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af50:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001af57:	e8 c2 41 ff ff       	call   c000f11e <malloc>
c001af5c:	31 d2                	xor    edx,edx
c001af5e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af62:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001af64:	58                   	pop    eax
c001af65:	8d 44 24 58          	lea    eax,[esp+0x58]
c001af69:	50                   	push   eax
c001af6a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001af6e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af72:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001af79:	52                   	push   edx
c001af7a:	50                   	push   eax
c001af7b:	57                   	push   edi
c001af7c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af7f:	83 c4 20             	add    esp,0x20
c001af82:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001af8a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001af8e:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001af92:	0f 8d c6 02 00 00    	jge    c001b25e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c001af98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001af9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afa0:	31 db                	xor    ebx,ebx
c001afa2:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001afa5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001afa9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afad:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001afb1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001afb5:	c1 e8 08             	shr    eax,0x8
c001afb8:	89 c6                	mov    esi,eax
c001afba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001afbe:	c1 e6 04             	shl    esi,0x4
c001afc1:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001afc5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001afc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001afcc:	85 c0                	test   eax,eax
c001afce:	0f 85 17 01 00 00    	jne    c001b0eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001afd4:	83 ec 0c             	sub    esp,0xc
c001afd7:	b3 01                	mov    bl,0x1
c001afd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afdd:	03 06                	add    eax,DWORD PTR [esi]
c001afdf:	50                   	push   eax
c001afe0:	e8 24 f8 ff ff       	call   c001a809 <Thr::getAddressOfKernelSymbol(char const*)>
c001afe5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001afe9:	83 c4 10             	add    esp,0x10
c001afec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001aff1:	0f 85 f4 00 00 00    	jne    c001b0eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001aff7:	50                   	push   eax
c001aff8:	50                   	push   eax
c001aff9:	68 05 85 02 c0       	push   0xc0028505
c001affe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b002:	03 06                	add    eax,DWORD PTR [esi]
c001b004:	50                   	push   eax
c001b005:	e8 63 57 fe ff       	call   c000076d <strcmp>
c001b00a:	83 c4 10             	add    esp,0x10
c001b00d:	85 c0                	test   eax,eax
c001b00f:	75 0a                	jne    c001b01b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001b011:	b8 5c 34 02 c0       	mov    eax,0xc002345c
c001b016:	e9 ca 00 00 00       	jmp    c001b0e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b01b:	50                   	push   eax
c001b01c:	50                   	push   eax
c001b01d:	68 0f 85 02 c0       	push   0xc002850f
c001b022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b026:	03 06                	add    eax,DWORD PTR [esi]
c001b028:	50                   	push   eax
c001b029:	e8 3f 57 fe ff       	call   c000076d <strcmp>
c001b02e:	83 c4 10             	add    esp,0x10
c001b031:	85 c0                	test   eax,eax
c001b033:	75 0a                	jne    c001b03f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001b035:	b8 90 31 02 c0       	mov    eax,0xc0023190
c001b03a:	e9 a6 00 00 00       	jmp    c001b0e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b03f:	53                   	push   ebx
c001b040:	53                   	push   ebx
c001b041:	68 18 85 02 c0       	push   0xc0028518
c001b046:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b04a:	03 06                	add    eax,DWORD PTR [esi]
c001b04c:	50                   	push   eax
c001b04d:	e8 1b 57 fe ff       	call   c000076d <strcmp>
c001b052:	83 c4 10             	add    esp,0x10
c001b055:	85 c0                	test   eax,eax
c001b057:	75 0a                	jne    c001b063 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001b059:	b8 5c 35 02 c0       	mov    eax,0xc002355c
c001b05e:	e9 82 00 00 00       	jmp    c001b0e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b063:	51                   	push   ecx
c001b064:	51                   	push   ecx
c001b065:	68 22 85 02 c0       	push   0xc0028522
c001b06a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b06e:	03 06                	add    eax,DWORD PTR [esi]
c001b070:	50                   	push   eax
c001b071:	e8 f7 56 fe ff       	call   c000076d <strcmp>
c001b076:	83 c4 10             	add    esp,0x10
c001b079:	85 c0                	test   eax,eax
c001b07b:	74 63                	je     c001b0e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c001b07d:	50                   	push   eax
c001b07e:	50                   	push   eax
c001b07f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b083:	03 06                	add    eax,DWORD PTR [esi]
c001b085:	50                   	push   eax
c001b086:	68 2b 85 02 c0       	push   0xc002852b
c001b08b:	e8 b5 71 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001b090:	58                   	pop    eax
c001b091:	5a                   	pop    edx
c001b092:	68 45 85 02 c0       	push   0xc0028545
c001b097:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b09e:	53                   	push   ebx
c001b09f:	e8 78 56 fe ff       	call   c000071c <strcpy>
c001b0a4:	59                   	pop    ecx
c001b0a5:	58                   	pop    eax
c001b0a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0aa:	03 06                	add    eax,DWORD PTR [esi]
c001b0ac:	50                   	push   eax
c001b0ad:	53                   	push   ebx
c001b0ae:	e8 20 57 fe ff       	call   c00007d3 <strcat>
c001b0b3:	58                   	pop    eax
c001b0b4:	5a                   	pop    edx
c001b0b5:	68 db 85 02 c0       	push   0xc00285db
c001b0ba:	53                   	push   ebx
c001b0bb:	e8 13 57 fe ff       	call   c00007d3 <strcat>
c001b0c0:	83 c4 10             	add    esp,0x10
c001b0c3:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b0c8:	0f 84 4b 01 00 00    	je     c001b219 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b0ce:	83 ec 0c             	sub    esp,0xc
c001b0d1:	53                   	push   ebx
c001b0d2:	e8 ec d8 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001b0d7:	83 c4 10             	add    esp,0x10
c001b0da:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b0de:	eb 0b                	jmp    c001b0eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b0e0:	b8 dc 32 02 c0       	mov    eax,0xc00232dc
c001b0e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b0e9:	b3 01                	mov    bl,0x1
c001b0eb:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b0f0:	0f 85 80 00 00 00    	jne    c001b176 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001b0f6:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b0fd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b101:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b105:	01 ce                	add    esi,ecx
c001b107:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b10f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b111:	0f 94 c2             	sete   dl
c001b114:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b11c:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b121:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b125:	84 db                	test   bl,bl
c001b127:	74 31                	je     c001b15a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001b129:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b12d:	01 c3                	add    ebx,eax
c001b12f:	84 d2                	test   dl,dl
c001b131:	75 0a                	jne    c001b13d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001b133:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b137:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b13b:	76 32                	jbe    c001b16f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b13d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b142:	0f 84 d1 00 00 00    	je     c001b219 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b148:	83 ec 0c             	sub    esp,0xc
c001b14b:	68 5c 85 02 c0       	push   0xc002855c
c001b150:	e8 6e d8 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001b155:	83 c4 10             	add    esp,0x10
c001b158:	eb 15                	jmp    c001b16f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b15a:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001b15d:	84 d2                	test   dl,dl
c001b15f:	75 0e                	jne    c001b16f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b161:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b165:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b169:	77 04                	ja     c001b16f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b16b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001b16f:	89 1e                	mov    DWORD PTR [esi],ebx
c001b171:	e9 df 00 00 00       	jmp    c001b255 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b176:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001b17b:	75 6e                	jne    c001b1eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001b17d:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001b184:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001b188:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001b18c:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b194:	74 17                	je     c001b1ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b196:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b19e:	74 0d                	je     c001b1ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b1a0:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b1a4:	83 e8 04             	sub    eax,0x4
c001b1a7:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b1ab:	76 17                	jbe    c001b1c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001b1ad:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b1b2:	74 65                	je     c001b219 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b1b4:	83 ec 0c             	sub    esp,0xc
c001b1b7:	68 78 85 02 c0       	push   0xc0028578
c001b1bc:	e8 02 d8 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001b1c1:	83 c4 10             	add    esp,0x10
c001b1c4:	8b 16                	mov    edx,DWORD PTR [esi]
c001b1c6:	84 db                	test   bl,bl
c001b1c8:	74 13                	je     c001b1dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c001b1ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b1ce:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001b1d5:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b1d9:	01 d0                	add    eax,edx
c001b1db:	eb 06                	jmp    c001b1e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c001b1dd:	89 d0                	mov    eax,edx
c001b1df:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b1e3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b1e7:	89 06                	mov    DWORD PTR [esi],eax
c001b1e9:	eb 6a                	jmp    c001b255 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b1eb:	50                   	push   eax
c001b1ec:	50                   	push   eax
c001b1ed:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001b1f2:	50                   	push   eax
c001b1f3:	68 94 85 02 c0       	push   0xc0028594
c001b1f8:	e8 48 70 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001b1fd:	83 c4 10             	add    esp,0x10
c001b200:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b205:	74 12                	je     c001b219 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b207:	83 ec 0c             	sub    esp,0xc
c001b20a:	68 9f 85 02 c0       	push   0xc002859f
c001b20f:	e8 af d7 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001b214:	83 c4 10             	add    esp,0x10
c001b217:	eb 3c                	jmp    c001b255 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b219:	83 ec 0c             	sub    esp,0xc
c001b21c:	57                   	push   edi
c001b21d:	e8 14 76 ff ff       	call   c0012836 <File::close()>
c001b222:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b225:	8b 07                	mov    eax,DWORD PTR [edi]
c001b227:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b22a:	59                   	pop    ecx
c001b22b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b22f:	e8 fa 3e ff ff       	call   c000f12e <free>
c001b234:	5b                   	pop    ebx
c001b235:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b239:	e8 f0 3e ff ff       	call   c000f12e <free>
c001b23e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b241:	e8 e8 3e ff ff       	call   c000f12e <free>
c001b246:	5e                   	pop    esi
c001b247:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b24b:	e8 de 3e ff ff       	call   c000f12e <free>
c001b250:	83 c4 10             	add    esp,0x10
c001b253:	eb 21                	jmp    c001b276 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b255:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001b259:	e9 2c fd ff ff       	jmp    c001af8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001b25e:	83 ec 0c             	sub    esp,0xc
c001b261:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b265:	e8 c4 3e ff ff       	call   c000f12e <free>
c001b26a:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001b26e:	83 c4 10             	add    esp,0x10
c001b271:	e9 a2 fc ff ff       	jmp    c001af18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c001b276:	31 c0                	xor    eax,eax
c001b278:	eb 32                	jmp    c001b2ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001b27a:	83 ec 0c             	sub    esp,0xc
c001b27d:	57                   	push   edi
c001b27e:	e8 b3 75 ff ff       	call   c0012836 <File::close()>
c001b283:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b286:	8b 07                	mov    eax,DWORD PTR [edi]
c001b288:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b28b:	58                   	pop    eax
c001b28c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b290:	e8 99 3e ff ff       	call   c000f12e <free>
c001b295:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b298:	e8 91 3e ff ff       	call   c000f12e <free>
c001b29d:	5a                   	pop    edx
c001b29e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b2a2:	e8 87 3e ff ff       	call   c000f12e <free>
c001b2a7:	83 c4 10             	add    esp,0x10
c001b2aa:	b0 01                	mov    al,0x1
c001b2ac:	81 c4 5c 03 00 00    	add    esp,0x35c
c001b2b2:	5b                   	pop    ebx
c001b2b3:	5e                   	pop    esi
c001b2b4:	5f                   	pop    edi
c001b2b5:	5d                   	pop    ebp
c001b2b6:	c3                   	ret    

c001b2b7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001b2b7:	56                   	push   esi
c001b2b8:	31 d2                	xor    edx,edx
c001b2ba:	53                   	push   ebx
c001b2bb:	8b 1d 80 b1 02 c0    	mov    ebx,DWORD PTR ds:0xc002b180
c001b2c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b2c5:	39 d3                	cmp    ebx,edx
c001b2c7:	7e 1b                	jle    c001b2e4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001b2c9:	8b 04 95 a0 b3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4c60]
c001b2d0:	39 c8                	cmp    eax,ecx
c001b2d2:	77 0d                	ja     c001b2e1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001b2d4:	8b 34 95 a0 b1 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4e60]
c001b2db:	01 c6                	add    esi,eax
c001b2dd:	39 ce                	cmp    esi,ecx
c001b2df:	77 05                	ja     c001b2e6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001b2e1:	42                   	inc    edx
c001b2e2:	eb e1                	jmp    c001b2c5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001b2e4:	31 c0                	xor    eax,eax
c001b2e6:	5b                   	pop    ebx
c001b2e7:	5e                   	pop    esi
c001b2e8:	c3                   	ret    

c001b2e9 <Thr::getDriverNameFromAddress(unsigned long)>:
c001b2e9:	53                   	push   ebx
c001b2ea:	31 c0                	xor    eax,eax
c001b2ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b2f0:	8b 1d 80 b1 02 c0    	mov    ebx,DWORD PTR ds:0xc002b180
c001b2f6:	39 c3                	cmp    ebx,eax
c001b2f8:	7e 22                	jle    c001b31c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001b2fa:	8b 14 85 a0 b3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4c60]
c001b301:	39 ca                	cmp    edx,ecx
c001b303:	77 14                	ja     c001b319 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b305:	03 14 85 a0 b1 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4e60]
c001b30c:	39 ca                	cmp    edx,ecx
c001b30e:	76 09                	jbe    c001b319 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b310:	8b 04 85 a0 b5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4a60]
c001b317:	eb 05                	jmp    c001b31e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001b319:	40                   	inc    eax
c001b31a:	eb da                	jmp    c001b2f6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001b31c:	31 c0                	xor    eax,eax
c001b31e:	5b                   	pop    ebx
c001b31f:	c3                   	ret    

c001b320 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001b320:	53                   	push   ebx
c001b321:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b325:	53                   	push   ebx
c001b326:	e8 8c ff ff ff       	call   c001b2b7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001b32b:	5a                   	pop    edx
c001b32c:	31 d2                	xor    edx,edx
c001b32e:	85 c0                	test   eax,eax
c001b330:	74 04                	je     c001b336 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001b332:	89 da                	mov    edx,ebx
c001b334:	29 c2                	sub    edx,eax
c001b336:	89 d0                	mov    eax,edx
c001b338:	5b                   	pop    ebx
c001b339:	c3                   	ret    

c001b33a <Thr::loadDLL(char const*, bool)>:
c001b33a:	55                   	push   ebp
c001b33b:	57                   	push   edi
c001b33c:	56                   	push   esi
c001b33d:	53                   	push   ebx
c001b33e:	81 ec 34 01 00 00    	sub    esp,0x134
c001b344:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001b34b:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001b352:	56                   	push   esi
c001b353:	68 b7 85 02 c0       	push   0xc00285b7
c001b358:	e8 e8 6e ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001b35d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b364:	e8 ed 6d ff ff       	call   c0012156 <operator new(unsigned long)>
c001b369:	83 c4 0c             	add    esp,0xc
c001b36c:	89 c3                	mov    ebx,eax
c001b36e:	ff 35 74 b9 02 c0    	push   DWORD PTR ds:0xc002b974
c001b374:	56                   	push   esi
c001b375:	50                   	push   eax
c001b376:	e8 f9 73 ff ff       	call   c0012774 <File::File(char const*, Process*)>
c001b37b:	83 c4 0c             	add    esp,0xc
c001b37e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001b382:	50                   	push   eax
c001b383:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b387:	50                   	push   eax
c001b388:	53                   	push   ebx
c001b389:	e8 f6 76 ff ff       	call   c0012a84 <File::stat(unsigned long long*, bool*)>
c001b38e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b390:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b393:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b396:	83 c4 10             	add    esp,0x10
c001b399:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001b39e:	75 0a                	jne    c001b3aa <Thr::loadDLL(char const*, bool)+0x70>
c001b3a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b3a4:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001b3a8:	75 3c                	jne    c001b3e6 <Thr::loadDLL(char const*, bool)+0xac>
c001b3aa:	89 e8                	mov    eax,ebp
c001b3ac:	84 c0                	test   al,al
c001b3ae:	0f 84 3d 01 00 00    	je     c001b4f1 <Thr::loadDLL(char const*, bool)+0x1b7>
c001b3b4:	50                   	push   eax
c001b3b5:	50                   	push   eax
c001b3b6:	68 c8 85 02 c0       	push   0xc00285c8
c001b3bb:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001b3bf:	53                   	push   ebx
c001b3c0:	e8 57 53 fe ff       	call   c000071c <strcpy>
c001b3c5:	58                   	pop    eax
c001b3c6:	5a                   	pop    edx
c001b3c7:	56                   	push   esi
c001b3c8:	53                   	push   ebx
c001b3c9:	e8 05 54 fe ff       	call   c00007d3 <strcat>
c001b3ce:	59                   	pop    ecx
c001b3cf:	5f                   	pop    edi
c001b3d0:	68 db 85 02 c0       	push   0xc00285db
c001b3d5:	53                   	push   ebx
c001b3d6:	e8 f8 53 fe ff       	call   c00007d3 <strcat>
c001b3db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3de:	e8 e0 d5 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001b3e3:	83 c4 10             	add    esp,0x10
c001b3e6:	e8 06 60 ff ff       	call   c00113f1 <Virt::getAKernelVAS()>
c001b3eb:	51                   	push   ecx
c001b3ec:	6a 03                	push   0x3
c001b3ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001b3f2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b3f6:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001b3fc:	83 d3 00             	adc    ebx,0x0
c001b3ff:	89 ca                	mov    edx,ecx
c001b401:	89 d1                	mov    ecx,edx
c001b403:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001b407:	51                   	push   ecx
c001b408:	50                   	push   eax
c001b409:	e8 14 66 ff ff       	call   c0011a22 <VAS::allocatePages(int, int)>
c001b40e:	89 34 24             	mov    DWORD PTR [esp],esi
c001b411:	89 c3                	mov    ebx,eax
c001b413:	e8 82 52 fe ff       	call   c000069a <strlen>
c001b418:	8b 3d 80 b1 02 c0    	mov    edi,DWORD PTR ds:0xc002b180
c001b41e:	40                   	inc    eax
c001b41f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b422:	e8 f7 3c ff ff       	call   c000f11e <malloc>
c001b427:	89 04 bd a0 b5 02 c0 	mov    DWORD PTR [edi*4-0x3ffd4a60],eax
c001b42e:	5f                   	pop    edi
c001b42f:	58                   	pop    eax
c001b430:	a1 80 b1 02 c0       	mov    eax,ds:0xc002b180
c001b435:	56                   	push   esi
c001b436:	ff 34 85 a0 b5 02 c0 	push   DWORD PTR [eax*4-0x3ffd4a60]
c001b43d:	e8 da 52 fe ff       	call   c000071c <strcpy>
c001b442:	a1 80 b1 02 c0       	mov    eax,ds:0xc002b180
c001b447:	8d 50 01             	lea    edx,[eax+0x1]
c001b44a:	89 1c 85 a0 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4c60],ebx
c001b451:	89 15 80 b1 02 c0    	mov    DWORD PTR ds:0xc002b180,edx
c001b457:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b45b:	83 c4 0c             	add    esp,0xc
c001b45e:	89 14 85 a0 b1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4e60],edx
c001b465:	6a 01                	push   0x1
c001b467:	53                   	push   ebx
c001b468:	56                   	push   esi
c001b469:	e8 ab f6 ff ff       	call   c001ab19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001b46e:	83 c4 10             	add    esp,0x10
c001b471:	89 c7                	mov    edi,eax
c001b473:	fe c8                	dec    al
c001b475:	74 16                	je     c001b48d <Thr::loadDLL(char const*, bool)+0x153>
c001b477:	89 e8                	mov    eax,ebp
c001b479:	84 c0                	test   al,al
c001b47b:	74 10                	je     c001b48d <Thr::loadDLL(char const*, bool)+0x153>
c001b47d:	83 ec 0c             	sub    esp,0xc
c001b480:	68 dd 85 02 c0       	push   0xc00285dd
c001b485:	e8 39 d5 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001b48a:	83 c4 10             	add    esp,0x10
c001b48d:	31 f6                	xor    esi,esi
c001b48f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b493:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b497:	05 ff 0f 00 00       	add    eax,0xfff
c001b49c:	83 d2 00             	adc    edx,0x0
c001b49f:	0f ac d0 0c          	shrd   eax,edx,0xc
c001b4a3:	c1 ea 0c             	shr    edx,0xc
c001b4a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b4ae:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001b4b2:	ba 00 00 00 00       	mov    edx,0x0
c001b4b7:	89 d0                	mov    eax,edx
c001b4b9:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001b4bd:	73 2c                	jae    c001b4eb <Thr::loadDLL(char const*, bool)+0x1b1>
c001b4bf:	e8 2d 5f ff ff       	call   c00113f1 <Virt::getAKernelVAS()>
c001b4c4:	89 f5                	mov    ebp,esi
c001b4c6:	c1 e5 0c             	shl    ebp,0xc
c001b4c9:	52                   	push   edx
c001b4ca:	01 dd                	add    ebp,ebx
c001b4cc:	52                   	push   edx
c001b4cd:	55                   	push   ebp
c001b4ce:	50                   	push   eax
c001b4cf:	e8 c8 60 ff ff       	call   c001159c <VAS::getPageTableEntry(unsigned long)>
c001b4d4:	83 c4 10             	add    esp,0x10
c001b4d7:	f6 00 60             	test   BYTE PTR [eax],0x60
c001b4da:	75 0c                	jne    c001b4e8 <Thr::loadDLL(char const*, bool)+0x1ae>
c001b4dc:	83 ec 0c             	sub    esp,0xc
c001b4df:	55                   	push   ebp
c001b4e0:	e8 59 41 ff ff       	call   c000f63e <Phys::freePage(unsigned long)>
c001b4e5:	83 c4 10             	add    esp,0x10
c001b4e8:	46                   	inc    esi
c001b4e9:	eb a4                	jmp    c001b48f <Thr::loadDLL(char const*, bool)+0x155>
c001b4eb:	89 f8                	mov    eax,edi
c001b4ed:	84 c0                	test   al,al
c001b4ef:	75 02                	jne    c001b4f3 <Thr::loadDLL(char const*, bool)+0x1b9>
c001b4f1:	31 db                	xor    ebx,ebx
c001b4f3:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b4f9:	89 d8                	mov    eax,ebx
c001b4fb:	5b                   	pop    ebx
c001b4fc:	5e                   	pop    esi
c001b4fd:	5f                   	pop    edi
c001b4fe:	5d                   	pop    ebp
c001b4ff:	c3                   	ret    

c001b500 <Thr::executeDLL(unsigned long, void*)>:
c001b500:	56                   	push   esi
c001b501:	53                   	push   ebx
c001b502:	51                   	push   ecx
c001b503:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b507:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b50b:	85 db                	test   ebx,ebx
c001b50d:	75 10                	jne    c001b51f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001b50f:	83 ec 0c             	sub    esp,0xc
c001b512:	68 fc 85 02 c0       	push   0xc00285fc
c001b517:	e8 a7 d4 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001b51c:	83 c4 10             	add    esp,0x10
c001b51f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b523:	89 d8                	mov    eax,ebx
c001b525:	5a                   	pop    edx
c001b526:	5b                   	pop    ebx
c001b527:	5e                   	pop    esi
c001b528:	ff e0                	jmp    eax

c001b52a <changeTSS>:
c001b52a:	83 ec 14             	sub    esp,0x14
c001b52d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b532:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b535:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001b53a:	c1 e2 15             	shl    edx,0x15
c001b53d:	29 d0                	sub    eax,edx
c001b53f:	50                   	push   eax
c001b540:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001b545:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b54b:	05 7c 11 00 00       	add    eax,0x117c
c001b550:	50                   	push   eax
c001b551:	e8 8a 56 ff ff       	call   c0010be0 <TSS::setESP(unsigned long)>
c001b556:	83 c4 1c             	add    esp,0x1c
c001b559:	c3                   	ret    

c001b55a <Process::addArgs(char**)>:
c001b55a:	57                   	push   edi
c001b55b:	56                   	push   esi
c001b55c:	53                   	push   ebx
c001b55d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b561:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b565:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001b56f:	85 ff                	test   edi,edi
c001b571:	74 3d                	je     c001b5b0 <Process::addArgs(char**)+0x56>
c001b573:	8b 07                	mov    eax,DWORD PTR [edi]
c001b575:	85 c0                	test   eax,eax
c001b577:	74 37                	je     c001b5b0 <Process::addArgs(char**)+0x56>
c001b579:	31 db                	xor    ebx,ebx
c001b57b:	83 ec 0c             	sub    esp,0xc
c001b57e:	50                   	push   eax
c001b57f:	e8 16 51 fe ff       	call   c000069a <strlen>
c001b584:	40                   	inc    eax
c001b585:	89 04 24             	mov    DWORD PTR [esp],eax
c001b588:	e8 91 3b ff ff       	call   c000f11e <malloc>
c001b58d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001b594:	5a                   	pop    edx
c001b595:	59                   	pop    ecx
c001b596:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001b599:	43                   	inc    ebx
c001b59a:	50                   	push   eax
c001b59b:	e8 7c 51 fe ff       	call   c000071c <strcpy>
c001b5a0:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001b5a6:	83 c4 10             	add    esp,0x10
c001b5a9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b5ac:	85 c0                	test   eax,eax
c001b5ae:	75 cb                	jne    c001b57b <Process::addArgs(char**)+0x21>
c001b5b0:	5b                   	pop    ebx
c001b5b1:	5e                   	pop    esi
c001b5b2:	5f                   	pop    edi
c001b5b3:	c3                   	ret    

c001b5b4 <Process::Process(char const*, Process*, char**)>:
c001b5b4:	56                   	push   esi
c001b5b5:	53                   	push   ebx
c001b5b6:	83 ec 14             	sub    esp,0x14
c001b5b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5bd:	05 0c 02 00 00       	add    eax,0x20c
c001b5c2:	bb 07 00 00 00       	mov    ebx,0x7
c001b5c7:	89 c6                	mov    esi,eax
c001b5c9:	85 db                	test   ebx,ebx
c001b5cb:	78 12                	js     c001b5df <Process::Process(char const*, Process*, char**)+0x2b>
c001b5cd:	83 ec 0c             	sub    esp,0xc
c001b5d0:	56                   	push   esi
c001b5d1:	e8 3c a1 00 00       	call   c0025712 <ThreadControlBlock::ThreadControlBlock()>
c001b5d6:	83 c4 10             	add    esp,0x10
c001b5d9:	83 c6 63             	add    esi,0x63
c001b5dc:	4b                   	dec    ebx
c001b5dd:	eb ea                	jmp    c001b5c9 <Process::Process(char const*, Process*, char**)+0x15>
c001b5df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5e3:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b5ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5ee:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b5f7:	a1 04 9a 02 c0       	mov    eax,ds:0xc0029a04
c001b5fc:	8d 50 01             	lea    edx,[eax+0x1]
c001b5ff:	89 15 04 9a 02 c0    	mov    DWORD PTR ds:0xc0029a04,edx
c001b605:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b609:	89 02                	mov    DWORD PTR [edx],eax
c001b60b:	83 ec 0c             	sub    esp,0xc
c001b60e:	6a 10                	push   0x10
c001b610:	e8 41 6b ff ff       	call   c0012156 <operator new(unsigned long)>
c001b615:	83 c4 10             	add    esp,0x10
c001b618:	89 c3                	mov    ebx,eax
c001b61a:	83 ec 08             	sub    esp,0x8
c001b61d:	6a 00                	push   0x0
c001b61f:	53                   	push   ebx
c001b620:	e8 a5 67 ff ff       	call   c0011dca <VAS::VAS(bool)>
c001b625:	83 c4 10             	add    esp,0x10
c001b628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b62c:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b636:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b640:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b644:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b648:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b64e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b652:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b658:	85 c0                	test   eax,eax
c001b65a:	74 42                	je     c001b69e <Process::Process(char const*, Process*, char**)+0xea>
c001b65c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b660:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b666:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b66c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b670:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b67a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b680:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b68a:	05 0c 01 00 00       	add    eax,0x10c
c001b68f:	83 ec 08             	sub    esp,0x8
c001b692:	52                   	push   edx
c001b693:	50                   	push   eax
c001b694:	e8 83 50 fe ff       	call   c000071c <strcpy>
c001b699:	83 c4 10             	add    esp,0x10
c001b69c:	eb 5c                	jmp    c001b6fa <Process::Process(char const*, Process*, char**)+0x146>
c001b69e:	83 ec 0c             	sub    esp,0xc
c001b6a1:	68 60 12 00 00       	push   0x1260
c001b6a6:	e8 ab 6a ff ff       	call   c0012156 <operator new(unsigned long)>
c001b6ab:	83 c4 10             	add    esp,0x10
c001b6ae:	89 c3                	mov    ebx,eax
c001b6b0:	83 ec 08             	sub    esp,0x8
c001b6b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6b7:	53                   	push   ebx
c001b6b8:	e8 21 52 ff ff       	call   c00108de <VgaText::VgaText(char const*)>
c001b6bd:	83 c4 10             	add    esp,0x10
c001b6c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6c4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b6ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6ce:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b6d4:	83 ec 0c             	sub    esp,0xc
c001b6d7:	50                   	push   eax
c001b6d8:	e8 02 46 ff ff       	call   c000fcdf <addToTerminalCycle(VgaText*)>
c001b6dd:	83 c4 10             	add    esp,0x10
c001b6e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6e4:	05 0c 01 00 00       	add    eax,0x10c
c001b6e9:	83 ec 08             	sub    esp,0x8
c001b6ec:	68 26 86 02 c0       	push   0xc0028626
c001b6f1:	50                   	push   eax
c001b6f2:	e8 25 50 fe ff       	call   c000071c <strcpy>
c001b6f7:	83 c4 10             	add    esp,0x10
c001b6fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6fe:	83 c0 0c             	add    eax,0xc
c001b701:	83 ec 08             	sub    esp,0x8
c001b704:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b708:	50                   	push   eax
c001b709:	e8 0e 50 fe ff       	call   c000071c <strcpy>
c001b70e:	83 c4 10             	add    esp,0x10
c001b711:	83 ec 08             	sub    esp,0x8
c001b714:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b718:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b71c:	e8 39 fe ff ff       	call   c001b55a <Process::addArgs(char**)>
c001b721:	83 c4 10             	add    esp,0x10
c001b724:	83 ec 08             	sub    esp,0x8
c001b727:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b72b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b72f:	e8 ac ee ff ff       	call   c001a5e0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001b734:	83 c4 10             	add    esp,0x10
c001b737:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b73b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b73f:	83 f0 01             	xor    eax,0x1
c001b742:	88 c2                	mov    dl,al
c001b744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b748:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001b74e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001b753:	83 ec 08             	sub    esp,0x8
c001b756:	50                   	push   eax
c001b757:	68 24 87 02 c0       	push   0xc0028724
c001b75c:	e8 e4 6a ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001b761:	83 c4 10             	add    esp,0x10
c001b764:	90                   	nop
c001b765:	83 c4 14             	add    esp,0x14
c001b768:	5b                   	pop    ebx
c001b769:	5e                   	pop    esi
c001b76a:	c3                   	ret    
c001b76b:	90                   	nop

c001b76c <Process::Process(bool, char const*, Process*, char**)>:
c001b76c:	56                   	push   esi
c001b76d:	53                   	push   ebx
c001b76e:	83 ec 14             	sub    esp,0x14
c001b771:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b775:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b779:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b77d:	05 0c 02 00 00       	add    eax,0x20c
c001b782:	bb 07 00 00 00       	mov    ebx,0x7
c001b787:	89 c6                	mov    esi,eax
c001b789:	85 db                	test   ebx,ebx
c001b78b:	78 12                	js     c001b79f <Process::Process(bool, char const*, Process*, char**)+0x33>
c001b78d:	83 ec 0c             	sub    esp,0xc
c001b790:	56                   	push   esi
c001b791:	e8 7c 9f 00 00       	call   c0025712 <ThreadControlBlock::ThreadControlBlock()>
c001b796:	83 c4 10             	add    esp,0x10
c001b799:	83 c6 63             	add    esi,0x63
c001b79c:	4b                   	dec    ebx
c001b79d:	eb ea                	jmp    c001b789 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001b79f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7a3:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b7aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7ae:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b7b7:	a1 04 9a 02 c0       	mov    eax,ds:0xc0029a04
c001b7bc:	8d 50 01             	lea    edx,[eax+0x1]
c001b7bf:	89 15 04 9a 02 c0    	mov    DWORD PTR ds:0xc0029a04,edx
c001b7c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b7c9:	89 02                	mov    DWORD PTR [edx],eax
c001b7cb:	83 ec 0c             	sub    esp,0xc
c001b7ce:	6a 10                	push   0x10
c001b7d0:	e8 81 69 ff ff       	call   c0012156 <operator new(unsigned long)>
c001b7d5:	83 c4 10             	add    esp,0x10
c001b7d8:	89 c3                	mov    ebx,eax
c001b7da:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b7df:	83 ec 08             	sub    esp,0x8
c001b7e2:	50                   	push   eax
c001b7e3:	53                   	push   ebx
c001b7e4:	e8 e1 65 ff ff       	call   c0011dca <VAS::VAS(bool)>
c001b7e9:	83 c4 10             	add    esp,0x10
c001b7ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7f0:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b7f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7fa:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b808:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b80c:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b812:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b816:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b81c:	85 c0                	test   eax,eax
c001b81e:	74 42                	je     c001b862 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c001b820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b824:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b82a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b834:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b83a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b83e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b844:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b84a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b84e:	05 0c 01 00 00       	add    eax,0x10c
c001b853:	83 ec 08             	sub    esp,0x8
c001b856:	52                   	push   edx
c001b857:	50                   	push   eax
c001b858:	e8 bf 4e fe ff       	call   c000071c <strcpy>
c001b85d:	83 c4 10             	add    esp,0x10
c001b860:	eb 5c                	jmp    c001b8be <Process::Process(bool, char const*, Process*, char**)+0x152>
c001b862:	83 ec 0c             	sub    esp,0xc
c001b865:	68 60 12 00 00       	push   0x1260
c001b86a:	e8 e7 68 ff ff       	call   c0012156 <operator new(unsigned long)>
c001b86f:	83 c4 10             	add    esp,0x10
c001b872:	89 c3                	mov    ebx,eax
c001b874:	83 ec 08             	sub    esp,0x8
c001b877:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b87b:	53                   	push   ebx
c001b87c:	e8 5d 50 ff ff       	call   c00108de <VgaText::VgaText(char const*)>
c001b881:	83 c4 10             	add    esp,0x10
c001b884:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b888:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b88e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b892:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b898:	83 ec 0c             	sub    esp,0xc
c001b89b:	50                   	push   eax
c001b89c:	e8 3e 44 ff ff       	call   c000fcdf <addToTerminalCycle(VgaText*)>
c001b8a1:	83 c4 10             	add    esp,0x10
c001b8a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8a8:	05 0c 01 00 00       	add    eax,0x10c
c001b8ad:	83 ec 08             	sub    esp,0x8
c001b8b0:	68 26 86 02 c0       	push   0xc0028626
c001b8b5:	50                   	push   eax
c001b8b6:	e8 61 4e fe ff       	call   c000071c <strcpy>
c001b8bb:	83 c4 10             	add    esp,0x10
c001b8be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8c2:	83 c0 0c             	add    eax,0xc
c001b8c5:	83 ec 08             	sub    esp,0x8
c001b8c8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b8cc:	50                   	push   eax
c001b8cd:	e8 4a 4e fe ff       	call   c000071c <strcpy>
c001b8d2:	83 c4 10             	add    esp,0x10
c001b8d5:	83 ec 08             	sub    esp,0x8
c001b8d8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b8dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b8e0:	e8 75 fc ff ff       	call   c001b55a <Process::addArgs(char**)>
c001b8e5:	83 c4 10             	add    esp,0x10
c001b8e8:	90                   	nop
c001b8e9:	83 c4 14             	add    esp,0x14
c001b8ec:	5b                   	pop    ebx
c001b8ed:	5e                   	pop    esi
c001b8ee:	c3                   	ret    

c001b8ef <disableIRQs()>:
c001b8ef:	fa                   	cli    
c001b8f0:	ff 05 4c b9 02 c0    	inc    DWORD PTR ds:0xc002b94c
c001b8f6:	c3                   	ret    

c001b8f7 <getIRQNestingLevel()>:
c001b8f7:	a1 4c b9 02 c0       	mov    eax,ds:0xc002b94c
c001b8fc:	c3                   	ret    

c001b8fd <enableIRQs()>:
c001b8fd:	a1 4c b9 02 c0       	mov    eax,ds:0xc002b94c
c001b902:	48                   	dec    eax
c001b903:	a3 4c b9 02 c0       	mov    ds:0xc002b94c,eax
c001b908:	75 01                	jne    c001b90b <enableIRQs()+0xe>
c001b90a:	fb                   	sti    
c001b90b:	c3                   	ret    

c001b90c <lockScheduler()>:
c001b90c:	eb e1                	jmp    c001b8ef <disableIRQs()>

c001b90e <unlockScheduler()>:
c001b90e:	eb ed                	jmp    c001b8fd <enableIRQs()>

c001b910 <userModeEntryPoint(void*)>:
c001b910:	83 ec 0c             	sub    esp,0xc
c001b913:	e8 f6 ff ff ff       	call   c001b90e <unlockScheduler()>
c001b918:	fb                   	sti    
c001b919:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b91e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b921:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001b927:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b92b:	83 c4 0c             	add    esp,0xc
c001b92e:	e9 ad 49 fe ff       	jmp    c00002e0 <goToUsermode>

c001b933 <lockStuff()>:
c001b933:	e8 b7 ff ff ff       	call   c001b8ef <disableIRQs()>
c001b938:	ff 05 48 b9 02 c0    	inc    DWORD PTR ds:0xc002b948
c001b93e:	c3                   	ret    

c001b93f <taskStartupFunction>:
c001b93f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b944:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001b947:	c3                   	ret    

c001b948 <updateTimeUsed()>:
c001b948:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001b94d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b953:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001b95a:	74 50                	je     c001b9ac <updateTimeUsed()+0x64>
c001b95c:	57                   	push   edi
c001b95d:	56                   	push   esi
c001b95e:	53                   	push   ebx
c001b95f:	0f 31                	rdtsc  
c001b961:	89 c1                	mov    ecx,eax
c001b963:	a3 88 b9 02 c0       	mov    ds:0xc002b988,eax
c001b968:	2b 0d 78 b9 02 c0    	sub    ecx,DWORD PTR ds:0xc002b978
c001b96e:	89 d3                	mov    ebx,edx
c001b970:	89 0d 80 b9 02 c0    	mov    DWORD PTR ds:0xc002b980,ecx
c001b976:	1b 1d 7c b9 02 c0    	sbb    ebx,DWORD PTR ds:0xc002b97c
c001b97c:	a3 78 b9 02 c0       	mov    ds:0xc002b978,eax
c001b981:	89 1d 84 b9 02 c0    	mov    DWORD PTR ds:0xc002b984,ebx
c001b987:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b98c:	89 15 8c b9 02 c0    	mov    DWORD PTR ds:0xc002b98c,edx
c001b992:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001b995:	89 15 7c b9 02 c0    	mov    DWORD PTR ds:0xc002b97c,edx
c001b99b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001b99e:	01 f1                	add    ecx,esi
c001b9a0:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001b9a3:	11 fb                	adc    ebx,edi
c001b9a5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001b9a8:	5b                   	pop    ebx
c001b9a9:	5e                   	pop    esi
c001b9aa:	5f                   	pop    edi
c001b9ab:	c3                   	ret    
c001b9ac:	c3                   	ret    

c001b9ad <switchToThread(ThreadControlBlock*)>:
c001b9ad:	53                   	push   ebx
c001b9ae:	83 ec 08             	sub    esp,0x8
c001b9b1:	a1 48 b9 02 c0       	mov    eax,ds:0xc002b948
c001b9b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9ba:	85 c0                	test   eax,eax
c001b9bc:	75 30                	jne    c001b9ee <switchToThread(ThreadControlBlock*)+0x41>
c001b9be:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001b9c1:	3c ff                	cmp    al,0xff
c001b9c3:	74 25                	je     c001b9ea <switchToThread(ThreadControlBlock*)+0x3d>
c001b9c5:	0f b6 d0             	movzx  edx,al
c001b9c8:	b8 84 03 00 00       	mov    eax,0x384
c001b9cd:	29 d0                	sub    eax,edx
c001b9cf:	c1 e0 10             	shl    eax,0x10
c001b9d2:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001b9d5:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001b9d8:	e8 6b ff ff ff       	call   c001b948 <updateTimeUsed()>
c001b9dd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b9e1:	83 c4 08             	add    esp,0x8
c001b9e4:	5b                   	pop    ebx
c001b9e5:	e9 2f 49 fe ff       	jmp    c0000319 <switchToThreadASM>
c001b9ea:	31 c0                	xor    eax,eax
c001b9ec:	eb e7                	jmp    c001b9d5 <switchToThread(ThreadControlBlock*)+0x28>
c001b9ee:	c7 05 44 b9 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002b944,0x1
c001b9f8:	83 c4 08             	add    esp,0x8
c001b9fb:	5b                   	pop    ebx
c001b9fc:	c3                   	ret    
c001b9fd:	90                   	nop

c001b9fe <Semaphore::Semaphore(int)>:
c001b9fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba06:	89 10                	mov    DWORD PTR [eax],edx
c001ba08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba0c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ba13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba22:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ba29:	90                   	nop
c001ba2a:	c3                   	ret    
c001ba2b:	90                   	nop

c001ba2c <Mutex::Mutex()>:
c001ba2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba30:	6a 01                	push   0x1
c001ba32:	50                   	push   eax
c001ba33:	e8 c6 ff ff ff       	call   c001b9fe <Semaphore::Semaphore(int)>
c001ba38:	83 c4 08             	add    esp,0x8
c001ba3b:	90                   	nop
c001ba3c:	c3                   	ret    
c001ba3d:	90                   	nop

c001ba3e <Process::createThread(void (*)(void*), void*, int)>:
c001ba3e:	55                   	push   ebp
c001ba3f:	31 c9                	xor    ecx,ecx
c001ba41:	57                   	push   edi
c001ba42:	56                   	push   esi
c001ba43:	53                   	push   ebx
c001ba44:	83 ec 1c             	sub    esp,0x1c
c001ba47:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba4b:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001ba52:	89 f2                	mov    edx,esi
c001ba54:	0f b7 c2             	movzx  eax,dx
c001ba57:	83 e2 01             	and    edx,0x1
c001ba5a:	74 14                	je     c001ba70 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ba5c:	d1 f8                	sar    eax,1
c001ba5e:	41                   	inc    ecx
c001ba5f:	89 c2                	mov    edx,eax
c001ba61:	83 f9 10             	cmp    ecx,0x10
c001ba64:	75 ee                	jne    c001ba54 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001ba66:	83 c4 1c             	add    esp,0x1c
c001ba69:	31 c0                	xor    eax,eax
c001ba6b:	5b                   	pop    ebx
c001ba6c:	5e                   	pop    esi
c001ba6d:	5f                   	pop    edi
c001ba6e:	5d                   	pop    ebp
c001ba6f:	c3                   	ret    
c001ba70:	83 ec 08             	sub    esp,0x8
c001ba73:	b8 01 00 00 00       	mov    eax,0x1
c001ba78:	d3 e0                	shl    eax,cl
c001ba7a:	09 c6                	or     esi,eax
c001ba7c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001ba82:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001ba89:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001ba8c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001ba8f:	01 ce                	add    esi,ecx
c001ba91:	89 f0                	mov    eax,esi
c001ba93:	c1 e0 05             	shl    eax,0x5
c001ba96:	01 c6                	add    esi,eax
c001ba98:	8d 04 33             	lea    eax,[ebx+esi*1]
c001ba9b:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001baa1:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001baa7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001baab:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001bab1:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001bab7:	89 ca                	mov    edx,ecx
c001bab9:	f7 da                	neg    edx
c001babb:	c1 e2 15             	shl    edx,0x15
c001babe:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001bac4:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001baca:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001bace:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001bad8:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001bade:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bae2:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001bae8:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001baf2:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001bafc:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001bb03:	50                   	push   eax
c001bb04:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb08:	68 68 b9 02 c0       	push   0xc002b968
c001bb0d:	e8 8e 9a 00 00       	call   c00255a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bb12:	83 c4 10             	add    esp,0x10
c001bb15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb19:	83 c4 1c             	add    esp,0x1c
c001bb1c:	5b                   	pop    ebx
c001bb1d:	5e                   	pop    esi
c001bb1e:	5f                   	pop    edi
c001bb1f:	5d                   	pop    ebp
c001bb20:	c3                   	ret    
c001bb21:	90                   	nop

c001bb22 <Process::createUserThread()>:
c001bb22:	83 ec 0c             	sub    esp,0xc
c001bb25:	68 80 00 00 00       	push   0x80
c001bb2a:	6a 00                	push   0x0
c001bb2c:	68 10 b9 01 c0       	push   0xc001b910
c001bb31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb35:	e8 04 ff ff ff       	call   c001ba3e <Process::createThread(void (*)(void*), void*, int)>
c001bb3a:	83 c4 1c             	add    esp,0x1c
c001bb3d:	c3                   	ret    

c001bb3e <setupMultitasking(void (*)())>:
c001bb3e:	56                   	push   esi
c001bb3f:	53                   	push   ebx
c001bb40:	53                   	push   ebx
c001bb41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb45:	eb 10                	jmp    c001bb57 <setupMultitasking(void (*)())+0x19>
c001bb47:	83 ec 0c             	sub    esp,0xc
c001bb4a:	68 68 b9 02 c0       	push   0xc002b968
c001bb4f:	e8 9e 99 00 00       	call   c00254f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bb54:	83 c4 10             	add    esp,0x10
c001bb57:	83 ec 0c             	sub    esp,0xc
c001bb5a:	68 68 b9 02 c0       	push   0xc002b968
c001bb5f:	e8 72 99 00 00       	call   c00254d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bb64:	83 c4 10             	add    esp,0x10
c001bb67:	84 c0                	test   al,al
c001bb69:	74 dc                	je     c001bb47 <setupMultitasking(void (*)())+0x9>
c001bb6b:	83 ec 0c             	sub    esp,0xc
c001bb6e:	68 3b 07 00 00       	push   0x73b
c001bb73:	e8 de 65 ff ff       	call   c0012156 <operator new(unsigned long)>
c001bb78:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001bb7f:	89 c3                	mov    ebx,eax
c001bb81:	6a 00                	push   0x0
c001bb83:	68 2a 86 02 c0       	push   0xc002862a
c001bb88:	6a 01                	push   0x1
c001bb8a:	50                   	push   eax
c001bb8b:	e8 dc fb ff ff       	call   c001b76c <Process::Process(bool, char const*, Process*, char**)>
c001bb90:	83 c4 18             	add    esp,0x18
c001bb93:	89 1d 74 b9 02 c0    	mov    DWORD PTR ds:0xc002b974,ebx
c001bb99:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bb9f:	68 4c 87 02 c0       	push   0xc002874c
c001bba4:	e8 9c 66 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001bba9:	58                   	pop    eax
c001bbaa:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bbb0:	e8 9e 48 ff ff       	call   c0010453 <setActiveTerminal(VgaText*)>
c001bbb5:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001bbbd:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bbc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bbc6:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001bbd0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001bbd6:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001bbdc:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001bbe6:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001bbf0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001bbfa:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001bc00:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001bc06:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001bc10:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001bc16:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001bc20:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001bc26:	5a                   	pop    edx
c001bc27:	59                   	pop    ecx
c001bc28:	68 26 86 02 c0       	push   0xc0028626
c001bc2d:	50                   	push   eax
c001bc2e:	e8 e9 4a fe ff       	call   c000071c <strcpy>
c001bc33:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001bc3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001bc3e:	83 c4 14             	add    esp,0x14
c001bc41:	5b                   	pop    ebx
c001bc42:	5e                   	pop    esi
c001bc43:	e9 c3 46 fe ff       	jmp    c000030b <switchToThreadASMFirstTime>

c001bc48 <schedule()>:
c001bc48:	a1 48 b9 02 c0       	mov    eax,ds:0xc002b948
c001bc4d:	85 c0                	test   eax,eax
c001bc4f:	74 0b                	je     c001bc5c <schedule()+0x14>
c001bc51:	c7 05 44 b9 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002b944,0x1
c001bc5b:	c3                   	ret    
c001bc5c:	53                   	push   ebx
c001bc5d:	83 ec 14             	sub    esp,0x14
c001bc60:	68 68 b9 02 c0       	push   0xc002b968
c001bc65:	e8 6c 98 00 00       	call   c00254d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bc6a:	83 c4 10             	add    esp,0x10
c001bc6d:	84 c0                	test   al,al
c001bc6f:	75 38                	jne    c001bca9 <schedule()+0x61>
c001bc71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc76:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc79:	4a                   	dec    edx
c001bc7a:	74 32                	je     c001bcae <schedule()+0x66>
c001bc7c:	83 ec 0c             	sub    esp,0xc
c001bc7f:	68 68 b9 02 c0       	push   0xc002b968
c001bc84:	e8 45 98 00 00       	call   c00254ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bc89:	c7 04 24 68 b9 02 c0 	mov    DWORD PTR [esp],0xc002b968
c001bc90:	89 c3                	mov    ebx,eax
c001bc92:	e8 5b 98 00 00       	call   c00254f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bc97:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001bc9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bca1:	e8 07 fd ff ff       	call   c001b9ad <switchToThread(ThreadControlBlock*)>
c001bca6:	83 c4 10             	add    esp,0x10
c001bca9:	83 c4 08             	add    esp,0x8
c001bcac:	5b                   	pop    ebx
c001bcad:	c3                   	ret    
c001bcae:	83 ec 08             	sub    esp,0x8
c001bcb1:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bcb8:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001bcbe:	68 68 b9 02 c0       	push   0xc002b968
c001bcc3:	e8 d8 98 00 00       	call   c00255a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bcc8:	83 c4 10             	add    esp,0x10
c001bccb:	eb af                	jmp    c001bc7c <schedule()+0x34>

c001bccd <unlockStuff()>:
c001bccd:	a1 48 b9 02 c0       	mov    eax,ds:0xc002b948
c001bcd2:	48                   	dec    eax
c001bcd3:	a3 48 b9 02 c0       	mov    ds:0xc002b948,eax
c001bcd8:	75 09                	jne    c001bce3 <unlockStuff()+0x16>
c001bcda:	a1 44 b9 02 c0       	mov    eax,ds:0xc002b944
c001bcdf:	85 c0                	test   eax,eax
c001bce1:	75 05                	jne    c001bce8 <unlockStuff()+0x1b>
c001bce3:	e9 15 fc ff ff       	jmp    c001b8fd <enableIRQs()>
c001bce8:	83 ec 0c             	sub    esp,0xc
c001bceb:	c7 05 44 b9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b944,0x0
c001bcf5:	e8 4e ff ff ff       	call   c001bc48 <schedule()>
c001bcfa:	83 c4 0c             	add    esp,0xc
c001bcfd:	e9 fb fb ff ff       	jmp    c001b8fd <enableIRQs()>

c001bd02 <Semaphore::tryAcquire()>:
c001bd02:	83 ec 0c             	sub    esp,0xc
c001bd05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd09:	e8 25 fc ff ff       	call   c001b933 <lockStuff()>
c001bd0e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bd11:	3b 10                	cmp    edx,DWORD PTR [eax]
c001bd13:	7c 0b                	jl     c001bd20 <Semaphore::tryAcquire()+0x1e>
c001bd15:	e8 b3 ff ff ff       	call   c001bccd <unlockStuff()>
c001bd1a:	31 c0                	xor    eax,eax
c001bd1c:	83 c4 0c             	add    esp,0xc
c001bd1f:	c3                   	ret    
c001bd20:	42                   	inc    edx
c001bd21:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bd24:	e8 a4 ff ff ff       	call   c001bccd <unlockStuff()>
c001bd29:	b0 01                	mov    al,0x1
c001bd2b:	83 c4 0c             	add    esp,0xc
c001bd2e:	c3                   	ret    
c001bd2f:	90                   	nop

c001bd30 <Semaphore::assertLocked(char const*)>:
c001bd30:	83 ec 0c             	sub    esp,0xc
c001bd33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd3b:	e8 f3 fb ff ff       	call   c001b933 <lockStuff()>
c001bd40:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bd42:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001bd45:	7c 05                	jl     c001bd4c <Semaphore::assertLocked(char const*)+0x1c>
c001bd47:	83 c4 0c             	add    esp,0xc
c001bd4a:	eb 81                	jmp    c001bccd <unlockStuff()>
c001bd4c:	83 ec 0c             	sub    esp,0xc
c001bd4f:	52                   	push   edx
c001bd50:	e8 6e cc ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001bd55:	83 c4 10             	add    esp,0x10
c001bd58:	83 c4 0c             	add    esp,0xc
c001bd5b:	e9 6d ff ff ff       	jmp    c001bccd <unlockStuff()>

c001bd60 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001bd60:	83 ec 0c             	sub    esp,0xc
c001bd63:	e8 8f fb ff ff       	call   c001b8f7 <getIRQNestingLevel()>
c001bd68:	83 ec 08             	sub    esp,0x8
c001bd6b:	50                   	push   eax
c001bd6c:	68 80 87 02 c0       	push   0xc0028780
c001bd71:	e8 cf 64 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001bd76:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bd7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd7f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bd82:	e8 c1 fe ff ff       	call   c001bc48 <schedule()>
c001bd87:	e8 82 fb ff ff       	call   c001b90e <unlockScheduler()>
c001bd8c:	e8 66 fb ff ff       	call   c001b8f7 <getIRQNestingLevel()>
c001bd91:	5a                   	pop    edx
c001bd92:	59                   	pop    ecx
c001bd93:	50                   	push   eax
c001bd94:	68 b4 87 02 c0       	push   0xc00287b4
c001bd99:	e8 a7 64 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001bd9e:	83 c4 1c             	add    esp,0x1c
c001bda1:	c3                   	ret    

c001bda2 <blockTask(TaskState)>:
c001bda2:	83 ec 0c             	sub    esp,0xc
c001bda5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bda9:	e8 5e fb ff ff       	call   c001b90c <lockScheduler()>
c001bdae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdb3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bdb6:	e8 8d fe ff ff       	call   c001bc48 <schedule()>
c001bdbb:	83 c4 0c             	add    esp,0xc
c001bdbe:	e9 4b fb ff ff       	jmp    c001b90e <unlockScheduler()>

c001bdc3 <waitTask(int, int*, int)>:
c001bdc3:	83 ec 18             	sub    esp,0x18
c001bdc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdcb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bdcf:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001bdd2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bdd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bddb:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001bdde:	6a 07                	push   0x7
c001bde0:	e8 bd ff ff ff       	call   c001bda2 <blockTask(TaskState)>
c001bde5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdea:	83 c4 10             	add    esp,0x10
c001bded:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001bdf0:	85 d2                	test   edx,edx
c001bdf2:	74 0a                	je     c001bdfe <waitTask(int, int*, int)+0x3b>
c001bdf4:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001bdf7:	89 02                	mov    DWORD PTR [edx],eax
c001bdf9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdfe:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001be01:	83 c4 0c             	add    esp,0xc
c001be04:	c3                   	ret    

c001be05 <nanoSleepUntil(unsigned long long)>:
c001be05:	83 ec 0c             	sub    esp,0xc
c001be08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be10:	3b 05 d0 aa 02 c0    	cmp    eax,DWORD PTR ds:0xc002aad0
c001be16:	89 d1                	mov    ecx,edx
c001be18:	1b 0d d4 aa 02 c0    	sbb    ecx,DWORD PTR ds:0xc002aad4
c001be1e:	73 04                	jae    c001be24 <nanoSleepUntil(unsigned long long)+0x1f>
c001be20:	83 c4 0c             	add    esp,0xc
c001be23:	c3                   	ret    
c001be24:	e8 0a fb ff ff       	call   c001b933 <lockStuff()>
c001be29:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be2f:	83 ec 08             	sub    esp,0x8
c001be32:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001be35:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001be38:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001be3e:	68 5c b9 02 c0       	push   0xc002b95c
c001be43:	e8 58 97 00 00       	call   c00255a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001be48:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001be4f:	e8 4e ff ff ff       	call   c001bda2 <blockTask(TaskState)>
c001be54:	83 c4 1c             	add    esp,0x1c
c001be57:	e9 71 fe ff ff       	jmp    c001bccd <unlockStuff()>

c001be5c <nanoSleep(unsigned long long)>:
c001be5c:	a1 d0 aa 02 c0       	mov    eax,ds:0xc002aad0
c001be61:	8b 15 d4 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aad4
c001be67:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001be6b:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001be6f:	eb 94                	jmp    c001be05 <nanoSleepUntil(unsigned long long)>

c001be71 <sleep(unsigned long long)>:
c001be71:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001be79:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001be7e:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001be82:	01 ca                	add    edx,ecx
c001be84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001be88:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001be8c:	eb ce                	jmp    c001be5c <nanoSleep(unsigned long long)>

c001be8e <Semaphore::acquire()>:
c001be8e:	83 ec 0c             	sub    esp,0xc
c001be91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be95:	e8 99 fa ff ff       	call   c001b933 <lockStuff()>
c001be9a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001be9d:	3b 10                	cmp    edx,DWORD PTR [eax]
c001be9f:	7d 0c                	jge    c001bead <Semaphore::acquire()+0x1f>
c001bea1:	42                   	inc    edx
c001bea2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bea5:	83 c4 0c             	add    esp,0xc
c001bea8:	e9 20 fe ff ff       	jmp    c001bccd <unlockStuff()>
c001bead:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001beb3:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001beba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001bebd:	85 d2                	test   edx,edx
c001bebf:	74 2a                	je     c001beeb <Semaphore::acquire()+0x5d>
c001bec1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001bec4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001beca:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001becd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bed3:	83 ec 0c             	sub    esp,0xc
c001bed6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bed9:	6a 05                	push   0x5
c001bedb:	e8 c2 fe ff ff       	call   c001bda2 <blockTask(TaskState)>
c001bee0:	83 c4 10             	add    esp,0x10
c001bee3:	83 c4 0c             	add    esp,0xc
c001bee6:	e9 e2 fd ff ff       	jmp    c001bccd <unlockStuff()>
c001beeb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bef1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bef4:	eb d7                	jmp    c001becd <Semaphore::acquire()+0x3f>

c001bef6 <taskReturned>:
c001bef6:	83 ec 18             	sub    esp,0x18
c001bef9:	68 e8 87 02 c0       	push   0xc00287e8
c001befe:	e8 c0 ca ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001bf03:	83 c4 10             	add    esp,0x10
c001bf06:	83 ec 0c             	sub    esp,0xc
c001bf09:	6a 02                	push   0x2
c001bf0b:	e8 92 fe ff ff       	call   c001bda2 <blockTask(TaskState)>
c001bf10:	e8 f7 f9 ff ff       	call   c001b90c <lockScheduler()>
c001bf15:	e8 2e fd ff ff       	call   c001bc48 <schedule()>
c001bf1a:	e8 ef f9 ff ff       	call   c001b90e <unlockScheduler()>
c001bf1f:	83 c4 10             	add    esp,0x10
c001bf22:	eb e2                	jmp    c001bf06 <taskReturned+0x10>

c001bf24 <unblockTask(ThreadControlBlock*)>:
c001bf24:	53                   	push   ebx
c001bf25:	83 ec 08             	sub    esp,0x8
c001bf28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf2c:	e8 db f9 ff ff       	call   c001b90c <lockScheduler()>
c001bf31:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bf34:	85 c0                	test   eax,eax
c001bf36:	74 5c                	je     c001bf94 <unblockTask(ThreadControlBlock*)+0x70>
c001bf38:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bf3b:	48                   	dec    eax
c001bf3c:	74 31                	je     c001bf6f <unblockTask(ThreadControlBlock*)+0x4b>
c001bf3e:	83 ec 0c             	sub    esp,0xc
c001bf41:	68 68 b9 02 c0       	push   0xc002b968
c001bf46:	e8 83 95 00 00       	call   c00254ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bf4b:	83 c4 10             	add    esp,0x10
c001bf4e:	85 c0                	test   eax,eax
c001bf50:	75 17                	jne    c001bf69 <unblockTask(ThreadControlBlock*)+0x45>
c001bf52:	eb 65                	jmp    c001bfb9 <unblockTask(ThreadControlBlock*)+0x95>
c001bf54:	83 ec 08             	sub    esp,0x8
c001bf57:	50                   	push   eax
c001bf58:	68 68 b9 02 c0       	push   0xc002b968
c001bf5d:	e8 46 98 00 00       	call   c00257a8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001bf62:	83 c4 10             	add    esp,0x10
c001bf65:	85 c0                	test   eax,eax
c001bf67:	74 50                	je     c001bfb9 <unblockTask(ThreadControlBlock*)+0x95>
c001bf69:	39 c3                	cmp    ebx,eax
c001bf6b:	75 e7                	jne    c001bf54 <unblockTask(ThreadControlBlock*)+0x30>
c001bf6d:	eb 1c                	jmp    c001bf8b <unblockTask(ThreadControlBlock*)+0x67>
c001bf6f:	83 ec 0c             	sub    esp,0xc
c001bf72:	68 d8 88 02 c0       	push   0xc00288d8
c001bf77:	e8 c9 62 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001bf7c:	c7 04 24 64 88 02 c0 	mov    DWORD PTR [esp],0xc0028864
c001bf83:	e8 bd 62 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001bf88:	83 c4 10             	add    esp,0x10
c001bf8b:	83 c4 08             	add    esp,0x8
c001bf8e:	5b                   	pop    ebx
c001bf8f:	e9 7a f9 ff ff       	jmp    c001b90e <unlockScheduler()>
c001bf94:	83 ec 0c             	sub    esp,0xc
c001bf97:	68 1c 88 02 c0       	push   0xc002881c
c001bf9c:	e8 a4 62 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001bfa1:	c7 04 24 64 88 02 c0 	mov    DWORD PTR [esp],0xc0028864
c001bfa8:	e8 98 62 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001bfad:	83 c4 10             	add    esp,0x10
c001bfb0:	83 c4 08             	add    esp,0x8
c001bfb3:	5b                   	pop    ebx
c001bfb4:	e9 55 f9 ff ff       	jmp    c001b90e <unlockScheduler()>
c001bfb9:	83 ec 08             	sub    esp,0x8
c001bfbc:	53                   	push   ebx
c001bfbd:	68 68 b9 02 c0       	push   0xc002b968
c001bfc2:	e8 d9 95 00 00       	call   c00255a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bfc7:	83 c4 10             	add    esp,0x10
c001bfca:	83 c4 08             	add    esp,0x8
c001bfcd:	5b                   	pop    ebx
c001bfce:	e9 3b f9 ff ff       	jmp    c001b90e <unlockScheduler()>

c001bfd3 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001bfd3:	55                   	push   ebp
c001bfd4:	57                   	push   edi
c001bfd5:	56                   	push   esi
c001bfd6:	53                   	push   ebx
c001bfd7:	83 ec 1c             	sub    esp,0x1c
c001bfda:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bfde:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001bfe1:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001bfe7:	85 c9                	test   ecx,ecx
c001bfe9:	7e 20                	jle    c001c00b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001bfeb:	31 f6                	xor    esi,esi
c001bfed:	83 ec 0c             	sub    esp,0xc
c001bff0:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001bff7:	46                   	inc    esi
c001bff8:	e8 31 31 ff ff       	call   c000f12e <free>
c001bffd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c000:	83 c4 10             	add    esp,0x10
c001c003:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c009:	7f e2                	jg     c001bfed <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c00b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c015:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c01a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c01d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c020:	d3 c0                	rol    eax,cl
c001c022:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c029:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c02c:	89 f7                	mov    edi,esi
c001c02e:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c036:	0f 85 4f 01 00 00    	jne    c001c18b <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c03c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c042:	85 c0                	test   eax,eax
c001c044:	0f 84 aa 00 00 00    	je     c001c0f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c04a:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c04d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c051:	31 c9                	xor    ecx,ecx
c001c053:	eb 10                	jmp    c001c065 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c055:	41                   	inc    ecx
c001c056:	83 f9 10             	cmp    ecx,0x10
c001c059:	0f 84 95 00 00 00    	je     c001c0f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c05f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c065:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c06c:	d3 fa                	sar    edx,cl
c001c06e:	83 e2 01             	and    edx,0x1
c001c071:	74 e2                	je     c001c055 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c073:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c076:	01 ca                	add    edx,ecx
c001c078:	89 d5                	mov    ebp,edx
c001c07a:	c1 e5 05             	shl    ebp,0x5
c001c07d:	01 ea                	add    edx,ebp
c001c07f:	01 d0                	add    eax,edx
c001c081:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c087:	83 fd 07             	cmp    ebp,0x7
c001c08a:	75 c9                	jne    c001c055 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c08c:	05 40 02 00 00       	add    eax,0x240
c001c091:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c094:	83 fd ff             	cmp    ebp,0xffffffff
c001c097:	0f 8c 08 01 00 00    	jl     c001c1a5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c09d:	0f 84 b9 01 00 00    	je     c001c25c <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c0a3:	85 ed                	test   ebp,ebp
c001c0a5:	0f 84 a0 01 00 00    	je     c001c24b <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c0ab:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c0ad:	75 a6                	jne    c001c055 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c0af:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c0b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c0b9:	01 d0                	add    eax,edx
c001c0bb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c0bf:	83 ec 0c             	sub    esp,0xc
c001c0c2:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c0c8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c0cb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c0d1:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c0d8:	50                   	push   eax
c001c0d9:	e8 46 fe ff ff       	call   c001bf24 <unblockTask(ThreadControlBlock*)>
c001c0de:	83 c4 10             	add    esp,0x10
c001c0e1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c0e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c0e8:	89 f7                	mov    edi,esi
c001c0ea:	41                   	inc    ecx
c001c0eb:	83 f9 10             	cmp    ecx,0x10
c001c0ee:	0f 85 6b ff ff ff    	jne    c001c05f <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001c0f4:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001c0fa:	85 c0                	test   eax,eax
c001c0fc:	74 5d                	je     c001c15b <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c0fe:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001c104:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001c10a:	74 4f                	je     c001c15b <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c10c:	83 ec 0c             	sub    esp,0xc
c001c10f:	68 68 b9 02 c0       	push   0xc002b968
c001c114:	e8 b5 93 00 00       	call   c00254ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c119:	c7 04 24 68 b9 02 c0 	mov    DWORD PTR [esp],0xc002b968
c001c120:	89 c7                	mov    edi,eax
c001c122:	e8 af 93 00 00       	call   c00254d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c127:	83 c4 10             	add    esp,0x10
c001c12a:	84 c0                	test   al,al
c001c12c:	0f 84 e4 00 00 00    	je     c001c216 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001c132:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c135:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c13b:	85 d2                	test   edx,edx
c001c13d:	74 0f                	je     c001c14e <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001c13f:	83 ec 0c             	sub    esp,0xc
c001c142:	8b 02                	mov    eax,DWORD PTR [edx]
c001c144:	52                   	push   edx
c001c145:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c148:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c14b:	83 c4 10             	add    esp,0x10
c001c14e:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001c158:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001c15b:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001c161:	85 db                	test   ebx,ebx
c001c163:	74 16                	je     c001c17b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001c165:	83 ec 0c             	sub    esp,0xc
c001c168:	53                   	push   ebx
c001c169:	e8 48 56 ff ff       	call   c00117b6 <VAS::~VAS()>
c001c16e:	58                   	pop    eax
c001c16f:	5a                   	pop    edx
c001c170:	6a 10                	push   0x10
c001c172:	53                   	push   ebx
c001c173:	e8 ed 5f ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c001c178:	83 c4 10             	add    esp,0x10
c001c17b:	83 ec 0c             	sub    esp,0xc
c001c17e:	68 31 86 02 c0       	push   0xc0028631
c001c183:	e8 bd 60 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001c188:	83 c4 10             	add    esp,0x10
c001c18b:	83 ec 08             	sub    esp,0x8
c001c18e:	68 3b 07 00 00       	push   0x73b
c001c193:	68 3f 86 02 c0       	push   0xc002863f
c001c198:	e8 a8 60 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001c19d:	83 c4 2c             	add    esp,0x2c
c001c1a0:	5b                   	pop    ebx
c001c1a1:	5e                   	pop    esi
c001c1a2:	5f                   	pop    edi
c001c1a3:	5d                   	pop    ebp
c001c1a4:	c3                   	ret    
c001c1a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c1a9:	83 ec 0c             	sub    esp,0xc
c001c1ac:	68 1c 89 02 c0       	push   0xc002891c
c001c1b1:	e8 0d c8 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001c1b6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c1b9:	83 c4 10             	add    esp,0x10
c001c1bc:	89 f7                	mov    edi,esi
c001c1be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c1c2:	e9 8e fe ff ff       	jmp    c001c055 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c1c7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c1cd:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001c1d3:	75 1c                	jne    c001c1f1 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c1d5:	83 ec 0c             	sub    esp,0xc
c001c1d8:	68 84 89 02 c0       	push   0xc0028984
c001c1dd:	e8 63 60 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001c1e2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c1e9:	e8 b4 fb ff ff       	call   c001bda2 <blockTask(TaskState)>
c001c1ee:	83 c4 10             	add    esp,0x10
c001c1f1:	83 ec 08             	sub    esp,0x8
c001c1f4:	56                   	push   esi
c001c1f5:	68 68 b9 02 c0       	push   0xc002b968
c001c1fa:	e8 a1 93 00 00       	call   c00255a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c1ff:	c7 04 24 68 b9 02 c0 	mov    DWORD PTR [esp],0xc002b968
c001c206:	e8 c3 92 00 00       	call   c00254ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c20b:	83 c4 10             	add    esp,0x10
c001c20e:	39 f8                	cmp    eax,edi
c001c210:	0f 84 1c ff ff ff    	je     c001c132 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001c216:	83 ec 0c             	sub    esp,0xc
c001c219:	68 68 b9 02 c0       	push   0xc002b968
c001c21e:	e8 ab 92 00 00       	call   c00254ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c223:	c7 04 24 68 b9 02 c0 	mov    DWORD PTR [esp],0xc002b968
c001c22a:	89 c6                	mov    esi,eax
c001c22c:	e8 c1 92 00 00       	call   c00254f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c231:	83 c4 10             	add    esp,0x10
c001c234:	39 f3                	cmp    ebx,esi
c001c236:	74 b9                	je     c001c1f1 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c238:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001c23b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c23e:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001c244:	75 ab                	jne    c001c1f1 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c246:	e9 7c ff ff ff       	jmp    c001c1c7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001c24b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c24f:	83 ec 0c             	sub    esp,0xc
c001c252:	68 50 89 02 c0       	push   0xc0028950
c001c257:	e9 55 ff ff ff       	jmp    c001c1b1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001c25c:	8b 36                	mov    esi,DWORD PTR [esi]
c001c25e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c262:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001c265:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c268:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001c26e:	01 d7                	add    edi,edx
c001c270:	89 f8                	mov    eax,edi
c001c272:	e9 44 fe ff ff       	jmp    c001c0bb <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001c277 <cleanerTaskFunction(void*)>:
c001c277:	53                   	push   ebx
c001c278:	83 ec 08             	sub    esp,0x8
c001c27b:	e8 8e f6 ff ff       	call   c001b90e <unlockScheduler()>
c001c280:	e8 87 f6 ff ff       	call   c001b90c <lockScheduler()>
c001c285:	80 3d 2c b9 02 c0 00 	cmp    BYTE PTR ds:0xc002b92c,0x0
c001c28c:	0f 85 8e 00 00 00    	jne    c001c320 <cleanerTaskFunction(void*)+0xa9>
c001c292:	83 ec 0c             	sub    esp,0xc
c001c295:	6a 02                	push   0x2
c001c297:	e8 c4 fa ff ff       	call   c001bd60 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001c29c:	83 c4 10             	add    esp,0x10
c001c29f:	c6 05 2c b9 02 c0 00 	mov    BYTE PTR ds:0xc002b92c,0x0
c001c2a6:	e8 88 f6 ff ff       	call   c001b933 <lockStuff()>
c001c2ab:	e8 5c f6 ff ff       	call   c001b90c <lockScheduler()>
c001c2b0:	83 ec 0c             	sub    esp,0xc
c001c2b3:	68 50 b9 02 c0       	push   0xc002b950
c001c2b8:	e8 19 92 00 00       	call   c00254d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c2bd:	83 c4 10             	add    esp,0x10
c001c2c0:	84 c0                	test   al,al
c001c2c2:	75 40                	jne    c001c304 <cleanerTaskFunction(void*)+0x8d>
c001c2c4:	83 ec 0c             	sub    esp,0xc
c001c2c7:	68 50 b9 02 c0       	push   0xc002b950
c001c2cc:	e8 fd 91 00 00       	call   c00254ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c2d1:	c7 04 24 50 b9 02 c0 	mov    DWORD PTR [esp],0xc002b950
c001c2d8:	89 c3                	mov    ebx,eax
c001c2da:	e8 13 92 00 00       	call   c00254f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c2df:	c7 04 24 55 86 02 c0 	mov    DWORD PTR [esp],0xc0028655
c001c2e6:	e8 5a 5f ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001c2eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2ee:	e8 e0 fc ff ff       	call   c001bfd3 <cleanupTerminatedTask(ThreadControlBlock*)>
c001c2f3:	c7 04 24 6e 86 02 c0 	mov    DWORD PTR [esp],0xc002866e
c001c2fa:	e8 46 5f ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001c2ff:	83 c4 10             	add    esp,0x10
c001c302:	eb ac                	jmp    c001c2b0 <cleanerTaskFunction(void*)+0x39>
c001c304:	e8 05 f6 ff ff       	call   c001b90e <unlockScheduler()>
c001c309:	e8 bf f9 ff ff       	call   c001bccd <unlockStuff()>
c001c30e:	e8 f9 f5 ff ff       	call   c001b90c <lockScheduler()>
c001c313:	80 3d 2c b9 02 c0 00 	cmp    BYTE PTR ds:0xc002b92c,0x0
c001c31a:	0f 84 72 ff ff ff    	je     c001c292 <cleanerTaskFunction(void*)+0x1b>
c001c320:	e8 e9 f5 ff ff       	call   c001b90e <unlockScheduler()>
c001c325:	e9 75 ff ff ff       	jmp    c001c29f <cleanerTaskFunction(void*)+0x28>

c001c32a <terminateTask(int)>:
c001c32a:	83 ec 14             	sub    esp,0x14
c001c32d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c332:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c335:	83 c0 0c             	add    eax,0xc
c001c338:	50                   	push   eax
c001c339:	68 ac 89 02 c0       	push   0xc00289ac
c001c33e:	e8 02 5f ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001c343:	e8 eb f5 ff ff       	call   c001b933 <lockStuff()>
c001c348:	e8 bf f5 ff ff       	call   c001b90c <lockScheduler()>
c001c34d:	c7 04 24 81 86 02 c0 	mov    DWORD PTR [esp],0xc0028681
c001c354:	e8 ec 5e ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001c359:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c35d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c362:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001c365:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c36a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c36d:	5a                   	pop    edx
c001c36e:	59                   	pop    ecx
c001c36f:	50                   	push   eax
c001c370:	68 50 b9 02 c0       	push   0xc002b950
c001c375:	e8 26 92 00 00       	call   c00255a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c37a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c37f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001c386:	c7 04 24 9b 86 02 c0 	mov    DWORD PTR [esp],0xc002869b
c001c38d:	e8 b3 5e ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001c392:	83 c4 10             	add    esp,0x10
c001c395:	a1 28 b9 02 c0       	mov    eax,ds:0xc002b928
c001c39a:	85 c0                	test   eax,eax
c001c39c:	74 5a                	je     c001c3f8 <terminateTask(int)+0xce>
c001c39e:	83 ec 0c             	sub    esp,0xc
c001c3a1:	68 b5 86 02 c0       	push   0xc00286b5
c001c3a6:	e8 9a 5e ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001c3ab:	58                   	pop    eax
c001c3ac:	c6 05 2c b9 02 c0 01 	mov    BYTE PTR ds:0xc002b92c,0x1
c001c3b3:	ff 35 28 b9 02 c0    	push   DWORD PTR ds:0xc002b928
c001c3b9:	e8 66 fb ff ff       	call   c001bf24 <unblockTask(ThreadControlBlock*)>
c001c3be:	c7 04 24 cf 86 02 c0 	mov    DWORD PTR [esp],0xc00286cf
c001c3c5:	e8 7b 5e ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001c3ca:	83 c4 10             	add    esp,0x10
c001c3cd:	e8 3c f5 ff ff       	call   c001b90e <unlockScheduler()>
c001c3d2:	e8 f6 f8 ff ff       	call   c001bccd <unlockStuff()>
c001c3d7:	83 ec 0c             	sub    esp,0xc
c001c3da:	68 07 87 02 c0       	push   0xc0028707
c001c3df:	e8 61 5e ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001c3e4:	83 c4 10             	add    esp,0x10
c001c3e7:	e8 20 f5 ff ff       	call   c001b90c <lockScheduler()>
c001c3ec:	e8 57 f8 ff ff       	call   c001bc48 <schedule()>
c001c3f1:	e8 18 f5 ff ff       	call   c001b90e <unlockScheduler()>
c001c3f6:	eb ef                	jmp    c001c3e7 <terminateTask(int)+0xbd>
c001c3f8:	83 ec 0c             	sub    esp,0xc
c001c3fb:	68 e9 86 02 c0       	push   0xc00286e9
c001c400:	e8 40 5e ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001c405:	83 c4 10             	add    esp,0x10
c001c408:	eb c3                	jmp    c001c3cd <terminateTask(int)+0xa3>

c001c40a <Thr::terminateFromIRQ(int)>:
c001c40a:	83 ec 18             	sub    esp,0x18
c001c40d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c411:	e8 14 ff ff ff       	call   c001c32a <terminateTask(int)>

c001c416 <Semaphore::release()>:
c001c416:	83 ec 0c             	sub    esp,0xc
c001c419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c41d:	e8 11 f5 ff ff       	call   c001b933 <lockStuff()>
c001c422:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c425:	85 d2                	test   edx,edx
c001c427:	74 1a                	je     c001c443 <Semaphore::release()+0x2d>
c001c429:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001c42c:	83 ec 0c             	sub    esp,0xc
c001c42f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c432:	52                   	push   edx
c001c433:	e8 ec fa ff ff       	call   c001bf24 <unblockTask(ThreadControlBlock*)>
c001c438:	83 c4 10             	add    esp,0x10
c001c43b:	83 c4 0c             	add    esp,0xc
c001c43e:	e9 8a f8 ff ff       	jmp    c001bccd <unlockStuff()>
c001c443:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001c446:	83 c4 0c             	add    esp,0xc
c001c449:	e9 7f f8 ff ff       	jmp    c001bccd <unlockStuff()>

c001c44e <__static_initialization_and_destruction_0(int, int)>:
c001c44e:	83 ec 0c             	sub    esp,0xc
c001c451:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001c456:	0f 85 88 00 00 00    	jne    c001c4e4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001c45c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001c464:	75 7e                	jne    c001c4e4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001c466:	83 ec 0c             	sub    esp,0xc
c001c469:	68 68 b9 02 c0       	push   0xc002b968
c001c46e:	e8 dd 92 00 00       	call   c0025750 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c473:	83 c4 10             	add    esp,0x10
c001c476:	83 ec 04             	sub    esp,0x4
c001c479:	68 f8 93 02 c0       	push   0xc00293f8
c001c47e:	68 68 b9 02 c0       	push   0xc002b968
c001c483:	68 10 57 02 c0       	push   0xc0025710
c001c488:	e8 54 5c ff ff       	call   c00120e1 <__cxa_atexit>
c001c48d:	83 c4 10             	add    esp,0x10
c001c490:	83 ec 0c             	sub    esp,0xc
c001c493:	68 5c b9 02 c0       	push   0xc002b95c
c001c498:	e8 b3 92 00 00       	call   c0025750 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c49d:	83 c4 10             	add    esp,0x10
c001c4a0:	83 ec 04             	sub    esp,0x4
c001c4a3:	68 f8 93 02 c0       	push   0xc00293f8
c001c4a8:	68 5c b9 02 c0       	push   0xc002b95c
c001c4ad:	68 10 57 02 c0       	push   0xc0025710
c001c4b2:	e8 2a 5c ff ff       	call   c00120e1 <__cxa_atexit>
c001c4b7:	83 c4 10             	add    esp,0x10
c001c4ba:	83 ec 0c             	sub    esp,0xc
c001c4bd:	68 50 b9 02 c0       	push   0xc002b950
c001c4c2:	e8 89 92 00 00       	call   c0025750 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c4c7:	83 c4 10             	add    esp,0x10
c001c4ca:	83 ec 04             	sub    esp,0x4
c001c4cd:	68 f8 93 02 c0       	push   0xc00293f8
c001c4d2:	68 50 b9 02 c0       	push   0xc002b950
c001c4d7:	68 10 57 02 c0       	push   0xc0025710
c001c4dc:	e8 00 5c ff ff       	call   c00120e1 <__cxa_atexit>
c001c4e1:	83 c4 10             	add    esp,0x10
c001c4e4:	90                   	nop
c001c4e5:	83 c4 0c             	add    esp,0xc
c001c4e8:	c3                   	ret    

c001c4e9 <_GLOBAL__sub_I_kernelProcess>:
c001c4e9:	83 ec 0c             	sub    esp,0xc
c001c4ec:	83 ec 08             	sub    esp,0x8
c001c4ef:	68 ff ff 00 00       	push   0xffff
c001c4f4:	6a 01                	push   0x1
c001c4f6:	e8 53 ff ff ff       	call   c001c44e <__static_initialization_and_destruction_0(int, int)>
c001c4fb:	83 c4 10             	add    esp,0x10
c001c4fe:	83 c4 0c             	add    esp,0xc
c001c501:	c3                   	ret    

c001c502 <Vm::vm8086EntryPoint(void*)>:
c001c502:	83 ec 0c             	sub    esp,0xc
c001c505:	e8 04 f4 ff ff       	call   c001b90e <unlockScheduler()>
c001c50a:	fb                   	sti    
c001c50b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c510:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001c514:	52                   	push   edx
c001c515:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001c519:	52                   	push   edx
c001c51a:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001c51e:	52                   	push   edx
c001c51f:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001c523:	50                   	push   eax
c001c524:	e8 86 3d fe ff       	call   c00002af <goToVM86>
c001c529:	83 c4 1c             	add    esp,0x1c
c001c52c:	c3                   	ret    

c001c52d <Vm::inbv(unsigned short)>:
c001c52d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c531:	ec                   	in     al,dx
c001c532:	c3                   	ret    

c001c533 <Vm::outbv(unsigned short, unsigned char)>:
c001c533:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c537:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c53b:	ee                   	out    dx,al
c001c53c:	c3                   	ret    

c001c53d <Vm::realToLinear(unsigned short, unsigned short)>:
c001c53d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c542:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c547:	c1 e0 04             	shl    eax,0x4
c001c54a:	01 d0                	add    eax,edx
c001c54c:	c3                   	ret    

c001c54d <Vm::getSegment(unsigned int)>:
c001c54d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c551:	c1 e8 10             	shr    eax,0x10
c001c554:	c3                   	ret    

c001c555 <Vm::getOffset(unsigned int)>:
c001c555:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c559:	c3                   	ret    

c001c55a <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001c55a:	55                   	push   ebp
c001c55b:	57                   	push   edi
c001c55c:	56                   	push   esi
c001c55d:	53                   	push   ebx
c001c55e:	83 ec 2c             	sub    esp,0x2c
c001c561:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001c565:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c569:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c56d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c571:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c575:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001c579:	e8 8e f3 ff ff       	call   c001b90c <lockScheduler()>
c001c57e:	68 80 00 00 00       	push   0x80
c001c583:	6a 00                	push   0x0
c001c585:	68 02 c5 01 c0       	push   0xc001c502
c001c58a:	55                   	push   ebp
c001c58b:	e8 ae f4 ff ff       	call   c001ba3e <Process::createThread(void (*)(void*), void*, int)>
c001c590:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c594:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001c598:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001c59c:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001c5a0:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001c5a4:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001c5a8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c5af:	e8 a2 5b ff ff       	call   c0012156 <operator new(unsigned long)>
c001c5b4:	83 c4 0c             	add    esp,0xc
c001c5b7:	89 c3                	mov    ebx,eax
c001c5b9:	55                   	push   ebp
c001c5ba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c5be:	50                   	push   eax
c001c5bf:	e8 b0 61 ff ff       	call   c0012774 <File::File(char const*, Process*)>
c001c5c4:	83 c4 0c             	add    esp,0xc
c001c5c7:	8d 44 24 17          	lea    eax,[esp+0x17]
c001c5cb:	50                   	push   eax
c001c5cc:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c5d0:	50                   	push   eax
c001c5d1:	53                   	push   ebx
c001c5d2:	e8 ad 64 ff ff       	call   c0012a84 <File::stat(unsigned long long*, bool*)>
c001c5d7:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001c5db:	83 c4 10             	add    esp,0x10
c001c5de:	84 d2                	test   dl,dl
c001c5e0:	74 1c                	je     c001c5fe <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001c5e2:	83 ec 0c             	sub    esp,0xc
c001c5e5:	68 cb 89 02 c0       	push   0xc00289cb
c001c5ea:	e8 d4 c3 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001c5ef:	e8 1a f3 ff ff       	call   c001b90e <unlockScheduler()>
c001c5f4:	83 c4 10             	add    esp,0x10
c001c5f7:	31 d2                	xor    edx,edx
c001c5f9:	e9 81 00 00 00       	jmp    c001c67f <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c5fe:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c602:	51                   	push   ecx
c001c603:	51                   	push   ecx
c001c604:	6a 01                	push   0x1
c001c606:	53                   	push   ebx
c001c607:	e8 cc 61 ff ff       	call   c00127d8 <File::open(FileOpenMode)>
c001c60c:	83 c4 10             	add    esp,0x10
c001c60f:	85 c0                	test   eax,eax
c001c611:	74 1b                	je     c001c62e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001c613:	83 ec 0c             	sub    esp,0xc
c001c616:	68 e4 89 02 c0       	push   0xc00289e4
c001c61b:	e8 a3 c3 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001c620:	e8 e9 f2 ff ff       	call   c001b90e <unlockScheduler()>
c001c625:	83 c4 10             	add    esp,0x10
c001c628:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001c62c:	eb 51                	jmp    c001c67f <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c62e:	83 ec 0c             	sub    esp,0xc
c001c631:	0f b7 ff             	movzx  edi,di
c001c634:	6a 07                	push   0x7
c001c636:	0f b7 f6             	movzx  esi,si
c001c639:	68 00 01 00 00       	push   0x100
c001c63e:	6a 00                	push   0x0
c001c640:	6a 00                	push   0x0
c001c642:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001c648:	e8 c9 55 ff ff       	call   c0011c16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c64d:	83 c4 18             	add    esp,0x18
c001c650:	57                   	push   edi
c001c651:	56                   	push   esi
c001c652:	e8 e6 fe ff ff       	call   c001c53d <Vm::realToLinear(unsigned short, unsigned short)>
c001c657:	5a                   	pop    edx
c001c658:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c65a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001c65e:	51                   	push   ecx
c001c65f:	50                   	push   eax
c001c660:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c664:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c668:	53                   	push   ebx
c001c669:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c66c:	83 c4 14             	add    esp,0x14
c001c66f:	53                   	push   ebx
c001c670:	e8 c1 61 ff ff       	call   c0012836 <File::close()>
c001c675:	e8 94 f2 ff ff       	call   c001b90e <unlockScheduler()>
c001c67a:	83 c4 10             	add    esp,0x10
c001c67d:	b2 01                	mov    dl,0x1
c001c67f:	83 c4 2c             	add    esp,0x2c
c001c682:	88 d0                	mov    al,dl
c001c684:	5b                   	pop    ebx
c001c685:	5e                   	pop    esi
c001c686:	5f                   	pop    edi
c001c687:	5d                   	pop    ebp
c001c688:	c3                   	ret    

c001c689 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001c689:	57                   	push   edi
c001c68a:	56                   	push   esi
c001c68b:	53                   	push   ebx
c001c68c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c694:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c698:	83 e8 06             	sub    eax,0x6
c001c69b:	0f b7 c0             	movzx  eax,ax
c001c69e:	50                   	push   eax
c001c69f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001c6a4:	50                   	push   eax
c001c6a5:	e8 93 fe ff ff       	call   c001c53d <Vm::realToLinear(unsigned short, unsigned short)>
c001c6aa:	5a                   	pop    edx
c001c6ab:	5e                   	pop    esi
c001c6ac:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001c6af:	8d 56 fa             	lea    edx,[esi-0x6]
c001c6b2:	81 e2 ff ff 00 00    	and    edx,0xffff
c001c6b8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001c6bb:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001c6be:	83 c2 02             	add    edx,0x2
c001c6c1:	66 89 10             	mov    WORD PTR [eax],dx
c001c6c4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001c6c7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001c6cb:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001c6ce:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001c6d2:	89 d6                	mov    esi,edx
c001c6d4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001c6da:	66 81 e6 ff fd       	and    si,0xfdff
c001c6df:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001c6e3:	74 07                	je     c001c6ec <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001c6e5:	89 d6                	mov    esi,edx
c001c6e7:	66 81 ce 00 02       	or     si,0x200
c001c6ec:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001c6f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6f5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001c6f9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001c701:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001c704:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001c70c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001c70f:	5b                   	pop    ebx
c001c710:	5e                   	pop    esi
c001c711:	5f                   	pop    edi
c001c712:	c3                   	ret    

c001c713 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001c713:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c718:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c71d:	c1 e0 04             	shl    eax,0x4
c001c720:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001c723:	c3                   	ret    

c001c724 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001c724:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c729:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c72e:	c1 e0 04             	shl    eax,0x4
c001c731:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001c735:	c3                   	ret    

c001c736 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001c736:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c73b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c740:	c1 e0 04             	shl    eax,0x4
c001c743:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001c746:	c3                   	ret    

c001c747 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001c747:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c74c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c751:	c1 e0 04             	shl    eax,0x4
c001c754:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c758:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001c75b:	c3                   	ret    

c001c75c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001c75c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c761:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c766:	c1 e0 04             	shl    eax,0x4
c001c769:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c76d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001c771:	c3                   	ret    

c001c772 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001c772:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c777:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c77c:	c1 e0 04             	shl    eax,0x4
c001c77f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c783:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001c786:	c3                   	ret    

c001c787 <Vm::faultHandler(regs*)>:
c001c787:	55                   	push   ebp
c001c788:	57                   	push   edi
c001c789:	56                   	push   esi
c001c78a:	53                   	push   ebx
c001c78b:	83 ec 1c             	sub    esp,0x1c
c001c78e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c792:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001c795:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001c799:	0f b7 f0             	movzx  esi,ax
c001c79c:	52                   	push   edx
c001c79d:	0f b7 c0             	movzx  eax,ax
c001c7a0:	50                   	push   eax
c001c7a1:	e8 97 fd ff ff       	call   c001c53d <Vm::realToLinear(unsigned short, unsigned short)>
c001c7a6:	5a                   	pop    edx
c001c7a7:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001c7aa:	59                   	pop    ecx
c001c7ab:	89 c7                	mov    edi,eax
c001c7ad:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c7b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7b4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c7b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7bd:	0f b7 c5             	movzx  eax,bp
c001c7c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7c4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001c7c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7cc:	e8 6c fd ff ff       	call   c001c53d <Vm::realToLinear(unsigned short, unsigned short)>
c001c7d1:	5a                   	pop    edx
c001c7d2:	59                   	pop    ecx
c001c7d3:	b1 06                	mov    cl,0x6
c001c7d5:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001c7da:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001c7df:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001c7e2:	80 fa 9d             	cmp    dl,0x9d
c001c7e5:	0f 84 1d 02 00 00    	je     c001ca08 <Vm::faultHandler(regs*)+0x281>
c001c7eb:	0f 87 8e 00 00 00    	ja     c001c87f <Vm::faultHandler(regs*)+0xf8>
c001c7f1:	80 fa 66             	cmp    dl,0x66
c001c7f4:	0f 84 89 01 00 00    	je     c001c983 <Vm::faultHandler(regs*)+0x1fc>
c001c7fa:	77 44                	ja     c001c840 <Vm::faultHandler(regs*)+0xb9>
c001c7fc:	80 fa 36             	cmp    dl,0x36
c001c7ff:	0f 84 74 01 00 00    	je     c001c979 <Vm::faultHandler(regs*)+0x1f2>
c001c805:	77 1a                	ja     c001c821 <Vm::faultHandler(regs*)+0x9a>
c001c807:	80 fa 26             	cmp    dl,0x26
c001c80a:	0f 84 4b 01 00 00    	je     c001c95b <Vm::faultHandler(regs*)+0x1d4>
c001c810:	80 fa 2e             	cmp    dl,0x2e
c001c813:	0f 85 4a 05 00 00    	jne    c001cd63 <Vm::faultHandler(regs*)+0x5dc>
c001c819:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c81c:	31 c9                	xor    ecx,ecx
c001c81e:	47                   	inc    edi
c001c81f:	eb be                	jmp    c001c7df <Vm::faultHandler(regs*)+0x58>
c001c821:	80 fa 64             	cmp    dl,0x64
c001c824:	0f 84 3b 01 00 00    	je     c001c965 <Vm::faultHandler(regs*)+0x1de>
c001c82a:	0f 87 3f 01 00 00    	ja     c001c96f <Vm::faultHandler(regs*)+0x1e8>
c001c830:	80 fa 3e             	cmp    dl,0x3e
c001c833:	0f 85 2a 05 00 00    	jne    c001cd63 <Vm::faultHandler(regs*)+0x5dc>
c001c839:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c83c:	b1 01                	mov    cl,0x1
c001c83e:	eb de                	jmp    c001c81e <Vm::faultHandler(regs*)+0x97>
c001c840:	80 fa 6d             	cmp    dl,0x6d
c001c843:	0f 84 bf 02 00 00    	je     c001cb08 <Vm::faultHandler(regs*)+0x381>
c001c849:	77 17                	ja     c001c862 <Vm::faultHandler(regs*)+0xdb>
c001c84b:	80 fa 67             	cmp    dl,0x67
c001c84e:	0f 84 3c 01 00 00    	je     c001c990 <Vm::faultHandler(regs*)+0x209>
c001c854:	80 fa 6c             	cmp    dl,0x6c
c001c857:	0f 84 5d 02 00 00    	je     c001caba <Vm::faultHandler(regs*)+0x333>
c001c85d:	e9 01 05 00 00       	jmp    c001cd63 <Vm::faultHandler(regs*)+0x5dc>
c001c862:	80 fa 6f             	cmp    dl,0x6f
c001c865:	0f 84 8b 03 00 00    	je     c001cbf6 <Vm::faultHandler(regs*)+0x46f>
c001c86b:	0f 82 0f 03 00 00    	jb     c001cb80 <Vm::faultHandler(regs*)+0x3f9>
c001c871:	80 fa 9c             	cmp    dl,0x9c
c001c874:	0f 84 23 01 00 00    	je     c001c99d <Vm::faultHandler(regs*)+0x216>
c001c87a:	e9 e4 04 00 00       	jmp    c001cd63 <Vm::faultHandler(regs*)+0x5dc>
c001c87f:	80 fa ec             	cmp    dl,0xec
c001c882:	0f 84 7f 04 00 00    	je     c001cd07 <Vm::faultHandler(regs*)+0x580>
c001c888:	77 7b                	ja     c001c905 <Vm::faultHandler(regs*)+0x17e>
c001c88a:	80 fa e4             	cmp    dl,0xe4
c001c88d:	0f 84 fe 03 00 00    	je     c001cc91 <Vm::faultHandler(regs*)+0x50a>
c001c893:	77 53                	ja     c001c8e8 <Vm::faultHandler(regs*)+0x161>
c001c895:	80 fa cd             	cmp    dl,0xcd
c001c898:	0f 84 cd 01 00 00    	je     c001ca6b <Vm::faultHandler(regs*)+0x2e4>
c001c89e:	80 fa cf             	cmp    dl,0xcf
c001c8a1:	0f 85 bc 04 00 00    	jne    c001cd63 <Vm::faultHandler(regs*)+0x5dc>
c001c8a7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001c8aa:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001c8ad:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001c8b1:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001c8b4:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001c8b8:	81 ca 00 02 02 00    	or     edx,0x20200
c001c8be:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001c8c1:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001c8c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c8cb:	66 c1 e8 09          	shr    ax,0x9
c001c8cf:	83 e0 01             	and    eax,0x1
c001c8d2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001c8d5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c8d8:	83 c0 06             	add    eax,0x6
c001c8db:	25 ff ff 00 00       	and    eax,0xffff
c001c8e0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001c8e3:	e9 77 04 00 00       	jmp    c001cd5f <Vm::faultHandler(regs*)+0x5d8>
c001c8e8:	80 fa e6             	cmp    dl,0xe6
c001c8eb:	0f 84 ea 03 00 00    	je     c001ccdb <Vm::faultHandler(regs*)+0x554>
c001c8f1:	0f 82 b6 03 00 00    	jb     c001ccad <Vm::faultHandler(regs*)+0x526>
c001c8f7:	80 fa e7             	cmp    dl,0xe7
c001c8fa:	0f 84 f2 03 00 00    	je     c001ccf2 <Vm::faultHandler(regs*)+0x56b>
c001c900:	e9 5e 04 00 00       	jmp    c001cd63 <Vm::faultHandler(regs*)+0x5dc>
c001c905:	80 fa ef             	cmp    dl,0xef
c001c908:	0f 84 3c 04 00 00    	je     c001cd4a <Vm::faultHandler(regs*)+0x5c3>
c001c90e:	77 28                	ja     c001c938 <Vm::faultHandler(regs*)+0x1b1>
c001c910:	80 fa ed             	cmp    dl,0xed
c001c913:	0f 84 0a 04 00 00    	je     c001cd23 <Vm::faultHandler(regs*)+0x59c>
c001c919:	80 fa ee             	cmp    dl,0xee
c001c91c:	0f 85 41 04 00 00    	jne    c001cd63 <Vm::faultHandler(regs*)+0x5dc>
c001c922:	50                   	push   eax
c001c923:	50                   	push   eax
c001c924:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001c928:	50                   	push   eax
c001c929:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001c92d:	50                   	push   eax
c001c92e:	e8 00 fc ff ff       	call   c001c533 <Vm::outbv(unsigned short, unsigned char)>
c001c933:	e9 0a 04 00 00       	jmp    c001cd42 <Vm::faultHandler(regs*)+0x5bb>
c001c938:	80 fa fa             	cmp    dl,0xfa
c001c93b:	0f 84 5d 01 00 00    	je     c001ca9e <Vm::faultHandler(regs*)+0x317>
c001c941:	80 fa fb             	cmp    dl,0xfb
c001c944:	0f 84 62 01 00 00    	je     c001caac <Vm::faultHandler(regs*)+0x325>
c001c94a:	80 fa f3             	cmp    dl,0xf3
c001c94d:	0f 85 10 04 00 00    	jne    c001cd63 <Vm::faultHandler(regs*)+0x5dc>
c001c953:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c956:	e9 c3 fe ff ff       	jmp    c001c81e <Vm::faultHandler(regs*)+0x97>
c001c95b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c95e:	b1 02                	mov    cl,0x2
c001c960:	e9 b9 fe ff ff       	jmp    c001c81e <Vm::faultHandler(regs*)+0x97>
c001c965:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c968:	b1 03                	mov    cl,0x3
c001c96a:	e9 af fe ff ff       	jmp    c001c81e <Vm::faultHandler(regs*)+0x97>
c001c96f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c972:	b1 04                	mov    cl,0x4
c001c974:	e9 a5 fe ff ff       	jmp    c001c81e <Vm::faultHandler(regs*)+0x97>
c001c979:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c97c:	b1 05                	mov    cl,0x5
c001c97e:	e9 9b fe ff ff       	jmp    c001c81e <Vm::faultHandler(regs*)+0x97>
c001c983:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c986:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001c98b:	e9 8e fe ff ff       	jmp    c001c81e <Vm::faultHandler(regs*)+0x97>
c001c990:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c993:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001c998:	e9 81 fe ff ff       	jmp    c001c81e <Vm::faultHandler(regs*)+0x97>
c001c99d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c9a0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c9a4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001c9a9:	74 30                	je     c001c9db <Vm::faultHandler(regs*)+0x254>
c001c9ab:	83 e9 04             	sub    ecx,0x4
c001c9ae:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001c9b4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001c9ba:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001c9bd:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001c9c0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c9c6:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001c9ca:	0f 84 8c 03 00 00    	je     c001cd5c <Vm::faultHandler(regs*)+0x5d5>
c001c9d0:	80 ce 02             	or     dh,0x2
c001c9d3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001c9d6:	e9 81 03 00 00       	jmp    c001cd5c <Vm::faultHandler(regs*)+0x5d5>
c001c9db:	83 e9 02             	sub    ecx,0x2
c001c9de:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001c9e4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001c9e7:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001c9eb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c9f1:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001c9f5:	74 05                	je     c001c9fc <Vm::faultHandler(regs*)+0x275>
c001c9f7:	80 ce 02             	or     dh,0x2
c001c9fa:	eb 03                	jmp    c001c9ff <Vm::faultHandler(regs*)+0x278>
c001c9fc:	80 e6 fd             	and    dh,0xfd
c001c9ff:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ca03:	e9 54 03 00 00       	jmp    c001cd5c <Vm::faultHandler(regs*)+0x5d5>
c001ca08:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ca0d:	74 2a                	je     c001ca39 <Vm::faultHandler(regs*)+0x2b2>
c001ca0f:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca11:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ca17:	81 ca 00 02 02 00    	or     edx,0x20200
c001ca1d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ca20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca22:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ca28:	c1 e8 09             	shr    eax,0x9
c001ca2b:	83 e0 01             	and    eax,0x1
c001ca2e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ca31:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ca34:	83 c0 04             	add    eax,0x4
c001ca37:	eb 25                	jmp    c001ca5e <Vm::faultHandler(regs*)+0x2d7>
c001ca39:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ca3c:	81 ca 00 02 02 00    	or     edx,0x20200
c001ca42:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ca45:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ca48:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ca4e:	66 c1 e8 09          	shr    ax,0x9
c001ca52:	83 e0 01             	and    eax,0x1
c001ca55:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ca58:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ca5b:	83 c0 02             	add    eax,0x2
c001ca5e:	25 ff ff 00 00       	and    eax,0xffff
c001ca63:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ca66:	e9 f1 02 00 00       	jmp    c001cd5c <Vm::faultHandler(regs*)+0x5d5>
c001ca6b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001ca6f:	3c ff                	cmp    al,0xff
c001ca71:	75 10                	jne    c001ca83 <Vm::faultHandler(regs*)+0x2fc>
c001ca73:	83 ec 0c             	sub    esp,0xc
c001ca76:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ca79:	e8 8c f9 ff ff       	call   c001c40a <Thr::terminateFromIRQ(int)>
c001ca7e:	e9 c2 02 00 00       	jmp    c001cd45 <Vm::faultHandler(regs*)+0x5be>
c001ca83:	83 ec 0c             	sub    esp,0xc
c001ca86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca8e:	57                   	push   edi
c001ca8f:	50                   	push   eax
c001ca90:	53                   	push   ebx
c001ca91:	e8 f3 fb ff ff       	call   c001c689 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ca96:	83 c4 20             	add    esp,0x20
c001ca99:	e9 c1 02 00 00       	jmp    c001cd5f <Vm::faultHandler(regs*)+0x5d8>
c001ca9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caa3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001caa7:	e9 b0 02 00 00       	jmp    c001cd5c <Vm::faultHandler(regs*)+0x5d5>
c001caac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cab1:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001cab5:	e9 a2 02 00 00       	jmp    c001cd5c <Vm::faultHandler(regs*)+0x5d5>
c001caba:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cabf:	74 0d                	je     c001cace <Vm::faultHandler(regs*)+0x347>
c001cac1:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001cac8:	0f 87 e9 02 00 00    	ja     c001cdb7 <Vm::faultHandler(regs*)+0x630>
c001cace:	83 ec 0c             	sub    esp,0xc
c001cad1:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001cad4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cad8:	50                   	push   eax
c001cad9:	e8 4f fa ff ff       	call   c001c52d <Vm::inbv(unsigned short)>
c001cade:	83 c4 0c             	add    esp,0xc
c001cae1:	0f b6 c0             	movzx  eax,al
c001cae4:	0f b7 c9             	movzx  ecx,cx
c001cae7:	50                   	push   eax
c001cae8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001caec:	50                   	push   eax
c001caed:	51                   	push   ecx
c001caee:	e8 54 fc ff ff       	call   c001c747 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001caf3:	83 c4 10             	add    esp,0x10
c001caf6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001caf9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cafd:	74 03                	je     c001cb02 <Vm::faultHandler(regs*)+0x37b>
c001caff:	48                   	dec    eax
c001cb00:	eb 01                	jmp    c001cb03 <Vm::faultHandler(regs*)+0x37c>
c001cb02:	40                   	inc    eax
c001cb03:	0f b7 c0             	movzx  eax,ax
c001cb06:	eb 70                	jmp    c001cb78 <Vm::faultHandler(regs*)+0x3f1>
c001cb08:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cb0b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001cb0e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cb13:	74 0c                	je     c001cb21 <Vm::faultHandler(regs*)+0x39a>
c001cb15:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cb1b:	0f 87 96 02 00 00    	ja     c001cdb7 <Vm::faultHandler(regs*)+0x630>
c001cb21:	0f b7 c9             	movzx  ecx,cx
c001cb24:	0f b7 f6             	movzx  esi,si
c001cb27:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cb2a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cb2f:	74 20                	je     c001cb51 <Vm::faultHandler(regs*)+0x3ca>
c001cb31:	ed                   	in     eax,dx
c001cb32:	55                   	push   ebp
c001cb33:	50                   	push   eax
c001cb34:	51                   	push   ecx
c001cb35:	56                   	push   esi
c001cb36:	e8 37 fc ff ff       	call   c001c772 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001cb3b:	83 c4 10             	add    esp,0x10
c001cb3e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb41:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb45:	74 05                	je     c001cb4c <Vm::faultHandler(regs*)+0x3c5>
c001cb47:	83 e8 04             	sub    eax,0x4
c001cb4a:	eb 27                	jmp    c001cb73 <Vm::faultHandler(regs*)+0x3ec>
c001cb4c:	83 c0 04             	add    eax,0x4
c001cb4f:	eb 22                	jmp    c001cb73 <Vm::faultHandler(regs*)+0x3ec>
c001cb51:	66 ed                	in     ax,dx
c001cb53:	0f b7 c0             	movzx  eax,ax
c001cb56:	57                   	push   edi
c001cb57:	50                   	push   eax
c001cb58:	51                   	push   ecx
c001cb59:	56                   	push   esi
c001cb5a:	e8 fd fb ff ff       	call   c001c75c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001cb5f:	83 c4 10             	add    esp,0x10
c001cb62:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb65:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb69:	74 05                	je     c001cb70 <Vm::faultHandler(regs*)+0x3e9>
c001cb6b:	83 e8 02             	sub    eax,0x2
c001cb6e:	eb 03                	jmp    c001cb73 <Vm::faultHandler(regs*)+0x3ec>
c001cb70:	83 c0 02             	add    eax,0x2
c001cb73:	25 ff ff 00 00       	and    eax,0xffff
c001cb78:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001cb7b:	e9 dc 01 00 00       	jmp    c001cd5c <Vm::faultHandler(regs*)+0x5d5>
c001cb80:	49                   	dec    ecx
c001cb81:	80 f9 05             	cmp    cl,0x5
c001cb84:	77 24                	ja     c001cbaa <Vm::faultHandler(regs*)+0x423>
c001cb86:	0f b6 c9             	movzx  ecx,cl
c001cb89:	ff 24 8d 2c 8a 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd75d4]
c001cb90:	0f b7 f5             	movzx  esi,bp
c001cb93:	eb 15                	jmp    c001cbaa <Vm::faultHandler(regs*)+0x423>
c001cb95:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001cb99:	eb 0f                	jmp    c001cbaa <Vm::faultHandler(regs*)+0x423>
c001cb9b:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001cb9f:	eb 09                	jmp    c001cbaa <Vm::faultHandler(regs*)+0x423>
c001cba1:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001cba5:	eb 03                	jmp    c001cbaa <Vm::faultHandler(regs*)+0x423>
c001cba7:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001cbaa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cbad:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cbb2:	74 0b                	je     c001cbbf <Vm::faultHandler(regs*)+0x438>
c001cbb4:	3d ff ff 00 00       	cmp    eax,0xffff
c001cbb9:	0f 87 f8 01 00 00    	ja     c001cdb7 <Vm::faultHandler(regs*)+0x630>
c001cbbf:	0f b7 c0             	movzx  eax,ax
c001cbc2:	52                   	push   edx
c001cbc3:	52                   	push   edx
c001cbc4:	50                   	push   eax
c001cbc5:	56                   	push   esi
c001cbc6:	e8 48 fb ff ff       	call   c001c713 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001cbcb:	59                   	pop    ecx
c001cbcc:	0f b6 c0             	movzx  eax,al
c001cbcf:	5e                   	pop    esi
c001cbd0:	50                   	push   eax
c001cbd1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cbd5:	50                   	push   eax
c001cbd6:	e8 58 f9 ff ff       	call   c001c533 <Vm::outbv(unsigned short, unsigned char)>
c001cbdb:	83 c4 10             	add    esp,0x10
c001cbde:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cbe1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cbe5:	74 03                	je     c001cbea <Vm::faultHandler(regs*)+0x463>
c001cbe7:	48                   	dec    eax
c001cbe8:	eb 01                	jmp    c001cbeb <Vm::faultHandler(regs*)+0x464>
c001cbea:	40                   	inc    eax
c001cbeb:	0f b7 c0             	movzx  eax,ax
c001cbee:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001cbf1:	e9 66 01 00 00       	jmp    c001cd5c <Vm::faultHandler(regs*)+0x5d5>
c001cbf6:	49                   	dec    ecx
c001cbf7:	80 f9 05             	cmp    cl,0x5
c001cbfa:	77 1f                	ja     c001cc1b <Vm::faultHandler(regs*)+0x494>
c001cbfc:	0f b6 c9             	movzx  ecx,cl
c001cbff:	ff 24 8d 44 8a 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd75bc]
c001cc06:	89 ee                	mov    esi,ebp
c001cc08:	eb 11                	jmp    c001cc1b <Vm::faultHandler(regs*)+0x494>
c001cc0a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001cc0d:	eb 0c                	jmp    c001cc1b <Vm::faultHandler(regs*)+0x494>
c001cc0f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cc12:	eb 07                	jmp    c001cc1b <Vm::faultHandler(regs*)+0x494>
c001cc14:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001cc17:	eb 02                	jmp    c001cc1b <Vm::faultHandler(regs*)+0x494>
c001cc19:	8b 33                	mov    esi,DWORD PTR [ebx]
c001cc1b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001cc1e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cc23:	74 0c                	je     c001cc31 <Vm::faultHandler(regs*)+0x4aa>
c001cc25:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cc2b:	0f 87 86 01 00 00    	ja     c001cdb7 <Vm::faultHandler(regs*)+0x630>
c001cc31:	0f b7 d6             	movzx  edx,si
c001cc34:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001cc37:	0f b7 c1             	movzx  eax,cx
c001cc3a:	81 e7 00 04 00 00    	and    edi,0x400
c001cc40:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001cc43:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cc48:	74 1d                	je     c001cc67 <Vm::faultHandler(regs*)+0x4e0>
c001cc4a:	55                   	push   ebp
c001cc4b:	55                   	push   ebp
c001cc4c:	50                   	push   eax
c001cc4d:	52                   	push   edx
c001cc4e:	e8 e3 fa ff ff       	call   c001c736 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001cc53:	83 c4 10             	add    esp,0x10
c001cc56:	89 f2                	mov    edx,esi
c001cc58:	ef                   	out    dx,eax
c001cc59:	85 ff                	test   edi,edi
c001cc5b:	74 05                	je     c001cc62 <Vm::faultHandler(regs*)+0x4db>
c001cc5d:	83 e9 04             	sub    ecx,0x4
c001cc60:	eb 21                	jmp    c001cc83 <Vm::faultHandler(regs*)+0x4fc>
c001cc62:	83 c1 04             	add    ecx,0x4
c001cc65:	eb 1c                	jmp    c001cc83 <Vm::faultHandler(regs*)+0x4fc>
c001cc67:	55                   	push   ebp
c001cc68:	55                   	push   ebp
c001cc69:	50                   	push   eax
c001cc6a:	52                   	push   edx
c001cc6b:	e8 b4 fa ff ff       	call   c001c724 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001cc70:	83 c4 10             	add    esp,0x10
c001cc73:	89 f2                	mov    edx,esi
c001cc75:	66 ef                	out    dx,ax
c001cc77:	85 ff                	test   edi,edi
c001cc79:	74 05                	je     c001cc80 <Vm::faultHandler(regs*)+0x4f9>
c001cc7b:	83 e9 02             	sub    ecx,0x2
c001cc7e:	eb 03                	jmp    c001cc83 <Vm::faultHandler(regs*)+0x4fc>
c001cc80:	83 c1 02             	add    ecx,0x2
c001cc83:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001cc89:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001cc8c:	e9 cb 00 00 00       	jmp    c001cd5c <Vm::faultHandler(regs*)+0x5d5>
c001cc91:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001cc98:	83 ec 0c             	sub    esp,0xc
c001cc9b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cc9f:	50                   	push   eax
c001cca0:	e8 88 f8 ff ff       	call   c001c52d <Vm::inbv(unsigned short)>
c001cca5:	0f b6 c0             	movzx  eax,al
c001cca8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ccab:	eb 3f                	jmp    c001ccec <Vm::faultHandler(regs*)+0x565>
c001ccad:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ccb2:	74 07                	je     c001ccbb <Vm::faultHandler(regs*)+0x534>
c001ccb4:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001ccb8:	ed                   	in     eax,dx
c001ccb9:	eb 14                	jmp    c001cccf <Vm::faultHandler(regs*)+0x548>
c001ccbb:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001ccbe:	66 31 c9             	xor    cx,cx
c001ccc1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001ccc4:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001ccc8:	66 ed                	in     ax,dx
c001ccca:	0f b7 c0             	movzx  eax,ax
c001cccd:	09 c8                	or     eax,ecx
c001cccf:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ccd2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ccd6:	e9 84 00 00 00       	jmp    c001cd5f <Vm::faultHandler(regs*)+0x5d8>
c001ccdb:	52                   	push   edx
c001ccdc:	52                   	push   edx
c001ccdd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001cce1:	50                   	push   eax
c001cce2:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cce6:	50                   	push   eax
c001cce7:	e8 47 f8 ff ff       	call   c001c533 <Vm::outbv(unsigned short, unsigned char)>
c001ccec:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ccf0:	eb 53                	jmp    c001cd45 <Vm::faultHandler(regs*)+0x5be>
c001ccf2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ccf5:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001ccf9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ccfe:	74 03                	je     c001cd03 <Vm::faultHandler(regs*)+0x57c>
c001cd00:	ef                   	out    dx,eax
c001cd01:	eb cf                	jmp    c001ccd2 <Vm::faultHandler(regs*)+0x54b>
c001cd03:	66 ef                	out    dx,ax
c001cd05:	eb cb                	jmp    c001ccd2 <Vm::faultHandler(regs*)+0x54b>
c001cd07:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001cd0e:	83 ec 0c             	sub    esp,0xc
c001cd11:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cd15:	50                   	push   eax
c001cd16:	e8 12 f8 ff ff       	call   c001c52d <Vm::inbv(unsigned short)>
c001cd1b:	0f b6 c0             	movzx  eax,al
c001cd1e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001cd21:	eb 1f                	jmp    c001cd42 <Vm::faultHandler(regs*)+0x5bb>
c001cd23:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cd26:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd2b:	74 03                	je     c001cd30 <Vm::faultHandler(regs*)+0x5a9>
c001cd2d:	ed                   	in     eax,dx
c001cd2e:	eb 0d                	jmp    c001cd3d <Vm::faultHandler(regs*)+0x5b6>
c001cd30:	66 ed                	in     ax,dx
c001cd32:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001cd35:	0f b7 c0             	movzx  eax,ax
c001cd38:	66 31 d2             	xor    dx,dx
c001cd3b:	09 d0                	or     eax,edx
c001cd3d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cd40:	eb 1a                	jmp    c001cd5c <Vm::faultHandler(regs*)+0x5d5>
c001cd42:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cd45:	83 c4 10             	add    esp,0x10
c001cd48:	eb 15                	jmp    c001cd5f <Vm::faultHandler(regs*)+0x5d8>
c001cd4a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd4d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cd50:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd55:	74 03                	je     c001cd5a <Vm::faultHandler(regs*)+0x5d3>
c001cd57:	ef                   	out    dx,eax
c001cd58:	eb 02                	jmp    c001cd5c <Vm::faultHandler(regs*)+0x5d5>
c001cd5a:	66 ef                	out    dx,ax
c001cd5c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cd5f:	b0 01                	mov    al,0x1
c001cd61:	eb 56                	jmp    c001cdb9 <Vm::faultHandler(regs*)+0x632>
c001cd63:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001cd67:	50                   	push   eax
c001cd68:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001cd6c:	50                   	push   eax
c001cd6d:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001cd71:	50                   	push   eax
c001cd72:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001cd76:	50                   	push   eax
c001cd77:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cd7b:	50                   	push   eax
c001cd7c:	52                   	push   edx
c001cd7d:	52                   	push   edx
c001cd7e:	68 fd 89 02 c0       	push   0xc00289fd
c001cd83:	e8 bd 54 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001cd88:	83 c4 20             	add    esp,0x20
c001cd8b:	83 ec 0c             	sub    esp,0xc
c001cd8e:	6a 60                	push   0x60
c001cd90:	e8 98 f7 ff ff       	call   c001c52d <Vm::inbv(unsigned short)>
c001cd95:	83 c4 10             	add    esp,0x10
c001cd98:	3c 1c                	cmp    al,0x1c
c001cd9a:	74 04                	je     c001cda0 <Vm::faultHandler(regs*)+0x619>
c001cd9c:	3c 5a                	cmp    al,0x5a
c001cd9e:	75 eb                	jne    c001cd8b <Vm::faultHandler(regs*)+0x604>
c001cda0:	3c 5a                	cmp    al,0x5a
c001cda2:	74 04                	je     c001cda8 <Vm::faultHandler(regs*)+0x621>
c001cda4:	3c 1c                	cmp    al,0x1c
c001cda6:	75 0f                	jne    c001cdb7 <Vm::faultHandler(regs*)+0x630>
c001cda8:	83 ec 0c             	sub    esp,0xc
c001cdab:	6a 60                	push   0x60
c001cdad:	e8 7b f7 ff ff       	call   c001c52d <Vm::inbv(unsigned short)>
c001cdb2:	83 c4 10             	add    esp,0x10
c001cdb5:	eb e9                	jmp    c001cda0 <Vm::faultHandler(regs*)+0x619>
c001cdb7:	31 c0                	xor    eax,eax
c001cdb9:	83 c4 1c             	add    esp,0x1c
c001cdbc:	5b                   	pop    ebx
c001cdbd:	5e                   	pop    esi
c001cdbe:	5f                   	pop    edi
c001cdbf:	5d                   	pop    ebp
c001cdc0:	c3                   	ret    

c001cdc1 <Vm::fpuInternalTo32(unsigned long long)>:
c001cdc1:	57                   	push   edi
c001cdc2:	56                   	push   esi
c001cdc3:	53                   	push   ebx
c001cdc4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cdc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdcc:	89 d6                	mov    esi,edx
c001cdce:	89 d7                	mov    edi,edx
c001cdd0:	89 c1                	mov    ecx,eax
c001cdd2:	c1 ef 14             	shr    edi,0x14
c001cdd5:	89 d3                	mov    ebx,edx
c001cdd7:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001cddd:	31 d2                	xor    edx,edx
c001cddf:	89 f8                	mov    eax,edi
c001cde1:	81 e6 00 00 00 80    	and    esi,0x80000000
c001cde7:	bf ff 00 00 00       	mov    edi,0xff
c001cdec:	05 80 fc ff ff       	add    eax,0xfffffc80
c001cdf1:	83 d2 ff             	adc    edx,0xffffffff
c001cdf4:	39 c7                	cmp    edi,eax
c001cdf6:	bf 00 00 00 00       	mov    edi,0x0
c001cdfb:	19 d7                	sbb    edi,edx
c001cdfd:	72 15                	jb     c001ce14 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001cdff:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ce03:	c1 e0 17             	shl    eax,0x17
c001ce06:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ce0c:	09 f1                	or     ecx,esi
c001ce0e:	09 c1                	or     ecx,eax
c001ce10:	89 cf                	mov    edi,ecx
c001ce12:	eb 02                	jmp    c001ce16 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ce14:	31 ff                	xor    edi,edi
c001ce16:	89 f8                	mov    eax,edi
c001ce18:	5b                   	pop    ebx
c001ce19:	5e                   	pop    esi
c001ce1a:	5f                   	pop    edi
c001ce1b:	c3                   	ret    

c001ce1c <Vm::fpuInternalTo64(unsigned long long)>:
c001ce1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce24:	c3                   	ret    

c001ce25 <Vm::fpu32ToInternal(unsigned int)>:
c001ce25:	57                   	push   edi
c001ce26:	31 ff                	xor    edi,edi
c001ce28:	56                   	push   esi
c001ce29:	53                   	push   ebx
c001ce2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ce2e:	89 cb                	mov    ebx,ecx
c001ce30:	89 ce                	mov    esi,ecx
c001ce32:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ce38:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ce3e:	c1 e9 17             	shr    ecx,0x17
c001ce41:	89 f0                	mov    eax,esi
c001ce43:	0f b6 d1             	movzx  edx,cl
c001ce46:	81 c2 80 03 00 00    	add    edx,0x380
c001ce4c:	89 d1                	mov    ecx,edx
c001ce4e:	89 fa                	mov    edx,edi
c001ce50:	c1 e1 14             	shl    ecx,0x14
c001ce53:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ce57:	c1 e0 1d             	shl    eax,0x1d
c001ce5a:	89 d7                	mov    edi,edx
c001ce5c:	89 c6                	mov    esi,eax
c001ce5e:	89 ca                	mov    edx,ecx
c001ce60:	89 f0                	mov    eax,esi
c001ce62:	09 fa                	or     edx,edi
c001ce64:	09 da                	or     edx,ebx
c001ce66:	5b                   	pop    ebx
c001ce67:	5e                   	pop    esi
c001ce68:	5f                   	pop    edi
c001ce69:	c3                   	ret    

c001ce6a <Vm::fpu64ToInternal(unsigned long long)>:
c001ce6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce72:	c3                   	ret    

c001ce73 <Vm::fpuFloatToLong(unsigned long long)>:
c001ce73:	57                   	push   edi
c001ce74:	31 c0                	xor    eax,eax
c001ce76:	56                   	push   esi
c001ce77:	31 d2                	xor    edx,edx
c001ce79:	53                   	push   ebx
c001ce7a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ce7e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce82:	89 d9                	mov    ecx,ebx
c001ce84:	c1 e9 14             	shr    ecx,0x14
c001ce87:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ce8d:	89 cf                	mov    edi,ecx
c001ce8f:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ce95:	78 33                	js     c001ceca <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ce97:	89 d9                	mov    ecx,ebx
c001ce99:	89 f0                	mov    eax,esi
c001ce9b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001cea1:	81 c9 00 00 10 00    	or     ecx,0x100000
c001cea7:	89 ca                	mov    edx,ecx
c001cea9:	b9 34 00 00 00       	mov    ecx,0x34
c001ceae:	29 f9                	sub    ecx,edi
c001ceb0:	0f ad d0             	shrd   eax,edx,cl
c001ceb3:	d3 fa                	sar    edx,cl
c001ceb5:	f6 c1 20             	test   cl,0x20
c001ceb8:	74 05                	je     c001cebf <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ceba:	89 d0                	mov    eax,edx
c001cebc:	c1 fa 1f             	sar    edx,0x1f
c001cebf:	85 db                	test   ebx,ebx
c001cec1:	79 07                	jns    c001ceca <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001cec3:	f7 d8                	neg    eax
c001cec5:	83 d2 00             	adc    edx,0x0
c001cec8:	f7 da                	neg    edx
c001ceca:	5b                   	pop    ebx
c001cecb:	5e                   	pop    esi
c001cecc:	5f                   	pop    edi
c001cecd:	c3                   	ret    

c001cece <Vm::fpuULongToFloat(unsigned long long)>:
c001cece:	57                   	push   edi
c001cecf:	31 c9                	xor    ecx,ecx
c001ced1:	56                   	push   esi
c001ced2:	53                   	push   ebx
c001ced3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ced7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cedb:	0f ba e7 14          	bt     edi,0x14
c001cedf:	72 07                	jb     c001cee8 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001cee1:	01 f6                	add    esi,esi
c001cee3:	11 ff                	adc    edi,edi
c001cee5:	41                   	inc    ecx
c001cee6:	eb f3                	jmp    c001cedb <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001cee8:	89 fa                	mov    edx,edi
c001ceea:	89 f0                	mov    eax,esi
c001ceec:	bb 33 04 00 00       	mov    ebx,0x433
c001cef1:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001cef7:	29 cb                	sub    ebx,ecx
c001cef9:	89 d9                	mov    ecx,ebx
c001cefb:	5b                   	pop    ebx
c001cefc:	c1 e1 14             	shl    ecx,0x14
c001ceff:	5e                   	pop    esi
c001cf00:	09 ca                	or     edx,ecx
c001cf02:	5f                   	pop    edi
c001cf03:	c3                   	ret    

c001cf04 <Vm::fpuLongToFloat(long long)>:
c001cf04:	56                   	push   esi
c001cf05:	31 c0                	xor    eax,eax
c001cf07:	53                   	push   ebx
c001cf08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cf10:	39 c8                	cmp    eax,ecx
c001cf12:	19 d8                	sbb    eax,ebx
c001cf14:	7d 04                	jge    c001cf1a <Vm::fpuLongToFloat(long long)+0x16>
c001cf16:	31 f6                	xor    esi,esi
c001cf18:	eb 0c                	jmp    c001cf26 <Vm::fpuLongToFloat(long long)+0x22>
c001cf1a:	f7 d9                	neg    ecx
c001cf1c:	be 01 00 00 00       	mov    esi,0x1
c001cf21:	83 d3 00             	adc    ebx,0x0
c001cf24:	f7 db                	neg    ebx
c001cf26:	31 c0                	xor    eax,eax
c001cf28:	0f ba e3 14          	bt     ebx,0x14
c001cf2c:	72 07                	jb     c001cf35 <Vm::fpuLongToFloat(long long)+0x31>
c001cf2e:	01 c9                	add    ecx,ecx
c001cf30:	11 db                	adc    ebx,ebx
c001cf32:	40                   	inc    eax
c001cf33:	eb f3                	jmp    c001cf28 <Vm::fpuLongToFloat(long long)+0x24>
c001cf35:	ba 33 04 00 00       	mov    edx,0x433
c001cf3a:	29 c2                	sub    edx,eax
c001cf3c:	89 c8                	mov    eax,ecx
c001cf3e:	c1 e2 14             	shl    edx,0x14
c001cf41:	89 d9                	mov    ecx,ebx
c001cf43:	89 f3                	mov    ebx,esi
c001cf45:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001cf4b:	09 ca                	or     edx,ecx
c001cf4d:	84 db                	test   bl,bl
c001cf4f:	74 06                	je     c001cf57 <Vm::fpuLongToFloat(long long)+0x53>
c001cf51:	81 ca 00 00 00 80    	or     edx,0x80000000
c001cf57:	5b                   	pop    ebx
c001cf58:	5e                   	pop    esi
c001cf59:	c3                   	ret    

c001cf5a <Vm::fpuGet0()>:
c001cf5a:	31 c0                	xor    eax,eax
c001cf5c:	31 d2                	xor    edx,edx
c001cf5e:	c3                   	ret    

c001cf5f <Vm::fpuGet1()>:
c001cf5f:	b8 01 00 00 00       	mov    eax,0x1
c001cf64:	31 d2                	xor    edx,edx
c001cf66:	c3                   	ret    

c001cf67 <Vm::fpuGetPi()>:
c001cf67:	b8 03 00 00 00       	mov    eax,0x3
c001cf6c:	31 d2                	xor    edx,edx
c001cf6e:	c3                   	ret    

c001cf6f <Vm::fpuGetLog2E()>:
c001cf6f:	83 ec 18             	sub    esp,0x18
c001cf72:	68 5c 8a 02 c0       	push   0xc0028a5c
c001cf77:	e8 47 ba ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001cf7c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cf81:	31 d2                	xor    edx,edx
c001cf83:	83 c4 1c             	add    esp,0x1c
c001cf86:	c3                   	ret    

c001cf87 <Vm::fpuGetLogE2()>:
c001cf87:	83 ec 18             	sub    esp,0x18
c001cf8a:	68 68 8a 02 c0       	push   0xc0028a68
c001cf8f:	e8 2f ba ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001cf94:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cf99:	31 d2                	xor    edx,edx
c001cf9b:	83 c4 1c             	add    esp,0x1c
c001cf9e:	c3                   	ret    

c001cf9f <Vm::fpuGetLog210()>:
c001cf9f:	83 ec 18             	sub    esp,0x18
c001cfa2:	68 74 8a 02 c0       	push   0xc0028a74
c001cfa7:	e8 17 ba ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001cfac:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfb1:	31 d2                	xor    edx,edx
c001cfb3:	83 c4 1c             	add    esp,0x1c
c001cfb6:	c3                   	ret    

c001cfb7 <Vm::fpuGetLog102()>:
c001cfb7:	83 ec 18             	sub    esp,0x18
c001cfba:	68 81 8a 02 c0       	push   0xc0028a81
c001cfbf:	e8 ff b9 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001cfc4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfc9:	31 d2                	xor    edx,edx
c001cfcb:	83 c4 1c             	add    esp,0x1c
c001cfce:	c3                   	ret    

c001cfcf <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001cfcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfd3:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001cfd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cfdb:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001cfdf:	0f 92 c0             	setb   al
c001cfe2:	c3                   	ret    

c001cfe3 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001cfe3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cfe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfeb:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001cfef:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001cff3:	09 c2                	or     edx,eax
c001cff5:	0f 94 c0             	sete   al
c001cff8:	c3                   	ret    

c001cff9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001cff9:	57                   	push   edi
c001cffa:	56                   	push   esi
c001cffb:	53                   	push   ebx
c001cffc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d000:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d004:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d008:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d00c:	57                   	push   edi
c001d00d:	56                   	push   esi
c001d00e:	53                   	push   ebx
c001d00f:	51                   	push   ecx
c001d010:	e8 ce ff ff ff       	call   c001cfe3 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001d015:	83 c4 10             	add    esp,0x10
c001d018:	88 c2                	mov    dl,al
c001d01a:	31 c0                	xor    eax,eax
c001d01c:	84 d2                	test   dl,dl
c001d01e:	75 0c                	jne    c001d02c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001d020:	57                   	push   edi
c001d021:	56                   	push   esi
c001d022:	53                   	push   ebx
c001d023:	51                   	push   ecx
c001d024:	e8 a6 ff ff ff       	call   c001cfcf <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001d029:	83 c4 10             	add    esp,0x10
c001d02c:	83 e0 01             	and    eax,0x1
c001d02f:	5b                   	pop    ebx
c001d030:	88 c1                	mov    cl,al
c001d032:	83 e2 01             	and    edx,0x1
c001d035:	a0 a1 b9 02 c0       	mov    al,ds:0xc002b9a1
c001d03a:	c1 e2 06             	shl    edx,0x6
c001d03d:	83 e0 ba             	and    eax,0xffffffba
c001d040:	5e                   	pop    esi
c001d041:	09 c8                	or     eax,ecx
c001d043:	5f                   	pop    edi
c001d044:	09 d0                	or     eax,edx
c001d046:	a2 a1 b9 02 c0       	mov    ds:0xc002b9a1,al
c001d04b:	c3                   	ret    

c001d04c <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001d04c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d050:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d054:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d058:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001d05c:	c3                   	ret    

c001d05d <Vm::fpuAbs(unsigned long long)>:
c001d05d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d061:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d065:	c3                   	ret    

c001d066 <Vm::fpuChs(unsigned long long)>:
c001d066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d06a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d06e:	f7 d8                	neg    eax
c001d070:	83 d2 00             	adc    edx,0x0
c001d073:	f7 da                	neg    edx
c001d075:	c3                   	ret    

c001d076 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001d076:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001d07a:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001d07f:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001d083:	eb c7                	jmp    c001d04c <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001d085 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001d085:	53                   	push   ebx
c001d086:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d08a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d08e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d092:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d096:	0f af ca             	imul   ecx,edx
c001d099:	0f af d8             	imul   ebx,eax
c001d09c:	f7 e2                	mul    edx
c001d09e:	01 d9                	add    ecx,ebx
c001d0a0:	5b                   	pop    ebx
c001d0a1:	01 ca                	add    edx,ecx
c001d0a3:	c3                   	ret    

c001d0a4 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001d0a4:	83 ec 0c             	sub    esp,0xc
c001d0a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0b7:	e8 a0 63 00 00       	call   c002345c <__udivdi3>
c001d0bc:	83 c4 1c             	add    esp,0x1c
c001d0bf:	c3                   	ret    

c001d0c0 <Vm::fpuSquare(unsigned long long)>:
c001d0c0:	50                   	push   eax
c001d0c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0c9:	52                   	push   edx
c001d0ca:	50                   	push   eax
c001d0cb:	52                   	push   edx
c001d0cc:	50                   	push   eax
c001d0cd:	e8 b3 ff ff ff       	call   c001d085 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d0d2:	83 c4 14             	add    esp,0x14
c001d0d5:	c3                   	ret    

c001d0d6 <Vm::fpuGetReg(int)>:
c001d0d6:	83 ec 0c             	sub    esp,0xc
c001d0d9:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d0de:	76 10                	jbe    c001d0f0 <Vm::fpuGetReg(int)+0x1a>
c001d0e0:	83 ec 0c             	sub    esp,0xc
c001d0e3:	68 8e 8a 02 c0       	push   0xc0028a8e
c001d0e8:	e8 d6 b8 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001d0ed:	83 c4 10             	add    esp,0x10
c001d0f0:	a0 a1 b9 02 c0       	mov    al,ds:0xc002b9a1
c001d0f5:	b9 08 00 00 00       	mov    ecx,0x8
c001d0fa:	c0 e8 03             	shr    al,0x3
c001d0fd:	83 e0 07             	and    eax,0x7
c001d100:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d104:	99                   	cdq    
c001d105:	f7 f9                	idiv   ecx
c001d107:	8b 04 d5 a4 b9 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd465c]
c001d10e:	8b 14 d5 a8 b9 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd4658]
c001d115:	83 c4 0c             	add    esp,0xc
c001d118:	c3                   	ret    

c001d119 <Vm::fpuSetReg(int, unsigned long long)>:
c001d119:	57                   	push   edi
c001d11a:	56                   	push   esi
c001d11b:	52                   	push   edx
c001d11c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d120:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d124:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d129:	76 10                	jbe    c001d13b <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001d12b:	83 ec 0c             	sub    esp,0xc
c001d12e:	68 a1 8a 02 c0       	push   0xc0028aa1
c001d133:	e8 8b b8 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001d138:	83 c4 10             	add    esp,0x10
c001d13b:	a0 a1 b9 02 c0       	mov    al,ds:0xc002b9a1
c001d140:	b9 08 00 00 00       	mov    ecx,0x8
c001d145:	c0 e8 03             	shr    al,0x3
c001d148:	83 e0 07             	and    eax,0x7
c001d14b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d14f:	99                   	cdq    
c001d150:	f7 f9                	idiv   ecx
c001d152:	89 34 d5 a4 b9 02 c0 	mov    DWORD PTR [edx*8-0x3ffd465c],esi
c001d159:	89 3c d5 a8 b9 02 c0 	mov    DWORD PTR [edx*8-0x3ffd4658],edi
c001d160:	58                   	pop    eax
c001d161:	5e                   	pop    esi
c001d162:	5f                   	pop    edi
c001d163:	c3                   	ret    

c001d164 <Vm::fpuPush(unsigned long long)>:
c001d164:	a0 a1 b9 02 c0       	mov    al,ds:0xc002b9a1
c001d169:	c0 e8 03             	shr    al,0x3
c001d16c:	83 e0 07             	and    eax,0x7
c001d16f:	83 c0 07             	add    eax,0x7
c001d172:	88 c2                	mov    dl,al
c001d174:	83 e0 07             	and    eax,0x7
c001d177:	83 e2 07             	and    edx,0x7
c001d17a:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001d181:	8a 15 a1 b9 02 c0    	mov    dl,BYTE PTR ds:0xc002b9a1
c001d187:	83 e2 c7             	and    edx,0xffffffc7
c001d18a:	09 ca                	or     edx,ecx
c001d18c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d190:	88 15 a1 b9 02 c0    	mov    BYTE PTR ds:0xc002b9a1,dl
c001d196:	89 0c c5 a8 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4658],ecx
c001d19d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1a1:	89 14 c5 a4 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd465c],edx
c001d1a8:	a1 e4 b9 02 c0       	mov    eax,ds:0xc002b9e4
c001d1ad:	83 f8 08             	cmp    eax,0x8
c001d1b0:	75 08                	jne    c001d1ba <Vm::fpuPush(unsigned long long)+0x56>
c001d1b2:	80 0d a0 b9 02 c0 40 	or     BYTE PTR ds:0xc002b9a0,0x40
c001d1b9:	c3                   	ret    
c001d1ba:	40                   	inc    eax
c001d1bb:	a3 e4 b9 02 c0       	mov    ds:0xc002b9e4,eax
c001d1c0:	c3                   	ret    

c001d1c1 <Vm::fpuPop()>:
c001d1c1:	8a 0d a1 b9 02 c0    	mov    cl,BYTE PTR ds:0xc002b9a1
c001d1c7:	53                   	push   ebx
c001d1c8:	c0 e9 03             	shr    cl,0x3
c001d1cb:	8a 1d a1 b9 02 c0    	mov    bl,BYTE PTR ds:0xc002b9a1
c001d1d1:	83 e1 07             	and    ecx,0x7
c001d1d4:	83 e3 c7             	and    ebx,0xffffffc7
c001d1d7:	8b 04 cd a4 b9 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd465c]
c001d1de:	8b 14 cd a8 b9 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd4658]
c001d1e5:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001d1ec:	83 e1 38             	and    ecx,0x38
c001d1ef:	09 d9                	or     ecx,ebx
c001d1f1:	88 0d a1 b9 02 c0    	mov    BYTE PTR ds:0xc002b9a1,cl
c001d1f7:	8b 0d e4 b9 02 c0    	mov    ecx,DWORD PTR ds:0xc002b9e4
c001d1fd:	85 c9                	test   ecx,ecx
c001d1ff:	74 09                	je     c001d20a <Vm::fpuPop()+0x49>
c001d201:	49                   	dec    ecx
c001d202:	89 0d e4 b9 02 c0    	mov    DWORD PTR ds:0xc002b9e4,ecx
c001d208:	eb 07                	jmp    c001d211 <Vm::fpuPop()+0x50>
c001d20a:	80 0d a0 b9 02 c0 40 	or     BYTE PTR ds:0xc002b9a0,0x40
c001d211:	5b                   	pop    ebx
c001d212:	c3                   	ret    

c001d213 <Vm::x87Handler(regs*)>:
c001d213:	55                   	push   ebp
c001d214:	57                   	push   edi
c001d215:	56                   	push   esi
c001d216:	53                   	push   ebx
c001d217:	83 ec 1c             	sub    esp,0x1c
c001d21a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d21e:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001d223:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001d226:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001d22e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001d232:	50                   	push   eax
c001d233:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001d237:	50                   	push   eax
c001d238:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d23c:	50                   	push   eax
c001d23d:	53                   	push   ebx
c001d23e:	e8 85 b5 ff ff       	call   c00187c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001d243:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001d246:	83 c4 10             	add    esp,0x10
c001d249:	89 c6                	mov    esi,eax
c001d24b:	80 fa d9             	cmp    dl,0xd9
c001d24e:	0f 85 52 01 00 00    	jne    c001d3a6 <Vm::x87Handler(regs*)+0x193>
c001d254:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d258:	8d 50 20             	lea    edx,[eax+0x20]
c001d25b:	80 fa 0e             	cmp    dl,0xe
c001d25e:	0f 87 86 00 00 00    	ja     c001d2ea <Vm::x87Handler(regs*)+0xd7>
c001d264:	0f b6 d2             	movzx  edx,dl
c001d267:	ff 24 95 b4 8a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd754c]
c001d26e:	e8 e7 fc ff ff       	call   c001cf5a <Vm::fpuGet0()>
c001d273:	eb 05                	jmp    c001d27a <Vm::x87Handler(regs*)+0x67>
c001d275:	e8 e5 fc ff ff       	call   c001cf5f <Vm::fpuGet1()>
c001d27a:	57                   	push   edi
c001d27b:	57                   	push   edi
c001d27c:	52                   	push   edx
c001d27d:	50                   	push   eax
c001d27e:	e8 e1 fe ff ff       	call   c001d164 <Vm::fpuPush(unsigned long long)>
c001d283:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d287:	83 c4 10             	add    esp,0x10
c001d28a:	b0 01                	mov    al,0x1
c001d28c:	e9 e3 09 00 00       	jmp    c001dc74 <Vm::x87Handler(regs*)+0xa61>
c001d291:	83 ec 0c             	sub    esp,0xc
c001d294:	6a 00                	push   0x0
c001d296:	e8 3b fe ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d29b:	59                   	pop    ecx
c001d29c:	5e                   	pop    esi
c001d29d:	52                   	push   edx
c001d29e:	50                   	push   eax
c001d29f:	e8 c2 fd ff ff       	call   c001d066 <Vm::fpuChs(unsigned long long)>
c001d2a4:	eb 13                	jmp    c001d2b9 <Vm::x87Handler(regs*)+0xa6>
c001d2a6:	83 ec 0c             	sub    esp,0xc
c001d2a9:	6a 00                	push   0x0
c001d2ab:	e8 26 fe ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d2b0:	5f                   	pop    edi
c001d2b1:	5d                   	pop    ebp
c001d2b2:	52                   	push   edx
c001d2b3:	50                   	push   eax
c001d2b4:	e8 a4 fd ff ff       	call   c001d05d <Vm::fpuAbs(unsigned long long)>
c001d2b9:	83 c4 0c             	add    esp,0xc
c001d2bc:	52                   	push   edx
c001d2bd:	50                   	push   eax
c001d2be:	6a 00                	push   0x0
c001d2c0:	e8 54 fe ff ff       	call   c001d119 <Vm::fpuSetReg(int, unsigned long long)>
c001d2c5:	eb bc                	jmp    c001d283 <Vm::x87Handler(regs*)+0x70>
c001d2c7:	e8 d3 fc ff ff       	call   c001cf9f <Vm::fpuGetLog210()>
c001d2cc:	eb ac                	jmp    c001d27a <Vm::x87Handler(regs*)+0x67>
c001d2ce:	e8 9c fc ff ff       	call   c001cf6f <Vm::fpuGetLog2E()>
c001d2d3:	eb a5                	jmp    c001d27a <Vm::x87Handler(regs*)+0x67>
c001d2d5:	e8 8d fc ff ff       	call   c001cf67 <Vm::fpuGetPi()>
c001d2da:	eb 9e                	jmp    c001d27a <Vm::x87Handler(regs*)+0x67>
c001d2dc:	e8 d6 fc ff ff       	call   c001cfb7 <Vm::fpuGetLog102()>
c001d2e1:	eb 97                	jmp    c001d27a <Vm::x87Handler(regs*)+0x67>
c001d2e3:	e8 9f fc ff ff       	call   c001cf87 <Vm::fpuGetLogE2()>
c001d2e8:	eb 90                	jmp    c001d27a <Vm::x87Handler(regs*)+0x67>
c001d2ea:	8d 50 40             	lea    edx,[eax+0x40]
c001d2ed:	80 fa 07             	cmp    dl,0x7
c001d2f0:	77 15                	ja     c001d307 <Vm::x87Handler(regs*)+0xf4>
c001d2f2:	83 ec 0c             	sub    esp,0xc
c001d2f5:	2d c0 00 00 00       	sub    eax,0xc0
c001d2fa:	50                   	push   eax
c001d2fb:	e8 d6 fd ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d300:	59                   	pop    ecx
c001d301:	5e                   	pop    esi
c001d302:	e9 75 ff ff ff       	jmp    c001d27c <Vm::x87Handler(regs*)+0x69>
c001d307:	8d 50 38             	lea    edx,[eax+0x38]
c001d30a:	80 fa 07             	cmp    dl,0x7
c001d30d:	77 3c                	ja     c001d34b <Vm::x87Handler(regs*)+0x138>
c001d30f:	83 ec 0c             	sub    esp,0xc
c001d312:	2d c8 00 00 00       	sub    eax,0xc8
c001d317:	50                   	push   eax
c001d318:	e8 b9 fd ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d31d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d324:	89 c6                	mov    esi,eax
c001d326:	89 d7                	mov    edi,edx
c001d328:	e8 a9 fd ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d32d:	83 c4 0c             	add    esp,0xc
c001d330:	52                   	push   edx
c001d331:	50                   	push   eax
c001d332:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d336:	2d c8 00 00 00       	sub    eax,0xc8
c001d33b:	50                   	push   eax
c001d33c:	e8 d8 fd ff ff       	call   c001d119 <Vm::fpuSetReg(int, unsigned long long)>
c001d341:	83 c4 0c             	add    esp,0xc
c001d344:	57                   	push   edi
c001d345:	56                   	push   esi
c001d346:	e9 73 ff ff ff       	jmp    c001d2be <Vm::x87Handler(regs*)+0xab>
c001d34b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d34f:	84 d2                	test   dl,dl
c001d351:	75 0f                	jne    c001d362 <Vm::x87Handler(regs*)+0x14f>
c001d353:	83 ec 0c             	sub    esp,0xc
c001d356:	ff 36                	push   DWORD PTR [esi]
c001d358:	e8 c8 fa ff ff       	call   c001ce25 <Vm::fpu32ToInternal(unsigned int)>
c001d35d:	e9 bf 00 00 00       	jmp    c001d421 <Vm::x87Handler(regs*)+0x20e>
c001d362:	80 fa 03             	cmp    dl,0x3
c001d365:	75 13                	jne    c001d37a <Vm::x87Handler(regs*)+0x167>
c001d367:	e8 55 fe ff ff       	call   c001d1c1 <Vm::fpuPop()>
c001d36c:	55                   	push   ebp
c001d36d:	55                   	push   ebp
c001d36e:	52                   	push   edx
c001d36f:	50                   	push   eax
c001d370:	e8 4c fa ff ff       	call   c001cdc1 <Vm::fpuInternalTo32(unsigned long long)>
c001d375:	e9 88 00 00 00       	jmp    c001d402 <Vm::x87Handler(regs*)+0x1ef>
c001d37a:	80 fa 05             	cmp    dl,0x5
c001d37d:	75 0e                	jne    c001d38d <Vm::x87Handler(regs*)+0x17a>
c001d37f:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d382:	66 a3 a2 b9 02 c0    	mov    ds:0xc002b9a2,ax
c001d388:	e9 df 00 00 00       	jmp    c001d46c <Vm::x87Handler(regs*)+0x259>
c001d38d:	31 c0                	xor    eax,eax
c001d38f:	80 fa 07             	cmp    dl,0x7
c001d392:	0f 85 dc 08 00 00    	jne    c001dc74 <Vm::x87Handler(regs*)+0xa61>
c001d398:	66 a1 a2 b9 02 c0    	mov    ax,ds:0xc002b9a2
c001d39e:	66 89 06             	mov    WORD PTR [esi],ax
c001d3a1:	e9 c6 00 00 00       	jmp    c001d46c <Vm::x87Handler(regs*)+0x259>
c001d3a6:	80 fa d8             	cmp    dl,0xd8
c001d3a9:	0f 84 c9 00 00 00    	je     c001d478 <Vm::x87Handler(regs*)+0x265>
c001d3af:	80 fa dc             	cmp    dl,0xdc
c001d3b2:	0f 84 0d 02 00 00    	je     c001d5c5 <Vm::x87Handler(regs*)+0x3b2>
c001d3b8:	80 fa de             	cmp    dl,0xde
c001d3bb:	0f 84 cd 02 00 00    	je     c001d68e <Vm::x87Handler(regs*)+0x47b>
c001d3c1:	80 fa dd             	cmp    dl,0xdd
c001d3c4:	0f 84 5f 04 00 00    	je     c001d829 <Vm::x87Handler(regs*)+0x616>
c001d3ca:	80 fa da             	cmp    dl,0xda
c001d3cd:	0f 84 24 05 00 00    	je     c001d8f7 <Vm::x87Handler(regs*)+0x6e4>
c001d3d3:	80 fa df             	cmp    dl,0xdf
c001d3d6:	0f 84 68 05 00 00    	je     c001d944 <Vm::x87Handler(regs*)+0x731>
c001d3dc:	31 c0                	xor    eax,eax
c001d3de:	80 fa db             	cmp    dl,0xdb
c001d3e1:	0f 85 8d 08 00 00    	jne    c001dc74 <Vm::x87Handler(regs*)+0xa61>
c001d3e7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d3eb:	80 fa 03             	cmp    dl,0x3
c001d3ee:	0f 85 70 06 00 00    	jne    c001da64 <Vm::x87Handler(regs*)+0x851>
c001d3f4:	e8 c8 fd ff ff       	call   c001d1c1 <Vm::fpuPop()>
c001d3f9:	55                   	push   ebp
c001d3fa:	55                   	push   ebp
c001d3fb:	52                   	push   edx
c001d3fc:	50                   	push   eax
c001d3fd:	e8 71 fa ff ff       	call   c001ce73 <Vm::fpuFloatToLong(unsigned long long)>
c001d402:	83 c4 10             	add    esp,0x10
c001d405:	89 06                	mov    DWORD PTR [esi],eax
c001d407:	eb 63                	jmp    c001d46c <Vm::x87Handler(regs*)+0x259>
c001d409:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d40d:	84 d2                	test   dl,dl
c001d40f:	0f 85 e6 05 00 00    	jne    c001d9fb <Vm::x87Handler(regs*)+0x7e8>
c001d415:	57                   	push   edi
c001d416:	57                   	push   edi
c001d417:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d41a:	ff 36                	push   DWORD PTR [esi]
c001d41c:	e8 49 fa ff ff       	call   c001ce6a <Vm::fpu64ToInternal(unsigned long long)>
c001d421:	5e                   	pop    esi
c001d422:	5f                   	pop    edi
c001d423:	52                   	push   edx
c001d424:	50                   	push   eax
c001d425:	e8 3a fd ff ff       	call   c001d164 <Vm::fpuPush(unsigned long long)>
c001d42a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d42e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d431:	e9 51 fe ff ff       	jmp    c001d287 <Vm::x87Handler(regs*)+0x74>
c001d436:	80 fa 03             	cmp    dl,0x3
c001d439:	0f 85 d7 06 00 00    	jne    c001db16 <Vm::x87Handler(regs*)+0x903>
c001d43f:	57                   	push   edi
c001d440:	57                   	push   edi
c001d441:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d444:	ff 36                	push   DWORD PTR [esi]
c001d446:	e8 1f fa ff ff       	call   c001ce6a <Vm::fpu64ToInternal(unsigned long long)>
c001d44b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d452:	89 c6                	mov    esi,eax
c001d454:	89 d7                	mov    edi,edx
c001d456:	e8 7b fc ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d45b:	57                   	push   edi
c001d45c:	56                   	push   esi
c001d45d:	52                   	push   edx
c001d45e:	50                   	push   eax
c001d45f:	e8 95 fb ff ff       	call   c001cff9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d464:	83 c4 20             	add    esp,0x20
c001d467:	e8 55 fd ff ff       	call   c001d1c1 <Vm::fpuPop()>
c001d46c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d470:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d473:	e9 12 fe ff ff       	jmp    c001d28a <Vm::x87Handler(regs*)+0x77>
c001d478:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d47c:	8d 50 40             	lea    edx,[eax+0x40]
c001d47f:	80 fa 07             	cmp    dl,0x7
c001d482:	77 29                	ja     c001d4ad <Vm::x87Handler(regs*)+0x29a>
c001d484:	83 ec 0c             	sub    esp,0xc
c001d487:	2d c0 00 00 00       	sub    eax,0xc0
c001d48c:	50                   	push   eax
c001d48d:	e8 44 fc ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d492:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d499:	89 c6                	mov    esi,eax
c001d49b:	89 d7                	mov    edi,edx
c001d49d:	e8 34 fc ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d4a2:	57                   	push   edi
c001d4a3:	56                   	push   esi
c001d4a4:	52                   	push   edx
c001d4a5:	50                   	push   eax
c001d4a6:	e8 a1 fb ff ff       	call   c001d04c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d4ab:	eb 2f                	jmp    c001d4dc <Vm::x87Handler(regs*)+0x2c9>
c001d4ad:	8d 50 38             	lea    edx,[eax+0x38]
c001d4b0:	80 fa 07             	cmp    dl,0x7
c001d4b3:	77 2f                	ja     c001d4e4 <Vm::x87Handler(regs*)+0x2d1>
c001d4b5:	83 ec 0c             	sub    esp,0xc
c001d4b8:	2d c8 00 00 00       	sub    eax,0xc8
c001d4bd:	50                   	push   eax
c001d4be:	e8 13 fc ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d4c3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d4ca:	89 c6                	mov    esi,eax
c001d4cc:	89 d7                	mov    edi,edx
c001d4ce:	e8 03 fc ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d4d3:	57                   	push   edi
c001d4d4:	56                   	push   esi
c001d4d5:	52                   	push   edx
c001d4d6:	50                   	push   eax
c001d4d7:	e8 a9 fb ff ff       	call   c001d085 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d4dc:	83 c4 1c             	add    esp,0x1c
c001d4df:	e9 d8 fd ff ff       	jmp    c001d2bc <Vm::x87Handler(regs*)+0xa9>
c001d4e4:	8d 50 30             	lea    edx,[eax+0x30]
c001d4e7:	80 fa 07             	cmp    dl,0x7
c001d4ea:	77 0d                	ja     c001d4f9 <Vm::x87Handler(regs*)+0x2e6>
c001d4ec:	83 ec 0c             	sub    esp,0xc
c001d4ef:	2d d0 00 00 00       	sub    eax,0xd0
c001d4f4:	e9 99 03 00 00       	jmp    c001d892 <Vm::x87Handler(regs*)+0x67f>
c001d4f9:	8d 50 28             	lea    edx,[eax+0x28]
c001d4fc:	80 fa 07             	cmp    dl,0x7
c001d4ff:	77 0d                	ja     c001d50e <Vm::x87Handler(regs*)+0x2fb>
c001d501:	83 ec 0c             	sub    esp,0xc
c001d504:	2d d8 00 00 00       	sub    eax,0xd8
c001d509:	e9 c0 03 00 00       	jmp    c001d8ce <Vm::x87Handler(regs*)+0x6bb>
c001d50e:	8d 50 20             	lea    edx,[eax+0x20]
c001d511:	80 fa 07             	cmp    dl,0x7
c001d514:	77 1b                	ja     c001d531 <Vm::x87Handler(regs*)+0x31e>
c001d516:	83 ec 0c             	sub    esp,0xc
c001d519:	2d e0 00 00 00       	sub    eax,0xe0
c001d51e:	50                   	push   eax
c001d51f:	e8 b2 fb ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d524:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d52b:	89 c6                	mov    esi,eax
c001d52d:	89 d7                	mov    edi,edx
c001d52f:	eb 22                	jmp    c001d553 <Vm::x87Handler(regs*)+0x340>
c001d531:	8d 50 18             	lea    edx,[eax+0x18]
c001d534:	80 fa 07             	cmp    dl,0x7
c001d537:	77 2d                	ja     c001d566 <Vm::x87Handler(regs*)+0x353>
c001d539:	83 ec 0c             	sub    esp,0xc
c001d53c:	6a 00                	push   0x0
c001d53e:	e8 93 fb ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d543:	89 c6                	mov    esi,eax
c001d545:	89 d7                	mov    edi,edx
c001d547:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d54b:	2d e8 00 00 00       	sub    eax,0xe8
c001d550:	89 04 24             	mov    DWORD PTR [esp],eax
c001d553:	e8 7e fb ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d558:	57                   	push   edi
c001d559:	56                   	push   esi
c001d55a:	52                   	push   edx
c001d55b:	50                   	push   eax
c001d55c:	e8 15 fb ff ff       	call   c001d076 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d561:	e9 76 ff ff ff       	jmp    c001d4dc <Vm::x87Handler(regs*)+0x2c9>
c001d566:	8d 50 10             	lea    edx,[eax+0x10]
c001d569:	80 fa 07             	cmp    dl,0x7
c001d56c:	77 1b                	ja     c001d589 <Vm::x87Handler(regs*)+0x376>
c001d56e:	83 ec 0c             	sub    esp,0xc
c001d571:	2d f0 00 00 00       	sub    eax,0xf0
c001d576:	50                   	push   eax
c001d577:	e8 5a fb ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d57c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d583:	89 c6                	mov    esi,eax
c001d585:	89 d7                	mov    edi,edx
c001d587:	eb 22                	jmp    c001d5ab <Vm::x87Handler(regs*)+0x398>
c001d589:	3c f7                	cmp    al,0xf7
c001d58b:	0f 86 d1 03 00 00    	jbe    c001d962 <Vm::x87Handler(regs*)+0x74f>
c001d591:	83 ec 0c             	sub    esp,0xc
c001d594:	6a 00                	push   0x0
c001d596:	e8 3b fb ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d59b:	89 c6                	mov    esi,eax
c001d59d:	89 d7                	mov    edi,edx
c001d59f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d5a3:	2d f8 00 00 00       	sub    eax,0xf8
c001d5a8:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5ab:	e8 26 fb ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d5b0:	57                   	push   edi
c001d5b1:	56                   	push   esi
c001d5b2:	52                   	push   edx
c001d5b3:	50                   	push   eax
c001d5b4:	e8 eb fa ff ff       	call   c001d0a4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d5b9:	83 c4 1c             	add    esp,0x1c
c001d5bc:	52                   	push   edx
c001d5bd:	50                   	push   eax
c001d5be:	6a 00                	push   0x0
c001d5c0:	e9 51 02 00 00       	jmp    c001d816 <Vm::x87Handler(regs*)+0x603>
c001d5c5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d5c9:	8d 50 40             	lea    edx,[eax+0x40]
c001d5cc:	80 fa 07             	cmp    dl,0x7
c001d5cf:	77 37                	ja     c001d608 <Vm::x87Handler(regs*)+0x3f5>
c001d5d1:	83 ec 0c             	sub    esp,0xc
c001d5d4:	2d c0 00 00 00       	sub    eax,0xc0
c001d5d9:	50                   	push   eax
c001d5da:	e8 f7 fa ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d5df:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d5e6:	89 c6                	mov    esi,eax
c001d5e8:	89 d7                	mov    edi,edx
c001d5ea:	e8 e7 fa ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d5ef:	57                   	push   edi
c001d5f0:	56                   	push   esi
c001d5f1:	52                   	push   edx
c001d5f2:	50                   	push   eax
c001d5f3:	e8 54 fa ff ff       	call   c001d04c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d5f8:	83 c4 1c             	add    esp,0x1c
c001d5fb:	52                   	push   edx
c001d5fc:	50                   	push   eax
c001d5fd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d601:	2d c0 00 00 00       	sub    eax,0xc0
c001d606:	eb 3d                	jmp    c001d645 <Vm::x87Handler(regs*)+0x432>
c001d608:	8d 50 38             	lea    edx,[eax+0x38]
c001d60b:	80 fa 07             	cmp    dl,0x7
c001d60e:	77 3b                	ja     c001d64b <Vm::x87Handler(regs*)+0x438>
c001d610:	83 ec 0c             	sub    esp,0xc
c001d613:	2d c8 00 00 00       	sub    eax,0xc8
c001d618:	50                   	push   eax
c001d619:	e8 b8 fa ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d61e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d625:	89 c6                	mov    esi,eax
c001d627:	89 d7                	mov    edi,edx
c001d629:	e8 a8 fa ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d62e:	57                   	push   edi
c001d62f:	56                   	push   esi
c001d630:	52                   	push   edx
c001d631:	50                   	push   eax
c001d632:	e8 4e fa ff ff       	call   c001d085 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d637:	83 c4 1c             	add    esp,0x1c
c001d63a:	52                   	push   edx
c001d63b:	50                   	push   eax
c001d63c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d640:	2d c8 00 00 00       	sub    eax,0xc8
c001d645:	50                   	push   eax
c001d646:	e9 75 fc ff ff       	jmp    c001d2c0 <Vm::x87Handler(regs*)+0xad>
c001d64b:	83 c0 18             	add    eax,0x18
c001d64e:	3c 07                	cmp    al,0x7
c001d650:	0f 87 3b 04 00 00    	ja     c001da91 <Vm::x87Handler(regs*)+0x87e>
c001d656:	83 ec 0c             	sub    esp,0xc
c001d659:	6a 00                	push   0x0
c001d65b:	e8 76 fa ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d660:	89 c6                	mov    esi,eax
c001d662:	89 d7                	mov    edi,edx
c001d664:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d668:	2d e8 00 00 00       	sub    eax,0xe8
c001d66d:	89 04 24             	mov    DWORD PTR [esp],eax
c001d670:	e8 61 fa ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d675:	57                   	push   edi
c001d676:	56                   	push   esi
c001d677:	52                   	push   edx
c001d678:	50                   	push   eax
c001d679:	e8 f8 f9 ff ff       	call   c001d076 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d67e:	83 c4 1c             	add    esp,0x1c
c001d681:	52                   	push   edx
c001d682:	50                   	push   eax
c001d683:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d687:	2d e8 00 00 00       	sub    eax,0xe8
c001d68c:	eb b7                	jmp    c001d645 <Vm::x87Handler(regs*)+0x432>
c001d68e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d692:	8d 50 40             	lea    edx,[eax+0x40]
c001d695:	80 fa 07             	cmp    dl,0x7
c001d698:	77 3a                	ja     c001d6d4 <Vm::x87Handler(regs*)+0x4c1>
c001d69a:	83 ec 0c             	sub    esp,0xc
c001d69d:	2d c0 00 00 00       	sub    eax,0xc0
c001d6a2:	50                   	push   eax
c001d6a3:	e8 2e fa ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d6a8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d6af:	89 c6                	mov    esi,eax
c001d6b1:	89 d7                	mov    edi,edx
c001d6b3:	e8 1e fa ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d6b8:	57                   	push   edi
c001d6b9:	56                   	push   esi
c001d6ba:	52                   	push   edx
c001d6bb:	50                   	push   eax
c001d6bc:	e8 8b f9 ff ff       	call   c001d04c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d6c1:	83 c4 1c             	add    esp,0x1c
c001d6c4:	52                   	push   edx
c001d6c5:	50                   	push   eax
c001d6c6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6ca:	2d c0 00 00 00       	sub    eax,0xc0
c001d6cf:	e9 9e 01 00 00       	jmp    c001d872 <Vm::x87Handler(regs*)+0x65f>
c001d6d4:	8d 50 20             	lea    edx,[eax+0x20]
c001d6d7:	80 fa 07             	cmp    dl,0x7
c001d6da:	77 3a                	ja     c001d716 <Vm::x87Handler(regs*)+0x503>
c001d6dc:	83 ec 0c             	sub    esp,0xc
c001d6df:	2d e0 00 00 00       	sub    eax,0xe0
c001d6e4:	50                   	push   eax
c001d6e5:	e8 ec f9 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d6ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d6f1:	89 c6                	mov    esi,eax
c001d6f3:	89 d7                	mov    edi,edx
c001d6f5:	e8 dc f9 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d6fa:	57                   	push   edi
c001d6fb:	56                   	push   esi
c001d6fc:	52                   	push   edx
c001d6fd:	50                   	push   eax
c001d6fe:	e8 73 f9 ff ff       	call   c001d076 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d703:	83 c4 1c             	add    esp,0x1c
c001d706:	52                   	push   edx
c001d707:	50                   	push   eax
c001d708:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d70c:	2d e0 00 00 00       	sub    eax,0xe0
c001d711:	e9 5c 01 00 00       	jmp    c001d872 <Vm::x87Handler(regs*)+0x65f>
c001d716:	8d 50 18             	lea    edx,[eax+0x18]
c001d719:	80 fa 07             	cmp    dl,0x7
c001d71c:	77 3b                	ja     c001d759 <Vm::x87Handler(regs*)+0x546>
c001d71e:	83 ec 0c             	sub    esp,0xc
c001d721:	6a 00                	push   0x0
c001d723:	e8 ae f9 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d728:	89 c6                	mov    esi,eax
c001d72a:	89 d7                	mov    edi,edx
c001d72c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d730:	2d e8 00 00 00       	sub    eax,0xe8
c001d735:	89 04 24             	mov    DWORD PTR [esp],eax
c001d738:	e8 99 f9 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d73d:	57                   	push   edi
c001d73e:	56                   	push   esi
c001d73f:	52                   	push   edx
c001d740:	50                   	push   eax
c001d741:	e8 30 f9 ff ff       	call   c001d076 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d746:	83 c4 1c             	add    esp,0x1c
c001d749:	52                   	push   edx
c001d74a:	50                   	push   eax
c001d74b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d74f:	2d e8 00 00 00       	sub    eax,0xe8
c001d754:	e9 19 01 00 00       	jmp    c001d872 <Vm::x87Handler(regs*)+0x65f>
c001d759:	8d 50 38             	lea    edx,[eax+0x38]
c001d75c:	80 fa 07             	cmp    dl,0x7
c001d75f:	77 37                	ja     c001d798 <Vm::x87Handler(regs*)+0x585>
c001d761:	83 ec 0c             	sub    esp,0xc
c001d764:	2d c8 00 00 00       	sub    eax,0xc8
c001d769:	50                   	push   eax
c001d76a:	e8 67 f9 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d76f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d776:	89 c6                	mov    esi,eax
c001d778:	89 d7                	mov    edi,edx
c001d77a:	e8 57 f9 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d77f:	57                   	push   edi
c001d780:	56                   	push   esi
c001d781:	52                   	push   edx
c001d782:	50                   	push   eax
c001d783:	e8 fd f8 ff ff       	call   c001d085 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d788:	83 c4 1c             	add    esp,0x1c
c001d78b:	52                   	push   edx
c001d78c:	50                   	push   eax
c001d78d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d791:	2d c8 00 00 00       	sub    eax,0xc8
c001d796:	eb 7d                	jmp    c001d815 <Vm::x87Handler(regs*)+0x602>
c001d798:	3c f7                	cmp    al,0xf7
c001d79a:	76 38                	jbe    c001d7d4 <Vm::x87Handler(regs*)+0x5c1>
c001d79c:	83 ec 0c             	sub    esp,0xc
c001d79f:	6a 00                	push   0x0
c001d7a1:	e8 30 f9 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d7a6:	89 c6                	mov    esi,eax
c001d7a8:	89 d7                	mov    edi,edx
c001d7aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7ae:	2d f8 00 00 00       	sub    eax,0xf8
c001d7b3:	89 04 24             	mov    DWORD PTR [esp],eax
c001d7b6:	e8 1b f9 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d7bb:	57                   	push   edi
c001d7bc:	56                   	push   esi
c001d7bd:	52                   	push   edx
c001d7be:	50                   	push   eax
c001d7bf:	e8 e0 f8 ff ff       	call   c001d0a4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d7c4:	83 c4 1c             	add    esp,0x1c
c001d7c7:	52                   	push   edx
c001d7c8:	50                   	push   eax
c001d7c9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7cd:	2d f8 00 00 00       	sub    eax,0xf8
c001d7d2:	eb 41                	jmp    c001d815 <Vm::x87Handler(regs*)+0x602>
c001d7d4:	8d 50 10             	lea    edx,[eax+0x10]
c001d7d7:	80 fa 07             	cmp    dl,0x7
c001d7da:	0f 87 5a 01 00 00    	ja     c001d93a <Vm::x87Handler(regs*)+0x727>
c001d7e0:	83 ec 0c             	sub    esp,0xc
c001d7e3:	2d f0 00 00 00       	sub    eax,0xf0
c001d7e8:	50                   	push   eax
c001d7e9:	e8 e8 f8 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d7ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d7f5:	89 c6                	mov    esi,eax
c001d7f7:	89 d7                	mov    edi,edx
c001d7f9:	e8 d8 f8 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d7fe:	57                   	push   edi
c001d7ff:	56                   	push   esi
c001d800:	52                   	push   edx
c001d801:	50                   	push   eax
c001d802:	e8 9d f8 ff ff       	call   c001d0a4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d807:	83 c4 1c             	add    esp,0x1c
c001d80a:	52                   	push   edx
c001d80b:	50                   	push   eax
c001d80c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d810:	2d f0 00 00 00       	sub    eax,0xf0
c001d815:	50                   	push   eax
c001d816:	e8 fe f8 ff ff       	call   c001d119 <Vm::fpuSetReg(int, unsigned long long)>
c001d81b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d81f:	e8 9d f9 ff ff       	call   c001d1c1 <Vm::fpuPop()>
c001d824:	e9 5e fa ff ff       	jmp    c001d287 <Vm::x87Handler(regs*)+0x74>
c001d829:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d82d:	8d 50 30             	lea    edx,[eax+0x30]
c001d830:	80 fa 07             	cmp    dl,0x7
c001d833:	77 1d                	ja     c001d852 <Vm::x87Handler(regs*)+0x63f>
c001d835:	83 ec 0c             	sub    esp,0xc
c001d838:	6a 00                	push   0x0
c001d83a:	e8 97 f8 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d83f:	83 c4 0c             	add    esp,0xc
c001d842:	52                   	push   edx
c001d843:	50                   	push   eax
c001d844:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d848:	2d d0 00 00 00       	sub    eax,0xd0
c001d84d:	e9 f3 fd ff ff       	jmp    c001d645 <Vm::x87Handler(regs*)+0x432>
c001d852:	8d 50 28             	lea    edx,[eax+0x28]
c001d855:	80 fa 07             	cmp    dl,0x7
c001d858:	77 28                	ja     c001d882 <Vm::x87Handler(regs*)+0x66f>
c001d85a:	83 ec 0c             	sub    esp,0xc
c001d85d:	6a 00                	push   0x0
c001d85f:	e8 72 f8 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d864:	83 c4 0c             	add    esp,0xc
c001d867:	52                   	push   edx
c001d868:	50                   	push   eax
c001d869:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d86d:	2d d8 00 00 00       	sub    eax,0xd8
c001d872:	50                   	push   eax
c001d873:	e8 a1 f8 ff ff       	call   c001d119 <Vm::fpuSetReg(int, unsigned long long)>
c001d878:	e8 44 f9 ff ff       	call   c001d1c1 <Vm::fpuPop()>
c001d87d:	e9 01 fa ff ff       	jmp    c001d283 <Vm::x87Handler(regs*)+0x70>
c001d882:	8d 50 20             	lea    edx,[eax+0x20]
c001d885:	80 fa 07             	cmp    dl,0x7
c001d888:	77 30                	ja     c001d8ba <Vm::x87Handler(regs*)+0x6a7>
c001d88a:	83 ec 0c             	sub    esp,0xc
c001d88d:	2d e0 00 00 00       	sub    eax,0xe0
c001d892:	50                   	push   eax
c001d893:	e8 3e f8 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d898:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d89f:	89 c6                	mov    esi,eax
c001d8a1:	89 d7                	mov    edi,edx
c001d8a3:	e8 2e f8 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d8a8:	57                   	push   edi
c001d8a9:	56                   	push   esi
c001d8aa:	52                   	push   edx
c001d8ab:	50                   	push   eax
c001d8ac:	e8 48 f7 ff ff       	call   c001cff9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d8b1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d8b5:	e9 54 02 00 00       	jmp    c001db0e <Vm::x87Handler(regs*)+0x8fb>
c001d8ba:	8d 50 18             	lea    edx,[eax+0x18]
c001d8bd:	80 fa 07             	cmp    dl,0x7
c001d8c0:	0f 87 43 fb ff ff    	ja     c001d409 <Vm::x87Handler(regs*)+0x1f6>
c001d8c6:	83 ec 0c             	sub    esp,0xc
c001d8c9:	2d e8 00 00 00       	sub    eax,0xe8
c001d8ce:	50                   	push   eax
c001d8cf:	e8 02 f8 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d8d4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d8db:	89 c6                	mov    esi,eax
c001d8dd:	89 d7                	mov    edi,edx
c001d8df:	e8 f2 f7 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d8e4:	57                   	push   edi
c001d8e5:	56                   	push   esi
c001d8e6:	52                   	push   edx
c001d8e7:	50                   	push   eax
c001d8e8:	e8 0c f7 ff ff       	call   c001cff9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d8ed:	83 c4 20             	add    esp,0x20
c001d8f0:	e8 cc f8 ff ff       	call   c001d1c1 <Vm::fpuPop()>
c001d8f5:	eb 62                	jmp    c001d959 <Vm::x87Handler(regs*)+0x746>
c001d8f7:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001d8fb:	0f 85 0f 01 00 00    	jne    c001da10 <Vm::x87Handler(regs*)+0x7fd>
c001d901:	83 ec 0c             	sub    esp,0xc
c001d904:	6a 01                	push   0x1
c001d906:	e8 cb f7 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d90b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d912:	89 c6                	mov    esi,eax
c001d914:	89 d7                	mov    edi,edx
c001d916:	e8 bb f7 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d91b:	57                   	push   edi
c001d91c:	56                   	push   esi
c001d91d:	52                   	push   edx
c001d91e:	50                   	push   eax
c001d91f:	e8 d5 f6 ff ff       	call   c001cff9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d924:	83 c4 20             	add    esp,0x20
c001d927:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d92b:	e8 91 f8 ff ff       	call   c001d1c1 <Vm::fpuPop()>
c001d930:	e8 8c f8 ff ff       	call   c001d1c1 <Vm::fpuPop()>
c001d935:	e9 50 f9 ff ff       	jmp    c001d28a <Vm::x87Handler(regs*)+0x77>
c001d93a:	3c d9                	cmp    al,0xd9
c001d93c:	0f 85 b5 02 00 00    	jne    c001dbf7 <Vm::x87Handler(regs*)+0x9e4>
c001d942:	eb bd                	jmp    c001d901 <Vm::x87Handler(regs*)+0x6ee>
c001d944:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001d948:	0f 85 ea 02 00 00    	jne    c001dc38 <Vm::x87Handler(regs*)+0xa25>
c001d94e:	0f b7 05 a0 b9 02 c0 	movzx  eax,WORD PTR ds:0xc002b9a0
c001d955:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001d959:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d95d:	e9 28 f9 ff ff       	jmp    c001d28a <Vm::x87Handler(regs*)+0x77>
c001d962:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d966:	84 d2                	test   dl,dl
c001d968:	75 0f                	jne    c001d979 <Vm::x87Handler(regs*)+0x766>
c001d96a:	83 ec 0c             	sub    esp,0xc
c001d96d:	ff 36                	push   DWORD PTR [esi]
c001d96f:	e8 b1 f4 ff ff       	call   c001ce25 <Vm::fpu32ToInternal(unsigned int)>
c001d974:	e9 2c 01 00 00       	jmp    c001daa5 <Vm::x87Handler(regs*)+0x892>
c001d979:	80 fa 01             	cmp    dl,0x1
c001d97c:	75 0f                	jne    c001d98d <Vm::x87Handler(regs*)+0x77a>
c001d97e:	83 ec 0c             	sub    esp,0xc
c001d981:	ff 36                	push   DWORD PTR [esi]
c001d983:	e8 9d f4 ff ff       	call   c001ce25 <Vm::fpu32ToInternal(unsigned int)>
c001d988:	e9 81 02 00 00       	jmp    c001dc0e <Vm::x87Handler(regs*)+0x9fb>
c001d98d:	80 fa 04             	cmp    dl,0x4
c001d990:	75 0f                	jne    c001d9a1 <Vm::x87Handler(regs*)+0x78e>
c001d992:	83 ec 0c             	sub    esp,0xc
c001d995:	ff 36                	push   DWORD PTR [esi]
c001d997:	e8 89 f4 ff ff       	call   c001ce25 <Vm::fpu32ToInternal(unsigned int)>
c001d99c:	e9 86 01 00 00       	jmp    c001db27 <Vm::x87Handler(regs*)+0x914>
c001d9a1:	80 fa 05             	cmp    dl,0x5
c001d9a4:	75 1b                	jne    c001d9c1 <Vm::x87Handler(regs*)+0x7ae>
c001d9a6:	83 ec 0c             	sub    esp,0xc
c001d9a9:	6a 00                	push   0x0
c001d9ab:	e8 26 f7 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d9b0:	89 c7                	mov    edi,eax
c001d9b2:	89 d5                	mov    ebp,edx
c001d9b4:	58                   	pop    eax
c001d9b5:	ff 36                	push   DWORD PTR [esi]
c001d9b7:	e8 69 f4 ff ff       	call   c001ce25 <Vm::fpu32ToInternal(unsigned int)>
c001d9bc:	e9 a3 01 00 00       	jmp    c001db64 <Vm::x87Handler(regs*)+0x951>
c001d9c1:	80 fa 06             	cmp    dl,0x6
c001d9c4:	75 0f                	jne    c001d9d5 <Vm::x87Handler(regs*)+0x7c2>
c001d9c6:	83 ec 0c             	sub    esp,0xc
c001d9c9:	ff 36                	push   DWORD PTR [esi]
c001d9cb:	e8 55 f4 ff ff       	call   c001ce25 <Vm::fpu32ToInternal(unsigned int)>
c001d9d0:	e9 ae 01 00 00       	jmp    c001db83 <Vm::x87Handler(regs*)+0x970>
c001d9d5:	31 c0                	xor    eax,eax
c001d9d7:	80 fa 07             	cmp    dl,0x7
c001d9da:	0f 85 94 02 00 00    	jne    c001dc74 <Vm::x87Handler(regs*)+0xa61>
c001d9e0:	83 ec 0c             	sub    esp,0xc
c001d9e3:	6a 00                	push   0x0
c001d9e5:	e8 ec f6 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001d9ea:	89 c7                	mov    edi,eax
c001d9ec:	89 d5                	mov    ebp,edx
c001d9ee:	58                   	pop    eax
c001d9ef:	ff 36                	push   DWORD PTR [esi]
c001d9f1:	e8 2f f4 ff ff       	call   c001ce25 <Vm::fpu32ToInternal(unsigned int)>
c001d9f6:	e9 cb 01 00 00       	jmp    c001dbc6 <Vm::x87Handler(regs*)+0x9b3>
c001d9fb:	80 fa 03             	cmp    dl,0x3
c001d9fe:	0f 85 d3 01 00 00    	jne    c001dbd7 <Vm::x87Handler(regs*)+0x9c4>
c001da04:	e8 b8 f7 ff ff       	call   c001d1c1 <Vm::fpuPop()>
c001da09:	51                   	push   ecx
c001da0a:	51                   	push   ecx
c001da0b:	e9 de 01 00 00       	jmp    c001dbee <Vm::x87Handler(regs*)+0x9db>
c001da10:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001da14:	80 fa 01             	cmp    dl,0x1
c001da17:	75 09                	jne    c001da22 <Vm::x87Handler(regs*)+0x80f>
c001da19:	57                   	push   edi
c001da1a:	57                   	push   edi
c001da1b:	8b 06                	mov    eax,DWORD PTR [esi]
c001da1d:	e9 e3 01 00 00       	jmp    c001dc05 <Vm::x87Handler(regs*)+0x9f2>
c001da22:	80 fa 04             	cmp    dl,0x4
c001da25:	75 12                	jne    c001da39 <Vm::x87Handler(regs*)+0x826>
c001da27:	31 d2                	xor    edx,edx
c001da29:	51                   	push   ecx
c001da2a:	51                   	push   ecx
c001da2b:	8b 06                	mov    eax,DWORD PTR [esi]
c001da2d:	52                   	push   edx
c001da2e:	50                   	push   eax
c001da2f:	e8 d0 f4 ff ff       	call   c001cf04 <Vm::fpuLongToFloat(long long)>
c001da34:	e9 ee 00 00 00       	jmp    c001db27 <Vm::x87Handler(regs*)+0x914>
c001da39:	31 c0                	xor    eax,eax
c001da3b:	80 fa 07             	cmp    dl,0x7
c001da3e:	0f 85 30 02 00 00    	jne    c001dc74 <Vm::x87Handler(regs*)+0xa61>
c001da44:	83 ec 0c             	sub    esp,0xc
c001da47:	6a 00                	push   0x0
c001da49:	e8 88 f6 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001da4e:	89 c7                	mov    edi,eax
c001da50:	89 d5                	mov    ebp,edx
c001da52:	58                   	pop    eax
c001da53:	8b 06                	mov    eax,DWORD PTR [esi]
c001da55:	5a                   	pop    edx
c001da56:	31 d2                	xor    edx,edx
c001da58:	52                   	push   edx
c001da59:	50                   	push   eax
c001da5a:	e8 a5 f4 ff ff       	call   c001cf04 <Vm::fpuLongToFloat(long long)>
c001da5f:	e9 62 01 00 00       	jmp    c001dbc6 <Vm::x87Handler(regs*)+0x9b3>
c001da64:	84 d2                	test   dl,dl
c001da66:	75 0d                	jne    c001da75 <Vm::x87Handler(regs*)+0x862>
c001da68:	31 d2                	xor    edx,edx
c001da6a:	55                   	push   ebp
c001da6b:	55                   	push   ebp
c001da6c:	8b 06                	mov    eax,DWORD PTR [esi]
c001da6e:	52                   	push   edx
c001da6f:	50                   	push   eax
c001da70:	e9 d3 01 00 00       	jmp    c001dc48 <Vm::x87Handler(regs*)+0xa35>
c001da75:	31 c0                	xor    eax,eax
c001da77:	80 fa 02             	cmp    dl,0x2
c001da7a:	0f 85 f4 01 00 00    	jne    c001dc74 <Vm::x87Handler(regs*)+0xa61>
c001da80:	83 ec 0c             	sub    esp,0xc
c001da83:	6a 00                	push   0x0
c001da85:	e8 4c f6 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001da8a:	59                   	pop    ecx
c001da8b:	5f                   	pop    edi
c001da8c:	e9 6a f9 ff ff       	jmp    c001d3fb <Vm::x87Handler(regs*)+0x1e8>
c001da91:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001da95:	84 d2                	test   dl,dl
c001da97:	75 2a                	jne    c001dac3 <Vm::x87Handler(regs*)+0x8b0>
c001da99:	50                   	push   eax
c001da9a:	50                   	push   eax
c001da9b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001da9e:	ff 36                	push   DWORD PTR [esi]
c001daa0:	e8 c5 f3 ff ff       	call   c001ce6a <Vm::fpu64ToInternal(unsigned long long)>
c001daa5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001daac:	89 c6                	mov    esi,eax
c001daae:	89 d7                	mov    edi,edx
c001dab0:	e8 21 f6 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001dab5:	57                   	push   edi
c001dab6:	56                   	push   esi
c001dab7:	52                   	push   edx
c001dab8:	50                   	push   eax
c001dab9:	e8 8e f5 ff ff       	call   c001d04c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001dabe:	e9 64 01 00 00       	jmp    c001dc27 <Vm::x87Handler(regs*)+0xa14>
c001dac3:	80 fa 01             	cmp    dl,0x1
c001dac6:	75 11                	jne    c001dad9 <Vm::x87Handler(regs*)+0x8c6>
c001dac8:	50                   	push   eax
c001dac9:	50                   	push   eax
c001daca:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dacd:	ff 36                	push   DWORD PTR [esi]
c001dacf:	e8 96 f3 ff ff       	call   c001ce6a <Vm::fpu64ToInternal(unsigned long long)>
c001dad4:	e9 35 01 00 00       	jmp    c001dc0e <Vm::x87Handler(regs*)+0x9fb>
c001dad9:	80 fa 02             	cmp    dl,0x2
c001dadc:	0f 85 54 f9 ff ff    	jne    c001d436 <Vm::x87Handler(regs*)+0x223>
c001dae2:	55                   	push   ebp
c001dae3:	55                   	push   ebp
c001dae4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dae7:	ff 36                	push   DWORD PTR [esi]
c001dae9:	e8 7c f3 ff ff       	call   c001ce6a <Vm::fpu64ToInternal(unsigned long long)>
c001daee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001daf5:	89 c6                	mov    esi,eax
c001daf7:	89 d7                	mov    edi,edx
c001daf9:	e8 d8 f5 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001dafe:	57                   	push   edi
c001daff:	56                   	push   esi
c001db00:	52                   	push   edx
c001db01:	50                   	push   eax
c001db02:	e8 f2 f4 ff ff       	call   c001cff9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001db07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001db0b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001db0e:	83 c4 20             	add    esp,0x20
c001db11:	e9 74 f7 ff ff       	jmp    c001d28a <Vm::x87Handler(regs*)+0x77>
c001db16:	80 fa 04             	cmp    dl,0x4
c001db19:	75 2a                	jne    c001db45 <Vm::x87Handler(regs*)+0x932>
c001db1b:	51                   	push   ecx
c001db1c:	51                   	push   ecx
c001db1d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db20:	ff 36                	push   DWORD PTR [esi]
c001db22:	e8 43 f3 ff ff       	call   c001ce6a <Vm::fpu64ToInternal(unsigned long long)>
c001db27:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db2e:	89 c6                	mov    esi,eax
c001db30:	89 d7                	mov    edi,edx
c001db32:	e8 9f f5 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001db37:	57                   	push   edi
c001db38:	56                   	push   esi
c001db39:	52                   	push   edx
c001db3a:	50                   	push   eax
c001db3b:	e8 36 f5 ff ff       	call   c001d076 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001db40:	e9 e2 00 00 00       	jmp    c001dc27 <Vm::x87Handler(regs*)+0xa14>
c001db45:	80 fa 05             	cmp    dl,0x5
c001db48:	75 28                	jne    c001db72 <Vm::x87Handler(regs*)+0x95f>
c001db4a:	83 ec 0c             	sub    esp,0xc
c001db4d:	6a 00                	push   0x0
c001db4f:	e8 82 f5 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001db54:	89 c7                	mov    edi,eax
c001db56:	89 d5                	mov    ebp,edx
c001db58:	58                   	pop    eax
c001db59:	5a                   	pop    edx
c001db5a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db5d:	ff 36                	push   DWORD PTR [esi]
c001db5f:	e8 06 f3 ff ff       	call   c001ce6a <Vm::fpu64ToInternal(unsigned long long)>
c001db64:	83 c4 10             	add    esp,0x10
c001db67:	55                   	push   ebp
c001db68:	57                   	push   edi
c001db69:	52                   	push   edx
c001db6a:	50                   	push   eax
c001db6b:	e8 06 f5 ff ff       	call   c001d076 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001db70:	eb 60                	jmp    c001dbd2 <Vm::x87Handler(regs*)+0x9bf>
c001db72:	80 fa 06             	cmp    dl,0x6
c001db75:	75 2a                	jne    c001dba1 <Vm::x87Handler(regs*)+0x98e>
c001db77:	51                   	push   ecx
c001db78:	51                   	push   ecx
c001db79:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db7c:	ff 36                	push   DWORD PTR [esi]
c001db7e:	e8 e7 f2 ff ff       	call   c001ce6a <Vm::fpu64ToInternal(unsigned long long)>
c001db83:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db8a:	89 c6                	mov    esi,eax
c001db8c:	89 d7                	mov    edi,edx
c001db8e:	e8 43 f5 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001db93:	57                   	push   edi
c001db94:	56                   	push   esi
c001db95:	52                   	push   edx
c001db96:	50                   	push   eax
c001db97:	e8 08 f5 ff ff       	call   c001d0a4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001db9c:	e9 86 00 00 00       	jmp    c001dc27 <Vm::x87Handler(regs*)+0xa14>
c001dba1:	31 c0                	xor    eax,eax
c001dba3:	80 fa 07             	cmp    dl,0x7
c001dba6:	0f 85 c8 00 00 00    	jne    c001dc74 <Vm::x87Handler(regs*)+0xa61>
c001dbac:	83 ec 0c             	sub    esp,0xc
c001dbaf:	6a 00                	push   0x0
c001dbb1:	e8 20 f5 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001dbb6:	89 c7                	mov    edi,eax
c001dbb8:	89 d5                	mov    ebp,edx
c001dbba:	58                   	pop    eax
c001dbbb:	5a                   	pop    edx
c001dbbc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dbbf:	ff 36                	push   DWORD PTR [esi]
c001dbc1:	e8 a4 f2 ff ff       	call   c001ce6a <Vm::fpu64ToInternal(unsigned long long)>
c001dbc6:	83 c4 10             	add    esp,0x10
c001dbc9:	55                   	push   ebp
c001dbca:	57                   	push   edi
c001dbcb:	52                   	push   edx
c001dbcc:	50                   	push   eax
c001dbcd:	e8 d2 f4 ff ff       	call   c001d0a4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dbd2:	83 c4 0c             	add    esp,0xc
c001dbd5:	eb 53                	jmp    c001dc2a <Vm::x87Handler(regs*)+0xa17>
c001dbd7:	31 c0                	xor    eax,eax
c001dbd9:	80 fa 02             	cmp    dl,0x2
c001dbdc:	0f 85 92 00 00 00    	jne    c001dc74 <Vm::x87Handler(regs*)+0xa61>
c001dbe2:	83 ec 0c             	sub    esp,0xc
c001dbe5:	6a 00                	push   0x0
c001dbe7:	e8 ea f4 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001dbec:	59                   	pop    ecx
c001dbed:	5f                   	pop    edi
c001dbee:	52                   	push   edx
c001dbef:	50                   	push   eax
c001dbf0:	e8 27 f2 ff ff       	call   c001ce1c <Vm::fpuInternalTo64(unsigned long long)>
c001dbf5:	eb 70                	jmp    c001dc67 <Vm::x87Handler(regs*)+0xa54>
c001dbf7:	31 c0                	xor    eax,eax
c001dbf9:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001dbfe:	75 74                	jne    c001dc74 <Vm::x87Handler(regs*)+0xa61>
c001dc00:	50                   	push   eax
c001dc01:	50                   	push   eax
c001dc02:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001dc05:	31 d2                	xor    edx,edx
c001dc07:	52                   	push   edx
c001dc08:	50                   	push   eax
c001dc09:	e8 f6 f2 ff ff       	call   c001cf04 <Vm::fpuLongToFloat(long long)>
c001dc0e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc15:	89 c6                	mov    esi,eax
c001dc17:	89 d7                	mov    edi,edx
c001dc19:	e8 b8 f4 ff ff       	call   c001d0d6 <Vm::fpuGetReg(int)>
c001dc1e:	57                   	push   edi
c001dc1f:	56                   	push   esi
c001dc20:	52                   	push   edx
c001dc21:	50                   	push   eax
c001dc22:	e8 5e f4 ff ff       	call   c001d085 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dc27:	83 c4 1c             	add    esp,0x1c
c001dc2a:	52                   	push   edx
c001dc2b:	50                   	push   eax
c001dc2c:	6a 00                	push   0x0
c001dc2e:	e8 e6 f4 ff ff       	call   c001d119 <Vm::fpuSetReg(int, unsigned long long)>
c001dc33:	e9 f2 f7 ff ff       	jmp    c001d42a <Vm::x87Handler(regs*)+0x217>
c001dc38:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dc3c:	80 fa 05             	cmp    dl,0x5
c001dc3f:	75 11                	jne    c001dc52 <Vm::x87Handler(regs*)+0xa3f>
c001dc41:	55                   	push   ebp
c001dc42:	55                   	push   ebp
c001dc43:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dc46:	ff 36                	push   DWORD PTR [esi]
c001dc48:	e8 81 f2 ff ff       	call   c001cece <Vm::fpuULongToFloat(unsigned long long)>
c001dc4d:	e9 cf f7 ff ff       	jmp    c001d421 <Vm::x87Handler(regs*)+0x20e>
c001dc52:	31 c0                	xor    eax,eax
c001dc54:	80 fa 07             	cmp    dl,0x7
c001dc57:	75 1b                	jne    c001dc74 <Vm::x87Handler(regs*)+0xa61>
c001dc59:	e8 63 f5 ff ff       	call   c001d1c1 <Vm::fpuPop()>
c001dc5e:	51                   	push   ecx
c001dc5f:	51                   	push   ecx
c001dc60:	52                   	push   edx
c001dc61:	50                   	push   eax
c001dc62:	e8 0c f2 ff ff       	call   c001ce73 <Vm::fpuFloatToLong(unsigned long long)>
c001dc67:	83 c4 10             	add    esp,0x10
c001dc6a:	89 06                	mov    DWORD PTR [esi],eax
c001dc6c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001dc6f:	e9 f8 f7 ff ff       	jmp    c001d46c <Vm::x87Handler(regs*)+0x259>
c001dc74:	83 c4 1c             	add    esp,0x1c
c001dc77:	5b                   	pop    ebx
c001dc78:	5e                   	pop    esi
c001dc79:	5f                   	pop    edi
c001dc7a:	5d                   	pop    ebp
c001dc7b:	c3                   	ret    

c001dc7c <__static_initialization_and_destruction_0(int, int)>:
c001dc7c:	83 ec 0c             	sub    esp,0xc
c001dc7f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001dc84:	75 1a                	jne    c001dca0 <__static_initialization_and_destruction_0(int, int)+0x24>
c001dc86:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001dc8e:	75 10                	jne    c001dca0 <__static_initialization_and_destruction_0(int, int)+0x24>
c001dc90:	83 ec 0c             	sub    esp,0xc
c001dc93:	68 a0 b9 02 c0       	push   0xc002b9a0
c001dc98:	e8 13 7b 00 00       	call   c00257b0 <Vm::_FPUState::_FPUState()>
c001dc9d:	83 c4 10             	add    esp,0x10
c001dca0:	90                   	nop
c001dca1:	83 c4 0c             	add    esp,0xc
c001dca4:	c3                   	ret    

c001dca5 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001dca5:	83 ec 0c             	sub    esp,0xc
c001dca8:	83 ec 08             	sub    esp,0x8
c001dcab:	68 ff ff 00 00       	push   0xffff
c001dcb0:	6a 01                	push   0x1
c001dcb2:	e8 c5 ff ff ff       	call   c001dc7c <__static_initialization_and_destruction_0(int, int)>
c001dcb7:	83 c4 10             	add    esp,0x10
c001dcba:	83 c4 0c             	add    esp,0xc
c001dcbd:	c3                   	ret    

c001dcbe <FAT::getName()>:
c001dcbe:	b8 f0 8a 02 c0       	mov    eax,0xc0028af0
c001dcc3:	c3                   	ret    

c001dcc4 <FAT::tell(void*, unsigned long long*)>:
c001dcc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dcc9:	75 06                	jne    c001dcd1 <FAT::tell(void*, unsigned long long*)+0xd>
c001dccb:	b8 04 00 00 00       	mov    eax,0x4
c001dcd0:	c3                   	ret    
c001dcd1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dcd6:	75 06                	jne    c001dcde <FAT::tell(void*, unsigned long long*)+0x1a>
c001dcd8:	b8 04 00 00 00       	mov    eax,0x4
c001dcdd:	c3                   	ret    
c001dcde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dce2:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001dce5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001dce8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dcec:	89 01                	mov    DWORD PTR [ecx],eax
c001dcee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001dcf1:	b8 00 00 00 00       	mov    eax,0x0
c001dcf6:	c3                   	ret    
c001dcf7:	90                   	nop

c001dcf8 <FAT::stat(void*, unsigned long long*)>:
c001dcf8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dcfd:	75 06                	jne    c001dd05 <FAT::stat(void*, unsigned long long*)+0xd>
c001dcff:	b8 04 00 00 00       	mov    eax,0x4
c001dd04:	c3                   	ret    
c001dd05:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dd0a:	75 06                	jne    c001dd12 <FAT::stat(void*, unsigned long long*)+0x1a>
c001dd0c:	b8 04 00 00 00       	mov    eax,0x4
c001dd11:	c3                   	ret    
c001dd12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd16:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001dd19:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dd1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd20:	89 01                	mov    DWORD PTR [ecx],eax
c001dd22:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001dd25:	b8 00 00 00 00       	mov    eax,0x0
c001dd2a:	c3                   	ret    
c001dd2b:	90                   	nop

c001dd2c <FAT::~FAT()>:
c001dd2c:	83 ec 0c             	sub    esp,0xc
c001dd2f:	ba 74 8b 02 c0       	mov    edx,0xc0028b74
c001dd34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd38:	89 10                	mov    DWORD PTR [eax],edx
c001dd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd3e:	83 ec 0c             	sub    esp,0xc
c001dd41:	50                   	push   eax
c001dd42:	e8 27 48 ff ff       	call   c001256e <Filesystem::~Filesystem()>
c001dd47:	83 c4 10             	add    esp,0x10
c001dd4a:	90                   	nop
c001dd4b:	83 c4 0c             	add    esp,0xc
c001dd4e:	c3                   	ret    
c001dd4f:	90                   	nop

c001dd50 <FAT::~FAT()>:
c001dd50:	83 ec 0c             	sub    esp,0xc
c001dd53:	83 ec 0c             	sub    esp,0xc
c001dd56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd5a:	e8 cd ff ff ff       	call   c001dd2c <FAT::~FAT()>
c001dd5f:	83 c4 10             	add    esp,0x10
c001dd62:	83 ec 08             	sub    esp,0x8
c001dd65:	6a 08                	push   0x8
c001dd67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd6b:	e8 f5 43 ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c001dd70:	83 c4 10             	add    esp,0x10
c001dd73:	83 c4 0c             	add    esp,0xc
c001dd76:	c3                   	ret    
c001dd77:	90                   	nop

c001dd78 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001dd78:	83 ec 1c             	sub    esp,0x1c
c001dd7b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001dd82:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001dd87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dd8b:	8b 04 85 20 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd45e0]
c001dd92:	83 f8 ff             	cmp    eax,0xffffffff
c001dd95:	75 34                	jne    c001ddcb <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001dd97:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dd9b:	88 c2                	mov    dl,al
c001dd9d:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001dda2:	01 d0                	add    eax,edx
c001dda4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dda8:	8b 15 00 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002ba00
c001ddae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ddb2:	89 14 85 20 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd45e0],edx
c001ddb9:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001ddbe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ddc2:	89 14 85 a0 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4560],edx
c001ddc9:	eb 17                	jmp    c001dde2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ddcb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ddcf:	88 c2                	mov    dl,al
c001ddd1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ddd5:	8b 04 85 20 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd45e0]
c001dddc:	01 d0                	add    eax,edx
c001ddde:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dde2:	83 ec 04             	sub    esp,0x4
c001dde5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dde9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dded:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ddf1:	50                   	push   eax
c001ddf2:	e8 e3 8c fe ff       	call   c0006ada <f_getlabel>
c001ddf7:	83 c4 10             	add    esp,0x10
c001ddfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ddfe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001de03:	75 07                	jne    c001de0c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001de05:	b8 00 00 00 00       	mov    eax,0x0
c001de0a:	eb 05                	jmp    c001de11 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001de0c:	b8 01 00 00 00       	mov    eax,0x1
c001de11:	83 c4 1c             	add    esp,0x1c
c001de14:	c3                   	ret    
c001de15:	90                   	nop

c001de16 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001de16:	57                   	push   edi
c001de17:	83 ec 58             	sub    esp,0x58
c001de1a:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001de22:	8d 54 24 10          	lea    edx,[esp+0x10]
c001de26:	b9 0f 00 00 00       	mov    ecx,0xf
c001de2b:	b8 00 00 00 00       	mov    eax,0x0
c001de30:	fc                   	cld    
c001de31:	89 d7                	mov    edi,edx
c001de33:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001de35:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001de39:	8b 04 85 20 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd45e0]
c001de40:	83 f8 ff             	cmp    eax,0xffffffff
c001de43:	75 34                	jne    c001de79 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001de45:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001de49:	88 c2                	mov    dl,al
c001de4b:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001de50:	01 d0                	add    eax,edx
c001de52:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001de56:	8b 15 00 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002ba00
c001de5c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001de60:	89 14 85 20 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd45e0],edx
c001de67:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001de6c:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001de70:	89 14 85 a0 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4560],edx
c001de77:	eb 17                	jmp    c001de90 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001de79:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001de7d:	88 c2                	mov    dl,al
c001de7f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001de83:	8b 04 85 20 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd45e0]
c001de8a:	01 d0                	add    eax,edx
c001de8c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001de90:	83 ec 08             	sub    esp,0x8
c001de93:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001de97:	8d 44 24 18          	lea    eax,[esp+0x18]
c001de9b:	50                   	push   eax
c001de9c:	e8 32 29 fe ff       	call   c00007d3 <strcat>
c001dea1:	83 c4 10             	add    esp,0x10
c001dea4:	83 ec 0c             	sub    esp,0xc
c001dea7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001deab:	50                   	push   eax
c001deac:	e8 17 8e fe ff       	call   c0006cc8 <f_setlabel>
c001deb1:	83 c4 10             	add    esp,0x10
c001deb4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001deb8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001debd:	75 07                	jne    c001dec6 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001debf:	b8 00 00 00 00       	mov    eax,0x0
c001dec4:	eb 05                	jmp    c001decb <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001dec6:	b8 01 00 00 00       	mov    eax,0x1
c001decb:	83 c4 58             	add    esp,0x58
c001dece:	5f                   	pop    edi
c001decf:	c3                   	ret    

c001ded0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ded0:	83 ec 2c             	sub    esp,0x2c
c001ded3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001dedb:	83 ec 08             	sub    esp,0x8
c001dede:	68 14 8b 02 c0       	push   0xc0028b14
c001dee3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dee7:	e8 81 28 fe ff       	call   c000076d <strcmp>
c001deec:	83 c4 10             	add    esp,0x10
c001deef:	85 c0                	test   eax,eax
c001def1:	0f 94 c0             	sete   al
c001def4:	84 c0                	test   al,al
c001def6:	74 0d                	je     c001df05 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001def8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df00:	e9 a6 00 00 00       	jmp    c001dfab <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df05:	83 ec 08             	sub    esp,0x8
c001df08:	68 06 8b 02 c0       	push   0xc0028b06
c001df0d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df11:	e8 57 28 fe ff       	call   c000076d <strcmp>
c001df16:	83 c4 10             	add    esp,0x10
c001df19:	85 c0                	test   eax,eax
c001df1b:	0f 94 c0             	sete   al
c001df1e:	84 c0                	test   al,al
c001df20:	74 0a                	je     c001df2c <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001df22:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df2a:	eb 7f                	jmp    c001dfab <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df2c:	83 ec 08             	sub    esp,0x8
c001df2f:	68 0c 8b 02 c0       	push   0xc0028b0c
c001df34:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df38:	e8 30 28 fe ff       	call   c000076d <strcmp>
c001df3d:	83 c4 10             	add    esp,0x10
c001df40:	85 c0                	test   eax,eax
c001df42:	0f 94 c0             	sete   al
c001df45:	84 c0                	test   al,al
c001df47:	74 0a                	je     c001df53 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001df49:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df51:	eb 58                	jmp    c001dfab <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df53:	83 ec 08             	sub    esp,0x8
c001df56:	68 2c 5e 02 c0       	push   0xc0025e2c
c001df5b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df5f:	e8 09 28 fe ff       	call   c000076d <strcmp>
c001df64:	83 c4 10             	add    esp,0x10
c001df67:	85 c0                	test   eax,eax
c001df69:	0f 94 c0             	sete   al
c001df6c:	84 c0                	test   al,al
c001df6e:	74 0a                	je     c001df7a <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001df70:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001df78:	eb 31                	jmp    c001dfab <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df7a:	83 ec 08             	sub    esp,0x8
c001df7d:	68 12 8b 02 c0       	push   0xc0028b12
c001df82:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df86:	e8 e2 27 fe ff       	call   c000076d <strcmp>
c001df8b:	83 c4 10             	add    esp,0x10
c001df8e:	85 c0                	test   eax,eax
c001df90:	0f 94 c0             	sete   al
c001df93:	84 c0                	test   al,al
c001df95:	74 0a                	je     c001dfa1 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001df97:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001df9f:	eb 0a                	jmp    c001dfab <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001dfa1:	b8 08 00 00 00       	mov    eax,0x8
c001dfa6:	e9 04 01 00 00       	jmp    c001e0af <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001dfab:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001dfb2:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001dfb7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dfbb:	8b 04 85 20 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd45e0]
c001dfc2:	83 f8 ff             	cmp    eax,0xffffffff
c001dfc5:	75 34                	jne    c001dffb <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001dfc7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dfcb:	88 c2                	mov    dl,al
c001dfcd:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001dfd2:	01 d0                	add    eax,edx
c001dfd4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001dfd8:	8b 15 00 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002ba00
c001dfde:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dfe2:	89 14 85 20 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd45e0],edx
c001dfe9:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001dfee:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001dff2:	89 14 85 a0 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4560],edx
c001dff9:	eb 17                	jmp    c001e012 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001dffb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dfff:	88 c2                	mov    dl,al
c001e001:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e005:	8b 04 85 20 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd45e0]
c001e00c:	01 d0                	add    eax,edx
c001e00e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e012:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e016:	88 04 24             	mov    BYTE PTR [esp],al
c001e019:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e01d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e021:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e029:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e02e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e036:	83 ec 0c             	sub    esp,0xc
c001e039:	68 00 20 00 00       	push   0x2000
c001e03e:	e8 db 10 ff ff       	call   c000f11e <malloc>
c001e043:	83 c4 10             	add    esp,0x10
c001e046:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e04a:	68 00 20 00 00       	push   0x2000
c001e04f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e053:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e057:	50                   	push   eax
c001e058:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e05c:	50                   	push   eax
c001e05d:	e8 b1 90 fe ff       	call   c0007113 <f_mkfs>
c001e062:	83 c4 10             	add    esp,0x10
c001e065:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e069:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e06e:	75 07                	jne    c001e077 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001e070:	b8 00 00 00 00       	mov    eax,0x0
c001e075:	eb 38                	jmp    c001e0af <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e077:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e07c:	75 17                	jne    c001e095 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001e07e:	83 ec 0c             	sub    esp,0xc
c001e081:	68 44 8b 02 c0       	push   0xc0028b44
c001e086:	e8 ba 41 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001e08b:	83 c4 10             	add    esp,0x10
c001e08e:	b8 09 00 00 00       	mov    eax,0x9
c001e093:	eb 1a                	jmp    c001e0af <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e095:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e099:	83 ec 08             	sub    esp,0x8
c001e09c:	50                   	push   eax
c001e09d:	68 18 8b 02 c0       	push   0xc0028b18
c001e0a2:	e8 9e 41 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001e0a7:	83 c4 10             	add    esp,0x10
c001e0aa:	b8 01 00 00 00       	mov    eax,0x1
c001e0af:	83 c4 2c             	add    esp,0x2c
c001e0b2:	c3                   	ret    
c001e0b3:	90                   	nop

c001e0b4 <FAT::tryMount(LogicalDisk*, int)>:
c001e0b4:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001e0ba:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001e0bf:	83 f8 14             	cmp    eax,0x14
c001e0c2:	75 17                	jne    c001e0db <FAT::tryMount(LogicalDisk*, int)+0x27>
c001e0c4:	83 ec 0c             	sub    esp,0xc
c001e0c7:	68 2a 8b 02 c0       	push   0xc0028b2a
c001e0cc:	e8 f2 a8 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001e0d1:	83 c4 10             	add    esp,0x10
c001e0d4:	b0 00                	mov    al,0x0
c001e0d6:	e9 d7 01 00 00       	jmp    c001e2b2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e0db:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001e0e2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e0e8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e0ee:	3d 00 02 00 00       	cmp    eax,0x200
c001e0f3:	74 07                	je     c001e0fc <FAT::tryMount(LogicalDisk*, int)+0x48>
c001e0f5:	b0 00                	mov    al,0x0
c001e0f7:	e9 b6 01 00 00       	jmp    c001e2b2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e0fc:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001e104:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e10b:	8b 04 85 20 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd45e0]
c001e112:	83 f8 ff             	cmp    eax,0xffffffff
c001e115:	74 07                	je     c001e11e <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001e117:	b0 01                	mov    al,0x1
c001e119:	e9 94 01 00 00       	jmp    c001e2b2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e11e:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001e128:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001e130:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001e137:	88 c2                	mov    dl,al
c001e139:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001e13e:	01 d0                	add    eax,edx
c001e140:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001e147:	8b 15 00 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002ba00
c001e14d:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e154:	89 14 85 20 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd45e0],edx
c001e15b:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001e160:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001e167:	89 14 85 a0 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4560],edx
c001e16e:	83 ec 0c             	sub    esp,0xc
c001e171:	68 54 02 00 00       	push   0x254
c001e176:	e8 a3 0f ff ff       	call   c000f11e <malloc>
c001e17b:	83 c4 10             	add    esp,0x10
c001e17e:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001e185:	83 ec 04             	sub    esp,0x4
c001e188:	6a 00                	push   0x0
c001e18a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e191:	50                   	push   eax
c001e192:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e199:	e8 33 6b fe ff       	call   c0004cd1 <f_mount>
c001e19e:	83 c4 10             	add    esp,0x10
c001e1a1:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e1a8:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001e1b0:	74 19                	je     c001e1cb <FAT::tryMount(LogicalDisk*, int)+0x117>
c001e1b2:	83 ec 0c             	sub    esp,0xc
c001e1b5:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e1bc:	e8 7d 0f ff ff       	call   c000f13e <rfree>
c001e1c1:	83 c4 10             	add    esp,0x10
c001e1c4:	b0 00                	mov    al,0x0
c001e1c6:	e9 e7 00 00 00       	jmp    c001e2b2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e1cb:	83 ec 04             	sub    esp,0x4
c001e1ce:	68 00 01 00 00       	push   0x100
c001e1d3:	6a 00                	push   0x0
c001e1d5:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e1dc:	50                   	push   eax
c001e1dd:	e8 9b 24 fe ff       	call   c000067d <memset>
c001e1e2:	83 c4 10             	add    esp,0x10
c001e1e5:	83 ec 08             	sub    esp,0x8
c001e1e8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e1ef:	50                   	push   eax
c001e1f0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e1f7:	50                   	push   eax
c001e1f8:	e8 d6 25 fe ff       	call   c00007d3 <strcat>
c001e1fd:	83 c4 10             	add    esp,0x10
c001e200:	83 ec 08             	sub    esp,0x8
c001e203:	68 38 8b 02 c0       	push   0xc0028b38
c001e208:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e20f:	50                   	push   eax
c001e210:	e8 be 25 fe ff       	call   c00007d3 <strcat>
c001e215:	83 c4 10             	add    esp,0x10
c001e218:	83 ec 04             	sub    esp,0x4
c001e21b:	6a 01                	push   0x1
c001e21d:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001e224:	50                   	push   eax
c001e225:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e229:	50                   	push   eax
c001e22a:	e8 04 6b fe ff       	call   c0004d33 <f_open>
c001e22f:	83 c4 10             	add    esp,0x10
c001e232:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e239:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001e240:	85 c0                	test   eax,eax
c001e242:	74 0a                	je     c001e24e <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001e244:	78 2d                	js     c001e273 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e246:	83 e8 04             	sub    eax,0x4
c001e249:	83 f8 01             	cmp    eax,0x1
c001e24c:	77 25                	ja     c001e273 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e24e:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001e256:	83 ec 0c             	sub    esp,0xc
c001e259:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e25d:	50                   	push   eax
c001e25e:	e8 22 76 fe ff       	call   c0005885 <f_close>
c001e263:	83 c4 10             	add    esp,0x10
c001e266:	90                   	nop
c001e267:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001e26f:	74 3a                	je     c001e2ab <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001e271:	eb 2d                	jmp    c001e2a0 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001e273:	83 ec 0c             	sub    esp,0xc
c001e276:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e27d:	e8 bc 0e ff ff       	call   c000f13e <rfree>
c001e282:	83 c4 10             	add    esp,0x10
c001e285:	83 ec 04             	sub    esp,0x4
c001e288:	6a 00                	push   0x0
c001e28a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e291:	50                   	push   eax
c001e292:	6a 00                	push   0x0
c001e294:	e8 38 6a fe ff       	call   c0004cd1 <f_mount>
c001e299:	83 c4 10             	add    esp,0x10
c001e29c:	b0 00                	mov    al,0x0
c001e29e:	eb 12                	jmp    c001e2b2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e2a0:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001e2a5:	40                   	inc    eax
c001e2a6:	a3 00 ba 02 c0       	mov    ds:0xc002ba00,eax
c001e2ab:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001e2b2:	81 c4 6c 03 00 00    	add    esp,0x36c
c001e2b8:	c3                   	ret    
c001e2b9:	90                   	nop

c001e2ba <FAT::readDir(void*, unsigned long, void*, int*)>:
c001e2ba:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001e2c0:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001e2c8:	74 0a                	je     c001e2d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001e2ca:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001e2d2:	75 0a                	jne    c001e2de <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001e2d4:	b8 04 00 00 00       	mov    eax,0x4
c001e2d9:	e9 db 00 00 00       	jmp    c001e3b9 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e2de:	83 ec 08             	sub    esp,0x8
c001e2e1:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e2e8:	50                   	push   eax
c001e2e9:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001e2f0:	e8 9a 7b fe ff       	call   c0005e8f <f_readdir>
c001e2f5:	83 c4 10             	add    esp,0x10
c001e2f8:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001e2ff:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001e305:	83 ec 0c             	sub    esp,0xc
c001e308:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001e30f:	83 c0 1a             	add    eax,0x1a
c001e312:	50                   	push   eax
c001e313:	e8 82 23 fe ff       	call   c000069a <strlen>
c001e318:	83 c4 10             	add    esp,0x10
c001e31b:	ba 00 00 00 00       	mov    edx,0x0
c001e320:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e324:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e328:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001e32f:	0f b6 c0             	movzx  eax,al
c001e332:	83 e0 10             	and    eax,0x10
c001e335:	74 07                	je     c001e33e <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001e337:	b8 02 00 00 00       	mov    eax,0x2
c001e33c:	eb 05                	jmp    c001e343 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001e33e:	b8 01 00 00 00       	mov    eax,0x1
c001e343:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e347:	83 ec 08             	sub    esp,0x8
c001e34a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e351:	83 c0 1a             	add    eax,0x1a
c001e354:	50                   	push   eax
c001e355:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e359:	83 c0 10             	add    eax,0x10
c001e35c:	50                   	push   eax
c001e35d:	e8 ba 23 fe ff       	call   c000071c <strcpy>
c001e362:	83 c4 10             	add    esp,0x10
c001e365:	83 ec 04             	sub    esp,0x4
c001e368:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001e36f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e373:	50                   	push   eax
c001e374:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001e37b:	e8 c7 22 fe ff       	call   c0000647 <memcpy>
c001e380:	83 c4 10             	add    esp,0x10
c001e383:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001e38a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001e390:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001e397:	84 c0                	test   al,al
c001e399:	75 07                	jne    c001e3a2 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001e39b:	b8 07 00 00 00       	mov    eax,0x7
c001e3a0:	eb 17                	jmp    c001e3b9 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e3a2:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001e3a9:	85 c0                	test   eax,eax
c001e3ab:	75 07                	jne    c001e3b4 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001e3ad:	b8 00 00 00 00       	mov    eax,0x0
c001e3b2:	eb 05                	jmp    c001e3b9 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e3b4:	b8 01 00 00 00       	mov    eax,0x1
c001e3b9:	81 c4 3c 02 00 00    	add    esp,0x23c
c001e3bf:	c3                   	ret    

c001e3c0 <FAT::read(void*, unsigned long, void*, int*)>:
c001e3c0:	83 ec 1c             	sub    esp,0x1c
c001e3c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e3c8:	74 07                	je     c001e3d1 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001e3ca:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e3cf:	75 07                	jne    c001e3d8 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001e3d1:	b8 04 00 00 00       	mov    eax,0x4
c001e3d6:	eb 3d                	jmp    c001e415 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e3d8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e3dc:	50                   	push   eax
c001e3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e3e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e3e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e3e9:	e8 81 6d fe ff       	call   c000516f <f_read>
c001e3ee:	83 c4 10             	add    esp,0x10
c001e3f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e3f9:	89 c2                	mov    edx,eax
c001e3fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3ff:	89 10                	mov    DWORD PTR [eax],edx
c001e401:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e405:	85 c0                	test   eax,eax
c001e407:	75 07                	jne    c001e410 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001e409:	b8 00 00 00 00       	mov    eax,0x0
c001e40e:	eb 05                	jmp    c001e415 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e410:	b8 01 00 00 00       	mov    eax,0x1
c001e415:	83 c4 1c             	add    esp,0x1c
c001e418:	c3                   	ret    
c001e419:	90                   	nop

c001e41a <FAT::write(void*, unsigned long, void*, int*)>:
c001e41a:	83 ec 1c             	sub    esp,0x1c
c001e41d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e422:	74 07                	je     c001e42b <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001e424:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e429:	75 07                	jne    c001e432 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001e42b:	b8 04 00 00 00       	mov    eax,0x4
c001e430:	eb 3d                	jmp    c001e46f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e432:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e436:	50                   	push   eax
c001e437:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e43f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e443:	e8 a7 6f fe ff       	call   c00053ef <f_write>
c001e448:	83 c4 10             	add    esp,0x10
c001e44b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e44f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e453:	89 c2                	mov    edx,eax
c001e455:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e459:	89 10                	mov    DWORD PTR [eax],edx
c001e45b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e45f:	85 c0                	test   eax,eax
c001e461:	75 07                	jne    c001e46a <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001e463:	b8 00 00 00 00       	mov    eax,0x0
c001e468:	eb 05                	jmp    c001e46f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e46a:	b8 01 00 00 00       	mov    eax,0x1
c001e46f:	83 c4 1c             	add    esp,0x1c
c001e472:	c3                   	ret    
c001e473:	90                   	nop

c001e474 <FAT::close(void*)>:
c001e474:	83 ec 1c             	sub    esp,0x1c
c001e477:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e47c:	75 07                	jne    c001e485 <FAT::close(void*)+0x11>
c001e47e:	b8 04 00 00 00       	mov    eax,0x4
c001e483:	eb 36                	jmp    c001e4bb <FAT::close(void*)+0x47>
c001e485:	83 ec 0c             	sub    esp,0xc
c001e488:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e48c:	e8 f4 73 fe ff       	call   c0005885 <f_close>
c001e491:	83 c4 10             	add    esp,0x10
c001e494:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e498:	83 ec 0c             	sub    esp,0xc
c001e49b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e49f:	e8 8a 0c ff ff       	call   c000f12e <free>
c001e4a4:	83 c4 10             	add    esp,0x10
c001e4a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e4ab:	85 c0                	test   eax,eax
c001e4ad:	75 07                	jne    c001e4b6 <FAT::close(void*)+0x42>
c001e4af:	b8 00 00 00 00       	mov    eax,0x0
c001e4b4:	eb 05                	jmp    c001e4bb <FAT::close(void*)+0x47>
c001e4b6:	b8 01 00 00 00       	mov    eax,0x1
c001e4bb:	83 c4 1c             	add    esp,0x1c
c001e4be:	c3                   	ret    
c001e4bf:	90                   	nop

c001e4c0 <FAT::closeDir(void*)>:
c001e4c0:	83 ec 1c             	sub    esp,0x1c
c001e4c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e4c8:	75 07                	jne    c001e4d1 <FAT::closeDir(void*)+0x11>
c001e4ca:	b8 04 00 00 00       	mov    eax,0x4
c001e4cf:	eb 36                	jmp    c001e507 <FAT::closeDir(void*)+0x47>
c001e4d1:	83 ec 0c             	sub    esp,0xc
c001e4d4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4d8:	e8 90 79 fe ff       	call   c0005e6d <f_closedir>
c001e4dd:	83 c4 10             	add    esp,0x10
c001e4e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4e4:	83 ec 0c             	sub    esp,0xc
c001e4e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4eb:	e8 3e 0c ff ff       	call   c000f12e <free>
c001e4f0:	83 c4 10             	add    esp,0x10
c001e4f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e4f7:	85 c0                	test   eax,eax
c001e4f9:	75 07                	jne    c001e502 <FAT::closeDir(void*)+0x42>
c001e4fb:	b8 00 00 00 00       	mov    eax,0x0
c001e500:	eb 05                	jmp    c001e507 <FAT::closeDir(void*)+0x47>
c001e502:	b8 01 00 00 00       	mov    eax,0x1
c001e507:	83 c4 1c             	add    esp,0x1c
c001e50a:	c3                   	ret    
c001e50b:	90                   	nop

c001e50c <FAT::seek(void*, unsigned long long)>:
c001e50c:	83 ec 2c             	sub    esp,0x2c
c001e50f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e513:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e517:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e51b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e51f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001e524:	75 07                	jne    c001e52d <FAT::seek(void*, unsigned long long)+0x21>
c001e526:	b8 04 00 00 00       	mov    eax,0x4
c001e52b:	eb 2f                	jmp    c001e55c <FAT::seek(void*, unsigned long long)+0x50>
c001e52d:	83 ec 04             	sub    esp,0x4
c001e530:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e534:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e538:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e53c:	e8 73 73 fe ff       	call   c00058b4 <f_lseek>
c001e541:	83 c4 10             	add    esp,0x10
c001e544:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e548:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e54c:	85 c0                	test   eax,eax
c001e54e:	75 07                	jne    c001e557 <FAT::seek(void*, unsigned long long)+0x4b>
c001e550:	b8 00 00 00 00       	mov    eax,0x0
c001e555:	eb 05                	jmp    c001e55c <FAT::seek(void*, unsigned long long)+0x50>
c001e557:	b8 01 00 00 00       	mov    eax,0x1
c001e55c:	83 c4 2c             	add    esp,0x2c
c001e55f:	c3                   	ret    

c001e560 <fatWrapperReadDisk>:
c001e560:	83 ec 1c             	sub    esp,0x1c
c001e563:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e567:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e56b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e56f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e572:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e576:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e57a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e57f:	8b 04 85 60 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55a0]
c001e586:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e58a:	83 ec 0c             	sub    esp,0xc
c001e58d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e591:	52                   	push   edx
c001e592:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e596:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e59a:	50                   	push   eax
c001e59b:	e8 8a 72 ff ff       	call   c001582a <LogicalDisk::read(unsigned long long, int, void*)>
c001e5a0:	83 c4 20             	add    esp,0x20
c001e5a3:	83 c4 1c             	add    esp,0x1c
c001e5a6:	c3                   	ret    

c001e5a7 <fatWrapperWriteDisk>:
c001e5a7:	83 ec 1c             	sub    esp,0x1c
c001e5aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5ae:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e5b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5b6:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e5c1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e5c6:	8b 04 85 60 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55a0]
c001e5cd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e5d1:	83 ec 0c             	sub    esp,0xc
c001e5d4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5d8:	52                   	push   edx
c001e5d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5e1:	50                   	push   eax
c001e5e2:	e8 af 72 ff ff       	call   c0015896 <LogicalDisk::write(unsigned long long, int, void*)>
c001e5e7:	83 c4 20             	add    esp,0x20
c001e5ea:	83 c4 1c             	add    esp,0x1c
c001e5ed:	c3                   	ret    

c001e5ee <fatWrapperIoctl>:
c001e5ee:	53                   	push   ebx
c001e5ef:	83 ec 28             	sub    esp,0x28
c001e5f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e5f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e5fa:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e5fe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e602:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001e607:	75 31                	jne    c001e63a <fatWrapperIoctl+0x4c>
c001e609:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e60d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e611:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e616:	8b 04 85 60 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55a0]
c001e61d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e623:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e629:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e62d:	66 89 02             	mov    WORD PTR [edx],ax
c001e630:	b8 00 00 00 00       	mov    eax,0x0
c001e635:	e9 b2 00 00 00       	jmp    c001e6ec <fatWrapperIoctl+0xfe>
c001e63a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001e63f:	75 6a                	jne    c001e6ab <fatWrapperIoctl+0xbd>
c001e641:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e645:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e649:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e64e:	8b 04 85 60 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55a0]
c001e655:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e65b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001e661:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001e667:	89 c8                	mov    eax,ecx
c001e669:	89 da                	mov    edx,ebx
c001e66b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001e66f:	c1 e0 0a             	shl    eax,0xa
c001e672:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001e677:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c001e67e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001e684:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001e68a:	89 cb                	mov    ebx,ecx
c001e68c:	c1 fb 1f             	sar    ebx,0x1f
c001e68f:	53                   	push   ebx
c001e690:	51                   	push   ecx
c001e691:	52                   	push   edx
c001e692:	50                   	push   eax
c001e693:	e8 c4 4d 00 00       	call   c002345c <__udivdi3>
c001e698:	83 c4 10             	add    esp,0x10
c001e69b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001e69f:	89 01                	mov    DWORD PTR [ecx],eax
c001e6a1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e6a4:	b8 00 00 00 00       	mov    eax,0x0
c001e6a9:	eb 41                	jmp    c001e6ec <fatWrapperIoctl+0xfe>
c001e6ab:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e6b0:	75 07                	jne    c001e6b9 <fatWrapperIoctl+0xcb>
c001e6b2:	b8 00 00 00 00       	mov    eax,0x0
c001e6b7:	eb 33                	jmp    c001e6ec <fatWrapperIoctl+0xfe>
c001e6b9:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001e6be:	75 19                	jne    c001e6d9 <fatWrapperIoctl+0xeb>
c001e6c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e6c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e6c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6cc:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e6d2:	b8 00 00 00 00       	mov    eax,0x0
c001e6d7:	eb 13                	jmp    c001e6ec <fatWrapperIoctl+0xfe>
c001e6d9:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001e6de:	75 07                	jne    c001e6e7 <fatWrapperIoctl+0xf9>
c001e6e0:	b8 00 00 00 00       	mov    eax,0x0
c001e6e5:	eb 05                	jmp    c001e6ec <fatWrapperIoctl+0xfe>
c001e6e7:	b8 04 00 00 00       	mov    eax,0x4
c001e6ec:	83 c4 28             	add    esp,0x28
c001e6ef:	5b                   	pop    ebx
c001e6f0:	c3                   	ret    
c001e6f1:	90                   	nop

c001e6f2 <FAT::FAT()>:
c001e6f2:	83 ec 1c             	sub    esp,0x1c
c001e6f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6f9:	83 ec 0c             	sub    esp,0xc
c001e6fc:	50                   	push   eax
c001e6fd:	e8 48 3e ff ff       	call   c001254a <Filesystem::Filesystem()>
c001e702:	83 c4 10             	add    esp,0x10
c001e705:	ba 74 8b 02 c0       	mov    edx,0xc0028b74
c001e70a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e70e:	89 10                	mov    DWORD PTR [eax],edx
c001e710:	c7 05 00 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ba00,0x0
c001e71a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e722:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001e727:	7f 15                	jg     c001e73e <FAT::FAT()+0x4c>
c001e729:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e72d:	c7 04 85 20 ba 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd45e0],0xffffffff
c001e738:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e73c:	eb e4                	jmp    c001e722 <FAT::FAT()+0x30>
c001e73e:	90                   	nop
c001e73f:	83 c4 1c             	add    esp,0x1c
c001e742:	c3                   	ret    
c001e743:	90                   	nop

c001e744 <FAT::fixFilepath(char*)>:
c001e744:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e748:	8a 00                	mov    al,BYTE PTR [eax]
c001e74a:	3c 40                	cmp    al,0x40
c001e74c:	7e 2c                	jle    c001e77a <FAT::fixFilepath(char*)+0x36>
c001e74e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e752:	8a 00                	mov    al,BYTE PTR [eax]
c001e754:	83 e8 41             	sub    eax,0x41
c001e757:	88 c2                	mov    dl,al
c001e759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e75d:	88 10                	mov    BYTE PTR [eax],dl
c001e75f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e763:	8a 00                	mov    al,BYTE PTR [eax]
c001e765:	0f be c0             	movsx  eax,al
c001e768:	8b 04 85 20 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd45e0]
c001e76f:	83 c0 30             	add    eax,0x30
c001e772:	88 c2                	mov    dl,al
c001e774:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e778:	88 10                	mov    BYTE PTR [eax],dl
c001e77a:	90                   	nop
c001e77b:	c3                   	ret    

c001e77c <FAT::open(char const*, void**, FileOpenMode)>:
c001e77c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e782:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e78a:	74 0a                	je     c001e796 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001e78c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e794:	75 0a                	jne    c001e7a0 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001e796:	b8 04 00 00 00       	mov    eax,0x4
c001e79b:	e9 fd 00 00 00       	jmp    c001e89d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e7a0:	83 ec 08             	sub    esp,0x8
c001e7a3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e7aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e7ae:	50                   	push   eax
c001e7af:	e8 68 1f fe ff       	call   c000071c <strcpy>
c001e7b4:	83 c4 10             	add    esp,0x10
c001e7b7:	83 ec 08             	sub    esp,0x8
c001e7ba:	8d 44 24 10          	lea    eax,[esp+0x10]
c001e7be:	50                   	push   eax
c001e7bf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e7c6:	e8 79 ff ff ff       	call   c001e744 <FAT::fixFilepath(char*)>
c001e7cb:	83 c4 10             	add    esp,0x10
c001e7ce:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001e7d6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e7dd:	83 e0 01             	and    eax,0x1
c001e7e0:	74 08                	je     c001e7ea <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001e7e2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001e7ea:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e7f1:	83 e0 04             	and    eax,0x4
c001e7f4:	74 10                	je     c001e806 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001e7f6:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001e7fe:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e806:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e80d:	83 e0 02             	and    eax,0x2
c001e810:	74 08                	je     c001e81a <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001e812:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e81a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e821:	83 e0 08             	and    eax,0x8
c001e824:	74 08                	je     c001e82e <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001e826:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001e82e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e835:	83 e0 10             	and    eax,0x10
c001e838:	74 08                	je     c001e842 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001e83a:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001e842:	83 ec 0c             	sub    esp,0xc
c001e845:	68 50 02 00 00       	push   0x250
c001e84a:	e8 cf 08 ff ff       	call   c000f11e <malloc>
c001e84f:	83 c4 10             	add    esp,0x10
c001e852:	89 c2                	mov    edx,eax
c001e854:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e85b:	89 10                	mov    DWORD PTR [eax],edx
c001e85d:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001e865:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e86c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e86e:	83 ec 04             	sub    esp,0x4
c001e871:	52                   	push   edx
c001e872:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e876:	52                   	push   edx
c001e877:	50                   	push   eax
c001e878:	e8 b6 64 fe ff       	call   c0004d33 <f_open>
c001e87d:	83 c4 10             	add    esp,0x10
c001e880:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001e887:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001e88f:	74 07                	je     c001e898 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001e891:	b8 01 00 00 00       	mov    eax,0x1
c001e896:	eb 05                	jmp    c001e89d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e898:	b8 00 00 00 00       	mov    eax,0x0
c001e89d:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e8a3:	c3                   	ret    

c001e8a4 <FAT::openDir(char const*, void**)>:
c001e8a4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e8aa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e8b2:	74 0a                	je     c001e8be <FAT::openDir(char const*, void**)+0x1a>
c001e8b4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e8bc:	75 07                	jne    c001e8c5 <FAT::openDir(char const*, void**)+0x21>
c001e8be:	b8 04 00 00 00       	mov    eax,0x4
c001e8c3:	eb 7d                	jmp    c001e942 <FAT::openDir(char const*, void**)+0x9e>
c001e8c5:	83 ec 08             	sub    esp,0x8
c001e8c8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e8cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e8d3:	50                   	push   eax
c001e8d4:	e8 43 1e fe ff       	call   c000071c <strcpy>
c001e8d9:	83 c4 10             	add    esp,0x10
c001e8dc:	83 ec 08             	sub    esp,0x8
c001e8df:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e8e3:	50                   	push   eax
c001e8e4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e8eb:	e8 54 fe ff ff       	call   c001e744 <FAT::fixFilepath(char*)>
c001e8f0:	83 c4 10             	add    esp,0x10
c001e8f3:	83 ec 0c             	sub    esp,0xc
c001e8f6:	6a 4c                	push   0x4c
c001e8f8:	e8 21 08 ff ff       	call   c000f11e <malloc>
c001e8fd:	83 c4 10             	add    esp,0x10
c001e900:	89 c2                	mov    edx,eax
c001e902:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e909:	89 10                	mov    DWORD PTR [eax],edx
c001e90b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e912:	8b 00                	mov    eax,DWORD PTR [eax]
c001e914:	83 ec 08             	sub    esp,0x8
c001e917:	8d 54 24 14          	lea    edx,[esp+0x14]
c001e91b:	52                   	push   edx
c001e91c:	50                   	push   eax
c001e91d:	e8 49 74 fe ff       	call   c0005d6b <f_opendir>
c001e922:	83 c4 10             	add    esp,0x10
c001e925:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001e92c:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001e934:	74 07                	je     c001e93d <FAT::openDir(char const*, void**)+0x99>
c001e936:	b8 01 00 00 00       	mov    eax,0x1
c001e93b:	eb 05                	jmp    c001e942 <FAT::openDir(char const*, void**)+0x9e>
c001e93d:	b8 00 00 00 00       	mov    eax,0x0
c001e942:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e948:	c3                   	ret    
c001e949:	90                   	nop

c001e94a <FAT::stat(char const*, unsigned long long*, bool*)>:
c001e94a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001e950:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001e958:	75 0a                	jne    c001e964 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001e95a:	b8 04 00 00 00       	mov    eax,0x4
c001e95f:	e9 c9 00 00 00       	jmp    c001ea2d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e964:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001e96c:	75 0a                	jne    c001e978 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001e96e:	b8 04 00 00 00       	mov    eax,0x4
c001e973:	e9 b5 00 00 00       	jmp    c001ea2d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e978:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001e980:	75 0a                	jne    c001e98c <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001e982:	b8 04 00 00 00       	mov    eax,0x4
c001e987:	e9 a1 00 00 00       	jmp    c001ea2d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e98c:	83 ec 08             	sub    esp,0x8
c001e98f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e996:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001e99d:	50                   	push   eax
c001e99e:	e8 79 1d fe ff       	call   c000071c <strcpy>
c001e9a3:	83 c4 10             	add    esp,0x10
c001e9a6:	83 ec 08             	sub    esp,0x8
c001e9a9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001e9b0:	50                   	push   eax
c001e9b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e9b8:	e8 87 fd ff ff       	call   c001e744 <FAT::fixFilepath(char*)>
c001e9bd:	83 c4 10             	add    esp,0x10
c001e9c0:	83 ec 08             	sub    esp,0x8
c001e9c3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e9c7:	50                   	push   eax
c001e9c8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001e9cf:	50                   	push   eax
c001e9d0:	e8 55 75 fe ff       	call   c0005f2a <f_stat>
c001e9d5:	83 c4 10             	add    esp,0x10
c001e9d8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001e9df:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001e9e6:	85 c0                	test   eax,eax
c001e9e8:	74 07                	je     c001e9f1 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001e9ea:	83 f8 04             	cmp    eax,0x4
c001e9ed:	74 32                	je     c001ea21 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001e9ef:	eb 37                	jmp    c001ea28 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001e9f1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e9f5:	0f b6 c0             	movzx  eax,al
c001e9f8:	83 e0 10             	and    eax,0x10
c001e9fb:	0f 95 c2             	setne  dl
c001e9fe:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ea05:	88 10                	mov    BYTE PTR [eax],dl
c001ea07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ea0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea0e:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ea15:	89 01                	mov    DWORD PTR [ecx],eax
c001ea17:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ea1a:	b8 00 00 00 00       	mov    eax,0x0
c001ea1f:	eb 0c                	jmp    c001ea2d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea21:	b8 02 00 00 00       	mov    eax,0x2
c001ea26:	eb 05                	jmp    c001ea2d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea28:	b8 01 00 00 00       	mov    eax,0x1
c001ea2d:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ea33:	c3                   	ret    

c001ea34 <FAT::unlink(char const*)>:
c001ea34:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ea3a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ea42:	75 07                	jne    c001ea4b <FAT::unlink(char const*)+0x17>
c001ea44:	b8 04 00 00 00       	mov    eax,0x4
c001ea49:	eb 5c                	jmp    c001eaa7 <FAT::unlink(char const*)+0x73>
c001ea4b:	83 ec 08             	sub    esp,0x8
c001ea4e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ea55:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ea59:	50                   	push   eax
c001ea5a:	e8 bd 1c fe ff       	call   c000071c <strcpy>
c001ea5f:	83 c4 10             	add    esp,0x10
c001ea62:	83 ec 08             	sub    esp,0x8
c001ea65:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ea69:	50                   	push   eax
c001ea6a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ea71:	e8 ce fc ff ff       	call   c001e744 <FAT::fixFilepath(char*)>
c001ea76:	83 c4 10             	add    esp,0x10
c001ea79:	83 ec 0c             	sub    esp,0xc
c001ea7c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ea80:	50                   	push   eax
c001ea81:	e8 f6 77 fe ff       	call   c000627c <f_unlink>
c001ea86:	83 c4 10             	add    esp,0x10
c001ea89:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ea90:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ea97:	85 c0                	test   eax,eax
c001ea99:	75 07                	jne    c001eaa2 <FAT::unlink(char const*)+0x6e>
c001ea9b:	b8 00 00 00 00       	mov    eax,0x0
c001eaa0:	eb 05                	jmp    c001eaa7 <FAT::unlink(char const*)+0x73>
c001eaa2:	b8 01 00 00 00       	mov    eax,0x1
c001eaa7:	81 c4 1c 01 00 00    	add    esp,0x11c
c001eaad:	c3                   	ret    

c001eaae <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001eaae:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001eab4:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001eabb:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001eac2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001eac6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001eaca:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ead2:	75 0a                	jne    c001eade <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ead4:	b8 04 00 00 00       	mov    eax,0x4
c001ead9:	e9 1c 01 00 00       	jmp    c001ebfa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001eade:	83 ec 08             	sub    esp,0x8
c001eae1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001eae8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001eaec:	50                   	push   eax
c001eaed:	e8 2a 1c fe ff       	call   c000071c <strcpy>
c001eaf2:	83 c4 10             	add    esp,0x10
c001eaf5:	83 ec 08             	sub    esp,0x8
c001eaf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eafc:	50                   	push   eax
c001eafd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001eb04:	e8 3b fc ff ff       	call   c001e744 <FAT::fixFilepath(char*)>
c001eb09:	83 c4 10             	add    esp,0x10
c001eb0c:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001eb14:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001eb1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb21:	83 e0 01             	and    eax,0x1
c001eb24:	74 08                	je     c001eb2e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001eb26:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001eb2e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb33:	83 e0 02             	and    eax,0x2
c001eb36:	74 08                	je     c001eb40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001eb38:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001eb40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb45:	83 e0 04             	and    eax,0x4
c001eb48:	74 08                	je     c001eb52 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001eb4a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001eb52:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb57:	83 e0 08             	and    eax,0x8
c001eb5a:	74 08                	je     c001eb64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001eb5c:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001eb64:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eb69:	83 e0 01             	and    eax,0x1
c001eb6c:	74 08                	je     c001eb76 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001eb6e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001eb76:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eb7b:	83 e0 02             	and    eax,0x2
c001eb7e:	74 08                	je     c001eb88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001eb80:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001eb88:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eb8d:	83 e0 04             	and    eax,0x4
c001eb90:	74 08                	je     c001eb9a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001eb92:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001eb9a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eb9f:	83 e0 08             	and    eax,0x8
c001eba2:	74 08                	je     c001ebac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001eba4:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ebac:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ebb3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ebba:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001ebc2:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ebca:	83 ec 04             	sub    esp,0x4
c001ebcd:	52                   	push   edx
c001ebce:	50                   	push   eax
c001ebcf:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ebd3:	50                   	push   eax
c001ebd4:	e8 45 7d fe ff       	call   c000691e <f_chmod>
c001ebd9:	83 c4 10             	add    esp,0x10
c001ebdc:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ebe3:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ebea:	85 c0                	test   eax,eax
c001ebec:	75 07                	jne    c001ebf5 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001ebee:	b8 00 00 00 00       	mov    eax,0x0
c001ebf3:	eb 05                	jmp    c001ebfa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ebf5:	b8 01 00 00 00       	mov    eax,0x1
c001ebfa:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ec00:	c3                   	ret    
c001ec01:	90                   	nop

c001ec02 <FAT::rename(char const*, char const*)>:
c001ec02:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ec08:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ec10:	74 0a                	je     c001ec1c <FAT::rename(char const*, char const*)+0x1a>
c001ec12:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ec1a:	75 0a                	jne    c001ec26 <FAT::rename(char const*, char const*)+0x24>
c001ec1c:	b8 04 00 00 00       	mov    eax,0x4
c001ec21:	e9 98 00 00 00       	jmp    c001ecbe <FAT::rename(char const*, char const*)+0xbc>
c001ec26:	83 ec 08             	sub    esp,0x8
c001ec29:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ec30:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ec37:	50                   	push   eax
c001ec38:	e8 df 1a fe ff       	call   c000071c <strcpy>
c001ec3d:	83 c4 10             	add    esp,0x10
c001ec40:	83 ec 08             	sub    esp,0x8
c001ec43:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ec4a:	50                   	push   eax
c001ec4b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ec52:	e8 ed fa ff ff       	call   c001e744 <FAT::fixFilepath(char*)>
c001ec57:	83 c4 10             	add    esp,0x10
c001ec5a:	83 ec 08             	sub    esp,0x8
c001ec5d:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ec64:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ec68:	50                   	push   eax
c001ec69:	e8 ae 1a fe ff       	call   c000071c <strcpy>
c001ec6e:	83 c4 10             	add    esp,0x10
c001ec71:	83 ec 08             	sub    esp,0x8
c001ec74:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ec78:	50                   	push   eax
c001ec79:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ec80:	e8 bf fa ff ff       	call   c001e744 <FAT::fixFilepath(char*)>
c001ec85:	83 c4 10             	add    esp,0x10
c001ec88:	83 ec 08             	sub    esp,0x8
c001ec8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ec8f:	50                   	push   eax
c001ec90:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ec97:	50                   	push   eax
c001ec98:	e8 8e 79 fe ff       	call   c000662b <f_rename>
c001ec9d:	83 c4 10             	add    esp,0x10
c001eca0:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001eca7:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ecae:	85 c0                	test   eax,eax
c001ecb0:	75 07                	jne    c001ecb9 <FAT::rename(char const*, char const*)+0xb7>
c001ecb2:	b8 00 00 00 00       	mov    eax,0x0
c001ecb7:	eb 05                	jmp    c001ecbe <FAT::rename(char const*, char const*)+0xbc>
c001ecb9:	b8 01 00 00 00       	mov    eax,0x1
c001ecbe:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ecc4:	c3                   	ret    
c001ecc5:	90                   	nop

c001ecc6 <FAT::mkdir(char const*)>:
c001ecc6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001eccc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ecd4:	75 07                	jne    c001ecdd <FAT::mkdir(char const*)+0x17>
c001ecd6:	b8 04 00 00 00       	mov    eax,0x4
c001ecdb:	eb 5c                	jmp    c001ed39 <FAT::mkdir(char const*)+0x73>
c001ecdd:	83 ec 08             	sub    esp,0x8
c001ece0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ece7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eceb:	50                   	push   eax
c001ecec:	e8 2b 1a fe ff       	call   c000071c <strcpy>
c001ecf1:	83 c4 10             	add    esp,0x10
c001ecf4:	83 ec 08             	sub    esp,0x8
c001ecf7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ecfb:	50                   	push   eax
c001ecfc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ed03:	e8 3c fa ff ff       	call   c001e744 <FAT::fixFilepath(char*)>
c001ed08:	83 c4 10             	add    esp,0x10
c001ed0b:	83 ec 0c             	sub    esp,0xc
c001ed0e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ed12:	50                   	push   eax
c001ed13:	e8 e7 76 fe ff       	call   c00063ff <f_mkdir>
c001ed18:	83 c4 10             	add    esp,0x10
c001ed1b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ed22:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ed29:	85 c0                	test   eax,eax
c001ed2b:	75 07                	jne    c001ed34 <FAT::mkdir(char const*)+0x6e>
c001ed2d:	b8 00 00 00 00       	mov    eax,0x0
c001ed32:	eb 05                	jmp    c001ed39 <FAT::mkdir(char const*)+0x73>
c001ed34:	b8 01 00 00 00       	mov    eax,0x1
c001ed39:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ed3f:	c3                   	ret    

c001ed40 <FAT::exists(char const*)>:
c001ed40:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ed46:	83 ec 08             	sub    esp,0x8
c001ed49:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ed50:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed54:	50                   	push   eax
c001ed55:	e8 c2 19 fe ff       	call   c000071c <strcpy>
c001ed5a:	83 c4 10             	add    esp,0x10
c001ed5d:	83 ec 08             	sub    esp,0x8
c001ed60:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ed64:	50                   	push   eax
c001ed65:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ed6c:	e8 d3 f9 ff ff       	call   c001e744 <FAT::fixFilepath(char*)>
c001ed71:	83 c4 10             	add    esp,0x10
c001ed74:	83 ec 08             	sub    esp,0x8
c001ed77:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001ed7e:	50                   	push   eax
c001ed7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed83:	50                   	push   eax
c001ed84:	e8 a1 71 fe ff       	call   c0005f2a <f_stat>
c001ed89:	83 c4 10             	add    esp,0x10
c001ed8c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ed93:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ed9a:	85 c0                	test   eax,eax
c001ed9c:	75 04                	jne    c001eda2 <FAT::exists(char const*)+0x62>
c001ed9e:	b0 01                	mov    al,0x1
c001eda0:	eb 02                	jmp    c001eda4 <FAT::exists(char const*)+0x64>
c001eda2:	b0 00                	mov    al,0x0
c001eda4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001edaa:	c3                   	ret    
c001edab:	90                   	nop

c001edac <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001edac:	b8 08 00 00 00       	mov    eax,0x8
c001edb1:	c3                   	ret    

c001edb2 <ISO9660::seek(void*, unsigned long long)>:
c001edb2:	53                   	push   ebx
c001edb3:	b8 04 00 00 00       	mov    eax,0x4
c001edb8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001edbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001edc0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001edc4:	85 d2                	test   edx,edx
c001edc6:	74 17                	je     c001eddf <ISO9660::seek(void*, unsigned long long)+0x2d>
c001edc8:	89 c8                	mov    eax,ecx
c001edca:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001edcd:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001edd0:	b8 01 00 00 00       	mov    eax,0x1
c001edd5:	73 08                	jae    c001eddf <ISO9660::seek(void*, unsigned long long)+0x2d>
c001edd7:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001edda:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001eddd:	31 c0                	xor    eax,eax
c001eddf:	5b                   	pop    ebx
c001ede0:	c3                   	ret    
c001ede1:	90                   	nop

c001ede2 <ISO9660::tell(void*, unsigned long long*)>:
c001ede2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ede6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edea:	85 d2                	test   edx,edx
c001edec:	74 12                	je     c001ee00 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001edee:	85 c0                	test   eax,eax
c001edf0:	74 0e                	je     c001ee00 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001edf2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001edf5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001edf8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001edfb:	89 10                	mov    DWORD PTR [eax],edx
c001edfd:	31 c0                	xor    eax,eax
c001edff:	c3                   	ret    
c001ee00:	b8 04 00 00 00       	mov    eax,0x4
c001ee05:	c3                   	ret    

c001ee06 <ISO9660::getName()>:
c001ee06:	b8 d0 8b 02 c0       	mov    eax,0xc0028bd0
c001ee0b:	c3                   	ret    

c001ee0c <ISO9660::stat(void*, unsigned long long*)>:
c001ee0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee14:	85 d2                	test   edx,edx
c001ee16:	74 12                	je     c001ee2a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ee18:	85 c0                	test   eax,eax
c001ee1a:	74 0e                	je     c001ee2a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ee1c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ee1f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ee22:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ee25:	89 10                	mov    DWORD PTR [eax],edx
c001ee27:	31 c0                	xor    eax,eax
c001ee29:	c3                   	ret    
c001ee2a:	b8 04 00 00 00       	mov    eax,0x4
c001ee2f:	c3                   	ret    

c001ee30 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ee30:	b8 01 00 00 00       	mov    eax,0x1
c001ee35:	c3                   	ret    

c001ee36 <ISO9660::unlink(char const*)>:
c001ee36:	b8 01 00 00 00       	mov    eax,0x1
c001ee3b:	c3                   	ret    

c001ee3c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ee3c:	b8 01 00 00 00       	mov    eax,0x1
c001ee41:	c3                   	ret    

c001ee42 <ISO9660::rename(char const*, char const*)>:
c001ee42:	b8 01 00 00 00       	mov    eax,0x1
c001ee47:	c3                   	ret    

c001ee48 <ISO9660::mkdir(char const*)>:
c001ee48:	b8 01 00 00 00       	mov    eax,0x1
c001ee4d:	c3                   	ret    

c001ee4e <ISO9660::close(void*)>:
c001ee4e:	83 ec 0c             	sub    esp,0xc
c001ee51:	b8 04 00 00 00       	mov    eax,0x4
c001ee56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee5a:	85 d2                	test   edx,edx
c001ee5c:	74 0e                	je     c001ee6c <ISO9660::close(void*)+0x1e>
c001ee5e:	83 ec 0c             	sub    esp,0xc
c001ee61:	52                   	push   edx
c001ee62:	e8 c7 02 ff ff       	call   c000f12e <free>
c001ee67:	83 c4 10             	add    esp,0x10
c001ee6a:	31 c0                	xor    eax,eax
c001ee6c:	83 c4 0c             	add    esp,0xc
c001ee6f:	c3                   	ret    

c001ee70 <ISO9660::closeDir(void*)>:
c001ee70:	83 ec 0c             	sub    esp,0xc
c001ee73:	b8 04 00 00 00       	mov    eax,0x4
c001ee78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee7c:	85 d2                	test   edx,edx
c001ee7e:	74 0e                	je     c001ee8e <ISO9660::closeDir(void*)+0x1e>
c001ee80:	83 ec 0c             	sub    esp,0xc
c001ee83:	52                   	push   edx
c001ee84:	e8 a5 02 ff ff       	call   c000f12e <free>
c001ee89:	83 c4 10             	add    esp,0x10
c001ee8c:	31 c0                	xor    eax,eax
c001ee8e:	83 c4 0c             	add    esp,0xc
c001ee91:	c3                   	ret    

c001ee92 <ISO9660::~ISO9660()>:
c001ee92:	83 ec 0c             	sub    esp,0xc
c001ee95:	ba 24 8c 02 c0       	mov    edx,0xc0028c24
c001ee9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9e:	89 10                	mov    DWORD PTR [eax],edx
c001eea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea4:	83 ec 0c             	sub    esp,0xc
c001eea7:	50                   	push   eax
c001eea8:	e8 c1 36 ff ff       	call   c001256e <Filesystem::~Filesystem()>
c001eead:	83 c4 10             	add    esp,0x10
c001eeb0:	90                   	nop
c001eeb1:	83 c4 0c             	add    esp,0xc
c001eeb4:	c3                   	ret    
c001eeb5:	90                   	nop

c001eeb6 <ISO9660::~ISO9660()>:
c001eeb6:	83 ec 0c             	sub    esp,0xc
c001eeb9:	83 ec 0c             	sub    esp,0xc
c001eebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eec0:	e8 cd ff ff ff       	call   c001ee92 <ISO9660::~ISO9660()>
c001eec5:	83 c4 10             	add    esp,0x10
c001eec8:	83 ec 08             	sub    esp,0x8
c001eecb:	6a 08                	push   0x8
c001eecd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eed1:	e8 8f 32 ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c001eed6:	83 c4 10             	add    esp,0x10
c001eed9:	83 c4 0c             	add    esp,0xc
c001eedc:	c3                   	ret    

c001eedd <__memmem(unsigned char*, int, unsigned char*, int)>:
c001eedd:	55                   	push   ebp
c001eede:	31 c9                	xor    ecx,ecx
c001eee0:	57                   	push   edi
c001eee1:	56                   	push   esi
c001eee2:	53                   	push   ebx
c001eee3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001eee7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001eeeb:	89 eb                	mov    ebx,ebp
c001eeed:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001eef1:	39 ce                	cmp    esi,ecx
c001eef3:	7e 17                	jle    c001ef0c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001eef5:	31 d2                	xor    edx,edx
c001eef7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001eefb:	7d 13                	jge    c001ef10 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001eefd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ef01:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ef04:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001ef07:	75 0d                	jne    c001ef16 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001ef09:	42                   	inc    edx
c001ef0a:	eb eb                	jmp    c001eef7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001ef0c:	31 c0                	xor    eax,eax
c001ef0e:	eb 0a                	jmp    c001ef1a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ef10:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ef14:	eb 04                	jmp    c001ef1a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ef16:	41                   	inc    ecx
c001ef17:	43                   	inc    ebx
c001ef18:	eb d7                	jmp    c001eef1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ef1a:	5b                   	pop    ebx
c001ef1b:	5e                   	pop    esi
c001ef1c:	5f                   	pop    edi
c001ef1d:	5d                   	pop    ebp
c001ef1e:	c3                   	ret    

c001ef1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ef1f:	56                   	push   esi
c001ef20:	53                   	push   ebx
c001ef21:	52                   	push   edx
c001ef22:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef26:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ef2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef2e:	39 0d 00 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb00,ecx
c001ef34:	75 08                	jne    c001ef3e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001ef36:	38 05 08 9a 02 c0    	cmp    BYTE PTR ds:0xc0029a08,al
c001ef3c:	74 2b                	je     c001ef69 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001ef3e:	83 ec 0c             	sub    esp,0xc
c001ef41:	a2 08 9a 02 c0       	mov    ds:0xc0029a08,al
c001ef46:	68 20 bb 02 c0       	push   0xc002bb20
c001ef4b:	0f be c0             	movsx  eax,al
c001ef4e:	6a 01                	push   0x1
c001ef50:	89 0d 00 bb 02 c0    	mov    DWORD PTR ds:0xc002bb00,ecx
c001ef56:	31 db                	xor    ebx,ebx
c001ef58:	53                   	push   ebx
c001ef59:	51                   	push   ecx
c001ef5a:	ff 34 85 5c a9 02 c0 	push   DWORD PTR [eax*4-0x3ffd56a4]
c001ef61:	e8 c4 68 ff ff       	call   c001582a <LogicalDisk::read(unsigned long long, int, void*)>
c001ef66:	83 c4 20             	add    esp,0x20
c001ef69:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001ef71:	c7 44 24 14 20 bb 02 c0 	mov    DWORD PTR [esp+0x14],0xc002bb20
c001ef79:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001ef7d:	58                   	pop    eax
c001ef7e:	5b                   	pop    ebx
c001ef7f:	5e                   	pop    esi
c001ef80:	e9 c2 16 fe ff       	jmp    c0000647 <memcpy>
c001ef85:	90                   	nop

c001ef86 <ISO9660::tryMount(LogicalDisk*, int)>:
c001ef86:	81 ec 10 08 00 00    	sub    esp,0x810
c001ef8c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001ef93:	83 c0 41             	add    eax,0x41
c001ef96:	0f be c0             	movsx  eax,al
c001ef99:	50                   	push   eax
c001ef9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ef9e:	50                   	push   eax
c001ef9f:	6a 10                	push   0x10
c001efa1:	e8 79 ff ff ff       	call   c001ef1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001efa6:	83 c4 10             	add    esp,0x10
c001efa9:	31 c0                	xor    eax,eax
c001efab:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001efb0:	75 1d                	jne    c001efcf <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efb2:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001efb7:	75 16                	jne    c001efcf <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efb9:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001efbe:	75 0f                	jne    c001efcf <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efc0:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001efc5:	75 08                	jne    c001efcf <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efc7:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001efcc:	0f 94 c0             	sete   al
c001efcf:	81 c4 0c 08 00 00    	add    esp,0x80c
c001efd5:	c3                   	ret    

c001efd6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001efd6:	55                   	push   ebp
c001efd7:	57                   	push   edi
c001efd8:	56                   	push   esi
c001efd9:	53                   	push   ebx
c001efda:	81 ec 34 08 00 00    	sub    esp,0x834
c001efe0:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001efe7:	55                   	push   ebp
c001efe8:	68 eb 8b 02 c0       	push   0xc0028beb
c001efed:	e8 53 32 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001eff2:	83 c4 10             	add    esp,0x10
c001eff5:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001effd:	0f 84 06 02 00 00    	je     c001f209 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f003:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001f00b:	0f 84 f8 01 00 00    	je     c001f209 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f011:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f018:	b8 01 00 00 00       	mov    eax,0x1
c001f01d:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001f021:	0f 85 e7 01 00 00    	jne    c001f20e <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f027:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001f02a:	31 d2                	xor    edx,edx
c001f02c:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001f02f:	89 e9                	mov    ecx,ebp
c001f031:	89 d3                	mov    ebx,edx
c001f033:	01 f1                	add    ecx,esi
c001f035:	11 fb                	adc    ebx,edi
c001f037:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f03b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f03f:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001f046:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001f049:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001f04c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f050:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001f054:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f058:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f05c:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f060:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001f064:	72 19                	jb     c001f07f <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001f066:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f072:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f07d:	eb 13                	jmp    c001f092 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001f07f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f083:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f087:	29 f0                	sub    eax,esi
c001f089:	19 fa                	sbb    edx,edi
c001f08b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f08e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f092:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001f099:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f09c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f09e:	53                   	push   ebx
c001f09f:	0f a4 c2 0b          	shld   edx,eax,0xb
c001f0a3:	c1 e0 0b             	shl    eax,0xb
c001f0a6:	01 c6                	add    esi,eax
c001f0a8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f0af:	11 d7                	adc    edi,edx
c001f0b1:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f0b5:	89 fa                	mov    edx,edi
c001f0b7:	50                   	push   eax
c001f0b8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f0bc:	50                   	push   eax
c001f0bd:	89 f0                	mov    eax,esi
c001f0bf:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f0c3:	50                   	push   eax
c001f0c4:	e8 56 fe ff ff       	call   c001ef1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f0c9:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f0d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f0d4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f0d7:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001f0db:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001f0e1:	83 c4 10             	add    esp,0x10
c001f0e4:	b8 00 08 00 00       	mov    eax,0x800
c001f0e9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001f0ed:	29 d0                	sub    eax,edx
c001f0ef:	39 c1                	cmp    ecx,eax
c001f0f1:	83 db 00             	sbb    ebx,0x0
c001f0f4:	7d 19                	jge    c001f10f <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001f0f6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001f0fb:	75 16                	jne    c001f113 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001f0fd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f104:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f10a:	e9 f6 00 00 00       	jmp    c001f205 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001f10f:	89 c5                	mov    ebp,eax
c001f111:	eb 03                	jmp    c001f116 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001f113:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001f116:	51                   	push   ecx
c001f117:	55                   	push   ebp
c001f118:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001f11c:	50                   	push   eax
c001f11d:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001f124:	e8 1e 15 fe ff       	call   c0000647 <memcpy>
c001f129:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f12d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f131:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001f138:	01 e8                	add    eax,ebp
c001f13a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f13e:	89 e8                	mov    eax,ebp
c001f140:	99                   	cdq    
c001f141:	01 ee                	add    esi,ebp
c001f143:	11 d7                	adc    edi,edx
c001f145:	29 e9                	sub    ecx,ebp
c001f147:	19 d3                	sbb    ebx,edx
c001f149:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f14d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f151:	83 c4 10             	add    esp,0x10
c001f154:	b8 ff 07 00 00       	mov    eax,0x7ff
c001f159:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001f15c:	b8 00 00 00 00       	mov    eax,0x0
c001f161:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f165:	7d 3f                	jge    c001f1a6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001f167:	52                   	push   edx
c001f168:	89 fa                	mov    edx,edi
c001f16a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f171:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f175:	50                   	push   eax
c001f176:	89 f0                	mov    eax,esi
c001f178:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f17c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f180:	50                   	push   eax
c001f181:	e8 99 fd ff ff       	call   c001ef1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f186:	81 c6 00 08 00 00    	add    esi,0x800
c001f18c:	83 d7 00             	adc    edi,0x0
c001f18f:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001f197:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001f19f:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001f1a4:	eb ab                	jmp    c001f151 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001f1a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1aa:	0b 04 24             	or     eax,DWORD PTR [esp]
c001f1ad:	74 34                	je     c001f1e3 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001f1af:	89 fa                	mov    edx,edi
c001f1b1:	50                   	push   eax
c001f1b2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f1b9:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f1bd:	50                   	push   eax
c001f1be:	89 f0                	mov    eax,esi
c001f1c0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f1c4:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f1c8:	55                   	push   ebp
c001f1c9:	50                   	push   eax
c001f1ca:	e8 50 fd ff ff       	call   c001ef1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f1cf:	83 c4 0c             	add    esp,0xc
c001f1d2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001f1d6:	55                   	push   ebp
c001f1d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1db:	e8 67 14 fe ff       	call   c0000647 <memcpy>
c001f1e0:	83 c4 10             	add    esp,0x10
c001f1e3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f1ea:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f1ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f1f2:	89 38                	mov    DWORD PTR [eax],edi
c001f1f4:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f1fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1ff:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001f202:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f205:	31 c0                	xor    eax,eax
c001f207:	eb 05                	jmp    c001f20e <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f209:	b8 04 00 00 00       	mov    eax,0x4
c001f20e:	81 c4 2c 08 00 00    	add    esp,0x82c
c001f214:	5b                   	pop    ebx
c001f215:	5e                   	pop    esi
c001f216:	5f                   	pop    edi
c001f217:	5d                   	pop    ebp
c001f218:	c3                   	ret    
c001f219:	90                   	nop

c001f21a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001f21a:	55                   	push   ebp
c001f21b:	57                   	push   edi
c001f21c:	56                   	push   esi
c001f21d:	53                   	push   ebx
c001f21e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001f224:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001f22b:	85 f6                	test   esi,esi
c001f22d:	0f 84 64 02 00 00    	je     c001f497 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f233:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001f23b:	0f 84 56 02 00 00    	je     c001f497 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f241:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001f244:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001f247:	75 0a                	jne    c001f253 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001f249:	b8 07 00 00 00       	mov    eax,0x7
c001f24e:	e9 49 02 00 00       	jmp    c001f49c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f253:	50                   	push   eax
c001f254:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f258:	50                   	push   eax
c001f259:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f260:	53                   	push   ebx
c001f261:	8b 06                	mov    eax,DWORD PTR [esi]
c001f263:	c1 e0 0b             	shl    eax,0xb
c001f266:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001f269:	c1 e8 0b             	shr    eax,0xb
c001f26c:	50                   	push   eax
c001f26d:	e8 ad fc ff ff       	call   c001ef1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f272:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f275:	83 c4 10             	add    esp,0x10
c001f278:	89 c1                	mov    ecx,eax
c001f27a:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001f27d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f283:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001f286:	84 db                	test   bl,bl
c001f288:	0f 85 90 00 00 00    	jne    c001f31e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001f28e:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001f294:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f29a:	29 c7                	sub    edi,eax
c001f29c:	89 fb                	mov    ebx,edi
c001f29e:	c1 fb 1f             	sar    ebx,0x1f
c001f2a1:	01 f8                	add    eax,edi
c001f2a3:	11 da                	adc    edx,ebx
c001f2a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f2ad:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001f2b0:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001f2b3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f2b6:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f2b9:	89 04 24             	mov    DWORD PTR [esp],eax
c001f2bc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f2c0:	89 d8                	mov    eax,ebx
c001f2c2:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f2c5:	ba 00 00 00 00       	mov    edx,0x0
c001f2ca:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f2ce:	b8 00 00 00 00       	mov    eax,0x0
c001f2d3:	73 0b                	jae    c001f2e0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001f2d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f2d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2dc:	29 f8                	sub    eax,edi
c001f2de:	19 da                	sbb    edx,ebx
c001f2e0:	89 d3                	mov    ebx,edx
c001f2e2:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f2e5:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f2e8:	09 c3                	or     ebx,eax
c001f2ea:	0f 84 59 ff ff ff    	je     c001f249 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001f2f0:	55                   	push   ebp
c001f2f1:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f2f5:	50                   	push   eax
c001f2f6:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f2fd:	53                   	push   ebx
c001f2fe:	8b 06                	mov    eax,DWORD PTR [esi]
c001f300:	c1 e0 0b             	shl    eax,0xb
c001f303:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001f307:	c1 e8 0b             	shr    eax,0xb
c001f30a:	50                   	push   eax
c001f30b:	e8 0f fc ff ff       	call   c001ef1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f310:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f313:	83 c4 10             	add    esp,0x10
c001f316:	25 ff 07 00 00       	and    eax,0x7ff
c001f31b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001f31e:	57                   	push   edi
c001f31f:	6a 28                	push   0x28
c001f321:	6a 00                	push   0x0
c001f323:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f327:	50                   	push   eax
c001f328:	e8 50 13 fe ff       	call   c000067d <memset>
c001f32d:	31 d2                	xor    edx,edx
c001f32f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001f332:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f338:	89 f8                	mov    eax,edi
c001f33a:	83 c0 21             	add    eax,0x21
c001f33d:	83 d2 00             	adc    edx,0x0
c001f340:	89 c7                	mov    edi,eax
c001f342:	89 d5                	mov    ebp,edx
c001f344:	83 c4 10             	add    esp,0x10
c001f347:	31 c9                	xor    ecx,ecx
c001f349:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001f350:	83 f9 28             	cmp    ecx,0x28
c001f353:	88 04 24             	mov    BYTE PTR [esp],al
c001f356:	0f 94 c2             	sete   dl
c001f359:	88 d0                	mov    al,dl
c001f35b:	ba ff 07 00 00       	mov    edx,0x7ff
c001f360:	39 fa                	cmp    edx,edi
c001f362:	ba 00 00 00 00       	mov    edx,0x0
c001f367:	19 ea                	sbb    edx,ebp
c001f369:	0f 92 c2             	setb   dl
c001f36c:	09 c2                	or     edx,eax
c001f36e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001f372:	0f 94 c0             	sete   al
c001f375:	08 d0                	or     al,dl
c001f377:	75 16                	jne    c001f38f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f379:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001f37d:	74 10                	je     c001f38f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f37f:	8a 04 24             	mov    al,BYTE PTR [esp]
c001f382:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001f386:	41                   	inc    ecx
c001f387:	83 c7 01             	add    edi,0x1
c001f38a:	83 d5 00             	adc    ebp,0x0
c001f38d:	eb ba                	jmp    c001f349 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001f38f:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001f396:	83 ec 0c             	sub    esp,0xc
c001f399:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f39d:	57                   	push   edi
c001f39e:	e8 f7 12 fe ff       	call   c000069a <strlen>
c001f3a3:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001f3ab:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f3af:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001f3b6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f3b9:	5a                   	pop    edx
c001f3ba:	25 ff 07 00 00       	and    eax,0x7ff
c001f3bf:	01 c8                	add    eax,ecx
c001f3c1:	59                   	pop    ecx
c001f3c2:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001f3c8:	83 e0 02             	and    eax,0x2
c001f3cb:	3c 01                	cmp    al,0x1
c001f3cd:	19 c0                	sbb    eax,eax
c001f3cf:	83 c0 02             	add    eax,0x2
c001f3d2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f3d6:	57                   	push   edi
c001f3d7:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001f3db:	50                   	push   eax
c001f3dc:	e8 3b 13 fe ff       	call   c000071c <strcpy>
c001f3e1:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001f3e5:	83 c4 10             	add    esp,0x10
c001f3e8:	84 c0                	test   al,al
c001f3ea:	75 21                	jne    c001f40d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001f3ec:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001f3f4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f3fc:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f404:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001f40b:	eb 28                	jmp    c001f435 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f40d:	fe c8                	dec    al
c001f40f:	75 24                	jne    c001f435 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f411:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001f419:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f421:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f429:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001f430:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001f435:	0f b6 fb             	movzx  edi,bl
c001f438:	31 db                	xor    ebx,ebx
c001f43a:	50                   	push   eax
c001f43b:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001f442:	8d 44 24 48          	lea    eax,[esp+0x48]
c001f446:	50                   	push   eax
c001f447:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001f44e:	e8 f4 11 fe ff       	call   c0000647 <memcpy>
c001f453:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001f45a:	89 f9                	mov    ecx,edi
c001f45c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001f462:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001f465:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f468:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001f46b:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f46e:	83 c4 10             	add    esp,0x10
c001f471:	39 c7                	cmp    edi,eax
c001f473:	89 df                	mov    edi,ebx
c001f475:	19 d7                	sbb    edi,edx
c001f477:	72 10                	jb     c001f489 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001f479:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001f480:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001f487:	eb 0a                	jmp    c001f493 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001f489:	29 c8                	sub    eax,ecx
c001f48b:	19 da                	sbb    edx,ebx
c001f48d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f490:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f493:	31 c0                	xor    eax,eax
c001f495:	eb 05                	jmp    c001f49c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f497:	b8 04 00 00 00       	mov    eax,0x4
c001f49c:	81 c4 5c 09 00 00    	add    esp,0x95c
c001f4a2:	5b                   	pop    ebx
c001f4a3:	5e                   	pop    esi
c001f4a4:	5f                   	pop    edi
c001f4a5:	5d                   	pop    ebp
c001f4a6:	c3                   	ret    

c001f4a7 <readRoot(unsigned int*, unsigned int*, char)>:
c001f4a7:	81 ec 40 08 00 00    	sub    esp,0x840
c001f4ad:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001f4b5:	50                   	push   eax
c001f4b6:	8d 44 24 38          	lea    eax,[esp+0x38]
c001f4ba:	50                   	push   eax
c001f4bb:	6a 10                	push   0x10
c001f4bd:	e8 5d fa ff ff       	call   c001ef1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f4c2:	83 c4 0c             	add    esp,0xc
c001f4c5:	6a 22                	push   0x22
c001f4c7:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001f4ce:	50                   	push   eax
c001f4cf:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f4d3:	50                   	push   eax
c001f4d4:	e8 6e 11 fe ff       	call   c0000647 <memcpy>
c001f4d9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f4e0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f4e4:	89 10                	mov    DWORD PTR [eax],edx
c001f4e6:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f4ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f4f1:	89 10                	mov    DWORD PTR [eax],edx
c001f4f3:	b0 01                	mov    al,0x1
c001f4f5:	81 c4 4c 08 00 00    	add    esp,0x84c
c001f4fb:	c3                   	ret    

c001f4fc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001f4fc:	55                   	push   ebp
c001f4fd:	57                   	push   edi
c001f4fe:	56                   	push   esi
c001f4ff:	53                   	push   ebx
c001f500:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f506:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001f50d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001f514:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f518:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001f51c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f520:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f524:	75 03                	jne    c001f529 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f526:	83 c3 02             	add    ebx,0x2
c001f529:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001f52c:	75 03                	jne    c001f531 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001f52e:	43                   	inc    ebx
c001f52f:	eb f8                	jmp    c001f529 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f531:	51                   	push   ecx
c001f532:	68 00 01 00 00       	push   0x100
c001f537:	6a 00                	push   0x0
c001f539:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f53d:	50                   	push   eax
c001f53e:	e8 3a 11 fe ff       	call   c000067d <memset>
c001f543:	83 c4 10             	add    esp,0x10
c001f546:	31 d2                	xor    edx,edx
c001f548:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f54b:	84 c0                	test   al,al
c001f54d:	74 21                	je     c001f570 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001f54f:	3c 2f                	cmp    al,0x2f
c001f551:	75 0b                	jne    c001f55e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001f553:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001f557:	bd 01 00 00 00       	mov    ebp,0x1
c001f55c:	eb 14                	jmp    c001f572 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001f55e:	8d 48 9f             	lea    ecx,[eax-0x61]
c001f561:	80 f9 19             	cmp    cl,0x19
c001f564:	77 03                	ja     c001f569 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f566:	83 e8 20             	sub    eax,0x20
c001f569:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001f56d:	42                   	inc    edx
c001f56e:	eb d8                	jmp    c001f548 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001f570:	31 ed                	xor    ebp,ebp
c001f572:	83 ec 0c             	sub    esp,0xc
c001f575:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001f57c:	e8 9d fb fe ff       	call   c000f11e <malloc>
c001f581:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001f588:	89 c6                	mov    esi,eax
c001f58a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001f590:	c1 ef 0b             	shr    edi,0xb
c001f593:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001f59a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001f59e:	83 c4 10             	add    esp,0x10
c001f5a1:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001f5a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5aa:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001f5b1:	74 28                	je     c001f5db <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001f5b3:	52                   	push   edx
c001f5b4:	57                   	push   edi
c001f5b5:	50                   	push   eax
c001f5b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f5ba:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001f5c1:	e8 59 f9 ff ff       	call   c001ef1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f5c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f5ca:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001f5d1:	05 00 08 00 00       	add    eax,0x800
c001f5d6:	83 c4 10             	add    esp,0x10
c001f5d9:	eb cb                	jmp    c001f5a6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001f5db:	83 ec 0c             	sub    esp,0xc
c001f5de:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001f5e2:	57                   	push   edi
c001f5e3:	e8 b2 10 fe ff       	call   c000069a <strlen>
c001f5e8:	50                   	push   eax
c001f5e9:	57                   	push   edi
c001f5ea:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001f5f1:	56                   	push   esi
c001f5f2:	e8 e6 f8 ff ff       	call   c001eedd <__memmem(unsigned char*, int, unsigned char*, int)>
c001f5f7:	83 c4 20             	add    esp,0x20
c001f5fa:	85 c0                	test   eax,eax
c001f5fc:	75 13                	jne    c001f611 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001f5fe:	83 ec 0c             	sub    esp,0xc
c001f601:	56                   	push   esi
c001f602:	e8 27 fb fe ff       	call   c000f12e <free>
c001f607:	83 c4 10             	add    esp,0x10
c001f60a:	31 c0                	xor    eax,eax
c001f60c:	e9 b3 00 00 00       	jmp    c001f6c4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f611:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001f615:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001f619:	c1 e7 08             	shl    edi,0x8
c001f61c:	c1 e2 10             	shl    edx,0x10
c001f61f:	09 d7                	or     edi,edx
c001f621:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001f625:	09 d7                	or     edi,edx
c001f627:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001f62b:	c1 e2 18             	shl    edx,0x18
c001f62e:	09 d7                	or     edi,edx
c001f630:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001f634:	89 d1                	mov    ecx,edx
c001f636:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001f63a:	c1 e1 08             	shl    ecx,0x8
c001f63d:	c1 e2 10             	shl    edx,0x10
c001f640:	09 ca                	or     edx,ecx
c001f642:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001f646:	09 ca                	or     edx,ecx
c001f648:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001f64c:	c1 e1 18             	shl    ecx,0x18
c001f64f:	09 ca                	or     edx,ecx
c001f651:	89 e9                	mov    ecx,ebp
c001f653:	84 c9                	test   cl,cl
c001f655:	74 3c                	je     c001f693 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001f657:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f65b:	83 ec 0c             	sub    esp,0xc
c001f65e:	56                   	push   esi
c001f65f:	e8 ca fa fe ff       	call   c000f12e <free>
c001f664:	83 c4 0c             	add    esp,0xc
c001f667:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f66e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001f673:	50                   	push   eax
c001f674:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f67b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f682:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f686:	52                   	push   edx
c001f687:	57                   	push   edi
c001f688:	53                   	push   ebx
c001f689:	e8 6e fe ff ff       	call   c001f4fc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f68e:	83 c4 20             	add    esp,0x20
c001f691:	eb 31                	jmp    c001f6c4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f693:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001f696:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001f69d:	d0 e8                	shr    al,1
c001f69f:	89 3b                	mov    DWORD PTR [ebx],edi
c001f6a1:	83 e0 01             	and    eax,0x1
c001f6a4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001f6ab:	83 ec 0c             	sub    esp,0xc
c001f6ae:	89 13                	mov    DWORD PTR [ebx],edx
c001f6b0:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001f6b7:	89 03                	mov    DWORD PTR [ebx],eax
c001f6b9:	56                   	push   esi
c001f6ba:	e8 6f fa fe ff       	call   c000f12e <free>
c001f6bf:	83 c4 10             	add    esp,0x10
c001f6c2:	b0 01                	mov    al,0x1
c001f6c4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f6ca:	5b                   	pop    ebx
c001f6cb:	5e                   	pop    esi
c001f6cc:	5f                   	pop    edi
c001f6cd:	5d                   	pop    ebp
c001f6ce:	c3                   	ret    

c001f6cf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001f6cf:	55                   	push   ebp
c001f6d0:	57                   	push   edi
c001f6d1:	56                   	push   esi
c001f6d2:	53                   	push   ebx
c001f6d3:	83 ec 20             	sub    esp,0x20
c001f6d6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f6da:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f6de:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f6e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f6ea:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f6f2:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001f6f7:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001f6fd:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001f703:	57                   	push   edi
c001f704:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f708:	50                   	push   eax
c001f709:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f70d:	50                   	push   eax
c001f70e:	e8 94 fd ff ff       	call   c001f4a7 <readRoot(unsigned int*, unsigned int*, char)>
c001f713:	5a                   	pop    edx
c001f714:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f718:	e8 7d 0f fe ff       	call   c000069a <strlen>
c001f71d:	83 c4 10             	add    esp,0x10
c001f720:	83 f8 03             	cmp    eax,0x3
c001f723:	77 17                	ja     c001f73c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f725:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f729:	89 03                	mov    DWORD PTR [ebx],eax
c001f72b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f72f:	89 06                	mov    DWORD PTR [esi],eax
c001f731:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001f738:	b0 01                	mov    al,0x1
c001f73a:	eb 19                	jmp    c001f755 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001f73c:	50                   	push   eax
c001f73d:	55                   	push   ebp
c001f73e:	57                   	push   edi
c001f73f:	56                   	push   esi
c001f740:	53                   	push   ebx
c001f741:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f745:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f749:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f74d:	e8 aa fd ff ff       	call   c001f4fc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f752:	83 c4 20             	add    esp,0x20
c001f755:	83 c4 1c             	add    esp,0x1c
c001f758:	5b                   	pop    ebx
c001f759:	5e                   	pop    esi
c001f75a:	5f                   	pop    edi
c001f75b:	5d                   	pop    ebp
c001f75c:	c3                   	ret    
c001f75d:	90                   	nop

c001f75e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001f75e:	57                   	push   edi
c001f75f:	56                   	push   esi
c001f760:	53                   	push   ebx
c001f761:	83 ec 10             	sub    esp,0x10
c001f764:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f768:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f76c:	85 ff                	test   edi,edi
c001f76e:	74 7b                	je     c001f7eb <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f770:	85 f6                	test   esi,esi
c001f772:	74 77                	je     c001f7eb <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f774:	83 ec 0c             	sub    esp,0xc
c001f777:	6a 1c                	push   0x1c
c001f779:	e8 a0 f9 fe ff       	call   c000f11e <malloc>
c001f77e:	89 07                	mov    DWORD PTR [edi],eax
c001f780:	89 c3                	mov    ebx,eax
c001f782:	58                   	pop    eax
c001f783:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f787:	50                   	push   eax
c001f788:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f78b:	50                   	push   eax
c001f78c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f790:	50                   	push   eax
c001f791:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f795:	50                   	push   eax
c001f796:	56                   	push   esi
c001f797:	e8 33 ff ff ff       	call   c001f6cf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f79c:	83 c4 20             	add    esp,0x20
c001f79f:	84 c0                	test   al,al
c001f7a1:	74 07                	je     c001f7aa <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001f7a3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f7a8:	74 0b                	je     c001f7b5 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001f7aa:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f7ae:	b8 01 00 00 00       	mov    eax,0x1
c001f7b3:	eb 3b                	jmp    c001f7f0 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f7b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7b9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f7bd:	89 03                	mov    DWORD PTR [ebx],eax
c001f7bf:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f7c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7ca:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f7d1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f7d8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f7db:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f7e2:	8a 06                	mov    al,BYTE PTR [esi]
c001f7e4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f7e7:	31 c0                	xor    eax,eax
c001f7e9:	eb 05                	jmp    c001f7f0 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f7eb:	b8 04 00 00 00       	mov    eax,0x4
c001f7f0:	83 c4 10             	add    esp,0x10
c001f7f3:	5b                   	pop    ebx
c001f7f4:	5e                   	pop    esi
c001f7f5:	5f                   	pop    edi
c001f7f6:	c3                   	ret    
c001f7f7:	90                   	nop

c001f7f8 <ISO9660::exists(char const*)>:
c001f7f8:	83 ec 28             	sub    esp,0x28
c001f7fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f7ff:	8d 54 24 18          	lea    edx,[esp+0x18]
c001f803:	52                   	push   edx
c001f804:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001f807:	52                   	push   edx
c001f808:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f80c:	52                   	push   edx
c001f80d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f811:	52                   	push   edx
c001f812:	50                   	push   eax
c001f813:	e8 b7 fe ff ff       	call   c001f6cf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f818:	83 c4 3c             	add    esp,0x3c
c001f81b:	c3                   	ret    

c001f81c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001f81c:	56                   	push   esi
c001f81d:	53                   	push   ebx
c001f81e:	83 ec 14             	sub    esp,0x14
c001f821:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001f825:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001f829:	85 db                	test   ebx,ebx
c001f82b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f82f:	0f 94 c2             	sete   dl
c001f832:	85 f6                	test   esi,esi
c001f834:	0f 94 c0             	sete   al
c001f837:	08 c2                	or     dl,al
c001f839:	75 68                	jne    c001f8a3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f83b:	85 c9                	test   ecx,ecx
c001f83d:	74 64                	je     c001f8a3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f83f:	83 ec 0c             	sub    esp,0xc
c001f842:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001f845:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f849:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f84f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f856:	50                   	push   eax
c001f857:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001f85a:	50                   	push   eax
c001f85b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f85f:	50                   	push   eax
c001f860:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f864:	50                   	push   eax
c001f865:	51                   	push   ecx
c001f866:	e8 64 fe ff ff       	call   c001f6cf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f86b:	83 c4 20             	add    esp,0x20
c001f86e:	ba 01 00 00 00       	mov    edx,0x1
c001f873:	84 c0                	test   al,al
c001f875:	74 31                	je     c001f8a8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f877:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f87b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f882:	89 03                	mov    DWORD PTR [ebx],eax
c001f884:	ba 00 00 00 00       	mov    edx,0x0
c001f889:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f88d:	85 c0                	test   eax,eax
c001f88f:	0f 95 06             	setne  BYTE PTR [esi]
c001f892:	74 14                	je     c001f8a8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f894:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f89a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f8a1:	eb 05                	jmp    c001f8a8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8a3:	ba 04 00 00 00       	mov    edx,0x4
c001f8a8:	83 c4 14             	add    esp,0x14
c001f8ab:	89 d0                	mov    eax,edx
c001f8ad:	5b                   	pop    ebx
c001f8ae:	5e                   	pop    esi
c001f8af:	c3                   	ret    

c001f8b0 <ISO9660::openDir(char const*, void**)>:
c001f8b0:	57                   	push   edi
c001f8b1:	56                   	push   esi
c001f8b2:	53                   	push   ebx
c001f8b3:	83 ec 10             	sub    esp,0x10
c001f8b6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f8ba:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f8be:	85 ff                	test   edi,edi
c001f8c0:	0f 84 95 00 00 00    	je     c001f95b <ISO9660::openDir(char const*, void**)+0xab>
c001f8c6:	85 f6                	test   esi,esi
c001f8c8:	0f 84 8d 00 00 00    	je     c001f95b <ISO9660::openDir(char const*, void**)+0xab>
c001f8ce:	83 ec 0c             	sub    esp,0xc
c001f8d1:	6a 1c                	push   0x1c
c001f8d3:	e8 46 f8 fe ff       	call   c000f11e <malloc>
c001f8d8:	89 07                	mov    DWORD PTR [edi],eax
c001f8da:	89 c3                	mov    ebx,eax
c001f8dc:	59                   	pop    ecx
c001f8dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f8e1:	50                   	push   eax
c001f8e2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f8e5:	50                   	push   eax
c001f8e6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f8ea:	50                   	push   eax
c001f8eb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f8ef:	50                   	push   eax
c001f8f0:	56                   	push   esi
c001f8f1:	e8 d9 fd ff ff       	call   c001f6cf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f8f6:	83 c4 20             	add    esp,0x20
c001f8f9:	84 c0                	test   al,al
c001f8fb:	74 07                	je     c001f904 <ISO9660::openDir(char const*, void**)+0x54>
c001f8fd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f902:	75 21                	jne    c001f925 <ISO9660::openDir(char const*, void**)+0x75>
c001f904:	0f b6 c0             	movzx  eax,al
c001f907:	52                   	push   edx
c001f908:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f90c:	50                   	push   eax
c001f90d:	68 fe 8b 02 c0       	push   0xc0028bfe
c001f912:	e8 2e 29 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c001f917:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f91b:	83 c4 10             	add    esp,0x10
c001f91e:	b8 01 00 00 00       	mov    eax,0x1
c001f923:	eb 3b                	jmp    c001f960 <ISO9660::openDir(char const*, void**)+0xb0>
c001f925:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f929:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f92d:	89 03                	mov    DWORD PTR [ebx],eax
c001f92f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f936:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f93a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f941:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f948:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f94b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f952:	8a 06                	mov    al,BYTE PTR [esi]
c001f954:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f957:	31 c0                	xor    eax,eax
c001f959:	eb 05                	jmp    c001f960 <ISO9660::openDir(char const*, void**)+0xb0>
c001f95b:	b8 04 00 00 00       	mov    eax,0x4
c001f960:	83 c4 10             	add    esp,0x10
c001f963:	5b                   	pop    ebx
c001f964:	5e                   	pop    esi
c001f965:	5f                   	pop    edi
c001f966:	c3                   	ret    
c001f967:	90                   	nop

c001f968 <ISO9660::ISO9660()>:
c001f968:	83 ec 0c             	sub    esp,0xc
c001f96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f96f:	83 ec 0c             	sub    esp,0xc
c001f972:	50                   	push   eax
c001f973:	e8 d2 2b ff ff       	call   c001254a <Filesystem::Filesystem()>
c001f978:	83 c4 10             	add    esp,0x10
c001f97b:	ba 24 8c 02 c0       	mov    edx,0xc0028c24
c001f980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f984:	89 10                	mov    DWORD PTR [eax],edx
c001f986:	90                   	nop
c001f987:	83 c4 0c             	add    esp,0xc
c001f98a:	c3                   	ret    
c001f98b:	90                   	nop

c001f98c <SoundChannel::~SoundChannel()>:
c001f98c:	83 ec 0c             	sub    esp,0xc
c001f98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f993:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001f996:	83 ec 0c             	sub    esp,0xc
c001f999:	50                   	push   eax
c001f99a:	e8 8f f7 fe ff       	call   c000f12e <free>
c001f99f:	83 c4 10             	add    esp,0x10
c001f9a2:	90                   	nop
c001f9a3:	83 c4 0c             	add    esp,0xc
c001f9a6:	c3                   	ret    
c001f9a7:	90                   	nop

c001f9a8 <SoundChannel::setSpeed(float)>:
c001f9a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9b0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f9b3:	c3                   	ret    

c001f9b4 <SoundChannel::getSpeed()>:
c001f9b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9b8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001f9bb:	c3                   	ret    

c001f9bc <SoundChannel::setVolume(int)>:
c001f9bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9c0:	83 f8 64             	cmp    eax,0x64
c001f9c3:	7e 05                	jle    c001f9ca <SoundChannel::setVolume(int)+0xe>
c001f9c5:	b8 64 00 00 00       	mov    eax,0x64
c001f9ca:	85 c0                	test   eax,eax
c001f9cc:	79 02                	jns    c001f9d0 <SoundChannel::setVolume(int)+0x14>
c001f9ce:	31 c0                	xor    eax,eax
c001f9d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9d4:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001f9d7:	c3                   	ret    

c001f9d8 <SoundChannel::getVolume()>:
c001f9d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9dc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001f9df:	c3                   	ret    

c001f9e0 <SoundChannel::pause()>:
c001f9e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9e4:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001f9e8:	c3                   	ret    
c001f9e9:	90                   	nop

c001f9ea <SoundChannel::SoundChannel(int, int, int, int)>:
c001f9ea:	83 ec 1c             	sub    esp,0x1c
c001f9ed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f9f1:	e8 ea ff ff ff       	call   c001f9e0 <SoundChannel::pause()>
c001f9f6:	83 c4 04             	add    esp,0x4
c001f9f9:	6a 50                	push   0x50
c001f9fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001f9ff:	e8 b8 ff ff ff       	call   c001f9bc <SoundChannel::setVolume(int)>
c001fa04:	83 c4 08             	add    esp,0x8
c001fa07:	a1 9c 8c 02 c0       	mov    eax,ds:0xc0028c9c
c001fa0c:	50                   	push   eax
c001fa0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fa11:	e8 92 ff ff ff       	call   c001f9a8 <SoundChannel::setSpeed(float)>
c001fa16:	83 c4 08             	add    esp,0x8
c001fa19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa1d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001fa21:	89 10                	mov    DWORD PTR [eax],edx
c001fa23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fa2b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa32:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fa36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa39:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001fa3e:	75 23                	jne    c001fa63 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c001fa40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa44:	8b 10                	mov    edx,DWORD PTR [eax]
c001fa46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa4d:	0f af c2             	imul   eax,edx
c001fa50:	85 c0                	test   eax,eax
c001fa52:	79 03                	jns    c001fa57 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c001fa54:	83 c0 03             	add    eax,0x3
c001fa57:	c1 f8 02             	sar    eax,0x2
c001fa5a:	05 a0 0f 00 00       	add    eax,0xfa0
c001fa5f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fa63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa67:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fa6b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001fa6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa72:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001fa79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa7d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001fa84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa88:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fa8b:	c1 e0 02             	shl    eax,0x2
c001fa8e:	83 ec 0c             	sub    esp,0xc
c001fa91:	50                   	push   eax
c001fa92:	e8 87 f6 fe ff       	call   c000f11e <malloc>
c001fa97:	83 c4 10             	add    esp,0x10
c001fa9a:	89 c2                	mov    edx,eax
c001fa9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001faa0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001faa3:	83 ec 04             	sub    esp,0x4
c001faa6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001faaa:	50                   	push   eax
c001faab:	6a 01                	push   0x1
c001faad:	6a 04                	push   0x4
c001faaf:	e8 6b 8e fe ff       	call   c000891f <src_new>
c001fab4:	83 c4 10             	add    esp,0x10
c001fab7:	89 c2                	mov    edx,eax
c001fab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fabd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001fac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac4:	85 c0                	test   eax,eax
c001fac6:	74 10                	je     c001fad8 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c001fac8:	83 ec 0c             	sub    esp,0xc
c001facb:	68 80 8c 02 c0       	push   0xc0028c80
c001fad0:	e8 ee 8e ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c001fad5:	83 c4 10             	add    esp,0x10
c001fad8:	a0 20 c7 02 c0       	mov    al,ds:0xc002c720
c001fadd:	83 f0 01             	xor    eax,0x1
c001fae0:	84 c0                	test   al,al
c001fae2:	74 57                	je     c001fb3b <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c001fae4:	a1 a0 8c 02 c0       	mov    eax,ds:0xc0028ca0
c001fae9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001faed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001faf5:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001fafd:	7f 35                	jg     c001fb34 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c001faff:	83 ec 0c             	sub    esp,0xc
c001fb02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fb06:	e8 7c 42 00 00       	call   c0023d87 <__floatsisf>
c001fb0b:	83 c4 10             	add    esp,0x10
c001fb0e:	8b 15 a0 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028ca0
c001fb14:	83 ec 08             	sub    esp,0x8
c001fb17:	52                   	push   edx
c001fb18:	50                   	push   eax
c001fb19:	e8 7b 3e 00 00       	call   c0023999 <__mulsf3>
c001fb1e:	83 c4 10             	add    esp,0x10
c001fb21:	89 c2                	mov    edx,eax
c001fb23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb27:	89 14 85 20 c3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ce0],edx
c001fb2e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fb32:	eb c1                	jmp    c001faf5 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c001fb34:	c6 05 20 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c720,0x1
c001fb3b:	90                   	nop
c001fb3c:	83 c4 1c             	add    esp,0x1c
c001fb3f:	c3                   	ret    

c001fb40 <SoundChannel::play()>:
c001fb40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb44:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001fb48:	c3                   	ret    
c001fb49:	90                   	nop

c001fb4a <SoundChannel::paused()>:
c001fb4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb4e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001fb51:	c3                   	ret    

c001fb52 <SoundChannel::getSampleRate()>:
c001fb52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb56:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb58:	c3                   	ret    
c001fb59:	90                   	nop

c001fb5a <SoundChannel::getBits()>:
c001fb5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb61:	c3                   	ret    

c001fb62 <SoundChannel::getBufferUsed()>:
c001fb62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001fb69:	c3                   	ret    

c001fb6a <SoundChannel::getBufferSize()>:
c001fb6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb6e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fb71:	c3                   	ret    

c001fb72 <SoundChannel::unbuffer(float*, int, int)>:
c001fb72:	56                   	push   esi
c001fb73:	53                   	push   ebx
c001fb74:	83 ec 40             	sub    esp,0x40
c001fb77:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fb7b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001fb7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fb82:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001fb85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fb89:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001fb8d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001fb91:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fb95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fb99:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001fb9d:	e8 e5 41 00 00       	call   c0023d87 <__floatsisf>
c001fba2:	5a                   	pop    edx
c001fba3:	89 c6                	mov    esi,eax
c001fba5:	ff 33                	push   DWORD PTR [ebx]
c001fba7:	e8 db 41 00 00       	call   c0023d87 <__floatsisf>
c001fbac:	59                   	pop    ecx
c001fbad:	5a                   	pop    edx
c001fbae:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001fbb1:	50                   	push   eax
c001fbb2:	e8 e2 3d 00 00       	call   c0023999 <__mulsf3>
c001fbb7:	59                   	pop    ecx
c001fbb8:	5a                   	pop    edx
c001fbb9:	50                   	push   eax
c001fbba:	56                   	push   esi
c001fbbb:	e8 9c 3f 00 00       	call   c0023b5c <__divsf3>
c001fbc0:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbc3:	e8 8f 54 00 00       	call   c0025057 <__extendsfdf2>
c001fbc8:	59                   	pop    ecx
c001fbc9:	5e                   	pop    esi
c001fbca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fbce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001fbd2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001fbda:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fbde:	50                   	push   eax
c001fbdf:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001fbe2:	e8 b2 89 fe ff       	call   c0008599 <src_process>
c001fbe7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fbeb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001fbee:	83 c4 0c             	add    esp,0xc
c001fbf1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001fbf4:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001fbf7:	29 d0                	sub    eax,edx
c001fbf9:	c1 e0 02             	shl    eax,0x2
c001fbfc:	50                   	push   eax
c001fbfd:	8d 04 91             	lea    eax,[ecx+edx*4]
c001fc00:	50                   	push   eax
c001fc01:	51                   	push   ecx
c001fc02:	e8 08 0a fe ff       	call   c000060f <memmove>
c001fc07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fc0b:	83 c4 44             	add    esp,0x44
c001fc0e:	5b                   	pop    ebx
c001fc0f:	5e                   	pop    esi
c001fc10:	c3                   	ret    
c001fc11:	90                   	nop

c001fc12 <SoundChannel::buffer8(unsigned char*, int)>:
c001fc12:	55                   	push   ebp
c001fc13:	57                   	push   edi
c001fc14:	56                   	push   esi
c001fc15:	53                   	push   ebx
c001fc16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc1a:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001fc1e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fc21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fc25:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fc28:	74 7a                	je     c001fca4 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fc2a:	85 ff                	test   edi,edi
c001fc2c:	7e 76                	jle    c001fca4 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fc2e:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c001fc32:	8d 70 01             	lea    esi,[eax+0x1]
c001fc35:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fc38:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fc3b:	8b 1c 9d 20 c3 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3ce0]
c001fc42:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fc45:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fc48:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fc4b:	74 5e                	je     c001fcab <SoundChannel::buffer8(unsigned char*, int)+0x99>
c001fc4d:	83 ff 01             	cmp    edi,0x1
c001fc50:	74 4b                	je     c001fc9d <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c001fc52:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001fc56:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fc59:	8d 70 01             	lea    esi,[eax+0x1]
c001fc5c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fc5f:	8b 1c 9d 20 c3 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3ce0]
c001fc66:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fc69:	b8 02 00 00 00       	mov    eax,0x2
c001fc6e:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fc71:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fc74:	75 23                	jne    c001fc99 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c001fc76:	eb 27                	jmp    c001fc9f <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fc78:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c001fc7d:	8d 71 01             	lea    esi,[ecx+0x1]
c001fc80:	40                   	inc    eax
c001fc81:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fc84:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001fc87:	8b 1c 9d 20 c3 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3ce0]
c001fc8e:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001fc91:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fc94:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fc97:	74 06                	je     c001fc9f <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fc99:	39 c7                	cmp    edi,eax
c001fc9b:	75 db                	jne    c001fc78 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c001fc9d:	89 f8                	mov    eax,edi
c001fc9f:	5b                   	pop    ebx
c001fca0:	5e                   	pop    esi
c001fca1:	5f                   	pop    edi
c001fca2:	5d                   	pop    ebp
c001fca3:	c3                   	ret    
c001fca4:	5b                   	pop    ebx
c001fca5:	31 c0                	xor    eax,eax
c001fca7:	5e                   	pop    esi
c001fca8:	5f                   	pop    edi
c001fca9:	5d                   	pop    ebp
c001fcaa:	c3                   	ret    
c001fcab:	b8 01 00 00 00       	mov    eax,0x1
c001fcb0:	eb ed                	jmp    c001fc9f <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c001fcb2 <SoundDevice::SoundDevice(char const*)>:
c001fcb2:	83 ec 1c             	sub    esp,0x1c
c001fcb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fcb9:	83 ec 08             	sub    esp,0x8
c001fcbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fcc0:	50                   	push   eax
c001fcc1:	e8 4a 3b ff ff       	call   c0013810 <Device::Device(char const*)>
c001fcc6:	83 c4 10             	add    esp,0x10
c001fcc9:	ba ac 8c 02 c0       	mov    edx,0xc0028cac
c001fcce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fcd2:	89 10                	mov    DWORD PTR [eax],edx
c001fcd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fcd8:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001fce2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fce6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001fcf0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fcf8:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fcfd:	7f 19                	jg     c001fd18 <SoundDevice::SoundDevice(char const*)+0x66>
c001fcff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd07:	83 c2 54             	add    edx,0x54
c001fd0a:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001fd12:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fd16:	eb e0                	jmp    c001fcf8 <SoundDevice::SoundDevice(char const*)+0x46>
c001fd18:	90                   	nop
c001fd19:	83 c4 1c             	add    esp,0x1c
c001fd1c:	c3                   	ret    
c001fd1d:	90                   	nop

c001fd1e <SoundDevice::~SoundDevice()>:
c001fd1e:	53                   	push   ebx
c001fd1f:	83 ec 18             	sub    esp,0x18
c001fd22:	ba ac 8c 02 c0       	mov    edx,0xc0028cac
c001fd27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd2b:	89 10                	mov    DWORD PTR [eax],edx
c001fd2d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fd35:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fd3a:	7f 46                	jg     c001fd82 <SoundDevice::~SoundDevice()+0x64>
c001fd3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd44:	83 c2 54             	add    edx,0x54
c001fd47:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001fd4b:	85 c0                	test   eax,eax
c001fd4d:	74 2d                	je     c001fd7c <SoundDevice::~SoundDevice()+0x5e>
c001fd4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd57:	83 c2 54             	add    edx,0x54
c001fd5a:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001fd5e:	85 db                	test   ebx,ebx
c001fd60:	74 1a                	je     c001fd7c <SoundDevice::~SoundDevice()+0x5e>
c001fd62:	83 ec 0c             	sub    esp,0xc
c001fd65:	53                   	push   ebx
c001fd66:	e8 21 fc ff ff       	call   c001f98c <SoundChannel::~SoundChannel()>
c001fd6b:	83 c4 10             	add    esp,0x10
c001fd6e:	83 ec 08             	sub    esp,0x8
c001fd71:	6a 2c                	push   0x2c
c001fd73:	53                   	push   ebx
c001fd74:	e8 ec 23 ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c001fd79:	83 c4 10             	add    esp,0x10
c001fd7c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fd80:	eb b3                	jmp    c001fd35 <SoundDevice::~SoundDevice()+0x17>
c001fd82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd86:	83 ec 0c             	sub    esp,0xc
c001fd89:	50                   	push   eax
c001fd8a:	e8 63 37 ff ff       	call   c00134f2 <Device::~Device()>
c001fd8f:	83 c4 10             	add    esp,0x10
c001fd92:	90                   	nop
c001fd93:	83 c4 18             	add    esp,0x18
c001fd96:	5b                   	pop    ebx
c001fd97:	c3                   	ret    

c001fd98 <SoundDevice::~SoundDevice()>:
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	83 ec 0c             	sub    esp,0xc
c001fd9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fda2:	e8 77 ff ff ff       	call   c001fd1e <SoundDevice::~SoundDevice()>
c001fda7:	83 c4 10             	add    esp,0x10
c001fdaa:	83 ec 08             	sub    esp,0x8
c001fdad:	68 e4 01 00 00       	push   0x1e4
c001fdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb6:	e8 aa 23 ff ff       	call   c0012165 <operator delete(void*, unsigned long)>
c001fdbb:	83 c4 10             	add    esp,0x10
c001fdbe:	83 c4 0c             	add    esp,0xc
c001fdc1:	c3                   	ret    

c001fdc2 <SoundDevice::getFreeChannelNum()>:
c001fdc2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fdc6:	31 c0                	xor    eax,eax
c001fdc8:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001fdd0:	74 09                	je     c001fddb <SoundDevice::getFreeChannelNum()+0x19>
c001fdd2:	40                   	inc    eax
c001fdd3:	83 f8 20             	cmp    eax,0x20
c001fdd6:	75 f0                	jne    c001fdc8 <SoundDevice::getFreeChannelNum()+0x6>
c001fdd8:	83 c8 ff             	or     eax,0xffffffff
c001fddb:	c3                   	ret    

c001fddc <SoundDevice::addChannel(SoundChannel*)>:
c001fddc:	56                   	push   esi
c001fddd:	53                   	push   ebx
c001fdde:	51                   	push   ecx
c001fddf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fde3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fde7:	53                   	push   ebx
c001fde8:	e8 d5 ff ff ff       	call   c001fdc2 <SoundDevice::getFreeChannelNum()>
c001fded:	5a                   	pop    edx
c001fdee:	83 f8 ff             	cmp    eax,0xffffffff
c001fdf1:	74 51                	je     c001fe44 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fdf3:	85 f6                	test   esi,esi
c001fdf5:	74 4d                	je     c001fe44 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fdf7:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001fdfe:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001fe05:	75 30                	jne    c001fe37 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001fe07:	83 ec 0c             	sub    esp,0xc
c001fe0a:	56                   	push   esi
c001fe0b:	e8 42 fd ff ff       	call   c001fb52 <SoundChannel::getSampleRate()>
c001fe10:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001fe16:	89 34 24             	mov    DWORD PTR [esp],esi
c001fe19:	e8 3c fd ff ff       	call   c001fb5a <SoundChannel::getBits()>
c001fe1e:	83 c4 0c             	add    esp,0xc
c001fe21:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001fe27:	8b 13                	mov    edx,DWORD PTR [ebx]
c001fe29:	50                   	push   eax
c001fe2a:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001fe30:	53                   	push   ebx
c001fe31:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001fe34:	83 c4 10             	add    esp,0x10
c001fe37:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001fe3d:	b8 01 00 00 00       	mov    eax,0x1
c001fe42:	eb 03                	jmp    c001fe47 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001fe44:	83 c8 ff             	or     eax,0xffffffff
c001fe47:	5a                   	pop    edx
c001fe48:	5b                   	pop    ebx
c001fe49:	5e                   	pop    esi
c001fe4a:	c3                   	ret    
c001fe4b:	90                   	nop

c001fe4c <SoundDevice::removeChannel(int)>:
c001fe4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe54:	83 fa 1f             	cmp    edx,0x1f
c001fe57:	77 23                	ja     c001fe7c <SoundDevice::removeChannel(int)+0x30>
c001fe59:	8d 14 90             	lea    edx,[eax+edx*4]
c001fe5c:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001fe63:	74 17                	je     c001fe7c <SoundDevice::removeChannel(int)+0x30>
c001fe65:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001fe6f:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001fe75:	75 05                	jne    c001fe7c <SoundDevice::removeChannel(int)+0x30>
c001fe77:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe79:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001fe7c:	c3                   	ret    
c001fe7d:	90                   	nop

c001fe7e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001fe7e:	57                   	push   edi
c001fe7f:	56                   	push   esi
c001fe80:	53                   	push   ebx
c001fe81:	31 db                	xor    ebx,ebx
c001fe83:	83 ec 10             	sub    esp,0x10
c001fe86:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001fe8a:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001fe8e:	0f 8d cb 00 00 00    	jge    c001ff5f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c001fe94:	83 ec 0c             	sub    esp,0xc
c001fe97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fe9b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c001fe9e:	e8 b4 51 00 00       	call   c0025057 <__extendsfdf2>
c001fea3:	83 c4 10             	add    esp,0x10
c001fea6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001feaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001feae:	68 00 00 f0 3f       	push   0x3ff00000
c001feb3:	6a 00                	push   0x0
c001feb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001feb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001febd:	e8 21 41 00 00       	call   c0023fe3 <__adddf3>
c001fec2:	83 c4 10             	add    esp,0x10
c001fec5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fec9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fecd:	68 00 00 e0 3f       	push   0x3fe00000
c001fed2:	6a 00                	push   0x0
c001fed4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fed8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fedc:	e8 7f 47 00 00       	call   c0024660 <__muldf3>
c001fee1:	83 c4 10             	add    esp,0x10
c001fee4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fee8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001feec:	68 00 00 60 40       	push   0x40600000
c001fef1:	6a 00                	push   0x0
c001fef3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fef7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fefb:	e8 60 47 00 00       	call   c0024660 <__muldf3>
c001ff00:	59                   	pop    ecx
c001ff01:	5f                   	pop    edi
c001ff02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ff06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ff0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff12:	e8 1c 50 00 00       	call   c0024f33 <__truncdfsf2>
c001ff17:	5a                   	pop    edx
c001ff18:	89 c7                	mov    edi,eax
c001ff1a:	59                   	pop    ecx
c001ff1b:	68 00 00 fe 42       	push   0x42fe0000
c001ff20:	50                   	push   eax
c001ff21:	e8 b7 40 00 00       	call   c0023fdd <__gesf2>
c001ff26:	83 c4 10             	add    esp,0x10
c001ff29:	85 c0                	test   eax,eax
c001ff2b:	78 06                	js     c001ff33 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c001ff2d:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001ff31:	eb 26                	jmp    c001ff59 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001ff33:	50                   	push   eax
c001ff34:	50                   	push   eax
c001ff35:	6a 00                	push   0x0
c001ff37:	57                   	push   edi
c001ff38:	e8 a4 40 00 00       	call   c0023fe1 <__lesf2>
c001ff3d:	83 c4 10             	add    esp,0x10
c001ff40:	85 c0                	test   eax,eax
c001ff42:	7f 06                	jg     c001ff4a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c001ff44:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ff48:	eb 0f                	jmp    c001ff59 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001ff4a:	83 ec 0c             	sub    esp,0xc
c001ff4d:	57                   	push   edi
c001ff4e:	e8 99 51 00 00       	call   c00250ec <lrintf>
c001ff53:	83 c4 10             	add    esp,0x10
c001ff56:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001ff59:	43                   	inc    ebx
c001ff5a:	e9 2b ff ff ff       	jmp    c001fe8a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c001ff5f:	83 c4 10             	add    esp,0x10
c001ff62:	5b                   	pop    ebx
c001ff63:	5e                   	pop    esi
c001ff64:	5f                   	pop    edi
c001ff65:	c3                   	ret    

c001ff66 <SoundDevice::getAudio(int, float*, float*)>:
c001ff66:	55                   	push   ebp
c001ff67:	57                   	push   edi
c001ff68:	56                   	push   esi
c001ff69:	53                   	push   ebx
c001ff6a:	31 db                	xor    ebx,ebx
c001ff6c:	83 ec 20             	sub    esp,0x20
c001ff6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff73:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ff77:	c1 e0 02             	shl    eax,0x2
c001ff7a:	50                   	push   eax
c001ff7b:	6a 00                	push   0x0
c001ff7d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff81:	e8 f7 06 fe ff       	call   c000067d <memset>
c001ff86:	83 c4 10             	add    esp,0x10
c001ff89:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ff8d:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001ff94:	85 c0                	test   eax,eax
c001ff96:	0f 84 d7 00 00 00    	je     c0020073 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001ff9c:	83 ec 0c             	sub    esp,0xc
c001ff9f:	50                   	push   eax
c001ffa0:	e8 a5 fb ff ff       	call   c001fb4a <SoundChannel::paused()>
c001ffa5:	83 c4 10             	add    esp,0x10
c001ffa8:	84 c0                	test   al,al
c001ffaa:	0f 85 c3 00 00 00    	jne    c0020073 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001ffb0:	83 ec 0c             	sub    esp,0xc
c001ffb3:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ffba:	e8 19 fa ff ff       	call   c001f9d8 <SoundChannel::getVolume()>
c001ffbf:	83 c4 10             	add    esp,0x10
c001ffc2:	85 c0                	test   eax,eax
c001ffc4:	0f 84 a9 00 00 00    	je     c0020073 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001ffca:	83 ec 0c             	sub    esp,0xc
c001ffcd:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ffd4:	e8 ff f9 ff ff       	call   c001f9d8 <SoundChannel::getVolume()>
c001ffd9:	83 ec 0c             	sub    esp,0xc
c001ffdc:	50                   	push   eax
c001ffdd:	e8 a5 3d 00 00       	call   c0023d87 <__floatsisf>
c001ffe2:	59                   	pop    ecx
c001ffe3:	5d                   	pop    ebp
c001ffe4:	31 ed                	xor    ebp,ebp
c001ffe6:	68 00 00 c8 42       	push   0x42c80000
c001ffeb:	50                   	push   eax
c001ffec:	e8 6b 3b 00 00       	call   c0023b5c <__divsf3>
c001fff1:	83 c4 10             	add    esp,0x10
c001fff4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fff8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001fffc:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0020002:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0020006:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002000d:	e8 60 fb ff ff       	call   c001fb72 <SoundChannel::unbuffer(float*, int, int)>
c0020012:	83 c4 20             	add    esp,0x20
c0020015:	89 c1                	mov    ecx,eax
c0020017:	39 cd                	cmp    ebp,ecx
c0020019:	7d 52                	jge    c002006d <SoundDevice::getAudio(int, float*, float*)+0x107>
c002001b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002001f:	50                   	push   eax
c0020020:	50                   	push   eax
c0020021:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020025:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020028:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002002c:	e8 68 39 00 00       	call   c0023999 <__mulsf3>
c0020031:	5a                   	pop    edx
c0020032:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020036:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002003c:	e8 46 3d 00 00       	call   c0023d87 <__floatsisf>
c0020041:	59                   	pop    ecx
c0020042:	5a                   	pop    edx
c0020043:	50                   	push   eax
c0020044:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020048:	e8 0f 3b 00 00       	call   c0023b5c <__divsf3>
c002004d:	59                   	pop    ecx
c002004e:	5a                   	pop    edx
c002004f:	50                   	push   eax
c0020050:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020054:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020057:	e8 1a 36 00 00       	call   c0023676 <__addsf3>
c002005c:	83 c4 10             	add    esp,0x10
c002005f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020063:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020067:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002006a:	45                   	inc    ebp
c002006b:	eb aa                	jmp    c0020017 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002006d:	39 cf                	cmp    edi,ecx
c002006f:	7e 02                	jle    c0020073 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020071:	89 cf                	mov    edi,ecx
c0020073:	43                   	inc    ebx
c0020074:	83 fb 20             	cmp    ebx,0x20
c0020077:	0f 85 10 ff ff ff    	jne    c001ff8d <SoundDevice::getAudio(int, float*, float*)+0x27>
c002007d:	83 c4 1c             	add    esp,0x1c
c0020080:	89 f8                	mov    eax,edi
c0020082:	5b                   	pop    ebx
c0020083:	5e                   	pop    esi
c0020084:	5f                   	pop    edi
c0020085:	5d                   	pop    ebp
c0020086:	c3                   	ret    
c0020087:	90                   	nop

c0020088 <PCI::open(int, int, void*)>:
c0020088:	83 ec 18             	sub    esp,0x18
c002008b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002008f:	8b 10                	mov    edx,DWORD PTR [eax]
c0020091:	50                   	push   eax
c0020092:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0020095:	31 c0                	xor    eax,eax
c0020097:	83 c4 1c             	add    esp,0x1c
c002009a:	c3                   	ret    
c002009b:	90                   	nop

c002009c <PCI::close(int, int, void*)>:
c002009c:	31 c0                	xor    eax,eax
c002009e:	c3                   	ret    
c002009f:	90                   	nop

c00200a0 <PCI::PCI()>:
c00200a0:	83 ec 0c             	sub    esp,0xc
c00200a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a7:	83 ec 08             	sub    esp,0x8
c00200aa:	68 dc 8c 02 c0       	push   0xc0028cdc
c00200af:	50                   	push   eax
c00200b0:	e8 17 2e ff ff       	call   c0012ecc <Bus::Bus(char const*)>
c00200b5:	83 c4 10             	add    esp,0x10
c00200b8:	ba 68 8d 02 c0       	mov    edx,0xc0028d68
c00200bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c1:	89 10                	mov    DWORD PTR [eax],edx
c00200c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00200cd:	0f b6 d0             	movzx  edx,al
c00200d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d4:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00200db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200df:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00200e5:	0f b6 d0             	movzx  edx,al
c00200e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ec:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00200f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200f5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00200fb:	8d 50 01             	lea    edx,[eax+0x1]
c00200fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020102:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020108:	0f b6 d0             	movzx  edx,al
c002010b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002010f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020113:	83 c9 c0             	or     ecx,0xffffffc0
c0020116:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002011a:	90                   	nop
c002011b:	83 c4 0c             	add    esp,0xc
c002011e:	c3                   	ret    
c002011f:	90                   	nop

c0020120 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020120:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020124:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020129:	89 ca                	mov    edx,ecx
c002012b:	c1 e0 10             	shl    eax,0x10
c002012e:	81 e2 fc 00 00 00    	and    edx,0xfc
c0020134:	09 d0                	or     eax,edx
c0020136:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002013b:	c1 e2 08             	shl    edx,0x8
c002013e:	09 d0                	or     eax,edx
c0020140:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0020145:	c1 e2 0b             	shl    edx,0xb
c0020148:	09 d0                	or     eax,edx
c002014a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002014f:	0d 00 00 00 80       	or     eax,0x80000000
c0020154:	ef                   	out    dx,eax
c0020155:	ba fc 0c 00 00       	mov    edx,0xcfc
c002015a:	ed                   	in     eax,dx
c002015b:	83 e1 02             	and    ecx,0x2
c002015e:	0f b6 c9             	movzx  ecx,cl
c0020161:	c1 e1 03             	shl    ecx,0x3
c0020164:	d3 e8                	shr    eax,cl
c0020166:	c3                   	ret    
c0020167:	90                   	nop

c0020168 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0020168:	6a 00                	push   0x0
c002016a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002016f:	50                   	push   eax
c0020170:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020175:	50                   	push   eax
c0020176:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002017b:	50                   	push   eax
c002017c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020180:	e8 9b ff ff ff       	call   c0020120 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020185:	83 c4 14             	add    esp,0x14
c0020188:	c3                   	ret    
c0020189:	90                   	nop

c002018a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002018a:	6a 0e                	push   0xe
c002018c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020191:	50                   	push   eax
c0020192:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020197:	50                   	push   eax
c0020198:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002019d:	50                   	push   eax
c002019e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00201a2:	e8 79 ff ff ff       	call   c0020120 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201a7:	83 c4 14             	add    esp,0x14
c00201aa:	0f b6 c0             	movzx  eax,al
c00201ad:	c3                   	ret    

c00201ae <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00201ae:	55                   	push   ebp
c00201af:	57                   	push   edi
c00201b0:	56                   	push   esi
c00201b1:	53                   	push   ebx
c00201b2:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00201b7:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00201bc:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00201c1:	6a 0a                	push   0xa
c00201c3:	56                   	push   esi
c00201c4:	55                   	push   ebp
c00201c5:	57                   	push   edi
c00201c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00201ca:	e8 51 ff ff ff       	call   c0020120 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201cf:	6a 0a                	push   0xa
c00201d1:	89 c3                	mov    ebx,eax
c00201d3:	56                   	push   esi
c00201d4:	0f b6 db             	movzx  ebx,bl
c00201d7:	55                   	push   ebp
c00201d8:	57                   	push   edi
c00201d9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00201dd:	e8 3e ff ff ff       	call   c0020120 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201e2:	83 c4 28             	add    esp,0x28
c00201e5:	25 00 ff 00 00       	and    eax,0xff00
c00201ea:	09 d8                	or     eax,ebx
c00201ec:	5b                   	pop    ebx
c00201ed:	5e                   	pop    esi
c00201ee:	5f                   	pop    edi
c00201ef:	5d                   	pop    ebp
c00201f0:	c3                   	ret    
c00201f1:	90                   	nop

c00201f2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00201f2:	6a 08                	push   0x8
c00201f4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201f9:	50                   	push   eax
c00201fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201ff:	50                   	push   eax
c0020200:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020205:	50                   	push   eax
c0020206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002020a:	e8 11 ff ff ff       	call   c0020120 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002020f:	83 c4 14             	add    esp,0x14
c0020212:	0f b6 c4             	movzx  eax,ah
c0020215:	c3                   	ret    

c0020216 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0020216:	6a 08                	push   0x8
c0020218:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002021d:	50                   	push   eax
c002021e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020223:	50                   	push   eax
c0020224:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020229:	50                   	push   eax
c002022a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002022e:	e8 ed fe ff ff       	call   c0020120 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020233:	83 c4 14             	add    esp,0x14
c0020236:	c3                   	ret    
c0020237:	90                   	nop

c0020238 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0020238:	6a 3c                	push   0x3c
c002023a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002023f:	50                   	push   eax
c0020240:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020245:	50                   	push   eax
c0020246:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002024b:	50                   	push   eax
c002024c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020250:	e8 cb fe ff ff       	call   c0020120 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020255:	83 c4 14             	add    esp,0x14
c0020258:	c3                   	ret    
c0020259:	90                   	nop

c002025a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002025a:	6a 18                	push   0x18
c002025c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020261:	50                   	push   eax
c0020262:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020267:	50                   	push   eax
c0020268:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002026d:	50                   	push   eax
c002026e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020272:	e8 a9 fe ff ff       	call   c0020120 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020277:	83 c4 14             	add    esp,0x14
c002027a:	0f b6 c4             	movzx  eax,ah
c002027d:	c3                   	ret    

c002027e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002027e:	55                   	push   ebp
c002027f:	57                   	push   edi
c0020280:	56                   	push   esi
c0020281:	53                   	push   ebx
c0020282:	50                   	push   eax
c0020283:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020287:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c002028c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0020291:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0020296:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002029d:	8d 43 12             	lea    eax,[ebx+0x12]
c00202a0:	83 c3 10             	add    ebx,0x10
c00202a3:	0f b6 c0             	movzx  eax,al
c00202a6:	0f b6 db             	movzx  ebx,bl
c00202a9:	50                   	push   eax
c00202aa:	51                   	push   ecx
c00202ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00202af:	57                   	push   edi
c00202b0:	55                   	push   ebp
c00202b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00202b5:	e8 66 fe ff ff       	call   c0020120 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202ba:	53                   	push   ebx
c00202bb:	89 c6                	mov    esi,eax
c00202bd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00202c1:	c1 e6 10             	shl    esi,0x10
c00202c4:	51                   	push   ecx
c00202c5:	57                   	push   edi
c00202c6:	55                   	push   ebp
c00202c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00202cb:	e8 50 fe ff ff       	call   c0020120 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202d0:	83 c4 2c             	add    esp,0x2c
c00202d3:	0f b7 c0             	movzx  eax,ax
c00202d6:	5b                   	pop    ebx
c00202d7:	09 f0                	or     eax,esi
c00202d9:	5e                   	pop    esi
c00202da:	5f                   	pop    edi
c00202db:	5d                   	pop    ebp
c00202dc:	c3                   	ret    
c00202dd:	90                   	nop

c00202de <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00202de:	53                   	push   ebx
c00202df:	ba f8 0c 00 00       	mov    edx,0xcf8
c00202e4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00202e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00202ed:	c1 e1 10             	shl    ecx,0x10
c00202f0:	25 fc 00 00 00       	and    eax,0xfc
c00202f5:	09 c1                	or     ecx,eax
c00202f7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202fc:	c1 e0 08             	shl    eax,0x8
c00202ff:	09 c1                	or     ecx,eax
c0020301:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0020306:	c1 e0 0b             	shl    eax,0xb
c0020309:	09 c1                	or     ecx,eax
c002030b:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0020311:	89 c8                	mov    eax,ecx
c0020313:	ef                   	out    dx,eax
c0020314:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020319:	ed                   	in     eax,dx
c002031a:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c002031f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0020324:	74 0a                	je     c0020330 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0020326:	0f b7 d8             	movzx  ebx,ax
c0020329:	89 d0                	mov    eax,edx
c002032b:	c1 e0 10             	shl    eax,0x10
c002032e:	eb 05                	jmp    c0020335 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0020330:	66 31 c0             	xor    ax,ax
c0020333:	89 d3                	mov    ebx,edx
c0020335:	09 c3                	or     ebx,eax
c0020337:	ba f8 0c 00 00       	mov    edx,0xcf8
c002033c:	89 c8                	mov    eax,ecx
c002033e:	ef                   	out    dx,eax
c002033f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020344:	89 d8                	mov    eax,ebx
c0020346:	ef                   	out    dx,eax
c0020347:	5b                   	pop    ebx
c0020348:	c3                   	ret    
c0020349:	90                   	nop

c002034a <PCI::checkBus(unsigned char)>:
c002034a:	56                   	push   esi
c002034b:	53                   	push   ebx
c002034c:	31 db                	xor    ebx,ebx
c002034e:	51                   	push   ecx
c002034f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0020354:	52                   	push   edx
c0020355:	53                   	push   ebx
c0020356:	43                   	inc    ebx
c0020357:	56                   	push   esi
c0020358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002035c:	e8 29 03 00 00       	call   c002068a <PCI::checkDevice(unsigned char, unsigned char)>
c0020361:	83 c4 10             	add    esp,0x10
c0020364:	83 fb 20             	cmp    ebx,0x20
c0020367:	75 eb                	jne    c0020354 <PCI::checkBus(unsigned char)+0xa>
c0020369:	58                   	pop    eax
c002036a:	5b                   	pop    ebx
c002036b:	5e                   	pop    esi
c002036c:	c3                   	ret    
c002036d:	90                   	nop

c002036e <PCI::foundDevice(PCIDeviceInfo)>:
c002036e:	55                   	push   ebp
c002036f:	57                   	push   edi
c0020370:	56                   	push   esi
c0020371:	53                   	push   ebx
c0020372:	83 ec 1c             	sub    esp,0x1c
c0020375:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020379:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002037f:	0f 84 51 01 00 00    	je     c00204d6 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c0020385:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0020389:	66 81 f9 06 04       	cmp    cx,0x406
c002038e:	75 2c                	jne    c00203bc <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0020390:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0020395:	50                   	push   eax
c0020396:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002039b:	50                   	push   eax
c002039c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00203a1:	50                   	push   eax
c00203a2:	56                   	push   esi
c00203a3:	e8 b2 fe ff ff       	call   c002025a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00203a8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00203ac:	0f b6 c0             	movzx  eax,al
c00203af:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00203b3:	83 c4 2c             	add    esp,0x2c
c00203b6:	5b                   	pop    ebx
c00203b7:	5e                   	pop    esi
c00203b8:	5f                   	pop    edi
c00203b9:	5d                   	pop    ebp
c00203ba:	eb 8e                	jmp    c002034a <PCI::checkBus(unsigned char)>
c00203bc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00203c0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00203c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00203ca:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00203ce:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00203d2:	88 d3                	mov    bl,dl
c00203d4:	85 c0                	test   eax,eax
c00203d6:	74 33                	je     c002040b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00203d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00203db:	85 d2                	test   edx,edx
c00203dd:	74 28                	je     c0020407 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00203df:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00203e5:	31 ef                	xor    edi,ebp
c00203e7:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00203ed:	75 18                	jne    c0020407 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00203ef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00203f3:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00203f9:	75 0c                	jne    c0020407 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00203fb:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0020401:	0f 84 cf 00 00 00    	je     c00204d6 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c0020407:	8b 00                	mov    eax,DWORD PTR [eax]
c0020409:	eb c9                	jmp    c00203d4 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002040b:	66 81 f9 01 06       	cmp    cx,0x601
c0020410:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0020414:	75 18                	jne    c002042e <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c0020416:	83 ec 0c             	sub    esp,0xc
c0020419:	68 58 01 00 00       	push   0x158
c002041e:	e8 33 1d ff ff       	call   c0012156 <operator new(unsigned long)>
c0020423:	59                   	pop    ecx
c0020424:	89 c5                	mov    ebp,eax
c0020426:	5f                   	pop    edi
c0020427:	68 e4 8c 02 c0       	push   0xc0028ce4
c002042c:	eb 7d                	jmp    c00204ab <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c002042e:	66 81 f9 01 01       	cmp    cx,0x101
c0020433:	75 60                	jne    c0020495 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c0020435:	83 ec 0c             	sub    esp,0xc
c0020438:	68 70 02 00 00       	push   0x270
c002043d:	e8 14 1d ff ff       	call   c0012156 <operator new(unsigned long)>
c0020442:	89 04 24             	mov    DWORD PTR [esp],eax
c0020445:	89 c5                	mov    ebp,eax
c0020447:	e8 02 03 00 00       	call   c002074e <IDE::IDE()>
c002044c:	58                   	pop    eax
c002044d:	5a                   	pop    edx
c002044e:	55                   	push   ebp
c002044f:	56                   	push   esi
c0020450:	e8 cb 31 ff ff       	call   c0013620 <Device::addChild(Device*)>
c0020455:	83 ec 1c             	sub    esp,0x1c
c0020458:	b9 09 00 00 00       	mov    ecx,0x9
c002045d:	fc                   	cld    
c002045e:	89 e7                	mov    edi,esp
c0020460:	89 de                	mov    esi,ebx
c0020462:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020464:	55                   	push   ebp
c0020465:	e8 c0 30 ff ff       	call   c001352a <Device::preOpenPCI(PCIDeviceInfo)>
c002046a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002046d:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0020471:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0020479:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0020481:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0020489:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002048c:	83 c4 4c             	add    esp,0x4c
c002048f:	5b                   	pop    ebx
c0020490:	5e                   	pop    esi
c0020491:	5f                   	pop    edi
c0020492:	5d                   	pop    ebp
c0020493:	ff e0                	jmp    eax
c0020495:	83 ec 0c             	sub    esp,0xc
c0020498:	68 58 01 00 00       	push   0x158
c002049d:	e8 b4 1c ff ff       	call   c0012156 <operator new(unsigned long)>
c00204a2:	59                   	pop    ecx
c00204a3:	89 c5                	mov    ebp,eax
c00204a5:	5f                   	pop    edi
c00204a6:	68 03 8d 02 c0       	push   0xc0028d03
c00204ab:	55                   	push   ebp
c00204ac:	e8 5b 34 ff ff       	call   c001390c <DriverlessDevice::DriverlessDevice(char const*)>
c00204b1:	58                   	pop    eax
c00204b2:	5a                   	pop    edx
c00204b3:	55                   	push   ebp
c00204b4:	56                   	push   esi
c00204b5:	e8 66 31 ff ff       	call   c0013620 <Device::addChild(Device*)>
c00204ba:	b9 09 00 00 00       	mov    ecx,0x9
c00204bf:	fc                   	cld    
c00204c0:	89 df                	mov    edi,ebx
c00204c2:	89 de                	mov    esi,ebx
c00204c4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00204c6:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00204ca:	83 c4 2c             	add    esp,0x2c
c00204cd:	5b                   	pop    ebx
c00204ce:	5e                   	pop    esi
c00204cf:	5f                   	pop    edi
c00204d0:	5d                   	pop    ebp
c00204d1:	e9 54 30 ff ff       	jmp    c001352a <Device::preOpenPCI(PCIDeviceInfo)>
c00204d6:	83 c4 1c             	add    esp,0x1c
c00204d9:	5b                   	pop    ebx
c00204da:	5e                   	pop    esi
c00204db:	5f                   	pop    edi
c00204dc:	5d                   	pop    ebp
c00204dd:	c3                   	ret    

c00204de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00204de:	55                   	push   ebp
c00204df:	57                   	push   edi
c00204e0:	56                   	push   esi
c00204e1:	53                   	push   ebx
c00204e2:	83 ec 5c             	sub    esp,0x5c
c00204e5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00204e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00204ed:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00204f1:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c00204f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00204fa:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00204fe:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0020503:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020507:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c002050c:	6a 0c                	push   0xc
c002050e:	55                   	push   ebp
c002050f:	53                   	push   ebx
c0020510:	57                   	push   edi
c0020511:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0020518:	e8 03 fc ff ff       	call   c0020120 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002051d:	55                   	push   ebp
c002051e:	53                   	push   ebx
c002051f:	57                   	push   edi
c0020520:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020527:	e8 82 fc ff ff       	call   c00201ae <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002052c:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0020531:	83 c4 24             	add    esp,0x24
c0020534:	55                   	push   ebp
c0020535:	53                   	push   ebx
c0020536:	57                   	push   edi
c0020537:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002053b:	e8 f8 fc ff ff       	call   c0020238 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0020540:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020544:	6a 3c                	push   0x3c
c0020546:	55                   	push   ebp
c0020547:	53                   	push   ebx
c0020548:	57                   	push   edi
c0020549:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020550:	e8 cb fb ff ff       	call   c0020120 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020555:	0f b6 c4             	movzx  eax,ah
c0020558:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002055c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0020560:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0020564:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0020569:	83 c4 24             	add    esp,0x24
c002056c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0020572:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0020579:	74 6c                	je     c00205e7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002057b:	31 f6                	xor    esi,esi
c002057d:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0020583:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0020589:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c002058f:	7e 56                	jle    c00205e7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0020591:	8d 14 f2             	lea    edx,[edx+esi*8]
c0020594:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c002059b:	39 cb                	cmp    ebx,ecx
c002059d:	75 45                	jne    c00205e4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c002059f:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00205a6:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00205aa:	75 38                	jne    c00205e4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00205ac:	83 ec 0c             	sub    esp,0xc
c00205af:	68 1d 8d 02 c0       	push   0xc0028d1d
c00205b4:	e8 8c 1c ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00205b9:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c00205bf:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00205c5:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00205cd:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00205d1:	52                   	push   edx
c00205d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00205d6:	53                   	push   ebx
c00205d7:	68 42 8d 02 c0       	push   0xc0028d42
c00205dc:	e8 64 1c ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00205e1:	83 c4 20             	add    esp,0x20
c00205e4:	46                   	inc    esi
c00205e5:	eb 96                	jmp    c002057d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c00205e7:	31 d2                	xor    edx,edx
c00205e9:	83 ec 0c             	sub    esp,0xc
c00205ec:	55                   	push   ebp
c00205ed:	53                   	push   ebx
c00205ee:	57                   	push   edi
c00205ef:	52                   	push   edx
c00205f0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00205f4:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00205fb:	e8 7e fc ff ff       	call   c002027e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020600:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0020604:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020608:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002060c:	42                   	inc    edx
c002060d:	83 c4 20             	add    esp,0x20
c0020610:	83 fa 06             	cmp    edx,0x6
c0020613:	75 d4                	jne    c00205e9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0020615:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020619:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c002061d:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0020621:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0020625:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020629:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002062d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0020632:	86 e0                	xchg   al,ah
c0020634:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0020639:	55                   	push   ebp
c002063a:	53                   	push   ebx
c002063b:	57                   	push   edi
c002063c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020640:	e8 ad fb ff ff       	call   c00201f2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0020645:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0020649:	55                   	push   ebp
c002064a:	53                   	push   ebx
c002064b:	57                   	push   edi
c002064c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020653:	e8 10 fb ff ff       	call   c0020168 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020658:	83 ec 0c             	sub    esp,0xc
c002065b:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0020660:	b9 09 00 00 00       	mov    ecx,0x9
c0020665:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0020669:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c002066d:	fc                   	cld    
c002066e:	89 e7                	mov    edi,esp
c0020670:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020672:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0020679:	e8 f0 fc ff ff       	call   c002036e <PCI::foundDevice(PCIDeviceInfo)>
c002067e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0020684:	5b                   	pop    ebx
c0020685:	5e                   	pop    esi
c0020686:	5f                   	pop    edi
c0020687:	5d                   	pop    ebp
c0020688:	c3                   	ret    
c0020689:	90                   	nop

c002068a <PCI::checkDevice(unsigned char, unsigned char)>:
c002068a:	55                   	push   ebp
c002068b:	57                   	push   edi
c002068c:	56                   	push   esi
c002068d:	53                   	push   ebx
c002068e:	83 ec 0c             	sub    esp,0xc
c0020691:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0020695:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002069a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002069f:	6a 00                	push   0x0
c00206a1:	56                   	push   esi
c00206a2:	57                   	push   edi
c00206a3:	55                   	push   ebp
c00206a4:	e8 bf fa ff ff       	call   c0020168 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00206a9:	6a 00                	push   0x0
c00206ab:	56                   	push   esi
c00206ac:	57                   	push   edi
c00206ad:	55                   	push   ebp
c00206ae:	e8 2b fe ff ff       	call   c00204de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00206b3:	83 c4 20             	add    esp,0x20
c00206b6:	6a 00                	push   0x0
c00206b8:	56                   	push   esi
c00206b9:	57                   	push   edi
c00206ba:	55                   	push   ebp
c00206bb:	e8 ca fa ff ff       	call   c002018a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00206c0:	83 c4 10             	add    esp,0x10
c00206c3:	84 c0                	test   al,al
c00206c5:	79 27                	jns    c00206ee <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00206c7:	bb 01 00 00 00       	mov    ebx,0x1
c00206cc:	53                   	push   ebx
c00206cd:	56                   	push   esi
c00206ce:	57                   	push   edi
c00206cf:	55                   	push   ebp
c00206d0:	e8 93 fa ff ff       	call   c0020168 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00206d5:	83 c4 10             	add    esp,0x10
c00206d8:	66 40                	inc    ax
c00206da:	74 0c                	je     c00206e8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00206dc:	53                   	push   ebx
c00206dd:	56                   	push   esi
c00206de:	57                   	push   edi
c00206df:	55                   	push   ebp
c00206e0:	e8 f9 fd ff ff       	call   c00204de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00206e5:	83 c4 10             	add    esp,0x10
c00206e8:	43                   	inc    ebx
c00206e9:	83 fb 08             	cmp    ebx,0x8
c00206ec:	75 de                	jne    c00206cc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00206ee:	83 c4 0c             	add    esp,0xc
c00206f1:	5b                   	pop    ebx
c00206f2:	5e                   	pop    esi
c00206f3:	5f                   	pop    edi
c00206f4:	5d                   	pop    ebp
c00206f5:	c3                   	ret    

c00206f6 <PCI::detect()>:
c00206f6:	56                   	push   esi
c00206f7:	53                   	push   ebx
c00206f8:	53                   	push   ebx
c00206f9:	31 db                	xor    ebx,ebx
c00206fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00206ff:	6a 00                	push   0x0
c0020701:	6a 00                	push   0x0
c0020703:	6a 00                	push   0x0
c0020705:	56                   	push   esi
c0020706:	e8 7f fa ff ff       	call   c002018a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002070b:	83 c4 10             	add    esp,0x10
c002070e:	a8 80                	test   al,0x80
c0020710:	75 21                	jne    c0020733 <PCI::detect()+0x3d>
c0020712:	51                   	push   ecx
c0020713:	51                   	push   ecx
c0020714:	6a 00                	push   0x0
c0020716:	56                   	push   esi
c0020717:	e8 2e fc ff ff       	call   c002034a <PCI::checkBus(unsigned char)>
c002071c:	83 c4 10             	add    esp,0x10
c002071f:	eb 24                	jmp    c0020745 <PCI::detect()+0x4f>
c0020721:	52                   	push   edx
c0020722:	52                   	push   edx
c0020723:	53                   	push   ebx
c0020724:	43                   	inc    ebx
c0020725:	56                   	push   esi
c0020726:	e8 1f fc ff ff       	call   c002034a <PCI::checkBus(unsigned char)>
c002072b:	83 c4 10             	add    esp,0x10
c002072e:	83 fb 08             	cmp    ebx,0x8
c0020731:	74 12                	je     c0020745 <PCI::detect()+0x4f>
c0020733:	53                   	push   ebx
c0020734:	6a 00                	push   0x0
c0020736:	6a 00                	push   0x0
c0020738:	56                   	push   esi
c0020739:	e8 2a fa ff ff       	call   c0020168 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002073e:	83 c4 10             	add    esp,0x10
c0020741:	66 40                	inc    ax
c0020743:	74 dc                	je     c0020721 <PCI::detect()+0x2b>
c0020745:	58                   	pop    eax
c0020746:	5b                   	pop    ebx
c0020747:	5e                   	pop    esi
c0020748:	c3                   	ret    
c0020749:	90                   	nop

c002074a <IDE::close(int, int, void*)>:
c002074a:	83 c8 ff             	or     eax,0xffffffff
c002074d:	c3                   	ret    

c002074e <IDE::IDE()>:
c002074e:	83 ec 0c             	sub    esp,0xc
c0020751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020755:	83 ec 08             	sub    esp,0x8
c0020758:	68 8c 8d 02 c0       	push   0xc0028d8c
c002075d:	50                   	push   eax
c002075e:	e8 3f 32 ff ff       	call   c00139a2 <HardDiskController::HardDiskController(char const*)>
c0020763:	83 c4 10             	add    esp,0x10
c0020766:	ba cc 8f 02 c0       	mov    edx,0xc0028fcc
c002076b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002076f:	89 10                	mov    DWORD PTR [eax],edx
c0020771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020775:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002077c:	90                   	nop
c002077d:	83 c4 0c             	add    esp,0xc
c0020780:	c3                   	ret    
c0020781:	90                   	nop

c0020782 <IDE::prepareInterrupt(unsigned char)>:
c0020782:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020787:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002078b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0020793:	c3                   	ret    

c0020794 <selectDrive(unsigned char, unsigned char)>:
c0020794:	c3                   	ret    
c0020795:	90                   	nop

c0020796 <IDE::getBase(unsigned char)>:
c0020796:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002079b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002079f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00207a7:	c3                   	ret    

c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00207a8:	55                   	push   ebp
c00207a9:	57                   	push   edi
c00207aa:	56                   	push   esi
c00207ab:	53                   	push   ebx
c00207ac:	83 ec 1c             	sub    esp,0x1c
c00207af:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00207b3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00207b7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00207ba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00207be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00207c2:	80 f9 03             	cmp    cl,0x3
c00207c5:	77 51                	ja     c0020818 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00207c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207cb:	0f b6 f2             	movzx  esi,dl
c00207ce:	0f b6 db             	movzx  ebx,bl
c00207d1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00207d4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00207d8:	83 ca 80             	or     edx,0xffffff80
c00207db:	0f b6 d2             	movzx  edx,dl
c00207de:	52                   	push   edx
c00207df:	6a 0c                	push   0xc
c00207e1:	56                   	push   esi
c00207e2:	57                   	push   edi
c00207e3:	e8 c0 ff ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00207e8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00207ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00207f1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00207f5:	ee                   	out    dx,al
c00207f6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00207fb:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00207ff:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0020803:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020807:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002080f:	83 c4 2c             	add    esp,0x2c
c0020812:	5b                   	pop    ebx
c0020813:	5e                   	pop    esi
c0020814:	5f                   	pop    edi
c0020815:	5d                   	pop    ebp
c0020816:	eb 90                	jmp    c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020818:	80 fb 07             	cmp    bl,0x7
c002081b:	77 12                	ja     c002082f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002081d:	0f b6 d2             	movzx  edx,dl
c0020820:	0f b6 db             	movzx  ebx,bl
c0020823:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002082b:	89 da                	mov    edx,ebx
c002082d:	eb 2f                	jmp    c002085e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002082f:	80 fb 0d             	cmp    bl,0xd
c0020832:	77 13                	ja     c0020847 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0020834:	0f b6 d2             	movzx  edx,dl
c0020837:	0f b6 db             	movzx  ebx,bl
c002083a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0020841:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0020845:	eb 17                	jmp    c002085e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020847:	80 fb 15             	cmp    bl,0x15
c002084a:	77 13                	ja     c002085f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002084c:	0f b6 d2             	movzx  edx,dl
c002084f:	0f b6 db             	movzx  ebx,bl
c0020852:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002085a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002085e:	ee                   	out    dx,al
c002085f:	83 c4 1c             	add    esp,0x1c
c0020862:	5b                   	pop    ebx
c0020863:	5e                   	pop    esi
c0020864:	5f                   	pop    edi
c0020865:	5d                   	pop    ebp
c0020866:	c3                   	ret    
c0020867:	90                   	nop

c0020868 <IDE::read(unsigned char, unsigned char)>:
c0020868:	55                   	push   ebp
c0020869:	57                   	push   edi
c002086a:	56                   	push   esi
c002086b:	53                   	push   ebx
c002086c:	83 ec 1c             	sub    esp,0x1c
c002086f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020873:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020877:	8d 43 f8             	lea    eax,[ebx-0x8]
c002087a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002087e:	3c 03                	cmp    al,0x3
c0020880:	77 43                	ja     c00208c5 <IDE::read(unsigned char, unsigned char)+0x5d>
c0020882:	0f b6 f2             	movzx  esi,dl
c0020885:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0020888:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002088c:	83 c8 80             	or     eax,0xffffff80
c002088f:	0f b6 c0             	movzx  eax,al
c0020892:	50                   	push   eax
c0020893:	6a 0c                	push   0xc
c0020895:	56                   	push   esi
c0020896:	57                   	push   edi
c0020897:	e8 0c ff ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002089c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00208a1:	0f b6 c3             	movzx  eax,bl
c00208a4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00208a8:	ec                   	in     al,dx
c00208a9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00208ad:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00208b2:	52                   	push   edx
c00208b3:	6a 0c                	push   0xc
c00208b5:	56                   	push   esi
c00208b6:	57                   	push   edi
c00208b7:	e8 ec fe ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208bc:	83 c4 20             	add    esp,0x20
c00208bf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00208c3:	eb 49                	jmp    c002090e <IDE::read(unsigned char, unsigned char)+0xa6>
c00208c5:	80 fb 07             	cmp    bl,0x7
c00208c8:	77 12                	ja     c00208dc <IDE::read(unsigned char, unsigned char)+0x74>
c00208ca:	0f b6 d2             	movzx  edx,dl
c00208cd:	0f b6 c3             	movzx  eax,bl
c00208d0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00208d8:	89 c2                	mov    edx,eax
c00208da:	eb 31                	jmp    c002090d <IDE::read(unsigned char, unsigned char)+0xa5>
c00208dc:	80 fb 0d             	cmp    bl,0xd
c00208df:	77 13                	ja     c00208f4 <IDE::read(unsigned char, unsigned char)+0x8c>
c00208e1:	0f b6 d2             	movzx  edx,dl
c00208e4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00208eb:	0f b6 d3             	movzx  edx,bl
c00208ee:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00208f2:	eb 19                	jmp    c002090d <IDE::read(unsigned char, unsigned char)+0xa5>
c00208f4:	31 c0                	xor    eax,eax
c00208f6:	80 fb 15             	cmp    bl,0x15
c00208f9:	77 13                	ja     c002090e <IDE::read(unsigned char, unsigned char)+0xa6>
c00208fb:	0f b6 d2             	movzx  edx,dl
c00208fe:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0020906:	0f b6 d3             	movzx  edx,bl
c0020909:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002090d:	ec                   	in     al,dx
c002090e:	83 c4 1c             	add    esp,0x1c
c0020911:	5b                   	pop    ebx
c0020912:	5e                   	pop    esi
c0020913:	5f                   	pop    edi
c0020914:	5d                   	pop    ebp
c0020915:	c3                   	ret    

c0020916 <IDE::waitInterrupt(unsigned char)>:
c0020916:	55                   	push   ebp
c0020917:	57                   	push   edi
c0020918:	56                   	push   esi
c0020919:	53                   	push   ebx
c002091a:	31 db                	xor    ebx,ebx
c002091c:	83 ec 0c             	sub    esp,0xc
c002091f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020923:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0020928:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0020930:	89 e8                	mov    eax,ebp
c0020932:	84 c0                	test   al,al
c0020934:	75 34                	jne    c002096a <IDE::waitInterrupt(unsigned char)+0x54>
c0020936:	52                   	push   edx
c0020937:	6a 0c                	push   0xc
c0020939:	56                   	push   esi
c002093a:	57                   	push   edi
c002093b:	e8 28 ff ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0020940:	83 c4 10             	add    esp,0x10
c0020943:	a8 01                	test   al,0x1
c0020945:	75 2b                	jne    c0020972 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020947:	f6 c3 04             	test   bl,0x4
c002094a:	75 16                	jne    c0020962 <IDE::waitInterrupt(unsigned char)+0x4c>
c002094c:	83 fb 32             	cmp    ebx,0x32
c002094f:	7e 11                	jle    c0020962 <IDE::waitInterrupt(unsigned char)+0x4c>
c0020951:	50                   	push   eax
c0020952:	50                   	push   eax
c0020953:	6a 00                	push   0x0
c0020955:	68 80 96 98 00       	push   0x989680
c002095a:	e8 fd b4 ff ff       	call   c001be5c <nanoSleep(unsigned long long)>
c002095f:	83 c4 10             	add    esp,0x10
c0020962:	83 fb 3c             	cmp    ebx,0x3c
c0020965:	74 0b                	je     c0020972 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020967:	43                   	inc    ebx
c0020968:	eb be                	jmp    c0020928 <IDE::waitInterrupt(unsigned char)+0x12>
c002096a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0020972:	83 c4 0c             	add    esp,0xc
c0020975:	89 e8                	mov    eax,ebp
c0020977:	5b                   	pop    ebx
c0020978:	5e                   	pop    esi
c0020979:	5f                   	pop    edi
c002097a:	5d                   	pop    ebp
c002097b:	c3                   	ret    

c002097c <ideChannel0IRQHandler(regs*, void*)>:
c002097c:	83 ec 10             	sub    esp,0x10
c002097f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020983:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002098a:	6a 07                	push   0x7
c002098c:	6a 00                	push   0x0
c002098e:	50                   	push   eax
c002098f:	e8 d4 fe ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0020994:	83 c4 1c             	add    esp,0x1c
c0020997:	c3                   	ret    

c0020998 <ideChannel1IRQHandler(regs*, void*)>:
c0020998:	83 ec 10             	sub    esp,0x10
c002099b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002099f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00209a6:	6a 07                	push   0x7
c00209a8:	6a 01                	push   0x1
c00209aa:	50                   	push   eax
c00209ab:	e8 b8 fe ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c00209b0:	83 c4 1c             	add    esp,0x1c
c00209b3:	c3                   	ret    

c00209b4 <IDE::enableIRQs(unsigned char, bool)>:
c00209b4:	57                   	push   edi
c00209b5:	56                   	push   esi
c00209b6:	be 04 00 00 00       	mov    esi,0x4
c00209bb:	53                   	push   ebx
c00209bc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00209c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00209c5:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00209ca:	0f 94 c0             	sete   al
c00209cd:	d1 e0                	shl    eax,1
c00209cf:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00209d6:	0f b6 c0             	movzx  eax,al
c00209d9:	50                   	push   eax
c00209da:	6a 0c                	push   0xc
c00209dc:	57                   	push   edi
c00209dd:	53                   	push   ebx
c00209de:	e8 c5 fd ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00209e3:	83 c4 10             	add    esp,0x10
c00209e6:	50                   	push   eax
c00209e7:	6a 0c                	push   0xc
c00209e9:	57                   	push   edi
c00209ea:	53                   	push   ebx
c00209eb:	e8 78 fe ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c00209f0:	83 c4 10             	add    esp,0x10
c00209f3:	4e                   	dec    esi
c00209f4:	75 f0                	jne    c00209e6 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00209f6:	5b                   	pop    ebx
c00209f7:	5e                   	pop    esi
c00209f8:	5f                   	pop    edi
c00209f9:	c3                   	ret    

c00209fa <IDE::open(int, int, void*)>:
c00209fa:	55                   	push   ebp
c00209fb:	57                   	push   edi
c00209fc:	56                   	push   esi
c00209fd:	53                   	push   ebx
c00209fe:	83 ec 1c             	sub    esp,0x1c
c0020a01:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020a05:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0020a0e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0020a17:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0020a1e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0020a25:	0f 85 b0 02 00 00    	jne    c0020cdb <IDE::open(int, int, void*)+0x2e1>
c0020a2b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0020a31:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0020a35:	83 e0 7f             	and    eax,0x7f
c0020a38:	3c 05                	cmp    al,0x5
c0020a3a:	74 04                	je     c0020a40 <IDE::open(int, int, void*)+0x46>
c0020a3c:	3c 0f                	cmp    al,0xf
c0020a3e:	75 32                	jne    c0020a72 <IDE::open(int, int, void*)+0x78>
c0020a40:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0020a46:	83 e0 fc             	and    eax,0xfffffffc
c0020a49:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0020a50:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0020a56:	83 e0 fc             	and    eax,0xfffffffc
c0020a59:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0020a60:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0020a66:	83 e0 fc             	and    eax,0xfffffffc
c0020a69:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020a70:	eb 14                	jmp    c0020a86 <IDE::open(int, int, void*)+0x8c>
c0020a72:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020a7c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020a86:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0020a8d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0020a94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020a98:	89 c6                	mov    esi,eax
c0020a9a:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020a9f:	c1 e6 10             	shl    esi,0x10
c0020aa2:	89 e8                	mov    eax,ebp
c0020aa4:	89 fa                	mov    edx,edi
c0020aa6:	c1 e0 0b             	shl    eax,0xb
c0020aa9:	09 f0                	or     eax,esi
c0020aab:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0020ab2:	c1 e6 08             	shl    esi,0x8
c0020ab5:	09 c6                	or     esi,eax
c0020ab7:	89 f0                	mov    eax,esi
c0020ab9:	0d 08 00 00 80       	or     eax,0x80000008
c0020abe:	ef                   	out    dx,eax
c0020abf:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0020ac4:	89 ca                	mov    edx,ecx
c0020ac6:	ed                   	in     eax,dx
c0020ac7:	c1 e8 10             	shr    eax,0x10
c0020aca:	3d ff ff 00 00       	cmp    eax,0xffff
c0020acf:	0f 84 f5 00 00 00    	je     c0020bca <IDE::open(int, int, void*)+0x1d0>
c0020ad5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0020adb:	89 fa                	mov    edx,edi
c0020add:	89 f0                	mov    eax,esi
c0020adf:	ef                   	out    dx,eax
c0020ae0:	b0 fe                	mov    al,0xfe
c0020ae2:	89 ca                	mov    edx,ecx
c0020ae4:	ee                   	out    dx,al
c0020ae5:	89 f0                	mov    eax,esi
c0020ae7:	89 fa                	mov    edx,edi
c0020ae9:	ef                   	out    dx,eax
c0020aea:	89 ca                	mov    edx,ecx
c0020aec:	ed                   	in     eax,dx
c0020aed:	3c fe                	cmp    al,0xfe
c0020aef:	0f 85 a9 00 00 00    	jne    c0020b9e <IDE::open(int, int, void*)+0x1a4>
c0020af5:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0020afb:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0020b02:	74 33                	je     c0020b37 <IDE::open(int, int, void*)+0x13d>
c0020b04:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0020b0a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0020b0e:	40                   	inc    eax
c0020b0f:	83 ec 0c             	sub    esp,0xc
c0020b12:	0f b6 c0             	movzx  eax,al
c0020b15:	50                   	push   eax
c0020b16:	55                   	push   ebp
c0020b17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020b1b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0020b21:	51                   	push   ecx
c0020b22:	e8 97 63 ff ff       	call   c0016ebe <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0020b27:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0020b2c:	83 c4 1c             	add    esp,0x1c
c0020b2f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020b35:	eb 0a                	jmp    c0020b41 <IDE::open(int, int, void*)+0x147>
c0020b37:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0020b41:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0020b48:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0020b4f:	c1 e1 10             	shl    ecx,0x10
c0020b52:	c1 e0 08             	shl    eax,0x8
c0020b55:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020b5a:	09 c1                	or     ecx,eax
c0020b5c:	89 fa                	mov    edx,edi
c0020b5e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0020b65:	c1 e0 0b             	shl    eax,0xb
c0020b68:	09 c1                	or     ecx,eax
c0020b6a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0020b70:	89 c8                	mov    eax,ecx
c0020b72:	ef                   	out    dx,eax
c0020b73:	be fc 0c 00 00       	mov    esi,0xcfc
c0020b78:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0020b7e:	89 f2                	mov    edx,esi
c0020b80:	ee                   	out    dx,al
c0020b81:	89 c8                	mov    eax,ecx
c0020b83:	89 fa                	mov    edx,edi
c0020b85:	ef                   	out    dx,eax
c0020b86:	89 f2                	mov    edx,esi
c0020b88:	ed                   	in     eax,dx
c0020b89:	0f b6 c0             	movzx  eax,al
c0020b8c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0020b92:	74 46                	je     c0020bda <IDE::open(int, int, void*)+0x1e0>
c0020b94:	83 ec 0c             	sub    esp,0xc
c0020b97:	68 a4 8d 02 c0       	push   0xc0028da4
c0020b9c:	eb 34                	jmp    c0020bd2 <IDE::open(int, int, void*)+0x1d8>
c0020b9e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0020ba7:	75 17                	jne    c0020bc0 <IDE::open(int, int, void*)+0x1c6>
c0020ba9:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0020bae:	74 07                	je     c0020bb7 <IDE::open(int, int, void*)+0x1bd>
c0020bb0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0020bb5:	75 09                	jne    c0020bc0 <IDE::open(int, int, void*)+0x1c6>
c0020bb7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020bbe:	eb 1a                	jmp    c0020bda <IDE::open(int, int, void*)+0x1e0>
c0020bc0:	83 ec 0c             	sub    esp,0xc
c0020bc3:	68 ac 8d 02 c0       	push   0xc0028dac
c0020bc8:	eb 08                	jmp    c0020bd2 <IDE::open(int, int, void*)+0x1d8>
c0020bca:	83 ec 0c             	sub    esp,0xc
c0020bcd:	68 dd 8d 02 c0       	push   0xc0028ddd
c0020bd2:	e8 ec 7d ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c0020bd7:	83 c4 10             	add    esp,0x10
c0020bda:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0020be1:	79 1a                	jns    c0020bfd <IDE::open(int, int, void*)+0x203>
c0020be3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0020be9:	83 e0 fc             	and    eax,0xfffffffc
c0020bec:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0020bf3:	83 c0 08             	add    eax,0x8
c0020bf6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0020bfd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0020c03:	89 c2                	mov    edx,eax
c0020c05:	83 e2 0f             	and    edx,0xf
c0020c08:	66 83 fa 08          	cmp    dx,0x8
c0020c0c:	75 0a                	jne    c0020c18 <IDE::open(int, int, void*)+0x21e>
c0020c0e:	83 e8 02             	sub    eax,0x2
c0020c11:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020c18:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0020c1e:	89 c2                	mov    edx,eax
c0020c20:	83 e2 0f             	and    edx,0xf
c0020c23:	66 83 fa 08          	cmp    dx,0x8
c0020c27:	75 0a                	jne    c0020c33 <IDE::open(int, int, void*)+0x239>
c0020c29:	83 e8 02             	sub    eax,0x2
c0020c2c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0020c33:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0020c3a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0020c41:	89 d0                	mov    eax,edx
c0020c43:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020c46:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020c4a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0020c4e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0020c51:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020c56:	0f b6 c9             	movzx  ecx,cl
c0020c59:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0020c60:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020c63:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020c67:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0020c6b:	8d 50 02             	lea    edx,[eax+0x2]
c0020c6e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020c73:	0f b6 d2             	movzx  edx,dl
c0020c76:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0020c7c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020c7f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020c83:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0020c87:	8d 48 03             	lea    ecx,[eax+0x3]
c0020c8a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020c8f:	0f b6 c9             	movzx  ecx,cl
c0020c92:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0020c98:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020c9b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020c9f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0020ca3:	8d 50 04             	lea    edx,[eax+0x4]
c0020ca6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0020cac:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020cb1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0020cb8:	66 85 f6             	test   si,si
c0020cbb:	74 3e                	je     c0020cfb <IDE::open(int, int, void*)+0x301>
c0020cbd:	0f b6 d2             	movzx  edx,dl
c0020cc0:	83 c0 05             	add    eax,0x5
c0020cc3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020cc6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020cca:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0020cce:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0020cd4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020cd9:	eb 20                	jmp    c0020cfb <IDE::open(int, int, void*)+0x301>
c0020cdb:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020ce5:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020cef:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020cf6:	e9 02 ff ff ff       	jmp    c0020bfd <IDE::open(int, int, void*)+0x203>
c0020cfb:	52                   	push   edx
c0020cfc:	52                   	push   edx
c0020cfd:	6a 00                	push   0x0
c0020cff:	53                   	push   ebx
c0020d00:	e8 7d fa ff ff       	call   c0020782 <IDE::prepareInterrupt(unsigned char)>
c0020d05:	59                   	pop    ecx
c0020d06:	5e                   	pop    esi
c0020d07:	6a 01                	push   0x1
c0020d09:	53                   	push   ebx
c0020d0a:	e8 73 fa ff ff       	call   c0020782 <IDE::prepareInterrupt(unsigned char)>
c0020d0f:	83 c4 0c             	add    esp,0xc
c0020d12:	6a 00                	push   0x0
c0020d14:	6a 00                	push   0x0
c0020d16:	53                   	push   ebx
c0020d17:	e8 98 fc ff ff       	call   c00209b4 <IDE::enableIRQs(unsigned char, bool)>
c0020d1c:	83 c4 0c             	add    esp,0xc
c0020d1f:	6a 00                	push   0x0
c0020d21:	6a 01                	push   0x1
c0020d23:	53                   	push   ebx
c0020d24:	e8 8b fc ff ff       	call   c00209b4 <IDE::enableIRQs(unsigned char, bool)>
c0020d29:	83 c4 10             	add    esp,0x10
c0020d2c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0020d33:	74 40                	je     c0020d75 <IDE::open(int, int, void*)+0x37b>
c0020d35:	83 ec 0c             	sub    esp,0xc
c0020d38:	68 07 8e 02 c0       	push   0xc0028e07
c0020d3d:	e8 03 15 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0020d42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020d45:	6a 01                	push   0x1
c0020d47:	68 7c 09 02 c0       	push   0xc002097c
c0020d4c:	6a 0e                	push   0xe
c0020d4e:	53                   	push   ebx
c0020d4f:	e8 50 28 ff ff       	call   c00135a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d54:	83 c4 14             	add    esp,0x14
c0020d57:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020d5d:	53                   	push   ebx
c0020d5e:	6a 01                	push   0x1
c0020d60:	68 98 09 02 c0       	push   0xc0020998
c0020d65:	6a 0f                	push   0xf
c0020d67:	53                   	push   ebx
c0020d68:	e8 37 28 ff ff       	call   c00135a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d6d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0020d73:	eb 4a                	jmp    c0020dbf <IDE::open(int, int, void*)+0x3c5>
c0020d75:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0020d7f:	50                   	push   eax
c0020d80:	6a 0f                	push   0xf
c0020d82:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020d88:	68 23 8e 02 c0       	push   0xc0028e23
c0020d8d:	e8 b3 14 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0020d92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020d95:	6a 00                	push   0x0
c0020d97:	68 7c 09 02 c0       	push   0xc002097c
c0020d9c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020da2:	53                   	push   ebx
c0020da3:	e8 fc 27 ff ff       	call   c00135a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020da8:	83 c4 14             	add    esp,0x14
c0020dab:	53                   	push   ebx
c0020dac:	6a 00                	push   0x0
c0020dae:	68 98 09 02 c0       	push   0xc0020998
c0020db3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0020db9:	53                   	push   ebx
c0020dba:	e8 e5 27 ff ff       	call   c00135a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020dbf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020dc1:	83 c4 20             	add    esp,0x20
c0020dc4:	83 ec 0c             	sub    esp,0xc
c0020dc7:	53                   	push   ebx
c0020dc8:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0020dcb:	83 c4 0c             	add    esp,0xc
c0020dce:	6a 07                	push   0x7
c0020dd0:	6a 00                	push   0x0
c0020dd2:	53                   	push   ebx
c0020dd3:	e8 90 fa ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0020dd8:	83 c4 0c             	add    esp,0xc
c0020ddb:	6a 07                	push   0x7
c0020ddd:	6a 01                	push   0x1
c0020ddf:	53                   	push   ebx
c0020de0:	e8 83 fa ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0020de5:	83 c4 0c             	add    esp,0xc
c0020de8:	6a 01                	push   0x1
c0020dea:	6a 00                	push   0x0
c0020dec:	53                   	push   ebx
c0020ded:	e8 c2 fb ff ff       	call   c00209b4 <IDE::enableIRQs(unsigned char, bool)>
c0020df2:	83 c4 0c             	add    esp,0xc
c0020df5:	6a 01                	push   0x1
c0020df7:	6a 01                	push   0x1
c0020df9:	53                   	push   ebx
c0020dfa:	e8 b5 fb ff ff       	call   c00209b4 <IDE::enableIRQs(unsigned char, bool)>
c0020dff:	83 c4 2c             	add    esp,0x2c
c0020e02:	31 c0                	xor    eax,eax
c0020e04:	5b                   	pop    ebx
c0020e05:	5e                   	pop    esi
c0020e06:	5f                   	pop    edi
c0020e07:	5d                   	pop    ebp
c0020e08:	c3                   	ret    
c0020e09:	90                   	nop

c0020e0a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0020e0a:	55                   	push   ebp
c0020e0b:	57                   	push   edi
c0020e0c:	56                   	push   esi
c0020e0d:	53                   	push   ebx
c0020e0e:	83 ec 1c             	sub    esp,0x1c
c0020e11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e15:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020e19:	8d 50 f8             	lea    edx,[eax-0x8]
c0020e1c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020e20:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0020e24:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020e28:	80 fa 03             	cmp    dl,0x3
c0020e2b:	77 5d                	ja     c0020e8a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0020e2d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020e31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e35:	0f b6 db             	movzx  ebx,bl
c0020e38:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0020e3b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0020e3f:	83 ca 80             	or     edx,0xffffff80
c0020e42:	0f b6 d2             	movzx  edx,dl
c0020e45:	52                   	push   edx
c0020e46:	6a 0c                	push   0xc
c0020e48:	53                   	push   ebx
c0020e49:	56                   	push   esi
c0020e4a:	e8 59 f9 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e4f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0020e54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e58:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020e5c:	0f b6 c0             	movzx  eax,al
c0020e5f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0020e63:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020e65:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0020e6a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0020e6e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020e72:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020e76:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020e7e:	83 c4 2c             	add    esp,0x2c
c0020e81:	5b                   	pop    ebx
c0020e82:	5e                   	pop    esi
c0020e83:	5f                   	pop    edi
c0020e84:	5d                   	pop    ebp
c0020e85:	e9 1e f9 ff ff       	jmp    c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e8a:	3c 07                	cmp    al,0x7
c0020e8c:	77 10                	ja     c0020e9e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0020e8e:	0f b6 db             	movzx  ebx,bl
c0020e91:	0f b6 d0             	movzx  edx,al
c0020e94:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0020e9c:	eb 2d                	jmp    c0020ecb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020e9e:	3c 0d                	cmp    al,0xd
c0020ea0:	77 13                	ja     c0020eb5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0020ea2:	0f b6 db             	movzx  ebx,bl
c0020ea5:	0f b6 c0             	movzx  eax,al
c0020ea8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0020eaf:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0020eb3:	eb 16                	jmp    c0020ecb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020eb5:	3c 15                	cmp    al,0x15
c0020eb7:	77 14                	ja     c0020ecd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0020eb9:	0f b6 db             	movzx  ebx,bl
c0020ebc:	0f b6 c0             	movzx  eax,al
c0020ebf:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0020ec7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0020ecb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020ecd:	83 c4 1c             	add    esp,0x1c
c0020ed0:	5b                   	pop    ebx
c0020ed1:	5e                   	pop    esi
c0020ed2:	5f                   	pop    edi
c0020ed3:	5d                   	pop    ebp
c0020ed4:	c3                   	ret    
c0020ed5:	90                   	nop

c0020ed6 <IDE::detect()>:
c0020ed6:	55                   	push   ebp
c0020ed7:	57                   	push   edi
c0020ed8:	56                   	push   esi
c0020ed9:	53                   	push   ebx
c0020eda:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020ee0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0020ee7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0020eee:	0f 85 be 02 00 00    	jne    c00211b2 <IDE::detect()+0x2dc>
c0020ef4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0020efb:	31 f6                	xor    esi,esi
c0020efd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020f05:	31 ed                	xor    ebp,ebp
c0020f07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f0b:	c1 e0 06             	shl    eax,0x6
c0020f0e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0020f16:	89 e8                	mov    eax,ebp
c0020f18:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f1c:	c1 e0 04             	shl    eax,0x4
c0020f1f:	83 c8 a0             	or     eax,0xffffffa0
c0020f22:	0f b6 c0             	movzx  eax,al
c0020f25:	50                   	push   eax
c0020f26:	6a 06                	push   0x6
c0020f28:	56                   	push   esi
c0020f29:	53                   	push   ebx
c0020f2a:	e8 79 f8 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f2f:	83 c4 0c             	add    esp,0xc
c0020f32:	6a 0c                	push   0xc
c0020f34:	56                   	push   esi
c0020f35:	53                   	push   ebx
c0020f36:	e8 2d f9 ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0020f3b:	83 c4 0c             	add    esp,0xc
c0020f3e:	6a 0c                	push   0xc
c0020f40:	56                   	push   esi
c0020f41:	53                   	push   ebx
c0020f42:	e8 21 f9 ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0020f47:	83 c4 0c             	add    esp,0xc
c0020f4a:	6a 0c                	push   0xc
c0020f4c:	56                   	push   esi
c0020f4d:	53                   	push   ebx
c0020f4e:	e8 15 f9 ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0020f53:	83 c4 0c             	add    esp,0xc
c0020f56:	6a 0c                	push   0xc
c0020f58:	56                   	push   esi
c0020f59:	53                   	push   ebx
c0020f5a:	e8 09 f9 ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0020f5f:	68 ec 00 00 00       	push   0xec
c0020f64:	6a 07                	push   0x7
c0020f66:	56                   	push   esi
c0020f67:	53                   	push   ebx
c0020f68:	e8 3b f8 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f6d:	83 c4 1c             	add    esp,0x1c
c0020f70:	6a 0c                	push   0xc
c0020f72:	56                   	push   esi
c0020f73:	53                   	push   ebx
c0020f74:	e8 ef f8 ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0020f79:	83 c4 0c             	add    esp,0xc
c0020f7c:	6a 0c                	push   0xc
c0020f7e:	56                   	push   esi
c0020f7f:	53                   	push   ebx
c0020f80:	e8 e3 f8 ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0020f85:	83 c4 0c             	add    esp,0xc
c0020f88:	6a 0c                	push   0xc
c0020f8a:	56                   	push   esi
c0020f8b:	53                   	push   ebx
c0020f8c:	e8 d7 f8 ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0020f91:	83 c4 0c             	add    esp,0xc
c0020f94:	6a 0c                	push   0xc
c0020f96:	56                   	push   esi
c0020f97:	53                   	push   ebx
c0020f98:	e8 cb f8 ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0020f9d:	83 c4 0c             	add    esp,0xc
c0020fa0:	6a 0c                	push   0xc
c0020fa2:	56                   	push   esi
c0020fa3:	53                   	push   ebx
c0020fa4:	e8 bf f8 ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0020fa9:	83 c4 10             	add    esp,0x10
c0020fac:	84 c0                	test   al,al
c0020fae:	0f 84 8b 01 00 00    	je     c002113f <IDE::detect()+0x269>
c0020fb4:	31 ff                	xor    edi,edi
c0020fb6:	50                   	push   eax
c0020fb7:	6a 0c                	push   0xc
c0020fb9:	56                   	push   esi
c0020fba:	53                   	push   ebx
c0020fbb:	e8 a8 f8 ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0020fc0:	83 c4 10             	add    esp,0x10
c0020fc3:	a8 01                	test   al,0x1
c0020fc5:	0f 85 8e 01 00 00    	jne    c0021159 <IDE::detect()+0x283>
c0020fcb:	84 c0                	test   al,al
c0020fcd:	78 04                	js     c0020fd3 <IDE::detect()+0xfd>
c0020fcf:	a8 08                	test   al,0x8
c0020fd1:	75 27                	jne    c0020ffa <IDE::detect()+0x124>
c0020fd3:	47                   	inc    edi
c0020fd4:	81 ff 17 01 00 00    	cmp    edi,0x117
c0020fda:	7e da                	jle    c0020fb6 <IDE::detect()+0xe0>
c0020fdc:	50                   	push   eax
c0020fdd:	50                   	push   eax
c0020fde:	6a 00                	push   0x0
c0020fe0:	68 40 4b 4c 00       	push   0x4c4b40
c0020fe5:	e8 72 ae ff ff       	call   c001be5c <nanoSleep(unsigned long long)>
c0020fea:	83 c4 10             	add    esp,0x10
c0020fed:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0020ff3:	75 c1                	jne    c0020fb6 <IDE::detect()+0xe0>
c0020ff5:	e9 5f 01 00 00       	jmp    c0021159 <IDE::detect()+0x283>
c0020ffa:	31 c9                	xor    ecx,ecx
c0020ffc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0021000:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0021004:	83 ec 0c             	sub    esp,0xc
c0021007:	68 80 00 00 00       	push   0x80
c002100c:	57                   	push   edi
c002100d:	6a 00                	push   0x0
c002100f:	56                   	push   esi
c0021010:	53                   	push   ebx
c0021011:	e8 f4 fd ff ff       	call   c0020e0a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0021016:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002101b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002101f:	89 d1                	mov    ecx,edx
c0021021:	c1 e0 06             	shl    eax,0x6
c0021024:	01 d8                	add    eax,ebx
c0021026:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002102d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0021034:	89 f2                	mov    edx,esi
c0021036:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002103c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0021040:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0021046:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002104a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0021051:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0021059:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0021060:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0021068:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002106e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0021075:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002107b:	8d 54 24 58          	lea    edx,[esp+0x58]
c002107f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021083:	83 c4 20             	add    esp,0x20
c0021086:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0021089:	83 c0 02             	add    eax,0x2
c002108c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0021092:	83 c7 02             	add    edi,0x2
c0021095:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0021098:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002109e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00210a2:	75 e2                	jne    c0021086 <IDE::detect()+0x1b0>
c00210a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210a8:	c1 e0 06             	shl    eax,0x6
c00210ab:	01 d8                	add    eax,ebx
c00210ad:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00210b3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00210ba:	66 c1 ea 09          	shr    dx,0x9
c00210be:	83 e2 01             	and    edx,0x1
c00210c1:	84 c9                	test   cl,cl
c00210c3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00210c9:	75 2f                	jne    c00210fa <IDE::detect()+0x224>
c00210cb:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00210d1:	85 c0                	test   eax,eax
c00210d3:	74 66                	je     c002113b <IDE::detect()+0x265>
c00210d5:	50                   	push   eax
c00210d6:	55                   	push   ebp
c00210d7:	56                   	push   esi
c00210d8:	68 3f 8e 02 c0       	push   0xc0028e3f
c00210dd:	e8 63 11 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00210e2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00210e9:	e8 68 10 ff ff       	call   c0012156 <operator new(unsigned long)>
c00210ee:	89 c7                	mov    edi,eax
c00210f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00210f3:	e8 e8 02 00 00       	call   c00213e0 <ATA::ATA()>
c00210f8:	eb 28                	jmp    c0021122 <IDE::detect()+0x24c>
c00210fa:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0021100:	55                   	push   ebp
c0021101:	56                   	push   esi
c0021102:	68 6e 8e 02 c0       	push   0xc0028e6e
c0021107:	e8 39 11 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c002110c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0021113:	e8 3e 10 ff ff       	call   c0012156 <operator new(unsigned long)>
c0021118:	89 c7                	mov    edi,eax
c002111a:	89 04 24             	mov    DWORD PTR [esp],eax
c002111d:	e8 ee 08 00 00       	call   c0021a10 <ATAPI::ATAPI()>
c0021122:	5a                   	pop    edx
c0021123:	59                   	pop    ecx
c0021124:	57                   	push   edi
c0021125:	53                   	push   ebx
c0021126:	e8 f5 24 ff ff       	call   c0013620 <Device::addChild(Device*)>
c002112b:	8b 07                	mov    eax,DWORD PTR [edi]
c002112d:	53                   	push   ebx
c002112e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021132:	6a 00                	push   0x0
c0021134:	57                   	push   edi
c0021135:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021138:	83 c4 20             	add    esp,0x20
c002113b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002113f:	4d                   	dec    ebp
c0021140:	74 0a                	je     c002114c <IDE::detect()+0x276>
c0021142:	bd 01 00 00 00       	mov    ebp,0x1
c0021147:	e9 bb fd ff ff       	jmp    c0020f07 <IDE::detect()+0x31>
c002114c:	4e                   	dec    esi
c002114d:	74 63                	je     c00211b2 <IDE::detect()+0x2dc>
c002114f:	be 01 00 00 00       	mov    esi,0x1
c0021154:	e9 ac fd ff ff       	jmp    c0020f05 <IDE::detect()+0x2f>
c0021159:	50                   	push   eax
c002115a:	6a 04                	push   0x4
c002115c:	56                   	push   esi
c002115d:	53                   	push   ebx
c002115e:	e8 05 f7 ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0021163:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021167:	83 c4 0c             	add    esp,0xc
c002116a:	6a 05                	push   0x5
c002116c:	56                   	push   esi
c002116d:	53                   	push   ebx
c002116e:	e8 f5 f6 ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0021173:	83 c4 10             	add    esp,0x10
c0021176:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002117a:	80 fa 14             	cmp    dl,0x14
c002117d:	75 04                	jne    c0021183 <IDE::detect()+0x2ad>
c002117f:	3c eb                	cmp    al,0xeb
c0021181:	eb 07                	jmp    c002118a <IDE::detect()+0x2b4>
c0021183:	3c 96                	cmp    al,0x96
c0021185:	75 b8                	jne    c002113f <IDE::detect()+0x269>
c0021187:	80 fa 69             	cmp    dl,0x69
c002118a:	75 b3                	jne    c002113f <IDE::detect()+0x269>
c002118c:	68 a1 00 00 00       	push   0xa1
c0021191:	6a 07                	push   0x7
c0021193:	56                   	push   esi
c0021194:	53                   	push   ebx
c0021195:	e8 0e f6 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002119a:	5f                   	pop    edi
c002119b:	58                   	pop    eax
c002119c:	6a 00                	push   0x0
c002119e:	68 40 42 0f 00       	push   0xf4240
c00211a3:	e8 b4 ac ff ff       	call   c001be5c <nanoSleep(unsigned long long)>
c00211a8:	83 c4 10             	add    esp,0x10
c00211ab:	b1 01                	mov    cl,0x1
c00211ad:	e9 4a fe ff ff       	jmp    c0020ffc <IDE::detect()+0x126>
c00211b2:	81 c4 1c 02 00 00    	add    esp,0x21c
c00211b8:	5b                   	pop    ebx
c00211b9:	5e                   	pop    esi
c00211ba:	5f                   	pop    edi
c00211bb:	5d                   	pop    ebp
c00211bc:	c3                   	ret    
c00211bd:	90                   	nop

c00211be <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00211be:	55                   	push   ebp
c00211bf:	57                   	push   edi
c00211c0:	56                   	push   esi
c00211c1:	53                   	push   ebx
c00211c2:	83 ec 1c             	sub    esp,0x1c
c00211c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00211c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00211cd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00211d1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00211d5:	88 c3                	mov    bl,al
c00211d7:	84 c0                	test   al,al
c00211d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00211dd:	0f 84 67 01 00 00    	je     c002134a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00211e3:	83 ec 0c             	sub    esp,0xc
c00211e6:	68 9f 8e 02 c0       	push   0xc0028e9f
c00211eb:	e8 55 10 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00211f0:	83 c4 10             	add    esp,0x10
c00211f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211f7:	3c 01                	cmp    al,0x1
c00211f9:	75 17                	jne    c0021212 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00211fb:	83 ec 0c             	sub    esp,0xc
c00211fe:	b3 13                	mov    bl,0x13
c0021200:	68 ab 8e 02 c0       	push   0xc0028eab
c0021205:	e8 3b 10 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c002120a:	83 c4 10             	add    esp,0x10
c002120d:	e9 25 01 00 00       	jmp    c0021337 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021212:	3c 02                	cmp    al,0x2
c0021214:	0f 85 ef 00 00 00    	jne    c0021309 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002121a:	d1 e6                	shl    esi,1
c002121c:	09 ee                	or     esi,ebp
c002121e:	52                   	push   edx
c002121f:	89 f0                	mov    eax,esi
c0021221:	6a 01                	push   0x1
c0021223:	0f b6 f0             	movzx  esi,al
c0021226:	c1 e6 06             	shl    esi,0x6
c0021229:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0021231:	50                   	push   eax
c0021232:	57                   	push   edi
c0021233:	e8 30 f6 ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0021238:	83 c4 10             	add    esp,0x10
c002123b:	89 c6                	mov    esi,eax
c002123d:	a8 01                	test   al,0x1
c002123f:	74 12                	je     c0021253 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0021241:	83 ec 0c             	sub    esp,0xc
c0021244:	b3 07                	mov    bl,0x7
c0021246:	68 c0 8e 02 c0       	push   0xc0028ec0
c002124b:	e8 f5 0f ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0021250:	83 c4 10             	add    esp,0x10
c0021253:	f7 c6 02 00 00 00    	test   esi,0x2
c0021259:	74 12                	je     c002126d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002125b:	83 ec 0c             	sub    esp,0xc
c002125e:	b3 03                	mov    bl,0x3
c0021260:	68 de 8e 02 c0       	push   0xc0028ede
c0021265:	e8 db 0f ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c002126a:	83 c4 10             	add    esp,0x10
c002126d:	f7 c6 04 00 00 00    	test   esi,0x4
c0021273:	74 12                	je     c0021287 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0021275:	83 ec 0c             	sub    esp,0xc
c0021278:	b3 14                	mov    bl,0x14
c002127a:	68 fe 8e 02 c0       	push   0xc0028efe
c002127f:	e8 c1 0f ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0021284:	83 c4 10             	add    esp,0x10
c0021287:	f7 c6 08 00 00 00    	test   esi,0x8
c002128d:	74 12                	je     c00212a1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002128f:	83 ec 0c             	sub    esp,0xc
c0021292:	b3 03                	mov    bl,0x3
c0021294:	68 de 8e 02 c0       	push   0xc0028ede
c0021299:	e8 a7 0f ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c002129e:	83 c4 10             	add    esp,0x10
c00212a1:	f7 c6 10 00 00 00    	test   esi,0x10
c00212a7:	74 12                	je     c00212bb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00212a9:	83 ec 0c             	sub    esp,0xc
c00212ac:	b3 15                	mov    bl,0x15
c00212ae:	68 16 8f 02 c0       	push   0xc0028f16
c00212b3:	e8 8d 0f ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00212b8:	83 c4 10             	add    esp,0x10
c00212bb:	f7 c6 20 00 00 00    	test   esi,0x20
c00212c1:	74 12                	je     c00212d5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00212c3:	83 ec 0c             	sub    esp,0xc
c00212c6:	b3 03                	mov    bl,0x3
c00212c8:	68 de 8e 02 c0       	push   0xc0028ede
c00212cd:	e8 73 0f ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00212d2:	83 c4 10             	add    esp,0x10
c00212d5:	f7 c6 40 00 00 00    	test   esi,0x40
c00212db:	74 12                	je     c00212ef <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00212dd:	83 ec 0c             	sub    esp,0xc
c00212e0:	b3 16                	mov    bl,0x16
c00212e2:	68 30 8f 02 c0       	push   0xc0028f30
c00212e7:	e8 59 0f ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00212ec:	83 c4 10             	add    esp,0x10
c00212ef:	89 f0                	mov    eax,esi
c00212f1:	84 c0                	test   al,al
c00212f3:	79 42                	jns    c0021337 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00212f5:	83 ec 0c             	sub    esp,0xc
c00212f8:	b3 0d                	mov    bl,0xd
c00212fa:	68 51 8f 02 c0       	push   0xc0028f51
c00212ff:	e8 41 0f ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0021304:	83 c4 10             	add    esp,0x10
c0021307:	eb 2e                	jmp    c0021337 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021309:	3c 03                	cmp    al,0x3
c002130b:	75 14                	jne    c0021321 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002130d:	83 ec 0c             	sub    esp,0xc
c0021310:	b3 17                	mov    bl,0x17
c0021312:	68 65 8f 02 c0       	push   0xc0028f65
c0021317:	e8 29 0f ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c002131c:	83 c4 10             	add    esp,0x10
c002131f:	eb 16                	jmp    c0021337 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021321:	3c 04                	cmp    al,0x4
c0021323:	75 12                	jne    c0021337 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021325:	83 ec 0c             	sub    esp,0xc
c0021328:	b3 08                	mov    bl,0x8
c002132a:	68 7b 8f 02 c0       	push   0xc0028f7b
c002132f:	e8 11 0f ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0021334:	83 c4 10             	add    esp,0x10
c0021337:	50                   	push   eax
c0021338:	50                   	push   eax
c0021339:	0f b6 c3             	movzx  eax,bl
c002133c:	50                   	push   eax
c002133d:	68 93 8f 02 c0       	push   0xc0028f93
c0021342:	e8 fe 0e ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0021347:	83 c4 10             	add    esp,0x10
c002134a:	83 c4 1c             	add    esp,0x1c
c002134d:	88 d8                	mov    al,bl
c002134f:	5b                   	pop    ebx
c0021350:	5e                   	pop    esi
c0021351:	5f                   	pop    edi
c0021352:	5d                   	pop    ebp
c0021353:	c3                   	ret    

c0021354 <IDE::polling(unsigned char, unsigned int)>:
c0021354:	57                   	push   edi
c0021355:	56                   	push   esi
c0021356:	53                   	push   ebx
c0021357:	bb 04 00 00 00       	mov    ebx,0x4
c002135c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0021360:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021365:	52                   	push   edx
c0021366:	6a 0c                	push   0xc
c0021368:	56                   	push   esi
c0021369:	57                   	push   edi
c002136a:	e8 f9 f4 ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c002136f:	83 c4 10             	add    esp,0x10
c0021372:	4b                   	dec    ebx
c0021373:	75 f0                	jne    c0021365 <IDE::polling(unsigned char, unsigned int)+0x11>
c0021375:	bb a0 86 01 00       	mov    ebx,0x186a0
c002137a:	50                   	push   eax
c002137b:	6a 0c                	push   0xc
c002137d:	56                   	push   esi
c002137e:	57                   	push   edi
c002137f:	e8 e4 f4 ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0021384:	83 c4 10             	add    esp,0x10
c0021387:	a8 01                	test   al,0x1
c0021389:	74 12                	je     c002139d <IDE::polling(unsigned char, unsigned int)+0x49>
c002138b:	83 ec 0c             	sub    esp,0xc
c002138e:	68 ad 8f 02 c0       	push   0xc0028fad
c0021393:	e8 ad 0e ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0021398:	83 c4 10             	add    esp,0x10
c002139b:	eb 17                	jmp    c00213b4 <IDE::polling(unsigned char, unsigned int)+0x60>
c002139d:	a8 20                	test   al,0x20
c002139f:	75 0f                	jne    c00213b0 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00213a1:	4b                   	dec    ebx
c00213a2:	74 10                	je     c00213b4 <IDE::polling(unsigned char, unsigned int)+0x60>
c00213a4:	84 c0                	test   al,al
c00213a6:	78 d2                	js     c002137a <IDE::polling(unsigned char, unsigned int)+0x26>
c00213a8:	a8 08                	test   al,0x8
c00213aa:	74 ce                	je     c002137a <IDE::polling(unsigned char, unsigned int)+0x26>
c00213ac:	31 c0                	xor    eax,eax
c00213ae:	eb 06                	jmp    c00213b6 <IDE::polling(unsigned char, unsigned int)+0x62>
c00213b0:	b0 01                	mov    al,0x1
c00213b2:	eb 02                	jmp    c00213b6 <IDE::polling(unsigned char, unsigned int)+0x62>
c00213b4:	b0 02                	mov    al,0x2
c00213b6:	5b                   	pop    ebx
c00213b7:	5e                   	pop    esi
c00213b8:	5f                   	pop    edi
c00213b9:	c3                   	ret    

c00213ba <ATA::close(int, int, void*)>:
c00213ba:	83 ec 0c             	sub    esp,0xc
c00213bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213c1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00213c7:	85 c0                	test   eax,eax
c00213c9:	74 0c                	je     c00213d7 <ATA::close(int, int, void*)+0x1d>
c00213cb:	83 ec 0c             	sub    esp,0xc
c00213ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00213d0:	50                   	push   eax
c00213d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00213d4:	83 c4 10             	add    esp,0x10
c00213d7:	31 c0                	xor    eax,eax
c00213d9:	83 c4 0c             	add    esp,0xc
c00213dc:	c3                   	ret    
c00213dd:	90                   	nop

c00213de <ATA::powerSaving(PowerSavingLevel)>:
c00213de:	c3                   	ret    
c00213df:	90                   	nop

c00213e0 <ATA::ATA()>:
c00213e0:	83 ec 0c             	sub    esp,0xc
c00213e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e7:	83 ec 04             	sub    esp,0x4
c00213ea:	68 00 02 00 00       	push   0x200
c00213ef:	68 f0 8f 02 c0       	push   0xc0028ff0
c00213f4:	50                   	push   eax
c00213f5:	e8 2c 26 ff ff       	call   c0013a26 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00213fa:	83 c4 10             	add    esp,0x10
c00213fd:	ba 1c 90 02 c0       	mov    edx,0xc002901c
c0021402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021406:	89 10                	mov    DWORD PTR [eax],edx
c0021408:	90                   	nop
c0021409:	83 c4 0c             	add    esp,0xc
c002140c:	c3                   	ret    
c002140d:	90                   	nop

c002140e <ATA::flush(bool)>:
c002140e:	53                   	push   ebx
c002140f:	83 ec 08             	sub    esp,0x8
c0021412:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0021417:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002141b:	19 c0                	sbb    eax,eax
c002141d:	83 e0 fd             	and    eax,0xfffffffd
c0021420:	05 ea 00 00 00       	add    eax,0xea
c0021425:	50                   	push   eax
c0021426:	6a 07                	push   0x7
c0021428:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002142f:	50                   	push   eax
c0021430:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021436:	e8 6d f3 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002143b:	83 c4 0c             	add    esp,0xc
c002143e:	6a 00                	push   0x0
c0021440:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021447:	50                   	push   eax
c0021448:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002144e:	e8 01 ff ff ff       	call   c0021354 <IDE::polling(unsigned char, unsigned int)>
c0021453:	83 c4 18             	add    esp,0x18
c0021456:	5b                   	pop    ebx
c0021457:	c3                   	ret    

c0021458 <ATA::readyForCommand()>:
c0021458:	56                   	push   esi
c0021459:	53                   	push   ebx
c002145a:	31 db                	xor    ebx,ebx
c002145c:	50                   	push   eax
c002145d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021461:	50                   	push   eax
c0021462:	6a 0c                	push   0xc
c0021464:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002146b:	50                   	push   eax
c002146c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021472:	e8 f1 f3 ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0021477:	83 c4 10             	add    esp,0x10
c002147a:	a8 88                	test   al,0x88
c002147c:	74 23                	je     c00214a1 <ATA::readyForCommand()+0x49>
c002147e:	43                   	inc    ebx
c002147f:	83 fb 63             	cmp    ebx,0x63
c0021482:	7e dd                	jle    c0021461 <ATA::readyForCommand()+0x9>
c0021484:	51                   	push   ecx
c0021485:	51                   	push   ecx
c0021486:	6a 00                	push   0x0
c0021488:	68 40 42 0f 00       	push   0xf4240
c002148d:	e8 ca a9 ff ff       	call   c001be5c <nanoSleep(unsigned long long)>
c0021492:	83 c4 10             	add    esp,0x10
c0021495:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002149b:	75 c4                	jne    c0021461 <ATA::readyForCommand()+0x9>
c002149d:	31 c0                	xor    eax,eax
c002149f:	eb 02                	jmp    c00214a3 <ATA::readyForCommand()+0x4b>
c00214a1:	b0 01                	mov    al,0x1
c00214a3:	5a                   	pop    edx
c00214a4:	5b                   	pop    ebx
c00214a5:	5e                   	pop    esi
c00214a6:	c3                   	ret    
c00214a7:	90                   	nop

c00214a8 <ATA::access(unsigned long long, int, void*, bool)>:
c00214a8:	55                   	push   ebp
c00214a9:	57                   	push   edi
c00214aa:	56                   	push   esi
c00214ab:	53                   	push   ebx
c00214ac:	83 ec 2c             	sub    esp,0x2c
c00214af:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00214b3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00214b7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00214bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00214bf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00214c3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00214c7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00214cb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00214d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00214d5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00214db:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00214df:	c1 e0 06             	shl    eax,0x6
c00214e2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00214ea:	74 5d                	je     c0021549 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00214ec:	89 fa                	mov    edx,edi
c00214ee:	89 f0                	mov    eax,esi
c00214f0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00214f4:	c1 ea 1c             	shr    edx,0x1c
c00214f7:	89 d1                	mov    ecx,edx
c00214f9:	09 c1                	or     ecx,eax
c00214fb:	74 25                	je     c0021522 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00214fd:	31 ed                	xor    ebp,ebp
c00214ff:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0021506:	89 fa                	mov    edx,edi
c0021508:	89 f0                	mov    eax,esi
c002150a:	0f ad d0             	shrd   eax,edx,cl
c002150d:	d3 ea                	shr    edx,cl
c002150f:	f6 c1 20             	test   cl,0x20
c0021512:	74 02                	je     c0021516 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0021514:	89 d0                	mov    eax,edx
c0021516:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002151a:	45                   	inc    ebp
c002151b:	83 fd 06             	cmp    ebp,0x6
c002151e:	75 df                	jne    c00214ff <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0021520:	eb 76                	jmp    c0021598 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0021522:	89 f0                	mov    eax,esi
c0021524:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0021529:	89 fa                	mov    edx,edi
c002152b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021532:	0f ac d0 10          	shrd   eax,edx,0x10
c0021536:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002153b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002153f:	c1 ee 18             	shr    esi,0x18
c0021542:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0021547:	eb 56                	jmp    c002159f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0021549:	6a 00                	push   0x0
c002154b:	6a 3f                	push   0x3f
c002154d:	57                   	push   edi
c002154e:	56                   	push   esi
c002154f:	e8 08 20 00 00       	call   c002355c <__umoddi3>
c0021554:	83 c4 10             	add    esp,0x10
c0021557:	40                   	inc    eax
c0021558:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002155c:	6a 00                	push   0x0
c002155e:	68 f0 03 00 00       	push   0x3f0
c0021563:	57                   	push   edi
c0021564:	56                   	push   esi
c0021565:	e8 f2 1e 00 00       	call   c002345c <__udivdi3>
c002156a:	83 c4 10             	add    esp,0x10
c002156d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0021572:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021579:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002157e:	6a 00                	push   0x0
c0021580:	6a 3f                	push   0x3f
c0021582:	57                   	push   edi
c0021583:	56                   	push   esi
c0021584:	e8 d3 1e 00 00       	call   c002345c <__udivdi3>
c0021589:	83 c4 10             	add    esp,0x10
c002158c:	89 c6                	mov    esi,eax
c002158e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0021593:	83 e6 0f             	and    esi,0xf
c0021596:	eb 07                	jmp    c002159f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0021598:	31 f6                	xor    esi,esi
c002159a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002159f:	bf 01 00 00 00       	mov    edi,0x1
c00215a4:	50                   	push   eax
c00215a5:	6a 00                	push   0x0
c00215a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00215ae:	50                   	push   eax
c00215af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215b3:	e8 fc f3 ff ff       	call   c00209b4 <IDE::enableIRQs(unsigned char, bool)>
c00215b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00215bb:	e8 98 fe ff ff       	call   c0021458 <ATA::readyForCommand()>
c00215c0:	83 c4 10             	add    esp,0x10
c00215c3:	84 c0                	test   al,al
c00215c5:	0f 84 50 02 00 00    	je     c002181b <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00215cb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00215d1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00215d7:	c1 e0 04             	shl    eax,0x4
c00215da:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00215e1:	09 c6                	or     esi,eax
c00215e3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00215e8:	75 05                	jne    c00215ef <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00215ea:	83 ce a0             	or     esi,0xffffffa0
c00215ed:	eb 03                	jmp    c00215f2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00215ef:	83 ce e0             	or     esi,0xffffffe0
c00215f2:	89 f0                	mov    eax,esi
c00215f4:	0f b6 f0             	movzx  esi,al
c00215f7:	56                   	push   esi
c00215f8:	6a 06                	push   0x6
c00215fa:	51                   	push   ecx
c00215fb:	52                   	push   edx
c00215fc:	e8 a7 f1 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021601:	83 c4 10             	add    esp,0x10
c0021604:	6a 00                	push   0x0
c0021606:	6a 01                	push   0x1
c0021608:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002160f:	50                   	push   eax
c0021610:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021616:	e8 8d f1 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002161b:	83 c4 10             	add    esp,0x10
c002161e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021623:	75 6e                	jne    c0021693 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0021625:	6a 00                	push   0x0
c0021627:	6a 08                	push   0x8
c0021629:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021630:	50                   	push   eax
c0021631:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021637:	e8 6c f1 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002163c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0021641:	50                   	push   eax
c0021642:	6a 09                	push   0x9
c0021644:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002164b:	50                   	push   eax
c002164c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021652:	e8 51 f1 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021657:	83 c4 20             	add    esp,0x20
c002165a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002165f:	50                   	push   eax
c0021660:	6a 0a                	push   0xa
c0021662:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021669:	50                   	push   eax
c002166a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021670:	e8 33 f1 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021675:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002167a:	50                   	push   eax
c002167b:	6a 0b                	push   0xb
c002167d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021684:	50                   	push   eax
c0021685:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002168b:	e8 18 f1 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021690:	83 c4 20             	add    esp,0x20
c0021693:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0021698:	50                   	push   eax
c0021699:	6a 02                	push   0x2
c002169b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216a2:	50                   	push   eax
c00216a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216a9:	e8 fa f0 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216ae:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00216b3:	50                   	push   eax
c00216b4:	6a 03                	push   0x3
c00216b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216bd:	50                   	push   eax
c00216be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216c4:	e8 df f0 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216c9:	83 c4 20             	add    esp,0x20
c00216cc:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00216d1:	50                   	push   eax
c00216d2:	6a 04                	push   0x4
c00216d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216db:	50                   	push   eax
c00216dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216e2:	e8 c1 f0 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00216ec:	50                   	push   eax
c00216ed:	6a 05                	push   0x5
c00216ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216f6:	50                   	push   eax
c00216f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216fd:	e8 a6 f0 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021702:	83 c4 20             	add    esp,0x20
c0021705:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002170a:	0f 94 c0             	sete   al
c002170d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021712:	74 09                	je     c002171d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0021714:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002171b:	eb 07                	jmp    c0021724 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002171d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0021724:	0f b6 c0             	movzx  eax,al
c0021727:	50                   	push   eax
c0021728:	6a 07                	push   0x7
c002172a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021731:	50                   	push   eax
c0021732:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021738:	e8 6b f0 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002173d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021741:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0021745:	83 c4 10             	add    esp,0x10
c0021748:	85 f6                	test   esi,esi
c002174a:	0f 84 ac 00 00 00    	je     c00217fc <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0021750:	50                   	push   eax
c0021751:	6a 01                	push   0x1
c0021753:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002175a:	50                   	push   eax
c002175b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021761:	e8 ee fb ff ff       	call   c0021354 <IDE::polling(unsigned char, unsigned int)>
c0021766:	83 c4 10             	add    esp,0x10
c0021769:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002176f:	84 c0                	test   al,al
c0021771:	74 20                	je     c0021793 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0021773:	0f b6 f8             	movzx  edi,al
c0021776:	0f b6 d2             	movzx  edx,dl
c0021779:	57                   	push   edi
c002177a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0021781:	50                   	push   eax
c0021782:	52                   	push   edx
c0021783:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021789:	e8 30 fa ff ff       	call   c00211be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002178e:	e9 85 00 00 00       	jmp    c0021818 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c0021793:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0021798:	74 41                	je     c00217db <ATA::access(unsigned long long, int, void*, bool)+0x333>
c002179a:	31 c9                	xor    ecx,ecx
c002179c:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00217a0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00217a4:	50                   	push   eax
c00217a5:	50                   	push   eax
c00217a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217ad:	50                   	push   eax
c00217ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217b4:	e8 dd ef ff ff       	call   c0020796 <IDE::getBase(unsigned char)>
c00217b9:	89 c2                	mov    edx,eax
c00217bb:	89 e8                	mov    eax,ebp
c00217bd:	66 ef                	out    dx,ax
c00217bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00217c3:	83 c4 10             	add    esp,0x10
c00217c6:	41                   	inc    ecx
c00217c7:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00217cd:	75 cd                	jne    c002179c <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00217cf:	4e                   	dec    esi
c00217d0:	81 c7 00 02 00 00    	add    edi,0x200
c00217d6:	e9 6d ff ff ff       	jmp    c0021748 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c00217db:	0f b6 d2             	movzx  edx,dl
c00217de:	51                   	push   ecx
c00217df:	51                   	push   ecx
c00217e0:	52                   	push   edx
c00217e1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217e7:	e8 aa ef ff ff       	call   c0020796 <IDE::getBase(unsigned char)>
c00217ec:	b9 00 01 00 00       	mov    ecx,0x100
c00217f1:	89 c2                	mov    edx,eax
c00217f3:	fc                   	cld    
c00217f4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00217f7:	83 c4 10             	add    esp,0x10
c00217fa:	eb d3                	jmp    c00217cf <ATA::access(unsigned long long, int, void*, bool)+0x327>
c00217fc:	31 ff                	xor    edi,edi
c00217fe:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021803:	74 16                	je     c002181b <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0021805:	50                   	push   eax
c0021806:	50                   	push   eax
c0021807:	31 c0                	xor    eax,eax
c0021809:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002180e:	0f 94 c0             	sete   al
c0021811:	50                   	push   eax
c0021812:	53                   	push   ebx
c0021813:	e8 f6 fb ff ff       	call   c002140e <ATA::flush(bool)>
c0021818:	83 c4 10             	add    esp,0x10
c002181b:	83 c4 2c             	add    esp,0x2c
c002181e:	89 f8                	mov    eax,edi
c0021820:	5b                   	pop    ebx
c0021821:	5e                   	pop    esi
c0021822:	5f                   	pop    edi
c0021823:	5d                   	pop    ebp
c0021824:	c3                   	ret    
c0021825:	90                   	nop

c0021826 <ATA::read(unsigned long long, int, void*)>:
c0021826:	57                   	push   edi
c0021827:	b8 04 00 00 00       	mov    eax,0x4
c002182c:	56                   	push   esi
c002182d:	53                   	push   ebx
c002182e:	83 ec 10             	sub    esp,0x10
c0021831:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021835:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021839:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002183c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021840:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021844:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002184a:	77 3b                	ja     c0021887 <ATA::read(unsigned long long, int, void*)+0x61>
c002184c:	b8 06 00 00 00       	mov    eax,0x6
c0021851:	85 d2                	test   edx,edx
c0021853:	74 32                	je     c0021887 <ATA::read(unsigned long long, int, void*)+0x61>
c0021855:	50                   	push   eax
c0021856:	50                   	push   eax
c0021857:	6a 00                	push   0x0
c0021859:	52                   	push   edx
c002185a:	53                   	push   ebx
c002185b:	57                   	push   edi
c002185c:	56                   	push   esi
c002185d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021861:	e8 42 fc ff ff       	call   c00214a8 <ATA::access(unsigned long long, int, void*, bool)>
c0021866:	83 c4 20             	add    esp,0x20
c0021869:	85 c0                	test   eax,eax
c002186b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002186f:	75 11                	jne    c0021882 <ATA::read(unsigned long long, int, void*)+0x5c>
c0021871:	01 1d 28 c7 02 c0    	add    DWORD PTR ds:0xc002c728,ebx
c0021877:	e8 7e e8 fe ff       	call   c00100fa <VgaText::updateDiskUsage()>
c002187c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021880:	eb 05                	jmp    c0021887 <ATA::read(unsigned long long, int, void*)+0x61>
c0021882:	b8 01 00 00 00       	mov    eax,0x1
c0021887:	83 c4 10             	add    esp,0x10
c002188a:	5b                   	pop    ebx
c002188b:	5e                   	pop    esi
c002188c:	5f                   	pop    edi
c002188d:	c3                   	ret    

c002188e <ATA::write(unsigned long long, int, void*)>:
c002188e:	57                   	push   edi
c002188f:	b8 04 00 00 00       	mov    eax,0x4
c0021894:	56                   	push   esi
c0021895:	53                   	push   ebx
c0021896:	83 ec 10             	sub    esp,0x10
c0021899:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002189d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00218a1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00218a4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00218a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00218ac:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00218b2:	77 3b                	ja     c00218ef <ATA::write(unsigned long long, int, void*)+0x61>
c00218b4:	b8 06 00 00 00       	mov    eax,0x6
c00218b9:	85 d2                	test   edx,edx
c00218bb:	74 32                	je     c00218ef <ATA::write(unsigned long long, int, void*)+0x61>
c00218bd:	50                   	push   eax
c00218be:	50                   	push   eax
c00218bf:	6a 01                	push   0x1
c00218c1:	52                   	push   edx
c00218c2:	53                   	push   ebx
c00218c3:	57                   	push   edi
c00218c4:	56                   	push   esi
c00218c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00218c9:	e8 da fb ff ff       	call   c00214a8 <ATA::access(unsigned long long, int, void*, bool)>
c00218ce:	83 c4 20             	add    esp,0x20
c00218d1:	85 c0                	test   eax,eax
c00218d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00218d7:	75 11                	jne    c00218ea <ATA::write(unsigned long long, int, void*)+0x5c>
c00218d9:	01 1d 24 c7 02 c0    	add    DWORD PTR ds:0xc002c724,ebx
c00218df:	e8 16 e8 fe ff       	call   c00100fa <VgaText::updateDiskUsage()>
c00218e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218e8:	eb 05                	jmp    c00218ef <ATA::write(unsigned long long, int, void*)+0x61>
c00218ea:	b8 01 00 00 00       	mov    eax,0x1
c00218ef:	83 c4 10             	add    esp,0x10
c00218f2:	5b                   	pop    ebx
c00218f3:	5e                   	pop    esi
c00218f4:	5f                   	pop    edi
c00218f5:	c3                   	ret    

c00218f6 <ATA::detectCHS()>:
c00218f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00218fa:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0021900:	c1 e0 06             	shl    eax,0x6
c0021903:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0021909:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0021913:	c7 44 24 04 ff 8f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028fff
c002191b:	e9 a3 70 ff ff       	jmp    c00189c3 <Krnl::panic(char const*)>

c0021920 <ATA::open(int, int, void*)>:
c0021920:	53                   	push   ebx
c0021921:	83 ec 08             	sub    esp,0x8
c0021924:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021928:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002192c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021930:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021936:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002193c:	c1 e0 06             	shl    eax,0x6
c002193f:	01 d0                	add    eax,edx
c0021941:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0021948:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002194e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0021955:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002195f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0021965:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002196c:	75 0c                	jne    c002197a <ATA::open(int, int, void*)+0x5a>
c002196e:	83 ec 0c             	sub    esp,0xc
c0021971:	53                   	push   ebx
c0021972:	e8 7f ff ff ff       	call   c00218f6 <ATA::detectCHS()>
c0021977:	83 c4 10             	add    esp,0x10
c002197a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021980:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0021986:	c1 e0 06             	shl    eax,0x6
c0021989:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0021990:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002199a:	d1 e8                	shr    eax,1
c002199c:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00219a2:	6a 04                	push   0x4
c00219a4:	6a 0c                	push   0xc
c00219a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00219ad:	50                   	push   eax
c00219ae:	52                   	push   edx
c00219af:	e8 f4 ed ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219b4:	90                   	nop
c00219b5:	90                   	nop
c00219b6:	6a 00                	push   0x0
c00219b8:	6a 0c                	push   0xc
c00219ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00219c1:	50                   	push   eax
c00219c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00219c8:	e8 db ed ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219cd:	83 c4 14             	add    esp,0x14
c00219d0:	53                   	push   ebx
c00219d1:	e8 b8 20 ff ff       	call   c0013a8e <PhysicalDisk::startCache()>
c00219d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00219d9:	e8 50 40 ff ff       	call   c0015a2e <createPartitionsForDisk(PhysicalDisk*)>
c00219de:	31 c0                	xor    eax,eax
c00219e0:	83 c4 18             	add    esp,0x18
c00219e3:	5b                   	pop    ebx
c00219e4:	c3                   	ret    
c00219e5:	90                   	nop

c00219e6 <ATAPI::write(unsigned long long, int, void*)>:
c00219e6:	b8 03 00 00 00       	mov    eax,0x3
c00219eb:	c3                   	ret    

c00219ec <ATAPI::close(int, int, void*)>:
c00219ec:	83 ec 0c             	sub    esp,0xc
c00219ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00219f9:	85 c0                	test   eax,eax
c00219fb:	74 0c                	je     c0021a09 <ATAPI::close(int, int, void*)+0x1d>
c00219fd:	83 ec 0c             	sub    esp,0xc
c0021a00:	8b 10                	mov    edx,DWORD PTR [eax]
c0021a02:	50                   	push   eax
c0021a03:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021a06:	83 c4 10             	add    esp,0x10
c0021a09:	31 c0                	xor    eax,eax
c0021a0b:	83 c4 0c             	add    esp,0xc
c0021a0e:	c3                   	ret    
c0021a0f:	90                   	nop

c0021a10 <ATAPI::ATAPI()>:
c0021a10:	83 ec 0c             	sub    esp,0xc
c0021a13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a17:	83 ec 04             	sub    esp,0x4
c0021a1a:	68 00 08 00 00       	push   0x800
c0021a1f:	68 48 90 02 c0       	push   0xc0029048
c0021a24:	50                   	push   eax
c0021a25:	e8 fc 1f ff ff       	call   c0013a26 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021a2a:	83 c4 10             	add    esp,0x10
c0021a2d:	ba 88 90 02 c0       	mov    edx,0xc0029088
c0021a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a36:	89 10                	mov    DWORD PTR [eax],edx
c0021a38:	90                   	nop
c0021a39:	83 c4 0c             	add    esp,0xc
c0021a3c:	c3                   	ret    
c0021a3d:	90                   	nop

c0021a3e <ATAPI::readyForCommand()>:
c0021a3e:	56                   	push   esi
c0021a3f:	53                   	push   ebx
c0021a40:	31 db                	xor    ebx,ebx
c0021a42:	50                   	push   eax
c0021a43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021a47:	50                   	push   eax
c0021a48:	6a 0c                	push   0xc
c0021a4a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021a51:	50                   	push   eax
c0021a52:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021a58:	e8 0b ee ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0021a5d:	83 c4 10             	add    esp,0x10
c0021a60:	a8 88                	test   al,0x88
c0021a62:	74 23                	je     c0021a87 <ATAPI::readyForCommand()+0x49>
c0021a64:	43                   	inc    ebx
c0021a65:	83 fb 63             	cmp    ebx,0x63
c0021a68:	7e dd                	jle    c0021a47 <ATAPI::readyForCommand()+0x9>
c0021a6a:	51                   	push   ecx
c0021a6b:	51                   	push   ecx
c0021a6c:	6a 00                	push   0x0
c0021a6e:	68 40 42 0f 00       	push   0xf4240
c0021a73:	e8 e4 a3 ff ff       	call   c001be5c <nanoSleep(unsigned long long)>
c0021a78:	83 c4 10             	add    esp,0x10
c0021a7b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0021a81:	75 c4                	jne    c0021a47 <ATAPI::readyForCommand()+0x9>
c0021a83:	31 c0                	xor    eax,eax
c0021a85:	eb 02                	jmp    c0021a89 <ATAPI::readyForCommand()+0x4b>
c0021a87:	b0 01                	mov    al,0x1
c0021a89:	5a                   	pop    edx
c0021a8a:	5b                   	pop    ebx
c0021a8b:	5e                   	pop    esi
c0021a8c:	c3                   	ret    
c0021a8d:	90                   	nop

c0021a8e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0021a8e:	55                   	push   ebp
c0021a8f:	57                   	push   edi
c0021a90:	56                   	push   esi
c0021a91:	53                   	push   ebx
c0021a92:	83 ec 20             	sub    esp,0x20
c0021a95:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021a99:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0021a9d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021aa1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021aa5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021aa9:	6a 01                	push   0x1
c0021aab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021ab2:	50                   	push   eax
c0021ab3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021ab9:	e8 f6 ee ff ff       	call   c00209b4 <IDE::enableIRQs(unsigned char, bool)>
c0021abe:	5e                   	pop    esi
c0021abf:	58                   	pop    eax
c0021ac0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021ac7:	50                   	push   eax
c0021ac8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021ace:	e8 af ec ff ff       	call   c0020782 <IDE::prepareInterrupt(unsigned char)>
c0021ad3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021ad6:	e8 63 ff ff ff       	call   c0021a3e <ATAPI::readyForCommand()>
c0021adb:	83 c4 10             	add    esp,0x10
c0021ade:	84 c0                	test   al,al
c0021ae0:	75 0a                	jne    c0021aec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0021ae2:	bb 01 00 00 00       	mov    ebx,0x1
c0021ae7:	e9 57 02 00 00       	jmp    c0021d43 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021aec:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0021af2:	c1 e0 04             	shl    eax,0x4
c0021af5:	0f b6 c0             	movzx  eax,al
c0021af8:	50                   	push   eax
c0021af9:	6a 06                	push   0x6
c0021afb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b02:	50                   	push   eax
c0021b03:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b09:	e8 9a ec ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b0e:	6a 00                	push   0x0
c0021b10:	6a 01                	push   0x1
c0021b12:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b19:	50                   	push   eax
c0021b1a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b20:	e8 83 ec ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b25:	83 c4 20             	add    esp,0x20
c0021b28:	0f b6 c3             	movzx  eax,bl
c0021b2b:	0f b6 df             	movzx  ebx,bh
c0021b2e:	50                   	push   eax
c0021b2f:	6a 04                	push   0x4
c0021b31:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b38:	50                   	push   eax
c0021b39:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b3f:	e8 64 ec ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b44:	53                   	push   ebx
c0021b45:	6a 05                	push   0x5
c0021b47:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b4e:	50                   	push   eax
c0021b4f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b55:	e8 4e ec ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b5a:	83 c4 20             	add    esp,0x20
c0021b5d:	68 a0 00 00 00       	push   0xa0
c0021b62:	6a 07                	push   0x7
c0021b64:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b6b:	50                   	push   eax
c0021b6c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b72:	e8 31 ec ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b77:	83 c4 0c             	add    esp,0xc
c0021b7a:	6a 01                	push   0x1
c0021b7c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b83:	50                   	push   eax
c0021b84:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b8a:	e8 c5 f7 ff ff       	call   c0021354 <IDE::polling(unsigned char, unsigned int)>
c0021b8f:	83 c4 10             	add    esp,0x10
c0021b92:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0021b98:	84 c0                	test   al,al
c0021b9a:	74 23                	je     c0021bbf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0021b9c:	0f b6 d8             	movzx  ebx,al
c0021b9f:	0f b6 d2             	movzx  edx,dl
c0021ba2:	53                   	push   ebx
c0021ba3:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0021baa:	50                   	push   eax
c0021bab:	52                   	push   edx
c0021bac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bb2:	e8 07 f6 ff ff       	call   c00211be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0021bb7:	83 c4 10             	add    esp,0x10
c0021bba:	e9 84 01 00 00       	jmp    c0021d43 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021bbf:	0f b6 d2             	movzx  edx,dl
c0021bc2:	53                   	push   ebx
c0021bc3:	53                   	push   ebx
c0021bc4:	52                   	push   edx
c0021bc5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bcb:	e8 c6 eb ff ff       	call   c0020796 <IDE::getBase(unsigned char)>
c0021bd0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021bd4:	b9 06 00 00 00       	mov    ecx,0x6
c0021bd9:	89 c2                	mov    edx,eax
c0021bdb:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0021bde:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0021be2:	83 c4 10             	add    esp,0x10
c0021be5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021beb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021bf2:	85 db                	test   ebx,ebx
c0021bf4:	0f 84 ec 00 00 00    	je     c0021ce6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0021bfa:	51                   	push   ecx
c0021bfb:	51                   	push   ecx
c0021bfc:	52                   	push   edx
c0021bfd:	50                   	push   eax
c0021bfe:	e8 13 ed ff ff       	call   c0020916 <IDE::waitInterrupt(unsigned char)>
c0021c03:	83 c4 10             	add    esp,0x10
c0021c06:	84 c0                	test   al,al
c0021c08:	0f 84 d4 fe ff ff    	je     c0021ae2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021c0e:	56                   	push   esi
c0021c0f:	56                   	push   esi
c0021c10:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c17:	50                   	push   eax
c0021c18:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c1e:	e8 5f eb ff ff       	call   c0020782 <IDE::prepareInterrupt(unsigned char)>
c0021c23:	83 c4 0c             	add    esp,0xc
c0021c26:	6a 04                	push   0x4
c0021c28:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c2f:	50                   	push   eax
c0021c30:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c36:	e8 2d ec ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0021c3b:	83 c4 0c             	add    esp,0xc
c0021c3e:	89 c6                	mov    esi,eax
c0021c40:	6a 05                	push   0x5
c0021c42:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c49:	50                   	push   eax
c0021c4a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c50:	e8 13 ec ff ff       	call   c0020868 <IDE::read(unsigned char, unsigned char)>
c0021c55:	89 f1                	mov    ecx,esi
c0021c57:	0f b6 c0             	movzx  eax,al
c0021c5a:	0f b6 f1             	movzx  esi,cl
c0021c5d:	c1 e0 08             	shl    eax,0x8
c0021c60:	09 c6                	or     esi,eax
c0021c62:	d1 fe                	sar    esi,1
c0021c64:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0021c68:	83 c4 10             	add    esp,0x10
c0021c6b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0021c70:	74 41                	je     c0021cb3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0021c72:	31 c9                	xor    ecx,ecx
c0021c74:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021c7a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021c81:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0021c85:	75 0a                	jne    c0021c91 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0021c87:	01 c9                	add    ecx,ecx
c0021c89:	01 cd                	add    ebp,ecx
c0021c8b:	4b                   	dec    ebx
c0021c8c:	e9 54 ff ff ff       	jmp    c0021be5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0021c91:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0021c96:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021c9a:	51                   	push   ecx
c0021c9b:	51                   	push   ecx
c0021c9c:	52                   	push   edx
c0021c9d:	50                   	push   eax
c0021c9e:	e8 f3 ea ff ff       	call   c0020796 <IDE::getBase(unsigned char)>
c0021ca3:	89 c2                	mov    edx,eax
c0021ca5:	89 f0                	mov    eax,esi
c0021ca7:	66 ef                	out    dx,ax
c0021ca9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021cad:	83 c4 10             	add    esp,0x10
c0021cb0:	41                   	inc    ecx
c0021cb1:	eb c1                	jmp    c0021c74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0021cb3:	31 f6                	xor    esi,esi
c0021cb5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021cbb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021cc2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0021cc6:	75 06                	jne    c0021cce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0021cc8:	01 f6                	add    esi,esi
c0021cca:	01 f5                	add    ebp,esi
c0021ccc:	eb bd                	jmp    c0021c8b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0021cce:	51                   	push   ecx
c0021ccf:	51                   	push   ecx
c0021cd0:	52                   	push   edx
c0021cd1:	50                   	push   eax
c0021cd2:	e8 bf ea ff ff       	call   c0020796 <IDE::getBase(unsigned char)>
c0021cd7:	89 c2                	mov    edx,eax
c0021cd9:	66 ed                	in     ax,dx
c0021cdb:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0021ce0:	83 c4 10             	add    esp,0x10
c0021ce3:	46                   	inc    esi
c0021ce4:	eb cf                	jmp    c0021cb5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0021ce6:	51                   	push   ecx
c0021ce7:	51                   	push   ecx
c0021ce8:	52                   	push   edx
c0021ce9:	50                   	push   eax
c0021cea:	e8 27 ec ff ff       	call   c0020916 <IDE::waitInterrupt(unsigned char)>
c0021cef:	83 c4 10             	add    esp,0x10
c0021cf2:	84 c0                	test   al,al
c0021cf4:	0f 84 e8 fd ff ff    	je     c0021ae2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021cfa:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021cff:	52                   	push   edx
c0021d00:	52                   	push   edx
c0021d01:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d08:	50                   	push   eax
c0021d09:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d0f:	e8 6e ea ff ff       	call   c0020782 <IDE::prepareInterrupt(unsigned char)>
c0021d14:	83 c4 10             	add    esp,0x10
c0021d17:	50                   	push   eax
c0021d18:	50                   	push   eax
c0021d19:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d20:	50                   	push   eax
c0021d21:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d27:	e8 6a ea ff ff       	call   c0020796 <IDE::getBase(unsigned char)>
c0021d2c:	8d 50 07             	lea    edx,[eax+0x7]
c0021d2f:	ec                   	in     al,dx
c0021d30:	83 c4 10             	add    esp,0x10
c0021d33:	a8 88                	test   al,0x88
c0021d35:	74 0a                	je     c0021d41 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0021d37:	4b                   	dec    ebx
c0021d38:	75 dd                	jne    c0021d17 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0021d3a:	bb 02 00 00 00       	mov    ebx,0x2
c0021d3f:	eb 02                	jmp    c0021d43 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021d41:	31 db                	xor    ebx,ebx
c0021d43:	83 c4 1c             	add    esp,0x1c
c0021d46:	89 d8                	mov    eax,ebx
c0021d48:	5b                   	pop    ebx
c0021d49:	5e                   	pop    esi
c0021d4a:	5f                   	pop    edi
c0021d4b:	5d                   	pop    ebp
c0021d4c:	c3                   	ret    
c0021d4d:	90                   	nop

c0021d4e <ATAPI::diskRemoved()>:
c0021d4e:	83 ec 18             	sub    esp,0x18
c0021d51:	68 53 90 02 c0       	push   0xc0029053
c0021d56:	e8 ea 04 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0021d5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d5f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0021d66:	83 c4 1c             	add    esp,0x1c
c0021d69:	c3                   	ret    

c0021d6a <ATAPI::eject()>:
c0021d6a:	57                   	push   edi
c0021d6b:	b9 03 00 00 00       	mov    ecx,0x3
c0021d70:	53                   	push   ebx
c0021d71:	83 ec 14             	sub    esp,0x14
c0021d74:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021d78:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021d7c:	fc                   	cld    
c0021d7d:	31 c0                	xor    eax,eax
c0021d7f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021d81:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021d86:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021d8b:	50                   	push   eax
c0021d8c:	50                   	push   eax
c0021d8d:	6a 00                	push   0x0
c0021d8f:	6a 00                	push   0x0
c0021d91:	6a 00                	push   0x0
c0021d93:	6a 02                	push   0x2
c0021d95:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d99:	50                   	push   eax
c0021d9a:	53                   	push   ebx
c0021d9b:	e8 ee fc ff ff       	call   c0021a8e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021da0:	83 c4 14             	add    esp,0x14
c0021da3:	53                   	push   ebx
c0021da4:	e8 a5 ff ff ff       	call   c0021d4e <ATAPI::diskRemoved()>
c0021da9:	83 c4 24             	add    esp,0x24
c0021dac:	5b                   	pop    ebx
c0021dad:	5f                   	pop    edi
c0021dae:	c3                   	ret    
c0021daf:	90                   	nop

c0021db0 <ATAPI::diskInserted()>:
c0021db0:	53                   	push   ebx
c0021db1:	83 ec 14             	sub    esp,0x14
c0021db4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021db8:	68 69 90 02 c0       	push   0xc0029069
c0021dbd:	e8 83 04 ff ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0021dc2:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0021dc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021dcc:	e8 bd 1c ff ff       	call   c0013a8e <PhysicalDisk::startCache()>
c0021dd1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0021dd5:	83 c4 18             	add    esp,0x18
c0021dd8:	5b                   	pop    ebx
c0021dd9:	e9 50 3c ff ff       	jmp    c0015a2e <createPartitionsForDisk(PhysicalDisk*)>

c0021dde <ATAPI::detectMedia()>:
c0021dde:	56                   	push   esi
c0021ddf:	53                   	push   ebx
c0021de0:	83 ec 28             	sub    esp,0x28
c0021de3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021de7:	6a 0c                	push   0xc
c0021de9:	6a 00                	push   0x0
c0021deb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0021def:	56                   	push   esi
c0021df0:	e8 88 e8 fd ff       	call   c000067d <memset>
c0021df5:	58                   	pop    eax
c0021df6:	5a                   	pop    edx
c0021df7:	6a 00                	push   0x0
c0021df9:	6a 00                	push   0x0
c0021dfb:	6a 00                	push   0x0
c0021dfd:	6a 00                	push   0x0
c0021dff:	56                   	push   esi
c0021e00:	53                   	push   ebx
c0021e01:	e8 88 fc ff ff       	call   c0021a8e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021e06:	83 c4 1c             	add    esp,0x1c
c0021e09:	6a 0c                	push   0xc
c0021e0b:	6a 00                	push   0x0
c0021e0d:	56                   	push   esi
c0021e0e:	e8 6a e8 fd ff       	call   c000067d <memset>
c0021e13:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021e18:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021e1d:	59                   	pop    ecx
c0021e1e:	58                   	pop    eax
c0021e1f:	6a 01                	push   0x1
c0021e21:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021e25:	50                   	push   eax
c0021e26:	6a 00                	push   0x0
c0021e28:	6a 12                	push   0x12
c0021e2a:	56                   	push   esi
c0021e2b:	53                   	push   ebx
c0021e2c:	e8 5d fc ff ff       	call   c0021a8e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021e31:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0021e35:	83 c4 20             	add    esp,0x20
c0021e38:	83 e0 7f             	and    eax,0x7f
c0021e3b:	3c 70                	cmp    al,0x70
c0021e3d:	74 15                	je     c0021e54 <ATAPI::detectMedia()+0x76>
c0021e3f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021e46:	75 0c                	jne    c0021e54 <ATAPI::detectMedia()+0x76>
c0021e48:	83 ec 0c             	sub    esp,0xc
c0021e4b:	53                   	push   ebx
c0021e4c:	e8 5f ff ff ff       	call   c0021db0 <ATAPI::diskInserted()>
c0021e51:	83 c4 10             	add    esp,0x10
c0021e54:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021e58:	83 e0 0f             	and    eax,0xf
c0021e5b:	3c 02                	cmp    al,0x2
c0021e5d:	75 1b                	jne    c0021e7a <ATAPI::detectMedia()+0x9c>
c0021e5f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021e64:	75 2d                	jne    c0021e93 <ATAPI::detectMedia()+0xb5>
c0021e66:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021e6d:	74 24                	je     c0021e93 <ATAPI::detectMedia()+0xb5>
c0021e6f:	83 ec 0c             	sub    esp,0xc
c0021e72:	53                   	push   ebx
c0021e73:	e8 d6 fe ff ff       	call   c0021d4e <ATAPI::diskRemoved()>
c0021e78:	eb 16                	jmp    c0021e90 <ATAPI::detectMedia()+0xb2>
c0021e7a:	84 c0                	test   al,al
c0021e7c:	75 15                	jne    c0021e93 <ATAPI::detectMedia()+0xb5>
c0021e7e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021e85:	75 0c                	jne    c0021e93 <ATAPI::detectMedia()+0xb5>
c0021e87:	83 ec 0c             	sub    esp,0xc
c0021e8a:	53                   	push   ebx
c0021e8b:	e8 20 ff ff ff       	call   c0021db0 <ATAPI::diskInserted()>
c0021e90:	83 c4 10             	add    esp,0x10
c0021e93:	83 c4 24             	add    esp,0x24
c0021e96:	5b                   	pop    ebx
c0021e97:	5e                   	pop    esi
c0021e98:	c3                   	ret    
c0021e99:	90                   	nop

c0021e9a <ATAPI::open(int, int, void*)>:
c0021e9a:	53                   	push   ebx
c0021e9b:	83 ec 08             	sub    esp,0x8
c0021e9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021ea2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021ea6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021eaa:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021eb0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021eb6:	c1 e0 06             	shl    eax,0x6
c0021eb9:	01 d0                	add    eax,edx
c0021ebb:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0021ec2:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0021ec8:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0021ecf:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021ed9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0021edf:	6a 04                	push   0x4
c0021ee1:	6a 0c                	push   0xc
c0021ee3:	51                   	push   ecx
c0021ee4:	52                   	push   edx
c0021ee5:	e8 be e8 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021eea:	90                   	nop
c0021eeb:	90                   	nop
c0021eec:	6a 00                	push   0x0
c0021eee:	6a 0c                	push   0xc
c0021ef0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021ef7:	50                   	push   eax
c0021ef8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021efe:	e8 a5 e8 ff ff       	call   c00207a8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f03:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0021f0a:	83 c4 14             	add    esp,0x14
c0021f0d:	53                   	push   ebx
c0021f0e:	e8 cb fe ff ff       	call   c0021dde <ATAPI::detectMedia()>
c0021f13:	31 c0                	xor    eax,eax
c0021f15:	83 c4 18             	add    esp,0x18
c0021f18:	5b                   	pop    ebx
c0021f19:	c3                   	ret    

c0021f1a <ATAPI::read(unsigned long long, int, void*)>:
c0021f1a:	55                   	push   ebp
c0021f1b:	57                   	push   edi
c0021f1c:	56                   	push   esi
c0021f1d:	53                   	push   ebx
c0021f1e:	83 ec 1c             	sub    esp,0x1c
c0021f21:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021f25:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021f29:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0021f2d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021f34:	74 41                	je     c0021f77 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0021f36:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021f3a:	b9 03 00 00 00       	mov    ecx,0x3
c0021f3f:	fc                   	cld    
c0021f40:	31 c0                	xor    eax,eax
c0021f42:	86 fb                	xchg   bl,bh
c0021f44:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021f46:	c1 c3 10             	rol    ebx,0x10
c0021f49:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0021f4e:	89 e8                	mov    eax,ebp
c0021f50:	86 fb                	xchg   bl,bh
c0021f52:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0021f56:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0021f5a:	50                   	push   eax
c0021f5b:	50                   	push   eax
c0021f5c:	55                   	push   ebp
c0021f5d:	c1 e5 0b             	shl    ebp,0xb
c0021f60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f64:	6a 00                	push   0x0
c0021f66:	55                   	push   ebp
c0021f67:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f6b:	50                   	push   eax
c0021f6c:	56                   	push   esi
c0021f6d:	e8 1c fb ff ff       	call   c0021a8e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021f72:	83 c4 20             	add    esp,0x20
c0021f75:	eb 1a                	jmp    c0021f91 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0021f77:	83 ec 0c             	sub    esp,0xc
c0021f7a:	56                   	push   esi
c0021f7b:	e8 5e fe ff ff       	call   c0021dde <ATAPI::detectMedia()>
c0021f80:	83 c4 10             	add    esp,0x10
c0021f83:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021f8a:	75 aa                	jne    c0021f36 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0021f8c:	b8 02 00 00 00       	mov    eax,0x2
c0021f91:	83 c4 1c             	add    esp,0x1c
c0021f94:	5b                   	pop    ebx
c0021f95:	5e                   	pop    esi
c0021f96:	5f                   	pop    edi
c0021f97:	5d                   	pop    ebp
c0021f98:	c3                   	ret    
c0021f99:	90                   	nop

c0021f9a <AVX::open(int, int, void*)>:
c0021f9a:	83 ec 0c             	sub    esp,0xc
c0021f9d:	e8 36 11 00 00       	call   c00230d8 <avxInit>
c0021fa2:	b8 00 00 00 00       	mov    eax,0x0
c0021fa7:	83 c4 0c             	add    esp,0xc
c0021faa:	c3                   	ret    
c0021fab:	90                   	nop

c0021fac <AVX::close(int, int, void*)>:
c0021fac:	83 ec 0c             	sub    esp,0xc
c0021faf:	e8 25 11 00 00       	call   c00230d9 <avxClose>
c0021fb4:	b8 00 00 00 00       	mov    eax,0x0
c0021fb9:	83 c4 0c             	add    esp,0xc
c0021fbc:	c3                   	ret    
c0021fbd:	90                   	nop

c0021fbe <AVX::available()>:
c0021fbe:	83 ec 0c             	sub    esp,0xc
c0021fc1:	e8 0a 11 00 00       	call   c00230d0 <avxDetect>
c0021fc6:	85 c0                	test   eax,eax
c0021fc8:	0f 95 c0             	setne  al
c0021fcb:	83 c4 0c             	add    esp,0xc
c0021fce:	c3                   	ret    
c0021fcf:	90                   	nop

c0021fd0 <AVX::save(void*)>:
c0021fd0:	83 ec 0c             	sub    esp,0xc
c0021fd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021fd7:	83 ec 0c             	sub    esp,0xc
c0021fda:	50                   	push   eax
c0021fdb:	e8 f6 10 00 00       	call   c00230d6 <avxSave>
c0021fe0:	83 c4 10             	add    esp,0x10
c0021fe3:	90                   	nop
c0021fe4:	83 c4 0c             	add    esp,0xc
c0021fe7:	c3                   	ret    

c0021fe8 <AVX::load(void*)>:
c0021fe8:	83 ec 0c             	sub    esp,0xc
c0021feb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021fef:	83 ec 0c             	sub    esp,0xc
c0021ff2:	50                   	push   eax
c0021ff3:	e8 df 10 00 00       	call   c00230d7 <avxLoad>
c0021ff8:	83 c4 10             	add    esp,0x10
c0021ffb:	90                   	nop
c0021ffc:	83 c4 0c             	add    esp,0xc
c0021fff:	c3                   	ret    

c0022000 <AVX::AVX()>:
c0022000:	83 ec 0c             	sub    esp,0xc
c0022003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022007:	83 ec 08             	sub    esp,0x8
c002200a:	68 b4 90 02 c0       	push   0xc00290b4
c002200f:	50                   	push   eax
c0022010:	e8 ef 1a ff ff       	call   c0013b04 <FPU::FPU(char const*)>
c0022015:	83 c4 10             	add    esp,0x10
c0022018:	ba c4 90 02 c0       	mov    edx,0xc00290c4
c002201d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022021:	89 10                	mov    DWORD PTR [eax],edx
c0022023:	90                   	nop
c0022024:	83 c4 0c             	add    esp,0xc
c0022027:	c3                   	ret    

c0022028 <MMX::available()>:
c0022028:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c002202d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022033:	83 e0 20             	and    eax,0x20
c0022036:	84 c0                	test   al,al
c0022038:	0f 95 c0             	setne  al
c002203b:	c3                   	ret    

c002203c <MMX::open(int, int, void*)>:
c002203c:	83 ec 0c             	sub    esp,0xc
c002203f:	e8 08 11 00 00       	call   c002314c <x87Init>
c0022044:	b8 00 00 00 00       	mov    eax,0x0
c0022049:	83 c4 0c             	add    esp,0xc
c002204c:	c3                   	ret    
c002204d:	90                   	nop

c002204e <MMX::close(int, int, void*)>:
c002204e:	83 ec 0c             	sub    esp,0xc
c0022051:	e8 10 11 00 00       	call   c0023166 <x87Close>
c0022056:	b8 00 00 00 00       	mov    eax,0x0
c002205b:	83 c4 0c             	add    esp,0xc
c002205e:	c3                   	ret    
c002205f:	90                   	nop

c0022060 <MMX::save(void*)>:
c0022060:	83 ec 0c             	sub    esp,0xc
c0022063:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022067:	83 ec 0c             	sub    esp,0xc
c002206a:	50                   	push   eax
c002206b:	e8 d1 10 00 00       	call   c0023141 <x87Save>
c0022070:	83 c4 10             	add    esp,0x10
c0022073:	90                   	nop
c0022074:	83 c4 0c             	add    esp,0xc
c0022077:	c3                   	ret    

c0022078 <MMX::load(void*)>:
c0022078:	83 ec 0c             	sub    esp,0xc
c002207b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002207f:	83 ec 0c             	sub    esp,0xc
c0022082:	50                   	push   eax
c0022083:	e8 bf 10 00 00       	call   c0023147 <x87Load>
c0022088:	83 c4 10             	add    esp,0x10
c002208b:	90                   	nop
c002208c:	83 c4 0c             	add    esp,0xc
c002208f:	c3                   	ret    

c0022090 <MMX::MMX()>:
c0022090:	83 ec 0c             	sub    esp,0xc
c0022093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022097:	83 ec 08             	sub    esp,0x8
c002209a:	68 f4 90 02 c0       	push   0xc00290f4
c002209f:	50                   	push   eax
c00220a0:	e8 5f 1a ff ff       	call   c0013b04 <FPU::FPU(char const*)>
c00220a5:	83 c4 10             	add    esp,0x10
c00220a8:	ba 04 91 02 c0       	mov    edx,0xc0029104
c00220ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220b1:	89 10                	mov    DWORD PTR [eax],edx
c00220b3:	90                   	nop
c00220b4:	83 c4 0c             	add    esp,0xc
c00220b7:	c3                   	ret    

c00220b8 <SSE::open(int, int, void*)>:
c00220b8:	83 ec 0c             	sub    esp,0xc
c00220bb:	e8 47 10 00 00       	call   c0023107 <sseInit>
c00220c0:	b8 00 00 00 00       	mov    eax,0x0
c00220c5:	83 c4 0c             	add    esp,0xc
c00220c8:	c3                   	ret    
c00220c9:	90                   	nop

c00220ca <SSE::close(int, int, void*)>:
c00220ca:	83 ec 0c             	sub    esp,0xc
c00220cd:	e8 45 10 00 00       	call   c0023117 <sseClose>
c00220d2:	b8 00 00 00 00       	mov    eax,0x0
c00220d7:	83 c4 0c             	add    esp,0xc
c00220da:	c3                   	ret    
c00220db:	90                   	nop

c00220dc <SSE::available()>:
c00220dc:	83 ec 1c             	sub    esp,0x1c
c00220df:	e8 fc 0f 00 00       	call   c00230e0 <sseDetect>
c00220e4:	85 c0                	test   eax,eax
c00220e6:	0f 95 c0             	setne  al
c00220e9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00220ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00220f1:	83 c4 1c             	add    esp,0x1c
c00220f4:	c3                   	ret    
c00220f5:	90                   	nop

c00220f6 <SSE::save(void*)>:
c00220f6:	83 ec 0c             	sub    esp,0xc
c00220f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00220fd:	83 ec 0c             	sub    esp,0xc
c0022100:	50                   	push   eax
c0022101:	e8 f5 0f 00 00       	call   c00230fb <sseSave>
c0022106:	83 c4 10             	add    esp,0x10
c0022109:	90                   	nop
c002210a:	83 c4 0c             	add    esp,0xc
c002210d:	c3                   	ret    

c002210e <SSE::load(void*)>:
c002210e:	83 ec 0c             	sub    esp,0xc
c0022111:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022115:	83 ec 0c             	sub    esp,0xc
c0022118:	50                   	push   eax
c0022119:	e8 e3 0f 00 00       	call   c0023101 <sseLoad>
c002211e:	83 c4 10             	add    esp,0x10
c0022121:	90                   	nop
c0022122:	83 c4 0c             	add    esp,0xc
c0022125:	c3                   	ret    

c0022126 <SSE::SSE()>:
c0022126:	83 ec 0c             	sub    esp,0xc
c0022129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002212d:	83 ec 08             	sub    esp,0x8
c0022130:	68 34 91 02 c0       	push   0xc0029134
c0022135:	50                   	push   eax
c0022136:	e8 c9 19 ff ff       	call   c0013b04 <FPU::FPU(char const*)>
c002213b:	83 c4 10             	add    esp,0x10
c002213e:	ba 44 91 02 c0       	mov    edx,0xc0029144
c0022143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022147:	89 10                	mov    DWORD PTR [eax],edx
c0022149:	90                   	nop
c002214a:	83 c4 0c             	add    esp,0xc
c002214d:	c3                   	ret    

c002214e <x87::open(int, int, void*)>:
c002214e:	83 ec 0c             	sub    esp,0xc
c0022151:	e8 f6 0f 00 00       	call   c002314c <x87Init>
c0022156:	b8 00 00 00 00       	mov    eax,0x0
c002215b:	83 c4 0c             	add    esp,0xc
c002215e:	c3                   	ret    
c002215f:	90                   	nop

c0022160 <x87::close(int, int, void*)>:
c0022160:	83 ec 0c             	sub    esp,0xc
c0022163:	e8 fe 0f 00 00       	call   c0023166 <x87Close>
c0022168:	b8 00 00 00 00       	mov    eax,0x0
c002216d:	83 c4 0c             	add    esp,0xc
c0022170:	c3                   	ret    
c0022171:	90                   	nop

c0022172 <x87::available()>:
c0022172:	83 ec 0c             	sub    esp,0xc
c0022175:	e8 ac 0f 00 00       	call   c0023126 <x87Detect>
c002217a:	85 c0                	test   eax,eax
c002217c:	0f 95 c0             	setne  al
c002217f:	83 c4 0c             	add    esp,0xc
c0022182:	c3                   	ret    
c0022183:	90                   	nop

c0022184 <x87::save(void*)>:
c0022184:	83 ec 0c             	sub    esp,0xc
c0022187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002218b:	83 ec 0c             	sub    esp,0xc
c002218e:	50                   	push   eax
c002218f:	e8 ad 0f 00 00       	call   c0023141 <x87Save>
c0022194:	83 c4 10             	add    esp,0x10
c0022197:	90                   	nop
c0022198:	83 c4 0c             	add    esp,0xc
c002219b:	c3                   	ret    

c002219c <x87::load(void*)>:
c002219c:	83 ec 0c             	sub    esp,0xc
c002219f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00221a3:	83 ec 0c             	sub    esp,0xc
c00221a6:	50                   	push   eax
c00221a7:	e8 9b 0f 00 00       	call   c0023147 <x87Load>
c00221ac:	83 c4 10             	add    esp,0x10
c00221af:	90                   	nop
c00221b0:	83 c4 0c             	add    esp,0xc
c00221b3:	c3                   	ret    

c00221b4 <x87::x87()>:
c00221b4:	83 ec 0c             	sub    esp,0xc
c00221b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221bb:	83 ec 08             	sub    esp,0x8
c00221be:	68 74 91 02 c0       	push   0xc0029174
c00221c3:	50                   	push   eax
c00221c4:	e8 3b 19 ff ff       	call   c0013b04 <FPU::FPU(char const*)>
c00221c9:	83 c4 10             	add    esp,0x10
c00221cc:	ba 84 91 02 c0       	mov    edx,0xc0029184
c00221d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d5:	89 10                	mov    DWORD PTR [eax],edx
c00221d7:	90                   	nop
c00221d8:	83 c4 0c             	add    esp,0xc
c00221db:	c3                   	ret    

c00221dc <APIC::disable()>:
c00221dc:	90                   	nop
c00221dd:	c3                   	ret    

c00221de <APIC::close(int, int, void*)>:
c00221de:	55                   	push   ebp
c00221df:	89 e5                	mov    ebp,esp
c00221e1:	83 ec 08             	sub    esp,0x8
c00221e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00221e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00221e9:	83 c0 3c             	add    eax,0x3c
c00221ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00221ee:	83 ec 0c             	sub    esp,0xc
c00221f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00221f4:	ff d0                	call   eax
c00221f6:	83 c4 10             	add    esp,0x10
c00221f9:	b8 00 00 00 00       	mov    eax,0x0
c00221fe:	c9                   	leave  
c00221ff:	c3                   	ret    

c0022200 <IOAPIC::close(int, int, void*)>:
c0022200:	b8 00 00 00 00       	mov    eax,0x0
c0022205:	c3                   	ret    

c0022206 <APIC::io_wait()>:
c0022206:	eb 00                	jmp    c0022208 <APIC::io_wait()+0x2>
c0022208:	eb 00                	jmp    c002220a <APIC::io_wait()+0x4>
c002220a:	90                   	nop
c002220b:	c3                   	ret    

c002220c <APIC::getBase()>:
c002220c:	55                   	push   ebp
c002220d:	89 e5                	mov    ebp,esp
c002220f:	83 ec 18             	sub    esp,0x18
c0022212:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0022217:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002221d:	83 e0 08             	and    eax,0x8
c0022220:	84 c0                	test   al,al
c0022222:	75 07                	jne    c002222b <APIC::getBase()+0x1f>
c0022224:	b8 00 00 00 00       	mov    eax,0x0
c0022229:	eb 21                	jmp    c002224c <APIC::getBase()+0x40>
c002222b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0022230:	83 ec 08             	sub    esp,0x8
c0022233:	6a 1b                	push   0x1b
c0022235:	50                   	push   eax
c0022236:	e8 8b c4 fe ff       	call   c000e6c6 <Computer::rdmsr(unsigned int)>
c002223b:	83 c4 10             	add    esp,0x10
c002223e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022241:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0022244:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022247:	25 00 f0 ff ff       	and    eax,0xfffff000
c002224c:	c9                   	leave  
c002224d:	c3                   	ret    

c002224e <APIC::eoi(unsigned char)>:
c002224e:	55                   	push   ebp
c002224f:	89 e5                	mov    ebp,esp
c0022251:	83 ec 28             	sub    esp,0x28
c0022254:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022257:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002225a:	83 ec 0c             	sub    esp,0xc
c002225d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022260:	e8 a7 ff ff ff       	call   c002220c <APIC::getBase()>
c0022265:	83 c4 10             	add    esp,0x10
c0022268:	05 b0 00 00 00       	add    eax,0xb0
c002226d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022270:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022273:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0022279:	90                   	nop
c002227a:	c9                   	leave  
c002227b:	c3                   	ret    

c002227c <APIC::open(int, int, void*)>:
c002227c:	55                   	push   ebp
c002227d:	89 e5                	mov    ebp,esp
c002227f:	57                   	push   edi
c0022280:	56                   	push   esi
c0022281:	53                   	push   ebx
c0022282:	83 ec 2c             	sub    esp,0x2c
c0022285:	83 ec 0c             	sub    esp,0xc
c0022288:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002228b:	e8 7c ff ff ff       	call   c002220c <APIC::getBase()>
c0022290:	83 c4 10             	add    esp,0x10
c0022293:	89 c2                	mov    edx,eax
c0022295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022298:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002229e:	0f b6 f8             	movzx  edi,al
c00222a1:	89 d0                	mov    eax,edx
c00222a3:	ba 00 00 00 00       	mov    edx,0x0
c00222a8:	89 c1                	mov    ecx,eax
c00222aa:	80 e5 ff             	and    ch,0xff
c00222ad:	89 cb                	mov    ebx,ecx
c00222af:	0f b6 f2             	movzx  esi,dl
c00222b2:	89 d8                	mov    eax,ebx
c00222b4:	89 f2                	mov    edx,esi
c00222b6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00222b9:	8d 5f 08             	lea    ebx,[edi+0x8]
c00222bc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00222c0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00222c4:	83 e0 00             	and    eax,0x0
c00222c7:	09 d0                	or     eax,edx
c00222c9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00222cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222d0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00222d6:	8d 50 01             	lea    edx,[eax+0x1]
c00222d9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00222dc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00222e2:	0f b6 d0             	movzx  edx,al
c00222e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222e8:	83 c2 08             	add    edx,0x8
c00222eb:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00222ef:	0f b6 c9             	movzx  ecx,cl
c00222f2:	81 c9 00 00 01 00    	or     ecx,0x10000
c00222f8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00222fc:	83 ec 0c             	sub    esp,0xc
c00222ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022302:	e8 05 ff ff ff       	call   c002220c <APIC::getBase()>
c0022307:	83 c4 10             	add    esp,0x10
c002230a:	05 f0 00 00 00       	add    eax,0xf0
c002230f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0022312:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022315:	8b 00                	mov    eax,DWORD PTR [eax]
c0022317:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002231a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0022321:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0022328:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002232b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002232e:	89 10                	mov    DWORD PTR [eax],edx
c0022330:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0022337:	a1 10 ad 02 c0       	mov    eax,ds:0xc002ad10
c002233c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002233f:	7d 7c                	jge    c00223bd <APIC::open(int, int, void*)+0x141>
c0022341:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022344:	8b 04 85 20 ad 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd52e0]
c002234b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002234e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022351:	8b 04 85 20 ad 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd52e0]
c0022358:	c1 e8 08             	shr    eax,0x8
c002235b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002235f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022362:	8b 04 85 20 ad 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd52e0]
c0022369:	c1 e8 18             	shr    eax,0x18
c002236c:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002236f:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0022373:	75 40                	jne    c00223b5 <APIC::open(int, int, void*)+0x139>
c0022375:	83 ec 0c             	sub    esp,0xc
c0022378:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002237b:	e8 8c fe ff ff       	call   c002220c <APIC::getBase()>
c0022380:	83 c4 10             	add    esp,0x10
c0022383:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0022387:	75 07                	jne    c0022390 <APIC::open(int, int, void*)+0x114>
c0022389:	ba 60 03 00 00       	mov    edx,0x360
c002238e:	eb 05                	jmp    c0022395 <APIC::open(int, int, void*)+0x119>
c0022390:	ba 50 03 00 00       	mov    edx,0x350
c0022395:	01 d0                	add    eax,edx
c0022397:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002239a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002239d:	8b 00                	mov    eax,DWORD PTR [eax]
c002239f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00223a2:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00223a9:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00223ad:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00223b0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00223b3:	89 10                	mov    DWORD PTR [eax],edx
c00223b5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00223b8:	e9 7a ff ff ff       	jmp    c0022337 <APIC::open(int, int, void*)+0xbb>
c00223bd:	b8 00 00 00 00       	mov    eax,0x0
c00223c2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00223c5:	5b                   	pop    ebx
c00223c6:	5e                   	pop    esi
c00223c7:	5f                   	pop    edi
c00223c8:	5d                   	pop    ebp
c00223c9:	c3                   	ret    

c00223ca <IOAPIC::IOAPIC()>:
c00223ca:	83 ec 0c             	sub    esp,0xc
c00223cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d1:	83 ec 08             	sub    esp,0x8
c00223d4:	68 b4 91 02 c0       	push   0xc00291b4
c00223d9:	50                   	push   eax
c00223da:	e8 31 14 ff ff       	call   c0013810 <Device::Device(char const*)>
c00223df:	83 c4 10             	add    esp,0x10
c00223e2:	ba dc 92 02 c0       	mov    edx,0xc00292dc
c00223e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223eb:	89 10                	mov    DWORD PTR [eax],edx
c00223ed:	90                   	nop
c00223ee:	83 c4 0c             	add    esp,0xc
c00223f1:	c3                   	ret    

c00223f2 <APIC::APIC()>:
c00223f2:	53                   	push   ebx
c00223f3:	83 ec 18             	sub    esp,0x18
c00223f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223fa:	83 ec 08             	sub    esp,0x8
c00223fd:	68 bc 91 02 c0       	push   0xc00291bc
c0022402:	50                   	push   eax
c0022403:	e8 56 1b ff ff       	call   c0013f5e <InterruptController::InterruptController(char const*)>
c0022408:	83 c4 10             	add    esp,0x10
c002240b:	ba 94 92 02 c0       	mov    edx,0xc0029294
c0022410:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022414:	89 10                	mov    DWORD PTR [eax],edx
c0022416:	a0 80 c7 02 c0       	mov    al,ds:0xc002c780
c002241b:	83 f0 01             	xor    eax,0x1
c002241e:	84 c0                	test   al,al
c0022420:	0f 84 96 00 00 00    	je     c00224bc <APIC::APIC()+0xca>
c0022426:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002242b:	a0 c0 ad 02 c0       	mov    al,ds:0xc002adc0
c0022430:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0022434:	73 7f                	jae    c00224b5 <APIC::APIC()+0xc3>
c0022436:	83 ec 0c             	sub    esp,0xc
c0022439:	68 68 01 00 00       	push   0x168
c002243e:	e8 13 fd fe ff       	call   c0012156 <operator new(unsigned long)>
c0022443:	83 c4 10             	add    esp,0x10
c0022446:	89 c3                	mov    ebx,eax
c0022448:	83 ec 0c             	sub    esp,0xc
c002244b:	53                   	push   ebx
c002244c:	e8 79 ff ff ff       	call   c00223ca <IOAPIC::IOAPIC()>
c0022451:	83 c4 10             	add    esp,0x10
c0022454:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0022458:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002245d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022461:	89 14 85 60 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd38a0],edx
c0022468:	a1 40 c7 02 c0       	mov    eax,ds:0xc002c740
c002246d:	40                   	inc    eax
c002246e:	a3 40 c7 02 c0       	mov    ds:0xc002c740,eax
c0022473:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0022478:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002247e:	83 ec 08             	sub    esp,0x8
c0022481:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022485:	50                   	push   eax
c0022486:	e8 95 11 ff ff       	call   c0013620 <Device::addChild(Device*)>
c002248b:	83 c4 10             	add    esp,0x10
c002248e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022492:	8b 00                	mov    eax,DWORD PTR [eax]
c0022494:	83 c0 08             	add    eax,0x8
c0022497:	8b 00                	mov    eax,DWORD PTR [eax]
c0022499:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002249e:	6a 00                	push   0x0
c00224a0:	6a 00                	push   0x0
c00224a2:	52                   	push   edx
c00224a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00224a7:	ff d0                	call   eax
c00224a9:	83 c4 10             	add    esp,0x10
c00224ac:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00224b0:	e9 76 ff ff ff       	jmp    c002242b <APIC::APIC()+0x39>
c00224b5:	c6 05 80 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c780,0x1
c00224bc:	90                   	nop
c00224bd:	83 c4 18             	add    esp,0x18
c00224c0:	5b                   	pop    ebx
c00224c1:	c3                   	ret    

c00224c2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00224c2:	55                   	push   ebp
c00224c3:	89 e5                	mov    ebp,esp
c00224c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00224ce:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00224d1:	72 1d                	jb     c00224f0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00224d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224d6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00224dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224df:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00224e5:	01 d0                	add    eax,edx
c00224e7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00224ea:	73 04                	jae    c00224f0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00224ec:	b0 01                	mov    al,0x1
c00224ee:	eb 02                	jmp    c00224f2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00224f0:	b0 00                	mov    al,0x0
c00224f2:	5d                   	pop    ebp
c00224f3:	c3                   	ret    

c00224f4 <IOAPIC::read(int)>:
c00224f4:	55                   	push   ebp
c00224f5:	89 e5                	mov    ebp,esp
c00224f7:	83 ec 10             	sub    esp,0x10
c00224fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224fd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022503:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022506:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022509:	0f b6 d0             	movzx  edx,al
c002250c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002250f:	89 10                	mov    DWORD PTR [eax],edx
c0022511:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022514:	83 c0 10             	add    eax,0x10
c0022517:	8b 00                	mov    eax,DWORD PTR [eax]
c0022519:	c9                   	leave  
c002251a:	c3                   	ret    
c002251b:	90                   	nop

c002251c <IOAPIC::open(int, int, void*)>:
c002251c:	55                   	push   ebp
c002251d:	89 e5                	mov    ebp,esp
c002251f:	57                   	push   edi
c0022520:	56                   	push   esi
c0022521:	53                   	push   ebx
c0022522:	83 ec 0c             	sub    esp,0xc
c0022525:	83 ec 0c             	sub    esp,0xc
c0022528:	68 e7 91 02 c0       	push   0xc00291e7
c002252d:	e8 13 fd fe ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c0022532:	83 c4 10             	add    esp,0x10
c0022535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022538:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002253b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022544:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002254a:	8b 14 85 00 ae 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5200]
c0022551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022554:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002255a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002255d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022563:	8b 14 85 80 ae 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5180]
c002256a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002256d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022576:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002257c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002257f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022585:	0f b6 f8             	movzx  edi,al
c0022588:	89 d0                	mov    eax,edx
c002258a:	ba 00 00 00 00       	mov    edx,0x0
c002258f:	89 c1                	mov    ecx,eax
c0022591:	80 e5 ff             	and    ch,0xff
c0022594:	89 cb                	mov    ebx,ecx
c0022596:	0f b6 f2             	movzx  esi,dl
c0022599:	89 d8                	mov    eax,ebx
c002259b:	89 f2                	mov    edx,esi
c002259d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00225a0:	8d 5f 08             	lea    ebx,[edi+0x8]
c00225a3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00225a7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00225ab:	83 e0 00             	and    eax,0x0
c00225ae:	09 d0                	or     eax,edx
c00225b0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00225b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225b7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00225bd:	8d 50 01             	lea    edx,[eax+0x1]
c00225c0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00225c3:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00225c9:	0f b6 d0             	movzx  edx,al
c00225cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225cf:	83 c2 08             	add    edx,0x8
c00225d2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00225d6:	0f b6 c9             	movzx  ecx,cl
c00225d9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00225df:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00225e3:	83 ec 08             	sub    esp,0x8
c00225e6:	6a 01                	push   0x1
c00225e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00225eb:	e8 04 ff ff ff       	call   c00224f4 <IOAPIC::read(int)>
c00225f0:	83 c4 10             	add    esp,0x10
c00225f3:	c1 f8 10             	sar    eax,0x10
c00225f6:	0f b6 c0             	movzx  eax,al
c00225f9:	8d 50 01             	lea    edx,[eax+0x1]
c00225fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225ff:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0022605:	b8 00 00 00 00       	mov    eax,0x0
c002260a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002260d:	5b                   	pop    ebx
c002260e:	5e                   	pop    esi
c002260f:	5f                   	pop    edi
c0022610:	5d                   	pop    ebp
c0022611:	c3                   	ret    

c0022612 <IOAPIC::write(int, int)>:
c0022612:	55                   	push   ebp
c0022613:	89 e5                	mov    ebp,esp
c0022615:	83 ec 10             	sub    esp,0x10
c0022618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002261b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022621:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022624:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022627:	0f b6 d0             	movzx  edx,al
c002262a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002262d:	89 10                	mov    DWORD PTR [eax],edx
c002262f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022632:	8d 50 10             	lea    edx,[eax+0x10]
c0022635:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022638:	89 02                	mov    DWORD PTR [edx],eax
c002263a:	90                   	nop
c002263b:	c9                   	leave  
c002263c:	c3                   	ret    
c002263d:	90                   	nop

c002263e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002263e:	55                   	push   ebp
c002263f:	89 e5                	mov    ebp,esp
c0022641:	53                   	push   ebx
c0022642:	83 ec 2c             	sub    esp,0x2c
c0022645:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022648:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002264b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002264e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0022651:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022654:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022657:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002265a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002265d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022660:	88 d8                	mov    al,bl
c0022662:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0022665:	88 c8                	mov    al,cl
c0022667:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002266a:	88 d0                	mov    al,dl
c002266c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002266f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022673:	83 c0 08             	add    eax,0x8
c0022676:	01 c0                	add    eax,eax
c0022678:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002267b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002267f:	83 c0 08             	add    eax,0x8
c0022682:	01 c0                	add    eax,eax
c0022684:	40                   	inc    eax
c0022685:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0022688:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002268b:	50                   	push   eax
c002268c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002268f:	e8 60 fe ff ff       	call   c00224f4 <IOAPIC::read(int)>
c0022694:	83 c4 08             	add    esp,0x8
c0022697:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002269a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00226a1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00226a4:	c1 e0 18             	shl    eax,0x18
c00226a7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00226aa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00226ad:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00226b0:	52                   	push   edx
c00226b1:	50                   	push   eax
c00226b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226b5:	e8 58 ff ff ff       	call   c0022612 <IOAPIC::write(int, int)>
c00226ba:	83 c4 0c             	add    esp,0xc
c00226bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00226c0:	50                   	push   eax
c00226c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226c4:	e8 2b fe ff ff       	call   c00224f4 <IOAPIC::read(int)>
c00226c9:	83 c4 08             	add    esp,0x8
c00226cc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00226cf:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00226d6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00226dd:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00226e4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00226e8:	74 09                	je     c00226f3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00226ea:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00226f1:	eb 07                	jmp    c00226fa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00226f3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00226fa:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00226fe:	74 09                	je     c0022709 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0022700:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0022707:	eb 07                	jmp    c0022710 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0022709:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0022710:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0022717:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002271b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002271e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0022721:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022724:	52                   	push   edx
c0022725:	50                   	push   eax
c0022726:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022729:	e8 e4 fe ff ff       	call   c0022612 <IOAPIC::write(int, int)>
c002272e:	83 c4 0c             	add    esp,0xc
c0022731:	90                   	nop
c0022732:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0022735:	c9                   	leave  
c0022736:	c3                   	ret    
c0022737:	90                   	nop

c0022738 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0022738:	55                   	push   ebp
c0022739:	89 e5                	mov    ebp,esp
c002273b:	57                   	push   edi
c002273c:	56                   	push   esi
c002273d:	53                   	push   ebx
c002273e:	83 ec 2c             	sub    esp,0x2c
c0022741:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022744:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022747:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002274b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002274f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022753:	74 5a                	je     c00227af <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022755:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0022759:	7f 44                	jg     c002279f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002275b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002275e:	05 40 97 02 c0       	add    eax,0xc0029740
c0022763:	8a 00                	mov    al,BYTE PTR [eax]
c0022765:	0f b6 c0             	movzx  eax,al
c0022768:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002276b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002276e:	66 8b 84 00 a0 ad 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd5260]
c0022776:	0f b7 c0             	movzx  eax,ax
c0022779:	83 e0 02             	and    eax,0x2
c002277c:	85 c0                	test   eax,eax
c002277e:	74 04                	je     c0022784 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0022780:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0022784:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022787:	66 8b 84 00 a0 ad 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd5260]
c002278f:	0f b7 c0             	movzx  eax,ax
c0022792:	83 e0 08             	and    eax,0x8
c0022795:	85 c0                	test   eax,eax
c0022797:	74 16                	je     c00227af <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022799:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002279d:	eb 10                	jmp    c00227af <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002279f:	83 ec 0c             	sub    esp,0xc
c00227a2:	68 f8 91 02 c0       	push   0xc00291f8
c00227a7:	e8 17 62 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c00227ac:	83 c4 10             	add    esp,0x10
c00227af:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00227b3:	a1 40 c7 02 c0       	mov    eax,ds:0xc002c740
c00227b8:	83 ec 08             	sub    esp,0x8
c00227bb:	50                   	push   eax
c00227bc:	68 30 92 02 c0       	push   0xc0029230
c00227c1:	e8 7f fa fe ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00227c6:	83 c4 10             	add    esp,0x10
c00227c9:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00227d0:	a1 40 c7 02 c0       	mov    eax,ds:0xc002c740
c00227d5:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00227d8:	7d 67                	jge    c0022841 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00227da:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00227dd:	8b 04 85 60 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd38a0]
c00227e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00227e7:	83 ec 08             	sub    esp,0x8
c00227ea:	52                   	push   edx
c00227eb:	50                   	push   eax
c00227ec:	e8 d1 fc ff ff       	call   c00224c2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00227f1:	83 c4 10             	add    esp,0x10
c00227f4:	84 c0                	test   al,al
c00227f6:	74 44                	je     c002283c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00227f8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00227fb:	8b 1c 85 60 c7 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd38a0]
c0022802:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0022806:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0022809:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002280d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022810:	83 c0 20             	add    eax,0x20
c0022813:	0f b6 f0             	movzx  esi,al
c0022816:	b8 00 00 00 00       	mov    eax,0x0
c002281b:	99                   	cdq    
c002281c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002281f:	0f b6 c9             	movzx  ecx,cl
c0022822:	83 ec 04             	sub    esp,0x4
c0022825:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0022828:	57                   	push   edi
c0022829:	56                   	push   esi
c002282a:	52                   	push   edx
c002282b:	50                   	push   eax
c002282c:	51                   	push   ecx
c002282d:	53                   	push   ebx
c002282e:	e8 0b fe ff ff       	call   c002263e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0022833:	83 c4 20             	add    esp,0x20
c0022836:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002283a:	eb 05                	jmp    c0022841 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002283c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002283f:	eb 8f                	jmp    c00227d0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0022841:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0022844:	83 f0 01             	xor    eax,0x1
c0022847:	84 c0                	test   al,al
c0022849:	74 10                	je     c002285b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002284b:	83 ec 0c             	sub    esp,0xc
c002284e:	68 47 92 02 c0       	push   0xc0029247
c0022853:	e8 6b 61 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c0022858:	83 c4 10             	add    esp,0x10
c002285b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002285f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0022866:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002286a:	7f 65                	jg     c00228d1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002286c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002286f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022872:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022879:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002287c:	01 ca                	add    edx,ecx
c002287e:	83 c2 54             	add    edx,0x54
c0022881:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0022885:	85 c0                	test   eax,eax
c0022887:	75 43                	jne    c00228cc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0022889:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002288c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002288f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022896:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022899:	01 ca                	add    edx,ecx
c002289b:	8d 4a 54             	lea    ecx,[edx+0x54]
c002289e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00228a1:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00228a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00228a8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00228ab:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00228b2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00228b5:	01 ca                	add    edx,ecx
c00228b7:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00228bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00228c0:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00228c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00228c7:	83 e8 20             	sub    eax,0x20
c00228ca:	eb 1a                	jmp    c00228e6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00228cc:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00228cf:	eb 95                	jmp    c0022866 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00228d1:	83 ec 0c             	sub    esp,0xc
c00228d4:	68 54 92 02 c0       	push   0xc0029254
c00228d9:	e8 e5 60 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c00228de:	83 c4 10             	add    esp,0x10
c00228e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00228e6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00228e9:	5b                   	pop    ebx
c00228ea:	5e                   	pop    esi
c00228eb:	5f                   	pop    edi
c00228ec:	5d                   	pop    ebp
c00228ed:	c3                   	ret    

c00228ee <PIC::disable()>:
c00228ee:	55                   	push   ebp
c00228ef:	89 e5                	mov    ebp,esp
c00228f1:	83 ec 10             	sub    esp,0x10
c00228f4:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00228fa:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00228fe:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022901:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022905:	ee                   	out    dx,al
c0022906:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002290c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0022910:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022913:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0022917:	ee                   	out    dx,al
c0022918:	90                   	nop
c0022919:	c9                   	leave  
c002291a:	c3                   	ret    
c002291b:	90                   	nop

c002291c <PIC::close(int, int, void*)>:
c002291c:	55                   	push   ebp
c002291d:	89 e5                	mov    ebp,esp
c002291f:	83 ec 08             	sub    esp,0x8
c0022922:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022925:	8b 00                	mov    eax,DWORD PTR [eax]
c0022927:	83 c0 3c             	add    eax,0x3c
c002292a:	8b 00                	mov    eax,DWORD PTR [eax]
c002292c:	83 ec 0c             	sub    esp,0xc
c002292f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022932:	ff d0                	call   eax
c0022934:	83 c4 10             	add    esp,0x10
c0022937:	b8 00 00 00 00       	mov    eax,0x0
c002293c:	c9                   	leave  
c002293d:	c3                   	ret    

c002293e <PIC::PIC()>:
c002293e:	83 ec 0c             	sub    esp,0xc
c0022941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022945:	83 ec 08             	sub    esp,0x8
c0022948:	68 00 93 02 c0       	push   0xc0029300
c002294d:	50                   	push   eax
c002294e:	e8 0b 16 ff ff       	call   c0013f5e <InterruptController::InterruptController(char const*)>
c0022953:	83 c4 10             	add    esp,0x10
c0022956:	ba 2c 93 02 c0       	mov    edx,0xc002932c
c002295b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002295f:	89 10                	mov    DWORD PTR [eax],edx
c0022961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022965:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002296b:	0f b6 d0             	movzx  edx,al
c002296e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022972:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0022979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002297d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022983:	0f b6 d0             	movzx  edx,al
c0022986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002298a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002298f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022993:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022999:	8d 50 01             	lea    edx,[eax+0x1]
c002299c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229a0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00229a6:	0f b6 d0             	movzx  edx,al
c00229a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00229b1:	83 e1 3f             	and    ecx,0x3f
c00229b4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00229b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229c2:	0f b6 d0             	movzx  edx,al
c00229c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c9:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00229d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229da:	0f b6 d0             	movzx  edx,al
c00229dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00229e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229f0:	8d 50 01             	lea    edx,[eax+0x1]
c00229f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229f7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00229fd:	0f b6 d0             	movzx  edx,al
c0022a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a04:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a08:	83 e1 3f             	and    ecx,0x3f
c0022a0b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a0f:	90                   	nop
c0022a10:	83 c4 0c             	add    esp,0xc
c0022a13:	c3                   	ret    

c0022a14 <PIC::ioWait()>:
c0022a14:	eb 00                	jmp    c0022a16 <PIC::ioWait()+0x2>
c0022a16:	eb 00                	jmp    c0022a18 <PIC::ioWait()+0x4>
c0022a18:	90                   	nop
c0022a19:	c3                   	ret    

c0022a1a <PIC::getIRQReg(int)>:
c0022a1a:	55                   	push   ebp
c0022a1b:	89 e5                	mov    ebp,esp
c0022a1d:	83 ec 10             	sub    esp,0x10
c0022a20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022a23:	0f b6 c0             	movzx  eax,al
c0022a26:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022a2c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022a2f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022a32:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022a36:	ee                   	out    dx,al
c0022a37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022a3a:	0f b6 c0             	movzx  eax,al
c0022a3d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022a43:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0022a46:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022a49:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022a4d:	ee                   	out    dx,al
c0022a4e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0022a54:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0022a58:	89 c2                	mov    edx,eax
c0022a5a:	ec                   	in     al,dx
c0022a5b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0022a5e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022a61:	0f b6 c0             	movzx  eax,al
c0022a64:	c1 e0 08             	shl    eax,0x8
c0022a67:	89 c1                	mov    ecx,eax
c0022a69:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022a6f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0022a73:	89 c2                	mov    edx,eax
c0022a75:	ec                   	in     al,dx
c0022a76:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0022a79:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022a7c:	0f b6 c0             	movzx  eax,al
c0022a7f:	09 c8                	or     eax,ecx
c0022a81:	c9                   	leave  
c0022a82:	c3                   	ret    
c0022a83:	90                   	nop

c0022a84 <PIC::eoi(unsigned char)>:
c0022a84:	55                   	push   ebp
c0022a85:	89 e5                	mov    ebp,esp
c0022a87:	83 ec 14             	sub    esp,0x14
c0022a8a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022a8d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0022a90:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022a94:	75 1e                	jne    c0022ab4 <PIC::eoi(unsigned char)+0x30>
c0022a96:	6a 0b                	push   0xb
c0022a98:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022a9b:	e8 7a ff ff ff       	call   c0022a1a <PIC::getIRQReg(int)>
c0022aa0:	83 c4 08             	add    esp,0x8
c0022aa3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0022aa7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0022aab:	25 80 00 00 00       	and    eax,0x80
c0022ab0:	85 c0                	test   eax,eax
c0022ab2:	74 5f                	je     c0022b13 <PIC::eoi(unsigned char)+0x8f>
c0022ab4:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0022ab8:	75 2d                	jne    c0022ae7 <PIC::eoi(unsigned char)+0x63>
c0022aba:	6a 0b                	push   0xb
c0022abc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022abf:	e8 56 ff ff ff       	call   c0022a1a <PIC::getIRQReg(int)>
c0022ac4:	83 c4 08             	add    esp,0x8
c0022ac7:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0022acb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022ace:	66 85 c0             	test   ax,ax
c0022ad1:	78 14                	js     c0022ae7 <PIC::eoi(unsigned char)+0x63>
c0022ad3:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0022ad9:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0022add:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022ae0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022ae4:	ee                   	out    dx,al
c0022ae5:	eb 2d                	jmp    c0022b14 <PIC::eoi(unsigned char)+0x90>
c0022ae7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022aeb:	76 12                	jbe    c0022aff <PIC::eoi(unsigned char)+0x7b>
c0022aed:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022af3:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0022af7:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022afa:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022afe:	ee                   	out    dx,al
c0022aff:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022b05:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0022b09:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022b0c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022b10:	ee                   	out    dx,al
c0022b11:	eb 01                	jmp    c0022b14 <PIC::eoi(unsigned char)+0x90>
c0022b13:	90                   	nop
c0022b14:	c9                   	leave  
c0022b15:	c3                   	ret    

c0022b16 <PIC::remap()>:
c0022b16:	55                   	push   ebp
c0022b17:	89 e5                	mov    ebp,esp
c0022b19:	83 ec 48             	sub    esp,0x48
c0022b1c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0022b23:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022b2a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022b30:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0022b33:	89 c2                	mov    edx,eax
c0022b35:	ec                   	in     al,dx
c0022b36:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0022b39:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0022b3c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022b3f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0022b45:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0022b48:	89 c2                	mov    edx,eax
c0022b4a:	ec                   	in     al,dx
c0022b4b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022b4e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022b51:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0022b54:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0022b5a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022b5e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022b61:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0022b64:	ee                   	out    dx,al
c0022b65:	83 ec 0c             	sub    esp,0xc
c0022b68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b6b:	e8 a4 fe ff ff       	call   c0022a14 <PIC::ioWait()>
c0022b70:	83 c4 10             	add    esp,0x10
c0022b73:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0022b79:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0022b7d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022b80:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022b83:	ee                   	out    dx,al
c0022b84:	83 ec 0c             	sub    esp,0xc
c0022b87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b8a:	e8 85 fe ff ff       	call   c0022a14 <PIC::ioWait()>
c0022b8f:	83 c4 10             	add    esp,0x10
c0022b92:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022b95:	0f b6 c0             	movzx  eax,al
c0022b98:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0022b9e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0022ba1:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0022ba4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0022ba7:	ee                   	out    dx,al
c0022ba8:	83 ec 0c             	sub    esp,0xc
c0022bab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022bae:	e8 61 fe ff ff       	call   c0022a14 <PIC::ioWait()>
c0022bb3:	83 c4 10             	add    esp,0x10
c0022bb6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022bb9:	0f b6 c0             	movzx  eax,al
c0022bbc:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0022bc2:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0022bc5:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0022bc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0022bcb:	ee                   	out    dx,al
c0022bcc:	83 ec 0c             	sub    esp,0xc
c0022bcf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022bd2:	e8 3d fe ff ff       	call   c0022a14 <PIC::ioWait()>
c0022bd7:	83 c4 10             	add    esp,0x10
c0022bda:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0022be0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0022be4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0022be7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0022bea:	ee                   	out    dx,al
c0022beb:	83 ec 0c             	sub    esp,0xc
c0022bee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022bf1:	e8 1e fe ff ff       	call   c0022a14 <PIC::ioWait()>
c0022bf6:	83 c4 10             	add    esp,0x10
c0022bf9:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0022bff:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0022c03:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0022c06:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022c09:	ee                   	out    dx,al
c0022c0a:	83 ec 0c             	sub    esp,0xc
c0022c0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c10:	e8 ff fd ff ff       	call   c0022a14 <PIC::ioWait()>
c0022c15:	83 c4 10             	add    esp,0x10
c0022c18:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022c1e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0022c22:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0022c25:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022c28:	ee                   	out    dx,al
c0022c29:	83 ec 0c             	sub    esp,0xc
c0022c2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c2f:	e8 e0 fd ff ff       	call   c0022a14 <PIC::ioWait()>
c0022c34:	83 c4 10             	add    esp,0x10
c0022c37:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0022c3d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022c41:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0022c44:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0022c47:	ee                   	out    dx,al
c0022c48:	83 ec 0c             	sub    esp,0xc
c0022c4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c4e:	e8 c1 fd ff ff       	call   c0022a14 <PIC::ioWait()>
c0022c53:	83 c4 10             	add    esp,0x10
c0022c56:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0022c5a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022c60:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022c63:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0022c66:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022c69:	ee                   	out    dx,al
c0022c6a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022c6e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0022c74:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0022c77:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022c7a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022c7d:	ee                   	out    dx,al
c0022c7e:	90                   	nop
c0022c7f:	c9                   	leave  
c0022c80:	c3                   	ret    
c0022c81:	90                   	nop

c0022c82 <PIC::open(int, int, void*)>:
c0022c82:	55                   	push   ebp
c0022c83:	89 e5                	mov    ebp,esp
c0022c85:	83 ec 18             	sub    esp,0x18
c0022c88:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022c8e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0022c92:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022c95:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022c99:	ee                   	out    dx,al
c0022c9a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022ca0:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0022ca4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022ca7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022cab:	ee                   	out    dx,al
c0022cac:	83 ec 0c             	sub    esp,0xc
c0022caf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022cb2:	e8 5f fe ff ff       	call   c0022b16 <PIC::remap()>
c0022cb7:	83 c4 10             	add    esp,0x10
c0022cba:	b8 00 00 00 00       	mov    eax,0x0
c0022cbf:	c9                   	leave  
c0022cc0:	c3                   	ret    
c0022cc1:	90                   	nop

c0022cc2 <APICTimer::close(int, int, void*)>:
c0022cc2:	b8 00 00 00 00       	mov    eax,0x0
c0022cc7:	c3                   	ret    

c0022cc8 <apicTimerHandler(regs*, void*)>:
c0022cc8:	83 ec 0c             	sub    esp,0xc
c0022ccb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022ccf:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cd1:	99                   	cdq    
c0022cd2:	52                   	push   edx
c0022cd3:	50                   	push   eax
c0022cd4:	6a 00                	push   0x0
c0022cd6:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022cdb:	e8 7c 07 00 00       	call   c002345c <__udivdi3>
c0022ce0:	83 c4 10             	add    esp,0x10
c0022ce3:	83 ec 08             	sub    esp,0x8
c0022ce6:	52                   	push   edx
c0022ce7:	50                   	push   eax
c0022ce8:	e8 62 30 ff ff       	call   c0015d4f <timerHandler(unsigned long long)>
c0022ced:	83 c4 10             	add    esp,0x10
c0022cf0:	90                   	nop
c0022cf1:	83 c4 0c             	add    esp,0xc
c0022cf4:	c3                   	ret    
c0022cf5:	90                   	nop

c0022cf6 <APICTimer::write(int)>:
c0022cf6:	53                   	push   ebx
c0022cf7:	83 ec 28             	sub    esp,0x28
c0022cfa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022cfe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022d02:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022d08:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0022d0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022d13:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022d19:	83 ec 0c             	sub    esp,0xc
c0022d1c:	50                   	push   eax
c0022d1d:	e8 ea f4 ff ff       	call   c002220c <APIC::getBase()>
c0022d22:	83 c4 10             	add    esp,0x10
c0022d25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022d29:	a1 d0 aa 02 c0       	mov    eax,ds:0xc002aad0
c0022d2e:	8b 15 d4 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aad4
c0022d34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022d3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d40:	05 e0 03 00 00       	add    eax,0x3e0
c0022d45:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022d4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d4f:	05 80 03 00 00       	add    eax,0x380
c0022d54:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022d5a:	fb                   	sti    
c0022d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d63:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0022d68:	83 d2 00             	adc    edx,0x0
c0022d6b:	89 c1                	mov    ecx,eax
c0022d6d:	89 d3                	mov    ebx,edx
c0022d6f:	a1 d0 aa 02 c0       	mov    eax,ds:0xc002aad0
c0022d74:	8b 15 d4 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aad4
c0022d7a:	39 c8                	cmp    eax,ecx
c0022d7c:	89 d0                	mov    eax,edx
c0022d7e:	19 d8                	sbb    eax,ebx
c0022d80:	73 02                	jae    c0022d84 <APICTimer::write(int)+0x8e>
c0022d82:	eb d7                	jmp    c0022d5b <APICTimer::write(int)+0x65>
c0022d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d88:	05 20 03 00 00       	add    eax,0x320
c0022d8d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0022d93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d97:	05 90 03 00 00       	add    eax,0x390
c0022d9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d9e:	f7 d0                	not    eax
c0022da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022da4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022da8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022dac:	ba 00 00 00 00       	mov    edx,0x0
c0022db1:	f7 f3                	div    ebx
c0022db3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022db7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022dbb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022dc1:	0d 00 00 02 00       	or     eax,0x20000
c0022dc6:	89 c2                	mov    edx,eax
c0022dc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022dcc:	05 20 03 00 00       	add    eax,0x320
c0022dd1:	89 10                	mov    DWORD PTR [eax],edx
c0022dd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022dd7:	05 e0 03 00 00       	add    eax,0x3e0
c0022ddc:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022de2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022de6:	05 80 03 00 00       	add    eax,0x380
c0022deb:	89 c2                	mov    edx,eax
c0022ded:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022df1:	89 02                	mov    DWORD PTR [edx],eax
c0022df3:	90                   	nop
c0022df4:	83 c4 28             	add    esp,0x28
c0022df7:	5b                   	pop    ebx
c0022df8:	c3                   	ret    
c0022df9:	90                   	nop

c0022dfa <APICTimer::open(int, int, void*)>:
c0022dfa:	57                   	push   edi
c0022dfb:	56                   	push   esi
c0022dfc:	53                   	push   ebx
c0022dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e01:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e03:	83 c0 24             	add    eax,0x24
c0022e06:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e08:	83 ec 08             	sub    esp,0x8
c0022e0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e13:	ff d0                	call   eax
c0022e15:	83 c4 10             	add    esp,0x10
c0022e18:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0022e1d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022e23:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022e29:	83 ec 0c             	sub    esp,0xc
c0022e2c:	50                   	push   eax
c0022e2d:	e8 da f3 ff ff       	call   c002220c <APIC::getBase()>
c0022e32:	83 c4 10             	add    esp,0x10
c0022e35:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e3f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022e45:	0f b6 f8             	movzx  edi,al
c0022e48:	89 d0                	mov    eax,edx
c0022e4a:	ba 00 00 00 00       	mov    edx,0x0
c0022e4f:	89 c1                	mov    ecx,eax
c0022e51:	80 e5 ff             	and    ch,0xff
c0022e54:	89 cb                	mov    ebx,ecx
c0022e56:	0f b6 f2             	movzx  esi,dl
c0022e59:	89 d8                	mov    eax,ebx
c0022e5b:	89 f2                	mov    edx,esi
c0022e5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022e61:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022e64:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022e68:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022e6c:	83 e0 00             	and    eax,0x0
c0022e6f:	09 d0                	or     eax,edx
c0022e71:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e79:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022e7f:	8d 50 01             	lea    edx,[eax+0x1]
c0022e82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022e86:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022e8c:	0f b6 d0             	movzx  edx,al
c0022e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e93:	83 c2 08             	add    edx,0x8
c0022e96:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022e9a:	0f b6 c9             	movzx  ecx,cl
c0022e9d:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022ea3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022eaf:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022ebd:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022ec3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022ec7:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022ecd:	83 ec 0c             	sub    esp,0xc
c0022ed0:	51                   	push   ecx
c0022ed1:	6a 01                	push   0x1
c0022ed3:	68 c8 2c 02 c0       	push   0xc0022cc8
c0022ed8:	52                   	push   edx
c0022ed9:	50                   	push   eax
c0022eda:	e8 c5 06 ff ff       	call   c00135a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022edf:	83 c4 20             	add    esp,0x20
c0022ee2:	89 c2                	mov    edx,eax
c0022ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ee8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022eee:	b8 00 00 00 00       	mov    eax,0x0
c0022ef3:	5b                   	pop    ebx
c0022ef4:	5e                   	pop    esi
c0022ef5:	5f                   	pop    edi
c0022ef6:	c3                   	ret    
c0022ef7:	90                   	nop

c0022ef8 <APICTimer::APICTimer()>:
c0022ef8:	83 ec 0c             	sub    esp,0xc
c0022efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eff:	83 ec 08             	sub    esp,0x8
c0022f02:	68 6c 93 02 c0       	push   0xc002936c
c0022f07:	50                   	push   eax
c0022f08:	e8 b3 2d ff ff       	call   c0015cc0 <Timer::Timer(char const*)>
c0022f0d:	83 c4 10             	add    esp,0x10
c0022f10:	ba 80 93 02 c0       	mov    edx,0xc0029380
c0022f15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f19:	89 10                	mov    DWORD PTR [eax],edx
c0022f1b:	90                   	nop
c0022f1c:	83 c4 0c             	add    esp,0xc
c0022f1f:	c3                   	ret    

c0022f20 <PIT::write(int)>:
c0022f20:	83 ec 10             	sub    esp,0x10
c0022f23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022f27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022f2b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022f31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f35:	a3 84 c7 02 c0       	mov    ds:0xc002c784,eax
c0022f3a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022f3f:	99                   	cdq    
c0022f40:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022f44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f48:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022f4f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022f54:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022f58:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022f5d:	ee                   	out    dx,al
c0022f5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022f62:	0f b6 c0             	movzx  eax,al
c0022f65:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022f6c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022f70:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022f74:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022f79:	ee                   	out    dx,al
c0022f7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022f7e:	c1 f8 08             	sar    eax,0x8
c0022f81:	0f b6 c0             	movzx  eax,al
c0022f84:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022f8b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022f8f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022f93:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022f98:	ee                   	out    dx,al
c0022f99:	90                   	nop
c0022f9a:	83 c4 10             	add    esp,0x10
c0022f9d:	c3                   	ret    

c0022f9e <pitHandler(regs*, void*)>:
c0022f9e:	83 ec 0c             	sub    esp,0xc
c0022fa1:	a1 84 c7 02 c0       	mov    eax,ds:0xc002c784
c0022fa6:	99                   	cdq    
c0022fa7:	52                   	push   edx
c0022fa8:	50                   	push   eax
c0022fa9:	6a 00                	push   0x0
c0022fab:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022fb0:	e8 a7 04 00 00       	call   c002345c <__udivdi3>
c0022fb5:	83 c4 10             	add    esp,0x10
c0022fb8:	83 ec 08             	sub    esp,0x8
c0022fbb:	52                   	push   edx
c0022fbc:	50                   	push   eax
c0022fbd:	e8 8d 2d ff ff       	call   c0015d4f <timerHandler(unsigned long long)>
c0022fc2:	83 c4 10             	add    esp,0x10
c0022fc5:	90                   	nop
c0022fc6:	83 c4 0c             	add    esp,0xc
c0022fc9:	c3                   	ret    

c0022fca <PIT::open(int, int, void*)>:
c0022fca:	83 ec 0c             	sub    esp,0xc
c0022fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fd3:	83 c0 24             	add    eax,0x24
c0022fd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fd8:	83 ec 08             	sub    esp,0x8
c0022fdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fe3:	ff d0                	call   eax
c0022fe5:	83 c4 10             	add    esp,0x10
c0022fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fec:	83 ec 0c             	sub    esp,0xc
c0022fef:	6a 00                	push   0x0
c0022ff1:	6a 01                	push   0x1
c0022ff3:	68 9e 2f 02 c0       	push   0xc0022f9e
c0022ff8:	6a 00                	push   0x0
c0022ffa:	50                   	push   eax
c0022ffb:	e8 a4 05 ff ff       	call   c00135a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023000:	83 c4 20             	add    esp,0x20
c0023003:	89 c2                	mov    edx,eax
c0023005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023009:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002300f:	b8 00 00 00 00       	mov    eax,0x0
c0023014:	83 c4 0c             	add    esp,0xc
c0023017:	c3                   	ret    

c0023018 <PIT::close(int, int, void*)>:
c0023018:	83 ec 0c             	sub    esp,0xc
c002301b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002301f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0023029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002302d:	6a 01                	push   0x1
c002302f:	68 9e 2f 02 c0       	push   0xc0022f9e
c0023034:	6a 00                	push   0x0
c0023036:	50                   	push   eax
c0023037:	e8 a6 05 ff ff       	call   c00135e2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002303c:	83 c4 10             	add    esp,0x10
c002303f:	b8 00 00 00 00       	mov    eax,0x0
c0023044:	83 c4 0c             	add    esp,0xc
c0023047:	c3                   	ret    

c0023048 <PIT::PIT()>:
c0023048:	83 ec 0c             	sub    esp,0xc
c002304b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304f:	83 ec 08             	sub    esp,0x8
c0023052:	68 a8 93 02 c0       	push   0xc00293a8
c0023057:	50                   	push   eax
c0023058:	e8 63 2c ff ff       	call   c0015cc0 <Timer::Timer(char const*)>
c002305d:	83 c4 10             	add    esp,0x10
c0023060:	ba d0 93 02 c0       	mov    edx,0xc00293d0
c0023065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023069:	89 10                	mov    DWORD PTR [eax],edx
c002306b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002306f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023075:	0f b6 d0             	movzx  edx,al
c0023078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002307c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0023083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023087:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002308d:	0f b6 d0             	movzx  edx,al
c0023090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023094:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0023099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002309d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00230a3:	8d 50 01             	lea    edx,[eax+0x1]
c00230a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00230aa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00230b0:	0f b6 d0             	movzx  edx,al
c00230b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230b7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00230bb:	83 e1 3f             	and    ecx,0x3f
c00230be:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00230c2:	90                   	nop
c00230c3:	83 c4 0c             	add    esp,0xc
c00230c6:	c3                   	ret    
c00230c7:	66 90                	xchg   ax,ax
c00230c9:	66 90                	xchg   ax,ax
c00230cb:	66 90                	xchg   ax,ax
c00230cd:	66 90                	xchg   ax,ax
c00230cf:	90                   	nop

c00230d0 <avxDetect>:
c00230d0:	b8 00 00 00 00       	mov    eax,0x0
c00230d5:	c3                   	ret    

c00230d6 <avxSave>:
c00230d6:	c3                   	ret    

c00230d7 <avxLoad>:
c00230d7:	c3                   	ret    

c00230d8 <avxInit>:
c00230d8:	c3                   	ret    

c00230d9 <avxClose>:
c00230d9:	c3                   	ret    
c00230da:	66 90                	xchg   ax,ax
c00230dc:	66 90                	xchg   ax,ax
c00230de:	66 90                	xchg   ax,ax

c00230e0 <sseDetect>:
c00230e0:	b8 01 00 00 00       	mov    eax,0x1
c00230e5:	0f a2                	cpuid  
c00230e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00230ed:	74 06                	je     c00230f5 <sseDetect.noSSE>
c00230ef:	b8 01 00 00 00       	mov    eax,0x1
c00230f4:	c3                   	ret    

c00230f5 <sseDetect.noSSE>:
c00230f5:	b8 00 00 00 00       	mov    eax,0x0
c00230fa:	c3                   	ret    

c00230fb <sseSave>:
c00230fb:	0f ae 44 24 08       	fxsave [esp+0x8]
c0023100:	c3                   	ret    

c0023101 <sseLoad>:
c0023101:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0023106:	c3                   	ret    

c0023107 <sseInit>:
c0023107:	e8 40 00 00 00       	call   c002314c <x87Init>
c002310c:	0f 20 e0             	mov    eax,cr4
c002310f:	66 0d 00 06          	or     ax,0x600
c0023113:	0f 22 e0             	mov    cr4,eax
c0023116:	c3                   	ret    

c0023117 <sseClose>:
c0023117:	c3                   	ret    
c0023118:	66 90                	xchg   ax,ax
c002311a:	66 90                	xchg   ax,ax
c002311c:	66 90                	xchg   ax,ax
c002311e:	66 90                	xchg   ax,ax

c0023120 <value_37F>:
c0023120:	7f 03                	jg     c0023125 <value_37A+0x1>

c0023122 <value_37E>:
c0023122:	7e 03                	jle    c0023127 <x87Detect+0x1>

c0023124 <value_37A>:
c0023124:	7a 03                	jp     c0023129 <x87Detect+0x3>

c0023126 <x87Detect>:
c0023126:	b8 01 00 00 00       	mov    eax,0x1
c002312b:	0f a2                	cpuid  
c002312d:	f7 c2 01 00 00 00    	test   edx,0x1
c0023133:	74 06                	je     c002313b <x87Detect.nox87>
c0023135:	b8 01 00 00 00       	mov    eax,0x1
c002313a:	c3                   	ret    

c002313b <x87Detect.nox87>:
c002313b:	b8 00 00 00 00       	mov    eax,0x0
c0023140:	c3                   	ret    

c0023141 <x87Save>:
c0023141:	9b dd 74 24 08       	fsave  [esp+0x8]
c0023146:	c3                   	ret    

c0023147 <x87Load>:
c0023147:	dd 64 24 08          	frstor [esp+0x8]
c002314b:	c3                   	ret    

c002314c <x87Init>:
c002314c:	9b db e3             	finit  
c002314f:	0f 20 c0             	mov    eax,cr0
c0023152:	66 25 fb ff          	and    ax,0xfffb
c0023156:	66 0d 22 00          	or     ax,0x22
c002315a:	0f 22 c0             	mov    cr0,eax
c002315d:	0f 06                	clts   
c002315f:	d9 2d 24 31 02 c0    	fldcw  WORD PTR ds:0xc0023124
c0023165:	c3                   	ret    

c0023166 <x87Close>:
c0023166:	c3                   	ret    
c0023167:	90                   	nop

c0023168 <__do_global_ctors_aux>:
c0023168:	a1 c0 5b 02 c0       	mov    eax,ds:0xc0025bc0
c002316d:	83 f8 ff             	cmp    eax,0xffffffff
c0023170:	74 1a                	je     c002318c <__do_global_ctors_aux+0x24>
c0023172:	55                   	push   ebp
c0023173:	89 e5                	mov    ebp,esp
c0023175:	53                   	push   ebx
c0023176:	52                   	push   edx
c0023177:	bb c0 5b 02 c0       	mov    ebx,0xc0025bc0
c002317c:	ff d0                	call   eax
c002317e:	83 eb 04             	sub    ebx,0x4
c0023181:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023183:	83 f8 ff             	cmp    eax,0xffffffff
c0023186:	75 f4                	jne    c002317c <__do_global_ctors_aux+0x14>
c0023188:	58                   	pop    eax
c0023189:	5b                   	pop    ebx
c002318a:	5d                   	pop    ebp
c002318b:	c3                   	ret    
c002318c:	c3                   	ret    
c002318d:	66 90                	xchg   ax,ax
c002318f:	90                   	nop

c0023190 <__divdi3>:
c0023190:	55                   	push   ebp
c0023191:	57                   	push   edi
c0023192:	56                   	push   esi
c0023193:	53                   	push   ebx
c0023194:	83 ec 1c             	sub    esp,0x1c
c0023197:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002319b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002319f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00231a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00231a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00231aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00231ae:	85 db                	test   ebx,ebx
c00231b0:	0f 88 8e 00 00 00    	js     c0023244 <__divdi3+0xb4>
c00231b6:	89 dd                	mov    ebp,ebx
c00231b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00231c0:	89 d3                	mov    ebx,edx
c00231c2:	85 d2                	test   edx,edx
c00231c4:	79 0d                	jns    c00231d3 <__divdi3+0x43>
c00231c6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00231ca:	f7 d8                	neg    eax
c00231cc:	83 d2 00             	adc    edx,0x0
c00231cf:	f7 da                	neg    edx
c00231d1:	89 d3                	mov    ebx,edx
c00231d3:	89 c7                	mov    edi,eax
c00231d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00231d8:	85 db                	test   ebx,ebx
c00231da:	75 48                	jne    c0023224 <__divdi3+0x94>
c00231dc:	39 ef                	cmp    edi,ebp
c00231de:	76 24                	jbe    c0023204 <__divdi3+0x74>
c00231e0:	89 ea                	mov    edx,ebp
c00231e2:	f7 f7                	div    edi
c00231e4:	89 c1                	mov    ecx,eax
c00231e6:	31 f6                	xor    esi,esi
c00231e8:	89 c8                	mov    eax,ecx
c00231ea:	89 f2                	mov    edx,esi
c00231ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00231f0:	85 c9                	test   ecx,ecx
c00231f2:	74 07                	je     c00231fb <__divdi3+0x6b>
c00231f4:	f7 d8                	neg    eax
c00231f6:	83 d2 00             	adc    edx,0x0
c00231f9:	f7 da                	neg    edx
c00231fb:	83 c4 1c             	add    esp,0x1c
c00231fe:	5b                   	pop    ebx
c00231ff:	5e                   	pop    esi
c0023200:	5f                   	pop    edi
c0023201:	5d                   	pop    ebp
c0023202:	c3                   	ret    
c0023203:	90                   	nop
c0023204:	85 ff                	test   edi,edi
c0023206:	75 0b                	jne    c0023213 <__divdi3+0x83>
c0023208:	b8 01 00 00 00       	mov    eax,0x1
c002320d:	31 d2                	xor    edx,edx
c002320f:	f7 f3                	div    ebx
c0023211:	89 c7                	mov    edi,eax
c0023213:	31 d2                	xor    edx,edx
c0023215:	89 e8                	mov    eax,ebp
c0023217:	f7 f7                	div    edi
c0023219:	89 c6                	mov    esi,eax
c002321b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002321e:	f7 f7                	div    edi
c0023220:	89 c1                	mov    ecx,eax
c0023222:	eb c4                	jmp    c00231e8 <__divdi3+0x58>
c0023224:	39 eb                	cmp    ebx,ebp
c0023226:	77 3c                	ja     c0023264 <__divdi3+0xd4>
c0023228:	0f bd f3             	bsr    esi,ebx
c002322b:	83 f6 1f             	xor    esi,0x1f
c002322e:	75 40                	jne    c0023270 <__divdi3+0xe0>
c0023230:	39 eb                	cmp    ebx,ebp
c0023232:	72 09                	jb     c002323d <__divdi3+0xad>
c0023234:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0023237:	0f 87 97 00 00 00    	ja     c00232d4 <__divdi3+0x144>
c002323d:	b9 01 00 00 00       	mov    ecx,0x1
c0023242:	eb a4                	jmp    c00231e8 <__divdi3+0x58>
c0023244:	f7 d9                	neg    ecx
c0023246:	83 d3 00             	adc    ebx,0x0
c0023249:	f7 db                	neg    ebx
c002324b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002324e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0023252:	89 dd                	mov    ebp,ebx
c0023254:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002325c:	e9 5f ff ff ff       	jmp    c00231c0 <__divdi3+0x30>
c0023261:	8d 76 00             	lea    esi,[esi+0x0]
c0023264:	31 f6                	xor    esi,esi
c0023266:	31 c9                	xor    ecx,ecx
c0023268:	e9 7b ff ff ff       	jmp    c00231e8 <__divdi3+0x58>
c002326d:	8d 76 00             	lea    esi,[esi+0x0]
c0023270:	b8 20 00 00 00       	mov    eax,0x20
c0023275:	29 f0                	sub    eax,esi
c0023277:	89 f1                	mov    ecx,esi
c0023279:	d3 e3                	shl    ebx,cl
c002327b:	89 fa                	mov    edx,edi
c002327d:	88 c1                	mov    cl,al
c002327f:	d3 ea                	shr    edx,cl
c0023281:	09 da                	or     edx,ebx
c0023283:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023287:	89 f1                	mov    ecx,esi
c0023289:	d3 e7                	shl    edi,cl
c002328b:	89 eb                	mov    ebx,ebp
c002328d:	88 c1                	mov    cl,al
c002328f:	d3 eb                	shr    ebx,cl
c0023291:	89 f1                	mov    ecx,esi
c0023293:	d3 e5                	shl    ebp,cl
c0023295:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0023298:	88 c1                	mov    cl,al
c002329a:	d3 ea                	shr    edx,cl
c002329c:	09 d5                	or     ebp,edx
c002329e:	89 e8                	mov    eax,ebp
c00232a0:	89 da                	mov    edx,ebx
c00232a2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00232a6:	89 d3                	mov    ebx,edx
c00232a8:	89 c5                	mov    ebp,eax
c00232aa:	f7 e7                	mul    edi
c00232ac:	39 d3                	cmp    ebx,edx
c00232ae:	72 18                	jb     c00232c8 <__divdi3+0x138>
c00232b0:	74 0a                	je     c00232bc <__divdi3+0x12c>
c00232b2:	89 e9                	mov    ecx,ebp
c00232b4:	31 f6                	xor    esi,esi
c00232b6:	e9 2d ff ff ff       	jmp    c00231e8 <__divdi3+0x58>
c00232bb:	90                   	nop
c00232bc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00232bf:	89 f1                	mov    ecx,esi
c00232c1:	d3 e7                	shl    edi,cl
c00232c3:	39 c7                	cmp    edi,eax
c00232c5:	73 eb                	jae    c00232b2 <__divdi3+0x122>
c00232c7:	90                   	nop
c00232c8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00232cb:	31 f6                	xor    esi,esi
c00232cd:	e9 16 ff ff ff       	jmp    c00231e8 <__divdi3+0x58>
c00232d2:	66 90                	xchg   ax,ax
c00232d4:	31 c9                	xor    ecx,ecx
c00232d6:	e9 0d ff ff ff       	jmp    c00231e8 <__divdi3+0x58>
c00232db:	90                   	nop

c00232dc <__moddi3>:
c00232dc:	55                   	push   ebp
c00232dd:	57                   	push   edi
c00232de:	56                   	push   esi
c00232df:	53                   	push   ebx
c00232e0:	83 ec 2c             	sub    esp,0x2c
c00232e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00232e7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00232eb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00232ef:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00232f3:	85 db                	test   ebx,ebx
c00232f5:	0f 88 85 00 00 00    	js     c0023380 <__moddi3+0xa4>
c00232fb:	89 de                	mov    esi,ebx
c00232fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023305:	89 d7                	mov    edi,edx
c0023307:	85 d2                	test   edx,edx
c0023309:	79 09                	jns    c0023314 <__moddi3+0x38>
c002330b:	f7 d8                	neg    eax
c002330d:	83 d2 00             	adc    edx,0x0
c0023310:	f7 da                	neg    edx
c0023312:	89 d7                	mov    edi,edx
c0023314:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023318:	89 cd                	mov    ebp,ecx
c002331a:	85 ff                	test   edi,edi
c002331c:	75 52                	jne    c0023370 <__moddi3+0x94>
c002331e:	89 c3                	mov    ebx,eax
c0023320:	39 f0                	cmp    eax,esi
c0023322:	76 24                	jbe    c0023348 <__moddi3+0x6c>
c0023324:	89 c8                	mov    eax,ecx
c0023326:	89 f2                	mov    edx,esi
c0023328:	f7 f3                	div    ebx
c002332a:	89 d6                	mov    esi,edx
c002332c:	89 f0                	mov    eax,esi
c002332e:	31 d2                	xor    edx,edx
c0023330:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023334:	85 c9                	test   ecx,ecx
c0023336:	74 07                	je     c002333f <__moddi3+0x63>
c0023338:	f7 d8                	neg    eax
c002333a:	83 d2 00             	adc    edx,0x0
c002333d:	f7 da                	neg    edx
c002333f:	83 c4 2c             	add    esp,0x2c
c0023342:	5b                   	pop    ebx
c0023343:	5e                   	pop    esi
c0023344:	5f                   	pop    edi
c0023345:	5d                   	pop    ebp
c0023346:	c3                   	ret    
c0023347:	90                   	nop
c0023348:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002334c:	85 db                	test   ebx,ebx
c002334e:	75 0d                	jne    c002335d <__moddi3+0x81>
c0023350:	b8 01 00 00 00       	mov    eax,0x1
c0023355:	31 d2                	xor    edx,edx
c0023357:	f7 f7                	div    edi
c0023359:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002335d:	89 f0                	mov    eax,esi
c002335f:	31 d2                	xor    edx,edx
c0023361:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023365:	f7 f7                	div    edi
c0023367:	89 e8                	mov    eax,ebp
c0023369:	f7 f7                	div    edi
c002336b:	89 d6                	mov    esi,edx
c002336d:	eb bd                	jmp    c002332c <__moddi3+0x50>
c002336f:	90                   	nop
c0023370:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0023374:	39 f7                	cmp    edi,esi
c0023376:	76 20                	jbe    c0023398 <__moddi3+0xbc>
c0023378:	89 c8                	mov    eax,ecx
c002337a:	89 f2                	mov    edx,esi
c002337c:	eb b2                	jmp    c0023330 <__moddi3+0x54>
c002337e:	66 90                	xchg   ax,ax
c0023380:	f7 d9                	neg    ecx
c0023382:	83 d3 00             	adc    ebx,0x0
c0023385:	f7 db                	neg    ebx
c0023387:	89 de                	mov    esi,ebx
c0023389:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0023391:	e9 6f ff ff ff       	jmp    c0023305 <__moddi3+0x29>
c0023396:	66 90                	xchg   ax,ax
c0023398:	0f bd c7             	bsr    eax,edi
c002339b:	83 f0 1f             	xor    eax,0x1f
c002339e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00233a2:	75 24                	jne    c00233c8 <__moddi3+0xec>
c00233a4:	39 f7                	cmp    edi,esi
c00233a6:	72 06                	jb     c00233ae <__moddi3+0xd2>
c00233a8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00233ac:	77 0c                	ja     c00233ba <__moddi3+0xde>
c00233ae:	89 e9                	mov    ecx,ebp
c00233b0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00233b4:	19 fe                	sbb    esi,edi
c00233b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00233ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00233be:	89 f2                	mov    edx,esi
c00233c0:	e9 6b ff ff ff       	jmp    c0023330 <__moddi3+0x54>
c00233c5:	8d 76 00             	lea    esi,[esi+0x0]
c00233c8:	b8 20 00 00 00       	mov    eax,0x20
c00233cd:	89 c2                	mov    edx,eax
c00233cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00233d3:	29 da                	sub    edx,ebx
c00233d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00233d9:	88 d9                	mov    cl,bl
c00233db:	d3 e7                	shl    edi,cl
c00233dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233e1:	88 d1                	mov    cl,dl
c00233e3:	d3 e8                	shr    eax,cl
c00233e5:	09 c7                	or     edi,eax
c00233e7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00233eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00233ef:	89 d8                	mov    eax,ebx
c00233f1:	88 d9                	mov    cl,bl
c00233f3:	d3 e7                	shl    edi,cl
c00233f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00233f9:	89 f3                	mov    ebx,esi
c00233fb:	88 d1                	mov    cl,dl
c00233fd:	d3 eb                	shr    ebx,cl
c00233ff:	89 c7                	mov    edi,eax
c0023401:	88 c1                	mov    cl,al
c0023403:	d3 e6                	shl    esi,cl
c0023405:	89 e8                	mov    eax,ebp
c0023407:	88 d1                	mov    cl,dl
c0023409:	d3 e8                	shr    eax,cl
c002340b:	09 f0                	or     eax,esi
c002340d:	89 f9                	mov    ecx,edi
c002340f:	d3 e5                	shl    ebp,cl
c0023411:	89 da                	mov    edx,ebx
c0023413:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0023417:	89 d3                	mov    ebx,edx
c0023419:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002341d:	89 c6                	mov    esi,eax
c002341f:	89 d1                	mov    ecx,edx
c0023421:	39 d3                	cmp    ebx,edx
c0023423:	72 27                	jb     c002344c <__moddi3+0x170>
c0023425:	74 21                	je     c0023448 <__moddi3+0x16c>
c0023427:	29 f5                	sub    ebp,esi
c0023429:	19 cb                	sbb    ebx,ecx
c002342b:	89 de                	mov    esi,ebx
c002342d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0023431:	d3 e6                	shl    esi,cl
c0023433:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023437:	89 f9                	mov    ecx,edi
c0023439:	d3 ed                	shr    ebp,cl
c002343b:	09 ee                	or     esi,ebp
c002343d:	89 f0                	mov    eax,esi
c002343f:	d3 eb                	shr    ebx,cl
c0023441:	89 da                	mov    edx,ebx
c0023443:	e9 e8 fe ff ff       	jmp    c0023330 <__moddi3+0x54>
c0023448:	39 c5                	cmp    ebp,eax
c002344a:	73 db                	jae    c0023427 <__moddi3+0x14b>
c002344c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023450:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0023454:	89 d1                	mov    ecx,edx
c0023456:	89 c6                	mov    esi,eax
c0023458:	eb cd                	jmp    c0023427 <__moddi3+0x14b>
c002345a:	66 90                	xchg   ax,ax

c002345c <__udivdi3>:
c002345c:	55                   	push   ebp
c002345d:	57                   	push   edi
c002345e:	56                   	push   esi
c002345f:	53                   	push   ebx
c0023460:	83 ec 1c             	sub    esp,0x1c
c0023463:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0023467:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002346b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002346f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023473:	85 d2                	test   edx,edx
c0023475:	75 41                	jne    c00234b8 <__udivdi3+0x5c>
c0023477:	39 f7                	cmp    edi,esi
c0023479:	76 15                	jbe    c0023490 <__udivdi3+0x34>
c002347b:	89 e8                	mov    eax,ebp
c002347d:	89 f2                	mov    edx,esi
c002347f:	f7 f7                	div    edi
c0023481:	31 db                	xor    ebx,ebx
c0023483:	89 da                	mov    edx,ebx
c0023485:	83 c4 1c             	add    esp,0x1c
c0023488:	5b                   	pop    ebx
c0023489:	5e                   	pop    esi
c002348a:	5f                   	pop    edi
c002348b:	5d                   	pop    ebp
c002348c:	c3                   	ret    
c002348d:	8d 76 00             	lea    esi,[esi+0x0]
c0023490:	89 f9                	mov    ecx,edi
c0023492:	85 ff                	test   edi,edi
c0023494:	75 0b                	jne    c00234a1 <__udivdi3+0x45>
c0023496:	b8 01 00 00 00       	mov    eax,0x1
c002349b:	31 d2                	xor    edx,edx
c002349d:	f7 f7                	div    edi
c002349f:	89 c1                	mov    ecx,eax
c00234a1:	31 d2                	xor    edx,edx
c00234a3:	89 f0                	mov    eax,esi
c00234a5:	f7 f1                	div    ecx
c00234a7:	89 c3                	mov    ebx,eax
c00234a9:	89 e8                	mov    eax,ebp
c00234ab:	f7 f1                	div    ecx
c00234ad:	89 da                	mov    edx,ebx
c00234af:	83 c4 1c             	add    esp,0x1c
c00234b2:	5b                   	pop    ebx
c00234b3:	5e                   	pop    esi
c00234b4:	5f                   	pop    edi
c00234b5:	5d                   	pop    ebp
c00234b6:	c3                   	ret    
c00234b7:	90                   	nop
c00234b8:	39 f2                	cmp    edx,esi
c00234ba:	77 1c                	ja     c00234d8 <__udivdi3+0x7c>
c00234bc:	0f bd da             	bsr    ebx,edx
c00234bf:	83 f3 1f             	xor    ebx,0x1f
c00234c2:	75 24                	jne    c00234e8 <__udivdi3+0x8c>
c00234c4:	39 f2                	cmp    edx,esi
c00234c6:	72 08                	jb     c00234d0 <__udivdi3+0x74>
c00234c8:	39 ef                	cmp    edi,ebp
c00234ca:	0f 87 84 00 00 00    	ja     c0023554 <__udivdi3+0xf8>
c00234d0:	b8 01 00 00 00       	mov    eax,0x1
c00234d5:	eb ac                	jmp    c0023483 <__udivdi3+0x27>
c00234d7:	90                   	nop
c00234d8:	31 db                	xor    ebx,ebx
c00234da:	31 c0                	xor    eax,eax
c00234dc:	89 da                	mov    edx,ebx
c00234de:	83 c4 1c             	add    esp,0x1c
c00234e1:	5b                   	pop    ebx
c00234e2:	5e                   	pop    esi
c00234e3:	5f                   	pop    edi
c00234e4:	5d                   	pop    ebp
c00234e5:	c3                   	ret    
c00234e6:	66 90                	xchg   ax,ax
c00234e8:	b8 20 00 00 00       	mov    eax,0x20
c00234ed:	29 d8                	sub    eax,ebx
c00234ef:	88 d9                	mov    cl,bl
c00234f1:	d3 e2                	shl    edx,cl
c00234f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00234f7:	89 fa                	mov    edx,edi
c00234f9:	88 c1                	mov    cl,al
c00234fb:	d3 ea                	shr    edx,cl
c00234fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023501:	09 d1                	or     ecx,edx
c0023503:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023507:	88 d9                	mov    cl,bl
c0023509:	d3 e7                	shl    edi,cl
c002350b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002350f:	89 f7                	mov    edi,esi
c0023511:	88 c1                	mov    cl,al
c0023513:	d3 ef                	shr    edi,cl
c0023515:	88 d9                	mov    cl,bl
c0023517:	d3 e6                	shl    esi,cl
c0023519:	89 ea                	mov    edx,ebp
c002351b:	88 c1                	mov    cl,al
c002351d:	d3 ea                	shr    edx,cl
c002351f:	09 d6                	or     esi,edx
c0023521:	89 f0                	mov    eax,esi
c0023523:	89 fa                	mov    edx,edi
c0023525:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023529:	89 d7                	mov    edi,edx
c002352b:	89 c6                	mov    esi,eax
c002352d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023531:	39 d7                	cmp    edi,edx
c0023533:	72 13                	jb     c0023548 <__udivdi3+0xec>
c0023535:	74 09                	je     c0023540 <__udivdi3+0xe4>
c0023537:	89 f0                	mov    eax,esi
c0023539:	31 db                	xor    ebx,ebx
c002353b:	e9 43 ff ff ff       	jmp    c0023483 <__udivdi3+0x27>
c0023540:	88 d9                	mov    cl,bl
c0023542:	d3 e5                	shl    ebp,cl
c0023544:	39 c5                	cmp    ebp,eax
c0023546:	73 ef                	jae    c0023537 <__udivdi3+0xdb>
c0023548:	8d 46 ff             	lea    eax,[esi-0x1]
c002354b:	31 db                	xor    ebx,ebx
c002354d:	e9 31 ff ff ff       	jmp    c0023483 <__udivdi3+0x27>
c0023552:	66 90                	xchg   ax,ax
c0023554:	31 c0                	xor    eax,eax
c0023556:	e9 28 ff ff ff       	jmp    c0023483 <__udivdi3+0x27>
c002355b:	90                   	nop

c002355c <__umoddi3>:
c002355c:	55                   	push   ebp
c002355d:	57                   	push   edi
c002355e:	56                   	push   esi
c002355f:	53                   	push   ebx
c0023560:	83 ec 1c             	sub    esp,0x1c
c0023563:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023567:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002356b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002356f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023573:	89 da                	mov    edx,ebx
c0023575:	85 c0                	test   eax,eax
c0023577:	75 37                	jne    c00235b0 <__umoddi3+0x54>
c0023579:	39 df                	cmp    edi,ebx
c002357b:	76 13                	jbe    c0023590 <__umoddi3+0x34>
c002357d:	89 f0                	mov    eax,esi
c002357f:	f7 f7                	div    edi
c0023581:	89 d0                	mov    eax,edx
c0023583:	31 d2                	xor    edx,edx
c0023585:	83 c4 1c             	add    esp,0x1c
c0023588:	5b                   	pop    ebx
c0023589:	5e                   	pop    esi
c002358a:	5f                   	pop    edi
c002358b:	5d                   	pop    ebp
c002358c:	c3                   	ret    
c002358d:	8d 76 00             	lea    esi,[esi+0x0]
c0023590:	89 fd                	mov    ebp,edi
c0023592:	85 ff                	test   edi,edi
c0023594:	75 0b                	jne    c00235a1 <__umoddi3+0x45>
c0023596:	b8 01 00 00 00       	mov    eax,0x1
c002359b:	31 d2                	xor    edx,edx
c002359d:	f7 f7                	div    edi
c002359f:	89 c5                	mov    ebp,eax
c00235a1:	89 d8                	mov    eax,ebx
c00235a3:	31 d2                	xor    edx,edx
c00235a5:	f7 f5                	div    ebp
c00235a7:	89 f0                	mov    eax,esi
c00235a9:	f7 f5                	div    ebp
c00235ab:	89 d0                	mov    eax,edx
c00235ad:	eb d4                	jmp    c0023583 <__umoddi3+0x27>
c00235af:	90                   	nop
c00235b0:	89 f1                	mov    ecx,esi
c00235b2:	39 d8                	cmp    eax,ebx
c00235b4:	76 0a                	jbe    c00235c0 <__umoddi3+0x64>
c00235b6:	89 f0                	mov    eax,esi
c00235b8:	83 c4 1c             	add    esp,0x1c
c00235bb:	5b                   	pop    ebx
c00235bc:	5e                   	pop    esi
c00235bd:	5f                   	pop    edi
c00235be:	5d                   	pop    ebp
c00235bf:	c3                   	ret    
c00235c0:	0f bd e8             	bsr    ebp,eax
c00235c3:	83 f5 1f             	xor    ebp,0x1f
c00235c6:	75 1c                	jne    c00235e4 <__umoddi3+0x88>
c00235c8:	39 d8                	cmp    eax,ebx
c00235ca:	72 04                	jb     c00235d0 <__umoddi3+0x74>
c00235cc:	39 f7                	cmp    edi,esi
c00235ce:	77 08                	ja     c00235d8 <__umoddi3+0x7c>
c00235d0:	89 da                	mov    edx,ebx
c00235d2:	29 fe                	sub    esi,edi
c00235d4:	19 c2                	sbb    edx,eax
c00235d6:	89 f1                	mov    ecx,esi
c00235d8:	89 c8                	mov    eax,ecx
c00235da:	83 c4 1c             	add    esp,0x1c
c00235dd:	5b                   	pop    ebx
c00235de:	5e                   	pop    esi
c00235df:	5f                   	pop    edi
c00235e0:	5d                   	pop    ebp
c00235e1:	c3                   	ret    
c00235e2:	66 90                	xchg   ax,ax
c00235e4:	ba 20 00 00 00       	mov    edx,0x20
c00235e9:	29 ea                	sub    edx,ebp
c00235eb:	89 e9                	mov    ecx,ebp
c00235ed:	d3 e0                	shl    eax,cl
c00235ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00235f3:	89 f8                	mov    eax,edi
c00235f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00235f9:	88 d1                	mov    cl,dl
c00235fb:	d3 e8                	shr    eax,cl
c00235fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023601:	09 c1                	or     ecx,eax
c0023603:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023607:	89 e9                	mov    ecx,ebp
c0023609:	d3 e7                	shl    edi,cl
c002360b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002360f:	89 d8                	mov    eax,ebx
c0023611:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023615:	88 d1                	mov    cl,dl
c0023617:	d3 e8                	shr    eax,cl
c0023619:	89 c7                	mov    edi,eax
c002361b:	89 e9                	mov    ecx,ebp
c002361d:	d3 e3                	shl    ebx,cl
c002361f:	89 f0                	mov    eax,esi
c0023621:	88 d1                	mov    cl,dl
c0023623:	d3 e8                	shr    eax,cl
c0023625:	09 d8                	or     eax,ebx
c0023627:	89 e9                	mov    ecx,ebp
c0023629:	d3 e6                	shl    esi,cl
c002362b:	89 f3                	mov    ebx,esi
c002362d:	89 fa                	mov    edx,edi
c002362f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023633:	89 d1                	mov    ecx,edx
c0023635:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023639:	89 c6                	mov    esi,eax
c002363b:	89 d7                	mov    edi,edx
c002363d:	39 d1                	cmp    ecx,edx
c002363f:	72 27                	jb     c0023668 <__umoddi3+0x10c>
c0023641:	74 21                	je     c0023664 <__umoddi3+0x108>
c0023643:	89 ca                	mov    edx,ecx
c0023645:	29 f3                	sub    ebx,esi
c0023647:	19 fa                	sbb    edx,edi
c0023649:	89 d0                	mov    eax,edx
c002364b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002364f:	d3 e0                	shl    eax,cl
c0023651:	89 e9                	mov    ecx,ebp
c0023653:	d3 eb                	shr    ebx,cl
c0023655:	09 d8                	or     eax,ebx
c0023657:	d3 ea                	shr    edx,cl
c0023659:	83 c4 1c             	add    esp,0x1c
c002365c:	5b                   	pop    ebx
c002365d:	5e                   	pop    esi
c002365e:	5f                   	pop    edi
c002365f:	5d                   	pop    ebp
c0023660:	c3                   	ret    
c0023661:	8d 76 00             	lea    esi,[esi+0x0]
c0023664:	39 c3                	cmp    ebx,eax
c0023666:	73 db                	jae    c0023643 <__umoddi3+0xe7>
c0023668:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002366c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0023670:	89 d7                	mov    edi,edx
c0023672:	89 c6                	mov    esi,eax
c0023674:	eb cd                	jmp    c0023643 <__umoddi3+0xe7>

c0023676 <__addsf3>:
c0023676:	55                   	push   ebp
c0023677:	89 e5                	mov    ebp,esp
c0023679:	57                   	push   edi
c002367a:	56                   	push   esi
c002367b:	53                   	push   ebx
c002367c:	83 ec 08             	sub    esp,0x8
c002367f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023682:	89 fa                	mov    edx,edi
c0023684:	89 f8                	mov    eax,edi
c0023686:	c1 f8 17             	sar    eax,0x17
c0023689:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002368c:	c1 e2 08             	shl    edx,0x8
c002368f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023695:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023698:	89 de                	mov    esi,ebx
c002369a:	c1 fe 17             	sar    esi,0x17
c002369d:	c1 e3 08             	shl    ebx,0x8
c00236a0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00236a6:	31 f0                	xor    eax,esi
c00236a8:	0f 88 3b 01 00 00    	js     c00237e9 <__addsf3+0x173>
c00236ae:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00236b1:	29 f1                	sub    ecx,esi
c00236b3:	85 c9                	test   ecx,ecx
c00236b5:	7e 54                	jle    c002370b <__addsf3+0x95>
c00236b7:	89 f0                	mov    eax,esi
c00236b9:	84 c0                	test   al,al
c00236bb:	75 10                	jne    c00236cd <__addsf3+0x57>
c00236bd:	85 db                	test   ebx,ebx
c00236bf:	0f 84 aa 02 00 00    	je     c002396f <__addsf3+0x2f9>
c00236c5:	49                   	dec    ecx
c00236c6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00236c9:	74 38                	je     c0023703 <__addsf3+0x8d>
c00236cb:	eb 13                	jmp    c00236e0 <__addsf3+0x6a>
c00236cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00236d0:	f7 d0                	not    eax
c00236d2:	84 c0                	test   al,al
c00236d4:	0f 84 95 02 00 00    	je     c002396f <__addsf3+0x2f9>
c00236da:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00236e0:	83 f9 1f             	cmp    ecx,0x1f
c00236e3:	0f 8f 86 02 00 00    	jg     c002396f <__addsf3+0x2f9>
c00236e9:	89 de                	mov    esi,ebx
c00236eb:	d3 ee                	shr    esi,cl
c00236ed:	b8 20 00 00 00       	mov    eax,0x20
c00236f2:	29 c8                	sub    eax,ecx
c00236f4:	89 c1                	mov    ecx,eax
c00236f6:	d3 e3                	shl    ebx,cl
c00236f8:	31 c0                	xor    eax,eax
c00236fa:	85 db                	test   ebx,ebx
c00236fc:	0f 95 c0             	setne  al
c00236ff:	09 f0                	or     eax,esi
c0023701:	01 d0                	add    eax,edx
c0023703:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023706:	e9 b6 00 00 00       	jmp    c00237c1 <__addsf3+0x14b>
c002370b:	74 5c                	je     c0023769 <__addsf3+0xf3>
c002370d:	89 f1                	mov    ecx,esi
c002370f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0023712:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023715:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0023719:	75 14                	jne    c002372f <__addsf3+0xb9>
c002371b:	85 d2                	test   edx,edx
c002371d:	0f 84 4c 02 00 00    	je     c002396f <__addsf3+0x2f9>
c0023723:	49                   	dec    ecx
c0023724:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023727:	0f 84 94 00 00 00    	je     c00237c1 <__addsf3+0x14b>
c002372d:	eb 12                	jmp    c0023741 <__addsf3+0xcb>
c002372f:	89 f0                	mov    eax,esi
c0023731:	f7 d0                	not    eax
c0023733:	84 c0                	test   al,al
c0023735:	0f 84 34 02 00 00    	je     c002396f <__addsf3+0x2f9>
c002373b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023741:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023744:	83 f9 1f             	cmp    ecx,0x1f
c0023747:	0f 8f 22 02 00 00    	jg     c002396f <__addsf3+0x2f9>
c002374d:	89 d7                	mov    edi,edx
c002374f:	d3 ef                	shr    edi,cl
c0023751:	b8 20 00 00 00       	mov    eax,0x20
c0023756:	29 c8                	sub    eax,ecx
c0023758:	89 c1                	mov    ecx,eax
c002375a:	d3 e2                	shl    edx,cl
c002375c:	31 c0                	xor    eax,eax
c002375e:	85 d2                	test   edx,edx
c0023760:	0f 95 c0             	setne  al
c0023763:	09 f8                	or     eax,edi
c0023765:	01 d8                	add    eax,ebx
c0023767:	eb 58                	jmp    c00237c1 <__addsf3+0x14b>
c0023769:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002376c:	8d 70 01             	lea    esi,[eax+0x1]
c002376f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0023775:	75 32                	jne    c00237a9 <__addsf3+0x133>
c0023777:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002377b:	75 1f                	jne    c002379c <__addsf3+0x126>
c002377d:	85 d2                	test   edx,edx
c002377f:	0f 84 e0 01 00 00    	je     c0023965 <__addsf3+0x2ef>
c0023785:	85 db                	test   ebx,ebx
c0023787:	0f 84 e2 01 00 00    	je     c002396f <__addsf3+0x2f9>
c002378d:	89 d0                	mov    eax,edx
c002378f:	01 d8                	add    eax,ebx
c0023791:	0f 89 a9 01 00 00    	jns    c0023940 <__addsf3+0x2ca>
c0023797:	e9 9d 01 00 00       	jmp    c0023939 <__addsf3+0x2c3>
c002379c:	85 d2                	test   edx,edx
c002379e:	0f 85 cb 01 00 00    	jne    c002396f <__addsf3+0x2f9>
c00237a4:	e9 bc 01 00 00       	jmp    c0023965 <__addsf3+0x2ef>
c00237a9:	31 c0                	xor    eax,eax
c00237ab:	89 f1                	mov    ecx,esi
c00237ad:	f7 d1                	not    ecx
c00237af:	84 c9                	test   cl,cl
c00237b1:	0f 84 90 01 00 00    	je     c0023947 <__addsf3+0x2d1>
c00237b7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00237ba:	d1 e8                	shr    eax,1
c00237bc:	e9 86 01 00 00       	jmp    c0023947 <__addsf3+0x2d1>
c00237c1:	85 c0                	test   eax,eax
c00237c3:	0f 89 7e 01 00 00    	jns    c0023947 <__addsf3+0x2d1>
c00237c9:	46                   	inc    esi
c00237ca:	89 f2                	mov    edx,esi
c00237cc:	f7 d2                	not    edx
c00237ce:	84 d2                	test   dl,dl
c00237d0:	0f 84 6f 01 00 00    	je     c0023945 <__addsf3+0x2cf>
c00237d6:	89 c2                	mov    edx,eax
c00237d8:	83 e2 01             	and    edx,0x1
c00237db:	d1 e8                	shr    eax,1
c00237dd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00237e2:	09 d0                	or     eax,edx
c00237e4:	e9 5e 01 00 00       	jmp    c0023947 <__addsf3+0x2d1>
c00237e9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00237ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00237f0:	89 f0                	mov    eax,esi
c00237f2:	0f b6 c0             	movzx  eax,al
c00237f5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00237f8:	29 c1                	sub    ecx,eax
c00237fa:	85 c9                	test   ecx,ecx
c00237fc:	7e 55                	jle    c0023853 <__addsf3+0x1dd>
c00237fe:	85 c0                	test   eax,eax
c0023800:	75 11                	jne    c0023813 <__addsf3+0x19d>
c0023802:	85 db                	test   ebx,ebx
c0023804:	0f 84 65 01 00 00    	je     c002396f <__addsf3+0x2f9>
c002380a:	49                   	dec    ecx
c002380b:	75 19                	jne    c0023826 <__addsf3+0x1b0>
c002380d:	89 d0                	mov    eax,edx
c002380f:	29 d8                	sub    eax,ebx
c0023811:	eb 38                	jmp    c002384b <__addsf3+0x1d5>
c0023813:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023816:	f7 d0                	not    eax
c0023818:	84 c0                	test   al,al
c002381a:	0f 84 4f 01 00 00    	je     c002396f <__addsf3+0x2f9>
c0023820:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023826:	83 f9 1f             	cmp    ecx,0x1f
c0023829:	0f 8f 40 01 00 00    	jg     c002396f <__addsf3+0x2f9>
c002382f:	89 de                	mov    esi,ebx
c0023831:	d3 ee                	shr    esi,cl
c0023833:	b8 20 00 00 00       	mov    eax,0x20
c0023838:	29 c8                	sub    eax,ecx
c002383a:	89 c1                	mov    ecx,eax
c002383c:	d3 e3                	shl    ebx,cl
c002383e:	31 c0                	xor    eax,eax
c0023840:	85 db                	test   ebx,ebx
c0023842:	0f 95 c0             	setne  al
c0023845:	09 f0                	or     eax,esi
c0023847:	29 c2                	sub    edx,eax
c0023849:	89 d0                	mov    eax,edx
c002384b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002384e:	e9 af 00 00 00       	jmp    c0023902 <__addsf3+0x28c>
c0023853:	74 5c                	je     c00238b1 <__addsf3+0x23b>
c0023855:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0023858:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002385b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002385f:	75 14                	jne    c0023875 <__addsf3+0x1ff>
c0023861:	85 d2                	test   edx,edx
c0023863:	0f 84 06 01 00 00    	je     c002396f <__addsf3+0x2f9>
c0023869:	48                   	dec    eax
c002386a:	75 1b                	jne    c0023887 <__addsf3+0x211>
c002386c:	89 d8                	mov    eax,ebx
c002386e:	29 d0                	sub    eax,edx
c0023870:	e9 8d 00 00 00       	jmp    c0023902 <__addsf3+0x28c>
c0023875:	89 f1                	mov    ecx,esi
c0023877:	f7 d1                	not    ecx
c0023879:	84 c9                	test   cl,cl
c002387b:	0f 84 ee 00 00 00    	je     c002396f <__addsf3+0x2f9>
c0023881:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023887:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002388a:	83 f8 1f             	cmp    eax,0x1f
c002388d:	0f 8f dc 00 00 00    	jg     c002396f <__addsf3+0x2f9>
c0023893:	89 d7                	mov    edi,edx
c0023895:	88 c1                	mov    cl,al
c0023897:	d3 ef                	shr    edi,cl
c0023899:	b9 20 00 00 00       	mov    ecx,0x20
c002389e:	29 c1                	sub    ecx,eax
c00238a0:	d3 e2                	shl    edx,cl
c00238a2:	31 c0                	xor    eax,eax
c00238a4:	85 d2                	test   edx,edx
c00238a6:	0f 95 c0             	setne  al
c00238a9:	09 f8                	or     eax,edi
c00238ab:	29 c3                	sub    ebx,eax
c00238ad:	89 d8                	mov    eax,ebx
c00238af:	eb 51                	jmp    c0023902 <__addsf3+0x28c>
c00238b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00238b4:	40                   	inc    eax
c00238b5:	a8 fe                	test   al,0xfe
c00238b7:	75 3d                	jne    c00238f6 <__addsf3+0x280>
c00238b9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00238bd:	0f 85 a7 00 00 00    	jne    c002396a <__addsf3+0x2f4>
c00238c3:	85 d2                	test   edx,edx
c00238c5:	75 12                	jne    c00238d9 <__addsf3+0x263>
c00238c7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00238ca:	85 db                	test   ebx,ebx
c00238cc:	0f 85 9d 00 00 00    	jne    c002396f <__addsf3+0x2f9>
c00238d2:	31 ff                	xor    edi,edi
c00238d4:	e9 96 00 00 00       	jmp    c002396f <__addsf3+0x2f9>
c00238d9:	85 db                	test   ebx,ebx
c00238db:	0f 84 8e 00 00 00    	je     c002396f <__addsf3+0x2f9>
c00238e1:	89 d0                	mov    eax,edx
c00238e3:	29 d8                	sub    eax,ebx
c00238e5:	79 06                	jns    c00238ed <__addsf3+0x277>
c00238e7:	89 d8                	mov    eax,ebx
c00238e9:	29 d0                	sub    eax,edx
c00238eb:	eb 5a                	jmp    c0023947 <__addsf3+0x2d1>
c00238ed:	bf 00 00 00 00       	mov    edi,0x0
c00238f2:	74 7b                	je     c002396f <__addsf3+0x2f9>
c00238f4:	eb 4a                	jmp    c0023940 <__addsf3+0x2ca>
c00238f6:	89 d0                	mov    eax,edx
c00238f8:	29 d8                	sub    eax,ebx
c00238fa:	79 12                	jns    c002390e <__addsf3+0x298>
c00238fc:	89 d8                	mov    eax,ebx
c00238fe:	29 d0                	sub    eax,edx
c0023900:	eb 09                	jmp    c002390b <__addsf3+0x295>
c0023902:	85 c0                	test   eax,eax
c0023904:	79 41                	jns    c0023947 <__addsf3+0x2d1>
c0023906:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002390b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002390e:	31 f6                	xor    esi,esi
c0023910:	85 c0                	test   eax,eax
c0023912:	74 33                	je     c0023947 <__addsf3+0x2d1>
c0023914:	0f bd c8             	bsr    ecx,eax
c0023917:	83 f1 1f             	xor    ecx,0x1f
c002391a:	d3 e0                	shl    eax,cl
c002391c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0023920:	39 ca                	cmp    edx,ecx
c0023922:	7f 10                	jg     c0023934 <__addsf3+0x2be>
c0023924:	29 d1                	sub    ecx,edx
c0023926:	41                   	inc    ecx
c0023927:	d3 e8                	shr    eax,cl
c0023929:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002392c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0023932:	eb 13                	jmp    c0023947 <__addsf3+0x2d1>
c0023934:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023937:	29 ce                	sub    esi,ecx
c0023939:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002393e:	eb 07                	jmp    c0023947 <__addsf3+0x2d1>
c0023940:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023943:	eb 02                	jmp    c0023947 <__addsf3+0x2d1>
c0023945:	31 c0                	xor    eax,eax
c0023947:	89 c2                	mov    edx,eax
c0023949:	c1 ea 08             	shr    edx,0x8
c002394c:	a8 7f                	test   al,0x7f
c002394e:	0f 95 c1             	setne  cl
c0023951:	09 d1                	or     ecx,edx
c0023953:	83 e1 01             	and    ecx,0x1
c0023956:	c1 e8 07             	shr    eax,0x7
c0023959:	21 c8                	and    eax,ecx
c002395b:	c1 e6 17             	shl    esi,0x17
c002395e:	09 d6                	or     esi,edx
c0023960:	8d 3c 30             	lea    edi,[eax+esi*1]
c0023963:	eb 0a                	jmp    c002396f <__addsf3+0x2f9>
c0023965:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023968:	eb 05                	jmp    c002396f <__addsf3+0x2f9>
c002396a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002396f:	89 f8                	mov    eax,edi
c0023971:	5a                   	pop    edx
c0023972:	59                   	pop    ecx
c0023973:	5b                   	pop    ebx
c0023974:	5e                   	pop    esi
c0023975:	5f                   	pop    edi
c0023976:	5d                   	pop    ebp
c0023977:	c3                   	ret    

c0023978 <__subsf3>:
c0023978:	55                   	push   ebp
c0023979:	89 e5                	mov    ebp,esp
c002397b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002397e:	05 00 00 00 80       	add    eax,0x80000000
c0023983:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0023986:	5d                   	pop    ebp
c0023987:	e9 ea fc ff ff       	jmp    c0023676 <__addsf3>

c002398c <__negsf2>:
c002398c:	55                   	push   ebp
c002398d:	89 e5                	mov    ebp,esp
c002398f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023992:	05 00 00 00 80       	add    eax,0x80000000
c0023997:	5d                   	pop    ebp
c0023998:	c3                   	ret    

c0023999 <__mulsf3>:
c0023999:	55                   	push   ebp
c002399a:	89 e5                	mov    ebp,esp
c002399c:	57                   	push   edi
c002399d:	56                   	push   esi
c002399e:	53                   	push   ebx
c002399f:	83 ec 1c             	sub    esp,0x1c
c00239a2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00239a5:	89 f0                	mov    eax,esi
c00239a7:	89 f1                	mov    ecx,esi
c00239a9:	c1 f9 17             	sar    ecx,0x17
c00239ac:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00239af:	c1 e0 08             	shl    eax,0x8
c00239b2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00239b7:	89 c1                	mov    ecx,eax
c00239b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00239bc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00239bf:	89 c7                	mov    edi,eax
c00239c1:	c1 ff 17             	sar    edi,0x17
c00239c4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00239c8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00239cb:	89 f8                	mov    eax,edi
c00239cd:	0f b6 c0             	movzx  eax,al
c00239d0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00239d3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00239d7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00239da:	42                   	inc    edx
c00239db:	80 e2 fe             	and    dl,0xfe
c00239de:	75 7b                	jne    c0023a5b <__mulsf3+0xc2>
c00239e0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00239e4:	74 54                	je     c0023a3a <__mulsf3+0xa1>
c00239e6:	85 c9                	test   ecx,ecx
c00239e8:	0f 85 64 01 00 00    	jne    c0023b52 <__mulsf3+0x1b9>
c00239ee:	8d 57 01             	lea    edx,[edi+0x1]
c00239f1:	80 e2 fe             	and    dl,0xfe
c00239f4:	75 1f                	jne    c0023a15 <__mulsf3+0x7c>
c00239f6:	85 c0                	test   eax,eax
c00239f8:	b8 00 00 00 00       	mov    eax,0x0
c00239fd:	74 29                	je     c0023a28 <__mulsf3+0x8f>
c00239ff:	53                   	push   ebx
c0023a00:	53                   	push   ebx
c0023a01:	50                   	push   eax
c0023a02:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023a05:	e8 96 05 00 00       	call   c0023fa0 <__nesf2>
c0023a0a:	83 c4 10             	add    esp,0x10
c0023a0d:	85 c0                	test   eax,eax
c0023a0f:	0f 85 3a 01 00 00    	jne    c0023b4f <__mulsf3+0x1b6>
c0023a15:	85 ff                	test   edi,edi
c0023a17:	0f 89 35 01 00 00    	jns    c0023b52 <__mulsf3+0x1b9>
c0023a1d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0023a23:	e9 2a 01 00 00       	jmp    c0023b52 <__mulsf3+0x1b9>
c0023a28:	51                   	push   ecx
c0023a29:	51                   	push   ecx
c0023a2a:	50                   	push   eax
c0023a2b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023a2e:	e8 6d 05 00 00       	call   c0023fa0 <__nesf2>
c0023a33:	83 c4 10             	add    esp,0x10
c0023a36:	85 c0                	test   eax,eax
c0023a38:	eb 15                	jmp    c0023a4f <__mulsf3+0xb6>
c0023a3a:	85 c9                	test   ecx,ecx
c0023a3c:	74 0b                	je     c0023a49 <__mulsf3+0xb0>
c0023a3e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0023a41:	01 c9                	add    ecx,ecx
c0023a43:	78 16                	js     c0023a5b <__mulsf3+0xc2>
c0023a45:	89 d3                	mov    ebx,edx
c0023a47:	eb f5                	jmp    c0023a3e <__mulsf3+0xa5>
c0023a49:	89 f8                	mov    eax,edi
c0023a4b:	f7 d0                	not    eax
c0023a4d:	84 c0                	test   al,al
c0023a4f:	75 c4                	jne    c0023a15 <__mulsf3+0x7c>
c0023a51:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0023a56:	e9 f7 00 00 00       	jmp    c0023b52 <__mulsf3+0x1b9>
c0023a5b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0023a5e:	c1 e6 08             	shl    esi,0x8
c0023a61:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0023a67:	8d 57 01             	lea    edx,[edi+0x1]
c0023a6a:	80 e2 fe             	and    dl,0xfe
c0023a6d:	75 63                	jne    c0023ad2 <__mulsf3+0x139>
c0023a6f:	85 c0                	test   eax,eax
c0023a71:	74 2f                	je     c0023aa2 <__mulsf3+0x109>
c0023a73:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023a77:	0f 89 d2 00 00 00    	jns    c0023b4f <__mulsf3+0x1b6>
c0023a7d:	52                   	push   edx
c0023a7e:	52                   	push   edx
c0023a7f:	6a 00                	push   0x0
c0023a81:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023a84:	e8 dc 04 00 00       	call   c0023f65 <__eqsf2>
c0023a89:	83 c4 10             	add    esp,0x10
c0023a8c:	85 c0                	test   eax,eax
c0023a8e:	0f 85 bb 00 00 00    	jne    c0023b4f <__mulsf3+0x1b6>
c0023a94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023a97:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0023a9d:	e9 b0 00 00 00       	jmp    c0023b52 <__mulsf3+0x1b9>
c0023aa2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023aa5:	50                   	push   eax
c0023aa6:	50                   	push   eax
c0023aa7:	6a 00                	push   0x0
c0023aa9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023aac:	e8 b4 04 00 00       	call   c0023f65 <__eqsf2>
c0023ab1:	83 c4 10             	add    esp,0x10
c0023ab4:	85 c0                	test   eax,eax
c0023ab6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023ab9:	75 0c                	jne    c0023ac7 <__mulsf3+0x12e>
c0023abb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023abf:	0f 89 8a 00 00 00    	jns    c0023b4f <__mulsf3+0x1b6>
c0023ac5:	eb cd                	jmp    c0023a94 <__mulsf3+0xfb>
c0023ac7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0023aca:	01 f6                	add    esi,esi
c0023acc:	78 04                	js     c0023ad2 <__mulsf3+0x139>
c0023ace:	89 c3                	mov    ebx,eax
c0023ad0:	eb f5                	jmp    c0023ac7 <__mulsf3+0x12e>
c0023ad2:	89 c8                	mov    eax,ecx
c0023ad4:	0d 00 00 00 80       	or     eax,0x80000000
c0023ad9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0023adf:	f7 e6                	mul    esi
c0023ae1:	85 c0                	test   eax,eax
c0023ae3:	0f 95 c0             	setne  al
c0023ae6:	0f b6 c0             	movzx  eax,al
c0023ae9:	09 c2                	or     edx,eax
c0023aeb:	78 03                	js     c0023af0 <__mulsf3+0x157>
c0023aed:	01 d2                	add    edx,edx
c0023aef:	4b                   	dec    ebx
c0023af0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0023af6:	7f 22                	jg     c0023b1a <__mulsf3+0x181>
c0023af8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023afe:	85 db                	test   ebx,ebx
c0023b00:	7f 23                	jg     c0023b25 <__mulsf3+0x18c>
c0023b02:	83 fb e9             	cmp    ebx,0xffffffe9
c0023b05:	7c 1a                	jl     c0023b21 <__mulsf3+0x188>
c0023b07:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023b0d:	b9 01 00 00 00       	mov    ecx,0x1
c0023b12:	29 d9                	sub    ecx,ebx
c0023b14:	d3 ea                	shr    edx,cl
c0023b16:	31 db                	xor    ebx,ebx
c0023b18:	eb 0b                	jmp    c0023b25 <__mulsf3+0x18c>
c0023b1a:	bb ff 00 00 00       	mov    ebx,0xff
c0023b1f:	eb 02                	jmp    c0023b23 <__mulsf3+0x18a>
c0023b21:	31 db                	xor    ebx,ebx
c0023b23:	31 d2                	xor    edx,edx
c0023b25:	89 d0                	mov    eax,edx
c0023b27:	c1 e8 08             	shr    eax,0x8
c0023b2a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023b2d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023b33:	09 fb                	or     ebx,edi
c0023b35:	c1 e3 17             	shl    ebx,0x17
c0023b38:	09 c3                	or     ebx,eax
c0023b3a:	f6 c2 7f             	test   dl,0x7f
c0023b3d:	0f 95 c1             	setne  cl
c0023b40:	09 c8                	or     eax,ecx
c0023b42:	83 e0 01             	and    eax,0x1
c0023b45:	c1 ea 07             	shr    edx,0x7
c0023b48:	21 c2                	and    edx,eax
c0023b4a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0023b4d:	eb 03                	jmp    c0023b52 <__mulsf3+0x1b9>
c0023b4f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0023b52:	89 f0                	mov    eax,esi
c0023b54:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023b57:	5b                   	pop    ebx
c0023b58:	5e                   	pop    esi
c0023b59:	5f                   	pop    edi
c0023b5a:	5d                   	pop    ebp
c0023b5b:	c3                   	ret    

c0023b5c <__divsf3>:
c0023b5c:	55                   	push   ebp
c0023b5d:	89 e5                	mov    ebp,esp
c0023b5f:	57                   	push   edi
c0023b60:	56                   	push   esi
c0023b61:	53                   	push   ebx
c0023b62:	83 ec 1c             	sub    esp,0x1c
c0023b65:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0023b68:	89 d8                	mov    eax,ebx
c0023b6a:	89 d9                	mov    ecx,ebx
c0023b6c:	c1 f9 17             	sar    ecx,0x17
c0023b6f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023b72:	c1 e0 08             	shl    eax,0x8
c0023b75:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023b7a:	89 c1                	mov    ecx,eax
c0023b7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023b7f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023b82:	89 c7                	mov    edi,eax
c0023b84:	c1 ff 17             	sar    edi,0x17
c0023b87:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023b8b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023b8e:	89 f8                	mov    eax,edi
c0023b90:	0f b6 c0             	movzx  eax,al
c0023b93:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023b96:	29 c6                	sub    esi,eax
c0023b98:	83 c6 7f             	add    esi,0x7f
c0023b9b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023b9e:	42                   	inc    edx
c0023b9f:	80 e2 fe             	and    dl,0xfe
c0023ba2:	0f 85 9c 00 00 00    	jne    c0023c44 <__divsf3+0xe8>
c0023ba8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023bac:	74 33                	je     c0023be1 <__divsf3+0x85>
c0023bae:	85 c9                	test   ecx,ecx
c0023bb0:	0f 85 c7 01 00 00    	jne    c0023d7d <__divsf3+0x221>
c0023bb6:	8d 57 01             	lea    edx,[edi+0x1]
c0023bb9:	80 e2 fe             	and    dl,0xfe
c0023bbc:	75 2f                	jne    c0023bed <__divsf3+0x91>
c0023bbe:	85 c0                	test   eax,eax
c0023bc0:	74 2b                	je     c0023bed <__divsf3+0x91>
c0023bc2:	51                   	push   ecx
c0023bc3:	51                   	push   ecx
c0023bc4:	6a 00                	push   0x0
c0023bc6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023bc9:	e8 d2 03 00 00       	call   c0023fa0 <__nesf2>
c0023bce:	83 c4 10             	add    esp,0x10
c0023bd1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023bd4:	85 c0                	test   eax,eax
c0023bd6:	0f 85 a1 01 00 00    	jne    c0023d7d <__divsf3+0x221>
c0023bdc:	e9 92 01 00 00       	jmp    c0023d73 <__divsf3+0x217>
c0023be1:	85 c9                	test   ecx,ecx
c0023be3:	75 1b                	jne    c0023c00 <__divsf3+0xa4>
c0023be5:	8d 57 01             	lea    edx,[edi+0x1]
c0023be8:	80 e2 fe             	and    dl,0xfe
c0023beb:	74 1e                	je     c0023c0b <__divsf3+0xaf>
c0023bed:	85 ff                	test   edi,edi
c0023bef:	0f 89 88 01 00 00    	jns    c0023d7d <__divsf3+0x221>
c0023bf5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0023bfb:	e9 7d 01 00 00       	jmp    c0023d7d <__divsf3+0x221>
c0023c00:	8d 56 ff             	lea    edx,[esi-0x1]
c0023c03:	01 c9                	add    ecx,ecx
c0023c05:	78 3d                	js     c0023c44 <__divsf3+0xe8>
c0023c07:	89 d6                	mov    esi,edx
c0023c09:	eb f5                	jmp    c0023c00 <__divsf3+0xa4>
c0023c0b:	85 c0                	test   eax,eax
c0023c0d:	b8 00 00 00 00       	mov    eax,0x0
c0023c12:	74 18                	je     c0023c2c <__divsf3+0xd0>
c0023c14:	52                   	push   edx
c0023c15:	52                   	push   edx
c0023c16:	50                   	push   eax
c0023c17:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023c1a:	e8 81 03 00 00       	call   c0023fa0 <__nesf2>
c0023c1f:	83 c4 10             	add    esp,0x10
c0023c22:	85 c0                	test   eax,eax
c0023c24:	0f 85 50 01 00 00    	jne    c0023d7a <__divsf3+0x21e>
c0023c2a:	eb c1                	jmp    c0023bed <__divsf3+0x91>
c0023c2c:	56                   	push   esi
c0023c2d:	56                   	push   esi
c0023c2e:	50                   	push   eax
c0023c2f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023c32:	e8 69 03 00 00       	call   c0023fa0 <__nesf2>
c0023c37:	83 c4 10             	add    esp,0x10
c0023c3a:	85 c0                	test   eax,eax
c0023c3c:	0f 84 31 01 00 00    	je     c0023d73 <__divsf3+0x217>
c0023c42:	eb a9                	jmp    c0023bed <__divsf3+0x91>
c0023c44:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0023c47:	c1 e3 08             	shl    ebx,0x8
c0023c4a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023c50:	8d 57 01             	lea    edx,[edi+0x1]
c0023c53:	80 e2 fe             	and    dl,0xfe
c0023c56:	75 71                	jne    c0023cc9 <__divsf3+0x16d>
c0023c58:	85 c0                	test   eax,eax
c0023c5a:	ba 00 00 00 00       	mov    edx,0x0
c0023c5f:	74 2f                	je     c0023c90 <__divsf3+0x134>
c0023c61:	51                   	push   ecx
c0023c62:	51                   	push   ecx
c0023c63:	52                   	push   edx
c0023c64:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023c67:	e8 f9 02 00 00       	call   c0023f65 <__eqsf2>
c0023c6c:	83 c4 10             	add    esp,0x10
c0023c6f:	85 c0                	test   eax,eax
c0023c71:	0f 85 03 01 00 00    	jne    c0023d7a <__divsf3+0x21e>
c0023c77:	31 d2                	xor    edx,edx
c0023c79:	89 d3                	mov    ebx,edx
c0023c7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023c7e:	31 f8                	xor    eax,edi
c0023c80:	0f 89 f7 00 00 00    	jns    c0023d7d <__divsf3+0x221>
c0023c86:	bb 00 00 00 80       	mov    ebx,0x80000000
c0023c8b:	e9 ed 00 00 00       	jmp    c0023d7d <__divsf3+0x221>
c0023c90:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023c93:	50                   	push   eax
c0023c94:	50                   	push   eax
c0023c95:	52                   	push   edx
c0023c96:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023c99:	e8 c7 02 00 00       	call   c0023f65 <__eqsf2>
c0023c9e:	83 c4 10             	add    esp,0x10
c0023ca1:	85 c0                	test   eax,eax
c0023ca3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023ca6:	75 16                	jne    c0023cbe <__divsf3+0x162>
c0023ca8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023cab:	31 fb                	xor    ebx,edi
c0023cad:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0023cb3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0023cb9:	e9 bf 00 00 00       	jmp    c0023d7d <__divsf3+0x221>
c0023cbe:	8d 46 01             	lea    eax,[esi+0x1]
c0023cc1:	01 db                	add    ebx,ebx
c0023cc3:	78 04                	js     c0023cc9 <__divsf3+0x16d>
c0023cc5:	89 c6                	mov    esi,eax
c0023cc7:	eb f5                	jmp    c0023cbe <__divsf3+0x162>
c0023cc9:	89 c8                	mov    eax,ecx
c0023ccb:	0d 00 00 00 80       	or     eax,0x80000000
c0023cd0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023cd6:	31 d2                	xor    edx,edx
c0023cd8:	39 d8                	cmp    eax,ebx
c0023cda:	72 07                	jb     c0023ce3 <__divsf3+0x187>
c0023cdc:	29 d8                	sub    eax,ebx
c0023cde:	ba 01 00 00 00       	mov    edx,0x1
c0023ce3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0023cea:	01 d2                	add    edx,edx
c0023cec:	89 c1                	mov    ecx,eax
c0023cee:	01 c0                	add    eax,eax
c0023cf0:	85 c9                	test   ecx,ecx
c0023cf2:	78 04                	js     c0023cf8 <__divsf3+0x19c>
c0023cf4:	39 c3                	cmp    ebx,eax
c0023cf6:	77 05                	ja     c0023cfd <__divsf3+0x1a1>
c0023cf8:	29 d8                	sub    eax,ebx
c0023cfa:	83 ca 01             	or     edx,0x1
c0023cfd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0023d00:	75 e8                	jne    c0023cea <__divsf3+0x18e>
c0023d02:	85 c0                	test   eax,eax
c0023d04:	0f 95 c0             	setne  al
c0023d07:	0f b6 c0             	movzx  eax,al
c0023d0a:	c1 e2 06             	shl    edx,0x6
c0023d0d:	09 c2                	or     edx,eax
c0023d0f:	78 03                	js     c0023d14 <__divsf3+0x1b8>
c0023d11:	01 d2                	add    edx,edx
c0023d13:	4e                   	dec    esi
c0023d14:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0023d1a:	7f 22                	jg     c0023d3e <__divsf3+0x1e2>
c0023d1c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023d22:	85 f6                	test   esi,esi
c0023d24:	7f 23                	jg     c0023d49 <__divsf3+0x1ed>
c0023d26:	83 fe e9             	cmp    esi,0xffffffe9
c0023d29:	7c 1a                	jl     c0023d45 <__divsf3+0x1e9>
c0023d2b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023d31:	b9 01 00 00 00       	mov    ecx,0x1
c0023d36:	29 f1                	sub    ecx,esi
c0023d38:	d3 ea                	shr    edx,cl
c0023d3a:	31 f6                	xor    esi,esi
c0023d3c:	eb 0b                	jmp    c0023d49 <__divsf3+0x1ed>
c0023d3e:	be ff 00 00 00       	mov    esi,0xff
c0023d43:	eb 02                	jmp    c0023d47 <__divsf3+0x1eb>
c0023d45:	31 f6                	xor    esi,esi
c0023d47:	31 d2                	xor    edx,edx
c0023d49:	89 d0                	mov    eax,edx
c0023d4b:	c1 e8 08             	shr    eax,0x8
c0023d4e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023d51:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023d57:	09 fe                	or     esi,edi
c0023d59:	c1 e6 17             	shl    esi,0x17
c0023d5c:	09 c6                	or     esi,eax
c0023d5e:	f6 c2 7f             	test   dl,0x7f
c0023d61:	0f 95 c1             	setne  cl
c0023d64:	09 c8                	or     eax,ecx
c0023d66:	83 e0 01             	and    eax,0x1
c0023d69:	c1 ea 07             	shr    edx,0x7
c0023d6c:	21 c2                	and    edx,eax
c0023d6e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0023d71:	eb 0a                	jmp    c0023d7d <__divsf3+0x221>
c0023d73:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0023d78:	eb 03                	jmp    c0023d7d <__divsf3+0x221>
c0023d7a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023d7d:	89 d8                	mov    eax,ebx
c0023d7f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023d82:	5b                   	pop    ebx
c0023d83:	5e                   	pop    esi
c0023d84:	5f                   	pop    edi
c0023d85:	5d                   	pop    ebp
c0023d86:	c3                   	ret    

c0023d87 <__floatsisf>:
c0023d87:	55                   	push   ebp
c0023d88:	89 e5                	mov    ebp,esp
c0023d8a:	53                   	push   ebx
c0023d8b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023d8e:	85 d2                	test   edx,edx
c0023d90:	7e 2b                	jle    c0023dbd <__floatsisf+0x36>
c0023d92:	0f bd ca             	bsr    ecx,edx
c0023d95:	83 f1 1f             	xor    ecx,0x1f
c0023d98:	d3 e2                	shl    edx,cl
c0023d9a:	89 d0                	mov    eax,edx
c0023d9c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023da1:	89 c3                	mov    ebx,eax
c0023da3:	c1 eb 08             	shr    ebx,0x8
c0023da6:	80 e2 7f             	and    dl,0x7f
c0023da9:	0f 95 c2             	setne  dl
c0023dac:	09 da                	or     edx,ebx
c0023dae:	83 e2 01             	and    edx,0x1
c0023db1:	c1 e8 07             	shr    eax,0x7
c0023db4:	21 c2                	and    edx,eax
c0023db6:	b8 9e 00 00 00       	mov    eax,0x9e
c0023dbb:	eb 32                	jmp    c0023def <__floatsisf+0x68>
c0023dbd:	b8 00 00 00 00       	mov    eax,0x0
c0023dc2:	74 34                	je     c0023df8 <__floatsisf+0x71>
c0023dc4:	f7 da                	neg    edx
c0023dc6:	0f bd ca             	bsr    ecx,edx
c0023dc9:	83 f1 1f             	xor    ecx,0x1f
c0023dcc:	d3 e2                	shl    edx,cl
c0023dce:	89 d0                	mov    eax,edx
c0023dd0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023dd5:	89 c3                	mov    ebx,eax
c0023dd7:	c1 eb 08             	shr    ebx,0x8
c0023dda:	80 e2 7f             	and    dl,0x7f
c0023ddd:	0f 95 c2             	setne  dl
c0023de0:	09 da                	or     edx,ebx
c0023de2:	83 e2 01             	and    edx,0x1
c0023de5:	c1 e8 07             	shr    eax,0x7
c0023de8:	21 c2                	and    edx,eax
c0023dea:	b8 9e 01 00 00       	mov    eax,0x19e
c0023def:	29 c8                	sub    eax,ecx
c0023df1:	c1 e0 17             	shl    eax,0x17
c0023df4:	09 d8                	or     eax,ebx
c0023df6:	01 d0                	add    eax,edx
c0023df8:	5b                   	pop    ebx
c0023df9:	5d                   	pop    ebp
c0023dfa:	c3                   	ret    

c0023dfb <__floatunsisf>:
c0023dfb:	55                   	push   ebp
c0023dfc:	89 e5                	mov    ebp,esp
c0023dfe:	53                   	push   ebx
c0023dff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023e02:	31 c0                	xor    eax,eax
c0023e04:	85 d2                	test   edx,edx
c0023e06:	74 32                	je     c0023e3a <__floatunsisf+0x3f>
c0023e08:	0f bd ca             	bsr    ecx,edx
c0023e0b:	83 f1 1f             	xor    ecx,0x1f
c0023e0e:	d3 e2                	shl    edx,cl
c0023e10:	89 d0                	mov    eax,edx
c0023e12:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023e17:	89 c3                	mov    ebx,eax
c0023e19:	c1 eb 08             	shr    ebx,0x8
c0023e1c:	80 e2 7f             	and    dl,0x7f
c0023e1f:	0f 95 c2             	setne  dl
c0023e22:	09 da                	or     edx,ebx
c0023e24:	83 e2 01             	and    edx,0x1
c0023e27:	c1 e8 07             	shr    eax,0x7
c0023e2a:	21 c2                	and    edx,eax
c0023e2c:	b8 9e 00 00 00       	mov    eax,0x9e
c0023e31:	29 c8                	sub    eax,ecx
c0023e33:	c1 e0 17             	shl    eax,0x17
c0023e36:	09 d8                	or     eax,ebx
c0023e38:	01 d0                	add    eax,edx
c0023e3a:	5b                   	pop    ebx
c0023e3b:	5d                   	pop    ebp
c0023e3c:	c3                   	ret    

c0023e3d <__fixsfsi>:
c0023e3d:	55                   	push   ebp
c0023e3e:	89 e5                	mov    ebp,esp
c0023e40:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023e43:	89 d1                	mov    ecx,edx
c0023e45:	c1 e1 08             	shl    ecx,0x8
c0023e48:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0023e4e:	c1 fa 17             	sar    edx,0x17
c0023e51:	78 1c                	js     c0023e6f <__fixsfsi+0x32>
c0023e53:	83 ea 7f             	sub    edx,0x7f
c0023e56:	31 c0                	xor    eax,eax
c0023e58:	83 fa 1e             	cmp    edx,0x1e
c0023e5b:	77 40                	ja     c0023e9d <__fixsfsi+0x60>
c0023e5d:	89 c8                	mov    eax,ecx
c0023e5f:	0d 00 00 00 80       	or     eax,0x80000000
c0023e64:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023e69:	29 d1                	sub    ecx,edx
c0023e6b:	d3 e8                	shr    eax,cl
c0023e6d:	eb 2e                	jmp    c0023e9d <__fixsfsi+0x60>
c0023e6f:	31 c0                	xor    eax,eax
c0023e71:	81 c2 81 00 00 00    	add    edx,0x81
c0023e77:	78 24                	js     c0023e9d <__fixsfsi+0x60>
c0023e79:	83 fa 1e             	cmp    edx,0x1e
c0023e7c:	7e 09                	jle    c0023e87 <__fixsfsi+0x4a>
c0023e7e:	83 fa 1f             	cmp    edx,0x1f
c0023e81:	75 18                	jne    c0023e9b <__fixsfsi+0x5e>
c0023e83:	85 c9                	test   ecx,ecx
c0023e85:	75 14                	jne    c0023e9b <__fixsfsi+0x5e>
c0023e87:	89 c8                	mov    eax,ecx
c0023e89:	0d 00 00 00 80       	or     eax,0x80000000
c0023e8e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023e93:	29 d1                	sub    ecx,edx
c0023e95:	d3 e8                	shr    eax,cl
c0023e97:	f7 d8                	neg    eax
c0023e99:	eb 02                	jmp    c0023e9d <__fixsfsi+0x60>
c0023e9b:	31 c0                	xor    eax,eax
c0023e9d:	5d                   	pop    ebp
c0023e9e:	c3                   	ret    

c0023e9f <__fixunssfsi>:
c0023e9f:	55                   	push   ebp
c0023ea0:	89 e5                	mov    ebp,esp
c0023ea2:	53                   	push   ebx
c0023ea3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023ea6:	89 d3                	mov    ebx,edx
c0023ea8:	c1 fb 17             	sar    ebx,0x17
c0023eab:	83 eb 7f             	sub    ebx,0x7f
c0023eae:	31 c0                	xor    eax,eax
c0023eb0:	83 fb 1f             	cmp    ebx,0x1f
c0023eb3:	77 18                	ja     c0023ecd <__fixunssfsi+0x2e>
c0023eb5:	89 d0                	mov    eax,edx
c0023eb7:	c1 e0 08             	shl    eax,0x8
c0023eba:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023ebf:	0d 00 00 00 80       	or     eax,0x80000000
c0023ec4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023ec9:	29 d9                	sub    ecx,ebx
c0023ecb:	d3 e8                	shr    eax,cl
c0023ecd:	5b                   	pop    ebx
c0023ece:	5d                   	pop    ebp
c0023ecf:	c3                   	ret    

c0023ed0 <__cmpsf2>:
c0023ed0:	55                   	push   ebp
c0023ed1:	89 e5                	mov    ebp,esp
c0023ed3:	57                   	push   edi
c0023ed4:	56                   	push   esi
c0023ed5:	53                   	push   ebx
c0023ed6:	83 ec 24             	sub    esp,0x24
c0023ed9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023edc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023edf:	e8 4f 10 00 00       	call   c0024f33 <__truncdfsf2>
c0023ee4:	5a                   	pop    edx
c0023ee5:	59                   	pop    ecx
c0023ee6:	89 c3                	mov    ebx,eax
c0023ee8:	c1 e8 17             	shr    eax,0x17
c0023eeb:	0f b6 f0             	movzx  esi,al
c0023eee:	89 d8                	mov    eax,ebx
c0023ef0:	c1 e8 1f             	shr    eax,0x1f
c0023ef3:	31 c6                	xor    esi,eax
c0023ef5:	c1 e3 08             	shl    ebx,0x8
c0023ef8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0023efb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0023efe:	e8 30 10 00 00       	call   c0024f33 <__truncdfsf2>
c0023f03:	83 c4 10             	add    esp,0x10
c0023f06:	89 c1                	mov    ecx,eax
c0023f08:	c1 e9 17             	shr    ecx,0x17
c0023f0b:	0f b6 c9             	movzx  ecx,cl
c0023f0e:	89 c7                	mov    edi,eax
c0023f10:	c1 ef 1f             	shr    edi,0x1f
c0023f13:	89 ca                	mov    edx,ecx
c0023f15:	31 fa                	xor    edx,edi
c0023f17:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0023f1a:	c1 e0 08             	shl    eax,0x8
c0023f1d:	89 c2                	mov    edx,eax
c0023f1f:	89 d8                	mov    eax,ebx
c0023f21:	09 d0                	or     eax,edx
c0023f23:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023f28:	09 f0                	or     eax,esi
c0023f2a:	75 08                	jne    c0023f34 <__cmpsf2+0x64>
c0023f2c:	31 c0                	xor    eax,eax
c0023f2e:	39 f9                	cmp    ecx,edi
c0023f30:	75 0c                	jne    c0023f3e <__cmpsf2+0x6e>
c0023f32:	eb 29                	jmp    c0023f5d <__cmpsf2+0x8d>
c0023f34:	b8 01 00 00 00       	mov    eax,0x1
c0023f39:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023f3c:	7f 1f                	jg     c0023f5d <__cmpsf2+0x8d>
c0023f3e:	83 c8 ff             	or     eax,0xffffffff
c0023f41:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023f44:	7c 17                	jl     c0023f5d <__cmpsf2+0x8d>
c0023f46:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023f4c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023f52:	b8 01 00 00 00       	mov    eax,0x1
c0023f57:	39 d3                	cmp    ebx,edx
c0023f59:	77 02                	ja     c0023f5d <__cmpsf2+0x8d>
c0023f5b:	19 c0                	sbb    eax,eax
c0023f5d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023f60:	5b                   	pop    ebx
c0023f61:	5e                   	pop    esi
c0023f62:	5f                   	pop    edi
c0023f63:	5d                   	pop    ebp
c0023f64:	c3                   	ret    

c0023f65 <__eqsf2>:
c0023f65:	55                   	push   ebp
c0023f66:	89 e5                	mov    ebp,esp
c0023f68:	83 ec 24             	sub    esp,0x24
c0023f6b:	6a 01                	push   0x1
c0023f6d:	83 ec 0c             	sub    esp,0xc
c0023f70:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023f73:	e8 df 10 00 00       	call   c0025057 <__extendsfdf2>
c0023f78:	83 c4 10             	add    esp,0x10
c0023f7b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023f7e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023f81:	52                   	push   edx
c0023f82:	50                   	push   eax
c0023f83:	50                   	push   eax
c0023f84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023f87:	e8 cb 10 00 00       	call   c0025057 <__extendsfdf2>
c0023f8c:	59                   	pop    ecx
c0023f8d:	59                   	pop    ecx
c0023f8e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023f91:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023f94:	52                   	push   edx
c0023f95:	50                   	push   eax
c0023f96:	e8 35 ff ff ff       	call   c0023ed0 <__cmpsf2>
c0023f9b:	83 c4 20             	add    esp,0x20
c0023f9e:	c9                   	leave  
c0023f9f:	c3                   	ret    

c0023fa0 <__nesf2>:
c0023fa0:	eb c3                	jmp    c0023f65 <__eqsf2>

c0023fa2 <__gtsf2>:
c0023fa2:	55                   	push   ebp
c0023fa3:	89 e5                	mov    ebp,esp
c0023fa5:	83 ec 24             	sub    esp,0x24
c0023fa8:	6a ff                	push   0xffffffff
c0023faa:	83 ec 0c             	sub    esp,0xc
c0023fad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023fb0:	e8 a2 10 00 00       	call   c0025057 <__extendsfdf2>
c0023fb5:	83 c4 10             	add    esp,0x10
c0023fb8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023fbb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023fbe:	52                   	push   edx
c0023fbf:	50                   	push   eax
c0023fc0:	50                   	push   eax
c0023fc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023fc4:	e8 8e 10 00 00       	call   c0025057 <__extendsfdf2>
c0023fc9:	59                   	pop    ecx
c0023fca:	59                   	pop    ecx
c0023fcb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023fce:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023fd1:	52                   	push   edx
c0023fd2:	50                   	push   eax
c0023fd3:	e8 f8 fe ff ff       	call   c0023ed0 <__cmpsf2>
c0023fd8:	83 c4 20             	add    esp,0x20
c0023fdb:	c9                   	leave  
c0023fdc:	c3                   	ret    

c0023fdd <__gesf2>:
c0023fdd:	eb c3                	jmp    c0023fa2 <__gtsf2>

c0023fdf <__ltsf2>:
c0023fdf:	eb 84                	jmp    c0023f65 <__eqsf2>

c0023fe1 <__lesf2>:
c0023fe1:	eb 82                	jmp    c0023f65 <__eqsf2>

c0023fe3 <__adddf3>:
c0023fe3:	55                   	push   ebp
c0023fe4:	89 e5                	mov    ebp,esp
c0023fe6:	57                   	push   edi
c0023fe7:	56                   	push   esi
c0023fe8:	53                   	push   ebx
c0023fe9:	83 ec 24             	sub    esp,0x24
c0023fec:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023fef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0023ff2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0023ff5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023ff8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023ffb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0023ffe:	89 c8                	mov    eax,ecx
c0024000:	89 ce                	mov    esi,ecx
c0024002:	c1 fe 14             	sar    esi,0x14
c0024005:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0024008:	89 fb                	mov    ebx,edi
c002400a:	89 fa                	mov    edx,edi
c002400c:	c1 e2 0b             	shl    edx,0xb
c002400f:	c1 e0 0b             	shl    eax,0xb
c0024012:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024017:	c1 eb 15             	shr    ebx,0x15
c002401a:	09 d8                	or     eax,ebx
c002401c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002401f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0024022:	c1 fe 14             	sar    esi,0x14
c0024025:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0024028:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002402b:	89 f3                	mov    ebx,esi
c002402d:	c1 e3 0b             	shl    ebx,0xb
c0024030:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0024033:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024036:	c1 e3 0b             	shl    ebx,0xb
c0024039:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002403f:	c1 ee 15             	shr    esi,0x15
c0024042:	09 f3                	or     ebx,esi
c0024044:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0024047:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002404a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002404d:	0f 88 5f 02 00 00    	js     c00242b2 <__adddf3+0x2cf>
c0024053:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024056:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0024059:	85 db                	test   ebx,ebx
c002405b:	0f 8e c7 00 00 00    	jle    c0024128 <__adddf3+0x145>
c0024061:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0024068:	75 1a                	jne    c0024084 <__adddf3+0xa1>
c002406a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002406d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0024070:	0f 84 b2 05 00 00    	je     c0024628 <__adddf3+0x645>
c0024076:	4b                   	dec    ebx
c0024077:	75 23                	jne    c002409c <__adddf3+0xb9>
c0024079:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002407c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002407f:	e9 99 00 00 00       	jmp    c002411d <__adddf3+0x13a>
c0024084:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024087:	f7 d6                	not    esi
c0024089:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002408f:	0f 84 93 05 00 00    	je     c0024628 <__adddf3+0x645>
c0024095:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002409c:	83 fb 1f             	cmp    ebx,0x1f
c002409f:	7e 42                	jle    c00240e3 <__adddf3+0x100>
c00240a1:	83 fb 3f             	cmp    ebx,0x3f
c00240a4:	0f 8f 7e 05 00 00    	jg     c0024628 <__adddf3+0x645>
c00240aa:	83 e3 1f             	and    ebx,0x1f
c00240ad:	89 d9                	mov    ecx,ebx
c00240af:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00240b2:	d3 ef                	shr    edi,cl
c00240b4:	31 db                	xor    ebx,ebx
c00240b6:	85 c9                	test   ecx,ecx
c00240b8:	74 15                	je     c00240cf <__adddf3+0xec>
c00240ba:	be 20 00 00 00       	mov    esi,0x20
c00240bf:	29 ce                	sub    esi,ecx
c00240c1:	89 f1                	mov    ecx,esi
c00240c3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00240c6:	d3 e6                	shl    esi,cl
c00240c8:	31 db                	xor    ebx,ebx
c00240ca:	85 f6                	test   esi,esi
c00240cc:	0f 95 c3             	setne  bl
c00240cf:	31 c9                	xor    ecx,ecx
c00240d1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00240d5:	0f 95 c1             	setne  cl
c00240d8:	09 cf                	or     edi,ecx
c00240da:	09 fb                	or     ebx,edi
c00240dc:	01 da                	add    edx,ebx
c00240de:	83 d0 00             	adc    eax,0x0
c00240e1:	eb 3a                	jmp    c002411d <__adddf3+0x13a>
c00240e3:	bf 20 00 00 00       	mov    edi,0x20
c00240e8:	29 df                	sub    edi,ebx
c00240ea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00240ed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00240f0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00240f3:	d3 e6                	shl    esi,cl
c00240f5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00240f8:	88 d9                	mov    cl,bl
c00240fa:	d3 ef                	shr    edi,cl
c00240fc:	09 fe                	or     esi,edi
c00240fe:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024101:	88 d9                	mov    cl,bl
c0024103:	d3 ef                	shr    edi,cl
c0024105:	89 fb                	mov    ebx,edi
c0024107:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002410a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002410d:	d3 e7                	shl    edi,cl
c002410f:	85 ff                	test   edi,edi
c0024111:	0f 95 c1             	setne  cl
c0024114:	0f b6 c9             	movzx  ecx,cl
c0024117:	09 ce                	or     esi,ecx
c0024119:	01 f2                	add    edx,esi
c002411b:	11 d8                	adc    eax,ebx
c002411d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024120:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024123:	e9 52 01 00 00       	jmp    c002427a <__adddf3+0x297>
c0024128:	0f 84 d5 00 00 00    	je     c0024203 <__adddf3+0x220>
c002412e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024131:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0024134:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024137:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002413a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0024141:	75 20                	jne    c0024163 <__adddf3+0x180>
c0024143:	89 d6                	mov    esi,edx
c0024145:	09 c6                	or     esi,eax
c0024147:	0f 84 db 04 00 00    	je     c0024628 <__adddf3+0x645>
c002414d:	4b                   	dec    ebx
c002414e:	75 29                	jne    c0024179 <__adddf3+0x196>
c0024150:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024153:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024156:	01 d1                	add    ecx,edx
c0024158:	11 c6                	adc    esi,eax
c002415a:	89 f0                	mov    eax,esi
c002415c:	89 ca                	mov    edx,ecx
c002415e:	e9 17 01 00 00       	jmp    c002427a <__adddf3+0x297>
c0024163:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024166:	f7 d6                	not    esi
c0024168:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002416e:	0f 84 b4 04 00 00    	je     c0024628 <__adddf3+0x645>
c0024174:	0d 00 00 00 80       	or     eax,0x80000000
c0024179:	83 fb 1f             	cmp    ebx,0x1f
c002417c:	7e 48                	jle    c00241c6 <__adddf3+0x1e3>
c002417e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024181:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024184:	83 fb 3f             	cmp    ebx,0x3f
c0024187:	0f 8f 9b 04 00 00    	jg     c0024628 <__adddf3+0x645>
c002418d:	83 e3 1f             	and    ebx,0x1f
c0024190:	89 d9                	mov    ecx,ebx
c0024192:	89 c7                	mov    edi,eax
c0024194:	d3 ef                	shr    edi,cl
c0024196:	31 db                	xor    ebx,ebx
c0024198:	85 c9                	test   ecx,ecx
c002419a:	74 12                	je     c00241ae <__adddf3+0x1cb>
c002419c:	be 20 00 00 00       	mov    esi,0x20
c00241a1:	29 ce                	sub    esi,ecx
c00241a3:	89 f1                	mov    ecx,esi
c00241a5:	d3 e0                	shl    eax,cl
c00241a7:	31 db                	xor    ebx,ebx
c00241a9:	85 c0                	test   eax,eax
c00241ab:	0f 95 c3             	setne  bl
c00241ae:	31 c0                	xor    eax,eax
c00241b0:	85 d2                	test   edx,edx
c00241b2:	0f 95 c0             	setne  al
c00241b5:	09 c7                	or     edi,eax
c00241b7:	09 fb                	or     ebx,edi
c00241b9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00241bc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00241bf:	01 da                	add    edx,ebx
c00241c1:	83 d6 00             	adc    esi,0x0
c00241c4:	eb 39                	jmp    c00241ff <__adddf3+0x21c>
c00241c6:	be 20 00 00 00       	mov    esi,0x20
c00241cb:	29 de                	sub    esi,ebx
c00241cd:	89 c7                	mov    edi,eax
c00241cf:	89 f1                	mov    ecx,esi
c00241d1:	d3 e7                	shl    edi,cl
c00241d3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00241d6:	89 d7                	mov    edi,edx
c00241d8:	88 d9                	mov    cl,bl
c00241da:	d3 ef                	shr    edi,cl
c00241dc:	89 f9                	mov    ecx,edi
c00241de:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00241e1:	09 cf                	or     edi,ecx
c00241e3:	88 d9                	mov    cl,bl
c00241e5:	d3 e8                	shr    eax,cl
c00241e7:	89 f1                	mov    ecx,esi
c00241e9:	d3 e2                	shl    edx,cl
c00241eb:	85 d2                	test   edx,edx
c00241ed:	0f 95 c2             	setne  dl
c00241f0:	0f b6 d2             	movzx  edx,dl
c00241f3:	09 d7                	or     edi,edx
c00241f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00241f8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00241fb:	01 fa                	add    edx,edi
c00241fd:	11 c6                	adc    esi,eax
c00241ff:	89 f0                	mov    eax,esi
c0024201:	eb 77                	jmp    c002427a <__adddf3+0x297>
c0024203:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024206:	46                   	inc    esi
c0024207:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002420a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024210:	75 41                	jne    c0024253 <__adddf3+0x270>
c0024212:	89 d3                	mov    ebx,edx
c0024214:	09 c3                	or     ebx,eax
c0024216:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002421d:	75 27                	jne    c0024246 <__adddf3+0x263>
c002421f:	85 db                	test   ebx,ebx
c0024221:	0f 84 fb 03 00 00    	je     c0024622 <__adddf3+0x63f>
c0024227:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002422a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002422d:	0f 84 f5 03 00 00    	je     c0024628 <__adddf3+0x645>
c0024233:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024236:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024239:	85 c0                	test   eax,eax
c002423b:	0f 89 91 03 00 00    	jns    c00245d2 <__adddf3+0x5ef>
c0024241:	e9 85 03 00 00       	jmp    c00245cb <__adddf3+0x5e8>
c0024246:	85 db                	test   ebx,ebx
c0024248:	0f 85 da 03 00 00    	jne    c0024628 <__adddf3+0x645>
c002424e:	e9 cf 03 00 00       	jmp    c0024622 <__adddf3+0x63f>
c0024253:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024256:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024259:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002425c:	f7 d1                	not    ecx
c002425e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024264:	0f 84 70 03 00 00    	je     c00245da <__adddf3+0x5f7>
c002426a:	d1 ea                	shr    edx,1
c002426c:	89 c1                	mov    ecx,eax
c002426e:	c1 e1 1f             	shl    ecx,0x1f
c0024271:	09 ca                	or     edx,ecx
c0024273:	d1 e8                	shr    eax,1
c0024275:	e9 6f 03 00 00       	jmp    c00245e9 <__adddf3+0x606>
c002427a:	85 c0                	test   eax,eax
c002427c:	0f 89 67 03 00 00    	jns    c00245e9 <__adddf3+0x606>
c0024282:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0024285:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024288:	f7 d1                	not    ecx
c002428a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024290:	0f 84 44 03 00 00    	je     c00245da <__adddf3+0x5f7>
c0024296:	89 d1                	mov    ecx,edx
c0024298:	d1 e9                	shr    ecx,1
c002429a:	83 e2 01             	and    edx,0x1
c002429d:	09 ca                	or     edx,ecx
c002429f:	89 c1                	mov    ecx,eax
c00242a1:	c1 e1 1f             	shl    ecx,0x1f
c00242a4:	09 ca                	or     edx,ecx
c00242a6:	d1 e8                	shr    eax,1
c00242a8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00242ad:	e9 37 03 00 00       	jmp    c00245e9 <__adddf3+0x606>
c00242b2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00242b5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00242bb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00242be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00242c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00242c7:	29 de                	sub    esi,ebx
c00242c9:	85 f6                	test   esi,esi
c00242cb:	0f 8e bd 00 00 00    	jle    c002438e <__adddf3+0x3ab>
c00242d1:	85 db                	test   ebx,ebx
c00242d3:	75 17                	jne    c00242ec <__adddf3+0x309>
c00242d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00242d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00242db:	0f 84 47 03 00 00    	je     c0024628 <__adddf3+0x645>
c00242e1:	4e                   	dec    esi
c00242e2:	75 20                	jne    c0024304 <__adddf3+0x321>
c00242e4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00242e7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00242ea:	eb 5b                	jmp    c0024347 <__adddf3+0x364>
c00242ec:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00242ef:	f7 d3                	not    ebx
c00242f1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00242f7:	0f 84 2b 03 00 00    	je     c0024628 <__adddf3+0x645>
c00242fd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0024304:	83 fe 1f             	cmp    esi,0x1f
c0024307:	7e 49                	jle    c0024352 <__adddf3+0x36f>
c0024309:	83 fe 3f             	cmp    esi,0x3f
c002430c:	0f 8f 16 03 00 00    	jg     c0024628 <__adddf3+0x645>
c0024312:	83 e6 1f             	and    esi,0x1f
c0024315:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024318:	89 f1                	mov    ecx,esi
c002431a:	d3 ef                	shr    edi,cl
c002431c:	31 db                	xor    ebx,ebx
c002431e:	85 f6                	test   esi,esi
c0024320:	74 13                	je     c0024335 <__adddf3+0x352>
c0024322:	b9 20 00 00 00       	mov    ecx,0x20
c0024327:	29 f1                	sub    ecx,esi
c0024329:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002432c:	d3 e6                	shl    esi,cl
c002432e:	31 db                	xor    ebx,ebx
c0024330:	85 f6                	test   esi,esi
c0024332:	0f 95 c3             	setne  bl
c0024335:	31 c9                	xor    ecx,ecx
c0024337:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002433b:	0f 95 c1             	setne  cl
c002433e:	09 cf                	or     edi,ecx
c0024340:	09 fb                	or     ebx,edi
c0024342:	29 da                	sub    edx,ebx
c0024344:	83 d8 00             	sbb    eax,0x0
c0024347:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002434a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002434d:	e9 aa 01 00 00       	jmp    c00244fc <__adddf3+0x519>
c0024352:	bf 20 00 00 00       	mov    edi,0x20
c0024357:	29 f7                	sub    edi,esi
c0024359:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002435c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002435f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024362:	d3 e3                	shl    ebx,cl
c0024364:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024367:	89 f1                	mov    ecx,esi
c0024369:	d3 ef                	shr    edi,cl
c002436b:	09 fb                	or     ebx,edi
c002436d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024370:	89 f1                	mov    ecx,esi
c0024372:	d3 ef                	shr    edi,cl
c0024374:	89 fe                	mov    esi,edi
c0024376:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024379:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002437c:	d3 e7                	shl    edi,cl
c002437e:	85 ff                	test   edi,edi
c0024380:	0f 95 c1             	setne  cl
c0024383:	0f b6 c9             	movzx  ecx,cl
c0024386:	09 cb                	or     ebx,ecx
c0024388:	29 da                	sub    edx,ebx
c002438a:	19 f0                	sbb    eax,esi
c002438c:	eb b9                	jmp    c0024347 <__adddf3+0x364>
c002438e:	0f 84 cd 00 00 00    	je     c0024461 <__adddf3+0x47e>
c0024394:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0024397:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002439a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002439d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00243a1:	75 1b                	jne    c00243be <__adddf3+0x3db>
c00243a3:	89 d6                	mov    esi,edx
c00243a5:	09 c6                	or     esi,eax
c00243a7:	0f 84 7b 02 00 00    	je     c0024628 <__adddf3+0x645>
c00243ad:	4b                   	dec    ebx
c00243ae:	75 24                	jne    c00243d4 <__adddf3+0x3f1>
c00243b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00243b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00243b6:	29 d1                	sub    ecx,edx
c00243b8:	19 c6                	sbb    esi,eax
c00243ba:	89 ca                	mov    edx,ecx
c00243bc:	eb 61                	jmp    c002441f <__adddf3+0x43c>
c00243be:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00243c1:	f7 d6                	not    esi
c00243c3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00243c9:	0f 84 59 02 00 00    	je     c0024628 <__adddf3+0x645>
c00243cf:	0d 00 00 00 80       	or     eax,0x80000000
c00243d4:	83 fb 1f             	cmp    ebx,0x1f
c00243d7:	7e 4d                	jle    c0024426 <__adddf3+0x443>
c00243d9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00243dc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00243df:	83 fb 3f             	cmp    ebx,0x3f
c00243e2:	0f 8f 40 02 00 00    	jg     c0024628 <__adddf3+0x645>
c00243e8:	83 e3 1f             	and    ebx,0x1f
c00243eb:	89 d9                	mov    ecx,ebx
c00243ed:	89 c7                	mov    edi,eax
c00243ef:	d3 ef                	shr    edi,cl
c00243f1:	31 db                	xor    ebx,ebx
c00243f3:	85 c9                	test   ecx,ecx
c00243f5:	74 12                	je     c0024409 <__adddf3+0x426>
c00243f7:	be 20 00 00 00       	mov    esi,0x20
c00243fc:	29 ce                	sub    esi,ecx
c00243fe:	89 f1                	mov    ecx,esi
c0024400:	d3 e0                	shl    eax,cl
c0024402:	31 db                	xor    ebx,ebx
c0024404:	85 c0                	test   eax,eax
c0024406:	0f 95 c3             	setne  bl
c0024409:	31 c0                	xor    eax,eax
c002440b:	85 d2                	test   edx,edx
c002440d:	0f 95 c0             	setne  al
c0024410:	09 c7                	or     edi,eax
c0024412:	09 fb                	or     ebx,edi
c0024414:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024417:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002441a:	29 da                	sub    edx,ebx
c002441c:	83 de 00             	sbb    esi,0x0
c002441f:	89 f0                	mov    eax,esi
c0024421:	e9 d6 00 00 00       	jmp    c00244fc <__adddf3+0x519>
c0024426:	be 20 00 00 00       	mov    esi,0x20
c002442b:	29 de                	sub    esi,ebx
c002442d:	89 c7                	mov    edi,eax
c002442f:	89 f1                	mov    ecx,esi
c0024431:	d3 e7                	shl    edi,cl
c0024433:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024436:	89 d7                	mov    edi,edx
c0024438:	88 d9                	mov    cl,bl
c002443a:	d3 ef                	shr    edi,cl
c002443c:	89 f9                	mov    ecx,edi
c002443e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024441:	09 cf                	or     edi,ecx
c0024443:	88 d9                	mov    cl,bl
c0024445:	d3 e8                	shr    eax,cl
c0024447:	89 f1                	mov    ecx,esi
c0024449:	d3 e2                	shl    edx,cl
c002444b:	85 d2                	test   edx,edx
c002444d:	0f 95 c2             	setne  dl
c0024450:	0f b6 d2             	movzx  edx,dl
c0024453:	09 d7                	or     edi,edx
c0024455:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024458:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002445b:	29 fa                	sub    edx,edi
c002445d:	19 c6                	sbb    esi,eax
c002445f:	eb be                	jmp    c002441f <__adddf3+0x43c>
c0024461:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024464:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024467:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002446d:	75 6a                	jne    c00244d9 <__adddf3+0x4f6>
c002446f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024473:	75 58                	jne    c00244cd <__adddf3+0x4ea>
c0024475:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024478:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002447b:	89 d6                	mov    esi,edx
c002447d:	09 c6                	or     esi,eax
c002447f:	75 17                	jne    c0024498 <__adddf3+0x4b5>
c0024481:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024484:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024487:	85 db                	test   ebx,ebx
c0024489:	0f 85 99 01 00 00    	jne    c0024628 <__adddf3+0x645>
c002448f:	31 ff                	xor    edi,edi
c0024491:	31 c9                	xor    ecx,ecx
c0024493:	e9 90 01 00 00       	jmp    c0024628 <__adddf3+0x645>
c0024498:	85 db                	test   ebx,ebx
c002449a:	0f 84 88 01 00 00    	je     c0024628 <__adddf3+0x645>
c00244a0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00244a3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00244a6:	85 c0                	test   eax,eax
c00244a8:	79 10                	jns    c00244ba <__adddf3+0x4d7>
c00244aa:	31 c9                	xor    ecx,ecx
c00244ac:	f7 da                	neg    edx
c00244ae:	0f 95 c1             	setne  cl
c00244b1:	01 c8                	add    eax,ecx
c00244b3:	f7 d8                	neg    eax
c00244b5:	e9 2f 01 00 00       	jmp    c00245e9 <__adddf3+0x606>
c00244ba:	31 ff                	xor    edi,edi
c00244bc:	31 c9                	xor    ecx,ecx
c00244be:	89 c3                	mov    ebx,eax
c00244c0:	09 d3                	or     ebx,edx
c00244c2:	0f 84 60 01 00 00    	je     c0024628 <__adddf3+0x645>
c00244c8:	e9 05 01 00 00       	jmp    c00245d2 <__adddf3+0x5ef>
c00244cd:	31 ff                	xor    edi,edi
c00244cf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00244d4:	e9 4f 01 00 00       	jmp    c0024628 <__adddf3+0x645>
c00244d9:	89 c1                	mov    ecx,eax
c00244db:	89 d0                	mov    eax,edx
c00244dd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00244e0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00244e3:	89 ca                	mov    edx,ecx
c00244e5:	85 c9                	test   ecx,ecx
c00244e7:	79 2c                	jns    c0024515 <__adddf3+0x532>
c00244e9:	31 c9                	xor    ecx,ecx
c00244eb:	f7 d8                	neg    eax
c00244ed:	0f 95 c1             	setne  cl
c00244f0:	01 ca                	add    edx,ecx
c00244f2:	f7 da                	neg    edx
c00244f4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00244f7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00244fa:	eb 19                	jmp    c0024515 <__adddf3+0x532>
c00244fc:	85 c0                	test   eax,eax
c00244fe:	0f 89 e5 00 00 00    	jns    c00245e9 <__adddf3+0x606>
c0024504:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024509:	89 c1                	mov    ecx,eax
c002450b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002450e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024511:	89 d0                	mov    eax,edx
c0024513:	89 ca                	mov    edx,ecx
c0024515:	85 d2                	test   edx,edx
c0024517:	74 59                	je     c0024572 <__adddf3+0x58f>
c0024519:	0f bd da             	bsr    ebx,edx
c002451c:	83 f3 1f             	xor    ebx,0x1f
c002451f:	88 d9                	mov    cl,bl
c0024521:	d3 e2                	shl    edx,cl
c0024523:	bf 20 00 00 00       	mov    edi,0x20
c0024528:	89 f9                	mov    ecx,edi
c002452a:	29 d9                	sub    ecx,ebx
c002452c:	89 c6                	mov    esi,eax
c002452e:	d3 ee                	shr    esi,cl
c0024530:	09 d6                	or     esi,edx
c0024532:	88 d9                	mov    cl,bl
c0024534:	d3 e0                	shl    eax,cl
c0024536:	89 c2                	mov    edx,eax
c0024538:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002453b:	25 ff 07 00 00       	and    eax,0x7ff
c0024540:	39 d8                	cmp    eax,ebx
c0024542:	7f 22                	jg     c0024566 <__adddf3+0x583>
c0024544:	29 c3                	sub    ebx,eax
c0024546:	43                   	inc    ebx
c0024547:	88 d9                	mov    cl,bl
c0024549:	d3 ea                	shr    edx,cl
c002454b:	29 df                	sub    edi,ebx
c002454d:	89 f9                	mov    ecx,edi
c002454f:	89 f0                	mov    eax,esi
c0024551:	d3 e0                	shl    eax,cl
c0024553:	09 c2                	or     edx,eax
c0024555:	89 f0                	mov    eax,esi
c0024557:	88 d9                	mov    cl,bl
c0024559:	d3 e8                	shr    eax,cl
c002455b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002455e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0024564:	eb 6f                	jmp    c00245d5 <__adddf3+0x5f2>
c0024566:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024569:	29 d8                	sub    eax,ebx
c002456b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002456e:	89 f0                	mov    eax,esi
c0024570:	eb 59                	jmp    c00245cb <__adddf3+0x5e8>
c0024572:	85 c0                	test   eax,eax
c0024574:	74 6a                	je     c00245e0 <__adddf3+0x5fd>
c0024576:	0f bd c8             	bsr    ecx,eax
c0024579:	83 f1 1f             	xor    ecx,0x1f
c002457c:	d3 e0                	shl    eax,cl
c002457e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024581:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024587:	83 c1 20             	add    ecx,0x20
c002458a:	39 cb                	cmp    ebx,ecx
c002458c:	7f 35                	jg     c00245c3 <__adddf3+0x5e0>
c002458e:	29 d9                	sub    ecx,ebx
c0024590:	8d 71 01             	lea    esi,[ecx+0x1]
c0024593:	83 fe 1f             	cmp    esi,0x1f
c0024596:	7e 09                	jle    c00245a1 <__adddf3+0x5be>
c0024598:	83 e9 1f             	sub    ecx,0x1f
c002459b:	d3 e8                	shr    eax,cl
c002459d:	89 c3                	mov    ebx,eax
c002459f:	eb 11                	jmp    c00245b2 <__adddf3+0x5cf>
c00245a1:	b9 20 00 00 00       	mov    ecx,0x20
c00245a6:	29 f1                	sub    ecx,esi
c00245a8:	89 c3                	mov    ebx,eax
c00245aa:	d3 e3                	shl    ebx,cl
c00245ac:	89 f1                	mov    ecx,esi
c00245ae:	d3 e8                	shr    eax,cl
c00245b0:	89 c2                	mov    edx,eax
c00245b2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00245b5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00245ba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00245bd:	89 d0                	mov    eax,edx
c00245bf:	89 da                	mov    edx,ebx
c00245c1:	eb 26                	jmp    c00245e9 <__adddf3+0x606>
c00245c3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00245c6:	29 cf                	sub    edi,ecx
c00245c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00245cb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00245d0:	eb 17                	jmp    c00245e9 <__adddf3+0x606>
c00245d2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00245d5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00245d8:	eb 0f                	jmp    c00245e9 <__adddf3+0x606>
c00245da:	31 d2                	xor    edx,edx
c00245dc:	31 c0                	xor    eax,eax
c00245de:	eb 09                	jmp    c00245e9 <__adddf3+0x606>
c00245e0:	89 c2                	mov    edx,eax
c00245e2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00245e9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00245ec:	c1 e1 14             	shl    ecx,0x14
c00245ef:	89 c3                	mov    ebx,eax
c00245f1:	c1 eb 0b             	shr    ebx,0xb
c00245f4:	09 d9                	or     ecx,ebx
c00245f6:	89 d3                	mov    ebx,edx
c00245f8:	c1 eb 0b             	shr    ebx,0xb
c00245fb:	c1 e0 15             	shl    eax,0x15
c00245fe:	09 d8                	or     eax,ebx
c0024600:	89 c7                	mov    edi,eax
c0024602:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0024608:	0f 95 c0             	setne  al
c002460b:	89 c6                	mov    esi,eax
c002460d:	09 f3                	or     ebx,esi
c002460f:	83 e3 01             	and    ebx,0x1
c0024612:	c1 ea 0a             	shr    edx,0xa
c0024615:	21 da                	and    edx,ebx
c0024617:	89 f8                	mov    eax,edi
c0024619:	01 d0                	add    eax,edx
c002461b:	83 d1 00             	adc    ecx,0x0
c002461e:	89 c7                	mov    edi,eax
c0024620:	eb 06                	jmp    c0024628 <__adddf3+0x645>
c0024622:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024625:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024628:	89 f8                	mov    eax,edi
c002462a:	89 ca                	mov    edx,ecx
c002462c:	83 c4 24             	add    esp,0x24
c002462f:	5b                   	pop    ebx
c0024630:	5e                   	pop    esi
c0024631:	5f                   	pop    edi
c0024632:	5d                   	pop    ebp
c0024633:	c3                   	ret    

c0024634 <__subdf3>:
c0024634:	55                   	push   ebp
c0024635:	89 e5                	mov    ebp,esp
c0024637:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002463a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002463d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024643:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0024646:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0024649:	5d                   	pop    ebp
c002464a:	e9 94 f9 ff ff       	jmp    c0023fe3 <__adddf3>

c002464f <__negdf2>:
c002464f:	55                   	push   ebp
c0024650:	89 e5                	mov    ebp,esp
c0024652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024655:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024658:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002465e:	5d                   	pop    ebp
c002465f:	c3                   	ret    

c0024660 <__muldf3>:
c0024660:	55                   	push   ebp
c0024661:	89 e5                	mov    ebp,esp
c0024663:	57                   	push   edi
c0024664:	56                   	push   esi
c0024665:	53                   	push   ebx
c0024666:	83 ec 24             	sub    esp,0x24
c0024669:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002466c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002466f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024672:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024675:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024678:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002467b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002467e:	89 c8                	mov    eax,ecx
c0024680:	c1 f8 14             	sar    eax,0x14
c0024683:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024686:	89 f8                	mov    eax,edi
c0024688:	89 fb                	mov    ebx,edi
c002468a:	c1 e3 0b             	shl    ebx,0xb
c002468d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0024690:	c1 e1 0b             	shl    ecx,0xb
c0024693:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024699:	c1 e8 15             	shr    eax,0x15
c002469c:	09 c1                	or     ecx,eax
c002469e:	89 d6                	mov    esi,edx
c00246a0:	89 d0                	mov    eax,edx
c00246a2:	c1 f8 14             	sar    eax,0x14
c00246a5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00246a8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00246ab:	89 c3                	mov    ebx,eax
c00246ad:	c1 e3 0b             	shl    ebx,0xb
c00246b0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00246b3:	c1 e6 0b             	shl    esi,0xb
c00246b6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00246bc:	c1 e8 15             	shr    eax,0x15
c00246bf:	09 c6                	or     esi,eax
c00246c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00246c4:	25 ff 07 00 00       	and    eax,0x7ff
c00246c9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00246cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00246cf:	25 ff 07 00 00       	and    eax,0x7ff
c00246d4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00246d7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00246da:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00246dd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00246e4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00246e7:	40                   	inc    eax
c00246e8:	a9 fe 07 00 00       	test   eax,0x7fe
c00246ed:	0f 85 8d 00 00 00    	jne    c0024780 <__muldf3+0x120>
c00246f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00246f6:	09 c8                	or     eax,ecx
c00246f8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00246fc:	74 44                	je     c0024742 <__muldf3+0xe2>
c00246fe:	85 c0                	test   eax,eax
c0024700:	0f 85 31 02 00 00    	jne    c0024937 <__muldf3+0x2d7>
c0024706:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024709:	40                   	inc    eax
c002470a:	a9 fe 07 00 00       	test   eax,0x7fe
c002470f:	75 13                	jne    c0024724 <__muldf3+0xc4>
c0024711:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024714:	09 f1                	or     ecx,esi
c0024716:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002471a:	74 22                	je     c002473e <__muldf3+0xde>
c002471c:	85 c9                	test   ecx,ecx
c002471e:	0f 85 0d 02 00 00    	jne    c0024931 <__muldf3+0x2d1>
c0024724:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0024728:	0f 89 09 02 00 00    	jns    c0024937 <__muldf3+0x2d7>
c002472e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024731:	05 00 00 00 80       	add    eax,0x80000000
c0024736:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024739:	e9 f9 01 00 00       	jmp    c0024937 <__muldf3+0x2d7>
c002473e:	85 c9                	test   ecx,ecx
c0024740:	eb 2e                	jmp    c0024770 <__muldf3+0x110>
c0024742:	85 c0                	test   eax,eax
c0024744:	74 20                	je     c0024766 <__muldf3+0x106>
c0024746:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0024749:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002474c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002474f:	c1 ef 1f             	shr    edi,0x1f
c0024752:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0024755:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0024758:	8d 43 ff             	lea    eax,[ebx-0x1]
c002475b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002475e:	09 f9                	or     ecx,edi
c0024760:	78 1e                	js     c0024780 <__muldf3+0x120>
c0024762:	89 c3                	mov    ebx,eax
c0024764:	eb e0                	jmp    c0024746 <__muldf3+0xe6>
c0024766:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024769:	f7 d0                	not    eax
c002476b:	a9 ff 07 00 00       	test   eax,0x7ff
c0024770:	75 b2                	jne    c0024724 <__muldf3+0xc4>
c0024772:	31 ff                	xor    edi,edi
c0024774:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002477b:	e9 b7 01 00 00       	jmp    c0024937 <__muldf3+0x2d7>
c0024780:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024783:	40                   	inc    eax
c0024784:	a9 fe 07 00 00       	test   eax,0x7fe
c0024789:	75 57                	jne    c00247e2 <__muldf3+0x182>
c002478b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002478e:	09 f0                	or     eax,esi
c0024790:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024794:	74 23                	je     c00247b9 <__muldf3+0x159>
c0024796:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002479a:	0f 89 91 01 00 00    	jns    c0024931 <__muldf3+0x2d1>
c00247a0:	85 c0                	test   eax,eax
c00247a2:	0f 85 89 01 00 00    	jne    c0024931 <__muldf3+0x2d1>
c00247a8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00247ab:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00247b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00247b4:	e9 7e 01 00 00       	jmp    c0024937 <__muldf3+0x2d7>
c00247b9:	85 c0                	test   eax,eax
c00247bb:	75 0c                	jne    c00247c9 <__muldf3+0x169>
c00247bd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00247c1:	0f 89 6a 01 00 00    	jns    c0024931 <__muldf3+0x2d1>
c00247c7:	eb df                	jmp    c00247a8 <__muldf3+0x148>
c00247c9:	01 f6                	add    esi,esi
c00247cb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00247ce:	c1 ea 1f             	shr    edx,0x1f
c00247d1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00247d4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00247d7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00247da:	09 d6                	or     esi,edx
c00247dc:	78 04                	js     c00247e2 <__muldf3+0x182>
c00247de:	89 c3                	mov    ebx,eax
c00247e0:	eb e7                	jmp    c00247c9 <__muldf3+0x169>
c00247e2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00247e8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00247ee:	89 c8                	mov    eax,ecx
c00247f0:	f7 e6                	mul    esi
c00247f2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00247f5:	89 c7                	mov    edi,eax
c00247f7:	89 c8                	mov    eax,ecx
c00247f9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00247fc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00247ff:	89 c1                	mov    ecx,eax
c0024801:	89 f0                	mov    eax,esi
c0024803:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0024806:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0024809:	89 c6                	mov    esi,eax
c002480b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002480e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024811:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024814:	31 c0                	xor    eax,eax
c0024816:	01 f1                	add    ecx,esi
c0024818:	0f 92 c0             	setb   al
c002481b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002481e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0024821:	83 d6 00             	adc    esi,0x0
c0024824:	01 c7                	add    edi,eax
c0024826:	83 d6 00             	adc    esi,0x0
c0024829:	01 ca                	add    edx,ecx
c002482b:	0f 92 c1             	setb   cl
c002482e:	0f b6 c9             	movzx  ecx,cl
c0024831:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0024834:	83 d6 00             	adc    esi,0x0
c0024837:	01 cf                	add    edi,ecx
c0024839:	83 d6 00             	adc    esi,0x0
c002483c:	31 c9                	xor    ecx,ecx
c002483e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0024841:	0f 95 c1             	setne  cl
c0024844:	09 cf                	or     edi,ecx
c0024846:	85 f6                	test   esi,esi
c0024848:	78 0c                	js     c0024856 <__muldf3+0x1f6>
c002484a:	01 f6                	add    esi,esi
c002484c:	89 f8                	mov    eax,edi
c002484e:	c1 e8 1f             	shr    eax,0x1f
c0024851:	09 c6                	or     esi,eax
c0024853:	01 ff                	add    edi,edi
c0024855:	4b                   	dec    ebx
c0024856:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002485c:	0f 8f 85 00 00 00    	jg     c00248e7 <__muldf3+0x287>
c0024862:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0024868:	85 db                	test   ebx,ebx
c002486a:	0f 8f 84 00 00 00    	jg     c00248f4 <__muldf3+0x294>
c0024870:	83 fb cc             	cmp    ebx,0xffffffcc
c0024873:	7c 79                	jl     c00248ee <__muldf3+0x28e>
c0024875:	ba 01 00 00 00       	mov    edx,0x1
c002487a:	29 da                	sub    edx,ebx
c002487c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024882:	83 fa 1f             	cmp    edx,0x1f
c0024885:	7e 30                	jle    c00248b7 <__muldf3+0x257>
c0024887:	83 fa 20             	cmp    edx,0x20
c002488a:	75 0b                	jne    c0024897 <__muldf3+0x237>
c002488c:	31 c0                	xor    eax,eax
c002488e:	85 ff                	test   edi,edi
c0024890:	0f 95 c0             	setne  al
c0024893:	89 c7                	mov    edi,eax
c0024895:	eb 1a                	jmp    c00248b1 <__muldf3+0x251>
c0024897:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002489a:	89 f0                	mov    eax,esi
c002489c:	d3 e0                	shl    eax,cl
c002489e:	09 f8                	or     eax,edi
c00248a0:	0f 95 c0             	setne  al
c00248a3:	0f b6 c0             	movzx  eax,al
c00248a6:	89 c7                	mov    edi,eax
c00248a8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00248ad:	29 d9                	sub    ecx,ebx
c00248af:	d3 ee                	shr    esi,cl
c00248b1:	09 f7                	or     edi,esi
c00248b3:	31 db                	xor    ebx,ebx
c00248b5:	eb 3b                	jmp    c00248f2 <__muldf3+0x292>
c00248b7:	83 c3 1f             	add    ebx,0x1f
c00248ba:	89 f0                	mov    eax,esi
c00248bc:	88 d9                	mov    cl,bl
c00248be:	d3 e0                	shl    eax,cl
c00248c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00248c3:	89 f8                	mov    eax,edi
c00248c5:	88 d1                	mov    cl,dl
c00248c7:	d3 e8                	shr    eax,cl
c00248c9:	89 c1                	mov    ecx,eax
c00248cb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00248ce:	09 c8                	or     eax,ecx
c00248d0:	88 d9                	mov    cl,bl
c00248d2:	d3 e7                	shl    edi,cl
c00248d4:	31 db                	xor    ebx,ebx
c00248d6:	85 ff                	test   edi,edi
c00248d8:	0f 95 c3             	setne  bl
c00248db:	89 df                	mov    edi,ebx
c00248dd:	09 c7                	or     edi,eax
c00248df:	88 d1                	mov    cl,dl
c00248e1:	d3 ee                	shr    esi,cl
c00248e3:	31 db                	xor    ebx,ebx
c00248e5:	eb 0d                	jmp    c00248f4 <__muldf3+0x294>
c00248e7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00248ec:	eb 02                	jmp    c00248f0 <__muldf3+0x290>
c00248ee:	31 db                	xor    ebx,ebx
c00248f0:	31 ff                	xor    edi,edi
c00248f2:	31 f6                	xor    esi,esi
c00248f4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00248f7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00248fa:	25 00 f8 ff ff       	and    eax,0xfffff800
c00248ff:	09 c3                	or     ebx,eax
c0024901:	c1 e3 14             	shl    ebx,0x14
c0024904:	89 f0                	mov    eax,esi
c0024906:	c1 e8 0b             	shr    eax,0xb
c0024909:	09 c3                	or     ebx,eax
c002490b:	89 f8                	mov    eax,edi
c002490d:	c1 e8 0b             	shr    eax,0xb
c0024910:	c1 e6 15             	shl    esi,0x15
c0024913:	09 c6                	or     esi,eax
c0024915:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002491b:	0f 95 c1             	setne  cl
c002491e:	09 c8                	or     eax,ecx
c0024920:	83 e0 01             	and    eax,0x1
c0024923:	c1 ef 0a             	shr    edi,0xa
c0024926:	21 c7                	and    edi,eax
c0024928:	01 f7                	add    edi,esi
c002492a:	83 d3 00             	adc    ebx,0x0
c002492d:	89 da                	mov    edx,ebx
c002492f:	eb 03                	jmp    c0024934 <__muldf3+0x2d4>
c0024931:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0024934:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024937:	89 f8                	mov    eax,edi
c0024939:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002493c:	83 c4 24             	add    esp,0x24
c002493f:	5b                   	pop    ebx
c0024940:	5e                   	pop    esi
c0024941:	5f                   	pop    edi
c0024942:	5d                   	pop    ebp
c0024943:	c3                   	ret    

c0024944 <__divdf3>:
c0024944:	55                   	push   ebp
c0024945:	89 e5                	mov    ebp,esp
c0024947:	57                   	push   edi
c0024948:	56                   	push   esi
c0024949:	53                   	push   ebx
c002494a:	83 ec 2c             	sub    esp,0x2c
c002494d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024950:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024953:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024956:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024959:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002495c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002495f:	89 ce                	mov    esi,ecx
c0024961:	89 c8                	mov    eax,ecx
c0024963:	c1 f8 14             	sar    eax,0x14
c0024966:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024969:	89 f8                	mov    eax,edi
c002496b:	89 fb                	mov    ebx,edi
c002496d:	c1 e3 0b             	shl    ebx,0xb
c0024970:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0024973:	c1 e6 0b             	shl    esi,0xb
c0024976:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002497c:	c1 e8 15             	shr    eax,0x15
c002497f:	09 c6                	or     esi,eax
c0024981:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0024984:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024987:	89 c2                	mov    edx,eax
c0024989:	c1 fa 14             	sar    edx,0x14
c002498c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002498f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0024992:	89 de                	mov    esi,ebx
c0024994:	c1 e6 0b             	shl    esi,0xb
c0024997:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002499a:	c1 e0 0b             	shl    eax,0xb
c002499d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00249a2:	c1 eb 15             	shr    ebx,0x15
c00249a5:	09 d8                	or     eax,ebx
c00249a7:	89 c2                	mov    edx,eax
c00249a9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00249ac:	25 ff 07 00 00       	and    eax,0x7ff
c00249b1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00249b4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00249b7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00249bd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00249c0:	29 d8                	sub    eax,ebx
c00249c2:	05 ff 03 00 00       	add    eax,0x3ff
c00249c7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00249ca:	46                   	inc    esi
c00249cb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00249d1:	0f 85 a5 00 00 00    	jne    c0024a7c <__divdf3+0x138>
c00249d7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00249da:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00249dd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00249e1:	74 2a                	je     c0024a0d <__divdf3+0xc9>
c00249e3:	85 f6                	test   esi,esi
c00249e5:	0f 85 cc 02 00 00    	jne    c0024cb7 <__divdf3+0x373>
c00249eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00249ee:	40                   	inc    eax
c00249ef:	a9 fe 07 00 00       	test   eax,0x7fe
c00249f4:	75 26                	jne    c0024a1c <__divdf3+0xd8>
c00249f6:	85 db                	test   ebx,ebx
c00249f8:	74 22                	je     c0024a1c <__divdf3+0xd8>
c00249fa:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00249fd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024a00:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024a03:	09 d0                	or     eax,edx
c0024a05:	0f 85 ac 02 00 00    	jne    c0024cb7 <__divdf3+0x373>
c0024a0b:	eb 63                	jmp    c0024a70 <__divdf3+0x12c>
c0024a0d:	85 f6                	test   esi,esi
c0024a0f:	75 22                	jne    c0024a33 <__divdf3+0xef>
c0024a11:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024a14:	40                   	inc    eax
c0024a15:	a9 fe 07 00 00       	test   eax,0x7fe
c0024a1a:	74 36                	je     c0024a52 <__divdf3+0x10e>
c0024a1c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024a20:	0f 89 91 02 00 00    	jns    c0024cb7 <__divdf3+0x373>
c0024a26:	89 f8                	mov    eax,edi
c0024a28:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024a2e:	e9 80 02 00 00       	jmp    c0024cb3 <__divdf3+0x36f>
c0024a33:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024a36:	01 f6                	add    esi,esi
c0024a38:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024a3b:	c1 ef 1f             	shr    edi,0x1f
c0024a3e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024a41:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0024a44:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024a47:	09 f7                	or     edi,esi
c0024a49:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0024a4c:	78 2e                	js     c0024a7c <__divdf3+0x138>
c0024a4e:	89 c8                	mov    eax,ecx
c0024a50:	eb e1                	jmp    c0024a33 <__divdf3+0xef>
c0024a52:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024a55:	09 d0                	or     eax,edx
c0024a57:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024a5b:	74 0f                	je     c0024a6c <__divdf3+0x128>
c0024a5d:	85 c0                	test   eax,eax
c0024a5f:	74 bb                	je     c0024a1c <__divdf3+0xd8>
c0024a61:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024a64:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024a67:	e9 4b 02 00 00       	jmp    c0024cb7 <__divdf3+0x373>
c0024a6c:	85 c0                	test   eax,eax
c0024a6e:	75 ac                	jne    c0024a1c <__divdf3+0xd8>
c0024a70:	31 ff                	xor    edi,edi
c0024a72:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024a77:	e9 3b 02 00 00       	jmp    c0024cb7 <__divdf3+0x373>
c0024a7c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024a7f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0024a82:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0024a88:	75 6b                	jne    c0024af5 <__divdf3+0x1b1>
c0024a8a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024a8d:	09 d6                	or     esi,edx
c0024a8f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024a93:	74 28                	je     c0024abd <__divdf3+0x179>
c0024a95:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024a98:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024a9b:	85 f6                	test   esi,esi
c0024a9d:	0f 85 14 02 00 00    	jne    c0024cb7 <__divdf3+0x373>
c0024aa3:	31 ff                	xor    edi,edi
c0024aa5:	31 c9                	xor    ecx,ecx
c0024aa7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024aaa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0024aad:	0f 89 04 02 00 00    	jns    c0024cb7 <__divdf3+0x373>
c0024ab3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0024ab8:	e9 fa 01 00 00       	jmp    c0024cb7 <__divdf3+0x373>
c0024abd:	85 f6                	test   esi,esi
c0024abf:	75 1b                	jne    c0024adc <__divdf3+0x198>
c0024ac1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024ac4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0024ac7:	25 00 00 00 80       	and    eax,0x80000000
c0024acc:	31 c9                	xor    ecx,ecx
c0024ace:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0024ad3:	89 cf                	mov    edi,ecx
c0024ad5:	89 c1                	mov    ecx,eax
c0024ad7:	e9 db 01 00 00       	jmp    c0024cb7 <__divdf3+0x373>
c0024adc:	01 d2                	add    edx,edx
c0024ade:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024ae1:	c1 eb 1f             	shr    ebx,0x1f
c0024ae4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024ae7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0024aea:	8d 48 01             	lea    ecx,[eax+0x1]
c0024aed:	09 da                	or     edx,ebx
c0024aef:	78 04                	js     c0024af5 <__divdf3+0x1b1>
c0024af1:	89 c8                	mov    eax,ecx
c0024af3:	eb e7                	jmp    c0024adc <__divdf3+0x198>
c0024af5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024af8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024afe:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024b04:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0024b07:	39 d6                	cmp    esi,edx
c0024b09:	77 0d                	ja     c0024b18 <__divdf3+0x1d4>
c0024b0b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024b0e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0024b11:	72 1b                	jb     c0024b2e <__divdf3+0x1ea>
c0024b13:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0024b16:	75 16                	jne    c0024b2e <__divdf3+0x1ea>
c0024b18:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024b1b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024b1e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0024b21:	83 de 00             	sbb    esi,0x0
c0024b24:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0024b27:	ba 01 00 00 00       	mov    edx,0x1
c0024b2c:	eb 02                	jmp    c0024b30 <__divdf3+0x1ec>
c0024b2e:	31 d2                	xor    edx,edx
c0024b30:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0024b37:	31 ff                	xor    edi,edi
c0024b39:	01 ff                	add    edi,edi
c0024b3b:	89 d1                	mov    ecx,edx
c0024b3d:	c1 e9 1f             	shr    ecx,0x1f
c0024b40:	09 cf                	or     edi,ecx
c0024b42:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0024b45:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0024b48:	89 da                	mov    edx,ebx
c0024b4a:	89 f3                	mov    ebx,esi
c0024b4c:	8d 34 36             	lea    esi,[esi+esi*1]
c0024b4f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024b52:	c1 e9 1f             	shr    ecx,0x1f
c0024b55:	09 ce                	or     esi,ecx
c0024b57:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024b5a:	01 c9                	add    ecx,ecx
c0024b5c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0024b5f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024b62:	85 db                	test   ebx,ebx
c0024b64:	78 29                	js     c0024b8f <__divdf3+0x24b>
c0024b66:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0024b69:	72 07                	jb     c0024b72 <__divdf3+0x22e>
c0024b6b:	75 3c                	jne    c0024ba9 <__divdf3+0x265>
c0024b6d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024b70:	77 37                	ja     c0024ba9 <__divdf3+0x265>
c0024b72:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024b75:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0024b78:	31 d2                	xor    edx,edx
c0024b7a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0024b7d:	0f 97 c2             	seta   dl
c0024b80:	29 d6                	sub    esi,edx
c0024b82:	89 d9                	mov    ecx,ebx
c0024b84:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0024b87:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024b8a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024b8d:	eb 17                	jmp    c0024ba6 <__divdf3+0x262>
c0024b8f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024b92:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024b95:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024b98:	0f 97 c1             	seta   cl
c0024b9b:	0f b6 c9             	movzx  ecx,cl
c0024b9e:	29 ce                	sub    esi,ecx
c0024ba0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0024ba3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0024ba6:	83 ca 01             	or     edx,0x1
c0024ba9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0024bac:	75 8b                	jne    c0024b39 <__divdf3+0x1f5>
c0024bae:	c1 e7 09             	shl    edi,0x9
c0024bb1:	89 d1                	mov    ecx,edx
c0024bb3:	c1 e9 17             	shr    ecx,0x17
c0024bb6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024bb9:	09 f3                	or     ebx,esi
c0024bbb:	0f 95 c3             	setne  bl
c0024bbe:	0f b6 db             	movzx  ebx,bl
c0024bc1:	c1 e2 09             	shl    edx,0x9
c0024bc4:	09 d3                	or     ebx,edx
c0024bc6:	89 ca                	mov    edx,ecx
c0024bc8:	09 fa                	or     edx,edi
c0024bca:	78 0c                	js     c0024bd8 <__divdf3+0x294>
c0024bcc:	01 d2                	add    edx,edx
c0024bce:	89 d9                	mov    ecx,ebx
c0024bd0:	c1 e9 1f             	shr    ecx,0x1f
c0024bd3:	09 ca                	or     edx,ecx
c0024bd5:	01 db                	add    ebx,ebx
c0024bd7:	48                   	dec    eax
c0024bd8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0024bdd:	0f 8f 83 00 00 00    	jg     c0024c66 <__divdf3+0x322>
c0024be3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024be9:	85 c0                	test   eax,eax
c0024beb:	0f 8f 82 00 00 00    	jg     c0024c73 <__divdf3+0x32f>
c0024bf1:	83 f8 cc             	cmp    eax,0xffffffcc
c0024bf4:	7c 77                	jl     c0024c6d <__divdf3+0x329>
c0024bf6:	be 01 00 00 00       	mov    esi,0x1
c0024bfb:	29 c6                	sub    esi,eax
c0024bfd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024c03:	83 fe 1f             	cmp    esi,0x1f
c0024c06:	7e 2f                	jle    c0024c37 <__divdf3+0x2f3>
c0024c08:	83 fe 20             	cmp    esi,0x20
c0024c0b:	75 0a                	jne    c0024c17 <__divdf3+0x2d3>
c0024c0d:	85 db                	test   ebx,ebx
c0024c0f:	0f 95 c3             	setne  bl
c0024c12:	0f b6 db             	movzx  ebx,bl
c0024c15:	eb 1a                	jmp    c0024c31 <__divdf3+0x2ed>
c0024c17:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0024c1a:	89 d7                	mov    edi,edx
c0024c1c:	d3 e7                	shl    edi,cl
c0024c1e:	89 f9                	mov    ecx,edi
c0024c20:	09 d9                	or     ecx,ebx
c0024c22:	0f 95 c3             	setne  bl
c0024c25:	0f b6 db             	movzx  ebx,bl
c0024c28:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0024c2d:	29 c1                	sub    ecx,eax
c0024c2f:	d3 ea                	shr    edx,cl
c0024c31:	09 d3                	or     ebx,edx
c0024c33:	31 c0                	xor    eax,eax
c0024c35:	eb 3a                	jmp    c0024c71 <__divdf3+0x32d>
c0024c37:	83 c0 1f             	add    eax,0x1f
c0024c3a:	89 d7                	mov    edi,edx
c0024c3c:	88 c1                	mov    cl,al
c0024c3e:	d3 e7                	shl    edi,cl
c0024c40:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024c43:	89 df                	mov    edi,ebx
c0024c45:	89 f1                	mov    ecx,esi
c0024c47:	d3 ef                	shr    edi,cl
c0024c49:	89 f9                	mov    ecx,edi
c0024c4b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024c4e:	09 cf                	or     edi,ecx
c0024c50:	88 c1                	mov    cl,al
c0024c52:	d3 e3                	shl    ebx,cl
c0024c54:	85 db                	test   ebx,ebx
c0024c56:	0f 95 c3             	setne  bl
c0024c59:	0f b6 db             	movzx  ebx,bl
c0024c5c:	09 fb                	or     ebx,edi
c0024c5e:	89 f1                	mov    ecx,esi
c0024c60:	d3 ea                	shr    edx,cl
c0024c62:	31 c0                	xor    eax,eax
c0024c64:	eb 0d                	jmp    c0024c73 <__divdf3+0x32f>
c0024c66:	b8 ff 07 00 00       	mov    eax,0x7ff
c0024c6b:	eb 02                	jmp    c0024c6f <__divdf3+0x32b>
c0024c6d:	31 c0                	xor    eax,eax
c0024c6f:	31 db                	xor    ebx,ebx
c0024c71:	31 d2                	xor    edx,edx
c0024c73:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0024c76:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0024c79:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0024c7f:	09 c8                	or     eax,ecx
c0024c81:	c1 e0 14             	shl    eax,0x14
c0024c84:	89 d1                	mov    ecx,edx
c0024c86:	c1 e9 0b             	shr    ecx,0xb
c0024c89:	09 c8                	or     eax,ecx
c0024c8b:	89 c6                	mov    esi,eax
c0024c8d:	89 d9                	mov    ecx,ebx
c0024c8f:	c1 e9 0b             	shr    ecx,0xb
c0024c92:	c1 e2 15             	shl    edx,0x15
c0024c95:	09 ca                	or     edx,ecx
c0024c97:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0024c9d:	0f 95 c0             	setne  al
c0024ca0:	09 c1                	or     ecx,eax
c0024ca2:	83 e1 01             	and    ecx,0x1
c0024ca5:	c1 eb 0a             	shr    ebx,0xa
c0024ca8:	21 cb                	and    ebx,ecx
c0024caa:	01 d3                	add    ebx,edx
c0024cac:	89 d8                	mov    eax,ebx
c0024cae:	83 d6 00             	adc    esi,0x0
c0024cb1:	89 f2                	mov    edx,esi
c0024cb3:	89 c7                	mov    edi,eax
c0024cb5:	89 d1                	mov    ecx,edx
c0024cb7:	89 f8                	mov    eax,edi
c0024cb9:	89 ca                	mov    edx,ecx
c0024cbb:	83 c4 2c             	add    esp,0x2c
c0024cbe:	5b                   	pop    ebx
c0024cbf:	5e                   	pop    esi
c0024cc0:	5f                   	pop    edi
c0024cc1:	5d                   	pop    ebp
c0024cc2:	c3                   	ret    

c0024cc3 <__floatsidf>:
c0024cc3:	55                   	push   ebp
c0024cc4:	89 e5                	mov    ebp,esp
c0024cc6:	56                   	push   esi
c0024cc7:	53                   	push   ebx
c0024cc8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024ccb:	85 db                	test   ebx,ebx
c0024ccd:	7e 15                	jle    c0024ce4 <__floatsidf+0x21>
c0024ccf:	0f bd cb             	bsr    ecx,ebx
c0024cd2:	83 f1 1f             	xor    ecx,0x1f
c0024cd5:	d3 e3                	shl    ebx,cl
c0024cd7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024cdd:	b8 1e 04 00 00       	mov    eax,0x41e
c0024ce2:	eb 21                	jmp    c0024d05 <__floatsidf+0x42>
c0024ce4:	b8 00 00 00 00       	mov    eax,0x0
c0024ce9:	ba 00 00 00 00       	mov    edx,0x0
c0024cee:	74 2a                	je     c0024d1a <__floatsidf+0x57>
c0024cf0:	f7 db                	neg    ebx
c0024cf2:	0f bd cb             	bsr    ecx,ebx
c0024cf5:	83 f1 1f             	xor    ecx,0x1f
c0024cf8:	d3 e3                	shl    ebx,cl
c0024cfa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024d00:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0024d05:	29 c8                	sub    eax,ecx
c0024d07:	c1 e0 14             	shl    eax,0x14
c0024d0a:	89 c1                	mov    ecx,eax
c0024d0c:	89 de                	mov    esi,ebx
c0024d0e:	c1 ee 0b             	shr    esi,0xb
c0024d11:	09 f1                	or     ecx,esi
c0024d13:	89 ca                	mov    edx,ecx
c0024d15:	c1 e3 15             	shl    ebx,0x15
c0024d18:	89 d8                	mov    eax,ebx
c0024d1a:	5b                   	pop    ebx
c0024d1b:	5e                   	pop    esi
c0024d1c:	5d                   	pop    ebp
c0024d1d:	c3                   	ret    

c0024d1e <__floatunsidf>:
c0024d1e:	55                   	push   ebp
c0024d1f:	89 e5                	mov    ebp,esp
c0024d21:	56                   	push   esi
c0024d22:	53                   	push   ebx
c0024d23:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024d26:	85 db                	test   ebx,ebx
c0024d28:	74 2a                	je     c0024d54 <__floatunsidf+0x36>
c0024d2a:	0f bd cb             	bsr    ecx,ebx
c0024d2d:	83 f1 1f             	xor    ecx,0x1f
c0024d30:	d3 e3                	shl    ebx,cl
c0024d32:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024d38:	b8 1e 04 00 00       	mov    eax,0x41e
c0024d3d:	29 c8                	sub    eax,ecx
c0024d3f:	c1 e0 14             	shl    eax,0x14
c0024d42:	89 c1                	mov    ecx,eax
c0024d44:	89 de                	mov    esi,ebx
c0024d46:	c1 ee 0b             	shr    esi,0xb
c0024d49:	09 f1                	or     ecx,esi
c0024d4b:	89 ca                	mov    edx,ecx
c0024d4d:	c1 e3 15             	shl    ebx,0x15
c0024d50:	89 d8                	mov    eax,ebx
c0024d52:	eb 04                	jmp    c0024d58 <__floatunsidf+0x3a>
c0024d54:	31 c0                	xor    eax,eax
c0024d56:	31 d2                	xor    edx,edx
c0024d58:	5b                   	pop    ebx
c0024d59:	5e                   	pop    esi
c0024d5a:	5d                   	pop    ebp
c0024d5b:	c3                   	ret    

c0024d5c <__fixdfsi>:
c0024d5c:	55                   	push   ebp
c0024d5d:	89 e5                	mov    ebp,esp
c0024d5f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024d62:	89 d1                	mov    ecx,edx
c0024d64:	c1 e1 0b             	shl    ecx,0xb
c0024d67:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024d70:	c1 e8 15             	shr    eax,0x15
c0024d73:	09 c1                	or     ecx,eax
c0024d75:	c1 fa 14             	sar    edx,0x14
c0024d78:	78 1f                	js     c0024d99 <__fixdfsi+0x3d>
c0024d7a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0024d80:	31 c0                	xor    eax,eax
c0024d82:	83 fa 1e             	cmp    edx,0x1e
c0024d85:	77 40                	ja     c0024dc7 <__fixdfsi+0x6b>
c0024d87:	89 c8                	mov    eax,ecx
c0024d89:	0d 00 00 00 80       	or     eax,0x80000000
c0024d8e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024d93:	29 d1                	sub    ecx,edx
c0024d95:	d3 e8                	shr    eax,cl
c0024d97:	eb 2e                	jmp    c0024dc7 <__fixdfsi+0x6b>
c0024d99:	31 c0                	xor    eax,eax
c0024d9b:	81 c2 01 04 00 00    	add    edx,0x401
c0024da1:	78 24                	js     c0024dc7 <__fixdfsi+0x6b>
c0024da3:	83 fa 1e             	cmp    edx,0x1e
c0024da6:	7e 09                	jle    c0024db1 <__fixdfsi+0x55>
c0024da8:	83 fa 1f             	cmp    edx,0x1f
c0024dab:	75 18                	jne    c0024dc5 <__fixdfsi+0x69>
c0024dad:	85 c9                	test   ecx,ecx
c0024daf:	75 14                	jne    c0024dc5 <__fixdfsi+0x69>
c0024db1:	89 c8                	mov    eax,ecx
c0024db3:	0d 00 00 00 80       	or     eax,0x80000000
c0024db8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024dbd:	29 d1                	sub    ecx,edx
c0024dbf:	d3 e8                	shr    eax,cl
c0024dc1:	f7 d8                	neg    eax
c0024dc3:	eb 02                	jmp    c0024dc7 <__fixdfsi+0x6b>
c0024dc5:	31 c0                	xor    eax,eax
c0024dc7:	5d                   	pop    ebp
c0024dc8:	c3                   	ret    

c0024dc9 <__fixunsdfsi>:
c0024dc9:	55                   	push   ebp
c0024dca:	89 e5                	mov    ebp,esp
c0024dcc:	53                   	push   ebx
c0024dcd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024dd0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024dd3:	89 d3                	mov    ebx,edx
c0024dd5:	c1 fb 14             	sar    ebx,0x14
c0024dd8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0024dde:	31 c0                	xor    eax,eax
c0024de0:	83 fb 1f             	cmp    ebx,0x1f
c0024de3:	77 1d                	ja     c0024e02 <__fixunsdfsi+0x39>
c0024de5:	89 d0                	mov    eax,edx
c0024de7:	c1 e0 0b             	shl    eax,0xb
c0024dea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024def:	c1 e9 15             	shr    ecx,0x15
c0024df2:	09 c8                	or     eax,ecx
c0024df4:	0d 00 00 00 80       	or     eax,0x80000000
c0024df9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024dfe:	29 d9                	sub    ecx,ebx
c0024e00:	d3 e8                	shr    eax,cl
c0024e02:	5b                   	pop    ebx
c0024e03:	5d                   	pop    ebp
c0024e04:	c3                   	ret    

c0024e05 <__cmpdf2>:
c0024e05:	55                   	push   ebp
c0024e06:	89 e5                	mov    ebp,esp
c0024e08:	57                   	push   edi
c0024e09:	56                   	push   esi
c0024e0a:	53                   	push   ebx
c0024e0b:	83 ec 0c             	sub    esp,0xc
c0024e0e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0024e11:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024e14:	89 ca                	mov    edx,ecx
c0024e16:	c1 ea 14             	shr    edx,0x14
c0024e19:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0024e1f:	89 cb                	mov    ebx,ecx
c0024e21:	c1 fb 1f             	sar    ebx,0x1f
c0024e24:	31 da                	xor    edx,ebx
c0024e26:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024e29:	89 df                	mov    edi,ebx
c0024e2b:	c1 e7 0b             	shl    edi,0xb
c0024e2e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024e31:	c1 e1 0b             	shl    ecx,0xb
c0024e34:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024e3a:	c1 eb 15             	shr    ebx,0x15
c0024e3d:	09 d9                	or     ecx,ebx
c0024e3f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0024e42:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0024e45:	89 ce                	mov    esi,ecx
c0024e47:	c1 ee 14             	shr    esi,0x14
c0024e4a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024e50:	89 cb                	mov    ebx,ecx
c0024e52:	c1 fb 1f             	sar    ebx,0x1f
c0024e55:	31 de                	xor    esi,ebx
c0024e57:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0024e5a:	89 df                	mov    edi,ebx
c0024e5c:	c1 e7 0b             	shl    edi,0xb
c0024e5f:	c1 e1 0b             	shl    ecx,0xb
c0024e62:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024e68:	c1 eb 15             	shr    ebx,0x15
c0024e6b:	09 d9                	or     ecx,ebx
c0024e6d:	89 d3                	mov    ebx,edx
c0024e6f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024e75:	43                   	inc    ebx
c0024e76:	83 fb 01             	cmp    ebx,0x1
c0024e79:	77 08                	ja     c0024e83 <__cmpdf2+0x7e>
c0024e7b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024e7e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0024e81:	75 68                	jne    c0024eeb <__cmpdf2+0xe6>
c0024e83:	89 f3                	mov    ebx,esi
c0024e85:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024e8b:	43                   	inc    ebx
c0024e8c:	83 fb 01             	cmp    ebx,0x1
c0024e8f:	77 06                	ja     c0024e97 <__cmpdf2+0x92>
c0024e91:	89 fb                	mov    ebx,edi
c0024e93:	09 cb                	or     ebx,ecx
c0024e95:	75 54                	jne    c0024eeb <__cmpdf2+0xe6>
c0024e97:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024e9a:	09 f8                	or     eax,edi
c0024e9c:	09 c8                	or     eax,ecx
c0024e9e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0024ea1:	75 12                	jne    c0024eb5 <__cmpdf2+0xb0>
c0024ea3:	8d 42 01             	lea    eax,[edx+0x1]
c0024ea6:	83 f8 01             	cmp    eax,0x1
c0024ea9:	77 0a                	ja     c0024eb5 <__cmpdf2+0xb0>
c0024eab:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024eae:	31 c0                	xor    eax,eax
c0024eb0:	83 fb 01             	cmp    ebx,0x1
c0024eb3:	76 36                	jbe    c0024eeb <__cmpdf2+0xe6>
c0024eb5:	b8 01 00 00 00       	mov    eax,0x1
c0024eba:	39 f2                	cmp    edx,esi
c0024ebc:	7f 2d                	jg     c0024eeb <__cmpdf2+0xe6>
c0024ebe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024ec3:	7c 26                	jl     c0024eeb <__cmpdf2+0xe6>
c0024ec5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024ec8:	77 07                	ja     c0024ed1 <__cmpdf2+0xcc>
c0024eca:	72 16                	jb     c0024ee2 <__cmpdf2+0xdd>
c0024ecc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0024ecf:	76 0a                	jbe    c0024edb <__cmpdf2+0xd6>
c0024ed1:	89 d0                	mov    eax,edx
c0024ed3:	c1 f8 1f             	sar    eax,0x1f
c0024ed6:	83 c8 01             	or     eax,0x1
c0024ed9:	eb 10                	jmp    c0024eeb <__cmpdf2+0xe6>
c0024edb:	b8 00 00 00 00       	mov    eax,0x0
c0024ee0:	73 09                	jae    c0024eeb <__cmpdf2+0xe6>
c0024ee2:	89 d0                	mov    eax,edx
c0024ee4:	c1 f8 1f             	sar    eax,0x1f
c0024ee7:	83 e0 02             	and    eax,0x2
c0024eea:	48                   	dec    eax
c0024eeb:	83 c4 0c             	add    esp,0xc
c0024eee:	5b                   	pop    ebx
c0024eef:	5e                   	pop    esi
c0024ef0:	5f                   	pop    edi
c0024ef1:	5d                   	pop    ebp
c0024ef2:	c3                   	ret    

c0024ef3 <__eqdf2>:
c0024ef3:	55                   	push   ebp
c0024ef4:	89 e5                	mov    ebp,esp
c0024ef6:	50                   	push   eax
c0024ef7:	6a 01                	push   0x1
c0024ef9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024efc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024eff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024f02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f05:	e8 fb fe ff ff       	call   c0024e05 <__cmpdf2>
c0024f0a:	83 c4 18             	add    esp,0x18
c0024f0d:	c9                   	leave  
c0024f0e:	c3                   	ret    

c0024f0f <__nedf2>:
c0024f0f:	eb e2                	jmp    c0024ef3 <__eqdf2>

c0024f11 <__gtdf2>:
c0024f11:	55                   	push   ebp
c0024f12:	89 e5                	mov    ebp,esp
c0024f14:	50                   	push   eax
c0024f15:	6a ff                	push   0xffffffff
c0024f17:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024f1a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024f1d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024f20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f23:	e8 dd fe ff ff       	call   c0024e05 <__cmpdf2>
c0024f28:	83 c4 18             	add    esp,0x18
c0024f2b:	c9                   	leave  
c0024f2c:	c3                   	ret    

c0024f2d <__gedf2>:
c0024f2d:	eb e2                	jmp    c0024f11 <__gtdf2>

c0024f2f <__ltdf2>:
c0024f2f:	eb c2                	jmp    c0024ef3 <__eqdf2>

c0024f31 <__ledf2>:
c0024f31:	eb c0                	jmp    c0024ef3 <__eqdf2>

c0024f33 <__truncdfsf2>:
c0024f33:	55                   	push   ebp
c0024f34:	89 e5                	mov    ebp,esp
c0024f36:	57                   	push   edi
c0024f37:	56                   	push   esi
c0024f38:	53                   	push   ebx
c0024f39:	83 ec 0c             	sub    esp,0xc
c0024f3c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024f3f:	89 d1                	mov    ecx,edx
c0024f41:	c1 f9 14             	sar    ecx,0x14
c0024f44:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024f47:	89 df                	mov    edi,ebx
c0024f49:	c1 e7 0b             	shl    edi,0xb
c0024f4c:	89 d0                	mov    eax,edx
c0024f4e:	c1 e0 0b             	shl    eax,0xb
c0024f51:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024f56:	c1 eb 15             	shr    ebx,0x15
c0024f59:	09 d8                	or     eax,ebx
c0024f5b:	89 cb                	mov    ebx,ecx
c0024f5d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024f63:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0024f69:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0024f6f:	0f 86 9e 00 00 00    	jbe    c0025013 <__truncdfsf2+0xe0>
c0024f75:	85 db                	test   ebx,ebx
c0024f77:	75 0a                	jne    c0024f83 <__truncdfsf2+0x50>
c0024f79:	c1 fa 17             	sar    edx,0x17
c0024f7c:	30 d2                	xor    dl,dl
c0024f7e:	e9 84 00 00 00       	jmp    c0025007 <__truncdfsf2+0xd4>
c0024f83:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0024f89:	83 fe 83             	cmp    esi,0xffffff83
c0024f8c:	7d 4b                	jge    c0024fd9 <__truncdfsf2+0xa6>
c0024f8e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0024f93:	29 f1                	sub    ecx,esi
c0024f95:	83 f9 1f             	cmp    ecx,0x1f
c0024f98:	7f 6b                	jg     c0025005 <__truncdfsf2+0xd2>
c0024f9a:	0d 00 00 00 80       	or     eax,0x80000000
c0024f9f:	89 c3                	mov    ebx,eax
c0024fa1:	d3 eb                	shr    ebx,cl
c0024fa3:	be 01 00 00 00       	mov    esi,0x1
c0024fa8:	d3 e6                	shl    esi,cl
c0024faa:	4e                   	dec    esi
c0024fab:	21 f0                	and    eax,esi
c0024fad:	09 f8                	or     eax,edi
c0024faf:	0f 95 c0             	setne  al
c0024fb2:	0f b6 c0             	movzx  eax,al
c0024fb5:	09 c3                	or     ebx,eax
c0024fb7:	89 d9                	mov    ecx,ebx
c0024fb9:	c1 e9 08             	shr    ecx,0x8
c0024fbc:	f6 c3 7f             	test   bl,0x7f
c0024fbf:	0f 95 c0             	setne  al
c0024fc2:	09 c8                	or     eax,ecx
c0024fc4:	83 e0 01             	and    eax,0x1
c0024fc7:	c1 eb 07             	shr    ebx,0x7
c0024fca:	21 c3                	and    ebx,eax
c0024fcc:	81 e2 00 00 00 80    	and    edx,0x80000000
c0024fd2:	09 d1                	or     ecx,edx
c0024fd4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0024fd7:	eb 76                	jmp    c002504f <__truncdfsf2+0x11c>
c0024fd9:	83 c6 80             	add    esi,0xffffff80
c0024fdc:	7e 1d                	jle    c0024ffb <__truncdfsf2+0xc8>
c0024fde:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0024fe4:	75 0b                	jne    c0024ff1 <__truncdfsf2+0xbe>
c0024fe6:	09 f8                	or     eax,edi
c0024fe8:	74 09                	je     c0024ff3 <__truncdfsf2+0xc0>
c0024fea:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0024fef:	eb 02                	jmp    c0024ff3 <__truncdfsf2+0xc0>
c0024ff1:	31 c0                	xor    eax,eax
c0024ff3:	c1 fa 17             	sar    edx,0x17
c0024ff6:	80 ca ff             	or     dl,0xff
c0024ff9:	eb 0e                	jmp    c0025009 <__truncdfsf2+0xd6>
c0024ffb:	c1 fa 1f             	sar    edx,0x1f
c0024ffe:	c1 e2 08             	shl    edx,0x8
c0025001:	09 ca                	or     edx,ecx
c0025003:	eb 04                	jmp    c0025009 <__truncdfsf2+0xd6>
c0025005:	31 d2                	xor    edx,edx
c0025007:	31 c0                	xor    eax,eax
c0025009:	c1 e2 17             	shl    edx,0x17
c002500c:	c1 e8 08             	shr    eax,0x8
c002500f:	09 d0                	or     eax,edx
c0025011:	eb 3c                	jmp    c002504f <__truncdfsf2+0x11c>
c0025013:	81 e9 80 03 00 00    	sub    ecx,0x380
c0025019:	89 ca                	mov    edx,ecx
c002501b:	c1 fa 0b             	sar    edx,0xb
c002501e:	c1 e2 08             	shl    edx,0x8
c0025021:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0025024:	31 db                	xor    ebx,ebx
c0025026:	85 ff                	test   edi,edi
c0025028:	0f 95 c3             	setne  bl
c002502b:	09 d8                	or     eax,ebx
c002502d:	89 c3                	mov    ebx,eax
c002502f:	c1 eb 08             	shr    ebx,0x8
c0025032:	a8 7f                	test   al,0x7f
c0025034:	0f 95 c2             	setne  dl
c0025037:	89 d6                	mov    esi,edx
c0025039:	09 de                	or     esi,ebx
c002503b:	83 e6 01             	and    esi,0x1
c002503e:	c1 e8 07             	shr    eax,0x7
c0025041:	21 f0                	and    eax,esi
c0025043:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025046:	09 ca                	or     edx,ecx
c0025048:	c1 e2 17             	shl    edx,0x17
c002504b:	09 da                	or     edx,ebx
c002504d:	01 d0                	add    eax,edx
c002504f:	83 c4 0c             	add    esp,0xc
c0025052:	5b                   	pop    ebx
c0025053:	5e                   	pop    esi
c0025054:	5f                   	pop    edi
c0025055:	5d                   	pop    ebp
c0025056:	c3                   	ret    

c0025057 <__extendsfdf2>:
c0025057:	55                   	push   ebp
c0025058:	89 e5                	mov    ebp,esp
c002505a:	57                   	push   edi
c002505b:	56                   	push   esi
c002505c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002505f:	89 d1                	mov    ecx,edx
c0025061:	c1 f9 17             	sar    ecx,0x17
c0025064:	c1 e2 08             	shl    edx,0x8
c0025067:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002506d:	89 c8                	mov    eax,ecx
c002506f:	80 e4 f8             	and    ah,0xf8
c0025072:	8d 71 01             	lea    esi,[ecx+0x1]
c0025075:	81 e6 fe 00 00 00    	and    esi,0xfe
c002507b:	75 27                	jne    c00250a4 <__extendsfdf2+0x4d>
c002507d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0025083:	75 18                	jne    c002509d <__extendsfdf2+0x46>
c0025085:	85 d2                	test   edx,edx
c0025087:	74 20                	je     c00250a9 <__extendsfdf2+0x52>
c0025089:	41                   	inc    ecx
c002508a:	01 d2                	add    edx,edx
c002508c:	79 fb                	jns    c0025089 <__extendsfdf2+0x32>
c002508e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025094:	29 c8                	sub    eax,ecx
c0025096:	05 81 03 00 00       	add    eax,0x381
c002509b:	eb 0c                	jmp    c00250a9 <__extendsfdf2+0x52>
c002509d:	05 00 07 00 00       	add    eax,0x700
c00250a2:	eb 05                	jmp    c00250a9 <__extendsfdf2+0x52>
c00250a4:	05 80 03 00 00       	add    eax,0x380
c00250a9:	c1 e0 14             	shl    eax,0x14
c00250ac:	89 c1                	mov    ecx,eax
c00250ae:	89 d0                	mov    eax,edx
c00250b0:	c1 e8 0b             	shr    eax,0xb
c00250b3:	09 c1                	or     ecx,eax
c00250b5:	c1 e2 15             	shl    edx,0x15
c00250b8:	89 d0                	mov    eax,edx
c00250ba:	89 ca                	mov    edx,ecx
c00250bc:	5e                   	pop    esi
c00250bd:	5f                   	pop    edi
c00250be:	5d                   	pop    ebp
c00250bf:	c3                   	ret    

c00250c0 <fabs>:
c00250c0:	83 ec 0c             	sub    esp,0xc
c00250c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00250ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00250ce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00250d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00250d7:	dd 04 24             	fld    QWORD PTR [esp]
c00250da:	83 c4 0c             	add    esp,0xc
c00250dd:	c3                   	ret    
c00250de:	66 90                	xchg   ax,ax

c00250e0 <lrint>:
c00250e0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00250e4:	83 ec 04             	sub    esp,0x4
c00250e7:	db 1c 24             	fistp  DWORD PTR [esp]
c00250ea:	58                   	pop    eax
c00250eb:	c3                   	ret    

c00250ec <lrintf>:
c00250ec:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00250f0:	83 ec 04             	sub    esp,0x4
c00250f3:	db 1c 24             	fistp  DWORD PTR [esp]
c00250f6:	58                   	pop    eax
c00250f7:	c3                   	ret    

Disassembly of section .init:

c00250f8 <_init>:
c00250f8:	55                   	push   ebp
c00250f9:	89 e5                	mov    ebp,esp
c00250fb:	e8 18 b0 fd ff       	call   c0000118 <frame_dummy>
c0025100:	e8 63 e0 ff ff       	call   c0023168 <__do_global_ctors_aux>
c0025105:	5d                   	pop    ebp
c0025106:	c3                   	ret    

Disassembly of section .fini:

c0025107 <_fini>:
c0025107:	55                   	push   ebp
c0025108:	89 e5                	mov    ebp,esp
c002510a:	e8 99 af fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002510f:	5d                   	pop    ebp
c0025110:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0025112 <Computer::~Computer()>:
c0025112:	83 ec 0c             	sub    esp,0xc
c0025115:	ba 10 6b 02 c0       	mov    edx,0xc0026b10
c002511a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002511e:	89 10                	mov    DWORD PTR [eax],edx
c0025120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025124:	83 ec 0c             	sub    esp,0xc
c0025127:	50                   	push   eax
c0025128:	e8 c5 e3 fe ff       	call   c00134f2 <Device::~Device()>
c002512d:	83 c4 10             	add    esp,0x10
c0025130:	90                   	nop
c0025131:	83 c4 0c             	add    esp,0xc
c0025134:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0025136 <Computer::~Computer()>:
c0025136:	83 ec 0c             	sub    esp,0xc
c0025139:	83 ec 0c             	sub    esp,0xc
c002513c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025140:	e8 cd ff ff ff       	call   c0025112 <Computer::~Computer()>
c0025145:	83 c4 10             	add    esp,0x10
c0025148:	83 ec 08             	sub    esp,0x8
c002514b:	68 ec 01 00 00       	push   0x1ec
c0025150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025154:	e8 0c d0 fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0025159:	83 c4 10             	add    esp,0x10
c002515c:	83 c4 0c             	add    esp,0xc
c002515f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0025160 <idleCommon()>:
c0025160:	83 ec 0c             	sub    esp,0xc
c0025163:	e8 a4 67 ff ff       	call   c001b90c <lockScheduler()>
c0025168:	e8 db 6a ff ff       	call   c001bc48 <schedule()>
c002516d:	83 c4 0c             	add    esp,0xc
c0025170:	e9 99 67 ff ff       	jmp    c001b90e <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0025176 <LinkedList<UnixFile>::~LinkedList()>:
c0025176:	90                   	nop
c0025177:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0025178 <LinkedList<UnixFile>::LinkedList()>:
c0025178:	83 ec 0c             	sub    esp,0xc
c002517b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002517f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025189:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025194:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002519b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002519f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00251a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00251b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00251bb:	83 ec 0c             	sub    esp,0xc
c00251be:	68 86 6d 02 c0       	push   0xc0026d86
c00251c3:	e8 7d d0 fe ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00251c8:	83 c4 10             	add    esp,0x10
c00251cb:	90                   	nop
c00251cc:	83 c4 0c             	add    esp,0xc
c00251cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00251d0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00251d0:	83 ec 0c             	sub    esp,0xc
c00251d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00251d8:	75 10                	jne    c00251ea <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00251da:	83 ec 0c             	sub    esp,0xc
c00251dd:	68 a0 6d 02 c0       	push   0xc0026da0
c00251e2:	e8 dc 37 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c00251e7:	83 c4 10             	add    esp,0x10
c00251ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00251f0:	85 c0                	test   eax,eax
c00251f2:	74 34                	je     c0025228 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00251f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00251fb:	85 c0                	test   eax,eax
c00251fd:	74 29                	je     c0025228 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00251ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025203:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002520a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002520d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025211:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025215:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002521c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002521f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025226:	eb 65                	jmp    c002528d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002522c:	8b 00                	mov    eax,DWORD PTR [eax]
c002522e:	85 c0                	test   eax,eax
c0025230:	75 4b                	jne    c002527d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025236:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025239:	85 c0                	test   eax,eax
c002523b:	75 40                	jne    c002527d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002523d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025241:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025245:	89 10                	mov    DWORD PTR [eax],edx
c0025247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002524b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002524f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025256:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025259:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025264:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025267:	85 c0                	test   eax,eax
c0025269:	74 22                	je     c002528d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002526b:	83 ec 0c             	sub    esp,0xc
c002526e:	68 c2 6d 02 c0       	push   0xc0026dc2
c0025273:	e8 4b 37 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c0025278:	83 c4 10             	add    esp,0x10
c002527b:	eb 10                	jmp    c002528d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002527d:	83 ec 0c             	sub    esp,0xc
c0025280:	68 cc 6d 02 c0       	push   0xc0026dcc
c0025285:	e8 39 37 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c002528a:	83 c4 10             	add    esp,0x10
c002528d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025291:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025294:	8d 50 01             	lea    edx,[eax+0x1]
c0025297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002529b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002529e:	90                   	nop
c002529f:	83 c4 0c             	add    esp,0xc
c00252a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00252a4 <LinkedList<UnixFile>::getFirstElement()>:
c00252a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00252a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00252aa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00252ac <LinkedList<UnixFile>::removeFirst()>:
c00252ac:	83 ec 0c             	sub    esp,0xc
c00252af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00252b5:	85 c0                	test   eax,eax
c00252b7:	75 12                	jne    c00252cb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00252b9:	83 ec 0c             	sub    esp,0xc
c00252bc:	68 d8 6d 02 c0       	push   0xc0026dd8
c00252c1:	e8 fd 36 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c00252c6:	83 c4 10             	add    esp,0x10
c00252c9:	eb 7e                	jmp    c0025349 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00252cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00252d5:	85 c0                	test   eax,eax
c00252d7:	74 10                	je     c00252e9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00252d9:	83 ec 0c             	sub    esp,0xc
c00252dc:	68 23 6e 02 c0       	push   0xc0026e23
c00252e1:	e8 dd 36 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c00252e6:	83 c4 10             	add    esp,0x10
c00252e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00252ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00252f2:	85 c0                	test   eax,eax
c00252f4:	75 33                	jne    c0025329 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00252f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025304:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002530b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002530f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025312:	83 f8 01             	cmp    eax,0x1
c0025315:	74 21                	je     c0025338 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025317:	83 ec 0c             	sub    esp,0xc
c002531a:	68 fc 6d 02 c0       	push   0xc0026dfc
c002531f:	e8 9f 36 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c0025324:	83 c4 10             	add    esp,0x10
c0025327:	eb 0f                	jmp    c0025338 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002532d:	8b 00                	mov    eax,DWORD PTR [eax]
c002532f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025336:	89 10                	mov    DWORD PTR [eax],edx
c0025338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002533c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002533f:	8d 50 ff             	lea    edx,[eax-0x1]
c0025342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025346:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025349:	83 c4 0c             	add    esp,0xc
c002534c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002534e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002534e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025352:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025355:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0025356 <DriverlessDevice::~DriverlessDevice()>:
c0025356:	ba a4 74 02 c0       	mov    edx,0xc00274a4
c002535b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002535f:	89 10                	mov    DWORD PTR [eax],edx
c0025361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025365:	50                   	push   eax
c0025366:	e8 87 e1 fe ff       	call   c00134f2 <Device::~Device()>
c002536b:	83 c4 04             	add    esp,0x4
c002536e:	90                   	nop
c002536f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0025370 <DriverlessDevice::~DriverlessDevice()>:
c0025370:	83 ec 0c             	sub    esp,0xc
c0025373:	83 ec 0c             	sub    esp,0xc
c0025376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002537a:	e8 d7 ff ff ff       	call   c0025356 <DriverlessDevice::~DriverlessDevice()>
c002537f:	83 c4 10             	add    esp,0x10
c0025382:	83 ec 08             	sub    esp,0x8
c0025385:	68 58 01 00 00       	push   0x158
c002538a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002538e:	e8 d2 cd fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0025393:	83 c4 10             	add    esp,0x10
c0025396:	83 c4 0c             	add    esp,0xc
c0025399:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002539a <LinkedList<Device>::addElement(Device*)>:
c002539a:	83 ec 0c             	sub    esp,0xc
c002539d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00253a2:	75 10                	jne    c00253b4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00253a4:	83 ec 0c             	sub    esp,0xc
c00253a7:	68 a0 6d 02 c0       	push   0xc0026da0
c00253ac:	e8 12 36 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c00253b1:	83 c4 10             	add    esp,0x10
c00253b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00253ba:	85 c0                	test   eax,eax
c00253bc:	74 3a                	je     c00253f8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00253be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00253c5:	85 c0                	test   eax,eax
c00253c7:	74 2f                	je     c00253f8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00253c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00253d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00253d4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00253da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00253e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00253e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00253ec:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00253f6:	eb 68                	jmp    c0025460 <LinkedList<Device>::addElement(Device*)+0xc6>
c00253f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00253fe:	85 c0                	test   eax,eax
c0025400:	75 4e                	jne    c0025450 <LinkedList<Device>::addElement(Device*)+0xb6>
c0025402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025406:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025409:	85 c0                	test   eax,eax
c002540b:	75 43                	jne    c0025450 <LinkedList<Device>::addElement(Device*)+0xb6>
c002540d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025415:	89 10                	mov    DWORD PTR [eax],edx
c0025417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002541b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002541f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025426:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025429:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025437:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002543a:	85 c0                	test   eax,eax
c002543c:	74 22                	je     c0025460 <LinkedList<Device>::addElement(Device*)+0xc6>
c002543e:	83 ec 0c             	sub    esp,0xc
c0025441:	68 c2 6d 02 c0       	push   0xc0026dc2
c0025446:	e8 78 35 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c002544b:	83 c4 10             	add    esp,0x10
c002544e:	eb 10                	jmp    c0025460 <LinkedList<Device>::addElement(Device*)+0xc6>
c0025450:	83 ec 0c             	sub    esp,0xc
c0025453:	68 cc 6d 02 c0       	push   0xc0026dcc
c0025458:	e8 66 35 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c002545d:	83 c4 10             	add    esp,0x10
c0025460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025464:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025467:	8d 50 01             	lea    edx,[eax+0x1]
c002546a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002546e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025471:	90                   	nop
c0025472:	83 c4 0c             	add    esp,0xc
c0025475:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0025476 <LinkedList<Device>::LinkedList()>:
c0025476:	83 ec 0c             	sub    esp,0xc
c0025479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002547d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025487:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002548e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025492:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002549d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00254a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00254ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254b2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00254b9:	83 ec 0c             	sub    esp,0xc
c00254bc:	68 86 6d 02 c0       	push   0xc0026d86
c00254c1:	e8 7f cd fe ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00254c6:	83 c4 10             	add    esp,0x10
c00254c9:	90                   	nop
c00254ca:	83 c4 0c             	add    esp,0xc
c00254cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00254ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00254ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00254d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00254d4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00254d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00254d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00254da:	8b 00                	mov    eax,DWORD PTR [eax]
c00254dc:	85 c0                	test   eax,eax
c00254de:	75 0e                	jne    c00254ee <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00254e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00254e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00254e7:	85 c0                	test   eax,eax
c00254e9:	75 03                	jne    c00254ee <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00254eb:	b0 01                	mov    al,0x1
c00254ed:	c3                   	ret    
c00254ee:	b0 00                	mov    al,0x0
c00254f0:	90                   	nop
c00254f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00254f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00254f2:	83 ec 0c             	sub    esp,0xc
c00254f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00254fb:	85 c0                	test   eax,eax
c00254fd:	75 15                	jne    c0025514 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00254ff:	83 ec 0c             	sub    esp,0xc
c0025502:	68 d8 6d 02 c0       	push   0xc0026dd8
c0025507:	e8 b7 34 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c002550c:	83 c4 10             	add    esp,0x10
c002550f:	e9 88 00 00 00       	jmp    c002559c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0025514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025518:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002551b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002551e:	85 c0                	test   eax,eax
c0025520:	0f 95 c0             	setne  al
c0025523:	84 c0                	test   al,al
c0025525:	74 10                	je     c0025537 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0025527:	83 ec 0c             	sub    esp,0xc
c002552a:	68 23 6e 02 c0       	push   0xc0026e23
c002552f:	e8 8f 34 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c0025534:	83 c4 10             	add    esp,0x10
c0025537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002553b:	8b 00                	mov    eax,DWORD PTR [eax]
c002553d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025540:	85 c0                	test   eax,eax
c0025542:	0f 94 c0             	sete   al
c0025545:	84 c0                	test   al,al
c0025547:	74 33                	je     c002557c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0025549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002554d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025557:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002555e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025562:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025565:	83 f8 01             	cmp    eax,0x1
c0025568:	74 21                	je     c002558b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002556a:	83 ec 0c             	sub    esp,0xc
c002556d:	68 fc 6d 02 c0       	push   0xc0026dfc
c0025572:	e8 4c 34 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c0025577:	83 c4 10             	add    esp,0x10
c002557a:	eb 0f                	jmp    c002558b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002557c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025580:	8b 00                	mov    eax,DWORD PTR [eax]
c0025582:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025589:	89 10                	mov    DWORD PTR [eax],edx
c002558b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002558f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025592:	8d 50 ff             	lea    edx,[eax-0x1]
c0025595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025599:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002559c:	83 c4 0c             	add    esp,0xc
c002559f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00255a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00255a0:	83 ec 0c             	sub    esp,0xc
c00255a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00255a8:	75 10                	jne    c00255ba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00255aa:	83 ec 0c             	sub    esp,0xc
c00255ad:	68 a0 6d 02 c0       	push   0xc0026da0
c00255b2:	e8 0c 34 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c00255b7:	83 c4 10             	add    esp,0x10
c00255ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255be:	8b 00                	mov    eax,DWORD PTR [eax]
c00255c0:	85 c0                	test   eax,eax
c00255c2:	74 34                	je     c00255f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00255c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255cb:	85 c0                	test   eax,eax
c00255cd:	74 29                	je     c00255f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00255cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00255da:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00255dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00255e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00255e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255ef:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00255f6:	eb 65                	jmp    c002565d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00255f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00255fe:	85 c0                	test   eax,eax
c0025600:	75 4b                	jne    c002564d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0025602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025606:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025609:	85 c0                	test   eax,eax
c002560b:	75 40                	jne    c002564d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002560d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025611:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025615:	89 10                	mov    DWORD PTR [eax],edx
c0025617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002561b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002561f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025626:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025629:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025634:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025637:	85 c0                	test   eax,eax
c0025639:	74 22                	je     c002565d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002563b:	83 ec 0c             	sub    esp,0xc
c002563e:	68 c2 6d 02 c0       	push   0xc0026dc2
c0025643:	e8 7b 33 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c0025648:	83 c4 10             	add    esp,0x10
c002564b:	eb 10                	jmp    c002565d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002564d:	83 ec 0c             	sub    esp,0xc
c0025650:	68 cc 6d 02 c0       	push   0xc0026dcc
c0025655:	e8 69 33 ff ff       	call   c00189c3 <Krnl::panic(char const*)>
c002565a:	83 c4 10             	add    esp,0x10
c002565d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025661:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025664:	8d 50 01             	lea    edx,[eax+0x1]
c0025667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002566b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002566e:	90                   	nop
c002566f:	83 c4 0c             	add    esp,0xc
c0025672:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0025674 <ACPI::~ACPI()>:
c0025674:	83 ec 0c             	sub    esp,0xc
c0025677:	ba 70 7c 02 c0       	mov    edx,0xc0027c70
c002567c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025680:	89 10                	mov    DWORD PTR [eax],edx
c0025682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025686:	83 ec 0c             	sub    esp,0xc
c0025689:	50                   	push   eax
c002568a:	e8 63 de fe ff       	call   c00134f2 <Device::~Device()>
c002568f:	83 c4 10             	add    esp,0x10
c0025692:	90                   	nop
c0025693:	83 c4 0c             	add    esp,0xc
c0025696:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0025698 <ACPI::~ACPI()>:
c0025698:	83 ec 0c             	sub    esp,0xc
c002569b:	83 ec 0c             	sub    esp,0xc
c002569e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00256a2:	e8 cd ff ff ff       	call   c0025674 <ACPI::~ACPI()>
c00256a7:	83 c4 10             	add    esp,0x10
c00256aa:	83 ec 08             	sub    esp,0x8
c00256ad:	68 68 22 00 00       	push   0x2268
c00256b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00256b6:	e8 aa ca fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c00256bb:	83 c4 10             	add    esp,0x10
c00256be:	83 c4 0c             	add    esp,0xc
c00256c1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00256c2 <CPU::~CPU()>:
c00256c2:	83 ec 0c             	sub    esp,0xc
c00256c5:	ba 60 80 02 c0       	mov    edx,0xc0028060
c00256ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256ce:	89 10                	mov    DWORD PTR [eax],edx
c00256d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256d4:	83 ec 0c             	sub    esp,0xc
c00256d7:	50                   	push   eax
c00256d8:	e8 15 de fe ff       	call   c00134f2 <Device::~Device()>
c00256dd:	83 c4 10             	add    esp,0x10
c00256e0:	90                   	nop
c00256e1:	83 c4 0c             	add    esp,0xc
c00256e4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00256e6 <CPU::~CPU()>:
c00256e6:	83 ec 0c             	sub    esp,0xc
c00256e9:	83 ec 0c             	sub    esp,0xc
c00256ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00256f0:	e8 cd ff ff ff       	call   c00256c2 <CPU::~CPU()>
c00256f5:	83 c4 10             	add    esp,0x10
c00256f8:	83 ec 08             	sub    esp,0x8
c00256fb:	68 98 11 00 00       	push   0x1198
c0025700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025704:	e8 5c ca fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0025709:	83 c4 10             	add    esp,0x10
c002570c:	83 c4 0c             	add    esp,0xc
c002570f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0025710 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0025710:	90                   	nop
c0025711:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0025712 <ThreadControlBlock::ThreadControlBlock()>:
c0025712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025716:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002571d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025721:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0025728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002572c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0025733:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025737:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002573e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025742:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0025746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002574a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002574e:	90                   	nop
c002574f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0025750 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0025750:	83 ec 0c             	sub    esp,0xc
c0025753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025757:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002575d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025761:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002576c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025777:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002577d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025781:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002578c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025793:	83 ec 0c             	sub    esp,0xc
c0025796:	68 86 6d 02 c0       	push   0xc0026d86
c002579b:	e8 a5 ca fe ff       	call   c0012245 <Dbg::kprintf(char const*, ...)>
c00257a0:	83 c4 10             	add    esp,0x10
c00257a3:	90                   	nop
c00257a4:	83 c4 0c             	add    esp,0xc
c00257a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00257a8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00257a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00257ac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00257af:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00257b0 <Vm::_FPUState::_FPUState()>:
c00257b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00257b4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00257bb:	90                   	nop
c00257bc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00257be <PCI::~PCI()>:
c00257be:	83 ec 0c             	sub    esp,0xc
c00257c1:	ba 68 8d 02 c0       	mov    edx,0xc0028d68
c00257c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257ca:	89 10                	mov    DWORD PTR [eax],edx
c00257cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257d0:	83 ec 0c             	sub    esp,0xc
c00257d3:	50                   	push   eax
c00257d4:	e8 29 d7 fe ff       	call   c0012f02 <Bus::~Bus()>
c00257d9:	83 c4 10             	add    esp,0x10
c00257dc:	90                   	nop
c00257dd:	83 c4 0c             	add    esp,0xc
c00257e0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00257e2 <PCI::~PCI()>:
c00257e2:	83 ec 0c             	sub    esp,0xc
c00257e5:	83 ec 0c             	sub    esp,0xc
c00257e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257ec:	e8 cd ff ff ff       	call   c00257be <PCI::~PCI()>
c00257f1:	83 c4 10             	add    esp,0x10
c00257f4:	83 ec 08             	sub    esp,0x8
c00257f7:	68 58 01 00 00       	push   0x158
c00257fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025800:	e8 60 c9 fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0025805:	83 c4 10             	add    esp,0x10
c0025808:	83 c4 0c             	add    esp,0xc
c002580b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002580c <IDE::~IDE()>:
c002580c:	83 ec 0c             	sub    esp,0xc
c002580f:	ba cc 8f 02 c0       	mov    edx,0xc0028fcc
c0025814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025818:	89 10                	mov    DWORD PTR [eax],edx
c002581a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002581e:	83 ec 0c             	sub    esp,0xc
c0025821:	50                   	push   eax
c0025822:	e8 b1 e1 fe ff       	call   c00139d8 <HardDiskController::~HardDiskController()>
c0025827:	83 c4 10             	add    esp,0x10
c002582a:	90                   	nop
c002582b:	83 c4 0c             	add    esp,0xc
c002582e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0025830 <IDE::~IDE()>:
c0025830:	83 ec 0c             	sub    esp,0xc
c0025833:	83 ec 0c             	sub    esp,0xc
c0025836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002583a:	e8 cd ff ff ff       	call   c002580c <IDE::~IDE()>
c002583f:	83 c4 10             	add    esp,0x10
c0025842:	83 ec 08             	sub    esp,0x8
c0025845:	68 70 02 00 00       	push   0x270
c002584a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002584e:	e8 12 c9 fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0025853:	83 c4 10             	add    esp,0x10
c0025856:	83 c4 0c             	add    esp,0xc
c0025859:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002585a <ATA::~ATA()>:
c002585a:	83 ec 0c             	sub    esp,0xc
c002585d:	ba 1c 90 02 c0       	mov    edx,0xc002901c
c0025862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025866:	89 10                	mov    DWORD PTR [eax],edx
c0025868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002586c:	83 ec 0c             	sub    esp,0xc
c002586f:	50                   	push   eax
c0025870:	e8 41 e2 fe ff       	call   c0013ab6 <PhysicalDisk::~PhysicalDisk()>
c0025875:	83 c4 10             	add    esp,0x10
c0025878:	90                   	nop
c0025879:	83 c4 0c             	add    esp,0xc
c002587c:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002587e <ATA::~ATA()>:
c002587e:	83 ec 0c             	sub    esp,0xc
c0025881:	83 ec 0c             	sub    esp,0xc
c0025884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025888:	e8 cd ff ff ff       	call   c002585a <ATA::~ATA()>
c002588d:	83 c4 10             	add    esp,0x10
c0025890:	83 ec 08             	sub    esp,0x8
c0025893:	68 7c 01 00 00       	push   0x17c
c0025898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002589c:	e8 c4 c8 fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c00258a1:	83 c4 10             	add    esp,0x10
c00258a4:	83 c4 0c             	add    esp,0xc
c00258a7:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00258a8 <ATAPI::~ATAPI()>:
c00258a8:	83 ec 0c             	sub    esp,0xc
c00258ab:	ba 88 90 02 c0       	mov    edx,0xc0029088
c00258b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258b4:	89 10                	mov    DWORD PTR [eax],edx
c00258b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258ba:	83 ec 0c             	sub    esp,0xc
c00258bd:	50                   	push   eax
c00258be:	e8 f3 e1 fe ff       	call   c0013ab6 <PhysicalDisk::~PhysicalDisk()>
c00258c3:	83 c4 10             	add    esp,0x10
c00258c6:	90                   	nop
c00258c7:	83 c4 0c             	add    esp,0xc
c00258ca:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00258cc <ATAPI::~ATAPI()>:
c00258cc:	83 ec 0c             	sub    esp,0xc
c00258cf:	83 ec 0c             	sub    esp,0xc
c00258d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258d6:	e8 cd ff ff ff       	call   c00258a8 <ATAPI::~ATAPI()>
c00258db:	83 c4 10             	add    esp,0x10
c00258de:	83 ec 08             	sub    esp,0x8
c00258e1:	68 80 01 00 00       	push   0x180
c00258e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258ea:	e8 76 c8 fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c00258ef:	83 c4 10             	add    esp,0x10
c00258f2:	83 c4 0c             	add    esp,0xc
c00258f5:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00258f6 <AVX::~AVX()>:
c00258f6:	83 ec 0c             	sub    esp,0xc
c00258f9:	ba c4 90 02 c0       	mov    edx,0xc00290c4
c00258fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025902:	89 10                	mov    DWORD PTR [eax],edx
c0025904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025908:	83 ec 0c             	sub    esp,0xc
c002590b:	50                   	push   eax
c002590c:	e8 29 e2 fe ff       	call   c0013b3a <FPU::~FPU()>
c0025911:	83 c4 10             	add    esp,0x10
c0025914:	90                   	nop
c0025915:	83 c4 0c             	add    esp,0xc
c0025918:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c002591a <AVX::~AVX()>:
c002591a:	83 ec 0c             	sub    esp,0xc
c002591d:	83 ec 0c             	sub    esp,0xc
c0025920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025924:	e8 cd ff ff ff       	call   c00258f6 <AVX::~AVX()>
c0025929:	83 c4 10             	add    esp,0x10
c002592c:	83 ec 08             	sub    esp,0x8
c002592f:	68 58 01 00 00       	push   0x158
c0025934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025938:	e8 28 c8 fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c002593d:	83 c4 10             	add    esp,0x10
c0025940:	83 c4 0c             	add    esp,0xc
c0025943:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0025944 <MMX::~MMX()>:
c0025944:	83 ec 0c             	sub    esp,0xc
c0025947:	ba 04 91 02 c0       	mov    edx,0xc0029104
c002594c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025950:	89 10                	mov    DWORD PTR [eax],edx
c0025952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025956:	83 ec 0c             	sub    esp,0xc
c0025959:	50                   	push   eax
c002595a:	e8 db e1 fe ff       	call   c0013b3a <FPU::~FPU()>
c002595f:	83 c4 10             	add    esp,0x10
c0025962:	90                   	nop
c0025963:	83 c4 0c             	add    esp,0xc
c0025966:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0025968 <MMX::~MMX()>:
c0025968:	83 ec 0c             	sub    esp,0xc
c002596b:	83 ec 0c             	sub    esp,0xc
c002596e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025972:	e8 cd ff ff ff       	call   c0025944 <MMX::~MMX()>
c0025977:	83 c4 10             	add    esp,0x10
c002597a:	83 ec 08             	sub    esp,0x8
c002597d:	68 58 01 00 00       	push   0x158
c0025982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025986:	e8 da c7 fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c002598b:	83 c4 10             	add    esp,0x10
c002598e:	83 c4 0c             	add    esp,0xc
c0025991:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0025992 <SSE::~SSE()>:
c0025992:	83 ec 0c             	sub    esp,0xc
c0025995:	ba 44 91 02 c0       	mov    edx,0xc0029144
c002599a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002599e:	89 10                	mov    DWORD PTR [eax],edx
c00259a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259a4:	83 ec 0c             	sub    esp,0xc
c00259a7:	50                   	push   eax
c00259a8:	e8 8d e1 fe ff       	call   c0013b3a <FPU::~FPU()>
c00259ad:	83 c4 10             	add    esp,0x10
c00259b0:	90                   	nop
c00259b1:	83 c4 0c             	add    esp,0xc
c00259b4:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00259b6 <SSE::~SSE()>:
c00259b6:	83 ec 0c             	sub    esp,0xc
c00259b9:	83 ec 0c             	sub    esp,0xc
c00259bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259c0:	e8 cd ff ff ff       	call   c0025992 <SSE::~SSE()>
c00259c5:	83 c4 10             	add    esp,0x10
c00259c8:	83 ec 08             	sub    esp,0x8
c00259cb:	68 58 01 00 00       	push   0x158
c00259d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259d4:	e8 8c c7 fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c00259d9:	83 c4 10             	add    esp,0x10
c00259dc:	83 c4 0c             	add    esp,0xc
c00259df:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00259e0 <x87::~x87()>:
c00259e0:	83 ec 0c             	sub    esp,0xc
c00259e3:	ba 84 91 02 c0       	mov    edx,0xc0029184
c00259e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ec:	89 10                	mov    DWORD PTR [eax],edx
c00259ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259f2:	83 ec 0c             	sub    esp,0xc
c00259f5:	50                   	push   eax
c00259f6:	e8 3f e1 fe ff       	call   c0013b3a <FPU::~FPU()>
c00259fb:	83 c4 10             	add    esp,0x10
c00259fe:	90                   	nop
c00259ff:	83 c4 0c             	add    esp,0xc
c0025a02:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0025a04 <x87::~x87()>:
c0025a04:	83 ec 0c             	sub    esp,0xc
c0025a07:	83 ec 0c             	sub    esp,0xc
c0025a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a0e:	e8 cd ff ff ff       	call   c00259e0 <x87::~x87()>
c0025a13:	83 c4 10             	add    esp,0x10
c0025a16:	83 ec 08             	sub    esp,0x8
c0025a19:	68 58 01 00 00       	push   0x158
c0025a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a22:	e8 3e c7 fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0025a27:	83 c4 10             	add    esp,0x10
c0025a2a:	83 c4 0c             	add    esp,0xc
c0025a2d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0025a2e <IOAPIC::~IOAPIC()>:
c0025a2e:	83 ec 0c             	sub    esp,0xc
c0025a31:	ba dc 92 02 c0       	mov    edx,0xc00292dc
c0025a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a3a:	89 10                	mov    DWORD PTR [eax],edx
c0025a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a40:	83 ec 0c             	sub    esp,0xc
c0025a43:	50                   	push   eax
c0025a44:	e8 a9 da fe ff       	call   c00134f2 <Device::~Device()>
c0025a49:	83 c4 10             	add    esp,0x10
c0025a4c:	90                   	nop
c0025a4d:	83 c4 0c             	add    esp,0xc
c0025a50:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0025a52 <IOAPIC::~IOAPIC()>:
c0025a52:	83 ec 0c             	sub    esp,0xc
c0025a55:	83 ec 0c             	sub    esp,0xc
c0025a58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a5c:	e8 cd ff ff ff       	call   c0025a2e <IOAPIC::~IOAPIC()>
c0025a61:	83 c4 10             	add    esp,0x10
c0025a64:	83 ec 08             	sub    esp,0x8
c0025a67:	68 68 01 00 00       	push   0x168
c0025a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a70:	e8 f0 c6 fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0025a75:	83 c4 10             	add    esp,0x10
c0025a78:	83 c4 0c             	add    esp,0xc
c0025a7b:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0025a7c <APIC::~APIC()>:
c0025a7c:	83 ec 0c             	sub    esp,0xc
c0025a7f:	ba 94 92 02 c0       	mov    edx,0xc0029294
c0025a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a88:	89 10                	mov    DWORD PTR [eax],edx
c0025a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a8e:	83 ec 0c             	sub    esp,0xc
c0025a91:	50                   	push   eax
c0025a92:	e8 6d e5 fe ff       	call   c0014004 <InterruptController::~InterruptController()>
c0025a97:	83 c4 10             	add    esp,0x10
c0025a9a:	90                   	nop
c0025a9b:	83 c4 0c             	add    esp,0xc
c0025a9e:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0025aa0 <APIC::~APIC()>:
c0025aa0:	83 ec 0c             	sub    esp,0xc
c0025aa3:	83 ec 0c             	sub    esp,0xc
c0025aa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025aaa:	e8 cd ff ff ff       	call   c0025a7c <APIC::~APIC()>
c0025aaf:	83 c4 10             	add    esp,0x10
c0025ab2:	83 ec 08             	sub    esp,0x8
c0025ab5:	68 58 21 00 00       	push   0x2158
c0025aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025abe:	e8 a2 c6 fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0025ac3:	83 c4 10             	add    esp,0x10
c0025ac6:	83 c4 0c             	add    esp,0xc
c0025ac9:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0025aca <PIC::~PIC()>:
c0025aca:	83 ec 0c             	sub    esp,0xc
c0025acd:	ba 2c 93 02 c0       	mov    edx,0xc002932c
c0025ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ad6:	89 10                	mov    DWORD PTR [eax],edx
c0025ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025adc:	83 ec 0c             	sub    esp,0xc
c0025adf:	50                   	push   eax
c0025ae0:	e8 1f e5 fe ff       	call   c0014004 <InterruptController::~InterruptController()>
c0025ae5:	83 c4 10             	add    esp,0x10
c0025ae8:	90                   	nop
c0025ae9:	83 c4 0c             	add    esp,0xc
c0025aec:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0025aee <PIC::~PIC()>:
c0025aee:	83 ec 0c             	sub    esp,0xc
c0025af1:	83 ec 0c             	sub    esp,0xc
c0025af4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025af8:	e8 cd ff ff ff       	call   c0025aca <PIC::~PIC()>
c0025afd:	83 c4 10             	add    esp,0x10
c0025b00:	83 ec 08             	sub    esp,0x8
c0025b03:	68 58 21 00 00       	push   0x2158
c0025b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b0c:	e8 54 c6 fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0025b11:	83 c4 10             	add    esp,0x10
c0025b14:	83 c4 0c             	add    esp,0xc
c0025b17:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0025b18 <APICTimer::~APICTimer()>:
c0025b18:	83 ec 0c             	sub    esp,0xc
c0025b1b:	ba 80 93 02 c0       	mov    edx,0xc0029380
c0025b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b24:	89 10                	mov    DWORD PTR [eax],edx
c0025b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b2a:	83 ec 0c             	sub    esp,0xc
c0025b2d:	50                   	push   eax
c0025b2e:	e8 c3 01 ff ff       	call   c0015cf6 <Timer::~Timer()>
c0025b33:	83 c4 10             	add    esp,0x10
c0025b36:	90                   	nop
c0025b37:	83 c4 0c             	add    esp,0xc
c0025b3a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0025b3c <APICTimer::~APICTimer()>:
c0025b3c:	83 ec 0c             	sub    esp,0xc
c0025b3f:	83 ec 0c             	sub    esp,0xc
c0025b42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b46:	e8 cd ff ff ff       	call   c0025b18 <APICTimer::~APICTimer()>
c0025b4b:	83 c4 10             	add    esp,0x10
c0025b4e:	83 ec 08             	sub    esp,0x8
c0025b51:	68 60 01 00 00       	push   0x160
c0025b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b5a:	e8 06 c6 fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0025b5f:	83 c4 10             	add    esp,0x10
c0025b62:	83 c4 0c             	add    esp,0xc
c0025b65:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0025b66 <PIT::~PIT()>:
c0025b66:	83 ec 0c             	sub    esp,0xc
c0025b69:	ba d0 93 02 c0       	mov    edx,0xc00293d0
c0025b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b72:	89 10                	mov    DWORD PTR [eax],edx
c0025b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b78:	83 ec 0c             	sub    esp,0xc
c0025b7b:	50                   	push   eax
c0025b7c:	e8 75 01 ff ff       	call   c0015cf6 <Timer::~Timer()>
c0025b81:	83 c4 10             	add    esp,0x10
c0025b84:	90                   	nop
c0025b85:	83 c4 0c             	add    esp,0xc
c0025b88:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0025b8a <PIT::~PIT()>:
c0025b8a:	83 ec 0c             	sub    esp,0xc
c0025b8d:	83 ec 0c             	sub    esp,0xc
c0025b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b94:	e8 cd ff ff ff       	call   c0025b66 <PIT::~PIT()>
c0025b99:	83 c4 10             	add    esp,0x10
c0025b9c:	83 ec 08             	sub    esp,0x8
c0025b9f:	68 5c 01 00 00       	push   0x15c
c0025ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ba8:	e8 b8 c5 fe ff       	call   c0012165 <operator delete(void*, unsigned long)>
c0025bad:	83 c4 10             	add    esp,0x10
c0025bb0:	83 c4 0c             	add    esp,0xc
c0025bb3:	c3                   	ret    
